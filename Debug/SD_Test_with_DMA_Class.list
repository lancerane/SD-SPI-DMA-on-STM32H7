
SD_Test_with_DMA_Class.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb08  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  0800cda8  0800cda8  0001cda8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cff8  0800cff8  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800cff8  0800cff8  0001cff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d000  0800d000  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d000  0800d000  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800d008  0800d008  0001d008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  24000000  0800d010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e84  24000094  0800d0a4  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000f18  0800d0a4  00020f18  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002710d  00000000  00000000  000200c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000040b5  00000000  00000000  000471cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c8  00000000  00000000  0004b288  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f60  00000000  00000000  0004c350  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003b880  00000000  00000000  0004d2b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013500  00000000  00000000  00088b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0015d6b6  00000000  00000000  0009c030  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f96e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047f0  00000000  00000000  001f9764  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000094 	.word	0x24000094
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800cd90 	.word	0x0800cd90

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000098 	.word	0x24000098
 80002dc:	0800cd90 	.word	0x0800cd90

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <_ZN6FatDMA10initialiseEv>:

#include "FatDMA.h"
#include "diskio.h"


void FatDMA::initialise() {
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  // MX DMA Init stuff
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000698:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <_ZN6FatDMA10initialiseEv+0x40>)
 800069a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800069e:	4a0c      	ldr	r2, [pc, #48]	; (80006d0 <_ZN6FatDMA10initialiseEv+0x40>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <_ZN6FatDMA10initialiseEv+0x40>)
 80006aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	200b      	movs	r0, #11
 80006bc:	f001 f8eb 	bl	8001896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006c0:	200b      	movs	r0, #11
 80006c2:	f001 f902 	bl	80018ca <HAL_NVIC_EnableIRQ>



}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	58024400 	.word	0x58024400

080006d4 <_ZN6FatDMA7f_writeEP3FILPKvjPj>:

FRESULT FatDMA::f_write (FIL* fp, const void* buff, UINT btw, UINT* bw){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
 80006e0:	603b      	str	r3, [r7, #0]
  DMAReady = false;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
  this->bw = bw;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	69ba      	ldr	r2, [r7, #24]
 80006ec:	609a      	str	r2, [r3, #8]
  return f_write_dma_start(fp, buff, btw);
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	68b9      	ldr	r1, [r7, #8]
 80006f4:	68f8      	ldr	r0, [r7, #12]
 80006f6:	f00b fb63 	bl	800bdc0 <_ZN6FatDMA17f_write_dma_startEP3FILPKvj>
 80006fa:	4603      	mov	r3, r0


}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <_ZN6FatDMA16on_block_writtenEv>:

int FatDMA::on_block_written(){ //1: ok; 0 err
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

  if (blocksLeft == 1) {
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000712:	2b01      	cmp	r3, #1
 8000714:	d115      	bne.n	8000742 <_ZN6FatDMA16on_block_writtenEv+0x3e>
    blocksLeft --;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	FRESULT res = f_write_dma_cplt();
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f00b fd5b 	bl	800c1e0 <_ZN6FatDMA16f_write_dma_cpltEv>
 800072a:	4603      	mov	r3, r0
 800072c:	73fb      	strb	r3, [r7, #15]
	DMAReady = true;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2201      	movs	r2, #1
 8000732:	701a      	strb	r2, [r3, #0]
	return res == FR_OK ? 1 : 0;
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d101      	bne.n	800073e <_ZN6FatDMA16on_block_writtenEv+0x3a>
 800073a:	2301      	movs	r3, #1
 800073c:	e013      	b.n	8000766 <_ZN6FatDMA16on_block_writtenEv+0x62>
 800073e:	2300      	movs	r3, #0
 8000740:	e011      	b.n	8000766 <_ZN6FatDMA16on_block_writtenEv+0x62>
  }


  else {
	xmit_datablock_cplt(); //handshake
 8000742:	f008 fc73 	bl	800902c <_ZN6FatDMA19xmit_datablock_cpltEv>
	blocksLeft--;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800074c:	1e5a      	subs	r2, r3, #1
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	return xmit_datablock(nextBuff, 0xFC);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800075a:	22fc      	movs	r2, #252	; 0xfc
 800075c:	4619      	mov	r1, r3
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f008 fc2c 	bl	8008fbc <_ZN6FatDMA14xmit_datablockEPKhh>
 8000764:	4603      	mov	r3, r0

  }

}
 8000766:	4618      	mov	r0, r3
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <_ZN6FatDMAC1Ev>:
#ifndef SRC_DMA_H_
#define SRC_DMA_H_

class FatDMA {
  public:
    FatDMA(){};
 800076e:	b480      	push	{r7}
 8000770:	b083      	sub	sp, #12
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2201      	movs	r2, #1
 800077a:	701a      	strb	r2, [r3, #0]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2200      	movs	r2, #0
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2200      	movs	r2, #0
 8000786:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4618      	mov	r0, r3
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <_ZN6FatDMAD1Ev>:
    void initialise();
    FRESULT f_write (FIL* fp, const void* buff, UINT btw, UINT* bw);
    FRESULT f_write_dma_cplt ();
    int on_block_written();

    ~FatDMA(){};
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4618      	mov	r0, r3
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
	...

080007b0 <_Z8myprintfPKcz>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 80007b0:	b40f      	push	{r0, r1, r2, r3}
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	693a      	ldr	r2, [r7, #16]
 80007c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c6:	480b      	ldr	r0, [pc, #44]	; (80007f4 <_Z8myprintfPKcz+0x44>)
 80007c8:	f00b fef8 	bl	800c5bc <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80007cc:	4809      	ldr	r0, [pc, #36]	; (80007f4 <_Z8myprintfPKcz+0x44>)
 80007ce:	f7ff fd87 	bl	80002e0 <strlen>
 80007d2:	4603      	mov	r3, r0
 80007d4:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, len, -1);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	b29a      	uxth	r2, r3
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	4905      	ldr	r1, [pc, #20]	; (80007f4 <_Z8myprintfPKcz+0x44>)
 80007e0:	4805      	ldr	r0, [pc, #20]	; (80007f8 <_Z8myprintfPKcz+0x48>)
 80007e2:	f007 f928 	bl	8007a36 <HAL_UART_Transmit>

}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007f0:	b004      	add	sp, #16
 80007f2:	4770      	bx	lr
 80007f4:	2400075c 	.word	0x2400075c
 80007f8:	240001b0 	.word	0x240001b0

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b5b0      	push	{r4, r5, r7, lr}
 80007fe:	b098      	sub	sp, #96	; 0x60
 8000800:	af02      	add	r7, sp, #8
    f_close(&fil);

    //We're done, so de-mount the drive
    f_mount(NULL, "", 0);

    myprintf("done\r\n");
 8000802:	466b      	mov	r3, sp
 8000804:	461d      	mov	r5, r3
  HAL_Init();
 8000806:	f000 feab 	bl	8001560 <HAL_Init>
  SystemClock_Config();
 800080a:	f000 f987 	bl	8000b1c <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 800080e:	f000 fb11 	bl	8000e34 <_ZL12MX_GPIO_Initv>
  fatDma.initialise();
 8000812:	48a7      	ldr	r0, [pc, #668]	; (8000ab0 <main+0x2b4>)
 8000814:	f7ff ff3c 	bl	8000690 <_ZN6FatDMA10initialiseEv>
  MX_USART3_UART_Init();
 8000818:	f000 faac 	bl	8000d74 <_ZL19MX_USART3_UART_Initv>
  MX_SPI3_Init();
 800081c:	f000 fa4e 	bl	8000cbc <_ZL12MX_SPI3_Initv>
  MX_FATFS_Init();
 8000820:	f008 f9d8 	bl	8008bd4 <MX_FATFS_Init>
  myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 8000824:	48a3      	ldr	r0, [pc, #652]	; (8000ab4 <main+0x2b8>)
 8000826:	f7ff ffc3 	bl	80007b0 <_Z8myprintfPKcz>
  HAL_Delay(1000); //a short delay is important to let the SD card settle
 800082a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800082e:	f000 ff29 	bl	8001684 <HAL_Delay>
  fres = f_mount(&FatFs, "", 1); //1=mount now
 8000832:	2201      	movs	r2, #1
 8000834:	49a0      	ldr	r1, [pc, #640]	; (8000ab8 <main+0x2bc>)
 8000836:	48a1      	ldr	r0, [pc, #644]	; (8000abc <main+0x2c0>)
 8000838:	f00a ff64 	bl	800b704 <f_mount>
 800083c:	4603      	mov	r3, r0
 800083e:	461a      	mov	r2, r3
 8000840:	4b9f      	ldr	r3, [pc, #636]	; (8000ac0 <main+0x2c4>)
 8000842:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 8000844:	4b9e      	ldr	r3, [pc, #632]	; (8000ac0 <main+0x2c4>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d006      	beq.n	800085a <main+0x5e>
    myprintf("f_mount error (%i)\r\n", fres);
 800084c:	4b9c      	ldr	r3, [pc, #624]	; (8000ac0 <main+0x2c4>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4619      	mov	r1, r3
 8000852:	489c      	ldr	r0, [pc, #624]	; (8000ac4 <main+0x2c8>)
 8000854:	f7ff ffac 	bl	80007b0 <_Z8myprintfPKcz>
  while(1);
 8000858:	e7fe      	b.n	8000858 <main+0x5c>
  char filename[50] = "newwrite.bin";
 800085a:	4b9b      	ldr	r3, [pc, #620]	; (8000ac8 <main+0x2cc>)
 800085c:	f107 0408 	add.w	r4, r7, #8
 8000860:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000862:	c407      	stmia	r4!, {r0, r1, r2}
 8000864:	7023      	strb	r3, [r4, #0]
 8000866:	f107 0315 	add.w	r3, r7, #21
 800086a:	2225      	movs	r2, #37	; 0x25
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f00b fe6f 	bl	800c552 <memset>
  fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	221a      	movs	r2, #26
 800087a:	4619      	mov	r1, r3
 800087c:	4893      	ldr	r0, [pc, #588]	; (8000acc <main+0x2d0>)
 800087e:	f00a ff87 	bl	800b790 <f_open>
 8000882:	4603      	mov	r3, r0
 8000884:	461a      	mov	r2, r3
 8000886:	4b8e      	ldr	r3, [pc, #568]	; (8000ac0 <main+0x2c4>)
 8000888:	701a      	strb	r2, [r3, #0]
  if(fres == FR_OK) {
 800088a:	4b8d      	ldr	r3, [pc, #564]	; (8000ac0 <main+0x2c4>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d103      	bne.n	800089a <main+0x9e>
    myprintf("file opened\r\n");
 8000892:	488f      	ldr	r0, [pc, #572]	; (8000ad0 <main+0x2d4>)
 8000894:	f7ff ff8c 	bl	80007b0 <_Z8myprintfPKcz>
 8000898:	e005      	b.n	80008a6 <main+0xaa>
    myprintf("f_open error (%i)\r\n", fres);
 800089a:	4b89      	ldr	r3, [pc, #548]	; (8000ac0 <main+0x2c4>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	4619      	mov	r1, r3
 80008a0:	488c      	ldr	r0, [pc, #560]	; (8000ad4 <main+0x2d8>)
 80008a2:	f7ff ff85 	bl	80007b0 <_Z8myprintfPKcz>
  block.data[10].imuData[10] = n_blocks;
 80008a6:	4b8c      	ldr	r3, [pc, #560]	; (8000ad8 <main+0x2dc>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	b21a      	sxth	r2, r3
 80008ac:	4b8b      	ldr	r3, [pc, #556]	; (8000adc <main+0x2e0>)
 80008ae:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
  block_t blocks[n_blocks];
 80008b2:	4b89      	ldr	r3, [pc, #548]	; (8000ad8 <main+0x2dc>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	1e58      	subs	r0, r3, #1
 80008b8:	6538      	str	r0, [r7, #80]	; 0x50
 80008ba:	4603      	mov	r3, r0
 80008bc:	3301      	adds	r3, #1
 80008be:	4619      	mov	r1, r3
 80008c0:	f04f 0200 	mov.w	r2, #0
 80008c4:	f04f 0300 	mov.w	r3, #0
 80008c8:	f04f 0400 	mov.w	r4, #0
 80008cc:	0314      	lsls	r4, r2, #12
 80008ce:	ea44 5411 	orr.w	r4, r4, r1, lsr #20
 80008d2:	030b      	lsls	r3, r1, #12
 80008d4:	4603      	mov	r3, r0
 80008d6:	3301      	adds	r3, #1
 80008d8:	4619      	mov	r1, r3
 80008da:	f04f 0200 	mov.w	r2, #0
 80008de:	f04f 0300 	mov.w	r3, #0
 80008e2:	f04f 0400 	mov.w	r4, #0
 80008e6:	0314      	lsls	r4, r2, #12
 80008e8:	ea44 5411 	orr.w	r4, r4, r1, lsr #20
 80008ec:	030b      	lsls	r3, r1, #12
 80008ee:	4603      	mov	r3, r0
 80008f0:	3301      	adds	r3, #1
 80008f2:	025b      	lsls	r3, r3, #9
 80008f4:	3307      	adds	r3, #7
 80008f6:	08db      	lsrs	r3, r3, #3
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	ebad 0d03 	sub.w	sp, sp, r3
 80008fe:	ab02      	add	r3, sp, #8
 8000900:	3300      	adds	r3, #0
 8000902:	64fb      	str	r3, [r7, #76]	; 0x4c
  blocks[n_blocks - 1] = block;
 8000904:	4b74      	ldr	r3, [pc, #464]	; (8000ad8 <main+0x2dc>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	3b01      	subs	r3, #1
 800090a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800090c:	025b      	lsls	r3, r3, #9
 800090e:	4413      	add	r3, r2
 8000910:	4a72      	ldr	r2, [pc, #456]	; (8000adc <main+0x2e0>)
 8000912:	4618      	mov	r0, r3
 8000914:	4611      	mov	r1, r2
 8000916:	f44f 7300 	mov.w	r3, #512	; 0x200
 800091a:	461a      	mov	r2, r3
 800091c:	f00b fe0e 	bl	800c53c <memcpy>
  myprintf("Starting DMA transfer\r\n");
 8000920:	486f      	ldr	r0, [pc, #444]	; (8000ae0 <main+0x2e4>)
 8000922:	f7ff ff45 	bl	80007b0 <_Z8myprintfPKcz>
  int k = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	657b      	str	r3, [r7, #84]	; 0x54
  int n_iters = 2;
 800092a:	2302      	movs	r3, #2
 800092c:	64bb      	str	r3, [r7, #72]	; 0x48
	  if (fatDma.DMAReady) {
 800092e:	4b60      	ldr	r3, [pc, #384]	; (8000ab0 <main+0x2b4>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d0fb      	beq.n	800092e <main+0x132>
		  myprintf("wrote %dbytes\r\n", bytesWrote);
 8000936:	4b6b      	ldr	r3, [pc, #428]	; (8000ae4 <main+0x2e8>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4619      	mov	r1, r3
 800093c:	486a      	ldr	r0, [pc, #424]	; (8000ae8 <main+0x2ec>)
 800093e:	f7ff ff37 	bl	80007b0 <_Z8myprintfPKcz>
		  fres = fatDma.f_write(&fil, &blocks, n_blocks*512, &bytesWrote); // DMA
 8000942:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000944:	4b64      	ldr	r3, [pc, #400]	; (8000ad8 <main+0x2dc>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	025b      	lsls	r3, r3, #9
 800094a:	4619      	mov	r1, r3
 800094c:	4b65      	ldr	r3, [pc, #404]	; (8000ae4 <main+0x2e8>)
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	460b      	mov	r3, r1
 8000952:	495e      	ldr	r1, [pc, #376]	; (8000acc <main+0x2d0>)
 8000954:	4856      	ldr	r0, [pc, #344]	; (8000ab0 <main+0x2b4>)
 8000956:	f7ff febd 	bl	80006d4 <_ZN6FatDMA7f_writeEP3FILPKvjPj>
 800095a:	4603      	mov	r3, r0
 800095c:	461a      	mov	r2, r3
 800095e:	4b58      	ldr	r3, [pc, #352]	; (8000ac0 <main+0x2c4>)
 8000960:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(150);
 8000962:	2096      	movs	r0, #150	; 0x96
 8000964:	f000 fe8e 	bl	8001684 <HAL_Delay>
		  k++;
 8000968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800096a:	3301      	adds	r3, #1
 800096c:	657b      	str	r3, [r7, #84]	; 0x54
		  if (k == n_iters) break;
 800096e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000972:	429a      	cmp	r2, r3
 8000974:	d000      	beq.n	8000978 <main+0x17c>
	  if (fatDma.DMAReady) {
 8000976:	e7da      	b.n	800092e <main+0x132>
		  if (k == n_iters) break;
 8000978:	bf00      	nop
    f_close(&fil);
 800097a:	4854      	ldr	r0, [pc, #336]	; (8000acc <main+0x2d0>)
 800097c:	f00b fd2d 	bl	800c3da <f_close>
    f_mount(NULL, "", 0);
 8000980:	2200      	movs	r2, #0
 8000982:	494d      	ldr	r1, [pc, #308]	; (8000ab8 <main+0x2bc>)
 8000984:	2000      	movs	r0, #0
 8000986:	f00a febd 	bl	800b704 <f_mount>
    fres = f_mount(&FatFs, "", 1); //1=mount now
 800098a:	2201      	movs	r2, #1
 800098c:	494a      	ldr	r1, [pc, #296]	; (8000ab8 <main+0x2bc>)
 800098e:	484b      	ldr	r0, [pc, #300]	; (8000abc <main+0x2c0>)
 8000990:	f00a feb8 	bl	800b704 <f_mount>
 8000994:	4603      	mov	r3, r0
 8000996:	461a      	mov	r2, r3
 8000998:	4b49      	ldr	r3, [pc, #292]	; (8000ac0 <main+0x2c4>)
 800099a:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 800099c:	4b48      	ldr	r3, [pc, #288]	; (8000ac0 <main+0x2c4>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d006      	beq.n	80009b2 <main+0x1b6>
      myprintf("f_mount error (%i)\r\n", fres);
 80009a4:	4b46      	ldr	r3, [pc, #280]	; (8000ac0 <main+0x2c4>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4619      	mov	r1, r3
 80009aa:	4846      	ldr	r0, [pc, #280]	; (8000ac4 <main+0x2c8>)
 80009ac:	f7ff ff00 	bl	80007b0 <_Z8myprintfPKcz>
    while(1);
 80009b0:	e7fe      	b.n	80009b0 <main+0x1b4>
    fres = f_open(&fil, filename, FA_READ);
 80009b2:	f107 0308 	add.w	r3, r7, #8
 80009b6:	2201      	movs	r2, #1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4844      	ldr	r0, [pc, #272]	; (8000acc <main+0x2d0>)
 80009bc:	f00a fee8 	bl	800b790 <f_open>
 80009c0:	4603      	mov	r3, r0
 80009c2:	461a      	mov	r2, r3
 80009c4:	4b3e      	ldr	r3, [pc, #248]	; (8000ac0 <main+0x2c4>)
 80009c6:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 80009c8:	4b3d      	ldr	r3, [pc, #244]	; (8000ac0 <main+0x2c4>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d003      	beq.n	80009d8 <main+0x1dc>
      myprintf("f_open error (%i)\r\n");
 80009d0:	4840      	ldr	r0, [pc, #256]	; (8000ad4 <main+0x2d8>)
 80009d2:	f7ff feed 	bl	80007b0 <_Z8myprintfPKcz>
      while(1);
 80009d6:	e7fe      	b.n	80009d6 <main+0x1da>
    myprintf("File opened for reading\r\n");
 80009d8:	4844      	ldr	r0, [pc, #272]	; (8000aec <main+0x2f0>)
 80009da:	f7ff fee9 	bl	80007b0 <_Z8myprintfPKcz>
    block_t readBlocks[n_blocks];
 80009de:	4b3e      	ldr	r3, [pc, #248]	; (8000ad8 <main+0x2dc>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	1e58      	subs	r0, r3, #1
 80009e4:	6478      	str	r0, [r7, #68]	; 0x44
 80009e6:	4603      	mov	r3, r0
 80009e8:	3301      	adds	r3, #1
 80009ea:	4619      	mov	r1, r3
 80009ec:	f04f 0200 	mov.w	r2, #0
 80009f0:	f04f 0300 	mov.w	r3, #0
 80009f4:	f04f 0400 	mov.w	r4, #0
 80009f8:	0314      	lsls	r4, r2, #12
 80009fa:	ea44 5411 	orr.w	r4, r4, r1, lsr #20
 80009fe:	030b      	lsls	r3, r1, #12
 8000a00:	4603      	mov	r3, r0
 8000a02:	3301      	adds	r3, #1
 8000a04:	4619      	mov	r1, r3
 8000a06:	f04f 0200 	mov.w	r2, #0
 8000a0a:	f04f 0300 	mov.w	r3, #0
 8000a0e:	f04f 0400 	mov.w	r4, #0
 8000a12:	0314      	lsls	r4, r2, #12
 8000a14:	ea44 5411 	orr.w	r4, r4, r1, lsr #20
 8000a18:	030b      	lsls	r3, r1, #12
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	025b      	lsls	r3, r3, #9
 8000a20:	3307      	adds	r3, #7
 8000a22:	08db      	lsrs	r3, r3, #3
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	ebad 0d03 	sub.w	sp, sp, r3
 8000a2a:	ab02      	add	r3, sp, #8
 8000a2c:	3300      	adds	r3, #0
 8000a2e:	643b      	str	r3, [r7, #64]	; 0x40
    UINT bytesRead = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
    fres = f_read(&fil, &readBlocks, 512*n_blocks, &bytesRead);
 8000a34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000a36:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <main+0x2dc>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	025b      	lsls	r3, r3, #9
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	4822      	ldr	r0, [pc, #136]	; (8000acc <main+0x2d0>)
 8000a42:	f00b f86b 	bl	800bb1c <f_read>
 8000a46:	4603      	mov	r3, r0
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <main+0x2c4>)
 8000a4c:	701a      	strb	r2, [r3, #0]
    if(fres == FR_OK) {
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <main+0x2c4>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d105      	bne.n	8000a62 <main+0x266>
    	myprintf("Read %d bytes\r\n", bytesRead);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4825      	ldr	r0, [pc, #148]	; (8000af0 <main+0x2f4>)
 8000a5c:	f7ff fea8 	bl	80007b0 <_Z8myprintfPKcz>
 8000a60:	e005      	b.n	8000a6e <main+0x272>
    	myprintf("f_read error (%i)\r\n", fres);
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <main+0x2c4>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	4619      	mov	r1, r3
 8000a68:	4822      	ldr	r0, [pc, #136]	; (8000af4 <main+0x2f8>)
 8000a6a:	f7ff fea1 	bl	80007b0 <_Z8myprintfPKcz>
    int val = readBlocks[n_blocks-1].data[10].imuData[10];
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <main+0x2dc>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000a76:	025b      	lsls	r3, r3, #9
 8000a78:	4413      	add	r3, r2
 8000a7a:	f503 73a5 	add.w	r3, r3, #330	; 0x14a
 8000a7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a82:	b21b      	sxth	r3, r3
 8000a84:	63fb      	str	r3, [r7, #60]	; 0x3c
    myprintf("Read value: %d\r\n", val);
 8000a86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000a88:	481b      	ldr	r0, [pc, #108]	; (8000af8 <main+0x2fc>)
 8000a8a:	f7ff fe91 	bl	80007b0 <_Z8myprintfPKcz>
    f_close(&fil);
 8000a8e:	480f      	ldr	r0, [pc, #60]	; (8000acc <main+0x2d0>)
 8000a90:	f00b fca3 	bl	800c3da <f_close>
    f_mount(NULL, "", 0);
 8000a94:	2200      	movs	r2, #0
 8000a96:	4908      	ldr	r1, [pc, #32]	; (8000ab8 <main+0x2bc>)
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f00a fe33 	bl	800b704 <f_mount>
    myprintf("done\r\n");
 8000a9e:	4817      	ldr	r0, [pc, #92]	; (8000afc <main+0x300>)
 8000aa0:	f7ff fe86 	bl	80007b0 <_Z8myprintfPKcz>
 8000aa4:	46ad      	mov	sp, r5



  /* USER CODE END 3 */
}
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3758      	adds	r7, #88	; 0x58
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bdb0      	pop	{r4, r5, r7, pc}
 8000ab0:	240006a4 	.word	0x240006a4
 8000ab4:	0800cda8 	.word	0x0800cda8
 8000ab8:	0800cdc8 	.word	0x0800cdc8
 8000abc:	2400023c 	.word	0x2400023c
 8000ac0:	2400069c 	.word	0x2400069c
 8000ac4:	0800cdcc 	.word	0x0800cdcc
 8000ac8:	0800ce8c 	.word	0x0800ce8c
 8000acc:	2400046c 	.word	0x2400046c
 8000ad0:	0800cde4 	.word	0x0800cde4
 8000ad4:	0800cdf4 	.word	0x0800cdf4
 8000ad8:	24000000 	.word	0x24000000
 8000adc:	2400085c 	.word	0x2400085c
 8000ae0:	0800ce08 	.word	0x0800ce08
 8000ae4:	240006a0 	.word	0x240006a0
 8000ae8:	0800ce20 	.word	0x0800ce20
 8000aec:	0800ce30 	.word	0x0800ce30
 8000af0:	0800ce4c 	.word	0x0800ce4c
 8000af4:	0800ce5c 	.word	0x0800ce5c
 8000af8:	0800ce70 	.word	0x0800ce70
 8000afc:	0800ce84 	.word	0x0800ce84

08000b00 <HAL_SPI_TxCpltCallback>:

//
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef* hspi) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]

  int res = fatDma.on_block_written();
 8000b08:	4803      	ldr	r0, [pc, #12]	; (8000b18 <HAL_SPI_TxCpltCallback+0x18>)
 8000b0a:	f7ff fdfb 	bl	8000704 <_ZN6FatDMA16on_block_writtenEv>
 8000b0e:	60f8      	str	r0, [r7, #12]
//  }
//  else {
//    myprintf( "f_write error (%i)\r\n");
//  }

}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	240006a4 	.word	0x240006a4

08000b1c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b0cc      	sub	sp, #304	; 0x130
 8000b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b22:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b26:	224c      	movs	r2, #76	; 0x4c
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f00b fd11 	bl	800c552 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b30:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b34:	2220      	movs	r2, #32
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f00b fd0a 	bl	800c552 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b3e:	f107 0308 	add.w	r3, r7, #8
 8000b42:	4618      	mov	r0, r3
 8000b44:	23bc      	movs	r3, #188	; 0xbc
 8000b46:	461a      	mov	r2, r3
 8000b48:	2100      	movs	r1, #0
 8000b4a:	f00b fd02 	bl	800c552 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b4e:	2002      	movs	r0, #2
 8000b50:	f003 fbc8 	bl	80042e4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	4b56      	ldr	r3, [pc, #344]	; (8000cb4 <_Z18SystemClock_Configv+0x198>)
 8000b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b5e:	4a55      	ldr	r2, [pc, #340]	; (8000cb4 <_Z18SystemClock_Configv+0x198>)
 8000b60:	f023 0301 	bic.w	r3, r3, #1
 8000b64:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b66:	4b53      	ldr	r3, [pc, #332]	; (8000cb4 <_Z18SystemClock_Configv+0x198>)
 8000b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b6a:	f003 0201 	and.w	r2, r3, #1
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	4b51      	ldr	r3, [pc, #324]	; (8000cb8 <_Z18SystemClock_Configv+0x19c>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b7a:	4a4f      	ldr	r2, [pc, #316]	; (8000cb8 <_Z18SystemClock_Configv+0x19c>)
 8000b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b80:	6193      	str	r3, [r2, #24]
 8000b82:	4b4d      	ldr	r3, [pc, #308]	; (8000cb8 <_Z18SystemClock_Configv+0x19c>)
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b92:	4b49      	ldr	r3, [pc, #292]	; (8000cb8 <_Z18SystemClock_Configv+0x19c>)
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b9e:	bf14      	ite	ne
 8000ba0:	2301      	movne	r3, #1
 8000ba2:	2300      	moveq	r3, #0
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d000      	beq.n	8000bac <_Z18SystemClock_Configv+0x90>
 8000baa:	e7f2      	b.n	8000b92 <_Z18SystemClock_Configv+0x76>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000bac:	2303      	movs	r3, #3
 8000bae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bb2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc0:	2340      	movs	r3, #64	; 0x40
 8000bc2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000bd8:	2318      	movs	r3, #24
 8000bda:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bde:	2302      	movs	r3, #2
 8000be0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000be4:	2304      	movs	r3, #4
 8000be6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bea:	2302      	movs	r3, #2
 8000bec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bf0:	230c      	movs	r3, #12
 8000bf2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c02:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c06:	4618      	mov	r0, r3
 8000c08:	f003 fba6 	bl	8004358 <HAL_RCC_OscConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	bf14      	ite	ne
 8000c12:	2301      	movne	r3, #1
 8000c14:	2300      	moveq	r3, #0
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8000c1c:	f000 fa50 	bl	80010c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c20:	233f      	movs	r3, #63	; 0x3f
 8000c22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c26:	2300      	movs	r3, #0
 8000c28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c50:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f003 ff8e 	bl	8004b78 <HAL_RCC_ClockConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	bf14      	ite	ne
 8000c62:	2301      	movne	r3, #1
 8000c64:	2300      	moveq	r3, #0
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <_Z18SystemClock_Configv+0x154>
  {
    Error_Handler();
 8000c6c:	f000 fa28 	bl	80010c0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SPI3;
 8000c70:	f107 0308 	add.w	r3, r7, #8
 8000c74:	f241 0202 	movw	r2, #4098	; 0x1002
 8000c78:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	2200      	movs	r2, #0
 8000c80:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c82:	f107 0308 	add.w	r3, r7, #8
 8000c86:	2200      	movs	r2, #0
 8000c88:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c8a:	f107 0308 	add.w	r3, r7, #8
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f004 faf6 	bl	8005280 <HAL_RCCEx_PeriphCLKConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	bf14      	ite	ne
 8000c9a:	2301      	movne	r3, #1
 8000c9c:	2300      	moveq	r3, #0
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <_Z18SystemClock_Configv+0x18c>
  {
    Error_Handler();
 8000ca4:	f000 fa0c 	bl	80010c0 <Error_Handler>
  }
}
 8000ca8:	bf00      	nop
 8000caa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	58000400 	.word	0x58000400
 8000cb8:	58024800 	.word	0x58024800

08000cbc <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000cc0:	4b2a      	ldr	r3, [pc, #168]	; (8000d6c <_ZL12MX_SPI3_Initv+0xb0>)
 8000cc2:	4a2b      	ldr	r2, [pc, #172]	; (8000d70 <_ZL12MX_SPI3_Initv+0xb4>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cc6:	4b29      	ldr	r3, [pc, #164]	; (8000d6c <_ZL12MX_SPI3_Initv+0xb0>)
 8000cc8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ccc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000cce:	4b27      	ldr	r3, [pc, #156]	; (8000d6c <_ZL12MX_SPI3_Initv+0xb0>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cd4:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <_ZL12MX_SPI3_Initv+0xb0>)
 8000cd6:	2207      	movs	r2, #7
 8000cd8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cda:	4b24      	ldr	r3, [pc, #144]	; (8000d6c <_ZL12MX_SPI3_Initv+0xb0>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ce0:	4b22      	ldr	r3, [pc, #136]	; (8000d6c <_ZL12MX_SPI3_Initv+0xb0>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ce6:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <_ZL12MX_SPI3_Initv+0xb0>)
 8000ce8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000cec:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000cee:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <_ZL12MX_SPI3_Initv+0xb0>)
 8000cf0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000cf4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cf6:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <_ZL12MX_SPI3_Initv+0xb0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <_ZL12MX_SPI3_Initv+0xb0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <_ZL12MX_SPI3_Initv+0xb0>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <_ZL12MX_SPI3_Initv+0xb0>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d0e:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <_ZL12MX_SPI3_Initv+0xb0>)
 8000d10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d14:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <_ZL12MX_SPI3_Initv+0xb0>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d1c:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <_ZL12MX_SPI3_Initv+0xb0>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d22:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <_ZL12MX_SPI3_Initv+0xb0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d28:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <_ZL12MX_SPI3_Initv+0xb0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <_ZL12MX_SPI3_Initv+0xb0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d34:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <_ZL12MX_SPI3_Initv+0xb0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <_ZL12MX_SPI3_Initv+0xb0>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d40:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <_ZL12MX_SPI3_Initv+0xb0>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <_ZL12MX_SPI3_Initv+0xb0>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d4c:	4807      	ldr	r0, [pc, #28]	; (8000d6c <_ZL12MX_SPI3_Initv+0xb0>)
 8000d4e:	f005 fd97 	bl	8006880 <HAL_SPI_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	bf14      	ite	ne
 8000d58:	2301      	movne	r3, #1
 8000d5a:	2300      	moveq	r3, #0
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <_ZL12MX_SPI3_Initv+0xaa>
  {
    Error_Handler();
 8000d62:	f000 f9ad 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	240000b0 	.word	0x240000b0
 8000d70:	40003c00 	.word	0x40003c00

08000d74 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d78:	4b2c      	ldr	r3, [pc, #176]	; (8000e2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000d7a:	4a2d      	ldr	r2, [pc, #180]	; (8000e30 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000d7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d7e:	4b2b      	ldr	r3, [pc, #172]	; (8000e2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000d80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d86:	4b29      	ldr	r3, [pc, #164]	; (8000e2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d8c:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d92:	4b26      	ldr	r3, [pc, #152]	; (8000e2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d98:	4b24      	ldr	r3, [pc, #144]	; (8000e2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9e:	4b23      	ldr	r3, [pc, #140]	; (8000e2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da4:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000daa:	4b20      	ldr	r3, [pc, #128]	; (8000e2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000db0:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000db6:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dbc:	481b      	ldr	r0, [pc, #108]	; (8000e2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000dbe:	f006 fdea 	bl	8007996 <HAL_UART_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	bf14      	ite	ne
 8000dc8:	2301      	movne	r3, #1
 8000dca:	2300      	moveq	r3, #0
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8000dd2:	f000 f975 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4814      	ldr	r0, [pc, #80]	; (8000e2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000dda:	f007 fe16 	bl	8008a0a <HAL_UARTEx_SetTxFifoThreshold>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	bf14      	ite	ne
 8000de4:	2301      	movne	r3, #1
 8000de6:	2300      	moveq	r3, #0
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8000dee:	f000 f967 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000df2:	2100      	movs	r1, #0
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000df6:	f007 fe46 	bl	8008a86 <HAL_UARTEx_SetRxFifoThreshold>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	bf14      	ite	ne
 8000e00:	2301      	movne	r3, #1
 8000e02:	2300      	moveq	r3, #0
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8000e0a:	f000 f959 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e0e:	4807      	ldr	r0, [pc, #28]	; (8000e2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000e10:	f007 fdc2 	bl	8008998 <HAL_UARTEx_DisableFifoMode>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	bf14      	ite	ne
 8000e1a:	2301      	movne	r3, #1
 8000e1c:	2300      	moveq	r3, #0
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8000e24:	f000 f94c 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	240001b0 	.word	0x240001b0
 8000e30:	40004800 	.word	0x40004800

08000e34 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08c      	sub	sp, #48	; 0x30
 8000e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4a:	4b95      	ldr	r3, [pc, #596]	; (80010a0 <_ZL12MX_GPIO_Initv+0x26c>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e50:	4a93      	ldr	r2, [pc, #588]	; (80010a0 <_ZL12MX_GPIO_Initv+0x26c>)
 8000e52:	f043 0304 	orr.w	r3, r3, #4
 8000e56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5a:	4b91      	ldr	r3, [pc, #580]	; (80010a0 <_ZL12MX_GPIO_Initv+0x26c>)
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	61bb      	str	r3, [r7, #24]
 8000e66:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e68:	4b8d      	ldr	r3, [pc, #564]	; (80010a0 <_ZL12MX_GPIO_Initv+0x26c>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6e:	4a8c      	ldr	r2, [pc, #560]	; (80010a0 <_ZL12MX_GPIO_Initv+0x26c>)
 8000e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e78:	4b89      	ldr	r3, [pc, #548]	; (80010a0 <_ZL12MX_GPIO_Initv+0x26c>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	4b86      	ldr	r3, [pc, #536]	; (80010a0 <_ZL12MX_GPIO_Initv+0x26c>)
 8000e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8c:	4a84      	ldr	r2, [pc, #528]	; (80010a0 <_ZL12MX_GPIO_Initv+0x26c>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e96:	4b82      	ldr	r3, [pc, #520]	; (80010a0 <_ZL12MX_GPIO_Initv+0x26c>)
 8000e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea4:	4b7e      	ldr	r3, [pc, #504]	; (80010a0 <_ZL12MX_GPIO_Initv+0x26c>)
 8000ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eaa:	4a7d      	ldr	r2, [pc, #500]	; (80010a0 <_ZL12MX_GPIO_Initv+0x26c>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb4:	4b7a      	ldr	r3, [pc, #488]	; (80010a0 <_ZL12MX_GPIO_Initv+0x26c>)
 8000eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec2:	4b77      	ldr	r3, [pc, #476]	; (80010a0 <_ZL12MX_GPIO_Initv+0x26c>)
 8000ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec8:	4a75      	ldr	r2, [pc, #468]	; (80010a0 <_ZL12MX_GPIO_Initv+0x26c>)
 8000eca:	f043 0308 	orr.w	r3, r3, #8
 8000ece:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed2:	4b73      	ldr	r3, [pc, #460]	; (80010a0 <_ZL12MX_GPIO_Initv+0x26c>)
 8000ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed8:	f003 0308 	and.w	r3, r3, #8
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ee0:	4b6f      	ldr	r3, [pc, #444]	; (80010a0 <_ZL12MX_GPIO_Initv+0x26c>)
 8000ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee6:	4a6e      	ldr	r2, [pc, #440]	; (80010a0 <_ZL12MX_GPIO_Initv+0x26c>)
 8000ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef0:	4b6b      	ldr	r3, [pc, #428]	; (80010a0 <_ZL12MX_GPIO_Initv+0x26c>)
 8000ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000efe:	4b68      	ldr	r3, [pc, #416]	; (80010a0 <_ZL12MX_GPIO_Initv+0x26c>)
 8000f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f04:	4a66      	ldr	r2, [pc, #408]	; (80010a0 <_ZL12MX_GPIO_Initv+0x26c>)
 8000f06:	f043 0310 	orr.w	r3, r3, #16
 8000f0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f0e:	4b64      	ldr	r3, [pc, #400]	; (80010a0 <_ZL12MX_GPIO_Initv+0x26c>)
 8000f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f14:	f003 0310 	and.w	r3, r3, #16
 8000f18:	603b      	str	r3, [r7, #0]
 8000f1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000f22:	4860      	ldr	r0, [pc, #384]	; (80010a4 <_ZL12MX_GPIO_Initv+0x270>)
 8000f24:	f003 f9c4 	bl	80042b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f2e:	485e      	ldr	r0, [pc, #376]	; (80010a8 <_ZL12MX_GPIO_Initv+0x274>)
 8000f30:	f003 f9be 	bl	80042b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f3a:	485c      	ldr	r0, [pc, #368]	; (80010ac <_ZL12MX_GPIO_Initv+0x278>)
 8000f3c:	f003 f9b8 	bl	80042b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2102      	movs	r1, #2
 8000f44:	485a      	ldr	r0, [pc, #360]	; (80010b0 <_ZL12MX_GPIO_Initv+0x27c>)
 8000f46:	f003 f9b3 	bl	80042b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 031c 	add.w	r3, r7, #28
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4853      	ldr	r0, [pc, #332]	; (80010ac <_ZL12MX_GPIO_Initv+0x278>)
 8000f60:	f002 fff6 	bl	8003f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f64:	2332      	movs	r3, #50	; 0x32
 8000f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f74:	230b      	movs	r3, #11
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	484b      	ldr	r0, [pc, #300]	; (80010ac <_ZL12MX_GPIO_Initv+0x278>)
 8000f80:	f002 ffe6 	bl	8003f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f84:	2386      	movs	r3, #134	; 0x86
 8000f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f94:	230b      	movs	r3, #11
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4845      	ldr	r0, [pc, #276]	; (80010b4 <_ZL12MX_GPIO_Initv+0x280>)
 8000fa0:	f002 ffd6 	bl	8003f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000fa4:	f244 0301 	movw	r3, #16385	; 0x4001
 8000fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4839      	ldr	r0, [pc, #228]	; (80010a4 <_ZL12MX_GPIO_Initv+0x270>)
 8000fbe:	f002 ffc7 	bl	8003f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fd4:	230b      	movs	r3, #11
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4831      	ldr	r0, [pc, #196]	; (80010a4 <_ZL12MX_GPIO_Initv+0x270>)
 8000fe0:	f002 ffb6 	bl	8003f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fe8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fea:	2301      	movs	r3, #1
 8000fec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	482a      	ldr	r0, [pc, #168]	; (80010a8 <_ZL12MX_GPIO_Initv+0x274>)
 8000ffe:	f002 ffa7 	bl	8003f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001006:	4b2c      	ldr	r3, [pc, #176]	; (80010b8 <_ZL12MX_GPIO_Initv+0x284>)
 8001008:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	4619      	mov	r1, r3
 8001014:	4829      	ldr	r0, [pc, #164]	; (80010bc <_ZL12MX_GPIO_Initv+0x288>)
 8001016:	f002 ff9b 	bl	8003f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800101a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800101e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4619      	mov	r1, r3
 8001032:	481e      	ldr	r0, [pc, #120]	; (80010ac <_ZL12MX_GPIO_Initv+0x278>)
 8001034:	f002 ff8c 	bl	8003f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001038:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800103c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800104a:	230a      	movs	r3, #10
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	4619      	mov	r1, r3
 8001054:	4817      	ldr	r0, [pc, #92]	; (80010b4 <_ZL12MX_GPIO_Initv+0x280>)
 8001056:	f002 ff7b 	bl	8003f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800105a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800105e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800106c:	230b      	movs	r3, #11
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	4619      	mov	r1, r3
 8001076:	4811      	ldr	r0, [pc, #68]	; (80010bc <_ZL12MX_GPIO_Initv+0x288>)
 8001078:	f002 ff6a 	bl	8003f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800107c:	2302      	movs	r3, #2
 800107e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	4619      	mov	r1, r3
 8001092:	4807      	ldr	r0, [pc, #28]	; (80010b0 <_ZL12MX_GPIO_Initv+0x27c>)
 8001094:	f002 ff5c 	bl	8003f50 <HAL_GPIO_Init>

}
 8001098:	bf00      	nop
 800109a:	3730      	adds	r7, #48	; 0x30
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	58024400 	.word	0x58024400
 80010a4:	58020400 	.word	0x58020400
 80010a8:	58020c00 	.word	0x58020c00
 80010ac:	58020800 	.word	0x58020800
 80010b0:	58021000 	.word	0x58021000
 80010b4:	58020000 	.word	0x58020000
 80010b8:	11110000 	.word	0x11110000
 80010bc:	58021800 	.word	0x58021800

080010c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <_Z41__static_initialization_and_destruction_0ii>:
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d107      	bne.n	80010f0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d102      	bne.n	80010f0 <_Z41__static_initialization_and_destruction_0ii+0x20>
FatDMA fatDma;
 80010ea:	4809      	ldr	r0, [pc, #36]	; (8001110 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80010ec:	f7ff fb3f 	bl	800076e <_ZN6FatDMAC1Ev>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d107      	bne.n	8001106 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d102      	bne.n	8001106 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001100:	4803      	ldr	r0, [pc, #12]	; (8001110 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001102:	f7ff fb49 	bl	8000798 <_ZN6FatDMAD1Ev>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	240006a4 	.word	0x240006a4

08001114 <_GLOBAL__sub_I_hspi3>:
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
 8001118:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800111c:	2001      	movs	r0, #1
 800111e:	f7ff ffd7 	bl	80010d0 <_Z41__static_initialization_and_destruction_0ii>
 8001122:	bd80      	pop	{r7, pc}

08001124 <_GLOBAL__sub_D_hspi3>:
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
 8001128:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800112c:	2000      	movs	r0, #0
 800112e:	f7ff ffcf 	bl	80010d0 <_Z41__static_initialization_and_destruction_0ii>
 8001132:	bd80      	pop	{r7, pc}

08001134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_MspInit+0x30>)
 800113c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001140:	4a08      	ldr	r2, [pc, #32]	; (8001164 <HAL_MspInit+0x30>)
 8001142:	f043 0302 	orr.w	r3, r3, #2
 8001146:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_MspInit+0x30>)
 800114c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	58024400 	.word	0x58024400

08001168 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a35      	ldr	r2, [pc, #212]	; (800125c <HAL_SPI_MspInit+0xf4>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d163      	bne.n	8001252 <HAL_SPI_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800118a:	4b35      	ldr	r3, [pc, #212]	; (8001260 <HAL_SPI_MspInit+0xf8>)
 800118c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001190:	4a33      	ldr	r2, [pc, #204]	; (8001260 <HAL_SPI_MspInit+0xf8>)
 8001192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001196:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800119a:	4b31      	ldr	r3, [pc, #196]	; (8001260 <HAL_SPI_MspInit+0xf8>)
 800119c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a8:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <HAL_SPI_MspInit+0xf8>)
 80011aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ae:	4a2c      	ldr	r2, [pc, #176]	; (8001260 <HAL_SPI_MspInit+0xf8>)
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b8:	4b29      	ldr	r3, [pc, #164]	; (8001260 <HAL_SPI_MspInit+0xf8>)
 80011ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80011c6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011d8:	2306      	movs	r3, #6
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	4820      	ldr	r0, [pc, #128]	; (8001264 <HAL_SPI_MspInit+0xfc>)
 80011e4:	f002 feb4 	bl	8003f50 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream0;
 80011e8:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <HAL_SPI_MspInit+0x100>)
 80011ea:	4a20      	ldr	r2, [pc, #128]	; (800126c <HAL_SPI_MspInit+0x104>)
 80011ec:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 80011ee:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <HAL_SPI_MspInit+0x100>)
 80011f0:	223e      	movs	r2, #62	; 0x3e
 80011f2:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011f4:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <HAL_SPI_MspInit+0x100>)
 80011f6:	2240      	movs	r2, #64	; 0x40
 80011f8:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011fa:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <HAL_SPI_MspInit+0x100>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001200:	4b19      	ldr	r3, [pc, #100]	; (8001268 <HAL_SPI_MspInit+0x100>)
 8001202:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001206:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001208:	4b17      	ldr	r3, [pc, #92]	; (8001268 <HAL_SPI_MspInit+0x100>)
 800120a:	2200      	movs	r2, #0
 800120c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800120e:	4b16      	ldr	r3, [pc, #88]	; (8001268 <HAL_SPI_MspInit+0x100>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <HAL_SPI_MspInit+0x100>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <HAL_SPI_MspInit+0x100>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <HAL_SPI_MspInit+0x100>)
 8001222:	2200      	movs	r2, #0
 8001224:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001226:	4810      	ldr	r0, [pc, #64]	; (8001268 <HAL_SPI_MspInit+0x100>)
 8001228:	f000 fb6a 	bl	8001900 <HAL_DMA_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8001232:	f7ff ff45 	bl	80010c0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <HAL_SPI_MspInit+0x100>)
 800123a:	679a      	str	r2, [r3, #120]	; 0x78
 800123c:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <HAL_SPI_MspInit+0x100>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	2033      	movs	r0, #51	; 0x33
 8001248:	f000 fb25 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800124c:	2033      	movs	r0, #51	; 0x33
 800124e:	f000 fb3c 	bl	80018ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	; 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40003c00 	.word	0x40003c00
 8001260:	58024400 	.word	0x58024400
 8001264:	58020800 	.word	0x58020800
 8001268:	24000138 	.word	0x24000138
 800126c:	40020010 	.word	0x40020010

08001270 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a1a      	ldr	r2, [pc, #104]	; (80012f8 <HAL_UART_MspInit+0x88>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d12e      	bne.n	80012f0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001292:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <HAL_UART_MspInit+0x8c>)
 8001294:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001298:	4a18      	ldr	r2, [pc, #96]	; (80012fc <HAL_UART_MspInit+0x8c>)
 800129a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800129e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <HAL_UART_MspInit+0x8c>)
 80012a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_UART_MspInit+0x8c>)
 80012b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b6:	4a11      	ldr	r2, [pc, #68]	; (80012fc <HAL_UART_MspInit+0x8c>)
 80012b8:	f043 0308 	orr.w	r3, r3, #8
 80012bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c0:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <HAL_UART_MspInit+0x8c>)
 80012c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012e0:	2307      	movs	r3, #7
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <HAL_UART_MspInit+0x90>)
 80012ec:	f002 fe30 	bl	8003f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012f0:	bf00      	nop
 80012f2:	3728      	adds	r7, #40	; 0x28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40004800 	.word	0x40004800
 80012fc:	58024400 	.word	0x58024400
 8001300:	58020c00 	.word	0x58020c00

08001304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001316:	e7fe      	b.n	8001316 <HardFault_Handler+0x4>

08001318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800131c:	e7fe      	b.n	800131c <MemManage_Handler+0x4>

0800131e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001322:	e7fe      	b.n	8001322 <BusFault_Handler+0x4>

08001324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <UsageFault_Handler+0x4>

0800132a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001358:	f000 f974 	bl	8001644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}

08001360 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001364:	4802      	ldr	r0, [pc, #8]	; (8001370 <DMA1_Stream0_IRQHandler+0x10>)
 8001366:	f001 fad5 	bl	8002914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	24000138 	.word	0x24000138

08001374 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001378:	4802      	ldr	r0, [pc, #8]	; (8001384 <SPI3_IRQHandler+0x10>)
 800137a:	f005 ffab 	bl	80072d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	240000b0 	.word	0x240000b0

08001388 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001390:	4a14      	ldr	r2, [pc, #80]	; (80013e4 <_sbrk+0x5c>)
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <_sbrk+0x60>)
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800139c:	4b13      	ldr	r3, [pc, #76]	; (80013ec <_sbrk+0x64>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d102      	bne.n	80013aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <_sbrk+0x64>)
 80013a6:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <_sbrk+0x68>)
 80013a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <_sbrk+0x64>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d207      	bcs.n	80013c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b8:	f00b f896 	bl	800c4e8 <__errno>
 80013bc:	4602      	mov	r2, r0
 80013be:	230c      	movs	r3, #12
 80013c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
 80013c6:	e009      	b.n	80013dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <_sbrk+0x64>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ce:	4b07      	ldr	r3, [pc, #28]	; (80013ec <_sbrk+0x64>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	4a05      	ldr	r2, [pc, #20]	; (80013ec <_sbrk+0x64>)
 80013d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013da:	68fb      	ldr	r3, [r7, #12]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	24080000 	.word	0x24080000
 80013e8:	00000400 	.word	0x00000400
 80013ec:	24000a5c 	.word	0x24000a5c
 80013f0:	24000f18 	.word	0x24000f18

080013f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013f8:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <SystemInit+0xec>)
 80013fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013fe:	4a38      	ldr	r2, [pc, #224]	; (80014e0 <SystemInit+0xec>)
 8001400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001408:	4b36      	ldr	r3, [pc, #216]	; (80014e4 <SystemInit+0xf0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 030f 	and.w	r3, r3, #15
 8001410:	2b06      	cmp	r3, #6
 8001412:	d807      	bhi.n	8001424 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001414:	4b33      	ldr	r3, [pc, #204]	; (80014e4 <SystemInit+0xf0>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f023 030f 	bic.w	r3, r3, #15
 800141c:	4a31      	ldr	r2, [pc, #196]	; (80014e4 <SystemInit+0xf0>)
 800141e:	f043 0307 	orr.w	r3, r3, #7
 8001422:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001424:	4b30      	ldr	r3, [pc, #192]	; (80014e8 <SystemInit+0xf4>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a2f      	ldr	r2, [pc, #188]	; (80014e8 <SystemInit+0xf4>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001430:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <SystemInit+0xf4>)
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001436:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <SystemInit+0xf4>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	492b      	ldr	r1, [pc, #172]	; (80014e8 <SystemInit+0xf4>)
 800143c:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <SystemInit+0xf8>)
 800143e:	4013      	ands	r3, r2
 8001440:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001442:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <SystemInit+0xf0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	2b07      	cmp	r3, #7
 800144c:	d907      	bls.n	800145e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800144e:	4b25      	ldr	r3, [pc, #148]	; (80014e4 <SystemInit+0xf0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f023 030f 	bic.w	r3, r3, #15
 8001456:	4a23      	ldr	r2, [pc, #140]	; (80014e4 <SystemInit+0xf0>)
 8001458:	f043 0307 	orr.w	r3, r3, #7
 800145c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800145e:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <SystemInit+0xf4>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001464:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <SystemInit+0xf4>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <SystemInit+0xf4>)
 800146c:	2200      	movs	r2, #0
 800146e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <SystemInit+0xf4>)
 8001472:	4a1f      	ldr	r2, [pc, #124]	; (80014f0 <SystemInit+0xfc>)
 8001474:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <SystemInit+0xf4>)
 8001478:	4a1e      	ldr	r2, [pc, #120]	; (80014f4 <SystemInit+0x100>)
 800147a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800147c:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <SystemInit+0xf4>)
 800147e:	4a1e      	ldr	r2, [pc, #120]	; (80014f8 <SystemInit+0x104>)
 8001480:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <SystemInit+0xf4>)
 8001484:	2200      	movs	r2, #0
 8001486:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001488:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <SystemInit+0xf4>)
 800148a:	4a1b      	ldr	r2, [pc, #108]	; (80014f8 <SystemInit+0x104>)
 800148c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800148e:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <SystemInit+0xf4>)
 8001490:	2200      	movs	r2, #0
 8001492:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <SystemInit+0xf4>)
 8001496:	4a18      	ldr	r2, [pc, #96]	; (80014f8 <SystemInit+0x104>)
 8001498:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <SystemInit+0xf4>)
 800149c:	2200      	movs	r2, #0
 800149e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <SystemInit+0xf4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a10      	ldr	r2, [pc, #64]	; (80014e8 <SystemInit+0xf4>)
 80014a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014ac:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <SystemInit+0xf4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <SystemInit+0x108>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <SystemInit+0x10c>)
 80014b8:	4013      	ands	r3, r2
 80014ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014be:	d202      	bcs.n	80014c6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80014c0:	4b10      	ldr	r3, [pc, #64]	; (8001504 <SystemInit+0x110>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <SystemInit+0x114>)
 80014c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80014cc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <SystemInit+0xec>)
 80014d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014d4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000ed00 	.word	0xe000ed00
 80014e4:	52002000 	.word	0x52002000
 80014e8:	58024400 	.word	0x58024400
 80014ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80014f0:	02020200 	.word	0x02020200
 80014f4:	01ff0000 	.word	0x01ff0000
 80014f8:	01010280 	.word	0x01010280
 80014fc:	5c001000 	.word	0x5c001000
 8001500:	ffff0000 	.word	0xffff0000
 8001504:	51008108 	.word	0x51008108
 8001508:	52004000 	.word	0x52004000

0800150c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800150c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001544 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001510:	f7ff ff70 	bl	80013f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001514:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001516:	e003      	b.n	8001520 <LoopCopyDataInit>

08001518 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800151a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800151c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800151e:	3104      	adds	r1, #4

08001520 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001520:	480a      	ldr	r0, [pc, #40]	; (800154c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001524:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001526:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001528:	d3f6      	bcc.n	8001518 <CopyDataInit>
  ldr  r2, =_sbss
 800152a:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800152c:	e002      	b.n	8001534 <LoopFillZerobss>

0800152e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800152e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001530:	f842 3b04 	str.w	r3, [r2], #4

08001534 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001536:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001538:	d3f9      	bcc.n	800152e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800153a:	f00a ffdb 	bl	800c4f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153e:	f7ff f95d 	bl	80007fc <main>
  bx  lr    
 8001542:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001544:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001548:	0800d010 	.word	0x0800d010
  ldr  r0, =_sdata
 800154c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001550:	24000094 	.word	0x24000094
  ldr  r2, =_sbss
 8001554:	24000094 	.word	0x24000094
  ldr  r3, = _ebss
 8001558:	24000f18 	.word	0x24000f18

0800155c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800155c:	e7fe      	b.n	800155c <ADC3_IRQHandler>
	...

08001560 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001566:	2003      	movs	r0, #3
 8001568:	f000 f98a 	bl	8001880 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800156c:	f003 fcba 	bl	8004ee4 <HAL_RCC_GetSysClockFreq>
 8001570:	4601      	mov	r1, r0
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <HAL_Init+0x68>)
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	0a1b      	lsrs	r3, r3, #8
 8001578:	f003 030f 	and.w	r3, r3, #15
 800157c:	4a13      	ldr	r2, [pc, #76]	; (80015cc <HAL_Init+0x6c>)
 800157e:	5cd3      	ldrb	r3, [r2, r3]
 8001580:	f003 031f 	and.w	r3, r3, #31
 8001584:	fa21 f303 	lsr.w	r3, r1, r3
 8001588:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800158a:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <HAL_Init+0x68>)
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <HAL_Init+0x6c>)
 8001594:	5cd3      	ldrb	r3, [r2, r3]
 8001596:	f003 031f 	and.w	r3, r3, #31
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	fa22 f303 	lsr.w	r3, r2, r3
 80015a0:	4a0b      	ldr	r2, [pc, #44]	; (80015d0 <HAL_Init+0x70>)
 80015a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015a4:	4a0b      	ldr	r2, [pc, #44]	; (80015d4 <HAL_Init+0x74>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015aa:	2000      	movs	r0, #0
 80015ac:	f000 f814 	bl	80015d8 <HAL_InitTick>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e002      	b.n	80015c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015ba:	f7ff fdbb 	bl	8001134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	58024400 	.word	0x58024400
 80015cc:	0800cf14 	.word	0x0800cf14
 80015d0:	24000008 	.word	0x24000008
 80015d4:	24000004 	.word	0x24000004

080015d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015e0:	4b15      	ldr	r3, [pc, #84]	; (8001638 <HAL_InitTick+0x60>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e021      	b.n	8001630 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015ec:	4b13      	ldr	r3, [pc, #76]	; (800163c <HAL_InitTick+0x64>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <HAL_InitTick+0x60>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4619      	mov	r1, r3
 80015f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f96f 	bl	80018e6 <HAL_SYSTICK_Config>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e00e      	b.n	8001630 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d80a      	bhi.n	800162e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001618:	2200      	movs	r2, #0
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f000 f939 	bl	8001896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001624:	4a06      	ldr	r2, [pc, #24]	; (8001640 <HAL_InitTick+0x68>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e000      	b.n	8001630 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	24000010 	.word	0x24000010
 800163c:	24000004 	.word	0x24000004
 8001640:	2400000c 	.word	0x2400000c

08001644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_IncTick+0x20>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_IncTick+0x24>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4413      	add	r3, r2
 8001654:	4a04      	ldr	r2, [pc, #16]	; (8001668 <HAL_IncTick+0x24>)
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	24000010 	.word	0x24000010
 8001668:	24000aa8 	.word	0x24000aa8

0800166c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return uwTick;
 8001670:	4b03      	ldr	r3, [pc, #12]	; (8001680 <HAL_GetTick+0x14>)
 8001672:	681b      	ldr	r3, [r3, #0]
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	24000aa8 	.word	0x24000aa8

08001684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800168c:	f7ff ffee 	bl	800166c <HAL_GetTick>
 8001690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169c:	d005      	beq.n	80016aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_Delay+0x40>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4413      	add	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016aa:	bf00      	nop
 80016ac:	f7ff ffde 	bl	800166c <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d8f7      	bhi.n	80016ac <HAL_Delay+0x28>
  {
  }
}
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	24000010 	.word	0x24000010

080016c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <HAL_GetREVID+0x14>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	0c1b      	lsrs	r3, r3, #16
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	5c001000 	.word	0x5c001000

080016e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <__NVIC_SetPriorityGrouping+0x40>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016fc:	4013      	ands	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 800170a:	4313      	orrs	r3, r2
 800170c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170e:	4a04      	ldr	r2, [pc, #16]	; (8001720 <__NVIC_SetPriorityGrouping+0x40>)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	60d3      	str	r3, [r2, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00
 8001724:	05fa0000 	.word	0x05fa0000

08001728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <__NVIC_GetPriorityGrouping+0x18>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	f003 0307 	and.w	r3, r3, #7
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800174e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001752:	2b00      	cmp	r3, #0
 8001754:	db0b      	blt.n	800176e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	f003 021f 	and.w	r2, r3, #31
 800175c:	4907      	ldr	r1, [pc, #28]	; (800177c <__NVIC_EnableIRQ+0x38>)
 800175e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001762:	095b      	lsrs	r3, r3, #5
 8001764:	2001      	movs	r0, #1
 8001766:	fa00 f202 	lsl.w	r2, r0, r2
 800176a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000e100 	.word	0xe000e100

08001780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800178c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001790:	2b00      	cmp	r3, #0
 8001792:	db0a      	blt.n	80017aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	b2da      	uxtb	r2, r3
 8001798:	490c      	ldr	r1, [pc, #48]	; (80017cc <__NVIC_SetPriority+0x4c>)
 800179a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800179e:	0112      	lsls	r2, r2, #4
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	440b      	add	r3, r1
 80017a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a8:	e00a      	b.n	80017c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4908      	ldr	r1, [pc, #32]	; (80017d0 <__NVIC_SetPriority+0x50>)
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	3b04      	subs	r3, #4
 80017b8:	0112      	lsls	r2, r2, #4
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	440b      	add	r3, r1
 80017be:	761a      	strb	r2, [r3, #24]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000e100 	.word	0xe000e100
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	; 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f1c3 0307 	rsb	r3, r3, #7
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	bf28      	it	cs
 80017f2:	2304      	movcs	r3, #4
 80017f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3304      	adds	r3, #4
 80017fa:	2b06      	cmp	r3, #6
 80017fc:	d902      	bls.n	8001804 <NVIC_EncodePriority+0x30>
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3b03      	subs	r3, #3
 8001802:	e000      	b.n	8001806 <NVIC_EncodePriority+0x32>
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001808:	f04f 32ff 	mov.w	r2, #4294967295
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43da      	mvns	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	401a      	ands	r2, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800181c:	f04f 31ff 	mov.w	r1, #4294967295
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	fa01 f303 	lsl.w	r3, r1, r3
 8001826:	43d9      	mvns	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	4313      	orrs	r3, r2
         );
}
 800182e:	4618      	mov	r0, r3
 8001830:	3724      	adds	r7, #36	; 0x24
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800184c:	d301      	bcc.n	8001852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184e:	2301      	movs	r3, #1
 8001850:	e00f      	b.n	8001872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001852:	4a0a      	ldr	r2, [pc, #40]	; (800187c <SysTick_Config+0x40>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185a:	210f      	movs	r1, #15
 800185c:	f04f 30ff 	mov.w	r0, #4294967295
 8001860:	f7ff ff8e 	bl	8001780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <SysTick_Config+0x40>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186a:	4b04      	ldr	r3, [pc, #16]	; (800187c <SysTick_Config+0x40>)
 800186c:	2207      	movs	r2, #7
 800186e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	e000e010 	.word	0xe000e010

08001880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ff29 	bl	80016e0 <__NVIC_SetPriorityGrouping>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018a4:	f7ff ff40 	bl	8001728 <__NVIC_GetPriorityGrouping>
 80018a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	6978      	ldr	r0, [r7, #20]
 80018b0:	f7ff ff90 	bl	80017d4 <NVIC_EncodePriority>
 80018b4:	4602      	mov	r2, r0
 80018b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff5f 	bl	8001780 <__NVIC_SetPriority>
}
 80018c2:	bf00      	nop
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff33 	bl	8001744 <__NVIC_EnableIRQ>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff ffa4 	bl	800183c <SysTick_Config>
 80018f4:	4603      	mov	r3, r0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001908:	f7ff feb0 	bl	800166c <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e316      	b.n	8001f46 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a66      	ldr	r2, [pc, #408]	; (8001ab8 <HAL_DMA_Init+0x1b8>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d04a      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a65      	ldr	r2, [pc, #404]	; (8001abc <HAL_DMA_Init+0x1bc>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d045      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a63      	ldr	r2, [pc, #396]	; (8001ac0 <HAL_DMA_Init+0x1c0>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d040      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a62      	ldr	r2, [pc, #392]	; (8001ac4 <HAL_DMA_Init+0x1c4>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d03b      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a60      	ldr	r2, [pc, #384]	; (8001ac8 <HAL_DMA_Init+0x1c8>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d036      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a5f      	ldr	r2, [pc, #380]	; (8001acc <HAL_DMA_Init+0x1cc>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d031      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a5d      	ldr	r2, [pc, #372]	; (8001ad0 <HAL_DMA_Init+0x1d0>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d02c      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a5c      	ldr	r2, [pc, #368]	; (8001ad4 <HAL_DMA_Init+0x1d4>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d027      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a5a      	ldr	r2, [pc, #360]	; (8001ad8 <HAL_DMA_Init+0x1d8>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d022      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a59      	ldr	r2, [pc, #356]	; (8001adc <HAL_DMA_Init+0x1dc>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d01d      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a57      	ldr	r2, [pc, #348]	; (8001ae0 <HAL_DMA_Init+0x1e0>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d018      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a56      	ldr	r2, [pc, #344]	; (8001ae4 <HAL_DMA_Init+0x1e4>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d013      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a54      	ldr	r2, [pc, #336]	; (8001ae8 <HAL_DMA_Init+0x1e8>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d00e      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a53      	ldr	r2, [pc, #332]	; (8001aec <HAL_DMA_Init+0x1ec>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d009      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a51      	ldr	r2, [pc, #324]	; (8001af0 <HAL_DMA_Init+0x1f0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d004      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a50      	ldr	r2, [pc, #320]	; (8001af4 <HAL_DMA_Init+0x1f4>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d101      	bne.n	80019bc <HAL_DMA_Init+0xbc>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <HAL_DMA_Init+0xbe>
 80019bc:	2300      	movs	r3, #0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 813b 	beq.w	8001c3a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2202      	movs	r2, #2
 80019d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a37      	ldr	r2, [pc, #220]	; (8001ab8 <HAL_DMA_Init+0x1b8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d04a      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a36      	ldr	r2, [pc, #216]	; (8001abc <HAL_DMA_Init+0x1bc>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d045      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a34      	ldr	r2, [pc, #208]	; (8001ac0 <HAL_DMA_Init+0x1c0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d040      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a33      	ldr	r2, [pc, #204]	; (8001ac4 <HAL_DMA_Init+0x1c4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d03b      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a31      	ldr	r2, [pc, #196]	; (8001ac8 <HAL_DMA_Init+0x1c8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d036      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a30      	ldr	r2, [pc, #192]	; (8001acc <HAL_DMA_Init+0x1cc>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d031      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a2e      	ldr	r2, [pc, #184]	; (8001ad0 <HAL_DMA_Init+0x1d0>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d02c      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a2d      	ldr	r2, [pc, #180]	; (8001ad4 <HAL_DMA_Init+0x1d4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d027      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a2b      	ldr	r2, [pc, #172]	; (8001ad8 <HAL_DMA_Init+0x1d8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d022      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a2a      	ldr	r2, [pc, #168]	; (8001adc <HAL_DMA_Init+0x1dc>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d01d      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a28      	ldr	r2, [pc, #160]	; (8001ae0 <HAL_DMA_Init+0x1e0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d018      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a27      	ldr	r2, [pc, #156]	; (8001ae4 <HAL_DMA_Init+0x1e4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d013      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a25      	ldr	r2, [pc, #148]	; (8001ae8 <HAL_DMA_Init+0x1e8>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d00e      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a24      	ldr	r2, [pc, #144]	; (8001aec <HAL_DMA_Init+0x1ec>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d009      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a22      	ldr	r2, [pc, #136]	; (8001af0 <HAL_DMA_Init+0x1f0>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d004      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a21      	ldr	r2, [pc, #132]	; (8001af4 <HAL_DMA_Init+0x1f4>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d108      	bne.n	8001a86 <HAL_DMA_Init+0x186>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 0201 	bic.w	r2, r2, #1
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	e007      	b.n	8001a96 <HAL_DMA_Init+0x196>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 0201 	bic.w	r2, r2, #1
 8001a94:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a96:	e02f      	b.n	8001af8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a98:	f7ff fde8 	bl	800166c <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b05      	cmp	r3, #5
 8001aa4:	d928      	bls.n	8001af8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2220      	movs	r2, #32
 8001aaa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2203      	movs	r2, #3
 8001ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e246      	b.n	8001f46 <HAL_DMA_Init+0x646>
 8001ab8:	40020010 	.word	0x40020010
 8001abc:	40020028 	.word	0x40020028
 8001ac0:	40020040 	.word	0x40020040
 8001ac4:	40020058 	.word	0x40020058
 8001ac8:	40020070 	.word	0x40020070
 8001acc:	40020088 	.word	0x40020088
 8001ad0:	400200a0 	.word	0x400200a0
 8001ad4:	400200b8 	.word	0x400200b8
 8001ad8:	40020410 	.word	0x40020410
 8001adc:	40020428 	.word	0x40020428
 8001ae0:	40020440 	.word	0x40020440
 8001ae4:	40020458 	.word	0x40020458
 8001ae8:	40020470 	.word	0x40020470
 8001aec:	40020488 	.word	0x40020488
 8001af0:	400204a0 	.word	0x400204a0
 8001af4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1c8      	bne.n	8001a98 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	4b83      	ldr	r3, [pc, #524]	; (8001d20 <HAL_DMA_Init+0x420>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001b1e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b2a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b36:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d107      	bne.n	8001b5c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b54:	4313      	orrs	r3, r2
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001b5c:	4b71      	ldr	r3, [pc, #452]	; (8001d24 <HAL_DMA_Init+0x424>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b71      	ldr	r3, [pc, #452]	; (8001d28 <HAL_DMA_Init+0x428>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b68:	d328      	bcc.n	8001bbc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b28      	cmp	r3, #40	; 0x28
 8001b70:	d903      	bls.n	8001b7a <HAL_DMA_Init+0x27a>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b2e      	cmp	r3, #46	; 0x2e
 8001b78:	d917      	bls.n	8001baa <HAL_DMA_Init+0x2aa>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b3e      	cmp	r3, #62	; 0x3e
 8001b80:	d903      	bls.n	8001b8a <HAL_DMA_Init+0x28a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b42      	cmp	r3, #66	; 0x42
 8001b88:	d90f      	bls.n	8001baa <HAL_DMA_Init+0x2aa>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b46      	cmp	r3, #70	; 0x46
 8001b90:	d903      	bls.n	8001b9a <HAL_DMA_Init+0x29a>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b48      	cmp	r3, #72	; 0x48
 8001b98:	d907      	bls.n	8001baa <HAL_DMA_Init+0x2aa>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b4e      	cmp	r3, #78	; 0x4e
 8001ba0:	d905      	bls.n	8001bae <HAL_DMA_Init+0x2ae>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b52      	cmp	r3, #82	; 0x52
 8001ba8:	d801      	bhi.n	8001bae <HAL_DMA_Init+0x2ae>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <HAL_DMA_Init+0x2b0>
 8001bae:	2300      	movs	r3, #0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bba:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	f023 0307 	bic.w	r3, r3, #7
 8001bd2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d117      	bne.n	8001c16 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00e      	beq.n	8001c16 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f002 f81f 	bl	8003c3c <DMA_CheckFifoParam>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d008      	beq.n	8001c16 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2240      	movs	r2, #64	; 0x40
 8001c08:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e197      	b.n	8001f46 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f001 ff5a 	bl	8003ad8 <DMA_CalcBaseAndBitshift>
 8001c24:	4603      	mov	r3, r0
 8001c26:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2c:	f003 031f 	and.w	r3, r3, #31
 8001c30:	223f      	movs	r2, #63	; 0x3f
 8001c32:	409a      	lsls	r2, r3
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	e0cd      	b.n	8001dd6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a3b      	ldr	r2, [pc, #236]	; (8001d2c <HAL_DMA_Init+0x42c>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d022      	beq.n	8001c8a <HAL_DMA_Init+0x38a>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a39      	ldr	r2, [pc, #228]	; (8001d30 <HAL_DMA_Init+0x430>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d01d      	beq.n	8001c8a <HAL_DMA_Init+0x38a>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a38      	ldr	r2, [pc, #224]	; (8001d34 <HAL_DMA_Init+0x434>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d018      	beq.n	8001c8a <HAL_DMA_Init+0x38a>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a36      	ldr	r2, [pc, #216]	; (8001d38 <HAL_DMA_Init+0x438>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d013      	beq.n	8001c8a <HAL_DMA_Init+0x38a>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a35      	ldr	r2, [pc, #212]	; (8001d3c <HAL_DMA_Init+0x43c>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d00e      	beq.n	8001c8a <HAL_DMA_Init+0x38a>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a33      	ldr	r2, [pc, #204]	; (8001d40 <HAL_DMA_Init+0x440>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d009      	beq.n	8001c8a <HAL_DMA_Init+0x38a>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a32      	ldr	r2, [pc, #200]	; (8001d44 <HAL_DMA_Init+0x444>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d004      	beq.n	8001c8a <HAL_DMA_Init+0x38a>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a30      	ldr	r2, [pc, #192]	; (8001d48 <HAL_DMA_Init+0x448>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d101      	bne.n	8001c8e <HAL_DMA_Init+0x38e>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <HAL_DMA_Init+0x390>
 8001c8e:	2300      	movs	r3, #0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 8097 	beq.w	8001dc4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a24      	ldr	r2, [pc, #144]	; (8001d2c <HAL_DMA_Init+0x42c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d021      	beq.n	8001ce4 <HAL_DMA_Init+0x3e4>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a22      	ldr	r2, [pc, #136]	; (8001d30 <HAL_DMA_Init+0x430>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d01c      	beq.n	8001ce4 <HAL_DMA_Init+0x3e4>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a21      	ldr	r2, [pc, #132]	; (8001d34 <HAL_DMA_Init+0x434>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d017      	beq.n	8001ce4 <HAL_DMA_Init+0x3e4>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a1f      	ldr	r2, [pc, #124]	; (8001d38 <HAL_DMA_Init+0x438>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d012      	beq.n	8001ce4 <HAL_DMA_Init+0x3e4>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a1e      	ldr	r2, [pc, #120]	; (8001d3c <HAL_DMA_Init+0x43c>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d00d      	beq.n	8001ce4 <HAL_DMA_Init+0x3e4>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a1c      	ldr	r2, [pc, #112]	; (8001d40 <HAL_DMA_Init+0x440>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d008      	beq.n	8001ce4 <HAL_DMA_Init+0x3e4>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a1b      	ldr	r2, [pc, #108]	; (8001d44 <HAL_DMA_Init+0x444>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d003      	beq.n	8001ce4 <HAL_DMA_Init+0x3e4>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a19      	ldr	r2, [pc, #100]	; (8001d48 <HAL_DMA_Init+0x448>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_DMA_Init+0x44c>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b40      	cmp	r3, #64	; 0x40
 8001d0c:	d020      	beq.n	8001d50 <HAL_DMA_Init+0x450>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	2b80      	cmp	r3, #128	; 0x80
 8001d14:	d102      	bne.n	8001d1c <HAL_DMA_Init+0x41c>
 8001d16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d1a:	e01a      	b.n	8001d52 <HAL_DMA_Init+0x452>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	e018      	b.n	8001d52 <HAL_DMA_Init+0x452>
 8001d20:	fe10803f 	.word	0xfe10803f
 8001d24:	5c001000 	.word	0x5c001000
 8001d28:	ffff0000 	.word	0xffff0000
 8001d2c:	58025408 	.word	0x58025408
 8001d30:	5802541c 	.word	0x5802541c
 8001d34:	58025430 	.word	0x58025430
 8001d38:	58025444 	.word	0x58025444
 8001d3c:	58025458 	.word	0x58025458
 8001d40:	5802546c 	.word	0x5802546c
 8001d44:	58025480 	.word	0x58025480
 8001d48:	58025494 	.word	0x58025494
 8001d4c:	fffe000f 	.word	0xfffe000f
 8001d50:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	68d2      	ldr	r2, [r2, #12]
 8001d56:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d80:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	4b6e      	ldr	r3, [pc, #440]	; (8001f50 <HAL_DMA_Init+0x650>)
 8001d98:	4413      	add	r3, r2
 8001d9a:	4a6e      	ldr	r2, [pc, #440]	; (8001f54 <HAL_DMA_Init+0x654>)
 8001d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001da0:	091b      	lsrs	r3, r3, #4
 8001da2:	009a      	lsls	r2, r3, #2
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f001 fe95 	bl	8003ad8 <DMA_CalcBaseAndBitshift>
 8001dae:	4603      	mov	r3, r0
 8001db0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db6:	f003 031f 	and.w	r3, r3, #31
 8001dba:	2201      	movs	r2, #1
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	e008      	b.n	8001dd6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2240      	movs	r2, #64	; 0x40
 8001dc8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2203      	movs	r2, #3
 8001dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e0b7      	b.n	8001f46 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a5f      	ldr	r2, [pc, #380]	; (8001f58 <HAL_DMA_Init+0x658>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d072      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a5d      	ldr	r2, [pc, #372]	; (8001f5c <HAL_DMA_Init+0x65c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d06d      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a5c      	ldr	r2, [pc, #368]	; (8001f60 <HAL_DMA_Init+0x660>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d068      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a5a      	ldr	r2, [pc, #360]	; (8001f64 <HAL_DMA_Init+0x664>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d063      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a59      	ldr	r2, [pc, #356]	; (8001f68 <HAL_DMA_Init+0x668>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d05e      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a57      	ldr	r2, [pc, #348]	; (8001f6c <HAL_DMA_Init+0x66c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d059      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a56      	ldr	r2, [pc, #344]	; (8001f70 <HAL_DMA_Init+0x670>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d054      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a54      	ldr	r2, [pc, #336]	; (8001f74 <HAL_DMA_Init+0x674>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d04f      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a53      	ldr	r2, [pc, #332]	; (8001f78 <HAL_DMA_Init+0x678>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d04a      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a51      	ldr	r2, [pc, #324]	; (8001f7c <HAL_DMA_Init+0x67c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d045      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a50      	ldr	r2, [pc, #320]	; (8001f80 <HAL_DMA_Init+0x680>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d040      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a4e      	ldr	r2, [pc, #312]	; (8001f84 <HAL_DMA_Init+0x684>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d03b      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a4d      	ldr	r2, [pc, #308]	; (8001f88 <HAL_DMA_Init+0x688>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d036      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a4b      	ldr	r2, [pc, #300]	; (8001f8c <HAL_DMA_Init+0x68c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d031      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a4a      	ldr	r2, [pc, #296]	; (8001f90 <HAL_DMA_Init+0x690>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d02c      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a48      	ldr	r2, [pc, #288]	; (8001f94 <HAL_DMA_Init+0x694>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d027      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a47      	ldr	r2, [pc, #284]	; (8001f98 <HAL_DMA_Init+0x698>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d022      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a45      	ldr	r2, [pc, #276]	; (8001f9c <HAL_DMA_Init+0x69c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d01d      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a44      	ldr	r2, [pc, #272]	; (8001fa0 <HAL_DMA_Init+0x6a0>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d018      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a42      	ldr	r2, [pc, #264]	; (8001fa4 <HAL_DMA_Init+0x6a4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a41      	ldr	r2, [pc, #260]	; (8001fa8 <HAL_DMA_Init+0x6a8>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d00e      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a3f      	ldr	r2, [pc, #252]	; (8001fac <HAL_DMA_Init+0x6ac>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d009      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a3e      	ldr	r2, [pc, #248]	; (8001fb0 <HAL_DMA_Init+0x6b0>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d004      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a3c      	ldr	r2, [pc, #240]	; (8001fb4 <HAL_DMA_Init+0x6b4>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d101      	bne.n	8001eca <HAL_DMA_Init+0x5ca>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <HAL_DMA_Init+0x5cc>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d032      	beq.n	8001f36 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f001 ff2f 	bl	8003d34 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b80      	cmp	r3, #128	; 0x80
 8001edc:	d102      	bne.n	8001ee4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001ef8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d010      	beq.n	8001f24 <HAL_DMA_Init+0x624>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d80c      	bhi.n	8001f24 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f001 ffac 	bl	8003e68 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	e008      	b.n	8001f36 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	a7fdabf8 	.word	0xa7fdabf8
 8001f54:	cccccccd 	.word	0xcccccccd
 8001f58:	40020010 	.word	0x40020010
 8001f5c:	40020028 	.word	0x40020028
 8001f60:	40020040 	.word	0x40020040
 8001f64:	40020058 	.word	0x40020058
 8001f68:	40020070 	.word	0x40020070
 8001f6c:	40020088 	.word	0x40020088
 8001f70:	400200a0 	.word	0x400200a0
 8001f74:	400200b8 	.word	0x400200b8
 8001f78:	40020410 	.word	0x40020410
 8001f7c:	40020428 	.word	0x40020428
 8001f80:	40020440 	.word	0x40020440
 8001f84:	40020458 	.word	0x40020458
 8001f88:	40020470 	.word	0x40020470
 8001f8c:	40020488 	.word	0x40020488
 8001f90:	400204a0 	.word	0x400204a0
 8001f94:	400204b8 	.word	0x400204b8
 8001f98:	58025408 	.word	0x58025408
 8001f9c:	5802541c 	.word	0x5802541c
 8001fa0:	58025430 	.word	0x58025430
 8001fa4:	58025444 	.word	0x58025444
 8001fa8:	58025458 	.word	0x58025458
 8001fac:	5802546c 	.word	0x5802546c
 8001fb0:	58025480 	.word	0x58025480
 8001fb4:	58025494 	.word	0x58025494

08001fb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e226      	b.n	8002422 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_DMA_Start_IT+0x2a>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e21f      	b.n	8002422 <HAL_DMA_Start_IT+0x46a>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	f040 820a 	bne.w	800240c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a68      	ldr	r2, [pc, #416]	; (80021ac <HAL_DMA_Start_IT+0x1f4>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d04a      	beq.n	80020a6 <HAL_DMA_Start_IT+0xee>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a66      	ldr	r2, [pc, #408]	; (80021b0 <HAL_DMA_Start_IT+0x1f8>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d045      	beq.n	80020a6 <HAL_DMA_Start_IT+0xee>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a65      	ldr	r2, [pc, #404]	; (80021b4 <HAL_DMA_Start_IT+0x1fc>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d040      	beq.n	80020a6 <HAL_DMA_Start_IT+0xee>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a63      	ldr	r2, [pc, #396]	; (80021b8 <HAL_DMA_Start_IT+0x200>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d03b      	beq.n	80020a6 <HAL_DMA_Start_IT+0xee>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a62      	ldr	r2, [pc, #392]	; (80021bc <HAL_DMA_Start_IT+0x204>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d036      	beq.n	80020a6 <HAL_DMA_Start_IT+0xee>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a60      	ldr	r2, [pc, #384]	; (80021c0 <HAL_DMA_Start_IT+0x208>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d031      	beq.n	80020a6 <HAL_DMA_Start_IT+0xee>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a5f      	ldr	r2, [pc, #380]	; (80021c4 <HAL_DMA_Start_IT+0x20c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d02c      	beq.n	80020a6 <HAL_DMA_Start_IT+0xee>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a5d      	ldr	r2, [pc, #372]	; (80021c8 <HAL_DMA_Start_IT+0x210>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d027      	beq.n	80020a6 <HAL_DMA_Start_IT+0xee>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a5c      	ldr	r2, [pc, #368]	; (80021cc <HAL_DMA_Start_IT+0x214>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d022      	beq.n	80020a6 <HAL_DMA_Start_IT+0xee>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a5a      	ldr	r2, [pc, #360]	; (80021d0 <HAL_DMA_Start_IT+0x218>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d01d      	beq.n	80020a6 <HAL_DMA_Start_IT+0xee>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a59      	ldr	r2, [pc, #356]	; (80021d4 <HAL_DMA_Start_IT+0x21c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d018      	beq.n	80020a6 <HAL_DMA_Start_IT+0xee>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a57      	ldr	r2, [pc, #348]	; (80021d8 <HAL_DMA_Start_IT+0x220>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d013      	beq.n	80020a6 <HAL_DMA_Start_IT+0xee>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a56      	ldr	r2, [pc, #344]	; (80021dc <HAL_DMA_Start_IT+0x224>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d00e      	beq.n	80020a6 <HAL_DMA_Start_IT+0xee>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a54      	ldr	r2, [pc, #336]	; (80021e0 <HAL_DMA_Start_IT+0x228>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d009      	beq.n	80020a6 <HAL_DMA_Start_IT+0xee>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a53      	ldr	r2, [pc, #332]	; (80021e4 <HAL_DMA_Start_IT+0x22c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d004      	beq.n	80020a6 <HAL_DMA_Start_IT+0xee>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a51      	ldr	r2, [pc, #324]	; (80021e8 <HAL_DMA_Start_IT+0x230>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d108      	bne.n	80020b8 <HAL_DMA_Start_IT+0x100>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 0201 	bic.w	r2, r2, #1
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	e007      	b.n	80020c8 <HAL_DMA_Start_IT+0x110>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0201 	bic.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68b9      	ldr	r1, [r7, #8]
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f001 fb56 	bl	8003780 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a34      	ldr	r2, [pc, #208]	; (80021ac <HAL_DMA_Start_IT+0x1f4>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d04a      	beq.n	8002174 <HAL_DMA_Start_IT+0x1bc>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a33      	ldr	r2, [pc, #204]	; (80021b0 <HAL_DMA_Start_IT+0x1f8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d045      	beq.n	8002174 <HAL_DMA_Start_IT+0x1bc>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a31      	ldr	r2, [pc, #196]	; (80021b4 <HAL_DMA_Start_IT+0x1fc>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d040      	beq.n	8002174 <HAL_DMA_Start_IT+0x1bc>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a30      	ldr	r2, [pc, #192]	; (80021b8 <HAL_DMA_Start_IT+0x200>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d03b      	beq.n	8002174 <HAL_DMA_Start_IT+0x1bc>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a2e      	ldr	r2, [pc, #184]	; (80021bc <HAL_DMA_Start_IT+0x204>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d036      	beq.n	8002174 <HAL_DMA_Start_IT+0x1bc>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a2d      	ldr	r2, [pc, #180]	; (80021c0 <HAL_DMA_Start_IT+0x208>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d031      	beq.n	8002174 <HAL_DMA_Start_IT+0x1bc>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a2b      	ldr	r2, [pc, #172]	; (80021c4 <HAL_DMA_Start_IT+0x20c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d02c      	beq.n	8002174 <HAL_DMA_Start_IT+0x1bc>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a2a      	ldr	r2, [pc, #168]	; (80021c8 <HAL_DMA_Start_IT+0x210>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d027      	beq.n	8002174 <HAL_DMA_Start_IT+0x1bc>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a28      	ldr	r2, [pc, #160]	; (80021cc <HAL_DMA_Start_IT+0x214>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d022      	beq.n	8002174 <HAL_DMA_Start_IT+0x1bc>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a27      	ldr	r2, [pc, #156]	; (80021d0 <HAL_DMA_Start_IT+0x218>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d01d      	beq.n	8002174 <HAL_DMA_Start_IT+0x1bc>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a25      	ldr	r2, [pc, #148]	; (80021d4 <HAL_DMA_Start_IT+0x21c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d018      	beq.n	8002174 <HAL_DMA_Start_IT+0x1bc>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a24      	ldr	r2, [pc, #144]	; (80021d8 <HAL_DMA_Start_IT+0x220>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d013      	beq.n	8002174 <HAL_DMA_Start_IT+0x1bc>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a22      	ldr	r2, [pc, #136]	; (80021dc <HAL_DMA_Start_IT+0x224>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d00e      	beq.n	8002174 <HAL_DMA_Start_IT+0x1bc>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a21      	ldr	r2, [pc, #132]	; (80021e0 <HAL_DMA_Start_IT+0x228>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d009      	beq.n	8002174 <HAL_DMA_Start_IT+0x1bc>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a1f      	ldr	r2, [pc, #124]	; (80021e4 <HAL_DMA_Start_IT+0x22c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d004      	beq.n	8002174 <HAL_DMA_Start_IT+0x1bc>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a1e      	ldr	r2, [pc, #120]	; (80021e8 <HAL_DMA_Start_IT+0x230>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d101      	bne.n	8002178 <HAL_DMA_Start_IT+0x1c0>
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <HAL_DMA_Start_IT+0x1c2>
 8002178:	2300      	movs	r3, #0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d036      	beq.n	80021ec <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f023 021e 	bic.w	r2, r3, #30
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 0216 	orr.w	r2, r2, #22
 8002190:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	2b00      	cmp	r3, #0
 8002198:	d03e      	beq.n	8002218 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f042 0208 	orr.w	r2, r2, #8
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	e035      	b.n	8002218 <HAL_DMA_Start_IT+0x260>
 80021ac:	40020010 	.word	0x40020010
 80021b0:	40020028 	.word	0x40020028
 80021b4:	40020040 	.word	0x40020040
 80021b8:	40020058 	.word	0x40020058
 80021bc:	40020070 	.word	0x40020070
 80021c0:	40020088 	.word	0x40020088
 80021c4:	400200a0 	.word	0x400200a0
 80021c8:	400200b8 	.word	0x400200b8
 80021cc:	40020410 	.word	0x40020410
 80021d0:	40020428 	.word	0x40020428
 80021d4:	40020440 	.word	0x40020440
 80021d8:	40020458 	.word	0x40020458
 80021dc:	40020470 	.word	0x40020470
 80021e0:	40020488 	.word	0x40020488
 80021e4:	400204a0 	.word	0x400204a0
 80021e8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 020e 	bic.w	r2, r3, #14
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 020a 	orr.w	r2, r2, #10
 80021fe:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	2b00      	cmp	r3, #0
 8002206:	d007      	beq.n	8002218 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0204 	orr.w	r2, r2, #4
 8002216:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a83      	ldr	r2, [pc, #524]	; (800242c <HAL_DMA_Start_IT+0x474>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d072      	beq.n	8002308 <HAL_DMA_Start_IT+0x350>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a82      	ldr	r2, [pc, #520]	; (8002430 <HAL_DMA_Start_IT+0x478>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d06d      	beq.n	8002308 <HAL_DMA_Start_IT+0x350>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a80      	ldr	r2, [pc, #512]	; (8002434 <HAL_DMA_Start_IT+0x47c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d068      	beq.n	8002308 <HAL_DMA_Start_IT+0x350>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a7f      	ldr	r2, [pc, #508]	; (8002438 <HAL_DMA_Start_IT+0x480>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d063      	beq.n	8002308 <HAL_DMA_Start_IT+0x350>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a7d      	ldr	r2, [pc, #500]	; (800243c <HAL_DMA_Start_IT+0x484>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d05e      	beq.n	8002308 <HAL_DMA_Start_IT+0x350>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a7c      	ldr	r2, [pc, #496]	; (8002440 <HAL_DMA_Start_IT+0x488>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d059      	beq.n	8002308 <HAL_DMA_Start_IT+0x350>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a7a      	ldr	r2, [pc, #488]	; (8002444 <HAL_DMA_Start_IT+0x48c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d054      	beq.n	8002308 <HAL_DMA_Start_IT+0x350>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a79      	ldr	r2, [pc, #484]	; (8002448 <HAL_DMA_Start_IT+0x490>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d04f      	beq.n	8002308 <HAL_DMA_Start_IT+0x350>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a77      	ldr	r2, [pc, #476]	; (800244c <HAL_DMA_Start_IT+0x494>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d04a      	beq.n	8002308 <HAL_DMA_Start_IT+0x350>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a76      	ldr	r2, [pc, #472]	; (8002450 <HAL_DMA_Start_IT+0x498>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d045      	beq.n	8002308 <HAL_DMA_Start_IT+0x350>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a74      	ldr	r2, [pc, #464]	; (8002454 <HAL_DMA_Start_IT+0x49c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d040      	beq.n	8002308 <HAL_DMA_Start_IT+0x350>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a73      	ldr	r2, [pc, #460]	; (8002458 <HAL_DMA_Start_IT+0x4a0>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d03b      	beq.n	8002308 <HAL_DMA_Start_IT+0x350>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a71      	ldr	r2, [pc, #452]	; (800245c <HAL_DMA_Start_IT+0x4a4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d036      	beq.n	8002308 <HAL_DMA_Start_IT+0x350>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a70      	ldr	r2, [pc, #448]	; (8002460 <HAL_DMA_Start_IT+0x4a8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d031      	beq.n	8002308 <HAL_DMA_Start_IT+0x350>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a6e      	ldr	r2, [pc, #440]	; (8002464 <HAL_DMA_Start_IT+0x4ac>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d02c      	beq.n	8002308 <HAL_DMA_Start_IT+0x350>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a6d      	ldr	r2, [pc, #436]	; (8002468 <HAL_DMA_Start_IT+0x4b0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d027      	beq.n	8002308 <HAL_DMA_Start_IT+0x350>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a6b      	ldr	r2, [pc, #428]	; (800246c <HAL_DMA_Start_IT+0x4b4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d022      	beq.n	8002308 <HAL_DMA_Start_IT+0x350>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a6a      	ldr	r2, [pc, #424]	; (8002470 <HAL_DMA_Start_IT+0x4b8>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d01d      	beq.n	8002308 <HAL_DMA_Start_IT+0x350>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a68      	ldr	r2, [pc, #416]	; (8002474 <HAL_DMA_Start_IT+0x4bc>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d018      	beq.n	8002308 <HAL_DMA_Start_IT+0x350>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a67      	ldr	r2, [pc, #412]	; (8002478 <HAL_DMA_Start_IT+0x4c0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d013      	beq.n	8002308 <HAL_DMA_Start_IT+0x350>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a65      	ldr	r2, [pc, #404]	; (800247c <HAL_DMA_Start_IT+0x4c4>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d00e      	beq.n	8002308 <HAL_DMA_Start_IT+0x350>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a64      	ldr	r2, [pc, #400]	; (8002480 <HAL_DMA_Start_IT+0x4c8>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d009      	beq.n	8002308 <HAL_DMA_Start_IT+0x350>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a62      	ldr	r2, [pc, #392]	; (8002484 <HAL_DMA_Start_IT+0x4cc>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d004      	beq.n	8002308 <HAL_DMA_Start_IT+0x350>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a61      	ldr	r2, [pc, #388]	; (8002488 <HAL_DMA_Start_IT+0x4d0>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d101      	bne.n	800230c <HAL_DMA_Start_IT+0x354>
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <HAL_DMA_Start_IT+0x356>
 800230c:	2300      	movs	r3, #0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d01a      	beq.n	8002348 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d007      	beq.n	8002330 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800232a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800232e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002334:	2b00      	cmp	r3, #0
 8002336:	d007      	beq.n	8002348 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002342:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002346:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a37      	ldr	r2, [pc, #220]	; (800242c <HAL_DMA_Start_IT+0x474>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d04a      	beq.n	80023e8 <HAL_DMA_Start_IT+0x430>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a36      	ldr	r2, [pc, #216]	; (8002430 <HAL_DMA_Start_IT+0x478>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d045      	beq.n	80023e8 <HAL_DMA_Start_IT+0x430>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a34      	ldr	r2, [pc, #208]	; (8002434 <HAL_DMA_Start_IT+0x47c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d040      	beq.n	80023e8 <HAL_DMA_Start_IT+0x430>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a33      	ldr	r2, [pc, #204]	; (8002438 <HAL_DMA_Start_IT+0x480>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d03b      	beq.n	80023e8 <HAL_DMA_Start_IT+0x430>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a31      	ldr	r2, [pc, #196]	; (800243c <HAL_DMA_Start_IT+0x484>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d036      	beq.n	80023e8 <HAL_DMA_Start_IT+0x430>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a30      	ldr	r2, [pc, #192]	; (8002440 <HAL_DMA_Start_IT+0x488>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d031      	beq.n	80023e8 <HAL_DMA_Start_IT+0x430>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a2e      	ldr	r2, [pc, #184]	; (8002444 <HAL_DMA_Start_IT+0x48c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d02c      	beq.n	80023e8 <HAL_DMA_Start_IT+0x430>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a2d      	ldr	r2, [pc, #180]	; (8002448 <HAL_DMA_Start_IT+0x490>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d027      	beq.n	80023e8 <HAL_DMA_Start_IT+0x430>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a2b      	ldr	r2, [pc, #172]	; (800244c <HAL_DMA_Start_IT+0x494>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d022      	beq.n	80023e8 <HAL_DMA_Start_IT+0x430>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a2a      	ldr	r2, [pc, #168]	; (8002450 <HAL_DMA_Start_IT+0x498>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d01d      	beq.n	80023e8 <HAL_DMA_Start_IT+0x430>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a28      	ldr	r2, [pc, #160]	; (8002454 <HAL_DMA_Start_IT+0x49c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d018      	beq.n	80023e8 <HAL_DMA_Start_IT+0x430>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a27      	ldr	r2, [pc, #156]	; (8002458 <HAL_DMA_Start_IT+0x4a0>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d013      	beq.n	80023e8 <HAL_DMA_Start_IT+0x430>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a25      	ldr	r2, [pc, #148]	; (800245c <HAL_DMA_Start_IT+0x4a4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d00e      	beq.n	80023e8 <HAL_DMA_Start_IT+0x430>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a24      	ldr	r2, [pc, #144]	; (8002460 <HAL_DMA_Start_IT+0x4a8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d009      	beq.n	80023e8 <HAL_DMA_Start_IT+0x430>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a22      	ldr	r2, [pc, #136]	; (8002464 <HAL_DMA_Start_IT+0x4ac>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d004      	beq.n	80023e8 <HAL_DMA_Start_IT+0x430>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a21      	ldr	r2, [pc, #132]	; (8002468 <HAL_DMA_Start_IT+0x4b0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d108      	bne.n	80023fa <HAL_DMA_Start_IT+0x442>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0201 	orr.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	e012      	b.n	8002420 <HAL_DMA_Start_IT+0x468>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 0201 	orr.w	r2, r2, #1
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	e009      	b.n	8002420 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800241a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002420:	7dfb      	ldrb	r3, [r7, #23]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40020010 	.word	0x40020010
 8002430:	40020028 	.word	0x40020028
 8002434:	40020040 	.word	0x40020040
 8002438:	40020058 	.word	0x40020058
 800243c:	40020070 	.word	0x40020070
 8002440:	40020088 	.word	0x40020088
 8002444:	400200a0 	.word	0x400200a0
 8002448:	400200b8 	.word	0x400200b8
 800244c:	40020410 	.word	0x40020410
 8002450:	40020428 	.word	0x40020428
 8002454:	40020440 	.word	0x40020440
 8002458:	40020458 	.word	0x40020458
 800245c:	40020470 	.word	0x40020470
 8002460:	40020488 	.word	0x40020488
 8002464:	400204a0 	.word	0x400204a0
 8002468:	400204b8 	.word	0x400204b8
 800246c:	58025408 	.word	0x58025408
 8002470:	5802541c 	.word	0x5802541c
 8002474:	58025430 	.word	0x58025430
 8002478:	58025444 	.word	0x58025444
 800247c:	58025458 	.word	0x58025458
 8002480:	5802546c 	.word	0x5802546c
 8002484:	58025480 	.word	0x58025480
 8002488:	58025494 	.word	0x58025494

0800248c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e205      	b.n	80028aa <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d004      	beq.n	80024b4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2280      	movs	r2, #128	; 0x80
 80024ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e1fa      	b.n	80028aa <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a8c      	ldr	r2, [pc, #560]	; (80026ec <HAL_DMA_Abort_IT+0x260>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d04a      	beq.n	8002554 <HAL_DMA_Abort_IT+0xc8>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a8b      	ldr	r2, [pc, #556]	; (80026f0 <HAL_DMA_Abort_IT+0x264>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d045      	beq.n	8002554 <HAL_DMA_Abort_IT+0xc8>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a89      	ldr	r2, [pc, #548]	; (80026f4 <HAL_DMA_Abort_IT+0x268>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d040      	beq.n	8002554 <HAL_DMA_Abort_IT+0xc8>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a88      	ldr	r2, [pc, #544]	; (80026f8 <HAL_DMA_Abort_IT+0x26c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d03b      	beq.n	8002554 <HAL_DMA_Abort_IT+0xc8>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a86      	ldr	r2, [pc, #536]	; (80026fc <HAL_DMA_Abort_IT+0x270>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d036      	beq.n	8002554 <HAL_DMA_Abort_IT+0xc8>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a85      	ldr	r2, [pc, #532]	; (8002700 <HAL_DMA_Abort_IT+0x274>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d031      	beq.n	8002554 <HAL_DMA_Abort_IT+0xc8>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a83      	ldr	r2, [pc, #524]	; (8002704 <HAL_DMA_Abort_IT+0x278>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d02c      	beq.n	8002554 <HAL_DMA_Abort_IT+0xc8>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a82      	ldr	r2, [pc, #520]	; (8002708 <HAL_DMA_Abort_IT+0x27c>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d027      	beq.n	8002554 <HAL_DMA_Abort_IT+0xc8>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a80      	ldr	r2, [pc, #512]	; (800270c <HAL_DMA_Abort_IT+0x280>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d022      	beq.n	8002554 <HAL_DMA_Abort_IT+0xc8>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a7f      	ldr	r2, [pc, #508]	; (8002710 <HAL_DMA_Abort_IT+0x284>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d01d      	beq.n	8002554 <HAL_DMA_Abort_IT+0xc8>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a7d      	ldr	r2, [pc, #500]	; (8002714 <HAL_DMA_Abort_IT+0x288>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d018      	beq.n	8002554 <HAL_DMA_Abort_IT+0xc8>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a7c      	ldr	r2, [pc, #496]	; (8002718 <HAL_DMA_Abort_IT+0x28c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d013      	beq.n	8002554 <HAL_DMA_Abort_IT+0xc8>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a7a      	ldr	r2, [pc, #488]	; (800271c <HAL_DMA_Abort_IT+0x290>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d00e      	beq.n	8002554 <HAL_DMA_Abort_IT+0xc8>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a79      	ldr	r2, [pc, #484]	; (8002720 <HAL_DMA_Abort_IT+0x294>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d009      	beq.n	8002554 <HAL_DMA_Abort_IT+0xc8>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a77      	ldr	r2, [pc, #476]	; (8002724 <HAL_DMA_Abort_IT+0x298>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d004      	beq.n	8002554 <HAL_DMA_Abort_IT+0xc8>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a76      	ldr	r2, [pc, #472]	; (8002728 <HAL_DMA_Abort_IT+0x29c>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d101      	bne.n	8002558 <HAL_DMA_Abort_IT+0xcc>
 8002554:	2301      	movs	r3, #1
 8002556:	e000      	b.n	800255a <HAL_DMA_Abort_IT+0xce>
 8002558:	2300      	movs	r3, #0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d065      	beq.n	800262a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2204      	movs	r2, #4
 8002562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a60      	ldr	r2, [pc, #384]	; (80026ec <HAL_DMA_Abort_IT+0x260>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d04a      	beq.n	8002606 <HAL_DMA_Abort_IT+0x17a>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a5e      	ldr	r2, [pc, #376]	; (80026f0 <HAL_DMA_Abort_IT+0x264>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d045      	beq.n	8002606 <HAL_DMA_Abort_IT+0x17a>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a5d      	ldr	r2, [pc, #372]	; (80026f4 <HAL_DMA_Abort_IT+0x268>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d040      	beq.n	8002606 <HAL_DMA_Abort_IT+0x17a>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a5b      	ldr	r2, [pc, #364]	; (80026f8 <HAL_DMA_Abort_IT+0x26c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d03b      	beq.n	8002606 <HAL_DMA_Abort_IT+0x17a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a5a      	ldr	r2, [pc, #360]	; (80026fc <HAL_DMA_Abort_IT+0x270>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d036      	beq.n	8002606 <HAL_DMA_Abort_IT+0x17a>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a58      	ldr	r2, [pc, #352]	; (8002700 <HAL_DMA_Abort_IT+0x274>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d031      	beq.n	8002606 <HAL_DMA_Abort_IT+0x17a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a57      	ldr	r2, [pc, #348]	; (8002704 <HAL_DMA_Abort_IT+0x278>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d02c      	beq.n	8002606 <HAL_DMA_Abort_IT+0x17a>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a55      	ldr	r2, [pc, #340]	; (8002708 <HAL_DMA_Abort_IT+0x27c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d027      	beq.n	8002606 <HAL_DMA_Abort_IT+0x17a>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a54      	ldr	r2, [pc, #336]	; (800270c <HAL_DMA_Abort_IT+0x280>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d022      	beq.n	8002606 <HAL_DMA_Abort_IT+0x17a>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a52      	ldr	r2, [pc, #328]	; (8002710 <HAL_DMA_Abort_IT+0x284>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d01d      	beq.n	8002606 <HAL_DMA_Abort_IT+0x17a>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a51      	ldr	r2, [pc, #324]	; (8002714 <HAL_DMA_Abort_IT+0x288>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d018      	beq.n	8002606 <HAL_DMA_Abort_IT+0x17a>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a4f      	ldr	r2, [pc, #316]	; (8002718 <HAL_DMA_Abort_IT+0x28c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d013      	beq.n	8002606 <HAL_DMA_Abort_IT+0x17a>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a4e      	ldr	r2, [pc, #312]	; (800271c <HAL_DMA_Abort_IT+0x290>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d00e      	beq.n	8002606 <HAL_DMA_Abort_IT+0x17a>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a4c      	ldr	r2, [pc, #304]	; (8002720 <HAL_DMA_Abort_IT+0x294>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d009      	beq.n	8002606 <HAL_DMA_Abort_IT+0x17a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a4b      	ldr	r2, [pc, #300]	; (8002724 <HAL_DMA_Abort_IT+0x298>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d004      	beq.n	8002606 <HAL_DMA_Abort_IT+0x17a>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a49      	ldr	r2, [pc, #292]	; (8002728 <HAL_DMA_Abort_IT+0x29c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d108      	bne.n	8002618 <HAL_DMA_Abort_IT+0x18c>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0201 	bic.w	r2, r2, #1
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	e147      	b.n	80028a8 <HAL_DMA_Abort_IT+0x41c>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0201 	bic.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	e13e      	b.n	80028a8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 020e 	bic.w	r2, r2, #14
 8002638:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a2b      	ldr	r2, [pc, #172]	; (80026ec <HAL_DMA_Abort_IT+0x260>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d04a      	beq.n	80026da <HAL_DMA_Abort_IT+0x24e>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a29      	ldr	r2, [pc, #164]	; (80026f0 <HAL_DMA_Abort_IT+0x264>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d045      	beq.n	80026da <HAL_DMA_Abort_IT+0x24e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a28      	ldr	r2, [pc, #160]	; (80026f4 <HAL_DMA_Abort_IT+0x268>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d040      	beq.n	80026da <HAL_DMA_Abort_IT+0x24e>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a26      	ldr	r2, [pc, #152]	; (80026f8 <HAL_DMA_Abort_IT+0x26c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d03b      	beq.n	80026da <HAL_DMA_Abort_IT+0x24e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a25      	ldr	r2, [pc, #148]	; (80026fc <HAL_DMA_Abort_IT+0x270>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d036      	beq.n	80026da <HAL_DMA_Abort_IT+0x24e>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a23      	ldr	r2, [pc, #140]	; (8002700 <HAL_DMA_Abort_IT+0x274>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d031      	beq.n	80026da <HAL_DMA_Abort_IT+0x24e>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a22      	ldr	r2, [pc, #136]	; (8002704 <HAL_DMA_Abort_IT+0x278>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d02c      	beq.n	80026da <HAL_DMA_Abort_IT+0x24e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a20      	ldr	r2, [pc, #128]	; (8002708 <HAL_DMA_Abort_IT+0x27c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d027      	beq.n	80026da <HAL_DMA_Abort_IT+0x24e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a1f      	ldr	r2, [pc, #124]	; (800270c <HAL_DMA_Abort_IT+0x280>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d022      	beq.n	80026da <HAL_DMA_Abort_IT+0x24e>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a1d      	ldr	r2, [pc, #116]	; (8002710 <HAL_DMA_Abort_IT+0x284>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d01d      	beq.n	80026da <HAL_DMA_Abort_IT+0x24e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a1c      	ldr	r2, [pc, #112]	; (8002714 <HAL_DMA_Abort_IT+0x288>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d018      	beq.n	80026da <HAL_DMA_Abort_IT+0x24e>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a1a      	ldr	r2, [pc, #104]	; (8002718 <HAL_DMA_Abort_IT+0x28c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d013      	beq.n	80026da <HAL_DMA_Abort_IT+0x24e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a19      	ldr	r2, [pc, #100]	; (800271c <HAL_DMA_Abort_IT+0x290>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d00e      	beq.n	80026da <HAL_DMA_Abort_IT+0x24e>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a17      	ldr	r2, [pc, #92]	; (8002720 <HAL_DMA_Abort_IT+0x294>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d009      	beq.n	80026da <HAL_DMA_Abort_IT+0x24e>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a16      	ldr	r2, [pc, #88]	; (8002724 <HAL_DMA_Abort_IT+0x298>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d004      	beq.n	80026da <HAL_DMA_Abort_IT+0x24e>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a14      	ldr	r2, [pc, #80]	; (8002728 <HAL_DMA_Abort_IT+0x29c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d128      	bne.n	800272c <HAL_DMA_Abort_IT+0x2a0>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0201 	bic.w	r2, r2, #1
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	e027      	b.n	800273c <HAL_DMA_Abort_IT+0x2b0>
 80026ec:	40020010 	.word	0x40020010
 80026f0:	40020028 	.word	0x40020028
 80026f4:	40020040 	.word	0x40020040
 80026f8:	40020058 	.word	0x40020058
 80026fc:	40020070 	.word	0x40020070
 8002700:	40020088 	.word	0x40020088
 8002704:	400200a0 	.word	0x400200a0
 8002708:	400200b8 	.word	0x400200b8
 800270c:	40020410 	.word	0x40020410
 8002710:	40020428 	.word	0x40020428
 8002714:	40020440 	.word	0x40020440
 8002718:	40020458 	.word	0x40020458
 800271c:	40020470 	.word	0x40020470
 8002720:	40020488 	.word	0x40020488
 8002724:	400204a0 	.word	0x400204a0
 8002728:	400204b8 	.word	0x400204b8
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0201 	bic.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a5c      	ldr	r2, [pc, #368]	; (80028b4 <HAL_DMA_Abort_IT+0x428>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d072      	beq.n	800282c <HAL_DMA_Abort_IT+0x3a0>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a5b      	ldr	r2, [pc, #364]	; (80028b8 <HAL_DMA_Abort_IT+0x42c>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d06d      	beq.n	800282c <HAL_DMA_Abort_IT+0x3a0>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a59      	ldr	r2, [pc, #356]	; (80028bc <HAL_DMA_Abort_IT+0x430>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d068      	beq.n	800282c <HAL_DMA_Abort_IT+0x3a0>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a58      	ldr	r2, [pc, #352]	; (80028c0 <HAL_DMA_Abort_IT+0x434>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d063      	beq.n	800282c <HAL_DMA_Abort_IT+0x3a0>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a56      	ldr	r2, [pc, #344]	; (80028c4 <HAL_DMA_Abort_IT+0x438>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d05e      	beq.n	800282c <HAL_DMA_Abort_IT+0x3a0>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a55      	ldr	r2, [pc, #340]	; (80028c8 <HAL_DMA_Abort_IT+0x43c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d059      	beq.n	800282c <HAL_DMA_Abort_IT+0x3a0>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a53      	ldr	r2, [pc, #332]	; (80028cc <HAL_DMA_Abort_IT+0x440>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d054      	beq.n	800282c <HAL_DMA_Abort_IT+0x3a0>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a52      	ldr	r2, [pc, #328]	; (80028d0 <HAL_DMA_Abort_IT+0x444>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d04f      	beq.n	800282c <HAL_DMA_Abort_IT+0x3a0>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a50      	ldr	r2, [pc, #320]	; (80028d4 <HAL_DMA_Abort_IT+0x448>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d04a      	beq.n	800282c <HAL_DMA_Abort_IT+0x3a0>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a4f      	ldr	r2, [pc, #316]	; (80028d8 <HAL_DMA_Abort_IT+0x44c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d045      	beq.n	800282c <HAL_DMA_Abort_IT+0x3a0>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a4d      	ldr	r2, [pc, #308]	; (80028dc <HAL_DMA_Abort_IT+0x450>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d040      	beq.n	800282c <HAL_DMA_Abort_IT+0x3a0>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a4c      	ldr	r2, [pc, #304]	; (80028e0 <HAL_DMA_Abort_IT+0x454>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d03b      	beq.n	800282c <HAL_DMA_Abort_IT+0x3a0>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a4a      	ldr	r2, [pc, #296]	; (80028e4 <HAL_DMA_Abort_IT+0x458>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d036      	beq.n	800282c <HAL_DMA_Abort_IT+0x3a0>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a49      	ldr	r2, [pc, #292]	; (80028e8 <HAL_DMA_Abort_IT+0x45c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d031      	beq.n	800282c <HAL_DMA_Abort_IT+0x3a0>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a47      	ldr	r2, [pc, #284]	; (80028ec <HAL_DMA_Abort_IT+0x460>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d02c      	beq.n	800282c <HAL_DMA_Abort_IT+0x3a0>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a46      	ldr	r2, [pc, #280]	; (80028f0 <HAL_DMA_Abort_IT+0x464>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d027      	beq.n	800282c <HAL_DMA_Abort_IT+0x3a0>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a44      	ldr	r2, [pc, #272]	; (80028f4 <HAL_DMA_Abort_IT+0x468>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d022      	beq.n	800282c <HAL_DMA_Abort_IT+0x3a0>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a43      	ldr	r2, [pc, #268]	; (80028f8 <HAL_DMA_Abort_IT+0x46c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d01d      	beq.n	800282c <HAL_DMA_Abort_IT+0x3a0>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a41      	ldr	r2, [pc, #260]	; (80028fc <HAL_DMA_Abort_IT+0x470>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d018      	beq.n	800282c <HAL_DMA_Abort_IT+0x3a0>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a40      	ldr	r2, [pc, #256]	; (8002900 <HAL_DMA_Abort_IT+0x474>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d013      	beq.n	800282c <HAL_DMA_Abort_IT+0x3a0>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a3e      	ldr	r2, [pc, #248]	; (8002904 <HAL_DMA_Abort_IT+0x478>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d00e      	beq.n	800282c <HAL_DMA_Abort_IT+0x3a0>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a3d      	ldr	r2, [pc, #244]	; (8002908 <HAL_DMA_Abort_IT+0x47c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d009      	beq.n	800282c <HAL_DMA_Abort_IT+0x3a0>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a3b      	ldr	r2, [pc, #236]	; (800290c <HAL_DMA_Abort_IT+0x480>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d004      	beq.n	800282c <HAL_DMA_Abort_IT+0x3a0>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a3a      	ldr	r2, [pc, #232]	; (8002910 <HAL_DMA_Abort_IT+0x484>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d101      	bne.n	8002830 <HAL_DMA_Abort_IT+0x3a4>
 800282c:	2301      	movs	r3, #1
 800282e:	e000      	b.n	8002832 <HAL_DMA_Abort_IT+0x3a6>
 8002830:	2300      	movs	r3, #0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d028      	beq.n	8002888 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002840:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002844:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002850:	f003 031f 	and.w	r3, r3, #31
 8002854:	2201      	movs	r2, #1
 8002856:	409a      	lsls	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002864:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00c      	beq.n	8002888 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002878:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800287c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002886:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40020010 	.word	0x40020010
 80028b8:	40020028 	.word	0x40020028
 80028bc:	40020040 	.word	0x40020040
 80028c0:	40020058 	.word	0x40020058
 80028c4:	40020070 	.word	0x40020070
 80028c8:	40020088 	.word	0x40020088
 80028cc:	400200a0 	.word	0x400200a0
 80028d0:	400200b8 	.word	0x400200b8
 80028d4:	40020410 	.word	0x40020410
 80028d8:	40020428 	.word	0x40020428
 80028dc:	40020440 	.word	0x40020440
 80028e0:	40020458 	.word	0x40020458
 80028e4:	40020470 	.word	0x40020470
 80028e8:	40020488 	.word	0x40020488
 80028ec:	400204a0 	.word	0x400204a0
 80028f0:	400204b8 	.word	0x400204b8
 80028f4:	58025408 	.word	0x58025408
 80028f8:	5802541c 	.word	0x5802541c
 80028fc:	58025430 	.word	0x58025430
 8002900:	58025444 	.word	0x58025444
 8002904:	58025458 	.word	0x58025458
 8002908:	5802546c 	.word	0x5802546c
 800290c:	58025480 	.word	0x58025480
 8002910:	58025494 	.word	0x58025494

08002914 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08a      	sub	sp, #40	; 0x28
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002920:	4b67      	ldr	r3, [pc, #412]	; (8002ac0 <HAL_DMA_IRQHandler+0x1ac>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a67      	ldr	r2, [pc, #412]	; (8002ac4 <HAL_DMA_IRQHandler+0x1b0>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	0a9b      	lsrs	r3, r3, #10
 800292c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002938:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a5f      	ldr	r2, [pc, #380]	; (8002ac8 <HAL_DMA_IRQHandler+0x1b4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d04a      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a5d      	ldr	r2, [pc, #372]	; (8002acc <HAL_DMA_IRQHandler+0x1b8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d045      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a5c      	ldr	r2, [pc, #368]	; (8002ad0 <HAL_DMA_IRQHandler+0x1bc>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d040      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a5a      	ldr	r2, [pc, #360]	; (8002ad4 <HAL_DMA_IRQHandler+0x1c0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d03b      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a59      	ldr	r2, [pc, #356]	; (8002ad8 <HAL_DMA_IRQHandler+0x1c4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d036      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a57      	ldr	r2, [pc, #348]	; (8002adc <HAL_DMA_IRQHandler+0x1c8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d031      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a56      	ldr	r2, [pc, #344]	; (8002ae0 <HAL_DMA_IRQHandler+0x1cc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d02c      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a54      	ldr	r2, [pc, #336]	; (8002ae4 <HAL_DMA_IRQHandler+0x1d0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d027      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a53      	ldr	r2, [pc, #332]	; (8002ae8 <HAL_DMA_IRQHandler+0x1d4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d022      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a51      	ldr	r2, [pc, #324]	; (8002aec <HAL_DMA_IRQHandler+0x1d8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d01d      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a50      	ldr	r2, [pc, #320]	; (8002af0 <HAL_DMA_IRQHandler+0x1dc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d018      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a4e      	ldr	r2, [pc, #312]	; (8002af4 <HAL_DMA_IRQHandler+0x1e0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d013      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a4d      	ldr	r2, [pc, #308]	; (8002af8 <HAL_DMA_IRQHandler+0x1e4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d00e      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a4b      	ldr	r2, [pc, #300]	; (8002afc <HAL_DMA_IRQHandler+0x1e8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d009      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a4a      	ldr	r2, [pc, #296]	; (8002b00 <HAL_DMA_IRQHandler+0x1ec>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d004      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a48      	ldr	r2, [pc, #288]	; (8002b04 <HAL_DMA_IRQHandler+0x1f0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d101      	bne.n	80029ea <HAL_DMA_IRQHandler+0xd6>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <HAL_DMA_IRQHandler+0xd8>
 80029ea:	2300      	movs	r3, #0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 842b 	beq.w	8003248 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f6:	f003 031f 	and.w	r3, r3, #31
 80029fa:	2208      	movs	r2, #8
 80029fc:	409a      	lsls	r2, r3
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 80a2 	beq.w	8002b4c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a2e      	ldr	r2, [pc, #184]	; (8002ac8 <HAL_DMA_IRQHandler+0x1b4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d04a      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a2d      	ldr	r2, [pc, #180]	; (8002acc <HAL_DMA_IRQHandler+0x1b8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d045      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a2b      	ldr	r2, [pc, #172]	; (8002ad0 <HAL_DMA_IRQHandler+0x1bc>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d040      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a2a      	ldr	r2, [pc, #168]	; (8002ad4 <HAL_DMA_IRQHandler+0x1c0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d03b      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a28      	ldr	r2, [pc, #160]	; (8002ad8 <HAL_DMA_IRQHandler+0x1c4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d036      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a27      	ldr	r2, [pc, #156]	; (8002adc <HAL_DMA_IRQHandler+0x1c8>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d031      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a25      	ldr	r2, [pc, #148]	; (8002ae0 <HAL_DMA_IRQHandler+0x1cc>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d02c      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a24      	ldr	r2, [pc, #144]	; (8002ae4 <HAL_DMA_IRQHandler+0x1d0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d027      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a22      	ldr	r2, [pc, #136]	; (8002ae8 <HAL_DMA_IRQHandler+0x1d4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d022      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a21      	ldr	r2, [pc, #132]	; (8002aec <HAL_DMA_IRQHandler+0x1d8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d01d      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1f      	ldr	r2, [pc, #124]	; (8002af0 <HAL_DMA_IRQHandler+0x1dc>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d018      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a1e      	ldr	r2, [pc, #120]	; (8002af4 <HAL_DMA_IRQHandler+0x1e0>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d013      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1c      	ldr	r2, [pc, #112]	; (8002af8 <HAL_DMA_IRQHandler+0x1e4>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d00e      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1b      	ldr	r2, [pc, #108]	; (8002afc <HAL_DMA_IRQHandler+0x1e8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d009      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a19      	ldr	r2, [pc, #100]	; (8002b00 <HAL_DMA_IRQHandler+0x1ec>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d004      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a18      	ldr	r2, [pc, #96]	; (8002b04 <HAL_DMA_IRQHandler+0x1f0>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d12f      	bne.n	8002b08 <HAL_DMA_IRQHandler+0x1f4>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0304 	and.w	r3, r3, #4
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	bf14      	ite	ne
 8002ab6:	2301      	movne	r3, #1
 8002ab8:	2300      	moveq	r3, #0
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	e02e      	b.n	8002b1c <HAL_DMA_IRQHandler+0x208>
 8002abe:	bf00      	nop
 8002ac0:	24000004 	.word	0x24000004
 8002ac4:	1b4e81b5 	.word	0x1b4e81b5
 8002ac8:	40020010 	.word	0x40020010
 8002acc:	40020028 	.word	0x40020028
 8002ad0:	40020040 	.word	0x40020040
 8002ad4:	40020058 	.word	0x40020058
 8002ad8:	40020070 	.word	0x40020070
 8002adc:	40020088 	.word	0x40020088
 8002ae0:	400200a0 	.word	0x400200a0
 8002ae4:	400200b8 	.word	0x400200b8
 8002ae8:	40020410 	.word	0x40020410
 8002aec:	40020428 	.word	0x40020428
 8002af0:	40020440 	.word	0x40020440
 8002af4:	40020458 	.word	0x40020458
 8002af8:	40020470 	.word	0x40020470
 8002afc:	40020488 	.word	0x40020488
 8002b00:	400204a0 	.word	0x400204a0
 8002b04:	400204b8 	.word	0x400204b8
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	bf14      	ite	ne
 8002b16:	2301      	movne	r3, #1
 8002b18:	2300      	moveq	r3, #0
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d015      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0204 	bic.w	r2, r2, #4
 8002b2e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	2208      	movs	r2, #8
 8002b3a:	409a      	lsls	r2, r3
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b44:	f043 0201 	orr.w	r2, r3, #1
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b50:	f003 031f 	and.w	r3, r3, #31
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d06e      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a69      	ldr	r2, [pc, #420]	; (8002d0c <HAL_DMA_IRQHandler+0x3f8>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d04a      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a67      	ldr	r2, [pc, #412]	; (8002d10 <HAL_DMA_IRQHandler+0x3fc>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d045      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a66      	ldr	r2, [pc, #408]	; (8002d14 <HAL_DMA_IRQHandler+0x400>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d040      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a64      	ldr	r2, [pc, #400]	; (8002d18 <HAL_DMA_IRQHandler+0x404>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d03b      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a63      	ldr	r2, [pc, #396]	; (8002d1c <HAL_DMA_IRQHandler+0x408>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d036      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a61      	ldr	r2, [pc, #388]	; (8002d20 <HAL_DMA_IRQHandler+0x40c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d031      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a60      	ldr	r2, [pc, #384]	; (8002d24 <HAL_DMA_IRQHandler+0x410>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d02c      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a5e      	ldr	r2, [pc, #376]	; (8002d28 <HAL_DMA_IRQHandler+0x414>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d027      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a5d      	ldr	r2, [pc, #372]	; (8002d2c <HAL_DMA_IRQHandler+0x418>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d022      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a5b      	ldr	r2, [pc, #364]	; (8002d30 <HAL_DMA_IRQHandler+0x41c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d01d      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a5a      	ldr	r2, [pc, #360]	; (8002d34 <HAL_DMA_IRQHandler+0x420>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d018      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a58      	ldr	r2, [pc, #352]	; (8002d38 <HAL_DMA_IRQHandler+0x424>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d013      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a57      	ldr	r2, [pc, #348]	; (8002d3c <HAL_DMA_IRQHandler+0x428>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d00e      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a55      	ldr	r2, [pc, #340]	; (8002d40 <HAL_DMA_IRQHandler+0x42c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d009      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a54      	ldr	r2, [pc, #336]	; (8002d44 <HAL_DMA_IRQHandler+0x430>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d004      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a52      	ldr	r2, [pc, #328]	; (8002d48 <HAL_DMA_IRQHandler+0x434>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d10a      	bne.n	8002c18 <HAL_DMA_IRQHandler+0x304>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	bf14      	ite	ne
 8002c10:	2301      	movne	r3, #1
 8002c12:	2300      	moveq	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	e003      	b.n	8002c20 <HAL_DMA_IRQHandler+0x30c>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2300      	movs	r3, #0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00d      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c28:	f003 031f 	and.w	r3, r3, #31
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c38:	f043 0202 	orr.w	r2, r3, #2
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c44:	f003 031f 	and.w	r3, r3, #31
 8002c48:	2204      	movs	r2, #4
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 808f 	beq.w	8002d74 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a2c      	ldr	r2, [pc, #176]	; (8002d0c <HAL_DMA_IRQHandler+0x3f8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d04a      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a2a      	ldr	r2, [pc, #168]	; (8002d10 <HAL_DMA_IRQHandler+0x3fc>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d045      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a29      	ldr	r2, [pc, #164]	; (8002d14 <HAL_DMA_IRQHandler+0x400>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d040      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a27      	ldr	r2, [pc, #156]	; (8002d18 <HAL_DMA_IRQHandler+0x404>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d03b      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a26      	ldr	r2, [pc, #152]	; (8002d1c <HAL_DMA_IRQHandler+0x408>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d036      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a24      	ldr	r2, [pc, #144]	; (8002d20 <HAL_DMA_IRQHandler+0x40c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d031      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a23      	ldr	r2, [pc, #140]	; (8002d24 <HAL_DMA_IRQHandler+0x410>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d02c      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a21      	ldr	r2, [pc, #132]	; (8002d28 <HAL_DMA_IRQHandler+0x414>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d027      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a20      	ldr	r2, [pc, #128]	; (8002d2c <HAL_DMA_IRQHandler+0x418>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d022      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a1e      	ldr	r2, [pc, #120]	; (8002d30 <HAL_DMA_IRQHandler+0x41c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d01d      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a1d      	ldr	r2, [pc, #116]	; (8002d34 <HAL_DMA_IRQHandler+0x420>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d018      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a1b      	ldr	r2, [pc, #108]	; (8002d38 <HAL_DMA_IRQHandler+0x424>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a1a      	ldr	r2, [pc, #104]	; (8002d3c <HAL_DMA_IRQHandler+0x428>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d00e      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a18      	ldr	r2, [pc, #96]	; (8002d40 <HAL_DMA_IRQHandler+0x42c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d009      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a17      	ldr	r2, [pc, #92]	; (8002d44 <HAL_DMA_IRQHandler+0x430>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d004      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a15      	ldr	r2, [pc, #84]	; (8002d48 <HAL_DMA_IRQHandler+0x434>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d12a      	bne.n	8002d4c <HAL_DMA_IRQHandler+0x438>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	bf14      	ite	ne
 8002d04:	2301      	movne	r3, #1
 8002d06:	2300      	moveq	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	e023      	b.n	8002d54 <HAL_DMA_IRQHandler+0x440>
 8002d0c:	40020010 	.word	0x40020010
 8002d10:	40020028 	.word	0x40020028
 8002d14:	40020040 	.word	0x40020040
 8002d18:	40020058 	.word	0x40020058
 8002d1c:	40020070 	.word	0x40020070
 8002d20:	40020088 	.word	0x40020088
 8002d24:	400200a0 	.word	0x400200a0
 8002d28:	400200b8 	.word	0x400200b8
 8002d2c:	40020410 	.word	0x40020410
 8002d30:	40020428 	.word	0x40020428
 8002d34:	40020440 	.word	0x40020440
 8002d38:	40020458 	.word	0x40020458
 8002d3c:	40020470 	.word	0x40020470
 8002d40:	40020488 	.word	0x40020488
 8002d44:	400204a0 	.word	0x400204a0
 8002d48:	400204b8 	.word	0x400204b8
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2300      	movs	r3, #0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00d      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5c:	f003 031f 	and.w	r3, r3, #31
 8002d60:	2204      	movs	r2, #4
 8002d62:	409a      	lsls	r2, r3
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6c:	f043 0204 	orr.w	r2, r3, #4
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d78:	f003 031f 	and.w	r3, r3, #31
 8002d7c:	2210      	movs	r2, #16
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 80a6 	beq.w	8002ed6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a85      	ldr	r2, [pc, #532]	; (8002fa4 <HAL_DMA_IRQHandler+0x690>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d04a      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a83      	ldr	r2, [pc, #524]	; (8002fa8 <HAL_DMA_IRQHandler+0x694>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d045      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a82      	ldr	r2, [pc, #520]	; (8002fac <HAL_DMA_IRQHandler+0x698>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d040      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a80      	ldr	r2, [pc, #512]	; (8002fb0 <HAL_DMA_IRQHandler+0x69c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d03b      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a7f      	ldr	r2, [pc, #508]	; (8002fb4 <HAL_DMA_IRQHandler+0x6a0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d036      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a7d      	ldr	r2, [pc, #500]	; (8002fb8 <HAL_DMA_IRQHandler+0x6a4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d031      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a7c      	ldr	r2, [pc, #496]	; (8002fbc <HAL_DMA_IRQHandler+0x6a8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d02c      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a7a      	ldr	r2, [pc, #488]	; (8002fc0 <HAL_DMA_IRQHandler+0x6ac>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d027      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a79      	ldr	r2, [pc, #484]	; (8002fc4 <HAL_DMA_IRQHandler+0x6b0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d022      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a77      	ldr	r2, [pc, #476]	; (8002fc8 <HAL_DMA_IRQHandler+0x6b4>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d01d      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a76      	ldr	r2, [pc, #472]	; (8002fcc <HAL_DMA_IRQHandler+0x6b8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d018      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a74      	ldr	r2, [pc, #464]	; (8002fd0 <HAL_DMA_IRQHandler+0x6bc>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d013      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a73      	ldr	r2, [pc, #460]	; (8002fd4 <HAL_DMA_IRQHandler+0x6c0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d00e      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a71      	ldr	r2, [pc, #452]	; (8002fd8 <HAL_DMA_IRQHandler+0x6c4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d009      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a70      	ldr	r2, [pc, #448]	; (8002fdc <HAL_DMA_IRQHandler+0x6c8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d004      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a6e      	ldr	r2, [pc, #440]	; (8002fe0 <HAL_DMA_IRQHandler+0x6cc>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d10a      	bne.n	8002e40 <HAL_DMA_IRQHandler+0x52c>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf14      	ite	ne
 8002e38:	2301      	movne	r3, #1
 8002e3a:	2300      	moveq	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	e009      	b.n	8002e54 <HAL_DMA_IRQHandler+0x540>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	bf14      	ite	ne
 8002e4e:	2301      	movne	r3, #1
 8002e50:	2300      	moveq	r3, #0
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d03e      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	2210      	movs	r2, #16
 8002e62:	409a      	lsls	r2, r3
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d018      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d108      	bne.n	8002e96 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d024      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	4798      	blx	r3
 8002e94:	e01f      	b.n	8002ed6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d01b      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	4798      	blx	r3
 8002ea6:	e016      	b.n	8002ed6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d107      	bne.n	8002ec6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0208 	bic.w	r2, r2, #8
 8002ec4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	2220      	movs	r2, #32
 8002ee0:	409a      	lsls	r2, r3
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 8110 	beq.w	800310c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a2c      	ldr	r2, [pc, #176]	; (8002fa4 <HAL_DMA_IRQHandler+0x690>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d04a      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a2b      	ldr	r2, [pc, #172]	; (8002fa8 <HAL_DMA_IRQHandler+0x694>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d045      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a29      	ldr	r2, [pc, #164]	; (8002fac <HAL_DMA_IRQHandler+0x698>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d040      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a28      	ldr	r2, [pc, #160]	; (8002fb0 <HAL_DMA_IRQHandler+0x69c>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d03b      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a26      	ldr	r2, [pc, #152]	; (8002fb4 <HAL_DMA_IRQHandler+0x6a0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d036      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a25      	ldr	r2, [pc, #148]	; (8002fb8 <HAL_DMA_IRQHandler+0x6a4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d031      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a23      	ldr	r2, [pc, #140]	; (8002fbc <HAL_DMA_IRQHandler+0x6a8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d02c      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a22      	ldr	r2, [pc, #136]	; (8002fc0 <HAL_DMA_IRQHandler+0x6ac>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d027      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a20      	ldr	r2, [pc, #128]	; (8002fc4 <HAL_DMA_IRQHandler+0x6b0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d022      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a1f      	ldr	r2, [pc, #124]	; (8002fc8 <HAL_DMA_IRQHandler+0x6b4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d01d      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a1d      	ldr	r2, [pc, #116]	; (8002fcc <HAL_DMA_IRQHandler+0x6b8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d018      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a1c      	ldr	r2, [pc, #112]	; (8002fd0 <HAL_DMA_IRQHandler+0x6bc>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d013      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a1a      	ldr	r2, [pc, #104]	; (8002fd4 <HAL_DMA_IRQHandler+0x6c0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00e      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a19      	ldr	r2, [pc, #100]	; (8002fd8 <HAL_DMA_IRQHandler+0x6c4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d009      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a17      	ldr	r2, [pc, #92]	; (8002fdc <HAL_DMA_IRQHandler+0x6c8>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d004      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a16      	ldr	r2, [pc, #88]	; (8002fe0 <HAL_DMA_IRQHandler+0x6cc>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d12b      	bne.n	8002fe4 <HAL_DMA_IRQHandler+0x6d0>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	bf14      	ite	ne
 8002f9a:	2301      	movne	r3, #1
 8002f9c:	2300      	moveq	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	e02a      	b.n	8002ff8 <HAL_DMA_IRQHandler+0x6e4>
 8002fa2:	bf00      	nop
 8002fa4:	40020010 	.word	0x40020010
 8002fa8:	40020028 	.word	0x40020028
 8002fac:	40020040 	.word	0x40020040
 8002fb0:	40020058 	.word	0x40020058
 8002fb4:	40020070 	.word	0x40020070
 8002fb8:	40020088 	.word	0x40020088
 8002fbc:	400200a0 	.word	0x400200a0
 8002fc0:	400200b8 	.word	0x400200b8
 8002fc4:	40020410 	.word	0x40020410
 8002fc8:	40020428 	.word	0x40020428
 8002fcc:	40020440 	.word	0x40020440
 8002fd0:	40020458 	.word	0x40020458
 8002fd4:	40020470 	.word	0x40020470
 8002fd8:	40020488 	.word	0x40020488
 8002fdc:	400204a0 	.word	0x400204a0
 8002fe0:	400204b8 	.word	0x400204b8
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	bf14      	ite	ne
 8002ff2:	2301      	movne	r3, #1
 8002ff4:	2300      	moveq	r3, #0
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 8087 	beq.w	800310c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003002:	f003 031f 	and.w	r3, r3, #31
 8003006:	2220      	movs	r2, #32
 8003008:	409a      	lsls	r2, r3
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b04      	cmp	r3, #4
 8003018:	d139      	bne.n	800308e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0216 	bic.w	r2, r2, #22
 8003028:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695a      	ldr	r2, [r3, #20]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003038:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	2b00      	cmp	r3, #0
 8003040:	d103      	bne.n	800304a <HAL_DMA_IRQHandler+0x736>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003046:	2b00      	cmp	r3, #0
 8003048:	d007      	beq.n	800305a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0208 	bic.w	r2, r2, #8
 8003058:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305e:	f003 031f 	and.w	r3, r3, #31
 8003062:	223f      	movs	r2, #63	; 0x3f
 8003064:	409a      	lsls	r2, r3
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 834a 	beq.w	8003718 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	4798      	blx	r3
          }
          return;
 800308c:	e344      	b.n	8003718 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d018      	beq.n	80030ce <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d108      	bne.n	80030bc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d02c      	beq.n	800310c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	4798      	blx	r3
 80030ba:	e027      	b.n	800310c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d023      	beq.n	800310c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	4798      	blx	r3
 80030cc:	e01e      	b.n	800310c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10f      	bne.n	80030fc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0210 	bic.w	r2, r2, #16
 80030ea:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 8306 	beq.w	8003722 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 8088 	beq.w	8003234 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2204      	movs	r2, #4
 8003128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a7a      	ldr	r2, [pc, #488]	; (800331c <HAL_DMA_IRQHandler+0xa08>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d04a      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a79      	ldr	r2, [pc, #484]	; (8003320 <HAL_DMA_IRQHandler+0xa0c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d045      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a77      	ldr	r2, [pc, #476]	; (8003324 <HAL_DMA_IRQHandler+0xa10>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d040      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a76      	ldr	r2, [pc, #472]	; (8003328 <HAL_DMA_IRQHandler+0xa14>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d03b      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a74      	ldr	r2, [pc, #464]	; (800332c <HAL_DMA_IRQHandler+0xa18>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d036      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a73      	ldr	r2, [pc, #460]	; (8003330 <HAL_DMA_IRQHandler+0xa1c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d031      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a71      	ldr	r2, [pc, #452]	; (8003334 <HAL_DMA_IRQHandler+0xa20>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d02c      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a70      	ldr	r2, [pc, #448]	; (8003338 <HAL_DMA_IRQHandler+0xa24>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d027      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a6e      	ldr	r2, [pc, #440]	; (800333c <HAL_DMA_IRQHandler+0xa28>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d022      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a6d      	ldr	r2, [pc, #436]	; (8003340 <HAL_DMA_IRQHandler+0xa2c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d01d      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a6b      	ldr	r2, [pc, #428]	; (8003344 <HAL_DMA_IRQHandler+0xa30>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d018      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a6a      	ldr	r2, [pc, #424]	; (8003348 <HAL_DMA_IRQHandler+0xa34>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d013      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a68      	ldr	r2, [pc, #416]	; (800334c <HAL_DMA_IRQHandler+0xa38>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d00e      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a67      	ldr	r2, [pc, #412]	; (8003350 <HAL_DMA_IRQHandler+0xa3c>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d009      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a65      	ldr	r2, [pc, #404]	; (8003354 <HAL_DMA_IRQHandler+0xa40>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d004      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a64      	ldr	r2, [pc, #400]	; (8003358 <HAL_DMA_IRQHandler+0xa44>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d108      	bne.n	80031de <HAL_DMA_IRQHandler+0x8ca>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0201 	bic.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	e007      	b.n	80031ee <HAL_DMA_IRQHandler+0x8da>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0201 	bic.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	3301      	adds	r3, #1
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d307      	bcc.n	800320a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1f2      	bne.n	80031ee <HAL_DMA_IRQHandler+0x8da>
 8003208:	e000      	b.n	800320c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800320a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d004      	beq.n	800322c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2203      	movs	r2, #3
 8003226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800322a:	e003      	b.n	8003234 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 8272 	beq.w	8003722 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	4798      	blx	r3
 8003246:	e26c      	b.n	8003722 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a43      	ldr	r2, [pc, #268]	; (800335c <HAL_DMA_IRQHandler+0xa48>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d022      	beq.n	8003298 <HAL_DMA_IRQHandler+0x984>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a42      	ldr	r2, [pc, #264]	; (8003360 <HAL_DMA_IRQHandler+0xa4c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d01d      	beq.n	8003298 <HAL_DMA_IRQHandler+0x984>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a40      	ldr	r2, [pc, #256]	; (8003364 <HAL_DMA_IRQHandler+0xa50>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d018      	beq.n	8003298 <HAL_DMA_IRQHandler+0x984>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a3f      	ldr	r2, [pc, #252]	; (8003368 <HAL_DMA_IRQHandler+0xa54>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d013      	beq.n	8003298 <HAL_DMA_IRQHandler+0x984>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a3d      	ldr	r2, [pc, #244]	; (800336c <HAL_DMA_IRQHandler+0xa58>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d00e      	beq.n	8003298 <HAL_DMA_IRQHandler+0x984>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a3c      	ldr	r2, [pc, #240]	; (8003370 <HAL_DMA_IRQHandler+0xa5c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d009      	beq.n	8003298 <HAL_DMA_IRQHandler+0x984>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a3a      	ldr	r2, [pc, #232]	; (8003374 <HAL_DMA_IRQHandler+0xa60>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d004      	beq.n	8003298 <HAL_DMA_IRQHandler+0x984>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a39      	ldr	r2, [pc, #228]	; (8003378 <HAL_DMA_IRQHandler+0xa64>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d101      	bne.n	800329c <HAL_DMA_IRQHandler+0x988>
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <HAL_DMA_IRQHandler+0x98a>
 800329c:	2300      	movs	r3, #0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 823f 	beq.w	8003722 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b0:	f003 031f 	and.w	r3, r3, #31
 80032b4:	2204      	movs	r2, #4
 80032b6:	409a      	lsls	r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 80cd 	beq.w	800345c <HAL_DMA_IRQHandler+0xb48>
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 80c7 	beq.w	800345c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d2:	f003 031f 	and.w	r3, r3, #31
 80032d6:	2204      	movs	r2, #4
 80032d8:	409a      	lsls	r2, r3
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d049      	beq.n	800337c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d109      	bne.n	8003306 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 8210 	beq.w	800371c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003304:	e20a      	b.n	800371c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 8206 	beq.w	800371c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003318:	e200      	b.n	800371c <HAL_DMA_IRQHandler+0xe08>
 800331a:	bf00      	nop
 800331c:	40020010 	.word	0x40020010
 8003320:	40020028 	.word	0x40020028
 8003324:	40020040 	.word	0x40020040
 8003328:	40020058 	.word	0x40020058
 800332c:	40020070 	.word	0x40020070
 8003330:	40020088 	.word	0x40020088
 8003334:	400200a0 	.word	0x400200a0
 8003338:	400200b8 	.word	0x400200b8
 800333c:	40020410 	.word	0x40020410
 8003340:	40020428 	.word	0x40020428
 8003344:	40020440 	.word	0x40020440
 8003348:	40020458 	.word	0x40020458
 800334c:	40020470 	.word	0x40020470
 8003350:	40020488 	.word	0x40020488
 8003354:	400204a0 	.word	0x400204a0
 8003358:	400204b8 	.word	0x400204b8
 800335c:	58025408 	.word	0x58025408
 8003360:	5802541c 	.word	0x5802541c
 8003364:	58025430 	.word	0x58025430
 8003368:	58025444 	.word	0x58025444
 800336c:	58025458 	.word	0x58025458
 8003370:	5802546c 	.word	0x5802546c
 8003374:	58025480 	.word	0x58025480
 8003378:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	2b00      	cmp	r3, #0
 8003384:	d160      	bne.n	8003448 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a8c      	ldr	r2, [pc, #560]	; (80035bc <HAL_DMA_IRQHandler+0xca8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d04a      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a8a      	ldr	r2, [pc, #552]	; (80035c0 <HAL_DMA_IRQHandler+0xcac>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d045      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a89      	ldr	r2, [pc, #548]	; (80035c4 <HAL_DMA_IRQHandler+0xcb0>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d040      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a87      	ldr	r2, [pc, #540]	; (80035c8 <HAL_DMA_IRQHandler+0xcb4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d03b      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a86      	ldr	r2, [pc, #536]	; (80035cc <HAL_DMA_IRQHandler+0xcb8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d036      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a84      	ldr	r2, [pc, #528]	; (80035d0 <HAL_DMA_IRQHandler+0xcbc>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d031      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a83      	ldr	r2, [pc, #524]	; (80035d4 <HAL_DMA_IRQHandler+0xcc0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d02c      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a81      	ldr	r2, [pc, #516]	; (80035d8 <HAL_DMA_IRQHandler+0xcc4>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d027      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a80      	ldr	r2, [pc, #512]	; (80035dc <HAL_DMA_IRQHandler+0xcc8>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d022      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a7e      	ldr	r2, [pc, #504]	; (80035e0 <HAL_DMA_IRQHandler+0xccc>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d01d      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a7d      	ldr	r2, [pc, #500]	; (80035e4 <HAL_DMA_IRQHandler+0xcd0>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d018      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a7b      	ldr	r2, [pc, #492]	; (80035e8 <HAL_DMA_IRQHandler+0xcd4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d013      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a7a      	ldr	r2, [pc, #488]	; (80035ec <HAL_DMA_IRQHandler+0xcd8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d00e      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a78      	ldr	r2, [pc, #480]	; (80035f0 <HAL_DMA_IRQHandler+0xcdc>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d009      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a77      	ldr	r2, [pc, #476]	; (80035f4 <HAL_DMA_IRQHandler+0xce0>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d004      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a75      	ldr	r2, [pc, #468]	; (80035f8 <HAL_DMA_IRQHandler+0xce4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d108      	bne.n	8003438 <HAL_DMA_IRQHandler+0xb24>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0208 	bic.w	r2, r2, #8
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	e007      	b.n	8003448 <HAL_DMA_IRQHandler+0xb34>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0204 	bic.w	r2, r2, #4
 8003446:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 8165 	beq.w	800371c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800345a:	e15f      	b.n	800371c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003460:	f003 031f 	and.w	r3, r3, #31
 8003464:	2202      	movs	r2, #2
 8003466:	409a      	lsls	r2, r3
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	4013      	ands	r3, r2
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 80c5 	beq.w	80035fc <HAL_DMA_IRQHandler+0xce8>
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80bf 	beq.w	80035fc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003482:	f003 031f 	and.w	r3, r3, #31
 8003486:	2202      	movs	r2, #2
 8003488:	409a      	lsls	r2, r3
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d018      	beq.n	80034ca <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d109      	bne.n	80034b6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 813a 	beq.w	8003720 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034b4:	e134      	b.n	8003720 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 8130 	beq.w	8003720 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034c8:	e12a      	b.n	8003720 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d168      	bne.n	80035a6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a38      	ldr	r2, [pc, #224]	; (80035bc <HAL_DMA_IRQHandler+0xca8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d04a      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a37      	ldr	r2, [pc, #220]	; (80035c0 <HAL_DMA_IRQHandler+0xcac>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d045      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a35      	ldr	r2, [pc, #212]	; (80035c4 <HAL_DMA_IRQHandler+0xcb0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d040      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a34      	ldr	r2, [pc, #208]	; (80035c8 <HAL_DMA_IRQHandler+0xcb4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d03b      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a32      	ldr	r2, [pc, #200]	; (80035cc <HAL_DMA_IRQHandler+0xcb8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d036      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a31      	ldr	r2, [pc, #196]	; (80035d0 <HAL_DMA_IRQHandler+0xcbc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d031      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a2f      	ldr	r2, [pc, #188]	; (80035d4 <HAL_DMA_IRQHandler+0xcc0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d02c      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a2e      	ldr	r2, [pc, #184]	; (80035d8 <HAL_DMA_IRQHandler+0xcc4>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d027      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a2c      	ldr	r2, [pc, #176]	; (80035dc <HAL_DMA_IRQHandler+0xcc8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d022      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a2b      	ldr	r2, [pc, #172]	; (80035e0 <HAL_DMA_IRQHandler+0xccc>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d01d      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a29      	ldr	r2, [pc, #164]	; (80035e4 <HAL_DMA_IRQHandler+0xcd0>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d018      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a28      	ldr	r2, [pc, #160]	; (80035e8 <HAL_DMA_IRQHandler+0xcd4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d013      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a26      	ldr	r2, [pc, #152]	; (80035ec <HAL_DMA_IRQHandler+0xcd8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00e      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a25      	ldr	r2, [pc, #148]	; (80035f0 <HAL_DMA_IRQHandler+0xcdc>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d009      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a23      	ldr	r2, [pc, #140]	; (80035f4 <HAL_DMA_IRQHandler+0xce0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d004      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a22      	ldr	r2, [pc, #136]	; (80035f8 <HAL_DMA_IRQHandler+0xce4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d108      	bne.n	8003586 <HAL_DMA_IRQHandler+0xc72>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0214 	bic.w	r2, r2, #20
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	e007      	b.n	8003596 <HAL_DMA_IRQHandler+0xc82>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 020a 	bic.w	r2, r2, #10
 8003594:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 80b8 	beq.w	8003720 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035b8:	e0b2      	b.n	8003720 <HAL_DMA_IRQHandler+0xe0c>
 80035ba:	bf00      	nop
 80035bc:	40020010 	.word	0x40020010
 80035c0:	40020028 	.word	0x40020028
 80035c4:	40020040 	.word	0x40020040
 80035c8:	40020058 	.word	0x40020058
 80035cc:	40020070 	.word	0x40020070
 80035d0:	40020088 	.word	0x40020088
 80035d4:	400200a0 	.word	0x400200a0
 80035d8:	400200b8 	.word	0x400200b8
 80035dc:	40020410 	.word	0x40020410
 80035e0:	40020428 	.word	0x40020428
 80035e4:	40020440 	.word	0x40020440
 80035e8:	40020458 	.word	0x40020458
 80035ec:	40020470 	.word	0x40020470
 80035f0:	40020488 	.word	0x40020488
 80035f4:	400204a0 	.word	0x400204a0
 80035f8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	2208      	movs	r2, #8
 8003606:	409a      	lsls	r2, r3
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	4013      	ands	r3, r2
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 8088 	beq.w	8003722 <HAL_DMA_IRQHandler+0xe0e>
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f003 0308 	and.w	r3, r3, #8
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 8082 	beq.w	8003722 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a41      	ldr	r2, [pc, #260]	; (8003728 <HAL_DMA_IRQHandler+0xe14>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d04a      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a3f      	ldr	r2, [pc, #252]	; (800372c <HAL_DMA_IRQHandler+0xe18>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d045      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a3e      	ldr	r2, [pc, #248]	; (8003730 <HAL_DMA_IRQHandler+0xe1c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d040      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a3c      	ldr	r2, [pc, #240]	; (8003734 <HAL_DMA_IRQHandler+0xe20>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d03b      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a3b      	ldr	r2, [pc, #236]	; (8003738 <HAL_DMA_IRQHandler+0xe24>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d036      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a39      	ldr	r2, [pc, #228]	; (800373c <HAL_DMA_IRQHandler+0xe28>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d031      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a38      	ldr	r2, [pc, #224]	; (8003740 <HAL_DMA_IRQHandler+0xe2c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d02c      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a36      	ldr	r2, [pc, #216]	; (8003744 <HAL_DMA_IRQHandler+0xe30>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d027      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a35      	ldr	r2, [pc, #212]	; (8003748 <HAL_DMA_IRQHandler+0xe34>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d022      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a33      	ldr	r2, [pc, #204]	; (800374c <HAL_DMA_IRQHandler+0xe38>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d01d      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a32      	ldr	r2, [pc, #200]	; (8003750 <HAL_DMA_IRQHandler+0xe3c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d018      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a30      	ldr	r2, [pc, #192]	; (8003754 <HAL_DMA_IRQHandler+0xe40>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d013      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a2f      	ldr	r2, [pc, #188]	; (8003758 <HAL_DMA_IRQHandler+0xe44>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d00e      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a2d      	ldr	r2, [pc, #180]	; (800375c <HAL_DMA_IRQHandler+0xe48>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d009      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a2c      	ldr	r2, [pc, #176]	; (8003760 <HAL_DMA_IRQHandler+0xe4c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d004      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a2a      	ldr	r2, [pc, #168]	; (8003764 <HAL_DMA_IRQHandler+0xe50>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d108      	bne.n	80036d0 <HAL_DMA_IRQHandler+0xdbc>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 021c 	bic.w	r2, r2, #28
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	e007      	b.n	80036e0 <HAL_DMA_IRQHandler+0xdcc>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 020e 	bic.w	r2, r2, #14
 80036de:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e4:	f003 031f 	and.w	r3, r3, #31
 80036e8:	2201      	movs	r2, #1
 80036ea:	409a      	lsls	r2, r3
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370a:	2b00      	cmp	r3, #0
 800370c:	d009      	beq.n	8003722 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	4798      	blx	r3
 8003716:	e004      	b.n	8003722 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003718:	bf00      	nop
 800371a:	e002      	b.n	8003722 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800371c:	bf00      	nop
 800371e:	e000      	b.n	8003722 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003720:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003722:	3728      	adds	r7, #40	; 0x28
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40020010 	.word	0x40020010
 800372c:	40020028 	.word	0x40020028
 8003730:	40020040 	.word	0x40020040
 8003734:	40020058 	.word	0x40020058
 8003738:	40020070 	.word	0x40020070
 800373c:	40020088 	.word	0x40020088
 8003740:	400200a0 	.word	0x400200a0
 8003744:	400200b8 	.word	0x400200b8
 8003748:	40020410 	.word	0x40020410
 800374c:	40020428 	.word	0x40020428
 8003750:	40020440 	.word	0x40020440
 8003754:	40020458 	.word	0x40020458
 8003758:	40020470 	.word	0x40020470
 800375c:	40020488 	.word	0x40020488
 8003760:	400204a0 	.word	0x400204a0
 8003764:	400204b8 	.word	0x400204b8

08003768 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003774:	4618      	mov	r0, r3
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003792:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003798:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a84      	ldr	r2, [pc, #528]	; (80039b0 <DMA_SetConfig+0x230>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d072      	beq.n	800388a <DMA_SetConfig+0x10a>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a82      	ldr	r2, [pc, #520]	; (80039b4 <DMA_SetConfig+0x234>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d06d      	beq.n	800388a <DMA_SetConfig+0x10a>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a81      	ldr	r2, [pc, #516]	; (80039b8 <DMA_SetConfig+0x238>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d068      	beq.n	800388a <DMA_SetConfig+0x10a>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a7f      	ldr	r2, [pc, #508]	; (80039bc <DMA_SetConfig+0x23c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d063      	beq.n	800388a <DMA_SetConfig+0x10a>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a7e      	ldr	r2, [pc, #504]	; (80039c0 <DMA_SetConfig+0x240>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d05e      	beq.n	800388a <DMA_SetConfig+0x10a>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a7c      	ldr	r2, [pc, #496]	; (80039c4 <DMA_SetConfig+0x244>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d059      	beq.n	800388a <DMA_SetConfig+0x10a>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a7b      	ldr	r2, [pc, #492]	; (80039c8 <DMA_SetConfig+0x248>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d054      	beq.n	800388a <DMA_SetConfig+0x10a>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a79      	ldr	r2, [pc, #484]	; (80039cc <DMA_SetConfig+0x24c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d04f      	beq.n	800388a <DMA_SetConfig+0x10a>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a78      	ldr	r2, [pc, #480]	; (80039d0 <DMA_SetConfig+0x250>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d04a      	beq.n	800388a <DMA_SetConfig+0x10a>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a76      	ldr	r2, [pc, #472]	; (80039d4 <DMA_SetConfig+0x254>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d045      	beq.n	800388a <DMA_SetConfig+0x10a>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a75      	ldr	r2, [pc, #468]	; (80039d8 <DMA_SetConfig+0x258>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d040      	beq.n	800388a <DMA_SetConfig+0x10a>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a73      	ldr	r2, [pc, #460]	; (80039dc <DMA_SetConfig+0x25c>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d03b      	beq.n	800388a <DMA_SetConfig+0x10a>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a72      	ldr	r2, [pc, #456]	; (80039e0 <DMA_SetConfig+0x260>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d036      	beq.n	800388a <DMA_SetConfig+0x10a>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a70      	ldr	r2, [pc, #448]	; (80039e4 <DMA_SetConfig+0x264>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d031      	beq.n	800388a <DMA_SetConfig+0x10a>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a6f      	ldr	r2, [pc, #444]	; (80039e8 <DMA_SetConfig+0x268>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d02c      	beq.n	800388a <DMA_SetConfig+0x10a>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a6d      	ldr	r2, [pc, #436]	; (80039ec <DMA_SetConfig+0x26c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d027      	beq.n	800388a <DMA_SetConfig+0x10a>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a6c      	ldr	r2, [pc, #432]	; (80039f0 <DMA_SetConfig+0x270>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d022      	beq.n	800388a <DMA_SetConfig+0x10a>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a6a      	ldr	r2, [pc, #424]	; (80039f4 <DMA_SetConfig+0x274>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d01d      	beq.n	800388a <DMA_SetConfig+0x10a>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a69      	ldr	r2, [pc, #420]	; (80039f8 <DMA_SetConfig+0x278>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d018      	beq.n	800388a <DMA_SetConfig+0x10a>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a67      	ldr	r2, [pc, #412]	; (80039fc <DMA_SetConfig+0x27c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d013      	beq.n	800388a <DMA_SetConfig+0x10a>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a66      	ldr	r2, [pc, #408]	; (8003a00 <DMA_SetConfig+0x280>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00e      	beq.n	800388a <DMA_SetConfig+0x10a>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a64      	ldr	r2, [pc, #400]	; (8003a04 <DMA_SetConfig+0x284>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d009      	beq.n	800388a <DMA_SetConfig+0x10a>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a63      	ldr	r2, [pc, #396]	; (8003a08 <DMA_SetConfig+0x288>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d004      	beq.n	800388a <DMA_SetConfig+0x10a>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a61      	ldr	r2, [pc, #388]	; (8003a0c <DMA_SetConfig+0x28c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d101      	bne.n	800388e <DMA_SetConfig+0x10e>
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <DMA_SetConfig+0x110>
 800388e:	2300      	movs	r3, #0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00d      	beq.n	80038b0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800389c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d004      	beq.n	80038b0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038ae:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a3e      	ldr	r2, [pc, #248]	; (80039b0 <DMA_SetConfig+0x230>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d04a      	beq.n	8003950 <DMA_SetConfig+0x1d0>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a3d      	ldr	r2, [pc, #244]	; (80039b4 <DMA_SetConfig+0x234>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d045      	beq.n	8003950 <DMA_SetConfig+0x1d0>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a3b      	ldr	r2, [pc, #236]	; (80039b8 <DMA_SetConfig+0x238>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d040      	beq.n	8003950 <DMA_SetConfig+0x1d0>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a3a      	ldr	r2, [pc, #232]	; (80039bc <DMA_SetConfig+0x23c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d03b      	beq.n	8003950 <DMA_SetConfig+0x1d0>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a38      	ldr	r2, [pc, #224]	; (80039c0 <DMA_SetConfig+0x240>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d036      	beq.n	8003950 <DMA_SetConfig+0x1d0>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a37      	ldr	r2, [pc, #220]	; (80039c4 <DMA_SetConfig+0x244>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d031      	beq.n	8003950 <DMA_SetConfig+0x1d0>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a35      	ldr	r2, [pc, #212]	; (80039c8 <DMA_SetConfig+0x248>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d02c      	beq.n	8003950 <DMA_SetConfig+0x1d0>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a34      	ldr	r2, [pc, #208]	; (80039cc <DMA_SetConfig+0x24c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d027      	beq.n	8003950 <DMA_SetConfig+0x1d0>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a32      	ldr	r2, [pc, #200]	; (80039d0 <DMA_SetConfig+0x250>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d022      	beq.n	8003950 <DMA_SetConfig+0x1d0>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a31      	ldr	r2, [pc, #196]	; (80039d4 <DMA_SetConfig+0x254>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d01d      	beq.n	8003950 <DMA_SetConfig+0x1d0>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a2f      	ldr	r2, [pc, #188]	; (80039d8 <DMA_SetConfig+0x258>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d018      	beq.n	8003950 <DMA_SetConfig+0x1d0>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a2e      	ldr	r2, [pc, #184]	; (80039dc <DMA_SetConfig+0x25c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d013      	beq.n	8003950 <DMA_SetConfig+0x1d0>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a2c      	ldr	r2, [pc, #176]	; (80039e0 <DMA_SetConfig+0x260>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00e      	beq.n	8003950 <DMA_SetConfig+0x1d0>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a2b      	ldr	r2, [pc, #172]	; (80039e4 <DMA_SetConfig+0x264>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d009      	beq.n	8003950 <DMA_SetConfig+0x1d0>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a29      	ldr	r2, [pc, #164]	; (80039e8 <DMA_SetConfig+0x268>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d004      	beq.n	8003950 <DMA_SetConfig+0x1d0>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a28      	ldr	r2, [pc, #160]	; (80039ec <DMA_SetConfig+0x26c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d101      	bne.n	8003954 <DMA_SetConfig+0x1d4>
 8003950:	2301      	movs	r3, #1
 8003952:	e000      	b.n	8003956 <DMA_SetConfig+0x1d6>
 8003954:	2300      	movs	r3, #0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d05a      	beq.n	8003a10 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395e:	f003 031f 	and.w	r3, r3, #31
 8003962:	223f      	movs	r2, #63	; 0x3f
 8003964:	409a      	lsls	r2, r3
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003978:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	2b40      	cmp	r3, #64	; 0x40
 8003988:	d108      	bne.n	800399c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800399a:	e087      	b.n	8003aac <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	60da      	str	r2, [r3, #12]
}
 80039ac:	e07e      	b.n	8003aac <DMA_SetConfig+0x32c>
 80039ae:	bf00      	nop
 80039b0:	40020010 	.word	0x40020010
 80039b4:	40020028 	.word	0x40020028
 80039b8:	40020040 	.word	0x40020040
 80039bc:	40020058 	.word	0x40020058
 80039c0:	40020070 	.word	0x40020070
 80039c4:	40020088 	.word	0x40020088
 80039c8:	400200a0 	.word	0x400200a0
 80039cc:	400200b8 	.word	0x400200b8
 80039d0:	40020410 	.word	0x40020410
 80039d4:	40020428 	.word	0x40020428
 80039d8:	40020440 	.word	0x40020440
 80039dc:	40020458 	.word	0x40020458
 80039e0:	40020470 	.word	0x40020470
 80039e4:	40020488 	.word	0x40020488
 80039e8:	400204a0 	.word	0x400204a0
 80039ec:	400204b8 	.word	0x400204b8
 80039f0:	58025408 	.word	0x58025408
 80039f4:	5802541c 	.word	0x5802541c
 80039f8:	58025430 	.word	0x58025430
 80039fc:	58025444 	.word	0x58025444
 8003a00:	58025458 	.word	0x58025458
 8003a04:	5802546c 	.word	0x5802546c
 8003a08:	58025480 	.word	0x58025480
 8003a0c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a28      	ldr	r2, [pc, #160]	; (8003ab8 <DMA_SetConfig+0x338>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d022      	beq.n	8003a60 <DMA_SetConfig+0x2e0>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a27      	ldr	r2, [pc, #156]	; (8003abc <DMA_SetConfig+0x33c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d01d      	beq.n	8003a60 <DMA_SetConfig+0x2e0>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a25      	ldr	r2, [pc, #148]	; (8003ac0 <DMA_SetConfig+0x340>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d018      	beq.n	8003a60 <DMA_SetConfig+0x2e0>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a24      	ldr	r2, [pc, #144]	; (8003ac4 <DMA_SetConfig+0x344>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d013      	beq.n	8003a60 <DMA_SetConfig+0x2e0>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a22      	ldr	r2, [pc, #136]	; (8003ac8 <DMA_SetConfig+0x348>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00e      	beq.n	8003a60 <DMA_SetConfig+0x2e0>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a21      	ldr	r2, [pc, #132]	; (8003acc <DMA_SetConfig+0x34c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d009      	beq.n	8003a60 <DMA_SetConfig+0x2e0>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a1f      	ldr	r2, [pc, #124]	; (8003ad0 <DMA_SetConfig+0x350>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d004      	beq.n	8003a60 <DMA_SetConfig+0x2e0>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a1e      	ldr	r2, [pc, #120]	; (8003ad4 <DMA_SetConfig+0x354>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d101      	bne.n	8003a64 <DMA_SetConfig+0x2e4>
 8003a60:	2301      	movs	r3, #1
 8003a62:	e000      	b.n	8003a66 <DMA_SetConfig+0x2e6>
 8003a64:	2300      	movs	r3, #0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d020      	beq.n	8003aac <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6e:	f003 031f 	and.w	r3, r3, #31
 8003a72:	2201      	movs	r2, #1
 8003a74:	409a      	lsls	r2, r3
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2b40      	cmp	r3, #64	; 0x40
 8003a88:	d108      	bne.n	8003a9c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	60da      	str	r2, [r3, #12]
}
 8003a9a:	e007      	b.n	8003aac <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	60da      	str	r2, [r3, #12]
}
 8003aac:	bf00      	nop
 8003aae:	371c      	adds	r7, #28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	58025408 	.word	0x58025408
 8003abc:	5802541c 	.word	0x5802541c
 8003ac0:	58025430 	.word	0x58025430
 8003ac4:	58025444 	.word	0x58025444
 8003ac8:	58025458 	.word	0x58025458
 8003acc:	5802546c 	.word	0x5802546c
 8003ad0:	58025480 	.word	0x58025480
 8003ad4:	58025494 	.word	0x58025494

08003ad8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a42      	ldr	r2, [pc, #264]	; (8003bf0 <DMA_CalcBaseAndBitshift+0x118>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d04a      	beq.n	8003b80 <DMA_CalcBaseAndBitshift+0xa8>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a41      	ldr	r2, [pc, #260]	; (8003bf4 <DMA_CalcBaseAndBitshift+0x11c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d045      	beq.n	8003b80 <DMA_CalcBaseAndBitshift+0xa8>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a3f      	ldr	r2, [pc, #252]	; (8003bf8 <DMA_CalcBaseAndBitshift+0x120>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d040      	beq.n	8003b80 <DMA_CalcBaseAndBitshift+0xa8>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a3e      	ldr	r2, [pc, #248]	; (8003bfc <DMA_CalcBaseAndBitshift+0x124>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d03b      	beq.n	8003b80 <DMA_CalcBaseAndBitshift+0xa8>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a3c      	ldr	r2, [pc, #240]	; (8003c00 <DMA_CalcBaseAndBitshift+0x128>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d036      	beq.n	8003b80 <DMA_CalcBaseAndBitshift+0xa8>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a3b      	ldr	r2, [pc, #236]	; (8003c04 <DMA_CalcBaseAndBitshift+0x12c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d031      	beq.n	8003b80 <DMA_CalcBaseAndBitshift+0xa8>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a39      	ldr	r2, [pc, #228]	; (8003c08 <DMA_CalcBaseAndBitshift+0x130>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d02c      	beq.n	8003b80 <DMA_CalcBaseAndBitshift+0xa8>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a38      	ldr	r2, [pc, #224]	; (8003c0c <DMA_CalcBaseAndBitshift+0x134>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d027      	beq.n	8003b80 <DMA_CalcBaseAndBitshift+0xa8>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a36      	ldr	r2, [pc, #216]	; (8003c10 <DMA_CalcBaseAndBitshift+0x138>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d022      	beq.n	8003b80 <DMA_CalcBaseAndBitshift+0xa8>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a35      	ldr	r2, [pc, #212]	; (8003c14 <DMA_CalcBaseAndBitshift+0x13c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d01d      	beq.n	8003b80 <DMA_CalcBaseAndBitshift+0xa8>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a33      	ldr	r2, [pc, #204]	; (8003c18 <DMA_CalcBaseAndBitshift+0x140>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d018      	beq.n	8003b80 <DMA_CalcBaseAndBitshift+0xa8>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a32      	ldr	r2, [pc, #200]	; (8003c1c <DMA_CalcBaseAndBitshift+0x144>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d013      	beq.n	8003b80 <DMA_CalcBaseAndBitshift+0xa8>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a30      	ldr	r2, [pc, #192]	; (8003c20 <DMA_CalcBaseAndBitshift+0x148>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d00e      	beq.n	8003b80 <DMA_CalcBaseAndBitshift+0xa8>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a2f      	ldr	r2, [pc, #188]	; (8003c24 <DMA_CalcBaseAndBitshift+0x14c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d009      	beq.n	8003b80 <DMA_CalcBaseAndBitshift+0xa8>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a2d      	ldr	r2, [pc, #180]	; (8003c28 <DMA_CalcBaseAndBitshift+0x150>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d004      	beq.n	8003b80 <DMA_CalcBaseAndBitshift+0xa8>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a2c      	ldr	r2, [pc, #176]	; (8003c2c <DMA_CalcBaseAndBitshift+0x154>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d101      	bne.n	8003b84 <DMA_CalcBaseAndBitshift+0xac>
 8003b80:	2301      	movs	r3, #1
 8003b82:	e000      	b.n	8003b86 <DMA_CalcBaseAndBitshift+0xae>
 8003b84:	2300      	movs	r3, #0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d024      	beq.n	8003bd4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	3b10      	subs	r3, #16
 8003b92:	4a27      	ldr	r2, [pc, #156]	; (8003c30 <DMA_CalcBaseAndBitshift+0x158>)
 8003b94:	fba2 2303 	umull	r2, r3, r2, r3
 8003b98:	091b      	lsrs	r3, r3, #4
 8003b9a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	4a24      	ldr	r2, [pc, #144]	; (8003c34 <DMA_CalcBaseAndBitshift+0x15c>)
 8003ba4:	5cd3      	ldrb	r3, [r2, r3]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2b03      	cmp	r3, #3
 8003bb0:	d908      	bls.n	8003bc4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	4b1f      	ldr	r3, [pc, #124]	; (8003c38 <DMA_CalcBaseAndBitshift+0x160>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	1d1a      	adds	r2, r3, #4
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	659a      	str	r2, [r3, #88]	; 0x58
 8003bc2:	e00d      	b.n	8003be0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	4b1b      	ldr	r3, [pc, #108]	; (8003c38 <DMA_CalcBaseAndBitshift+0x160>)
 8003bcc:	4013      	ands	r3, r2
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6593      	str	r3, [r2, #88]	; 0x58
 8003bd2:	e005      	b.n	8003be0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	40020010 	.word	0x40020010
 8003bf4:	40020028 	.word	0x40020028
 8003bf8:	40020040 	.word	0x40020040
 8003bfc:	40020058 	.word	0x40020058
 8003c00:	40020070 	.word	0x40020070
 8003c04:	40020088 	.word	0x40020088
 8003c08:	400200a0 	.word	0x400200a0
 8003c0c:	400200b8 	.word	0x400200b8
 8003c10:	40020410 	.word	0x40020410
 8003c14:	40020428 	.word	0x40020428
 8003c18:	40020440 	.word	0x40020440
 8003c1c:	40020458 	.word	0x40020458
 8003c20:	40020470 	.word	0x40020470
 8003c24:	40020488 	.word	0x40020488
 8003c28:	400204a0 	.word	0x400204a0
 8003c2c:	400204b8 	.word	0x400204b8
 8003c30:	aaaaaaab 	.word	0xaaaaaaab
 8003c34:	0800cf24 	.word	0x0800cf24
 8003c38:	fffffc00 	.word	0xfffffc00

08003c3c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c44:	2300      	movs	r3, #0
 8003c46:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d120      	bne.n	8003c92 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	d858      	bhi.n	8003d0a <DMA_CheckFifoParam+0xce>
 8003c58:	a201      	add	r2, pc, #4	; (adr r2, 8003c60 <DMA_CheckFifoParam+0x24>)
 8003c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5e:	bf00      	nop
 8003c60:	08003c71 	.word	0x08003c71
 8003c64:	08003c83 	.word	0x08003c83
 8003c68:	08003c71 	.word	0x08003c71
 8003c6c:	08003d0b 	.word	0x08003d0b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d048      	beq.n	8003d0e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c80:	e045      	b.n	8003d0e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c8a:	d142      	bne.n	8003d12 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c90:	e03f      	b.n	8003d12 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c9a:	d123      	bne.n	8003ce4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca0:	2b03      	cmp	r3, #3
 8003ca2:	d838      	bhi.n	8003d16 <DMA_CheckFifoParam+0xda>
 8003ca4:	a201      	add	r2, pc, #4	; (adr r2, 8003cac <DMA_CheckFifoParam+0x70>)
 8003ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003caa:	bf00      	nop
 8003cac:	08003cbd 	.word	0x08003cbd
 8003cb0:	08003cc3 	.word	0x08003cc3
 8003cb4:	08003cbd 	.word	0x08003cbd
 8003cb8:	08003cd5 	.word	0x08003cd5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	73fb      	strb	r3, [r7, #15]
        break;
 8003cc0:	e030      	b.n	8003d24 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d025      	beq.n	8003d1a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003cd2:	e022      	b.n	8003d1a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cdc:	d11f      	bne.n	8003d1e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ce2:	e01c      	b.n	8003d1e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d902      	bls.n	8003cf2 <DMA_CheckFifoParam+0xb6>
 8003cec:	2b03      	cmp	r3, #3
 8003cee:	d003      	beq.n	8003cf8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003cf0:	e018      	b.n	8003d24 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	73fb      	strb	r3, [r7, #15]
        break;
 8003cf6:	e015      	b.n	8003d24 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00e      	beq.n	8003d22 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	73fb      	strb	r3, [r7, #15]
    break;
 8003d08:	e00b      	b.n	8003d22 <DMA_CheckFifoParam+0xe6>
        break;
 8003d0a:	bf00      	nop
 8003d0c:	e00a      	b.n	8003d24 <DMA_CheckFifoParam+0xe8>
        break;
 8003d0e:	bf00      	nop
 8003d10:	e008      	b.n	8003d24 <DMA_CheckFifoParam+0xe8>
        break;
 8003d12:	bf00      	nop
 8003d14:	e006      	b.n	8003d24 <DMA_CheckFifoParam+0xe8>
        break;
 8003d16:	bf00      	nop
 8003d18:	e004      	b.n	8003d24 <DMA_CheckFifoParam+0xe8>
        break;
 8003d1a:	bf00      	nop
 8003d1c:	e002      	b.n	8003d24 <DMA_CheckFifoParam+0xe8>
        break;
 8003d1e:	bf00      	nop
 8003d20:	e000      	b.n	8003d24 <DMA_CheckFifoParam+0xe8>
    break;
 8003d22:	bf00      	nop
    }
  }

  return status;
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop

08003d34 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a38      	ldr	r2, [pc, #224]	; (8003e28 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d022      	beq.n	8003d92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a36      	ldr	r2, [pc, #216]	; (8003e2c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d01d      	beq.n	8003d92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a35      	ldr	r2, [pc, #212]	; (8003e30 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d018      	beq.n	8003d92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a33      	ldr	r2, [pc, #204]	; (8003e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d013      	beq.n	8003d92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a32      	ldr	r2, [pc, #200]	; (8003e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d00e      	beq.n	8003d92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a30      	ldr	r2, [pc, #192]	; (8003e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d009      	beq.n	8003d92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a2f      	ldr	r2, [pc, #188]	; (8003e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d004      	beq.n	8003d92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a2d      	ldr	r2, [pc, #180]	; (8003e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d101      	bne.n	8003d96 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e000      	b.n	8003d98 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003d96:	2300      	movs	r3, #0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d01a      	beq.n	8003dd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	3b08      	subs	r3, #8
 8003da4:	4a28      	ldr	r2, [pc, #160]	; (8003e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003da6:	fba2 2303 	umull	r2, r3, r2, r3
 8003daa:	091b      	lsrs	r3, r3, #4
 8003dac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	4b26      	ldr	r3, [pc, #152]	; (8003e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003db2:	4413      	add	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	461a      	mov	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a24      	ldr	r2, [pc, #144]	; (8003e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003dc0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f003 031f 	and.w	r3, r3, #31
 8003dc8:	2201      	movs	r2, #1
 8003dca:	409a      	lsls	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003dd0:	e024      	b.n	8003e1c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	3b10      	subs	r3, #16
 8003dda:	4a1e      	ldr	r2, [pc, #120]	; (8003e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8003de0:	091b      	lsrs	r3, r3, #4
 8003de2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4a1c      	ldr	r2, [pc, #112]	; (8003e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d806      	bhi.n	8003dfa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	4a1b      	ldr	r2, [pc, #108]	; (8003e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d902      	bls.n	8003dfa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	3308      	adds	r3, #8
 8003df8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4b18      	ldr	r3, [pc, #96]	; (8003e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	461a      	mov	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a16      	ldr	r2, [pc, #88]	; (8003e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003e0c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f003 031f 	and.w	r3, r3, #31
 8003e14:	2201      	movs	r2, #1
 8003e16:	409a      	lsls	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e1c:	bf00      	nop
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	58025408 	.word	0x58025408
 8003e2c:	5802541c 	.word	0x5802541c
 8003e30:	58025430 	.word	0x58025430
 8003e34:	58025444 	.word	0x58025444
 8003e38:	58025458 	.word	0x58025458
 8003e3c:	5802546c 	.word	0x5802546c
 8003e40:	58025480 	.word	0x58025480
 8003e44:	58025494 	.word	0x58025494
 8003e48:	cccccccd 	.word	0xcccccccd
 8003e4c:	16009600 	.word	0x16009600
 8003e50:	58025880 	.word	0x58025880
 8003e54:	aaaaaaab 	.word	0xaaaaaaab
 8003e58:	400204b8 	.word	0x400204b8
 8003e5c:	4002040f 	.word	0x4002040f
 8003e60:	10008200 	.word	0x10008200
 8003e64:	40020880 	.word	0x40020880

08003e68 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d04a      	beq.n	8003f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d847      	bhi.n	8003f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a25      	ldr	r2, [pc, #148]	; (8003f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d022      	beq.n	8003ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a24      	ldr	r2, [pc, #144]	; (8003f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d01d      	beq.n	8003ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a22      	ldr	r2, [pc, #136]	; (8003f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d018      	beq.n	8003ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a21      	ldr	r2, [pc, #132]	; (8003f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d013      	beq.n	8003ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a1f      	ldr	r2, [pc, #124]	; (8003f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d00e      	beq.n	8003ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1e      	ldr	r2, [pc, #120]	; (8003f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d009      	beq.n	8003ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a1c      	ldr	r2, [pc, #112]	; (8003f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d004      	beq.n	8003ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1b      	ldr	r2, [pc, #108]	; (8003f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d101      	bne.n	8003ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e000      	b.n	8003eda <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4b17      	ldr	r3, [pc, #92]	; (8003f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003ee2:	4413      	add	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a15      	ldr	r2, [pc, #84]	; (8003f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003ef0:	671a      	str	r2, [r3, #112]	; 0x70
 8003ef2:	e009      	b.n	8003f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	4b14      	ldr	r3, [pc, #80]	; (8003f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003ef8:	4413      	add	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	461a      	mov	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a11      	ldr	r2, [pc, #68]	; (8003f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003f06:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	409a      	lsls	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003f14:	bf00      	nop
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	58025408 	.word	0x58025408
 8003f24:	5802541c 	.word	0x5802541c
 8003f28:	58025430 	.word	0x58025430
 8003f2c:	58025444 	.word	0x58025444
 8003f30:	58025458 	.word	0x58025458
 8003f34:	5802546c 	.word	0x5802546c
 8003f38:	58025480 	.word	0x58025480
 8003f3c:	58025494 	.word	0x58025494
 8003f40:	1600963f 	.word	0x1600963f
 8003f44:	58025940 	.word	0x58025940
 8003f48:	1000823f 	.word	0x1000823f
 8003f4c:	40020940 	.word	0x40020940

08003f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b089      	sub	sp, #36	; 0x24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003f5e:	4b89      	ldr	r3, [pc, #548]	; (8004184 <HAL_GPIO_Init+0x234>)
 8003f60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f62:	e194      	b.n	800428e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	2101      	movs	r1, #1
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f70:	4013      	ands	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 8186 	beq.w	8004288 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d00b      	beq.n	8003f9c <HAL_GPIO_Init+0x4c>
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d007      	beq.n	8003f9c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f90:	2b11      	cmp	r3, #17
 8003f92:	d003      	beq.n	8003f9c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b12      	cmp	r3, #18
 8003f9a:	d130      	bne.n	8003ffe <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	2203      	movs	r2, #3
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	43db      	mvns	r3, r3
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	091b      	lsrs	r3, r3, #4
 8003fe8:	f003 0201 	and.w	r2, r3, #1
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	2203      	movs	r2, #3
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	43db      	mvns	r3, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4013      	ands	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	fa02 f303 	lsl.w	r3, r2, r3
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	4313      	orrs	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d003      	beq.n	800403e <HAL_GPIO_Init+0xee>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b12      	cmp	r3, #18
 800403c:	d123      	bne.n	8004086 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	08da      	lsrs	r2, r3, #3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	3208      	adds	r2, #8
 8004046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800404a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	220f      	movs	r2, #15
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	43db      	mvns	r3, r3
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	4013      	ands	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	691a      	ldr	r2, [r3, #16]
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	4313      	orrs	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	08da      	lsrs	r2, r3, #3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3208      	adds	r2, #8
 8004080:	69b9      	ldr	r1, [r7, #24]
 8004082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	2203      	movs	r2, #3
 8004092:	fa02 f303 	lsl.w	r3, r2, r3
 8004096:	43db      	mvns	r3, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4013      	ands	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f003 0203 	and.w	r2, r3, #3
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 80e0 	beq.w	8004288 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040c8:	4b2f      	ldr	r3, [pc, #188]	; (8004188 <HAL_GPIO_Init+0x238>)
 80040ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040ce:	4a2e      	ldr	r2, [pc, #184]	; (8004188 <HAL_GPIO_Init+0x238>)
 80040d0:	f043 0302 	orr.w	r3, r3, #2
 80040d4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80040d8:	4b2b      	ldr	r3, [pc, #172]	; (8004188 <HAL_GPIO_Init+0x238>)
 80040da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040e6:	4a29      	ldr	r2, [pc, #164]	; (800418c <HAL_GPIO_Init+0x23c>)
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	089b      	lsrs	r3, r3, #2
 80040ec:	3302      	adds	r3, #2
 80040ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	220f      	movs	r2, #15
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	43db      	mvns	r3, r3
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	4013      	ands	r3, r2
 8004108:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a20      	ldr	r2, [pc, #128]	; (8004190 <HAL_GPIO_Init+0x240>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d052      	beq.n	80041b8 <HAL_GPIO_Init+0x268>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a1f      	ldr	r2, [pc, #124]	; (8004194 <HAL_GPIO_Init+0x244>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d031      	beq.n	800417e <HAL_GPIO_Init+0x22e>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a1e      	ldr	r2, [pc, #120]	; (8004198 <HAL_GPIO_Init+0x248>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d02b      	beq.n	800417a <HAL_GPIO_Init+0x22a>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a1d      	ldr	r2, [pc, #116]	; (800419c <HAL_GPIO_Init+0x24c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d025      	beq.n	8004176 <HAL_GPIO_Init+0x226>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a1c      	ldr	r2, [pc, #112]	; (80041a0 <HAL_GPIO_Init+0x250>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d01f      	beq.n	8004172 <HAL_GPIO_Init+0x222>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a1b      	ldr	r2, [pc, #108]	; (80041a4 <HAL_GPIO_Init+0x254>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d019      	beq.n	800416e <HAL_GPIO_Init+0x21e>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a1a      	ldr	r2, [pc, #104]	; (80041a8 <HAL_GPIO_Init+0x258>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d013      	beq.n	800416a <HAL_GPIO_Init+0x21a>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a19      	ldr	r2, [pc, #100]	; (80041ac <HAL_GPIO_Init+0x25c>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00d      	beq.n	8004166 <HAL_GPIO_Init+0x216>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a18      	ldr	r2, [pc, #96]	; (80041b0 <HAL_GPIO_Init+0x260>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d007      	beq.n	8004162 <HAL_GPIO_Init+0x212>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a17      	ldr	r2, [pc, #92]	; (80041b4 <HAL_GPIO_Init+0x264>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d101      	bne.n	800415e <HAL_GPIO_Init+0x20e>
 800415a:	2309      	movs	r3, #9
 800415c:	e02d      	b.n	80041ba <HAL_GPIO_Init+0x26a>
 800415e:	230a      	movs	r3, #10
 8004160:	e02b      	b.n	80041ba <HAL_GPIO_Init+0x26a>
 8004162:	2308      	movs	r3, #8
 8004164:	e029      	b.n	80041ba <HAL_GPIO_Init+0x26a>
 8004166:	2307      	movs	r3, #7
 8004168:	e027      	b.n	80041ba <HAL_GPIO_Init+0x26a>
 800416a:	2306      	movs	r3, #6
 800416c:	e025      	b.n	80041ba <HAL_GPIO_Init+0x26a>
 800416e:	2305      	movs	r3, #5
 8004170:	e023      	b.n	80041ba <HAL_GPIO_Init+0x26a>
 8004172:	2304      	movs	r3, #4
 8004174:	e021      	b.n	80041ba <HAL_GPIO_Init+0x26a>
 8004176:	2303      	movs	r3, #3
 8004178:	e01f      	b.n	80041ba <HAL_GPIO_Init+0x26a>
 800417a:	2302      	movs	r3, #2
 800417c:	e01d      	b.n	80041ba <HAL_GPIO_Init+0x26a>
 800417e:	2301      	movs	r3, #1
 8004180:	e01b      	b.n	80041ba <HAL_GPIO_Init+0x26a>
 8004182:	bf00      	nop
 8004184:	58000080 	.word	0x58000080
 8004188:	58024400 	.word	0x58024400
 800418c:	58000400 	.word	0x58000400
 8004190:	58020000 	.word	0x58020000
 8004194:	58020400 	.word	0x58020400
 8004198:	58020800 	.word	0x58020800
 800419c:	58020c00 	.word	0x58020c00
 80041a0:	58021000 	.word	0x58021000
 80041a4:	58021400 	.word	0x58021400
 80041a8:	58021800 	.word	0x58021800
 80041ac:	58021c00 	.word	0x58021c00
 80041b0:	58022000 	.word	0x58022000
 80041b4:	58022400 	.word	0x58022400
 80041b8:	2300      	movs	r3, #0
 80041ba:	69fa      	ldr	r2, [r7, #28]
 80041bc:	f002 0203 	and.w	r2, r2, #3
 80041c0:	0092      	lsls	r2, r2, #2
 80041c2:	4093      	lsls	r3, r2
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041ca:	4938      	ldr	r1, [pc, #224]	; (80042ac <HAL_GPIO_Init+0x35c>)
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	089b      	lsrs	r3, r3, #2
 80041d0:	3302      	adds	r3, #2
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	43db      	mvns	r3, r3
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	4013      	ands	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	43db      	mvns	r3, r3
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	4013      	ands	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800422c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	43db      	mvns	r3, r3
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	4013      	ands	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	4313      	orrs	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004252:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800425a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	43db      	mvns	r3, r3
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	4013      	ands	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	3301      	adds	r3, #1
 800428c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	fa22 f303 	lsr.w	r3, r2, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	f47f ae63 	bne.w	8003f64 <HAL_GPIO_Init+0x14>
  }
}
 800429e:	bf00      	nop
 80042a0:	3724      	adds	r7, #36	; 0x24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	58000400 	.word	0x58000400

080042b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	460b      	mov	r3, r1
 80042ba:	807b      	strh	r3, [r7, #2]
 80042bc:	4613      	mov	r3, r2
 80042be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042c0:	787b      	ldrb	r3, [r7, #1]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042c6:	887a      	ldrh	r2, [r7, #2]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80042cc:	e003      	b.n	80042d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80042ce:	887b      	ldrh	r3, [r7, #2]
 80042d0:	041a      	lsls	r2, r3, #16
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	619a      	str	r2, [r3, #24]
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
	...

080042e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80042ec:	4b19      	ldr	r3, [pc, #100]	; (8004354 <HAL_PWREx_ConfigSupply+0x70>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d00a      	beq.n	800430e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80042f8:	4b16      	ldr	r3, [pc, #88]	; (8004354 <HAL_PWREx_ConfigSupply+0x70>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	429a      	cmp	r2, r3
 8004304:	d001      	beq.n	800430a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e01f      	b.n	800434a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	e01d      	b.n	800434a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800430e:	4b11      	ldr	r3, [pc, #68]	; (8004354 <HAL_PWREx_ConfigSupply+0x70>)
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f023 0207 	bic.w	r2, r3, #7
 8004316:	490f      	ldr	r1, [pc, #60]	; (8004354 <HAL_PWREx_ConfigSupply+0x70>)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4313      	orrs	r3, r2
 800431c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800431e:	f7fd f9a5 	bl	800166c <HAL_GetTick>
 8004322:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004324:	e009      	b.n	800433a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004326:	f7fd f9a1 	bl	800166c <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004334:	d901      	bls.n	800433a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e007      	b.n	800434a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800433a:	4b06      	ldr	r3, [pc, #24]	; (8004354 <HAL_PWREx_ConfigSupply+0x70>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004346:	d1ee      	bne.n	8004326 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	58024800 	.word	0x58024800

08004358 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b08c      	sub	sp, #48	; 0x30
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e3ff      	b.n	8004b6a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 8087 	beq.w	8004486 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004378:	4b99      	ldr	r3, [pc, #612]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004380:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004382:	4b97      	ldr	r3, [pc, #604]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 8004384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004386:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438a:	2b10      	cmp	r3, #16
 800438c:	d007      	beq.n	800439e <HAL_RCC_OscConfig+0x46>
 800438e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004390:	2b18      	cmp	r3, #24
 8004392:	d110      	bne.n	80043b6 <HAL_RCC_OscConfig+0x5e>
 8004394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d10b      	bne.n	80043b6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800439e:	4b90      	ldr	r3, [pc, #576]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d06c      	beq.n	8004484 <HAL_RCC_OscConfig+0x12c>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d168      	bne.n	8004484 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e3d9      	b.n	8004b6a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043be:	d106      	bne.n	80043ce <HAL_RCC_OscConfig+0x76>
 80043c0:	4b87      	ldr	r3, [pc, #540]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a86      	ldr	r2, [pc, #536]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 80043c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ca:	6013      	str	r3, [r2, #0]
 80043cc:	e02e      	b.n	800442c <HAL_RCC_OscConfig+0xd4>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10c      	bne.n	80043f0 <HAL_RCC_OscConfig+0x98>
 80043d6:	4b82      	ldr	r3, [pc, #520]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a81      	ldr	r2, [pc, #516]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 80043dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	4b7f      	ldr	r3, [pc, #508]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a7e      	ldr	r2, [pc, #504]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 80043e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	e01d      	b.n	800442c <HAL_RCC_OscConfig+0xd4>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043f8:	d10c      	bne.n	8004414 <HAL_RCC_OscConfig+0xbc>
 80043fa:	4b79      	ldr	r3, [pc, #484]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a78      	ldr	r2, [pc, #480]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 8004400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	4b76      	ldr	r3, [pc, #472]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a75      	ldr	r2, [pc, #468]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 800440c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	e00b      	b.n	800442c <HAL_RCC_OscConfig+0xd4>
 8004414:	4b72      	ldr	r3, [pc, #456]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a71      	ldr	r2, [pc, #452]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 800441a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800441e:	6013      	str	r3, [r2, #0]
 8004420:	4b6f      	ldr	r3, [pc, #444]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a6e      	ldr	r2, [pc, #440]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 8004426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800442a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d013      	beq.n	800445c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004434:	f7fd f91a 	bl	800166c <HAL_GetTick>
 8004438:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800443c:	f7fd f916 	bl	800166c <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b64      	cmp	r3, #100	; 0x64
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e38d      	b.n	8004b6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800444e:	4b64      	ldr	r3, [pc, #400]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0f0      	beq.n	800443c <HAL_RCC_OscConfig+0xe4>
 800445a:	e014      	b.n	8004486 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445c:	f7fd f906 	bl	800166c <HAL_GetTick>
 8004460:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004464:	f7fd f902 	bl	800166c <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b64      	cmp	r3, #100	; 0x64
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e379      	b.n	8004b6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004476:	4b5a      	ldr	r3, [pc, #360]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1f0      	bne.n	8004464 <HAL_RCC_OscConfig+0x10c>
 8004482:	e000      	b.n	8004486 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 80ae 	beq.w	80045f0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004494:	4b52      	ldr	r3, [pc, #328]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800449c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800449e:	4b50      	ldr	r3, [pc, #320]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d007      	beq.n	80044ba <HAL_RCC_OscConfig+0x162>
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	2b18      	cmp	r3, #24
 80044ae:	d13a      	bne.n	8004526 <HAL_RCC_OscConfig+0x1ce>
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d135      	bne.n	8004526 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044ba:	4b49      	ldr	r3, [pc, #292]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0304 	and.w	r3, r3, #4
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d005      	beq.n	80044d2 <HAL_RCC_OscConfig+0x17a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e34b      	b.n	8004b6a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d2:	f7fd f8f9 	bl	80016c8 <HAL_GetREVID>
 80044d6:	4602      	mov	r2, r0
 80044d8:	f241 0303 	movw	r3, #4099	; 0x1003
 80044dc:	429a      	cmp	r2, r3
 80044de:	d817      	bhi.n	8004510 <HAL_RCC_OscConfig+0x1b8>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	2b40      	cmp	r3, #64	; 0x40
 80044e6:	d108      	bne.n	80044fa <HAL_RCC_OscConfig+0x1a2>
 80044e8:	4b3d      	ldr	r3, [pc, #244]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80044f0:	4a3b      	ldr	r2, [pc, #236]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 80044f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044f6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044f8:	e07a      	b.n	80045f0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044fa:	4b39      	ldr	r3, [pc, #228]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	031b      	lsls	r3, r3, #12
 8004508:	4935      	ldr	r1, [pc, #212]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 800450a:	4313      	orrs	r3, r2
 800450c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800450e:	e06f      	b.n	80045f0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004510:	4b33      	ldr	r3, [pc, #204]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	061b      	lsls	r3, r3, #24
 800451e:	4930      	ldr	r1, [pc, #192]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 8004520:	4313      	orrs	r3, r2
 8004522:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004524:	e064      	b.n	80045f0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d045      	beq.n	80045ba <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800452e:	4b2c      	ldr	r3, [pc, #176]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f023 0219 	bic.w	r2, r3, #25
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	4929      	ldr	r1, [pc, #164]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 800453c:	4313      	orrs	r3, r2
 800453e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004540:	f7fd f894 	bl	800166c <HAL_GetTick>
 8004544:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004548:	f7fd f890 	bl	800166c <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e307      	b.n	8004b6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800455a:	4b21      	ldr	r3, [pc, #132]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0304 	and.w	r3, r3, #4
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f0      	beq.n	8004548 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004566:	f7fd f8af 	bl	80016c8 <HAL_GetREVID>
 800456a:	4602      	mov	r2, r0
 800456c:	f241 0303 	movw	r3, #4099	; 0x1003
 8004570:	429a      	cmp	r2, r3
 8004572:	d817      	bhi.n	80045a4 <HAL_RCC_OscConfig+0x24c>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	2b40      	cmp	r3, #64	; 0x40
 800457a:	d108      	bne.n	800458e <HAL_RCC_OscConfig+0x236>
 800457c:	4b18      	ldr	r3, [pc, #96]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004584:	4a16      	ldr	r2, [pc, #88]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 8004586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800458a:	6053      	str	r3, [r2, #4]
 800458c:	e030      	b.n	80045f0 <HAL_RCC_OscConfig+0x298>
 800458e:	4b14      	ldr	r3, [pc, #80]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	031b      	lsls	r3, r3, #12
 800459c:	4910      	ldr	r1, [pc, #64]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	604b      	str	r3, [r1, #4]
 80045a2:	e025      	b.n	80045f0 <HAL_RCC_OscConfig+0x298>
 80045a4:	4b0e      	ldr	r3, [pc, #56]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	061b      	lsls	r3, r3, #24
 80045b2:	490b      	ldr	r1, [pc, #44]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	604b      	str	r3, [r1, #4]
 80045b8:	e01a      	b.n	80045f0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ba:	4b09      	ldr	r3, [pc, #36]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a08      	ldr	r2, [pc, #32]	; (80045e0 <HAL_RCC_OscConfig+0x288>)
 80045c0:	f023 0301 	bic.w	r3, r3, #1
 80045c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c6:	f7fd f851 	bl	800166c <HAL_GetTick>
 80045ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045cc:	e00a      	b.n	80045e4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ce:	f7fd f84d 	bl	800166c <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d903      	bls.n	80045e4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e2c4      	b.n	8004b6a <HAL_RCC_OscConfig+0x812>
 80045e0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045e4:	4ba4      	ldr	r3, [pc, #656]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1ee      	bne.n	80045ce <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 80a9 	beq.w	8004750 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045fe:	4b9e      	ldr	r3, [pc, #632]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004606:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004608:	4b9b      	ldr	r3, [pc, #620]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 800460a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	2b08      	cmp	r3, #8
 8004612:	d007      	beq.n	8004624 <HAL_RCC_OscConfig+0x2cc>
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	2b18      	cmp	r3, #24
 8004618:	d13a      	bne.n	8004690 <HAL_RCC_OscConfig+0x338>
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f003 0303 	and.w	r3, r3, #3
 8004620:	2b01      	cmp	r3, #1
 8004622:	d135      	bne.n	8004690 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004624:	4b94      	ldr	r3, [pc, #592]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <HAL_RCC_OscConfig+0x2e4>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	2b80      	cmp	r3, #128	; 0x80
 8004636:	d001      	beq.n	800463c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e296      	b.n	8004b6a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800463c:	f7fd f844 	bl	80016c8 <HAL_GetREVID>
 8004640:	4602      	mov	r2, r0
 8004642:	f241 0303 	movw	r3, #4099	; 0x1003
 8004646:	429a      	cmp	r2, r3
 8004648:	d817      	bhi.n	800467a <HAL_RCC_OscConfig+0x322>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	2b20      	cmp	r3, #32
 8004650:	d108      	bne.n	8004664 <HAL_RCC_OscConfig+0x30c>
 8004652:	4b89      	ldr	r3, [pc, #548]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800465a:	4a87      	ldr	r2, [pc, #540]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 800465c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004660:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004662:	e075      	b.n	8004750 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004664:	4b84      	ldr	r3, [pc, #528]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	069b      	lsls	r3, r3, #26
 8004672:	4981      	ldr	r1, [pc, #516]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 8004674:	4313      	orrs	r3, r2
 8004676:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004678:	e06a      	b.n	8004750 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800467a:	4b7f      	ldr	r3, [pc, #508]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	061b      	lsls	r3, r3, #24
 8004688:	497b      	ldr	r1, [pc, #492]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 800468a:	4313      	orrs	r3, r2
 800468c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800468e:	e05f      	b.n	8004750 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d042      	beq.n	800471e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004698:	4b77      	ldr	r3, [pc, #476]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a76      	ldr	r2, [pc, #472]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 800469e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fc ffe2 	bl	800166c <HAL_GetTick>
 80046a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80046ac:	f7fc ffde 	bl	800166c <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e255      	b.n	8004b6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046be:	4b6e      	ldr	r3, [pc, #440]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0f0      	beq.n	80046ac <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046ca:	f7fc fffd 	bl	80016c8 <HAL_GetREVID>
 80046ce:	4602      	mov	r2, r0
 80046d0:	f241 0303 	movw	r3, #4099	; 0x1003
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d817      	bhi.n	8004708 <HAL_RCC_OscConfig+0x3b0>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	2b20      	cmp	r3, #32
 80046de:	d108      	bne.n	80046f2 <HAL_RCC_OscConfig+0x39a>
 80046e0:	4b65      	ldr	r3, [pc, #404]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80046e8:	4a63      	ldr	r2, [pc, #396]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 80046ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046ee:	6053      	str	r3, [r2, #4]
 80046f0:	e02e      	b.n	8004750 <HAL_RCC_OscConfig+0x3f8>
 80046f2:	4b61      	ldr	r3, [pc, #388]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	069b      	lsls	r3, r3, #26
 8004700:	495d      	ldr	r1, [pc, #372]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 8004702:	4313      	orrs	r3, r2
 8004704:	604b      	str	r3, [r1, #4]
 8004706:	e023      	b.n	8004750 <HAL_RCC_OscConfig+0x3f8>
 8004708:	4b5b      	ldr	r3, [pc, #364]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	061b      	lsls	r3, r3, #24
 8004716:	4958      	ldr	r1, [pc, #352]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 8004718:	4313      	orrs	r3, r2
 800471a:	60cb      	str	r3, [r1, #12]
 800471c:	e018      	b.n	8004750 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800471e:	4b56      	ldr	r3, [pc, #344]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a55      	ldr	r2, [pc, #340]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 8004724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472a:	f7fc ff9f 	bl	800166c <HAL_GetTick>
 800472e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004730:	e008      	b.n	8004744 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004732:	f7fc ff9b 	bl	800166c <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e212      	b.n	8004b6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004744:	4b4c      	ldr	r3, [pc, #304]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1f0      	bne.n	8004732 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	2b00      	cmp	r3, #0
 800475a:	d036      	beq.n	80047ca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d019      	beq.n	8004798 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004764:	4b44      	ldr	r3, [pc, #272]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 8004766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004768:	4a43      	ldr	r2, [pc, #268]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 800476a:	f043 0301 	orr.w	r3, r3, #1
 800476e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004770:	f7fc ff7c 	bl	800166c <HAL_GetTick>
 8004774:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004778:	f7fc ff78 	bl	800166c <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e1ef      	b.n	8004b6a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800478a:	4b3b      	ldr	r3, [pc, #236]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 800478c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0f0      	beq.n	8004778 <HAL_RCC_OscConfig+0x420>
 8004796:	e018      	b.n	80047ca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004798:	4b37      	ldr	r3, [pc, #220]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 800479a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800479c:	4a36      	ldr	r2, [pc, #216]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 800479e:	f023 0301 	bic.w	r3, r3, #1
 80047a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a4:	f7fc ff62 	bl	800166c <HAL_GetTick>
 80047a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047ac:	f7fc ff5e 	bl	800166c <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e1d5      	b.n	8004b6a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047be:	4b2e      	ldr	r3, [pc, #184]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 80047c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1f0      	bne.n	80047ac <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0320 	and.w	r3, r3, #32
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d036      	beq.n	8004844 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d019      	beq.n	8004812 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047de:	4b26      	ldr	r3, [pc, #152]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a25      	ldr	r2, [pc, #148]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 80047e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80047e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80047ea:	f7fc ff3f 	bl	800166c <HAL_GetTick>
 80047ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80047f0:	e008      	b.n	8004804 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80047f2:	f7fc ff3b 	bl	800166c <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e1b2      	b.n	8004b6a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004804:	4b1c      	ldr	r3, [pc, #112]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0f0      	beq.n	80047f2 <HAL_RCC_OscConfig+0x49a>
 8004810:	e018      	b.n	8004844 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004812:	4b19      	ldr	r3, [pc, #100]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a18      	ldr	r2, [pc, #96]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 8004818:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800481c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800481e:	f7fc ff25 	bl	800166c <HAL_GetTick>
 8004822:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004824:	e008      	b.n	8004838 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004826:	f7fc ff21 	bl	800166c <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e198      	b.n	8004b6a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004838:	4b0f      	ldr	r3, [pc, #60]	; (8004878 <HAL_RCC_OscConfig+0x520>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1f0      	bne.n	8004826 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 8085 	beq.w	800495c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004852:	4b0a      	ldr	r3, [pc, #40]	; (800487c <HAL_RCC_OscConfig+0x524>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a09      	ldr	r2, [pc, #36]	; (800487c <HAL_RCC_OscConfig+0x524>)
 8004858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800485c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800485e:	f7fc ff05 	bl	800166c <HAL_GetTick>
 8004862:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004864:	e00c      	b.n	8004880 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004866:	f7fc ff01 	bl	800166c <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b64      	cmp	r3, #100	; 0x64
 8004872:	d905      	bls.n	8004880 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e178      	b.n	8004b6a <HAL_RCC_OscConfig+0x812>
 8004878:	58024400 	.word	0x58024400
 800487c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004880:	4b96      	ldr	r3, [pc, #600]	; (8004adc <HAL_RCC_OscConfig+0x784>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0ec      	beq.n	8004866 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d106      	bne.n	80048a2 <HAL_RCC_OscConfig+0x54a>
 8004894:	4b92      	ldr	r3, [pc, #584]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 8004896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004898:	4a91      	ldr	r2, [pc, #580]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 800489a:	f043 0301 	orr.w	r3, r3, #1
 800489e:	6713      	str	r3, [r2, #112]	; 0x70
 80048a0:	e02d      	b.n	80048fe <HAL_RCC_OscConfig+0x5a6>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10c      	bne.n	80048c4 <HAL_RCC_OscConfig+0x56c>
 80048aa:	4b8d      	ldr	r3, [pc, #564]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 80048ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ae:	4a8c      	ldr	r2, [pc, #560]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 80048b0:	f023 0301 	bic.w	r3, r3, #1
 80048b4:	6713      	str	r3, [r2, #112]	; 0x70
 80048b6:	4b8a      	ldr	r3, [pc, #552]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 80048b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ba:	4a89      	ldr	r2, [pc, #548]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 80048bc:	f023 0304 	bic.w	r3, r3, #4
 80048c0:	6713      	str	r3, [r2, #112]	; 0x70
 80048c2:	e01c      	b.n	80048fe <HAL_RCC_OscConfig+0x5a6>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	2b05      	cmp	r3, #5
 80048ca:	d10c      	bne.n	80048e6 <HAL_RCC_OscConfig+0x58e>
 80048cc:	4b84      	ldr	r3, [pc, #528]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 80048ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d0:	4a83      	ldr	r2, [pc, #524]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 80048d2:	f043 0304 	orr.w	r3, r3, #4
 80048d6:	6713      	str	r3, [r2, #112]	; 0x70
 80048d8:	4b81      	ldr	r3, [pc, #516]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 80048da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048dc:	4a80      	ldr	r2, [pc, #512]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 80048de:	f043 0301 	orr.w	r3, r3, #1
 80048e2:	6713      	str	r3, [r2, #112]	; 0x70
 80048e4:	e00b      	b.n	80048fe <HAL_RCC_OscConfig+0x5a6>
 80048e6:	4b7e      	ldr	r3, [pc, #504]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 80048e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ea:	4a7d      	ldr	r2, [pc, #500]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 80048ec:	f023 0301 	bic.w	r3, r3, #1
 80048f0:	6713      	str	r3, [r2, #112]	; 0x70
 80048f2:	4b7b      	ldr	r3, [pc, #492]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 80048f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f6:	4a7a      	ldr	r2, [pc, #488]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 80048f8:	f023 0304 	bic.w	r3, r3, #4
 80048fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d015      	beq.n	8004932 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004906:	f7fc feb1 	bl	800166c <HAL_GetTick>
 800490a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800490c:	e00a      	b.n	8004924 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800490e:	f7fc fead 	bl	800166c <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	f241 3288 	movw	r2, #5000	; 0x1388
 800491c:	4293      	cmp	r3, r2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e122      	b.n	8004b6a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004924:	4b6e      	ldr	r3, [pc, #440]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 8004926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0ee      	beq.n	800490e <HAL_RCC_OscConfig+0x5b6>
 8004930:	e014      	b.n	800495c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004932:	f7fc fe9b 	bl	800166c <HAL_GetTick>
 8004936:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004938:	e00a      	b.n	8004950 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800493a:	f7fc fe97 	bl	800166c <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	f241 3288 	movw	r2, #5000	; 0x1388
 8004948:	4293      	cmp	r3, r2
 800494a:	d901      	bls.n	8004950 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e10c      	b.n	8004b6a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004950:	4b63      	ldr	r3, [pc, #396]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 8004952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1ee      	bne.n	800493a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 8101 	beq.w	8004b68 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004966:	4b5e      	ldr	r3, [pc, #376]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800496e:	2b18      	cmp	r3, #24
 8004970:	f000 80bc 	beq.w	8004aec <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	2b02      	cmp	r3, #2
 800497a:	f040 8095 	bne.w	8004aa8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800497e:	4b58      	ldr	r3, [pc, #352]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a57      	ldr	r2, [pc, #348]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 8004984:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498a:	f7fc fe6f 	bl	800166c <HAL_GetTick>
 800498e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004990:	e008      	b.n	80049a4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004992:	f7fc fe6b 	bl	800166c <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e0e2      	b.n	8004b6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049a4:	4b4e      	ldr	r3, [pc, #312]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1f0      	bne.n	8004992 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049b0:	4b4b      	ldr	r3, [pc, #300]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 80049b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049b4:	4b4b      	ldr	r3, [pc, #300]	; (8004ae4 <HAL_RCC_OscConfig+0x78c>)
 80049b6:	4013      	ands	r3, r2
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80049c0:	0112      	lsls	r2, r2, #4
 80049c2:	430a      	orrs	r2, r1
 80049c4:	4946      	ldr	r1, [pc, #280]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	628b      	str	r3, [r1, #40]	; 0x28
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ce:	3b01      	subs	r3, #1
 80049d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d8:	3b01      	subs	r3, #1
 80049da:	025b      	lsls	r3, r3, #9
 80049dc:	b29b      	uxth	r3, r3
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e4:	3b01      	subs	r3, #1
 80049e6:	041b      	lsls	r3, r3, #16
 80049e8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80049ec:	431a      	orrs	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f2:	3b01      	subs	r3, #1
 80049f4:	061b      	lsls	r3, r3, #24
 80049f6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80049fa:	4939      	ldr	r1, [pc, #228]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004a00:	4b37      	ldr	r3, [pc, #220]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	4a36      	ldr	r2, [pc, #216]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 8004a06:	f023 0301 	bic.w	r3, r3, #1
 8004a0a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a0c:	4b34      	ldr	r3, [pc, #208]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 8004a0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a10:	4b35      	ldr	r3, [pc, #212]	; (8004ae8 <HAL_RCC_OscConfig+0x790>)
 8004a12:	4013      	ands	r3, r2
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a18:	00d2      	lsls	r2, r2, #3
 8004a1a:	4931      	ldr	r1, [pc, #196]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004a20:	4b2f      	ldr	r3, [pc, #188]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	f023 020c 	bic.w	r2, r3, #12
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	492c      	ldr	r1, [pc, #176]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004a32:	4b2b      	ldr	r3, [pc, #172]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 8004a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a36:	f023 0202 	bic.w	r2, r3, #2
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3e:	4928      	ldr	r1, [pc, #160]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a44:	4b26      	ldr	r3, [pc, #152]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 8004a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a48:	4a25      	ldr	r2, [pc, #148]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 8004a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a50:	4b23      	ldr	r3, [pc, #140]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 8004a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a54:	4a22      	ldr	r2, [pc, #136]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 8004a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004a5c:	4b20      	ldr	r3, [pc, #128]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	4a1f      	ldr	r2, [pc, #124]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 8004a62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004a68:	4b1d      	ldr	r3, [pc, #116]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	4a1c      	ldr	r2, [pc, #112]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 8004a6e:	f043 0301 	orr.w	r3, r3, #1
 8004a72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a74:	4b1a      	ldr	r3, [pc, #104]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a19      	ldr	r2, [pc, #100]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 8004a7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a80:	f7fc fdf4 	bl	800166c <HAL_GetTick>
 8004a84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a88:	f7fc fdf0 	bl	800166c <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e067      	b.n	8004b6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a9a:	4b11      	ldr	r3, [pc, #68]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0f0      	beq.n	8004a88 <HAL_RCC_OscConfig+0x730>
 8004aa6:	e05f      	b.n	8004b68 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa8:	4b0d      	ldr	r3, [pc, #52]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a0c      	ldr	r2, [pc, #48]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 8004aae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7fc fdda 	bl	800166c <HAL_GetTick>
 8004ab8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004abc:	f7fc fdd6 	bl	800166c <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e04d      	b.n	8004b6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ace:	4b04      	ldr	r3, [pc, #16]	; (8004ae0 <HAL_RCC_OscConfig+0x788>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f0      	bne.n	8004abc <HAL_RCC_OscConfig+0x764>
 8004ada:	e045      	b.n	8004b68 <HAL_RCC_OscConfig+0x810>
 8004adc:	58024800 	.word	0x58024800
 8004ae0:	58024400 	.word	0x58024400
 8004ae4:	fffffc0c 	.word	0xfffffc0c
 8004ae8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004aec:	4b21      	ldr	r3, [pc, #132]	; (8004b74 <HAL_RCC_OscConfig+0x81c>)
 8004aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004af2:	4b20      	ldr	r3, [pc, #128]	; (8004b74 <HAL_RCC_OscConfig+0x81c>)
 8004af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d031      	beq.n	8004b64 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f003 0203 	and.w	r2, r3, #3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d12a      	bne.n	8004b64 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	091b      	lsrs	r3, r3, #4
 8004b12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d122      	bne.n	8004b64 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b28:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d11a      	bne.n	8004b64 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	0a5b      	lsrs	r3, r3, #9
 8004b32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d111      	bne.n	8004b64 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	0c1b      	lsrs	r3, r3, #16
 8004b44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d108      	bne.n	8004b64 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	0e1b      	lsrs	r3, r3, #24
 8004b56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d001      	beq.n	8004b68 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e000      	b.n	8004b6a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3730      	adds	r7, #48	; 0x30
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	58024400 	.word	0x58024400

08004b78 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e19c      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b8c:	4b8a      	ldr	r3, [pc, #552]	; (8004db8 <HAL_RCC_ClockConfig+0x240>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 030f 	and.w	r3, r3, #15
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d910      	bls.n	8004bbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b9a:	4b87      	ldr	r3, [pc, #540]	; (8004db8 <HAL_RCC_ClockConfig+0x240>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f023 020f 	bic.w	r2, r3, #15
 8004ba2:	4985      	ldr	r1, [pc, #532]	; (8004db8 <HAL_RCC_ClockConfig+0x240>)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004baa:	4b83      	ldr	r3, [pc, #524]	; (8004db8 <HAL_RCC_ClockConfig+0x240>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d001      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e184      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d010      	beq.n	8004bea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	691a      	ldr	r2, [r3, #16]
 8004bcc:	4b7b      	ldr	r3, [pc, #492]	; (8004dbc <HAL_RCC_ClockConfig+0x244>)
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d908      	bls.n	8004bea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004bd8:	4b78      	ldr	r3, [pc, #480]	; (8004dbc <HAL_RCC_ClockConfig+0x244>)
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	4975      	ldr	r1, [pc, #468]	; (8004dbc <HAL_RCC_ClockConfig+0x244>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0308 	and.w	r3, r3, #8
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d010      	beq.n	8004c18 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	695a      	ldr	r2, [r3, #20]
 8004bfa:	4b70      	ldr	r3, [pc, #448]	; (8004dbc <HAL_RCC_ClockConfig+0x244>)
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d908      	bls.n	8004c18 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c06:	4b6d      	ldr	r3, [pc, #436]	; (8004dbc <HAL_RCC_ClockConfig+0x244>)
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	496a      	ldr	r1, [pc, #424]	; (8004dbc <HAL_RCC_ClockConfig+0x244>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0310 	and.w	r3, r3, #16
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d010      	beq.n	8004c46 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	699a      	ldr	r2, [r3, #24]
 8004c28:	4b64      	ldr	r3, [pc, #400]	; (8004dbc <HAL_RCC_ClockConfig+0x244>)
 8004c2a:	69db      	ldr	r3, [r3, #28]
 8004c2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d908      	bls.n	8004c46 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c34:	4b61      	ldr	r3, [pc, #388]	; (8004dbc <HAL_RCC_ClockConfig+0x244>)
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	495e      	ldr	r1, [pc, #376]	; (8004dbc <HAL_RCC_ClockConfig+0x244>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0320 	and.w	r3, r3, #32
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d010      	beq.n	8004c74 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	69da      	ldr	r2, [r3, #28]
 8004c56:	4b59      	ldr	r3, [pc, #356]	; (8004dbc <HAL_RCC_ClockConfig+0x244>)
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d908      	bls.n	8004c74 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004c62:	4b56      	ldr	r3, [pc, #344]	; (8004dbc <HAL_RCC_ClockConfig+0x244>)
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	4953      	ldr	r1, [pc, #332]	; (8004dbc <HAL_RCC_ClockConfig+0x244>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d010      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68da      	ldr	r2, [r3, #12]
 8004c84:	4b4d      	ldr	r3, [pc, #308]	; (8004dbc <HAL_RCC_ClockConfig+0x244>)
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	f003 030f 	and.w	r3, r3, #15
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d908      	bls.n	8004ca2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c90:	4b4a      	ldr	r3, [pc, #296]	; (8004dbc <HAL_RCC_ClockConfig+0x244>)
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	f023 020f 	bic.w	r2, r3, #15
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	4947      	ldr	r1, [pc, #284]	; (8004dbc <HAL_RCC_ClockConfig+0x244>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d055      	beq.n	8004d5a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004cae:	4b43      	ldr	r3, [pc, #268]	; (8004dbc <HAL_RCC_ClockConfig+0x244>)
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	4940      	ldr	r1, [pc, #256]	; (8004dbc <HAL_RCC_ClockConfig+0x244>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d107      	bne.n	8004cd8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cc8:	4b3c      	ldr	r3, [pc, #240]	; (8004dbc <HAL_RCC_ClockConfig+0x244>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d121      	bne.n	8004d18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e0f6      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	2b03      	cmp	r3, #3
 8004cde:	d107      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ce0:	4b36      	ldr	r3, [pc, #216]	; (8004dbc <HAL_RCC_ClockConfig+0x244>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d115      	bne.n	8004d18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e0ea      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d107      	bne.n	8004d08 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004cf8:	4b30      	ldr	r3, [pc, #192]	; (8004dbc <HAL_RCC_ClockConfig+0x244>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d109      	bne.n	8004d18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e0de      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d08:	4b2c      	ldr	r3, [pc, #176]	; (8004dbc <HAL_RCC_ClockConfig+0x244>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e0d6      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d18:	4b28      	ldr	r3, [pc, #160]	; (8004dbc <HAL_RCC_ClockConfig+0x244>)
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	f023 0207 	bic.w	r2, r3, #7
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	4925      	ldr	r1, [pc, #148]	; (8004dbc <HAL_RCC_ClockConfig+0x244>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d2a:	f7fc fc9f 	bl	800166c <HAL_GetTick>
 8004d2e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d30:	e00a      	b.n	8004d48 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d32:	f7fc fc9b 	bl	800166c <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e0be      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d48:	4b1c      	ldr	r3, [pc, #112]	; (8004dbc <HAL_RCC_ClockConfig+0x244>)
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d1eb      	bne.n	8004d32 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d010      	beq.n	8004d88 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	4b14      	ldr	r3, [pc, #80]	; (8004dbc <HAL_RCC_ClockConfig+0x244>)
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d208      	bcs.n	8004d88 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d76:	4b11      	ldr	r3, [pc, #68]	; (8004dbc <HAL_RCC_ClockConfig+0x244>)
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	f023 020f 	bic.w	r2, r3, #15
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	490e      	ldr	r1, [pc, #56]	; (8004dbc <HAL_RCC_ClockConfig+0x244>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d88:	4b0b      	ldr	r3, [pc, #44]	; (8004db8 <HAL_RCC_ClockConfig+0x240>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 030f 	and.w	r3, r3, #15
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d214      	bcs.n	8004dc0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d96:	4b08      	ldr	r3, [pc, #32]	; (8004db8 <HAL_RCC_ClockConfig+0x240>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f023 020f 	bic.w	r2, r3, #15
 8004d9e:	4906      	ldr	r1, [pc, #24]	; (8004db8 <HAL_RCC_ClockConfig+0x240>)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da6:	4b04      	ldr	r3, [pc, #16]	; (8004db8 <HAL_RCC_ClockConfig+0x240>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 030f 	and.w	r3, r3, #15
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d005      	beq.n	8004dc0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e086      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x34e>
 8004db8:	52002000 	.word	0x52002000
 8004dbc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0304 	and.w	r3, r3, #4
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d010      	beq.n	8004dee <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	691a      	ldr	r2, [r3, #16]
 8004dd0:	4b3f      	ldr	r3, [pc, #252]	; (8004ed0 <HAL_RCC_ClockConfig+0x358>)
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d208      	bcs.n	8004dee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ddc:	4b3c      	ldr	r3, [pc, #240]	; (8004ed0 <HAL_RCC_ClockConfig+0x358>)
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	4939      	ldr	r1, [pc, #228]	; (8004ed0 <HAL_RCC_ClockConfig+0x358>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0308 	and.w	r3, r3, #8
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d010      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	695a      	ldr	r2, [r3, #20]
 8004dfe:	4b34      	ldr	r3, [pc, #208]	; (8004ed0 <HAL_RCC_ClockConfig+0x358>)
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d208      	bcs.n	8004e1c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e0a:	4b31      	ldr	r3, [pc, #196]	; (8004ed0 <HAL_RCC_ClockConfig+0x358>)
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	492e      	ldr	r1, [pc, #184]	; (8004ed0 <HAL_RCC_ClockConfig+0x358>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0310 	and.w	r3, r3, #16
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d010      	beq.n	8004e4a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	699a      	ldr	r2, [r3, #24]
 8004e2c:	4b28      	ldr	r3, [pc, #160]	; (8004ed0 <HAL_RCC_ClockConfig+0x358>)
 8004e2e:	69db      	ldr	r3, [r3, #28]
 8004e30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d208      	bcs.n	8004e4a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e38:	4b25      	ldr	r3, [pc, #148]	; (8004ed0 <HAL_RCC_ClockConfig+0x358>)
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	4922      	ldr	r1, [pc, #136]	; (8004ed0 <HAL_RCC_ClockConfig+0x358>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0320 	and.w	r3, r3, #32
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d010      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	69da      	ldr	r2, [r3, #28]
 8004e5a:	4b1d      	ldr	r3, [pc, #116]	; (8004ed0 <HAL_RCC_ClockConfig+0x358>)
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d208      	bcs.n	8004e78 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004e66:	4b1a      	ldr	r3, [pc, #104]	; (8004ed0 <HAL_RCC_ClockConfig+0x358>)
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	4917      	ldr	r1, [pc, #92]	; (8004ed0 <HAL_RCC_ClockConfig+0x358>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e78:	f000 f834 	bl	8004ee4 <HAL_RCC_GetSysClockFreq>
 8004e7c:	4601      	mov	r1, r0
 8004e7e:	4b14      	ldr	r3, [pc, #80]	; (8004ed0 <HAL_RCC_ClockConfig+0x358>)
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	0a1b      	lsrs	r3, r3, #8
 8004e84:	f003 030f 	and.w	r3, r3, #15
 8004e88:	4a12      	ldr	r2, [pc, #72]	; (8004ed4 <HAL_RCC_ClockConfig+0x35c>)
 8004e8a:	5cd3      	ldrb	r3, [r2, r3]
 8004e8c:	f003 031f 	and.w	r3, r3, #31
 8004e90:	fa21 f303 	lsr.w	r3, r1, r3
 8004e94:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e96:	4b0e      	ldr	r3, [pc, #56]	; (8004ed0 <HAL_RCC_ClockConfig+0x358>)
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	f003 030f 	and.w	r3, r3, #15
 8004e9e:	4a0d      	ldr	r2, [pc, #52]	; (8004ed4 <HAL_RCC_ClockConfig+0x35c>)
 8004ea0:	5cd3      	ldrb	r3, [r2, r3]
 8004ea2:	f003 031f 	and.w	r3, r3, #31
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8004eac:	4a0a      	ldr	r2, [pc, #40]	; (8004ed8 <HAL_RCC_ClockConfig+0x360>)
 8004eae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004eb0:	4a0a      	ldr	r2, [pc, #40]	; (8004edc <HAL_RCC_ClockConfig+0x364>)
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004eb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ee0 <HAL_RCC_ClockConfig+0x368>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fc fb8c 	bl	80015d8 <HAL_InitTick>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	58024400 	.word	0x58024400
 8004ed4:	0800cf14 	.word	0x0800cf14
 8004ed8:	24000008 	.word	0x24000008
 8004edc:	24000004 	.word	0x24000004
 8004ee0:	2400000c 	.word	0x2400000c

08004ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b089      	sub	sp, #36	; 0x24
 8004ee8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004eea:	4baf      	ldr	r3, [pc, #700]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ef2:	2b18      	cmp	r3, #24
 8004ef4:	f200 814e 	bhi.w	8005194 <HAL_RCC_GetSysClockFreq+0x2b0>
 8004ef8:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efe:	bf00      	nop
 8004f00:	08004f65 	.word	0x08004f65
 8004f04:	08005195 	.word	0x08005195
 8004f08:	08005195 	.word	0x08005195
 8004f0c:	08005195 	.word	0x08005195
 8004f10:	08005195 	.word	0x08005195
 8004f14:	08005195 	.word	0x08005195
 8004f18:	08005195 	.word	0x08005195
 8004f1c:	08005195 	.word	0x08005195
 8004f20:	08004f8b 	.word	0x08004f8b
 8004f24:	08005195 	.word	0x08005195
 8004f28:	08005195 	.word	0x08005195
 8004f2c:	08005195 	.word	0x08005195
 8004f30:	08005195 	.word	0x08005195
 8004f34:	08005195 	.word	0x08005195
 8004f38:	08005195 	.word	0x08005195
 8004f3c:	08005195 	.word	0x08005195
 8004f40:	08004f91 	.word	0x08004f91
 8004f44:	08005195 	.word	0x08005195
 8004f48:	08005195 	.word	0x08005195
 8004f4c:	08005195 	.word	0x08005195
 8004f50:	08005195 	.word	0x08005195
 8004f54:	08005195 	.word	0x08005195
 8004f58:	08005195 	.word	0x08005195
 8004f5c:	08005195 	.word	0x08005195
 8004f60:	08004f97 	.word	0x08004f97
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f64:	4b90      	ldr	r3, [pc, #576]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0320 	and.w	r3, r3, #32
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d009      	beq.n	8004f84 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f70:	4b8d      	ldr	r3, [pc, #564]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	08db      	lsrs	r3, r3, #3
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	4a8c      	ldr	r2, [pc, #560]	; (80051ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f80:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004f82:	e10a      	b.n	800519a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004f84:	4b89      	ldr	r3, [pc, #548]	; (80051ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004f86:	61bb      	str	r3, [r7, #24]
    break;
 8004f88:	e107      	b.n	800519a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004f8a:	4b89      	ldr	r3, [pc, #548]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004f8c:	61bb      	str	r3, [r7, #24]
    break;
 8004f8e:	e104      	b.n	800519a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004f90:	4b88      	ldr	r3, [pc, #544]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004f92:	61bb      	str	r3, [r7, #24]
    break;
 8004f94:	e101      	b.n	800519a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f96:	4b84      	ldr	r3, [pc, #528]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004fa0:	4b81      	ldr	r3, [pc, #516]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa4:	091b      	lsrs	r3, r3, #4
 8004fa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004faa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004fac:	4b7e      	ldr	r3, [pc, #504]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004fb6:	4b7c      	ldr	r3, [pc, #496]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fba:	08db      	lsrs	r3, r3, #3
 8004fbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	fb02 f303 	mul.w	r3, r2, r3
 8004fc6:	ee07 3a90 	vmov	s15, r3
 8004fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 80da 	beq.w	800518e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d05a      	beq.n	8005096 <HAL_RCC_GetSysClockFreq+0x1b2>
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d302      	bcc.n	8004fea <HAL_RCC_GetSysClockFreq+0x106>
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d078      	beq.n	80050da <HAL_RCC_GetSysClockFreq+0x1f6>
 8004fe8:	e099      	b.n	800511e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fea:	4b6f      	ldr	r3, [pc, #444]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0320 	and.w	r3, r3, #32
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d02d      	beq.n	8005052 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ff6:	4b6c      	ldr	r3, [pc, #432]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	08db      	lsrs	r3, r3, #3
 8004ffc:	f003 0303 	and.w	r3, r3, #3
 8005000:	4a6a      	ldr	r2, [pc, #424]	; (80051ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005002:	fa22 f303 	lsr.w	r3, r2, r3
 8005006:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	ee07 3a90 	vmov	s15, r3
 800500e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	ee07 3a90 	vmov	s15, r3
 8005018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005020:	4b61      	ldr	r3, [pc, #388]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005028:	ee07 3a90 	vmov	s15, r3
 800502c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005030:	ed97 6a02 	vldr	s12, [r7, #8]
 8005034:	eddf 5a60 	vldr	s11, [pc, #384]	; 80051b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005038:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800503c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005040:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005044:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800504c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005050:	e087      	b.n	8005162 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	ee07 3a90 	vmov	s15, r3
 8005058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800505c:	eddf 6a57 	vldr	s13, [pc, #348]	; 80051bc <HAL_RCC_GetSysClockFreq+0x2d8>
 8005060:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005064:	4b50      	ldr	r3, [pc, #320]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800506c:	ee07 3a90 	vmov	s15, r3
 8005070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005074:	ed97 6a02 	vldr	s12, [r7, #8]
 8005078:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80051b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 800507c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005080:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005084:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005088:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800508c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005090:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005094:	e065      	b.n	8005162 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	ee07 3a90 	vmov	s15, r3
 800509c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a0:	eddf 6a47 	vldr	s13, [pc, #284]	; 80051c0 <HAL_RCC_GetSysClockFreq+0x2dc>
 80050a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050a8:	4b3f      	ldr	r3, [pc, #252]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80050aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b0:	ee07 3a90 	vmov	s15, r3
 80050b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80050bc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80051b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 80050c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050d8:	e043      	b.n	8005162 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	ee07 3a90 	vmov	s15, r3
 80050e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e4:	eddf 6a37 	vldr	s13, [pc, #220]	; 80051c4 <HAL_RCC_GetSysClockFreq+0x2e0>
 80050e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ec:	4b2e      	ldr	r3, [pc, #184]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80050ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f4:	ee07 3a90 	vmov	s15, r3
 80050f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005100:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80051b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005104:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005108:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800510c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005110:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005118:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800511c:	e021      	b.n	8005162 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	ee07 3a90 	vmov	s15, r3
 8005124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005128:	eddf 6a25 	vldr	s13, [pc, #148]	; 80051c0 <HAL_RCC_GetSysClockFreq+0x2dc>
 800512c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005130:	4b1d      	ldr	r3, [pc, #116]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005138:	ee07 3a90 	vmov	s15, r3
 800513c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005140:	ed97 6a02 	vldr	s12, [r7, #8]
 8005144:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80051b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005148:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800514c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005150:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005154:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800515c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005160:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005162:	4b11      	ldr	r3, [pc, #68]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005166:	0a5b      	lsrs	r3, r3, #9
 8005168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800516c:	3301      	adds	r3, #1
 800516e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	ee07 3a90 	vmov	s15, r3
 8005176:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800517a:	edd7 6a07 	vldr	s13, [r7, #28]
 800517e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005186:	ee17 3a90 	vmov	r3, s15
 800518a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800518c:	e005      	b.n	800519a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	61bb      	str	r3, [r7, #24]
    break;
 8005192:	e002      	b.n	800519a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8005194:	4b06      	ldr	r3, [pc, #24]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005196:	61bb      	str	r3, [r7, #24]
    break;
 8005198:	bf00      	nop
  }

  return sysclockfreq;
 800519a:	69bb      	ldr	r3, [r7, #24]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3724      	adds	r7, #36	; 0x24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	58024400 	.word	0x58024400
 80051ac:	03d09000 	.word	0x03d09000
 80051b0:	003d0900 	.word	0x003d0900
 80051b4:	007a1200 	.word	0x007a1200
 80051b8:	46000000 	.word	0x46000000
 80051bc:	4c742400 	.word	0x4c742400
 80051c0:	4a742400 	.word	0x4a742400
 80051c4:	4af42400 	.word	0x4af42400

080051c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80051ce:	f7ff fe89 	bl	8004ee4 <HAL_RCC_GetSysClockFreq>
 80051d2:	4601      	mov	r1, r0
 80051d4:	4b10      	ldr	r3, [pc, #64]	; (8005218 <HAL_RCC_GetHCLKFreq+0x50>)
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	0a1b      	lsrs	r3, r3, #8
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	4a0f      	ldr	r2, [pc, #60]	; (800521c <HAL_RCC_GetHCLKFreq+0x54>)
 80051e0:	5cd3      	ldrb	r3, [r2, r3]
 80051e2:	f003 031f 	and.w	r3, r3, #31
 80051e6:	fa21 f303 	lsr.w	r3, r1, r3
 80051ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80051ec:	4b0a      	ldr	r3, [pc, #40]	; (8005218 <HAL_RCC_GetHCLKFreq+0x50>)
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	f003 030f 	and.w	r3, r3, #15
 80051f4:	4a09      	ldr	r2, [pc, #36]	; (800521c <HAL_RCC_GetHCLKFreq+0x54>)
 80051f6:	5cd3      	ldrb	r3, [r2, r3]
 80051f8:	f003 031f 	and.w	r3, r3, #31
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005202:	4a07      	ldr	r2, [pc, #28]	; (8005220 <HAL_RCC_GetHCLKFreq+0x58>)
 8005204:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005206:	4a07      	ldr	r2, [pc, #28]	; (8005224 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800520c:	4b04      	ldr	r3, [pc, #16]	; (8005220 <HAL_RCC_GetHCLKFreq+0x58>)
 800520e:	681b      	ldr	r3, [r3, #0]
}
 8005210:	4618      	mov	r0, r3
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	58024400 	.word	0x58024400
 800521c:	0800cf14 	.word	0x0800cf14
 8005220:	24000008 	.word	0x24000008
 8005224:	24000004 	.word	0x24000004

08005228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800522c:	f7ff ffcc 	bl	80051c8 <HAL_RCC_GetHCLKFreq>
 8005230:	4601      	mov	r1, r0
 8005232:	4b06      	ldr	r3, [pc, #24]	; (800524c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	091b      	lsrs	r3, r3, #4
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	4a04      	ldr	r2, [pc, #16]	; (8005250 <HAL_RCC_GetPCLK1Freq+0x28>)
 800523e:	5cd3      	ldrb	r3, [r2, r3]
 8005240:	f003 031f 	and.w	r3, r3, #31
 8005244:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005248:	4618      	mov	r0, r3
 800524a:	bd80      	pop	{r7, pc}
 800524c:	58024400 	.word	0x58024400
 8005250:	0800cf14 	.word	0x0800cf14

08005254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005258:	f7ff ffb6 	bl	80051c8 <HAL_RCC_GetHCLKFreq>
 800525c:	4601      	mov	r1, r0
 800525e:	4b06      	ldr	r3, [pc, #24]	; (8005278 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	0a1b      	lsrs	r3, r3, #8
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	4a04      	ldr	r2, [pc, #16]	; (800527c <HAL_RCC_GetPCLK2Freq+0x28>)
 800526a:	5cd3      	ldrb	r3, [r2, r3]
 800526c:	f003 031f 	and.w	r3, r3, #31
 8005270:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005274:	4618      	mov	r0, r3
 8005276:	bd80      	pop	{r7, pc}
 8005278:	58024400 	.word	0x58024400
 800527c:	0800cf14 	.word	0x0800cf14

08005280 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005288:	2300      	movs	r3, #0
 800528a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800528c:	2300      	movs	r3, #0
 800528e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d03d      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052a4:	d013      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80052a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052aa:	d802      	bhi.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d007      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80052b0:	e01f      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80052b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052b6:	d013      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80052b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80052bc:	d01c      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80052be:	e018      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052c0:	4baf      	ldr	r3, [pc, #700]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	4aae      	ldr	r2, [pc, #696]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80052cc:	e015      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3304      	adds	r3, #4
 80052d2:	2102      	movs	r1, #2
 80052d4:	4618      	mov	r0, r3
 80052d6:	f001 f96f 	bl	80065b8 <RCCEx_PLL2_Config>
 80052da:	4603      	mov	r3, r0
 80052dc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80052de:	e00c      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3324      	adds	r3, #36	; 0x24
 80052e4:	2102      	movs	r1, #2
 80052e6:	4618      	mov	r0, r3
 80052e8:	f001 fa18 	bl	800671c <RCCEx_PLL3_Config>
 80052ec:	4603      	mov	r3, r0
 80052ee:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80052f0:	e003      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	75fb      	strb	r3, [r7, #23]
      break;
 80052f6:	e000      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80052f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052fa:	7dfb      	ldrb	r3, [r7, #23]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d109      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005300:	4b9f      	ldr	r3, [pc, #636]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005304:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800530c:	499c      	ldr	r1, [pc, #624]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800530e:	4313      	orrs	r3, r2
 8005310:	650b      	str	r3, [r1, #80]	; 0x50
 8005312:	e001      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005314:	7dfb      	ldrb	r3, [r7, #23]
 8005316:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005320:	2b00      	cmp	r3, #0
 8005322:	d03d      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005328:	2b04      	cmp	r3, #4
 800532a:	d826      	bhi.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800532c:	a201      	add	r2, pc, #4	; (adr r2, 8005334 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800532e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005332:	bf00      	nop
 8005334:	08005349 	.word	0x08005349
 8005338:	08005357 	.word	0x08005357
 800533c:	08005369 	.word	0x08005369
 8005340:	08005381 	.word	0x08005381
 8005344:	08005381 	.word	0x08005381
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005348:	4b8d      	ldr	r3, [pc, #564]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800534a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534c:	4a8c      	ldr	r2, [pc, #560]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800534e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005352:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005354:	e015      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	3304      	adds	r3, #4
 800535a:	2100      	movs	r1, #0
 800535c:	4618      	mov	r0, r3
 800535e:	f001 f92b 	bl	80065b8 <RCCEx_PLL2_Config>
 8005362:	4603      	mov	r3, r0
 8005364:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005366:	e00c      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	3324      	adds	r3, #36	; 0x24
 800536c:	2100      	movs	r1, #0
 800536e:	4618      	mov	r0, r3
 8005370:	f001 f9d4 	bl	800671c <RCCEx_PLL3_Config>
 8005374:	4603      	mov	r3, r0
 8005376:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005378:	e003      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	75fb      	strb	r3, [r7, #23]
      break;
 800537e:	e000      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8005380:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005382:	7dfb      	ldrb	r3, [r7, #23]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d109      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005388:	4b7d      	ldr	r3, [pc, #500]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800538a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800538c:	f023 0207 	bic.w	r2, r3, #7
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005394:	497a      	ldr	r1, [pc, #488]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005396:	4313      	orrs	r3, r2
 8005398:	650b      	str	r3, [r1, #80]	; 0x50
 800539a:	e001      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800539c:	7dfb      	ldrb	r3, [r7, #23]
 800539e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d03e      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b0:	2b80      	cmp	r3, #128	; 0x80
 80053b2:	d01c      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80053b4:	2b80      	cmp	r3, #128	; 0x80
 80053b6:	d804      	bhi.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d008      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80053bc:	2b40      	cmp	r3, #64	; 0x40
 80053be:	d00d      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80053c0:	e01e      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80053c2:	2bc0      	cmp	r3, #192	; 0xc0
 80053c4:	d01f      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80053c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ca:	d01e      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80053cc:	e018      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053ce:	4b6c      	ldr	r3, [pc, #432]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80053d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d2:	4a6b      	ldr	r2, [pc, #428]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80053d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80053da:	e017      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3304      	adds	r3, #4
 80053e0:	2100      	movs	r1, #0
 80053e2:	4618      	mov	r0, r3
 80053e4:	f001 f8e8 	bl	80065b8 <RCCEx_PLL2_Config>
 80053e8:	4603      	mov	r3, r0
 80053ea:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80053ec:	e00e      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	3324      	adds	r3, #36	; 0x24
 80053f2:	2100      	movs	r1, #0
 80053f4:	4618      	mov	r0, r3
 80053f6:	f001 f991 	bl	800671c <RCCEx_PLL3_Config>
 80053fa:	4603      	mov	r3, r0
 80053fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80053fe:	e005      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	75fb      	strb	r3, [r7, #23]
      break;
 8005404:	e002      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005406:	bf00      	nop
 8005408:	e000      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800540a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800540c:	7dfb      	ldrb	r3, [r7, #23]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d109      	bne.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005412:	4b5b      	ldr	r3, [pc, #364]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005416:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541e:	4958      	ldr	r1, [pc, #352]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005420:	4313      	orrs	r3, r2
 8005422:	650b      	str	r3, [r1, #80]	; 0x50
 8005424:	e001      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005426:	7dfb      	ldrb	r3, [r7, #23]
 8005428:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005432:	2b00      	cmp	r3, #0
 8005434:	d044      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800543c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005440:	d01f      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005442:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005446:	d805      	bhi.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800544c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005450:	d00e      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8005452:	e01f      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8005454:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005458:	d01f      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800545a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800545e:	d01e      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005460:	e018      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005462:	4b47      	ldr	r3, [pc, #284]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005466:	4a46      	ldr	r2, [pc, #280]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800546c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800546e:	e017      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3304      	adds	r3, #4
 8005474:	2100      	movs	r1, #0
 8005476:	4618      	mov	r0, r3
 8005478:	f001 f89e 	bl	80065b8 <RCCEx_PLL2_Config>
 800547c:	4603      	mov	r3, r0
 800547e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005480:	e00e      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	3324      	adds	r3, #36	; 0x24
 8005486:	2100      	movs	r1, #0
 8005488:	4618      	mov	r0, r3
 800548a:	f001 f947 	bl	800671c <RCCEx_PLL3_Config>
 800548e:	4603      	mov	r3, r0
 8005490:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005492:	e005      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	75fb      	strb	r3, [r7, #23]
      break;
 8005498:	e002      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800549a:	bf00      	nop
 800549c:	e000      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800549e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054a0:	7dfb      	ldrb	r3, [r7, #23]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10a      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80054a6:	4b36      	ldr	r3, [pc, #216]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80054a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054aa:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80054b4:	4932      	ldr	r1, [pc, #200]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	658b      	str	r3, [r1, #88]	; 0x58
 80054ba:	e001      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054bc:	7dfb      	ldrb	r3, [r7, #23]
 80054be:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d044      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80054d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054d6:	d01f      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80054d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054dc:	d805      	bhi.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00a      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80054e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054e6:	d00e      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80054e8:	e01f      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80054ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80054ee:	d01f      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80054f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054f4:	d01e      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80054f6:	e018      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054f8:	4b21      	ldr	r3, [pc, #132]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fc:	4a20      	ldr	r2, [pc, #128]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80054fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005502:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005504:	e017      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	3304      	adds	r3, #4
 800550a:	2100      	movs	r1, #0
 800550c:	4618      	mov	r0, r3
 800550e:	f001 f853 	bl	80065b8 <RCCEx_PLL2_Config>
 8005512:	4603      	mov	r3, r0
 8005514:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005516:	e00e      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3324      	adds	r3, #36	; 0x24
 800551c:	2100      	movs	r1, #0
 800551e:	4618      	mov	r0, r3
 8005520:	f001 f8fc 	bl	800671c <RCCEx_PLL3_Config>
 8005524:	4603      	mov	r3, r0
 8005526:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005528:	e005      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	75fb      	strb	r3, [r7, #23]
      break;
 800552e:	e002      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005530:	bf00      	nop
 8005532:	e000      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005534:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005536:	7dfb      	ldrb	r3, [r7, #23]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10a      	bne.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800553c:	4b10      	ldr	r3, [pc, #64]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800553e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005540:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800554a:	490d      	ldr	r1, [pc, #52]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800554c:	4313      	orrs	r3, r2
 800554e:	658b      	str	r3, [r1, #88]	; 0x58
 8005550:	e001      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005552:	7dfb      	ldrb	r3, [r7, #23]
 8005554:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d035      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005566:	2b10      	cmp	r3, #16
 8005568:	d00c      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800556a:	2b10      	cmp	r3, #16
 800556c:	d802      	bhi.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800556e:	2b00      	cmp	r3, #0
 8005570:	d01b      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8005572:	e017      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005574:	2b20      	cmp	r3, #32
 8005576:	d00c      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005578:	2b30      	cmp	r3, #48	; 0x30
 800557a:	d018      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800557c:	e012      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800557e:	bf00      	nop
 8005580:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005584:	4baf      	ldr	r3, [pc, #700]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	4aae      	ldr	r2, [pc, #696]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800558a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800558e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005590:	e00e      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	3304      	adds	r3, #4
 8005596:	2102      	movs	r1, #2
 8005598:	4618      	mov	r0, r3
 800559a:	f001 f80d 	bl	80065b8 <RCCEx_PLL2_Config>
 800559e:	4603      	mov	r3, r0
 80055a0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80055a2:	e005      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	75fb      	strb	r3, [r7, #23]
      break;
 80055a8:	e002      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80055aa:	bf00      	nop
 80055ac:	e000      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80055ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055b0:	7dfb      	ldrb	r3, [r7, #23]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d109      	bne.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80055b6:	4ba3      	ldr	r3, [pc, #652]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055c2:	49a0      	ldr	r1, [pc, #640]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80055c8:	e001      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ca:	7dfb      	ldrb	r3, [r7, #23]
 80055cc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d042      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e2:	d01f      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80055e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e8:	d805      	bhi.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00a      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80055ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f2:	d00e      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80055f4:	e01f      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80055f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055fa:	d01f      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80055fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005600:	d01e      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005602:	e018      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005604:	4b8f      	ldr	r3, [pc, #572]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005608:	4a8e      	ldr	r2, [pc, #568]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800560a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800560e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005610:	e017      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	3304      	adds	r3, #4
 8005616:	2100      	movs	r1, #0
 8005618:	4618      	mov	r0, r3
 800561a:	f000 ffcd 	bl	80065b8 <RCCEx_PLL2_Config>
 800561e:	4603      	mov	r3, r0
 8005620:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005622:	e00e      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3324      	adds	r3, #36	; 0x24
 8005628:	2100      	movs	r1, #0
 800562a:	4618      	mov	r0, r3
 800562c:	f001 f876 	bl	800671c <RCCEx_PLL3_Config>
 8005630:	4603      	mov	r3, r0
 8005632:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005634:	e005      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	75fb      	strb	r3, [r7, #23]
      break;
 800563a:	e002      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800563c:	bf00      	nop
 800563e:	e000      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005640:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005642:	7dfb      	ldrb	r3, [r7, #23]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d109      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005648:	4b7e      	ldr	r3, [pc, #504]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800564a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800564c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005654:	497b      	ldr	r1, [pc, #492]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005656:	4313      	orrs	r3, r2
 8005658:	650b      	str	r3, [r1, #80]	; 0x50
 800565a:	e001      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800565c:	7dfb      	ldrb	r3, [r7, #23]
 800565e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d042      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005670:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005674:	d01b      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005676:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800567a:	d805      	bhi.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800567c:	2b00      	cmp	r3, #0
 800567e:	d022      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8005680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005684:	d00a      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005686:	e01b      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005688:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800568c:	d01d      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800568e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005692:	d01c      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8005694:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005698:	d01b      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800569a:	e011      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3304      	adds	r3, #4
 80056a0:	2101      	movs	r1, #1
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 ff88 	bl	80065b8 <RCCEx_PLL2_Config>
 80056a8:	4603      	mov	r3, r0
 80056aa:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80056ac:	e012      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	3324      	adds	r3, #36	; 0x24
 80056b2:	2101      	movs	r1, #1
 80056b4:	4618      	mov	r0, r3
 80056b6:	f001 f831 	bl	800671c <RCCEx_PLL3_Config>
 80056ba:	4603      	mov	r3, r0
 80056bc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80056be:	e009      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	75fb      	strb	r3, [r7, #23]
      break;
 80056c4:	e006      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80056c6:	bf00      	nop
 80056c8:	e004      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80056ca:	bf00      	nop
 80056cc:	e002      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80056ce:	bf00      	nop
 80056d0:	e000      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80056d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056d4:	7dfb      	ldrb	r3, [r7, #23]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d109      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80056da:	4b5a      	ldr	r3, [pc, #360]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80056dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056de:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056e6:	4957      	ldr	r1, [pc, #348]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	650b      	str	r3, [r1, #80]	; 0x50
 80056ec:	e001      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ee:	7dfb      	ldrb	r3, [r7, #23]
 80056f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d044      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005708:	d01b      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800570a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800570e:	d805      	bhi.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8005710:	2b00      	cmp	r3, #0
 8005712:	d022      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005714:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005718:	d00a      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800571a:	e01b      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800571c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005720:	d01d      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005722:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005726:	d01c      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8005728:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800572c:	d01b      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800572e:	e011      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3304      	adds	r3, #4
 8005734:	2101      	movs	r1, #1
 8005736:	4618      	mov	r0, r3
 8005738:	f000 ff3e 	bl	80065b8 <RCCEx_PLL2_Config>
 800573c:	4603      	mov	r3, r0
 800573e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005740:	e012      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	3324      	adds	r3, #36	; 0x24
 8005746:	2101      	movs	r1, #1
 8005748:	4618      	mov	r0, r3
 800574a:	f000 ffe7 	bl	800671c <RCCEx_PLL3_Config>
 800574e:	4603      	mov	r3, r0
 8005750:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005752:	e009      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	75fb      	strb	r3, [r7, #23]
      break;
 8005758:	e006      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800575a:	bf00      	nop
 800575c:	e004      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800575e:	bf00      	nop
 8005760:	e002      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005762:	bf00      	nop
 8005764:	e000      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005766:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005768:	7dfb      	ldrb	r3, [r7, #23]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10a      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800576e:	4b35      	ldr	r3, [pc, #212]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005772:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800577c:	4931      	ldr	r1, [pc, #196]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800577e:	4313      	orrs	r3, r2
 8005780:	658b      	str	r3, [r1, #88]	; 0x58
 8005782:	e001      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005784:	7dfb      	ldrb	r3, [r7, #23]
 8005786:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d02d      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005798:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800579c:	d005      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800579e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057a2:	d009      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d013      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80057a8:	e00f      	b.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057aa:	4b26      	ldr	r3, [pc, #152]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80057ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ae:	4a25      	ldr	r2, [pc, #148]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80057b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80057b6:	e00c      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3304      	adds	r3, #4
 80057bc:	2101      	movs	r1, #1
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fefa 	bl	80065b8 <RCCEx_PLL2_Config>
 80057c4:	4603      	mov	r3, r0
 80057c6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80057c8:	e003      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	75fb      	strb	r3, [r7, #23]
      break;
 80057ce:	e000      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80057d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057d2:	7dfb      	ldrb	r3, [r7, #23]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d109      	bne.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80057d8:	4b1a      	ldr	r3, [pc, #104]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80057da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057dc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057e4:	4917      	ldr	r1, [pc, #92]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	650b      	str	r3, [r1, #80]	; 0x50
 80057ea:	e001      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ec:	7dfb      	ldrb	r3, [r7, #23]
 80057ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d035      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005800:	2b03      	cmp	r3, #3
 8005802:	d81b      	bhi.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005804:	a201      	add	r2, pc, #4	; (adr r2, 800580c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8005806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580a:	bf00      	nop
 800580c:	08005849 	.word	0x08005849
 8005810:	0800581d 	.word	0x0800581d
 8005814:	0800582b 	.word	0x0800582b
 8005818:	08005849 	.word	0x08005849
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800581c:	4b09      	ldr	r3, [pc, #36]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005820:	4a08      	ldr	r2, [pc, #32]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005826:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005828:	e00f      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	3304      	adds	r3, #4
 800582e:	2102      	movs	r1, #2
 8005830:	4618      	mov	r0, r3
 8005832:	f000 fec1 	bl	80065b8 <RCCEx_PLL2_Config>
 8005836:	4603      	mov	r3, r0
 8005838:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800583a:	e006      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	75fb      	strb	r3, [r7, #23]
      break;
 8005840:	e003      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8005842:	bf00      	nop
 8005844:	58024400 	.word	0x58024400
      break;
 8005848:	bf00      	nop
    }

    if(ret == HAL_OK)
 800584a:	7dfb      	ldrb	r3, [r7, #23]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d109      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005850:	4bba      	ldr	r3, [pc, #744]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005854:	f023 0203 	bic.w	r2, r3, #3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585c:	49b7      	ldr	r1, [pc, #732]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800585e:	4313      	orrs	r3, r2
 8005860:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005862:	e001      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005864:	7dfb      	ldrb	r3, [r7, #23]
 8005866:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 8086 	beq.w	8005982 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005876:	4bb2      	ldr	r3, [pc, #712]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4ab1      	ldr	r2, [pc, #708]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800587c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005880:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005882:	f7fb fef3 	bl	800166c <HAL_GetTick>
 8005886:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005888:	e009      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800588a:	f7fb feef 	bl	800166c <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b64      	cmp	r3, #100	; 0x64
 8005896:	d902      	bls.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	75fb      	strb	r3, [r7, #23]
        break;
 800589c:	e005      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800589e:	4ba8      	ldr	r3, [pc, #672]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d0ef      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80058aa:	7dfb      	ldrb	r3, [r7, #23]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d166      	bne.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80058b0:	4ba2      	ldr	r3, [pc, #648]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80058b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058ba:	4053      	eors	r3, r2
 80058bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d013      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058c4:	4b9d      	ldr	r3, [pc, #628]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80058c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058cc:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058ce:	4b9b      	ldr	r3, [pc, #620]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80058d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d2:	4a9a      	ldr	r2, [pc, #616]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80058d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058d8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058da:	4b98      	ldr	r3, [pc, #608]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80058dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058de:	4a97      	ldr	r2, [pc, #604]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80058e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058e4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80058e6:	4a95      	ldr	r2, [pc, #596]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058f6:	d115      	bne.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f8:	f7fb feb8 	bl	800166c <HAL_GetTick>
 80058fc:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058fe:	e00b      	b.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005900:	f7fb feb4 	bl	800166c <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	f241 3288 	movw	r2, #5000	; 0x1388
 800590e:	4293      	cmp	r3, r2
 8005910:	d902      	bls.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	75fb      	strb	r3, [r7, #23]
            break;
 8005916:	e005      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005918:	4b88      	ldr	r3, [pc, #544]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800591a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b00      	cmp	r3, #0
 8005922:	d0ed      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005924:	7dfb      	ldrb	r3, [r7, #23]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d126      	bne.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005934:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005938:	d10d      	bne.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800593a:	4b80      	ldr	r3, [pc, #512]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005948:	0919      	lsrs	r1, r3, #4
 800594a:	4b7e      	ldr	r3, [pc, #504]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800594c:	400b      	ands	r3, r1
 800594e:	497b      	ldr	r1, [pc, #492]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005950:	4313      	orrs	r3, r2
 8005952:	610b      	str	r3, [r1, #16]
 8005954:	e005      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005956:	4b79      	ldr	r3, [pc, #484]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	4a78      	ldr	r2, [pc, #480]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800595c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005960:	6113      	str	r3, [r2, #16]
 8005962:	4b76      	ldr	r3, [pc, #472]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005964:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800596c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005970:	4972      	ldr	r1, [pc, #456]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005972:	4313      	orrs	r3, r2
 8005974:	670b      	str	r3, [r1, #112]	; 0x70
 8005976:	e004      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005978:	7dfb      	ldrb	r3, [r7, #23]
 800597a:	75bb      	strb	r3, [r7, #22]
 800597c:	e001      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800597e:	7dfb      	ldrb	r3, [r7, #23]
 8005980:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d07d      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005992:	2b28      	cmp	r3, #40	; 0x28
 8005994:	d866      	bhi.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8005996:	a201      	add	r2, pc, #4	; (adr r2, 800599c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599c:	08005a6b 	.word	0x08005a6b
 80059a0:	08005a65 	.word	0x08005a65
 80059a4:	08005a65 	.word	0x08005a65
 80059a8:	08005a65 	.word	0x08005a65
 80059ac:	08005a65 	.word	0x08005a65
 80059b0:	08005a65 	.word	0x08005a65
 80059b4:	08005a65 	.word	0x08005a65
 80059b8:	08005a65 	.word	0x08005a65
 80059bc:	08005a41 	.word	0x08005a41
 80059c0:	08005a65 	.word	0x08005a65
 80059c4:	08005a65 	.word	0x08005a65
 80059c8:	08005a65 	.word	0x08005a65
 80059cc:	08005a65 	.word	0x08005a65
 80059d0:	08005a65 	.word	0x08005a65
 80059d4:	08005a65 	.word	0x08005a65
 80059d8:	08005a65 	.word	0x08005a65
 80059dc:	08005a53 	.word	0x08005a53
 80059e0:	08005a65 	.word	0x08005a65
 80059e4:	08005a65 	.word	0x08005a65
 80059e8:	08005a65 	.word	0x08005a65
 80059ec:	08005a65 	.word	0x08005a65
 80059f0:	08005a65 	.word	0x08005a65
 80059f4:	08005a65 	.word	0x08005a65
 80059f8:	08005a65 	.word	0x08005a65
 80059fc:	08005a6b 	.word	0x08005a6b
 8005a00:	08005a65 	.word	0x08005a65
 8005a04:	08005a65 	.word	0x08005a65
 8005a08:	08005a65 	.word	0x08005a65
 8005a0c:	08005a65 	.word	0x08005a65
 8005a10:	08005a65 	.word	0x08005a65
 8005a14:	08005a65 	.word	0x08005a65
 8005a18:	08005a65 	.word	0x08005a65
 8005a1c:	08005a6b 	.word	0x08005a6b
 8005a20:	08005a65 	.word	0x08005a65
 8005a24:	08005a65 	.word	0x08005a65
 8005a28:	08005a65 	.word	0x08005a65
 8005a2c:	08005a65 	.word	0x08005a65
 8005a30:	08005a65 	.word	0x08005a65
 8005a34:	08005a65 	.word	0x08005a65
 8005a38:	08005a65 	.word	0x08005a65
 8005a3c:	08005a6b 	.word	0x08005a6b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3304      	adds	r3, #4
 8005a44:	2101      	movs	r1, #1
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 fdb6 	bl	80065b8 <RCCEx_PLL2_Config>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005a50:	e00c      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	3324      	adds	r3, #36	; 0x24
 8005a56:	2101      	movs	r1, #1
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 fe5f 	bl	800671c <RCCEx_PLL3_Config>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005a62:	e003      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	75fb      	strb	r3, [r7, #23]
      break;
 8005a68:	e000      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8005a6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a6c:	7dfb      	ldrb	r3, [r7, #23]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d109      	bne.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005a72:	4b32      	ldr	r3, [pc, #200]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a76:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a7e:	492f      	ldr	r1, [pc, #188]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	654b      	str	r3, [r1, #84]	; 0x54
 8005a84:	e001      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a86:	7dfb      	ldrb	r3, [r7, #23]
 8005a88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d037      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a9a:	2b05      	cmp	r3, #5
 8005a9c:	d820      	bhi.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8005a9e:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa4:	08005ae7 	.word	0x08005ae7
 8005aa8:	08005abd 	.word	0x08005abd
 8005aac:	08005acf 	.word	0x08005acf
 8005ab0:	08005ae7 	.word	0x08005ae7
 8005ab4:	08005ae7 	.word	0x08005ae7
 8005ab8:	08005ae7 	.word	0x08005ae7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 fd78 	bl	80065b8 <RCCEx_PLL2_Config>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005acc:	e00c      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	3324      	adds	r3, #36	; 0x24
 8005ad2:	2101      	movs	r1, #1
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f000 fe21 	bl	800671c <RCCEx_PLL3_Config>
 8005ada:	4603      	mov	r3, r0
 8005adc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005ade:	e003      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ae4:	e000      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8005ae6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ae8:	7dfb      	ldrb	r3, [r7, #23]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d109      	bne.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005aee:	4b13      	ldr	r3, [pc, #76]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af2:	f023 0207 	bic.w	r2, r3, #7
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005afa:	4910      	ldr	r1, [pc, #64]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	654b      	str	r3, [r1, #84]	; 0x54
 8005b00:	e001      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b02:	7dfb      	ldrb	r3, [r7, #23]
 8005b04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0304 	and.w	r3, r3, #4
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d040      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b18:	2b05      	cmp	r3, #5
 8005b1a:	d827      	bhi.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8005b1c:	a201      	add	r2, pc, #4	; (adr r2, 8005b24 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8005b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b22:	bf00      	nop
 8005b24:	08005b73 	.word	0x08005b73
 8005b28:	08005b49 	.word	0x08005b49
 8005b2c:	08005b5b 	.word	0x08005b5b
 8005b30:	08005b73 	.word	0x08005b73
 8005b34:	08005b73 	.word	0x08005b73
 8005b38:	08005b73 	.word	0x08005b73
 8005b3c:	58024400 	.word	0x58024400
 8005b40:	58024800 	.word	0x58024800
 8005b44:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	2101      	movs	r1, #1
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 fd32 	bl	80065b8 <RCCEx_PLL2_Config>
 8005b54:	4603      	mov	r3, r0
 8005b56:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005b58:	e00c      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	3324      	adds	r3, #36	; 0x24
 8005b5e:	2101      	movs	r1, #1
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 fddb 	bl	800671c <RCCEx_PLL3_Config>
 8005b66:	4603      	mov	r3, r0
 8005b68:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005b6a:	e003      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b70:	e000      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8005b72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b74:	7dfb      	ldrb	r3, [r7, #23]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10a      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b7a:	4bb2      	ldr	r3, [pc, #712]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b7e:	f023 0207 	bic.w	r2, r3, #7
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b88:	49ae      	ldr	r1, [pc, #696]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	658b      	str	r3, [r1, #88]	; 0x58
 8005b8e:	e001      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b90:	7dfb      	ldrb	r3, [r7, #23]
 8005b92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0320 	and.w	r3, r3, #32
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d044      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ba6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005baa:	d01b      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8005bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bb0:	d805      	bhi.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d022      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8005bb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bba:	d00a      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005bbc:	e01b      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bc2:	d01d      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8005bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bc8:	d01c      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005bca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005bce:	d01b      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005bd0:	e011      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	3304      	adds	r3, #4
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f000 fced 	bl	80065b8 <RCCEx_PLL2_Config>
 8005bde:	4603      	mov	r3, r0
 8005be0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005be2:	e012      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3324      	adds	r3, #36	; 0x24
 8005be8:	2102      	movs	r1, #2
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 fd96 	bl	800671c <RCCEx_PLL3_Config>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005bf4:	e009      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	75fb      	strb	r3, [r7, #23]
      break;
 8005bfa:	e006      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005bfc:	bf00      	nop
 8005bfe:	e004      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005c00:	bf00      	nop
 8005c02:	e002      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005c04:	bf00      	nop
 8005c06:	e000      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005c08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c0a:	7dfb      	ldrb	r3, [r7, #23]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10a      	bne.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c10:	4b8c      	ldr	r3, [pc, #560]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c14:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c1e:	4989      	ldr	r1, [pc, #548]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	654b      	str	r3, [r1, #84]	; 0x54
 8005c24:	e001      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c26:	7dfb      	ldrb	r3, [r7, #23]
 8005c28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d044      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c40:	d01b      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8005c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c46:	d805      	bhi.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d022      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c50:	d00a      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8005c52:	e01b      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c58:	d01d      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005c5a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005c5e:	d01c      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8005c60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c64:	d01b      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8005c66:	e011      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	3304      	adds	r3, #4
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 fca2 	bl	80065b8 <RCCEx_PLL2_Config>
 8005c74:	4603      	mov	r3, r0
 8005c76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005c78:	e012      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	3324      	adds	r3, #36	; 0x24
 8005c7e:	2102      	movs	r1, #2
 8005c80:	4618      	mov	r0, r3
 8005c82:	f000 fd4b 	bl	800671c <RCCEx_PLL3_Config>
 8005c86:	4603      	mov	r3, r0
 8005c88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005c8a:	e009      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c90:	e006      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005c92:	bf00      	nop
 8005c94:	e004      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005c96:	bf00      	nop
 8005c98:	e002      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005c9a:	bf00      	nop
 8005c9c:	e000      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005c9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ca0:	7dfb      	ldrb	r3, [r7, #23]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10a      	bne.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ca6:	4b67      	ldr	r3, [pc, #412]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005caa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cb4:	4963      	ldr	r1, [pc, #396]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	658b      	str	r3, [r1, #88]	; 0x58
 8005cba:	e001      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cbc:	7dfb      	ldrb	r3, [r7, #23]
 8005cbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d044      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cd6:	d01b      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8005cd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cdc:	d805      	bhi.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d022      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ce6:	d00a      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005ce8:	e01b      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8005cea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cee:	d01d      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005cf0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005cf4:	d01c      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8005cf6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005cfa:	d01b      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005cfc:	e011      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	3304      	adds	r3, #4
 8005d02:	2100      	movs	r1, #0
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 fc57 	bl	80065b8 <RCCEx_PLL2_Config>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005d0e:	e012      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	3324      	adds	r3, #36	; 0x24
 8005d14:	2102      	movs	r1, #2
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 fd00 	bl	800671c <RCCEx_PLL3_Config>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005d20:	e009      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	75fb      	strb	r3, [r7, #23]
      break;
 8005d26:	e006      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005d28:	bf00      	nop
 8005d2a:	e004      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005d2c:	bf00      	nop
 8005d2e:	e002      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005d30:	bf00      	nop
 8005d32:	e000      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005d34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d36:	7dfb      	ldrb	r3, [r7, #23]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10a      	bne.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005d3c:	4b41      	ldr	r3, [pc, #260]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d40:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d4a:	493e      	ldr	r1, [pc, #248]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	658b      	str	r3, [r1, #88]	; 0x58
 8005d50:	e001      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d52:	7dfb      	ldrb	r3, [r7, #23]
 8005d54:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0308 	and.w	r3, r3, #8
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d01a      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d6c:	d10a      	bne.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	3324      	adds	r3, #36	; 0x24
 8005d72:	2102      	movs	r1, #2
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 fcd1 	bl	800671c <RCCEx_PLL3_Config>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005d84:	4b2f      	ldr	r3, [pc, #188]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d92:	492c      	ldr	r1, [pc, #176]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0310 	and.w	r3, r3, #16
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d01a      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dae:	d10a      	bne.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	3324      	adds	r3, #36	; 0x24
 8005db4:	2102      	movs	r1, #2
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 fcb0 	bl	800671c <RCCEx_PLL3_Config>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005dc6:	4b1f      	ldr	r3, [pc, #124]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dd4:	491b      	ldr	r1, [pc, #108]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d032      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df0:	d00d      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8005df2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005df6:	d016      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d111      	bne.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	3304      	adds	r3, #4
 8005e00:	2100      	movs	r1, #0
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 fbd8 	bl	80065b8 <RCCEx_PLL2_Config>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005e0c:	e00c      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	3324      	adds	r3, #36	; 0x24
 8005e12:	2102      	movs	r1, #2
 8005e14:	4618      	mov	r0, r3
 8005e16:	f000 fc81 	bl	800671c <RCCEx_PLL3_Config>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005e1e:	e003      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	75fb      	strb	r3, [r7, #23]
      break;
 8005e24:	e000      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8005e26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e28:	7dfb      	ldrb	r3, [r7, #23]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10c      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e2e:	4b05      	ldr	r3, [pc, #20]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e3c:	4901      	ldr	r1, [pc, #4]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	658b      	str	r3, [r1, #88]	; 0x58
 8005e42:	e003      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005e44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e48:	7dfb      	ldrb	r3, [r7, #23]
 8005e4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d02f      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e62:	d00c      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005e64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e68:	d015      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8005e6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e6e:	d10f      	bne.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e70:	4b79      	ldr	r3, [pc, #484]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	4a78      	ldr	r2, [pc, #480]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005e7c:	e00c      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	3324      	adds	r3, #36	; 0x24
 8005e82:	2101      	movs	r1, #1
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 fc49 	bl	800671c <RCCEx_PLL3_Config>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005e8e:	e003      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	75fb      	strb	r3, [r7, #23]
      break;
 8005e94:	e000      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8005e96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e98:	7dfb      	ldrb	r3, [r7, #23]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10a      	bne.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e9e:	4b6e      	ldr	r3, [pc, #440]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eac:	496a      	ldr	r1, [pc, #424]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	654b      	str	r3, [r1, #84]	; 0x54
 8005eb2:	e001      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb4:	7dfb      	ldrb	r3, [r7, #23]
 8005eb6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d029      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ed0:	d007      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8005ed2:	e00f      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ed4:	4b60      	ldr	r3, [pc, #384]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed8:	4a5f      	ldr	r2, [pc, #380]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ede:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005ee0:	e00b      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	3304      	adds	r3, #4
 8005ee6:	2102      	movs	r1, #2
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f000 fb65 	bl	80065b8 <RCCEx_PLL2_Config>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005ef2:	e002      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005efa:	7dfb      	ldrb	r3, [r7, #23]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d109      	bne.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005f00:	4b55      	ldr	r3, [pc, #340]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f0c:	4952      	ldr	r1, [pc, #328]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005f12:	e001      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f14:	7dfb      	ldrb	r3, [r7, #23]
 8005f16:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00a      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	3324      	adds	r3, #36	; 0x24
 8005f28:	2102      	movs	r1, #2
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 fbf6 	bl	800671c <RCCEx_PLL3_Config>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d02f      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f4e:	d00c      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f54:	d802      	bhi.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d011      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8005f5a:	e00d      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f60:	d00f      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8005f62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f66:	d00e      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005f68:	e006      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f6a:	4b3b      	ldr	r3, [pc, #236]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6e:	4a3a      	ldr	r2, [pc, #232]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005f76:	e007      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f7c:	e004      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005f7e:	bf00      	nop
 8005f80:	e002      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005f82:	bf00      	nop
 8005f84:	e000      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005f86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f88:	7dfb      	ldrb	r3, [r7, #23]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d109      	bne.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f8e:	4b32      	ldr	r3, [pc, #200]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f9a:	492f      	ldr	r1, [pc, #188]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	654b      	str	r3, [r1, #84]	; 0x54
 8005fa0:	e001      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa2:	7dfb      	ldrb	r3, [r7, #23]
 8005fa4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d008      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005fb2:	4b29      	ldr	r3, [pc, #164]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fb6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fbe:	4926      	ldr	r1, [pc, #152]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d009      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005fd0:	4b21      	ldr	r3, [pc, #132]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005fde:	491e      	ldr	r1, [pc, #120]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d008      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ff0:	4b19      	ldr	r3, [pc, #100]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ff4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ffc:	4916      	ldr	r1, [pc, #88]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00d      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800600e:	4b12      	ldr	r3, [pc, #72]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	4a11      	ldr	r2, [pc, #68]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006014:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006018:	6113      	str	r3, [r2, #16]
 800601a:	4b0f      	ldr	r3, [pc, #60]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800601c:	691a      	ldr	r2, [r3, #16]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006024:	490c      	ldr	r1, [pc, #48]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006026:	4313      	orrs	r3, r2
 8006028:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	da08      	bge.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006032:	4b09      	ldr	r3, [pc, #36]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006036:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800603e:	4906      	ldr	r1, [pc, #24]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006040:	4313      	orrs	r3, r2
 8006042:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8006044:	7dbb      	ldrb	r3, [r7, #22]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	e000      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
}
 8006050:	4618      	mov	r0, r3
 8006052:	3718      	adds	r7, #24
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	58024400 	.word	0x58024400

0800605c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006060:	f7ff f8b2 	bl	80051c8 <HAL_RCC_GetHCLKFreq>
 8006064:	4601      	mov	r1, r0
 8006066:	4b06      	ldr	r3, [pc, #24]	; (8006080 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	091b      	lsrs	r3, r3, #4
 800606c:	f003 0307 	and.w	r3, r3, #7
 8006070:	4a04      	ldr	r2, [pc, #16]	; (8006084 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006072:	5cd3      	ldrb	r3, [r2, r3]
 8006074:	f003 031f 	and.w	r3, r3, #31
 8006078:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800607c:	4618      	mov	r0, r3
 800607e:	bd80      	pop	{r7, pc}
 8006080:	58024400 	.word	0x58024400
 8006084:	0800cf14 	.word	0x0800cf14

08006088 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006088:	b480      	push	{r7}
 800608a:	b089      	sub	sp, #36	; 0x24
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006090:	4b9d      	ldr	r3, [pc, #628]	; (8006308 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006094:	f003 0303 	and.w	r3, r3, #3
 8006098:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800609a:	4b9b      	ldr	r3, [pc, #620]	; (8006308 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800609c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609e:	0b1b      	lsrs	r3, r3, #12
 80060a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80060a6:	4b98      	ldr	r3, [pc, #608]	; (8006308 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80060a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060aa:	091b      	lsrs	r3, r3, #4
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80060b2:	4b95      	ldr	r3, [pc, #596]	; (8006308 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80060b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b6:	08db      	lsrs	r3, r3, #3
 80060b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	fb02 f303 	mul.w	r3, r2, r3
 80060c2:	ee07 3a90 	vmov	s15, r3
 80060c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 810a 	beq.w	80062ea <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d05a      	beq.n	8006192 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d302      	bcc.n	80060e6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d078      	beq.n	80061d6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80060e4:	e099      	b.n	800621a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060e6:	4b88      	ldr	r3, [pc, #544]	; (8006308 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0320 	and.w	r3, r3, #32
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d02d      	beq.n	800614e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80060f2:	4b85      	ldr	r3, [pc, #532]	; (8006308 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	08db      	lsrs	r3, r3, #3
 80060f8:	f003 0303 	and.w	r3, r3, #3
 80060fc:	4a83      	ldr	r2, [pc, #524]	; (800630c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80060fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006102:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	ee07 3a90 	vmov	s15, r3
 800610a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	ee07 3a90 	vmov	s15, r3
 8006114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006118:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800611c:	4b7a      	ldr	r3, [pc, #488]	; (8006308 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800611e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006124:	ee07 3a90 	vmov	s15, r3
 8006128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800612c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006130:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006310 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006134:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006138:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800613c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006140:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006148:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800614c:	e087      	b.n	800625e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	ee07 3a90 	vmov	s15, r3
 8006154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006158:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006314 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800615c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006160:	4b69      	ldr	r3, [pc, #420]	; (8006308 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006168:	ee07 3a90 	vmov	s15, r3
 800616c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006170:	ed97 6a03 	vldr	s12, [r7, #12]
 8006174:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006310 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006178:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800617c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006180:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006184:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800618c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006190:	e065      	b.n	800625e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	ee07 3a90 	vmov	s15, r3
 8006198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800619c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80061a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061a4:	4b58      	ldr	r3, [pc, #352]	; (8006308 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80061a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ac:	ee07 3a90 	vmov	s15, r3
 80061b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80061b8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006310 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80061bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061d4:	e043      	b.n	800625e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	ee07 3a90 	vmov	s15, r3
 80061dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061e0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800631c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80061e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061e8:	4b47      	ldr	r3, [pc, #284]	; (8006308 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80061ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061f0:	ee07 3a90 	vmov	s15, r3
 80061f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80061fc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006310 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006200:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006204:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006208:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800620c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006214:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006218:	e021      	b.n	800625e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	ee07 3a90 	vmov	s15, r3
 8006220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006224:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006228:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800622c:	4b36      	ldr	r3, [pc, #216]	; (8006308 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800622e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006234:	ee07 3a90 	vmov	s15, r3
 8006238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800623c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006240:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006310 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006244:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006248:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800624c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006250:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006258:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800625c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800625e:	4b2a      	ldr	r3, [pc, #168]	; (8006308 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006262:	0a5b      	lsrs	r3, r3, #9
 8006264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006268:	ee07 3a90 	vmov	s15, r3
 800626c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006270:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006274:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006278:	edd7 6a07 	vldr	s13, [r7, #28]
 800627c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006284:	ee17 2a90 	vmov	r2, s15
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800628c:	4b1e      	ldr	r3, [pc, #120]	; (8006308 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800628e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006290:	0c1b      	lsrs	r3, r3, #16
 8006292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006296:	ee07 3a90 	vmov	s15, r3
 800629a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800629e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80062aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062b2:	ee17 2a90 	vmov	r2, s15
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80062ba:	4b13      	ldr	r3, [pc, #76]	; (8006308 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80062bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062be:	0e1b      	lsrs	r3, r3, #24
 80062c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062c4:	ee07 3a90 	vmov	s15, r3
 80062c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80062d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062e0:	ee17 2a90 	vmov	r2, s15
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80062e8:	e008      	b.n	80062fc <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	609a      	str	r2, [r3, #8]
}
 80062fc:	bf00      	nop
 80062fe:	3724      	adds	r7, #36	; 0x24
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	58024400 	.word	0x58024400
 800630c:	03d09000 	.word	0x03d09000
 8006310:	46000000 	.word	0x46000000
 8006314:	4c742400 	.word	0x4c742400
 8006318:	4a742400 	.word	0x4a742400
 800631c:	4af42400 	.word	0x4af42400

08006320 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006320:	b480      	push	{r7}
 8006322:	b089      	sub	sp, #36	; 0x24
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006328:	4b9d      	ldr	r3, [pc, #628]	; (80065a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800632a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632c:	f003 0303 	and.w	r3, r3, #3
 8006330:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006332:	4b9b      	ldr	r3, [pc, #620]	; (80065a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006336:	0d1b      	lsrs	r3, r3, #20
 8006338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800633c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800633e:	4b98      	ldr	r3, [pc, #608]	; (80065a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006342:	0a1b      	lsrs	r3, r3, #8
 8006344:	f003 0301 	and.w	r3, r3, #1
 8006348:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800634a:	4b95      	ldr	r3, [pc, #596]	; (80065a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800634c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800634e:	08db      	lsrs	r3, r3, #3
 8006350:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	fb02 f303 	mul.w	r3, r2, r3
 800635a:	ee07 3a90 	vmov	s15, r3
 800635e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006362:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 810a 	beq.w	8006582 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d05a      	beq.n	800642a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8006374:	2b01      	cmp	r3, #1
 8006376:	d302      	bcc.n	800637e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8006378:	2b02      	cmp	r3, #2
 800637a:	d078      	beq.n	800646e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800637c:	e099      	b.n	80064b2 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800637e:	4b88      	ldr	r3, [pc, #544]	; (80065a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0320 	and.w	r3, r3, #32
 8006386:	2b00      	cmp	r3, #0
 8006388:	d02d      	beq.n	80063e6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800638a:	4b85      	ldr	r3, [pc, #532]	; (80065a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	08db      	lsrs	r3, r3, #3
 8006390:	f003 0303 	and.w	r3, r3, #3
 8006394:	4a83      	ldr	r2, [pc, #524]	; (80065a4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8006396:	fa22 f303 	lsr.w	r3, r2, r3
 800639a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	ee07 3a90 	vmov	s15, r3
 80063a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	ee07 3a90 	vmov	s15, r3
 80063ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063b4:	4b7a      	ldr	r3, [pc, #488]	; (80065a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80063b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063bc:	ee07 3a90 	vmov	s15, r3
 80063c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80063c8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80065a8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80063cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063e0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80063e4:	e087      	b.n	80064f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	ee07 3a90 	vmov	s15, r3
 80063ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063f0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80065ac <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80063f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063f8:	4b69      	ldr	r3, [pc, #420]	; (80065a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80063fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006400:	ee07 3a90 	vmov	s15, r3
 8006404:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006408:	ed97 6a03 	vldr	s12, [r7, #12]
 800640c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80065a8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006410:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006414:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006418:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800641c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006424:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006428:	e065      	b.n	80064f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	ee07 3a90 	vmov	s15, r3
 8006430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006434:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80065b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006438:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800643c:	4b58      	ldr	r3, [pc, #352]	; (80065a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800643e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006444:	ee07 3a90 	vmov	s15, r3
 8006448:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800644c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006450:	eddf 5a55 	vldr	s11, [pc, #340]	; 80065a8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006454:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006458:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800645c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006460:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006468:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800646c:	e043      	b.n	80064f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	ee07 3a90 	vmov	s15, r3
 8006474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006478:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80065b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800647c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006480:	4b47      	ldr	r3, [pc, #284]	; (80065a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006488:	ee07 3a90 	vmov	s15, r3
 800648c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006490:	ed97 6a03 	vldr	s12, [r7, #12]
 8006494:	eddf 5a44 	vldr	s11, [pc, #272]	; 80065a8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006498:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800649c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064b0:	e021      	b.n	80064f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	ee07 3a90 	vmov	s15, r3
 80064b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064bc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80065b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80064c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064c4:	4b36      	ldr	r3, [pc, #216]	; (80065a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80064c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064cc:	ee07 3a90 	vmov	s15, r3
 80064d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80064d8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80065a8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80064dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064f4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80064f6:	4b2a      	ldr	r3, [pc, #168]	; (80065a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80064f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fa:	0a5b      	lsrs	r3, r3, #9
 80064fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006500:	ee07 3a90 	vmov	s15, r3
 8006504:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006508:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800650c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006510:	edd7 6a07 	vldr	s13, [r7, #28]
 8006514:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800651c:	ee17 2a90 	vmov	r2, s15
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006524:	4b1e      	ldr	r3, [pc, #120]	; (80065a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006528:	0c1b      	lsrs	r3, r3, #16
 800652a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800652e:	ee07 3a90 	vmov	s15, r3
 8006532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006536:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800653a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800653e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006546:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800654a:	ee17 2a90 	vmov	r2, s15
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006552:	4b13      	ldr	r3, [pc, #76]	; (80065a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006556:	0e1b      	lsrs	r3, r3, #24
 8006558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800655c:	ee07 3a90 	vmov	s15, r3
 8006560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006564:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006568:	ee37 7a87 	vadd.f32	s14, s15, s14
 800656c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006570:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006578:	ee17 2a90 	vmov	r2, s15
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006580:	e008      	b.n	8006594 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	609a      	str	r2, [r3, #8]
}
 8006594:	bf00      	nop
 8006596:	3724      	adds	r7, #36	; 0x24
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr
 80065a0:	58024400 	.word	0x58024400
 80065a4:	03d09000 	.word	0x03d09000
 80065a8:	46000000 	.word	0x46000000
 80065ac:	4c742400 	.word	0x4c742400
 80065b0:	4a742400 	.word	0x4a742400
 80065b4:	4af42400 	.word	0x4af42400

080065b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80065c6:	4b53      	ldr	r3, [pc, #332]	; (8006714 <RCCEx_PLL2_Config+0x15c>)
 80065c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ca:	f003 0303 	and.w	r3, r3, #3
 80065ce:	2b03      	cmp	r3, #3
 80065d0:	d101      	bne.n	80065d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e099      	b.n	800670a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80065d6:	4b4f      	ldr	r3, [pc, #316]	; (8006714 <RCCEx_PLL2_Config+0x15c>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a4e      	ldr	r2, [pc, #312]	; (8006714 <RCCEx_PLL2_Config+0x15c>)
 80065dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80065e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065e2:	f7fb f843 	bl	800166c <HAL_GetTick>
 80065e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80065e8:	e008      	b.n	80065fc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80065ea:	f7fb f83f 	bl	800166c <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d901      	bls.n	80065fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e086      	b.n	800670a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80065fc:	4b45      	ldr	r3, [pc, #276]	; (8006714 <RCCEx_PLL2_Config+0x15c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1f0      	bne.n	80065ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006608:	4b42      	ldr	r3, [pc, #264]	; (8006714 <RCCEx_PLL2_Config+0x15c>)
 800660a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	031b      	lsls	r3, r3, #12
 8006616:	493f      	ldr	r1, [pc, #252]	; (8006714 <RCCEx_PLL2_Config+0x15c>)
 8006618:	4313      	orrs	r3, r2
 800661a:	628b      	str	r3, [r1, #40]	; 0x28
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	3b01      	subs	r3, #1
 8006622:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	3b01      	subs	r3, #1
 800662c:	025b      	lsls	r3, r3, #9
 800662e:	b29b      	uxth	r3, r3
 8006630:	431a      	orrs	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	3b01      	subs	r3, #1
 8006638:	041b      	lsls	r3, r3, #16
 800663a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800663e:	431a      	orrs	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	3b01      	subs	r3, #1
 8006646:	061b      	lsls	r3, r3, #24
 8006648:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800664c:	4931      	ldr	r1, [pc, #196]	; (8006714 <RCCEx_PLL2_Config+0x15c>)
 800664e:	4313      	orrs	r3, r2
 8006650:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006652:	4b30      	ldr	r3, [pc, #192]	; (8006714 <RCCEx_PLL2_Config+0x15c>)
 8006654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006656:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	492d      	ldr	r1, [pc, #180]	; (8006714 <RCCEx_PLL2_Config+0x15c>)
 8006660:	4313      	orrs	r3, r2
 8006662:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006664:	4b2b      	ldr	r3, [pc, #172]	; (8006714 <RCCEx_PLL2_Config+0x15c>)
 8006666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006668:	f023 0220 	bic.w	r2, r3, #32
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	4928      	ldr	r1, [pc, #160]	; (8006714 <RCCEx_PLL2_Config+0x15c>)
 8006672:	4313      	orrs	r3, r2
 8006674:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006676:	4b27      	ldr	r3, [pc, #156]	; (8006714 <RCCEx_PLL2_Config+0x15c>)
 8006678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667a:	4a26      	ldr	r2, [pc, #152]	; (8006714 <RCCEx_PLL2_Config+0x15c>)
 800667c:	f023 0310 	bic.w	r3, r3, #16
 8006680:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006682:	4b24      	ldr	r3, [pc, #144]	; (8006714 <RCCEx_PLL2_Config+0x15c>)
 8006684:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006686:	4b24      	ldr	r3, [pc, #144]	; (8006718 <RCCEx_PLL2_Config+0x160>)
 8006688:	4013      	ands	r3, r2
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	69d2      	ldr	r2, [r2, #28]
 800668e:	00d2      	lsls	r2, r2, #3
 8006690:	4920      	ldr	r1, [pc, #128]	; (8006714 <RCCEx_PLL2_Config+0x15c>)
 8006692:	4313      	orrs	r3, r2
 8006694:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006696:	4b1f      	ldr	r3, [pc, #124]	; (8006714 <RCCEx_PLL2_Config+0x15c>)
 8006698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669a:	4a1e      	ldr	r2, [pc, #120]	; (8006714 <RCCEx_PLL2_Config+0x15c>)
 800669c:	f043 0310 	orr.w	r3, r3, #16
 80066a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d106      	bne.n	80066b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80066a8:	4b1a      	ldr	r3, [pc, #104]	; (8006714 <RCCEx_PLL2_Config+0x15c>)
 80066aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ac:	4a19      	ldr	r2, [pc, #100]	; (8006714 <RCCEx_PLL2_Config+0x15c>)
 80066ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80066b4:	e00f      	b.n	80066d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d106      	bne.n	80066ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80066bc:	4b15      	ldr	r3, [pc, #84]	; (8006714 <RCCEx_PLL2_Config+0x15c>)
 80066be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c0:	4a14      	ldr	r2, [pc, #80]	; (8006714 <RCCEx_PLL2_Config+0x15c>)
 80066c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80066c8:	e005      	b.n	80066d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80066ca:	4b12      	ldr	r3, [pc, #72]	; (8006714 <RCCEx_PLL2_Config+0x15c>)
 80066cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ce:	4a11      	ldr	r2, [pc, #68]	; (8006714 <RCCEx_PLL2_Config+0x15c>)
 80066d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80066d6:	4b0f      	ldr	r3, [pc, #60]	; (8006714 <RCCEx_PLL2_Config+0x15c>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a0e      	ldr	r2, [pc, #56]	; (8006714 <RCCEx_PLL2_Config+0x15c>)
 80066dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066e2:	f7fa ffc3 	bl	800166c <HAL_GetTick>
 80066e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80066e8:	e008      	b.n	80066fc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80066ea:	f7fa ffbf 	bl	800166c <HAL_GetTick>
 80066ee:	4602      	mov	r2, r0
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d901      	bls.n	80066fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e006      	b.n	800670a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80066fc:	4b05      	ldr	r3, [pc, #20]	; (8006714 <RCCEx_PLL2_Config+0x15c>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d0f0      	beq.n	80066ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006708:	7bfb      	ldrb	r3, [r7, #15]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	58024400 	.word	0x58024400
 8006718:	ffff0007 	.word	0xffff0007

0800671c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006726:	2300      	movs	r3, #0
 8006728:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800672a:	4b53      	ldr	r3, [pc, #332]	; (8006878 <RCCEx_PLL3_Config+0x15c>)
 800672c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672e:	f003 0303 	and.w	r3, r3, #3
 8006732:	2b03      	cmp	r3, #3
 8006734:	d101      	bne.n	800673a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e099      	b.n	800686e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800673a:	4b4f      	ldr	r3, [pc, #316]	; (8006878 <RCCEx_PLL3_Config+0x15c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a4e      	ldr	r2, [pc, #312]	; (8006878 <RCCEx_PLL3_Config+0x15c>)
 8006740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006744:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006746:	f7fa ff91 	bl	800166c <HAL_GetTick>
 800674a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800674c:	e008      	b.n	8006760 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800674e:	f7fa ff8d 	bl	800166c <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	2b02      	cmp	r3, #2
 800675a:	d901      	bls.n	8006760 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e086      	b.n	800686e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006760:	4b45      	ldr	r3, [pc, #276]	; (8006878 <RCCEx_PLL3_Config+0x15c>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1f0      	bne.n	800674e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800676c:	4b42      	ldr	r3, [pc, #264]	; (8006878 <RCCEx_PLL3_Config+0x15c>)
 800676e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006770:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	051b      	lsls	r3, r3, #20
 800677a:	493f      	ldr	r1, [pc, #252]	; (8006878 <RCCEx_PLL3_Config+0x15c>)
 800677c:	4313      	orrs	r3, r2
 800677e:	628b      	str	r3, [r1, #40]	; 0x28
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	3b01      	subs	r3, #1
 8006786:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	3b01      	subs	r3, #1
 8006790:	025b      	lsls	r3, r3, #9
 8006792:	b29b      	uxth	r3, r3
 8006794:	431a      	orrs	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	3b01      	subs	r3, #1
 800679c:	041b      	lsls	r3, r3, #16
 800679e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80067a2:	431a      	orrs	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	3b01      	subs	r3, #1
 80067aa:	061b      	lsls	r3, r3, #24
 80067ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80067b0:	4931      	ldr	r1, [pc, #196]	; (8006878 <RCCEx_PLL3_Config+0x15c>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80067b6:	4b30      	ldr	r3, [pc, #192]	; (8006878 <RCCEx_PLL3_Config+0x15c>)
 80067b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	492d      	ldr	r1, [pc, #180]	; (8006878 <RCCEx_PLL3_Config+0x15c>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80067c8:	4b2b      	ldr	r3, [pc, #172]	; (8006878 <RCCEx_PLL3_Config+0x15c>)
 80067ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	4928      	ldr	r1, [pc, #160]	; (8006878 <RCCEx_PLL3_Config+0x15c>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80067da:	4b27      	ldr	r3, [pc, #156]	; (8006878 <RCCEx_PLL3_Config+0x15c>)
 80067dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067de:	4a26      	ldr	r2, [pc, #152]	; (8006878 <RCCEx_PLL3_Config+0x15c>)
 80067e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80067e6:	4b24      	ldr	r3, [pc, #144]	; (8006878 <RCCEx_PLL3_Config+0x15c>)
 80067e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067ea:	4b24      	ldr	r3, [pc, #144]	; (800687c <RCCEx_PLL3_Config+0x160>)
 80067ec:	4013      	ands	r3, r2
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	69d2      	ldr	r2, [r2, #28]
 80067f2:	00d2      	lsls	r2, r2, #3
 80067f4:	4920      	ldr	r1, [pc, #128]	; (8006878 <RCCEx_PLL3_Config+0x15c>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80067fa:	4b1f      	ldr	r3, [pc, #124]	; (8006878 <RCCEx_PLL3_Config+0x15c>)
 80067fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fe:	4a1e      	ldr	r2, [pc, #120]	; (8006878 <RCCEx_PLL3_Config+0x15c>)
 8006800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006804:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d106      	bne.n	800681a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800680c:	4b1a      	ldr	r3, [pc, #104]	; (8006878 <RCCEx_PLL3_Config+0x15c>)
 800680e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006810:	4a19      	ldr	r2, [pc, #100]	; (8006878 <RCCEx_PLL3_Config+0x15c>)
 8006812:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006816:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006818:	e00f      	b.n	800683a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d106      	bne.n	800682e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006820:	4b15      	ldr	r3, [pc, #84]	; (8006878 <RCCEx_PLL3_Config+0x15c>)
 8006822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006824:	4a14      	ldr	r2, [pc, #80]	; (8006878 <RCCEx_PLL3_Config+0x15c>)
 8006826:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800682a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800682c:	e005      	b.n	800683a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800682e:	4b12      	ldr	r3, [pc, #72]	; (8006878 <RCCEx_PLL3_Config+0x15c>)
 8006830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006832:	4a11      	ldr	r2, [pc, #68]	; (8006878 <RCCEx_PLL3_Config+0x15c>)
 8006834:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006838:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800683a:	4b0f      	ldr	r3, [pc, #60]	; (8006878 <RCCEx_PLL3_Config+0x15c>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a0e      	ldr	r2, [pc, #56]	; (8006878 <RCCEx_PLL3_Config+0x15c>)
 8006840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006844:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006846:	f7fa ff11 	bl	800166c <HAL_GetTick>
 800684a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800684c:	e008      	b.n	8006860 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800684e:	f7fa ff0d 	bl	800166c <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	2b02      	cmp	r3, #2
 800685a:	d901      	bls.n	8006860 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e006      	b.n	800686e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006860:	4b05      	ldr	r3, [pc, #20]	; (8006878 <RCCEx_PLL3_Config+0x15c>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d0f0      	beq.n	800684e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800686c:	7bfb      	ldrb	r3, [r7, #15]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	58024400 	.word	0x58024400
 800687c:	ffff0007 	.word	0xffff0007

08006880 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8006888:	2300      	movs	r3, #0
 800688a:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e0e2      	b.n	8006a5c <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a70      	ldr	r2, [pc, #448]	; (8006a64 <HAL_SPI_Init+0x1e4>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d00f      	beq.n	80068c6 <HAL_SPI_Init+0x46>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a6f      	ldr	r2, [pc, #444]	; (8006a68 <HAL_SPI_Init+0x1e8>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d00a      	beq.n	80068c6 <HAL_SPI_Init+0x46>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a6d      	ldr	r2, [pc, #436]	; (8006a6c <HAL_SPI_Init+0x1ec>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d005      	beq.n	80068c6 <HAL_SPI_Init+0x46>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	2b0f      	cmp	r3, #15
 80068c0:	d901      	bls.n	80068c6 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e0ca      	b.n	8006a5c <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f001 f84a 	bl	8007960 <SPI_GetPacketSize>
 80068cc:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a64      	ldr	r2, [pc, #400]	; (8006a64 <HAL_SPI_Init+0x1e4>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d00c      	beq.n	80068f2 <HAL_SPI_Init+0x72>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a62      	ldr	r2, [pc, #392]	; (8006a68 <HAL_SPI_Init+0x1e8>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d007      	beq.n	80068f2 <HAL_SPI_Init+0x72>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a61      	ldr	r2, [pc, #388]	; (8006a6c <HAL_SPI_Init+0x1ec>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d002      	beq.n	80068f2 <HAL_SPI_Init+0x72>
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2b08      	cmp	r3, #8
 80068f0:	d811      	bhi.n	8006916 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80068f6:	4a5b      	ldr	r2, [pc, #364]	; (8006a64 <HAL_SPI_Init+0x1e4>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d009      	beq.n	8006910 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a59      	ldr	r2, [pc, #356]	; (8006a68 <HAL_SPI_Init+0x1e8>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d004      	beq.n	8006910 <HAL_SPI_Init+0x90>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a58      	ldr	r2, [pc, #352]	; (8006a6c <HAL_SPI_Init+0x1ec>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d104      	bne.n	800691a <HAL_SPI_Init+0x9a>
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2b10      	cmp	r3, #16
 8006914:	d901      	bls.n	800691a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e0a0      	b.n	8006a5c <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d106      	bne.n	8006934 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f7fa fc1a 	bl	8001168 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2202      	movs	r2, #2
 8006938:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 0201 	bic.w	r2, r2, #1
 800694a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006954:	d110      	bne.n	8006978 <HAL_SPI_Init+0xf8>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800695e:	d10b      	bne.n	8006978 <HAL_SPI_Init+0xf8>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006964:	2b00      	cmp	r3, #0
 8006966:	d107      	bne.n	8006978 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006976:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	69da      	ldr	r2, [r3, #28]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006980:	431a      	orrs	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	431a      	orrs	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800698a:	ea42 0103 	orr.w	r1, r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68da      	ldr	r2, [r3, #12]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a2:	431a      	orrs	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a8:	431a      	orrs	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	431a      	orrs	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	431a      	orrs	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	431a      	orrs	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	431a      	orrs	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	431a      	orrs	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069cc:	431a      	orrs	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	431a      	orrs	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069d8:	ea42 0103 	orr.w	r1, r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d113      	bne.n	8006a18 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a02:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a16:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f022 0201 	bic.w	r2, r2, #1
 8006a26:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00a      	beq.n	8006a4a <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	40013000 	.word	0x40013000
 8006a68:	40003800 	.word	0x40003800
 8006a6c:	40003c00 	.word	0x40003c00

08006a70 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08e      	sub	sp, #56	; 0x38
 8006a74:	af02      	add	r7, sp, #8
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
 8006a7c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3320      	adds	r3, #32
 8006a8a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3330      	adds	r3, #48	; 0x30
 8006a92:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d101      	bne.n	8006aa2 <HAL_SPI_TransmitReceive+0x32>
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	e2ce      	b.n	8007040 <HAL_SPI_TransmitReceive+0x5d0>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006aaa:	f7fa fddf 	bl	800166c <HAL_GetTick>
 8006aae:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8006ab0:	887b      	ldrh	r3, [r7, #2]
 8006ab2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8006ab4:	887b      	ldrh	r3, [r7, #2]
 8006ab6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006abe:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ac6:	7efb      	ldrb	r3, [r7, #27]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d014      	beq.n	8006af6 <HAL_SPI_TransmitReceive+0x86>
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ad2:	d106      	bne.n	8006ae2 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d102      	bne.n	8006ae2 <HAL_SPI_TransmitReceive+0x72>
 8006adc:	7efb      	ldrb	r3, [r7, #27]
 8006ade:	2b04      	cmp	r3, #4
 8006ae0:	d009      	beq.n	8006af6 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006af0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006af4:	e2a4      	b.n	8007040 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d005      	beq.n	8006b08 <HAL_SPI_TransmitReceive+0x98>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d002      	beq.n	8006b08 <HAL_SPI_TransmitReceive+0x98>
 8006b02:	887b      	ldrh	r3, [r7, #2]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d109      	bne.n	8006b1c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006b16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b1a:	e291      	b.n	8007040 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b04      	cmp	r3, #4
 8006b26:	d003      	beq.n	8006b30 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2205      	movs	r2, #5
 8006b2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	887a      	ldrh	r2, [r7, #2]
 8006b42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	887a      	ldrh	r2, [r7, #2]
 8006b4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	887a      	ldrh	r2, [r7, #2]
 8006b58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	887a      	ldrh	r2, [r7, #2]
 8006b60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	4b9f      	ldr	r3, [pc, #636]	; (8006df4 <HAL_SPI_TransmitReceive+0x384>)
 8006b78:	4013      	ands	r3, r2
 8006b7a:	8879      	ldrh	r1, [r7, #2]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	6812      	ldr	r2, [r2, #0]
 8006b80:	430b      	orrs	r3, r1
 8006b82:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f042 0201 	orr.w	r2, r2, #1
 8006b92:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b9c:	d107      	bne.n	8006bae <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	2b0f      	cmp	r3, #15
 8006bb4:	d970      	bls.n	8006c98 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006bb6:	e068      	b.n	8006c8a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d11a      	bne.n	8006bfc <HAL_SPI_TransmitReceive+0x18c>
 8006bc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d017      	beq.n	8006bfc <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6812      	ldr	r2, [r2, #0]
 8006bd6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bdc:	1d1a      	adds	r2, r3, #4
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	3b01      	subs	r3, #1
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006bfa:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	695a      	ldr	r2, [r3, #20]
 8006c02:	f248 0308 	movw	r3, #32776	; 0x8008
 8006c06:	4013      	ands	r3, r2
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d01a      	beq.n	8006c42 <HAL_SPI_TransmitReceive+0x1d2>
 8006c0c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d017      	beq.n	8006c42 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c1a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006c1c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c22:	1d1a      	adds	r2, r3, #4
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	3b01      	subs	r3, #1
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006c40:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c42:	f7fa fd13 	bl	800166c <HAL_GetTick>
 8006c46:	4602      	mov	r2, r0
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d803      	bhi.n	8006c5a <HAL_SPI_TransmitReceive+0x1ea>
 8006c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c58:	d102      	bne.n	8006c60 <HAL_SPI_TransmitReceive+0x1f0>
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d114      	bne.n	8006c8a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 fdaf 	bl	80077c4 <SPI_CloseTransfer>
      
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e1da      	b.n	8007040 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006c8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d193      	bne.n	8006bb8 <HAL_SPI_TransmitReceive+0x148>
 8006c90:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d190      	bne.n	8006bb8 <HAL_SPI_TransmitReceive+0x148>
 8006c96:	e1ac      	b.n	8006ff2 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	2b07      	cmp	r3, #7
 8006c9e:	f240 81a0 	bls.w	8006fe2 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006ca2:	e0a9      	b.n	8006df8 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	f003 0302 	and.w	r3, r3, #2
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d139      	bne.n	8006d26 <HAL_SPI_TransmitReceive+0x2b6>
 8006cb2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d036      	beq.n	8006d26 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006cb8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d91c      	bls.n	8006cf8 <HAL_SPI_TransmitReceive+0x288>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d018      	beq.n	8006cf8 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	6812      	ldr	r2, [r2, #0]
 8006cd0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd6:	1d1a      	adds	r2, r3, #4
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	3b02      	subs	r3, #2
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006cf4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006cf6:	e016      	b.n	8006d26 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cfc:	881a      	ldrh	r2, [r3, #0]
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d00:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d06:	1c9a      	adds	r2, r3, #2
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	3b01      	subs	r3, #1
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006d24:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d03a      	beq.n	8006daa <HAL_SPI_TransmitReceive+0x33a>
 8006d34:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d037      	beq.n	8006daa <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	695b      	ldr	r3, [r3, #20]
 8006d40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d018      	beq.n	8006d7a <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d50:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006d52:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d58:	1d1a      	adds	r2, r3, #4
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	3b02      	subs	r3, #2
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d76:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006d78:	e017      	b.n	8006daa <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d7e:	6a3a      	ldr	r2, [r7, #32]
 8006d80:	8812      	ldrh	r2, [r2, #0]
 8006d82:	b292      	uxth	r2, r2
 8006d84:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d8a:	1c9a      	adds	r2, r3, #2
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006da8:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006daa:	f7fa fc5f 	bl	800166c <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d803      	bhi.n	8006dc2 <HAL_SPI_TransmitReceive+0x352>
 8006dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc0:	d102      	bne.n	8006dc8 <HAL_SPI_TransmitReceive+0x358>
 8006dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d117      	bne.n	8006df8 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f000 fcfb 	bl	80077c4 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ddc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e126      	b.n	8007040 <HAL_SPI_TransmitReceive+0x5d0>
 8006df2:	bf00      	nop
 8006df4:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006df8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f47f af52 	bne.w	8006ca4 <HAL_SPI_TransmitReceive+0x234>
 8006e00:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f47f af4e 	bne.w	8006ca4 <HAL_SPI_TransmitReceive+0x234>
 8006e08:	e0f3      	b.n	8006ff2 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d15a      	bne.n	8006ece <HAL_SPI_TransmitReceive+0x45e>
 8006e18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d057      	beq.n	8006ece <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006e1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e20:	2b03      	cmp	r3, #3
 8006e22:	d91c      	bls.n	8006e5e <HAL_SPI_TransmitReceive+0x3ee>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e28:	2b40      	cmp	r3, #64	; 0x40
 8006e2a:	d918      	bls.n	8006e5e <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6812      	ldr	r2, [r2, #0]
 8006e36:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e3c:	1d1a      	adds	r2, r3, #4
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	3b04      	subs	r3, #4
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006e5a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006e5c:	e037      	b.n	8006ece <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006e5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d91b      	bls.n	8006e9c <HAL_SPI_TransmitReceive+0x42c>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d017      	beq.n	8006e9c <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e70:	881a      	ldrh	r2, [r3, #0]
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e7a:	1c9a      	adds	r2, r3, #2
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	3b02      	subs	r3, #2
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006e98:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006e9a:	e018      	b.n	8006ece <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	3320      	adds	r3, #32
 8006ea6:	7812      	ldrb	r2, [r2, #0]
 8006ea8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eae:	1c5a      	adds	r2, r3, #1
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006ecc:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	695b      	ldr	r3, [r3, #20]
 8006ed4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d05e      	beq.n	8006f9a <HAL_SPI_TransmitReceive+0x52a>
 8006edc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d05b      	beq.n	8006f9a <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	695b      	ldr	r3, [r3, #20]
 8006ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d018      	beq.n	8006f22 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ef8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006efa:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f00:	1d1a      	adds	r2, r3, #4
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	3b04      	subs	r3, #4
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006f1e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006f20:	e03b      	b.n	8006f9a <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8006f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f30:	d918      	bls.n	8006f64 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f36:	6a3a      	ldr	r2, [r7, #32]
 8006f38:	8812      	ldrh	r2, [r2, #0]
 8006f3a:	b292      	uxth	r2, r2
 8006f3c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f42:	1c9a      	adds	r2, r3, #2
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	3b02      	subs	r3, #2
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006f60:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006f62:	e01a      	b.n	8006f9a <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f70:	7812      	ldrb	r2, [r2, #0]
 8006f72:	b2d2      	uxtb	r2, r2
 8006f74:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f7a:	1c5a      	adds	r2, r3, #1
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006f98:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f9a:	f7fa fb67 	bl	800166c <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d803      	bhi.n	8006fb2 <HAL_SPI_TransmitReceive+0x542>
 8006faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb0:	d102      	bne.n	8006fb8 <HAL_SPI_TransmitReceive+0x548>
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d114      	bne.n	8006fe2 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f000 fc03 	bl	80077c4 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fcc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e02e      	b.n	8007040 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006fe2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f47f af10 	bne.w	8006e0a <HAL_SPI_TransmitReceive+0x39a>
 8006fea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f47f af0c 	bne.w	8006e0a <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8006ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	2108      	movs	r1, #8
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f000 fc81 	bl	8007904 <SPI_WaitOnFlagUntilTimeout>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d007      	beq.n	8007018 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800700e:	f043 0220 	orr.w	r2, r3, #32
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 fbd3 	bl	80077c4 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007034:	2b00      	cmp	r3, #0
 8007036:	d001      	beq.n	800703c <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e001      	b.n	8007040 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800703c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007040:	4618      	mov	r0, r3
 8007042:	3730      	adds	r7, #48	; 0x30
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	4613      	mov	r3, r2
 8007054:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007056:	2300      	movs	r3, #0
 8007058:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007060:	2b01      	cmp	r3, #1
 8007062:	d101      	bne.n	8007068 <HAL_SPI_Transmit_DMA+0x20>
 8007064:	2302      	movs	r3, #2
 8007066:	e128      	b.n	80072ba <HAL_SPI_Transmit_DMA+0x272>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b01      	cmp	r3, #1
 800707a:	d007      	beq.n	800708c <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 800707c:	2302      	movs	r3, #2
 800707e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007088:	7dfb      	ldrb	r3, [r7, #23]
 800708a:	e116      	b.n	80072ba <HAL_SPI_Transmit_DMA+0x272>
  }

  if ((pData == NULL) || (Size == 0UL))
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d002      	beq.n	8007098 <HAL_SPI_Transmit_DMA+0x50>
 8007092:	88fb      	ldrh	r3, [r7, #6]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d107      	bne.n	80070a8 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80070a4:	7dfb      	ldrb	r3, [r7, #23]
 80070a6:	e108      	b.n	80072ba <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2203      	movs	r2, #3
 80070ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	88fa      	ldrh	r2, [r7, #6]
 80070c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	88fa      	ldrh	r2, [r7, #6]
 80070ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80070f8:	d107      	bne.n	800710a <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007108:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	2b0f      	cmp	r3, #15
 8007110:	d905      	bls.n	800711e <HAL_SPI_Transmit_DMA+0xd6>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800711c:	d10f      	bne.n	800713e <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007122:	2b07      	cmp	r3, #7
 8007124:	d913      	bls.n	800714e <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007130:	d00d      	beq.n	800714e <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007136:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007138:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800713c:	d007      	beq.n	800714e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800714a:	7dfb      	ldrb	r3, [r7, #23]
 800714c:	e0b5      	b.n	80072ba <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	2b07      	cmp	r3, #7
 8007154:	d820      	bhi.n	8007198 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007160:	d109      	bne.n	8007176 <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007168:	b29b      	uxth	r3, r3
 800716a:	3301      	adds	r3, #1
 800716c:	105b      	asrs	r3, r3, #1
 800716e:	b29a      	uxth	r2, r3
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007180:	d11e      	bne.n	80071c0 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007188:	b29b      	uxth	r3, r3
 800718a:	3303      	adds	r3, #3
 800718c:	109b      	asrs	r3, r3, #2
 800718e:	b29a      	uxth	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007196:	e013      	b.n	80071c0 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	2b0f      	cmp	r3, #15
 800719e:	d80f      	bhi.n	80071c0 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071aa:	d109      	bne.n	80071c0 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	3301      	adds	r3, #1
 80071b6:	105b      	asrs	r3, r3, #1
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071c4:	4a3f      	ldr	r2, [pc, #252]	; (80072c4 <HAL_SPI_Transmit_DMA+0x27c>)
 80071c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071cc:	4a3e      	ldr	r2, [pc, #248]	; (80072c8 <HAL_SPI_Transmit_DMA+0x280>)
 80071ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071d4:	4a3d      	ldr	r2, [pc, #244]	; (80072cc <HAL_SPI_Transmit_DMA+0x284>)
 80071d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071dc:	2200      	movs	r2, #0
 80071de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	689a      	ldr	r2, [r3, #8]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071ee:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071f8:	4619      	mov	r1, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3320      	adds	r3, #32
 8007200:	461a      	mov	r2, r3
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007208:	b29b      	uxth	r3, r3
 800720a:	f7fa fed5 	bl	8001fb8 <HAL_DMA_Start_IT>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00f      	beq.n	8007234 <HAL_SPI_Transmit_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800721a:	f043 0210 	orr.w	r2, r3, #16
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 8007230:	7dfb      	ldrb	r3, [r7, #23]
 8007232:	e042      	b.n	80072ba <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800723e:	d108      	bne.n	8007252 <HAL_SPI_Transmit_DMA+0x20a>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6859      	ldr	r1, [r3, #4]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	4b21      	ldr	r3, [pc, #132]	; (80072d0 <HAL_SPI_Transmit_DMA+0x288>)
 800724c:	400b      	ands	r3, r1
 800724e:	6053      	str	r3, [r2, #4]
 8007250:	e009      	b.n	8007266 <HAL_SPI_Transmit_DMA+0x21e>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	4b1d      	ldr	r3, [pc, #116]	; (80072d0 <HAL_SPI_Transmit_DMA+0x288>)
 800725a:	4013      	ands	r3, r2
 800725c:	88f9      	ldrh	r1, [r7, #6]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	6812      	ldr	r2, [r2, #0]
 8007262:	430b      	orrs	r3, r1
 8007264:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	689a      	ldr	r2, [r3, #8]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007274:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	691a      	ldr	r2, [r3, #16]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 8007284:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f042 0201 	orr.w	r2, r2, #1
 8007294:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800729e:	d107      	bne.n	80072b0 <HAL_SPI_Transmit_DMA+0x268>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072ae:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 80072b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3718      	adds	r7, #24
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	0800772f 	.word	0x0800772f
 80072c8:	080076e9 	.word	0x080076e9
 80072cc:	0800774b 	.word	0x0800774b
 80072d0:	ffff0000 	.word	0xffff0000

080072d4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b08a      	sub	sp, #40	; 0x28
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80072ec:	6a3a      	ldr	r2, [r7, #32]
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	4013      	ands	r3, r2
 80072f2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80072fc:	2300      	movs	r3, #0
 80072fe:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007306:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	3330      	adds	r3, #48	; 0x30
 800730e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007316:	2b00      	cmp	r3, #0
 8007318:	d113      	bne.n	8007342 <HAL_SPI_IRQHandler+0x6e>
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	f003 0320 	and.w	r3, r3, #32
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10e      	bne.n	8007342 <HAL_SPI_IRQHandler+0x6e>
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	f003 0304 	and.w	r3, r3, #4
 800732a:	2b00      	cmp	r3, #0
 800732c:	d009      	beq.n	8007342 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	4798      	blx	r3
    handled = 1UL;
 800733e:	2301      	movs	r3, #1
 8007340:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10f      	bne.n	800736c <HAL_SPI_IRQHandler+0x98>
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00a      	beq.n	800736c <HAL_SPI_IRQHandler+0x98>
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	f003 0304 	and.w	r3, r3, #4
 800735c:	2b00      	cmp	r3, #0
 800735e:	d105      	bne.n	800736c <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	4798      	blx	r3
    handled = 1UL;
 8007368:	2301      	movs	r3, #1
 800736a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	f003 0320 	and.w	r3, r3, #32
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10f      	bne.n	8007396 <HAL_SPI_IRQHandler+0xc2>
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	f003 0302 	and.w	r3, r3, #2
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00a      	beq.n	8007396 <HAL_SPI_IRQHandler+0xc2>
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	f003 0304 	and.w	r3, r3, #4
 8007386:	2b00      	cmp	r3, #0
 8007388:	d105      	bne.n	8007396 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	4798      	blx	r3
    handled = 1UL;
 8007392:	2301      	movs	r3, #1
 8007394:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	2b00      	cmp	r3, #0
 800739a:	f040 8170 	bne.w	800767e <HAL_SPI_IRQHandler+0x3aa>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	f003 0308 	and.w	r3, r3, #8
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 80a0 	beq.w	80074ea <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	699a      	ldr	r2, [r3, #24]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f042 0208 	orr.w	r2, r2, #8
 80073b8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	699a      	ldr	r2, [r3, #24]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f042 0210 	orr.w	r2, r2, #16
 80073c8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	699a      	ldr	r2, [r3, #24]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073d8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	691a      	ldr	r2, [r3, #16]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f022 0208 	bic.w	r2, r2, #8
 80073e8:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00f      	beq.n	8007414 <HAL_SPI_IRQHandler+0x140>
 80073f4:	7cfb      	ldrb	r3, [r7, #19]
 80073f6:	2b04      	cmp	r3, #4
 80073f8:	d004      	beq.n	8007404 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073fe:	69db      	ldr	r3, [r3, #28]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d007      	beq.n	8007414 <HAL_SPI_IRQHandler+0x140>
 8007404:	7cfb      	ldrb	r3, [r7, #19]
 8007406:	2b03      	cmp	r3, #3
 8007408:	d059      	beq.n	80074be <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d154      	bne.n	80074be <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d13d      	bne.n	800749e <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8007422:	e036      	b.n	8007492 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	2b0f      	cmp	r3, #15
 800742a:	d90b      	bls.n	8007444 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007434:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007436:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800743c:	1d1a      	adds	r2, r3, #4
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	665a      	str	r2, [r3, #100]	; 0x64
 8007442:	e01d      	b.n	8007480 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	2b07      	cmp	r3, #7
 800744a:	d90b      	bls.n	8007464 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	8812      	ldrh	r2, [r2, #0]
 8007454:	b292      	uxth	r2, r2
 8007456:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800745c:	1c9a      	adds	r2, r3, #2
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	665a      	str	r2, [r3, #100]	; 0x64
 8007462:	e00d      	b.n	8007480 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007470:	7812      	ldrb	r2, [r2, #0]
 8007472:	b2d2      	uxtb	r2, r2
 8007474:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800747a:	1c5a      	adds	r2, r3, #1
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007486:	b29b      	uxth	r3, r3
 8007488:	3b01      	subs	r3, #1
 800748a:	b29a      	uxth	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007498:	b29b      	uxth	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1c2      	bne.n	8007424 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f990 	bl	80077c4 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f90c 	bl	80076d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 80074bc:	e0e4      	b.n	8007688 <HAL_SPI_IRQHandler+0x3b4>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80074be:	7cfb      	ldrb	r3, [r7, #19]
 80074c0:	2b05      	cmp	r3, #5
 80074c2:	d103      	bne.n	80074cc <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f8f1 	bl	80076ac <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 80074ca:	e0da      	b.n	8007682 <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80074cc:	7cfb      	ldrb	r3, [r7, #19]
 80074ce:	2b04      	cmp	r3, #4
 80074d0:	d103      	bne.n	80074da <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f8e0 	bl	8007698 <HAL_SPI_RxCpltCallback>
    return;
 80074d8:	e0d3      	b.n	8007682 <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80074da:	7cfb      	ldrb	r3, [r7, #19]
 80074dc:	2b03      	cmp	r3, #3
 80074de:	f040 80d0 	bne.w	8007682 <HAL_SPI_IRQHandler+0x3ae>
      HAL_SPI_TxCpltCallback(hspi);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7f9 fb0c 	bl	8000b00 <HAL_SPI_TxCpltCallback>
    return;
 80074e8:	e0cb      	b.n	8007682 <HAL_SPI_IRQHandler+0x3ae>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00d      	beq.n	8007510 <HAL_SPI_IRQHandler+0x23c>
 80074f4:	6a3b      	ldr	r3, [r7, #32]
 80074f6:	f003 0308 	and.w	r3, r3, #8
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d008      	beq.n	8007510 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	699a      	ldr	r2, [r3, #24]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800750c:	619a      	str	r2, [r3, #24]

    return;
 800750e:	e0bb      	b.n	8007688 <HAL_SPI_IRQHandler+0x3b4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8007516:	2b00      	cmp	r3, #0
 8007518:	f000 80b6 	beq.w	8007688 <HAL_SPI_IRQHandler+0x3b4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00f      	beq.n	8007546 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800752c:	f043 0204 	orr.w	r2, r3, #4
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	699a      	ldr	r2, [r3, #24]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007544:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00f      	beq.n	8007570 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007556:	f043 0201 	orr.w	r2, r3, #1
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	699a      	ldr	r2, [r3, #24]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800756e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00f      	beq.n	800759a <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007580:	f043 0208 	orr.w	r2, r3, #8
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	699a      	ldr	r2, [r3, #24]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007598:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	f003 0320 	and.w	r3, r3, #32
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00f      	beq.n	80075c4 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075aa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	699a      	ldr	r2, [r3, #24]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f042 0220 	orr.w	r2, r2, #32
 80075c2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d05b      	beq.n	8007686 <HAL_SPI_IRQHandler+0x3b2>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f022 0201 	bic.w	r2, r2, #1
 80075dc:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	6919      	ldr	r1, [r3, #16]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	4b29      	ldr	r3, [pc, #164]	; (8007690 <HAL_SPI_IRQHandler+0x3bc>)
 80075ea:	400b      	ands	r3, r1
 80075ec:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80075f4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80075f8:	d138      	bne.n	800766c <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	689a      	ldr	r2, [r3, #8]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007608:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800760e:	2b00      	cmp	r3, #0
 8007610:	d013      	beq.n	800763a <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007616:	4a1f      	ldr	r2, [pc, #124]	; (8007694 <HAL_SPI_IRQHandler+0x3c0>)
 8007618:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800761e:	4618      	mov	r0, r3
 8007620:	f7fa ff34 	bl	800248c <HAL_DMA_Abort_IT>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d007      	beq.n	800763a <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007630:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800763e:	2b00      	cmp	r3, #0
 8007640:	d021      	beq.n	8007686 <HAL_SPI_IRQHandler+0x3b2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007646:	4a13      	ldr	r2, [pc, #76]	; (8007694 <HAL_SPI_IRQHandler+0x3c0>)
 8007648:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800764e:	4618      	mov	r0, r3
 8007650:	f7fa ff1c 	bl	800248c <HAL_DMA_Abort_IT>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d015      	beq.n	8007686 <HAL_SPI_IRQHandler+0x3b2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007660:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800766a:	e00c      	b.n	8007686 <HAL_SPI_IRQHandler+0x3b2>
        hspi->State = HAL_SPI_STATE_READY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f82d 	bl	80076d4 <HAL_SPI_ErrorCallback>
    return;
 800767a:	bf00      	nop
 800767c:	e003      	b.n	8007686 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800767e:	bf00      	nop
 8007680:	e002      	b.n	8007688 <HAL_SPI_IRQHandler+0x3b4>
    return;
 8007682:	bf00      	nop
 8007684:	e000      	b.n	8007688 <HAL_SPI_IRQHandler+0x3b4>
    return;
 8007686:	bf00      	nop
  }
}
 8007688:	3728      	adds	r7, #40	; 0x28
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	fffffc94 	.word	0xfffffc94
 8007694:	08007791 	.word	0x08007791

08007698 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80076b4:	bf00      	nop
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80076c8:	bf00      	nop
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b07      	cmp	r3, #7
 8007700:	d011      	beq.n	8007726 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007706:	69db      	ldr	r3, [r3, #28]
 8007708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800770c:	d103      	bne.n	8007716 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f7f9 f9f6 	bl	8000b00 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8007714:	e007      	b.n	8007726 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	691a      	ldr	r2, [r3, #16]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f042 0208 	orr.w	r2, r2, #8
 8007724:	611a      	str	r2, [r3, #16]
}
 8007726:	bf00      	nop
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b084      	sub	sp, #16
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f7ff ffbf 	bl	80076c0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007742:	bf00      	nop
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b084      	sub	sp, #16
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007756:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7fc f805 	bl	8003768 <HAL_DMA_GetError>
 800775e:	4603      	mov	r3, r0
 8007760:	2b02      	cmp	r3, #2
 8007762:	d011      	beq.n	8007788 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f000 f82d 	bl	80077c4 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007770:	f043 0210 	orr.w	r2, r3, #16
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f7ff ffa6 	bl	80076d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8007788:	bf00      	nop
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f7ff ff8c 	bl	80076d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80077bc:	bf00      	nop
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	699a      	ldr	r2, [r3, #24]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f042 0208 	orr.w	r2, r2, #8
 80077e2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	699a      	ldr	r2, [r3, #24]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f042 0210 	orr.w	r2, r2, #16
 80077f2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f022 0201 	bic.w	r2, r2, #1
 8007802:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	6919      	ldr	r1, [r3, #16]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	4b3c      	ldr	r3, [pc, #240]	; (8007900 <SPI_CloseTransfer+0x13c>)
 8007810:	400b      	ands	r3, r1
 8007812:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	689a      	ldr	r2, [r3, #8]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007822:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b04      	cmp	r3, #4
 800782e:	d014      	beq.n	800785a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f003 0320 	and.w	r3, r3, #32
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00f      	beq.n	800785a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007840:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	699a      	ldr	r2, [r3, #24]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f042 0220 	orr.w	r2, r2, #32
 8007858:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2b03      	cmp	r3, #3
 8007864:	d014      	beq.n	8007890 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00f      	beq.n	8007890 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007876:	f043 0204 	orr.w	r2, r3, #4
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	699a      	ldr	r2, [r3, #24]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800788e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00f      	beq.n	80078ba <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078a0:	f043 0201 	orr.w	r2, r3, #1
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	699a      	ldr	r2, [r3, #24]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078b8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d00f      	beq.n	80078e4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078ca:	f043 0208 	orr.w	r2, r3, #8
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	699a      	ldr	r2, [r3, #24]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078e2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80078f4:	bf00      	nop
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	fffffc90 	.word	0xfffffc90

08007904 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	603b      	str	r3, [r7, #0]
 8007910:	4613      	mov	r3, r2
 8007912:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007914:	e010      	b.n	8007938 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007916:	f7f9 fea9 	bl	800166c <HAL_GetTick>
 800791a:	4602      	mov	r2, r0
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	69ba      	ldr	r2, [r7, #24]
 8007922:	429a      	cmp	r2, r3
 8007924:	d803      	bhi.n	800792e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792c:	d102      	bne.n	8007934 <SPI_WaitOnFlagUntilTimeout+0x30>
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d101      	bne.n	8007938 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	e00f      	b.n	8007958 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	695a      	ldr	r2, [r3, #20]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	4013      	ands	r3, r2
 8007942:	68ba      	ldr	r2, [r7, #8]
 8007944:	429a      	cmp	r2, r3
 8007946:	bf0c      	ite	eq
 8007948:	2301      	moveq	r3, #1
 800794a:	2300      	movne	r3, #0
 800794c:	b2db      	uxtb	r3, r3
 800794e:	461a      	mov	r2, r3
 8007950:	79fb      	ldrb	r3, [r7, #7]
 8007952:	429a      	cmp	r2, r3
 8007954:	d0df      	beq.n	8007916 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800796c:	095b      	lsrs	r3, r3, #5
 800796e:	3301      	adds	r3, #1
 8007970:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	3301      	adds	r3, #1
 8007978:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	3307      	adds	r3, #7
 800797e:	08db      	lsrs	r3, r3, #3
 8007980:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	fb02 f303 	mul.w	r3, r2, r3
}
 800798a:	4618      	mov	r0, r3
 800798c:	3714      	adds	r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b082      	sub	sp, #8
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d101      	bne.n	80079a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e042      	b.n	8007a2e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d106      	bne.n	80079c0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7f9 fc58 	bl	8001270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2224      	movs	r2, #36	; 0x24
 80079c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f022 0201 	bic.w	r2, r2, #1
 80079d6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f8c3 	bl	8007b64 <UART_SetConfig>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d101      	bne.n	80079e8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e022      	b.n	8007a2e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d002      	beq.n	80079f6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 fe67 	bl	80086c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a04:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	689a      	ldr	r2, [r3, #8]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a14:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f042 0201 	orr.w	r2, r2, #1
 8007a24:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 feee 	bl	8008808 <UART_CheckIdleState>
 8007a2c:	4603      	mov	r3, r0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b08a      	sub	sp, #40	; 0x28
 8007a3a:	af02      	add	r7, sp, #8
 8007a3c:	60f8      	str	r0, [r7, #12]
 8007a3e:	60b9      	str	r1, [r7, #8]
 8007a40:	603b      	str	r3, [r7, #0]
 8007a42:	4613      	mov	r3, r2
 8007a44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a4c:	2b20      	cmp	r3, #32
 8007a4e:	f040 8083 	bne.w	8007b58 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d002      	beq.n	8007a5e <HAL_UART_Transmit+0x28>
 8007a58:	88fb      	ldrh	r3, [r7, #6]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d101      	bne.n	8007a62 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e07b      	b.n	8007b5a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d101      	bne.n	8007a70 <HAL_UART_Transmit+0x3a>
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	e074      	b.n	8007b5a <HAL_UART_Transmit+0x124>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2221      	movs	r2, #33	; 0x21
 8007a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007a88:	f7f9 fdf0 	bl	800166c <HAL_GetTick>
 8007a8c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	88fa      	ldrh	r2, [r7, #6]
 8007a92:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	88fa      	ldrh	r2, [r7, #6]
 8007a9a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aa6:	d108      	bne.n	8007aba <HAL_UART_Transmit+0x84>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d104      	bne.n	8007aba <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	61bb      	str	r3, [r7, #24]
 8007ab8:	e003      	b.n	8007ac2 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8007aca:	e02c      	b.n	8007b26 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	2180      	movs	r1, #128	; 0x80
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 fede 	bl	8008898 <UART_WaitOnFlagUntilTimeout>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d001      	beq.n	8007ae6 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e039      	b.n	8007b5a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10b      	bne.n	8007b04 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	881b      	ldrh	r3, [r3, #0]
 8007af0:	461a      	mov	r2, r3
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007afa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	3302      	adds	r3, #2
 8007b00:	61bb      	str	r3, [r7, #24]
 8007b02:	e007      	b.n	8007b14 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	781a      	ldrb	r2, [r3, #0]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	3301      	adds	r3, #1
 8007b12:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1cc      	bne.n	8007acc <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	2140      	movs	r1, #64	; 0x40
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f000 feab 	bl	8008898 <UART_WaitOnFlagUntilTimeout>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d001      	beq.n	8007b4c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e006      	b.n	8007b5a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	e000      	b.n	8007b5a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007b58:	2302      	movs	r3, #2
  }
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3720      	adds	r7, #32
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
	...

08007b64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b64:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007b68:	b08e      	sub	sp, #56	; 0x38
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	689a      	ldr	r2, [r3, #8]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	431a      	orrs	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	695b      	ldr	r3, [r3, #20]
 8007b82:	431a      	orrs	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b92:	4313      	orrs	r3, r2
 8007b94:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	4bc1      	ldr	r3, [pc, #772]	; (8007ea4 <UART_SetConfig+0x340>)
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	6812      	ldr	r2, [r2, #0]
 8007ba4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007ba6:	430b      	orrs	r3, r1
 8007ba8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	68da      	ldr	r2, [r3, #12]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	430a      	orrs	r2, r1
 8007bbe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	699b      	ldr	r3, [r3, #24]
 8007bc4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4ab7      	ldr	r2, [pc, #732]	; (8007ea8 <UART_SetConfig+0x344>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d004      	beq.n	8007bda <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a1b      	ldr	r3, [r3, #32]
 8007bd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	689a      	ldr	r2, [r3, #8]
 8007be0:	4bb2      	ldr	r3, [pc, #712]	; (8007eac <UART_SetConfig+0x348>)
 8007be2:	4013      	ands	r3, r2
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	6812      	ldr	r2, [r2, #0]
 8007be8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007bea:	430b      	orrs	r3, r1
 8007bec:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf4:	f023 010f 	bic.w	r1, r3, #15
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	430a      	orrs	r2, r1
 8007c02:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4aa9      	ldr	r2, [pc, #676]	; (8007eb0 <UART_SetConfig+0x34c>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d177      	bne.n	8007cfe <UART_SetConfig+0x19a>
 8007c0e:	4ba9      	ldr	r3, [pc, #676]	; (8007eb4 <UART_SetConfig+0x350>)
 8007c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c16:	2b28      	cmp	r3, #40	; 0x28
 8007c18:	d86c      	bhi.n	8007cf4 <UART_SetConfig+0x190>
 8007c1a:	a201      	add	r2, pc, #4	; (adr r2, 8007c20 <UART_SetConfig+0xbc>)
 8007c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c20:	08007cc5 	.word	0x08007cc5
 8007c24:	08007cf5 	.word	0x08007cf5
 8007c28:	08007cf5 	.word	0x08007cf5
 8007c2c:	08007cf5 	.word	0x08007cf5
 8007c30:	08007cf5 	.word	0x08007cf5
 8007c34:	08007cf5 	.word	0x08007cf5
 8007c38:	08007cf5 	.word	0x08007cf5
 8007c3c:	08007cf5 	.word	0x08007cf5
 8007c40:	08007ccd 	.word	0x08007ccd
 8007c44:	08007cf5 	.word	0x08007cf5
 8007c48:	08007cf5 	.word	0x08007cf5
 8007c4c:	08007cf5 	.word	0x08007cf5
 8007c50:	08007cf5 	.word	0x08007cf5
 8007c54:	08007cf5 	.word	0x08007cf5
 8007c58:	08007cf5 	.word	0x08007cf5
 8007c5c:	08007cf5 	.word	0x08007cf5
 8007c60:	08007cd5 	.word	0x08007cd5
 8007c64:	08007cf5 	.word	0x08007cf5
 8007c68:	08007cf5 	.word	0x08007cf5
 8007c6c:	08007cf5 	.word	0x08007cf5
 8007c70:	08007cf5 	.word	0x08007cf5
 8007c74:	08007cf5 	.word	0x08007cf5
 8007c78:	08007cf5 	.word	0x08007cf5
 8007c7c:	08007cf5 	.word	0x08007cf5
 8007c80:	08007cdd 	.word	0x08007cdd
 8007c84:	08007cf5 	.word	0x08007cf5
 8007c88:	08007cf5 	.word	0x08007cf5
 8007c8c:	08007cf5 	.word	0x08007cf5
 8007c90:	08007cf5 	.word	0x08007cf5
 8007c94:	08007cf5 	.word	0x08007cf5
 8007c98:	08007cf5 	.word	0x08007cf5
 8007c9c:	08007cf5 	.word	0x08007cf5
 8007ca0:	08007ce5 	.word	0x08007ce5
 8007ca4:	08007cf5 	.word	0x08007cf5
 8007ca8:	08007cf5 	.word	0x08007cf5
 8007cac:	08007cf5 	.word	0x08007cf5
 8007cb0:	08007cf5 	.word	0x08007cf5
 8007cb4:	08007cf5 	.word	0x08007cf5
 8007cb8:	08007cf5 	.word	0x08007cf5
 8007cbc:	08007cf5 	.word	0x08007cf5
 8007cc0:	08007ced 	.word	0x08007ced
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cca:	e233      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007ccc:	2304      	movs	r3, #4
 8007cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cd2:	e22f      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007cd4:	2308      	movs	r3, #8
 8007cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cda:	e22b      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007cdc:	2310      	movs	r3, #16
 8007cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ce2:	e227      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007ce4:	2320      	movs	r3, #32
 8007ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cea:	e223      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007cec:	2340      	movs	r3, #64	; 0x40
 8007cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cf2:	e21f      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007cf4:	2380      	movs	r3, #128	; 0x80
 8007cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cfa:	bf00      	nop
 8007cfc:	e21a      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a6d      	ldr	r2, [pc, #436]	; (8007eb8 <UART_SetConfig+0x354>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d132      	bne.n	8007d6e <UART_SetConfig+0x20a>
 8007d08:	4b6a      	ldr	r3, [pc, #424]	; (8007eb4 <UART_SetConfig+0x350>)
 8007d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d0c:	f003 0307 	and.w	r3, r3, #7
 8007d10:	2b05      	cmp	r3, #5
 8007d12:	d827      	bhi.n	8007d64 <UART_SetConfig+0x200>
 8007d14:	a201      	add	r2, pc, #4	; (adr r2, 8007d1c <UART_SetConfig+0x1b8>)
 8007d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1a:	bf00      	nop
 8007d1c:	08007d35 	.word	0x08007d35
 8007d20:	08007d3d 	.word	0x08007d3d
 8007d24:	08007d45 	.word	0x08007d45
 8007d28:	08007d4d 	.word	0x08007d4d
 8007d2c:	08007d55 	.word	0x08007d55
 8007d30:	08007d5d 	.word	0x08007d5d
 8007d34:	2300      	movs	r3, #0
 8007d36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d3a:	e1fb      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007d3c:	2304      	movs	r3, #4
 8007d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d42:	e1f7      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007d44:	2308      	movs	r3, #8
 8007d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d4a:	e1f3      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007d4c:	2310      	movs	r3, #16
 8007d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d52:	e1ef      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007d54:	2320      	movs	r3, #32
 8007d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d5a:	e1eb      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007d5c:	2340      	movs	r3, #64	; 0x40
 8007d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d62:	e1e7      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007d64:	2380      	movs	r3, #128	; 0x80
 8007d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d6a:	bf00      	nop
 8007d6c:	e1e2      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a52      	ldr	r2, [pc, #328]	; (8007ebc <UART_SetConfig+0x358>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d132      	bne.n	8007dde <UART_SetConfig+0x27a>
 8007d78:	4b4e      	ldr	r3, [pc, #312]	; (8007eb4 <UART_SetConfig+0x350>)
 8007d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d7c:	f003 0307 	and.w	r3, r3, #7
 8007d80:	2b05      	cmp	r3, #5
 8007d82:	d827      	bhi.n	8007dd4 <UART_SetConfig+0x270>
 8007d84:	a201      	add	r2, pc, #4	; (adr r2, 8007d8c <UART_SetConfig+0x228>)
 8007d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8a:	bf00      	nop
 8007d8c:	08007da5 	.word	0x08007da5
 8007d90:	08007dad 	.word	0x08007dad
 8007d94:	08007db5 	.word	0x08007db5
 8007d98:	08007dbd 	.word	0x08007dbd
 8007d9c:	08007dc5 	.word	0x08007dc5
 8007da0:	08007dcd 	.word	0x08007dcd
 8007da4:	2300      	movs	r3, #0
 8007da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007daa:	e1c3      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007dac:	2304      	movs	r3, #4
 8007dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007db2:	e1bf      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007db4:	2308      	movs	r3, #8
 8007db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dba:	e1bb      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007dbc:	2310      	movs	r3, #16
 8007dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dc2:	e1b7      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007dc4:	2320      	movs	r3, #32
 8007dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dca:	e1b3      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007dcc:	2340      	movs	r3, #64	; 0x40
 8007dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dd2:	e1af      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007dd4:	2380      	movs	r3, #128	; 0x80
 8007dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dda:	bf00      	nop
 8007ddc:	e1aa      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a37      	ldr	r2, [pc, #220]	; (8007ec0 <UART_SetConfig+0x35c>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d132      	bne.n	8007e4e <UART_SetConfig+0x2ea>
 8007de8:	4b32      	ldr	r3, [pc, #200]	; (8007eb4 <UART_SetConfig+0x350>)
 8007dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dec:	f003 0307 	and.w	r3, r3, #7
 8007df0:	2b05      	cmp	r3, #5
 8007df2:	d827      	bhi.n	8007e44 <UART_SetConfig+0x2e0>
 8007df4:	a201      	add	r2, pc, #4	; (adr r2, 8007dfc <UART_SetConfig+0x298>)
 8007df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfa:	bf00      	nop
 8007dfc:	08007e15 	.word	0x08007e15
 8007e00:	08007e1d 	.word	0x08007e1d
 8007e04:	08007e25 	.word	0x08007e25
 8007e08:	08007e2d 	.word	0x08007e2d
 8007e0c:	08007e35 	.word	0x08007e35
 8007e10:	08007e3d 	.word	0x08007e3d
 8007e14:	2300      	movs	r3, #0
 8007e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e1a:	e18b      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007e1c:	2304      	movs	r3, #4
 8007e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e22:	e187      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007e24:	2308      	movs	r3, #8
 8007e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e2a:	e183      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007e2c:	2310      	movs	r3, #16
 8007e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e32:	e17f      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007e34:	2320      	movs	r3, #32
 8007e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e3a:	e17b      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007e3c:	2340      	movs	r3, #64	; 0x40
 8007e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e42:	e177      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007e44:	2380      	movs	r3, #128	; 0x80
 8007e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e4a:	bf00      	nop
 8007e4c:	e172      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a1c      	ldr	r2, [pc, #112]	; (8007ec4 <UART_SetConfig+0x360>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d144      	bne.n	8007ee2 <UART_SetConfig+0x37e>
 8007e58:	4b16      	ldr	r3, [pc, #88]	; (8007eb4 <UART_SetConfig+0x350>)
 8007e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e5c:	f003 0307 	and.w	r3, r3, #7
 8007e60:	2b05      	cmp	r3, #5
 8007e62:	d839      	bhi.n	8007ed8 <UART_SetConfig+0x374>
 8007e64:	a201      	add	r2, pc, #4	; (adr r2, 8007e6c <UART_SetConfig+0x308>)
 8007e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6a:	bf00      	nop
 8007e6c:	08007e85 	.word	0x08007e85
 8007e70:	08007e8d 	.word	0x08007e8d
 8007e74:	08007e95 	.word	0x08007e95
 8007e78:	08007e9d 	.word	0x08007e9d
 8007e7c:	08007ec9 	.word	0x08007ec9
 8007e80:	08007ed1 	.word	0x08007ed1
 8007e84:	2300      	movs	r3, #0
 8007e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e8a:	e153      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007e8c:	2304      	movs	r3, #4
 8007e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e92:	e14f      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007e94:	2308      	movs	r3, #8
 8007e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e9a:	e14b      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007e9c:	2310      	movs	r3, #16
 8007e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ea2:	e147      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007ea4:	cfff69f3 	.word	0xcfff69f3
 8007ea8:	58000c00 	.word	0x58000c00
 8007eac:	11fff4ff 	.word	0x11fff4ff
 8007eb0:	40011000 	.word	0x40011000
 8007eb4:	58024400 	.word	0x58024400
 8007eb8:	40004400 	.word	0x40004400
 8007ebc:	40004800 	.word	0x40004800
 8007ec0:	40004c00 	.word	0x40004c00
 8007ec4:	40005000 	.word	0x40005000
 8007ec8:	2320      	movs	r3, #32
 8007eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ece:	e131      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007ed0:	2340      	movs	r3, #64	; 0x40
 8007ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ed6:	e12d      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007ed8:	2380      	movs	r3, #128	; 0x80
 8007eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ede:	bf00      	nop
 8007ee0:	e128      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4ab6      	ldr	r2, [pc, #728]	; (80081c0 <UART_SetConfig+0x65c>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d178      	bne.n	8007fde <UART_SetConfig+0x47a>
 8007eec:	4bb5      	ldr	r3, [pc, #724]	; (80081c4 <UART_SetConfig+0x660>)
 8007eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ef4:	2b28      	cmp	r3, #40	; 0x28
 8007ef6:	d86d      	bhi.n	8007fd4 <UART_SetConfig+0x470>
 8007ef8:	a201      	add	r2, pc, #4	; (adr r2, 8007f00 <UART_SetConfig+0x39c>)
 8007efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efe:	bf00      	nop
 8007f00:	08007fa5 	.word	0x08007fa5
 8007f04:	08007fd5 	.word	0x08007fd5
 8007f08:	08007fd5 	.word	0x08007fd5
 8007f0c:	08007fd5 	.word	0x08007fd5
 8007f10:	08007fd5 	.word	0x08007fd5
 8007f14:	08007fd5 	.word	0x08007fd5
 8007f18:	08007fd5 	.word	0x08007fd5
 8007f1c:	08007fd5 	.word	0x08007fd5
 8007f20:	08007fad 	.word	0x08007fad
 8007f24:	08007fd5 	.word	0x08007fd5
 8007f28:	08007fd5 	.word	0x08007fd5
 8007f2c:	08007fd5 	.word	0x08007fd5
 8007f30:	08007fd5 	.word	0x08007fd5
 8007f34:	08007fd5 	.word	0x08007fd5
 8007f38:	08007fd5 	.word	0x08007fd5
 8007f3c:	08007fd5 	.word	0x08007fd5
 8007f40:	08007fb5 	.word	0x08007fb5
 8007f44:	08007fd5 	.word	0x08007fd5
 8007f48:	08007fd5 	.word	0x08007fd5
 8007f4c:	08007fd5 	.word	0x08007fd5
 8007f50:	08007fd5 	.word	0x08007fd5
 8007f54:	08007fd5 	.word	0x08007fd5
 8007f58:	08007fd5 	.word	0x08007fd5
 8007f5c:	08007fd5 	.word	0x08007fd5
 8007f60:	08007fbd 	.word	0x08007fbd
 8007f64:	08007fd5 	.word	0x08007fd5
 8007f68:	08007fd5 	.word	0x08007fd5
 8007f6c:	08007fd5 	.word	0x08007fd5
 8007f70:	08007fd5 	.word	0x08007fd5
 8007f74:	08007fd5 	.word	0x08007fd5
 8007f78:	08007fd5 	.word	0x08007fd5
 8007f7c:	08007fd5 	.word	0x08007fd5
 8007f80:	08007fc5 	.word	0x08007fc5
 8007f84:	08007fd5 	.word	0x08007fd5
 8007f88:	08007fd5 	.word	0x08007fd5
 8007f8c:	08007fd5 	.word	0x08007fd5
 8007f90:	08007fd5 	.word	0x08007fd5
 8007f94:	08007fd5 	.word	0x08007fd5
 8007f98:	08007fd5 	.word	0x08007fd5
 8007f9c:	08007fd5 	.word	0x08007fd5
 8007fa0:	08007fcd 	.word	0x08007fcd
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007faa:	e0c3      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007fac:	2304      	movs	r3, #4
 8007fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fb2:	e0bf      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007fb4:	2308      	movs	r3, #8
 8007fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fba:	e0bb      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007fbc:	2310      	movs	r3, #16
 8007fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fc2:	e0b7      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007fc4:	2320      	movs	r3, #32
 8007fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fca:	e0b3      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007fcc:	2340      	movs	r3, #64	; 0x40
 8007fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fd2:	e0af      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007fd4:	2380      	movs	r3, #128	; 0x80
 8007fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fda:	bf00      	nop
 8007fdc:	e0aa      	b.n	8008134 <UART_SetConfig+0x5d0>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a79      	ldr	r2, [pc, #484]	; (80081c8 <UART_SetConfig+0x664>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d132      	bne.n	800804e <UART_SetConfig+0x4ea>
 8007fe8:	4b76      	ldr	r3, [pc, #472]	; (80081c4 <UART_SetConfig+0x660>)
 8007fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fec:	f003 0307 	and.w	r3, r3, #7
 8007ff0:	2b05      	cmp	r3, #5
 8007ff2:	d827      	bhi.n	8008044 <UART_SetConfig+0x4e0>
 8007ff4:	a201      	add	r2, pc, #4	; (adr r2, 8007ffc <UART_SetConfig+0x498>)
 8007ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffa:	bf00      	nop
 8007ffc:	08008015 	.word	0x08008015
 8008000:	0800801d 	.word	0x0800801d
 8008004:	08008025 	.word	0x08008025
 8008008:	0800802d 	.word	0x0800802d
 800800c:	08008035 	.word	0x08008035
 8008010:	0800803d 	.word	0x0800803d
 8008014:	2300      	movs	r3, #0
 8008016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800801a:	e08b      	b.n	8008134 <UART_SetConfig+0x5d0>
 800801c:	2304      	movs	r3, #4
 800801e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008022:	e087      	b.n	8008134 <UART_SetConfig+0x5d0>
 8008024:	2308      	movs	r3, #8
 8008026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800802a:	e083      	b.n	8008134 <UART_SetConfig+0x5d0>
 800802c:	2310      	movs	r3, #16
 800802e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008032:	e07f      	b.n	8008134 <UART_SetConfig+0x5d0>
 8008034:	2320      	movs	r3, #32
 8008036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800803a:	e07b      	b.n	8008134 <UART_SetConfig+0x5d0>
 800803c:	2340      	movs	r3, #64	; 0x40
 800803e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008042:	e077      	b.n	8008134 <UART_SetConfig+0x5d0>
 8008044:	2380      	movs	r3, #128	; 0x80
 8008046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800804a:	bf00      	nop
 800804c:	e072      	b.n	8008134 <UART_SetConfig+0x5d0>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a5e      	ldr	r2, [pc, #376]	; (80081cc <UART_SetConfig+0x668>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d132      	bne.n	80080be <UART_SetConfig+0x55a>
 8008058:	4b5a      	ldr	r3, [pc, #360]	; (80081c4 <UART_SetConfig+0x660>)
 800805a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800805c:	f003 0307 	and.w	r3, r3, #7
 8008060:	2b05      	cmp	r3, #5
 8008062:	d827      	bhi.n	80080b4 <UART_SetConfig+0x550>
 8008064:	a201      	add	r2, pc, #4	; (adr r2, 800806c <UART_SetConfig+0x508>)
 8008066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800806a:	bf00      	nop
 800806c:	08008085 	.word	0x08008085
 8008070:	0800808d 	.word	0x0800808d
 8008074:	08008095 	.word	0x08008095
 8008078:	0800809d 	.word	0x0800809d
 800807c:	080080a5 	.word	0x080080a5
 8008080:	080080ad 	.word	0x080080ad
 8008084:	2300      	movs	r3, #0
 8008086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800808a:	e053      	b.n	8008134 <UART_SetConfig+0x5d0>
 800808c:	2304      	movs	r3, #4
 800808e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008092:	e04f      	b.n	8008134 <UART_SetConfig+0x5d0>
 8008094:	2308      	movs	r3, #8
 8008096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800809a:	e04b      	b.n	8008134 <UART_SetConfig+0x5d0>
 800809c:	2310      	movs	r3, #16
 800809e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080a2:	e047      	b.n	8008134 <UART_SetConfig+0x5d0>
 80080a4:	2320      	movs	r3, #32
 80080a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080aa:	e043      	b.n	8008134 <UART_SetConfig+0x5d0>
 80080ac:	2340      	movs	r3, #64	; 0x40
 80080ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080b2:	e03f      	b.n	8008134 <UART_SetConfig+0x5d0>
 80080b4:	2380      	movs	r3, #128	; 0x80
 80080b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080ba:	bf00      	nop
 80080bc:	e03a      	b.n	8008134 <UART_SetConfig+0x5d0>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a43      	ldr	r2, [pc, #268]	; (80081d0 <UART_SetConfig+0x66c>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d132      	bne.n	800812e <UART_SetConfig+0x5ca>
 80080c8:	4b3e      	ldr	r3, [pc, #248]	; (80081c4 <UART_SetConfig+0x660>)
 80080ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080cc:	f003 0307 	and.w	r3, r3, #7
 80080d0:	2b05      	cmp	r3, #5
 80080d2:	d827      	bhi.n	8008124 <UART_SetConfig+0x5c0>
 80080d4:	a201      	add	r2, pc, #4	; (adr r2, 80080dc <UART_SetConfig+0x578>)
 80080d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080da:	bf00      	nop
 80080dc:	080080f5 	.word	0x080080f5
 80080e0:	080080fd 	.word	0x080080fd
 80080e4:	08008105 	.word	0x08008105
 80080e8:	0800810d 	.word	0x0800810d
 80080ec:	08008115 	.word	0x08008115
 80080f0:	0800811d 	.word	0x0800811d
 80080f4:	2302      	movs	r3, #2
 80080f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080fa:	e01b      	b.n	8008134 <UART_SetConfig+0x5d0>
 80080fc:	2304      	movs	r3, #4
 80080fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008102:	e017      	b.n	8008134 <UART_SetConfig+0x5d0>
 8008104:	2308      	movs	r3, #8
 8008106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800810a:	e013      	b.n	8008134 <UART_SetConfig+0x5d0>
 800810c:	2310      	movs	r3, #16
 800810e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008112:	e00f      	b.n	8008134 <UART_SetConfig+0x5d0>
 8008114:	2320      	movs	r3, #32
 8008116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800811a:	e00b      	b.n	8008134 <UART_SetConfig+0x5d0>
 800811c:	2340      	movs	r3, #64	; 0x40
 800811e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008122:	e007      	b.n	8008134 <UART_SetConfig+0x5d0>
 8008124:	2380      	movs	r3, #128	; 0x80
 8008126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800812a:	bf00      	nop
 800812c:	e002      	b.n	8008134 <UART_SetConfig+0x5d0>
 800812e:	2380      	movs	r3, #128	; 0x80
 8008130:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a25      	ldr	r2, [pc, #148]	; (80081d0 <UART_SetConfig+0x66c>)
 800813a:	4293      	cmp	r3, r2
 800813c:	f040 80b8 	bne.w	80082b0 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008140:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008144:	2b08      	cmp	r3, #8
 8008146:	d019      	beq.n	800817c <UART_SetConfig+0x618>
 8008148:	2b08      	cmp	r3, #8
 800814a:	dc04      	bgt.n	8008156 <UART_SetConfig+0x5f2>
 800814c:	2b02      	cmp	r3, #2
 800814e:	d009      	beq.n	8008164 <UART_SetConfig+0x600>
 8008150:	2b04      	cmp	r3, #4
 8008152:	d00b      	beq.n	800816c <UART_SetConfig+0x608>
 8008154:	e042      	b.n	80081dc <UART_SetConfig+0x678>
 8008156:	2b20      	cmp	r3, #32
 8008158:	d02b      	beq.n	80081b2 <UART_SetConfig+0x64e>
 800815a:	2b40      	cmp	r3, #64	; 0x40
 800815c:	d02c      	beq.n	80081b8 <UART_SetConfig+0x654>
 800815e:	2b10      	cmp	r3, #16
 8008160:	d014      	beq.n	800818c <UART_SetConfig+0x628>
 8008162:	e03b      	b.n	80081dc <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008164:	f7fd ff7a 	bl	800605c <HAL_RCCEx_GetD3PCLK1Freq>
 8008168:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800816a:	e03d      	b.n	80081e8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800816c:	f107 0314 	add.w	r3, r7, #20
 8008170:	4618      	mov	r0, r3
 8008172:	f7fd ff89 	bl	8006088 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800817a:	e035      	b.n	80081e8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800817c:	f107 0308 	add.w	r3, r7, #8
 8008180:	4618      	mov	r0, r3
 8008182:	f7fe f8cd 	bl	8006320 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800818a:	e02d      	b.n	80081e8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800818c:	4b0d      	ldr	r3, [pc, #52]	; (80081c4 <UART_SetConfig+0x660>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0320 	and.w	r3, r3, #32
 8008194:	2b00      	cmp	r3, #0
 8008196:	d009      	beq.n	80081ac <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008198:	4b0a      	ldr	r3, [pc, #40]	; (80081c4 <UART_SetConfig+0x660>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	08db      	lsrs	r3, r3, #3
 800819e:	f003 0303 	and.w	r3, r3, #3
 80081a2:	4a0c      	ldr	r2, [pc, #48]	; (80081d4 <UART_SetConfig+0x670>)
 80081a4:	fa22 f303 	lsr.w	r3, r2, r3
 80081a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80081aa:	e01d      	b.n	80081e8 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 80081ac:	4b09      	ldr	r3, [pc, #36]	; (80081d4 <UART_SetConfig+0x670>)
 80081ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081b0:	e01a      	b.n	80081e8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80081b2:	4b09      	ldr	r3, [pc, #36]	; (80081d8 <UART_SetConfig+0x674>)
 80081b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081b6:	e017      	b.n	80081e8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081be:	e013      	b.n	80081e8 <UART_SetConfig+0x684>
 80081c0:	40011400 	.word	0x40011400
 80081c4:	58024400 	.word	0x58024400
 80081c8:	40007800 	.word	0x40007800
 80081cc:	40007c00 	.word	0x40007c00
 80081d0:	58000c00 	.word	0x58000c00
 80081d4:	03d09000 	.word	0x03d09000
 80081d8:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80081dc:	2300      	movs	r3, #0
 80081de:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80081e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f000 824d 	beq.w	800868a <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f4:	4aad      	ldr	r2, [pc, #692]	; (80084ac <UART_SetConfig+0x948>)
 80081f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081fa:	461a      	mov	r2, r3
 80081fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8008202:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685a      	ldr	r2, [r3, #4]
 8008208:	4613      	mov	r3, r2
 800820a:	005b      	lsls	r3, r3, #1
 800820c:	4413      	add	r3, r2
 800820e:	6a3a      	ldr	r2, [r7, #32]
 8008210:	429a      	cmp	r2, r3
 8008212:	d305      	bcc.n	8008220 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800821a:	6a3a      	ldr	r2, [r7, #32]
 800821c:	429a      	cmp	r2, r3
 800821e:	d903      	bls.n	8008228 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008226:	e230      	b.n	800868a <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822a:	4618      	mov	r0, r3
 800822c:	f04f 0100 	mov.w	r1, #0
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008234:	4a9d      	ldr	r2, [pc, #628]	; (80084ac <UART_SetConfig+0x948>)
 8008236:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800823a:	b29b      	uxth	r3, r3
 800823c:	f04f 0400 	mov.w	r4, #0
 8008240:	461a      	mov	r2, r3
 8008242:	4623      	mov	r3, r4
 8008244:	f7f8 f8a4 	bl	8000390 <__aeabi_uldivmod>
 8008248:	4603      	mov	r3, r0
 800824a:	460c      	mov	r4, r1
 800824c:	4619      	mov	r1, r3
 800824e:	4622      	mov	r2, r4
 8008250:	f04f 0300 	mov.w	r3, #0
 8008254:	f04f 0400 	mov.w	r4, #0
 8008258:	0214      	lsls	r4, r2, #8
 800825a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800825e:	020b      	lsls	r3, r1, #8
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	6852      	ldr	r2, [r2, #4]
 8008264:	0852      	lsrs	r2, r2, #1
 8008266:	4611      	mov	r1, r2
 8008268:	f04f 0200 	mov.w	r2, #0
 800826c:	eb13 0b01 	adds.w	fp, r3, r1
 8008270:	eb44 0c02 	adc.w	ip, r4, r2
 8008274:	4658      	mov	r0, fp
 8008276:	4661      	mov	r1, ip
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	f04f 0400 	mov.w	r4, #0
 8008280:	461a      	mov	r2, r3
 8008282:	4623      	mov	r3, r4
 8008284:	f7f8 f884 	bl	8000390 <__aeabi_uldivmod>
 8008288:	4603      	mov	r3, r0
 800828a:	460c      	mov	r4, r1
 800828c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800828e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008290:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008294:	d308      	bcc.n	80082a8 <UART_SetConfig+0x744>
 8008296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008298:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800829c:	d204      	bcs.n	80082a8 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082a4:	60da      	str	r2, [r3, #12]
 80082a6:	e1f0      	b.n	800868a <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80082ae:	e1ec      	b.n	800868a <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	69db      	ldr	r3, [r3, #28]
 80082b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082b8:	f040 8100 	bne.w	80084bc <UART_SetConfig+0x958>
  {
    switch (clocksource)
 80082bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80082c0:	2b40      	cmp	r3, #64	; 0x40
 80082c2:	f200 80b7 	bhi.w	8008434 <UART_SetConfig+0x8d0>
 80082c6:	a201      	add	r2, pc, #4	; (adr r2, 80082cc <UART_SetConfig+0x768>)
 80082c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082cc:	080083d1 	.word	0x080083d1
 80082d0:	080083d9 	.word	0x080083d9
 80082d4:	08008435 	.word	0x08008435
 80082d8:	08008435 	.word	0x08008435
 80082dc:	080083e1 	.word	0x080083e1
 80082e0:	08008435 	.word	0x08008435
 80082e4:	08008435 	.word	0x08008435
 80082e8:	08008435 	.word	0x08008435
 80082ec:	080083f1 	.word	0x080083f1
 80082f0:	08008435 	.word	0x08008435
 80082f4:	08008435 	.word	0x08008435
 80082f8:	08008435 	.word	0x08008435
 80082fc:	08008435 	.word	0x08008435
 8008300:	08008435 	.word	0x08008435
 8008304:	08008435 	.word	0x08008435
 8008308:	08008435 	.word	0x08008435
 800830c:	08008401 	.word	0x08008401
 8008310:	08008435 	.word	0x08008435
 8008314:	08008435 	.word	0x08008435
 8008318:	08008435 	.word	0x08008435
 800831c:	08008435 	.word	0x08008435
 8008320:	08008435 	.word	0x08008435
 8008324:	08008435 	.word	0x08008435
 8008328:	08008435 	.word	0x08008435
 800832c:	08008435 	.word	0x08008435
 8008330:	08008435 	.word	0x08008435
 8008334:	08008435 	.word	0x08008435
 8008338:	08008435 	.word	0x08008435
 800833c:	08008435 	.word	0x08008435
 8008340:	08008435 	.word	0x08008435
 8008344:	08008435 	.word	0x08008435
 8008348:	08008435 	.word	0x08008435
 800834c:	08008427 	.word	0x08008427
 8008350:	08008435 	.word	0x08008435
 8008354:	08008435 	.word	0x08008435
 8008358:	08008435 	.word	0x08008435
 800835c:	08008435 	.word	0x08008435
 8008360:	08008435 	.word	0x08008435
 8008364:	08008435 	.word	0x08008435
 8008368:	08008435 	.word	0x08008435
 800836c:	08008435 	.word	0x08008435
 8008370:	08008435 	.word	0x08008435
 8008374:	08008435 	.word	0x08008435
 8008378:	08008435 	.word	0x08008435
 800837c:	08008435 	.word	0x08008435
 8008380:	08008435 	.word	0x08008435
 8008384:	08008435 	.word	0x08008435
 8008388:	08008435 	.word	0x08008435
 800838c:	08008435 	.word	0x08008435
 8008390:	08008435 	.word	0x08008435
 8008394:	08008435 	.word	0x08008435
 8008398:	08008435 	.word	0x08008435
 800839c:	08008435 	.word	0x08008435
 80083a0:	08008435 	.word	0x08008435
 80083a4:	08008435 	.word	0x08008435
 80083a8:	08008435 	.word	0x08008435
 80083ac:	08008435 	.word	0x08008435
 80083b0:	08008435 	.word	0x08008435
 80083b4:	08008435 	.word	0x08008435
 80083b8:	08008435 	.word	0x08008435
 80083bc:	08008435 	.word	0x08008435
 80083c0:	08008435 	.word	0x08008435
 80083c4:	08008435 	.word	0x08008435
 80083c8:	08008435 	.word	0x08008435
 80083cc:	0800842d 	.word	0x0800842d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083d0:	f7fc ff2a 	bl	8005228 <HAL_RCC_GetPCLK1Freq>
 80083d4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80083d6:	e033      	b.n	8008440 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083d8:	f7fc ff3c 	bl	8005254 <HAL_RCC_GetPCLK2Freq>
 80083dc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80083de:	e02f      	b.n	8008440 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083e0:	f107 0314 	add.w	r3, r7, #20
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7fd fe4f 	bl	8006088 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083ee:	e027      	b.n	8008440 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083f0:	f107 0308 	add.w	r3, r7, #8
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7fd ff93 	bl	8006320 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083fe:	e01f      	b.n	8008440 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008400:	4b2b      	ldr	r3, [pc, #172]	; (80084b0 <UART_SetConfig+0x94c>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0320 	and.w	r3, r3, #32
 8008408:	2b00      	cmp	r3, #0
 800840a:	d009      	beq.n	8008420 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800840c:	4b28      	ldr	r3, [pc, #160]	; (80084b0 <UART_SetConfig+0x94c>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	08db      	lsrs	r3, r3, #3
 8008412:	f003 0303 	and.w	r3, r3, #3
 8008416:	4a27      	ldr	r2, [pc, #156]	; (80084b4 <UART_SetConfig+0x950>)
 8008418:	fa22 f303 	lsr.w	r3, r2, r3
 800841c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800841e:	e00f      	b.n	8008440 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8008420:	4b24      	ldr	r3, [pc, #144]	; (80084b4 <UART_SetConfig+0x950>)
 8008422:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008424:	e00c      	b.n	8008440 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008426:	4b24      	ldr	r3, [pc, #144]	; (80084b8 <UART_SetConfig+0x954>)
 8008428:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800842a:	e009      	b.n	8008440 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800842c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008430:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008432:	e005      	b.n	8008440 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8008434:	2300      	movs	r3, #0
 8008436:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800843e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008442:	2b00      	cmp	r3, #0
 8008444:	f000 8121 	beq.w	800868a <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844c:	4a17      	ldr	r2, [pc, #92]	; (80084ac <UART_SetConfig+0x948>)
 800844e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008452:	461a      	mov	r2, r3
 8008454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008456:	fbb3 f3f2 	udiv	r3, r3, r2
 800845a:	005a      	lsls	r2, r3, #1
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	085b      	lsrs	r3, r3, #1
 8008462:	441a      	add	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	fbb2 f3f3 	udiv	r3, r2, r3
 800846c:	b29b      	uxth	r3, r3
 800846e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008472:	2b0f      	cmp	r3, #15
 8008474:	d916      	bls.n	80084a4 <UART_SetConfig+0x940>
 8008476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800847c:	d212      	bcs.n	80084a4 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800847e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008480:	b29b      	uxth	r3, r3
 8008482:	f023 030f 	bic.w	r3, r3, #15
 8008486:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848a:	085b      	lsrs	r3, r3, #1
 800848c:	b29b      	uxth	r3, r3
 800848e:	f003 0307 	and.w	r3, r3, #7
 8008492:	b29a      	uxth	r2, r3
 8008494:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008496:	4313      	orrs	r3, r2
 8008498:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80084a0:	60da      	str	r2, [r3, #12]
 80084a2:	e0f2      	b.n	800868a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80084aa:	e0ee      	b.n	800868a <UART_SetConfig+0xb26>
 80084ac:	0800cf2c 	.word	0x0800cf2c
 80084b0:	58024400 	.word	0x58024400
 80084b4:	03d09000 	.word	0x03d09000
 80084b8:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 80084bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80084c0:	2b40      	cmp	r3, #64	; 0x40
 80084c2:	f200 80b7 	bhi.w	8008634 <UART_SetConfig+0xad0>
 80084c6:	a201      	add	r2, pc, #4	; (adr r2, 80084cc <UART_SetConfig+0x968>)
 80084c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084cc:	080085d1 	.word	0x080085d1
 80084d0:	080085d9 	.word	0x080085d9
 80084d4:	08008635 	.word	0x08008635
 80084d8:	08008635 	.word	0x08008635
 80084dc:	080085e1 	.word	0x080085e1
 80084e0:	08008635 	.word	0x08008635
 80084e4:	08008635 	.word	0x08008635
 80084e8:	08008635 	.word	0x08008635
 80084ec:	080085f1 	.word	0x080085f1
 80084f0:	08008635 	.word	0x08008635
 80084f4:	08008635 	.word	0x08008635
 80084f8:	08008635 	.word	0x08008635
 80084fc:	08008635 	.word	0x08008635
 8008500:	08008635 	.word	0x08008635
 8008504:	08008635 	.word	0x08008635
 8008508:	08008635 	.word	0x08008635
 800850c:	08008601 	.word	0x08008601
 8008510:	08008635 	.word	0x08008635
 8008514:	08008635 	.word	0x08008635
 8008518:	08008635 	.word	0x08008635
 800851c:	08008635 	.word	0x08008635
 8008520:	08008635 	.word	0x08008635
 8008524:	08008635 	.word	0x08008635
 8008528:	08008635 	.word	0x08008635
 800852c:	08008635 	.word	0x08008635
 8008530:	08008635 	.word	0x08008635
 8008534:	08008635 	.word	0x08008635
 8008538:	08008635 	.word	0x08008635
 800853c:	08008635 	.word	0x08008635
 8008540:	08008635 	.word	0x08008635
 8008544:	08008635 	.word	0x08008635
 8008548:	08008635 	.word	0x08008635
 800854c:	08008627 	.word	0x08008627
 8008550:	08008635 	.word	0x08008635
 8008554:	08008635 	.word	0x08008635
 8008558:	08008635 	.word	0x08008635
 800855c:	08008635 	.word	0x08008635
 8008560:	08008635 	.word	0x08008635
 8008564:	08008635 	.word	0x08008635
 8008568:	08008635 	.word	0x08008635
 800856c:	08008635 	.word	0x08008635
 8008570:	08008635 	.word	0x08008635
 8008574:	08008635 	.word	0x08008635
 8008578:	08008635 	.word	0x08008635
 800857c:	08008635 	.word	0x08008635
 8008580:	08008635 	.word	0x08008635
 8008584:	08008635 	.word	0x08008635
 8008588:	08008635 	.word	0x08008635
 800858c:	08008635 	.word	0x08008635
 8008590:	08008635 	.word	0x08008635
 8008594:	08008635 	.word	0x08008635
 8008598:	08008635 	.word	0x08008635
 800859c:	08008635 	.word	0x08008635
 80085a0:	08008635 	.word	0x08008635
 80085a4:	08008635 	.word	0x08008635
 80085a8:	08008635 	.word	0x08008635
 80085ac:	08008635 	.word	0x08008635
 80085b0:	08008635 	.word	0x08008635
 80085b4:	08008635 	.word	0x08008635
 80085b8:	08008635 	.word	0x08008635
 80085bc:	08008635 	.word	0x08008635
 80085c0:	08008635 	.word	0x08008635
 80085c4:	08008635 	.word	0x08008635
 80085c8:	08008635 	.word	0x08008635
 80085cc:	0800862d 	.word	0x0800862d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085d0:	f7fc fe2a 	bl	8005228 <HAL_RCC_GetPCLK1Freq>
 80085d4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80085d6:	e033      	b.n	8008640 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085d8:	f7fc fe3c 	bl	8005254 <HAL_RCC_GetPCLK2Freq>
 80085dc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80085de:	e02f      	b.n	8008640 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085e0:	f107 0314 	add.w	r3, r7, #20
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7fd fd4f 	bl	8006088 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80085ee:	e027      	b.n	8008640 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085f0:	f107 0308 	add.w	r3, r7, #8
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7fd fe93 	bl	8006320 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80085fe:	e01f      	b.n	8008640 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008600:	4b2c      	ldr	r3, [pc, #176]	; (80086b4 <UART_SetConfig+0xb50>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 0320 	and.w	r3, r3, #32
 8008608:	2b00      	cmp	r3, #0
 800860a:	d009      	beq.n	8008620 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800860c:	4b29      	ldr	r3, [pc, #164]	; (80086b4 <UART_SetConfig+0xb50>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	08db      	lsrs	r3, r3, #3
 8008612:	f003 0303 	and.w	r3, r3, #3
 8008616:	4a28      	ldr	r2, [pc, #160]	; (80086b8 <UART_SetConfig+0xb54>)
 8008618:	fa22 f303 	lsr.w	r3, r2, r3
 800861c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800861e:	e00f      	b.n	8008640 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8008620:	4b25      	ldr	r3, [pc, #148]	; (80086b8 <UART_SetConfig+0xb54>)
 8008622:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008624:	e00c      	b.n	8008640 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008626:	4b25      	ldr	r3, [pc, #148]	; (80086bc <UART_SetConfig+0xb58>)
 8008628:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800862a:	e009      	b.n	8008640 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800862c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008630:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008632:	e005      	b.n	8008640 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8008634:	2300      	movs	r3, #0
 8008636:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800863e:	bf00      	nop
    }

    if (pclk != 0U)
 8008640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008642:	2b00      	cmp	r3, #0
 8008644:	d021      	beq.n	800868a <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864a:	4a1d      	ldr	r2, [pc, #116]	; (80086c0 <UART_SetConfig+0xb5c>)
 800864c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008650:	461a      	mov	r2, r3
 8008652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008654:	fbb3 f2f2 	udiv	r2, r3, r2
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	085b      	lsrs	r3, r3, #1
 800865e:	441a      	add	r2, r3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	fbb2 f3f3 	udiv	r3, r2, r3
 8008668:	b29b      	uxth	r3, r3
 800866a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800866c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866e:	2b0f      	cmp	r3, #15
 8008670:	d908      	bls.n	8008684 <UART_SetConfig+0xb20>
 8008672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008678:	d204      	bcs.n	8008684 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008680:	60da      	str	r2, [r3, #12]
 8008682:	e002      	b.n	800868a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2201      	movs	r2, #1
 800868e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80086a6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3738      	adds	r7, #56	; 0x38
 80086ae:	46bd      	mov	sp, r7
 80086b0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80086b4:	58024400 	.word	0x58024400
 80086b8:	03d09000 	.word	0x03d09000
 80086bc:	003d0900 	.word	0x003d0900
 80086c0:	0800cf2c 	.word	0x0800cf2c

080086c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d0:	f003 0301 	and.w	r3, r3, #1
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00a      	beq.n	80086ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	430a      	orrs	r2, r1
 80086ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f2:	f003 0302 	and.w	r3, r3, #2
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00a      	beq.n	8008710 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	430a      	orrs	r2, r1
 800870e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008714:	f003 0304 	and.w	r3, r3, #4
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00a      	beq.n	8008732 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	430a      	orrs	r2, r1
 8008730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008736:	f003 0308 	and.w	r3, r3, #8
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00a      	beq.n	8008754 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	430a      	orrs	r2, r1
 8008752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008758:	f003 0310 	and.w	r3, r3, #16
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00a      	beq.n	8008776 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	430a      	orrs	r2, r1
 8008774:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877a:	f003 0320 	and.w	r3, r3, #32
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00a      	beq.n	8008798 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	430a      	orrs	r2, r1
 8008796:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d01a      	beq.n	80087da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	430a      	orrs	r2, r1
 80087b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087c2:	d10a      	bne.n	80087da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	430a      	orrs	r2, r1
 80087d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00a      	beq.n	80087fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	430a      	orrs	r2, r1
 80087fa:	605a      	str	r2, [r3, #4]
  }
}
 80087fc:	bf00      	nop
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af02      	add	r7, sp, #8
 800880e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008818:	f7f8 ff28 	bl	800166c <HAL_GetTick>
 800881c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 0308 	and.w	r3, r3, #8
 8008828:	2b08      	cmp	r3, #8
 800882a:	d10e      	bne.n	800884a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800882c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2200      	movs	r2, #0
 8008836:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f82c 	bl	8008898 <UART_WaitOnFlagUntilTimeout>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d001      	beq.n	800884a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008846:	2303      	movs	r3, #3
 8008848:	e022      	b.n	8008890 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 0304 	and.w	r3, r3, #4
 8008854:	2b04      	cmp	r3, #4
 8008856:	d10e      	bne.n	8008876 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008858:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2200      	movs	r2, #0
 8008862:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f816 	bl	8008898 <UART_WaitOnFlagUntilTimeout>
 800886c:	4603      	mov	r3, r0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d001      	beq.n	8008876 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008872:	2303      	movs	r3, #3
 8008874:	e00c      	b.n	8008890 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2220      	movs	r2, #32
 800887a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2220      	movs	r2, #32
 8008882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	603b      	str	r3, [r7, #0]
 80088a4:	4613      	mov	r3, r2
 80088a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088a8:	e062      	b.n	8008970 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b0:	d05e      	beq.n	8008970 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088b2:	f7f8 fedb 	bl	800166c <HAL_GetTick>
 80088b6:	4602      	mov	r2, r0
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	69ba      	ldr	r2, [r7, #24]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d302      	bcc.n	80088c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d11d      	bne.n	8008904 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80088d6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	689a      	ldr	r2, [r3, #8]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f022 0201 	bic.w	r2, r2, #1
 80088e6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2220      	movs	r2, #32
 80088ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2220      	movs	r2, #32
 80088f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008900:	2303      	movs	r3, #3
 8008902:	e045      	b.n	8008990 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 0304 	and.w	r3, r3, #4
 800890e:	2b00      	cmp	r3, #0
 8008910:	d02e      	beq.n	8008970 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	69db      	ldr	r3, [r3, #28]
 8008918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800891c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008920:	d126      	bne.n	8008970 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800892a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800893a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	689a      	ldr	r2, [r3, #8]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f022 0201 	bic.w	r2, r2, #1
 800894a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2220      	movs	r2, #32
 8008950:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2220      	movs	r2, #32
 8008958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2220      	movs	r2, #32
 8008960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800896c:	2303      	movs	r3, #3
 800896e:	e00f      	b.n	8008990 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	69da      	ldr	r2, [r3, #28]
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	4013      	ands	r3, r2
 800897a:	68ba      	ldr	r2, [r7, #8]
 800897c:	429a      	cmp	r2, r3
 800897e:	bf0c      	ite	eq
 8008980:	2301      	moveq	r3, #1
 8008982:	2300      	movne	r3, #0
 8008984:	b2db      	uxtb	r3, r3
 8008986:	461a      	mov	r2, r3
 8008988:	79fb      	ldrb	r3, [r7, #7]
 800898a:	429a      	cmp	r2, r3
 800898c:	d08d      	beq.n	80088aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008998:	b480      	push	{r7}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d101      	bne.n	80089ae <HAL_UARTEx_DisableFifoMode+0x16>
 80089aa:	2302      	movs	r3, #2
 80089ac:	e027      	b.n	80089fe <HAL_UARTEx_DisableFifoMode+0x66>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2201      	movs	r2, #1
 80089b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2224      	movs	r2, #36	; 0x24
 80089ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f022 0201 	bic.w	r2, r2, #1
 80089d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80089dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2220      	movs	r2, #32
 80089f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3714      	adds	r7, #20
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr

08008a0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b084      	sub	sp, #16
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
 8008a12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d101      	bne.n	8008a22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a1e:	2302      	movs	r3, #2
 8008a20:	e02d      	b.n	8008a7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2201      	movs	r2, #1
 8008a26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2224      	movs	r2, #36	; 0x24
 8008a2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f022 0201 	bic.w	r2, r2, #1
 8008a48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	683a      	ldr	r2, [r7, #0]
 8008a5a:	430a      	orrs	r2, r1
 8008a5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 f850 	bl	8008b04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2220      	movs	r2, #32
 8008a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b084      	sub	sp, #16
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d101      	bne.n	8008a9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008a9a:	2302      	movs	r3, #2
 8008a9c:	e02d      	b.n	8008afa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2224      	movs	r2, #36	; 0x24
 8008aaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f022 0201 	bic.w	r2, r2, #1
 8008ac4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	430a      	orrs	r2, r1
 8008ad8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 f812 	bl	8008b04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2220      	movs	r2, #32
 8008aec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
	...

08008b04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b089      	sub	sp, #36	; 0x24
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008b0c:	4a2f      	ldr	r2, [pc, #188]	; (8008bcc <UARTEx_SetNbDataToProcess+0xc8>)
 8008b0e:	f107 0314 	add.w	r3, r7, #20
 8008b12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008b16:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008b1a:	4a2d      	ldr	r2, [pc, #180]	; (8008bd0 <UARTEx_SetNbDataToProcess+0xcc>)
 8008b1c:	f107 030c 	add.w	r3, r7, #12
 8008b20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008b24:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d108      	bne.n	8008b42 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b40:	e03d      	b.n	8008bbe <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b42:	2310      	movs	r3, #16
 8008b44:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b46:	2310      	movs	r3, #16
 8008b48:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	0e5b      	lsrs	r3, r3, #25
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	f003 0307 	and.w	r3, r3, #7
 8008b58:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	0f5b      	lsrs	r3, r3, #29
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	f003 0307 	and.w	r3, r3, #7
 8008b68:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008b6a:	7fbb      	ldrb	r3, [r7, #30]
 8008b6c:	7f3a      	ldrb	r2, [r7, #28]
 8008b6e:	f107 0120 	add.w	r1, r7, #32
 8008b72:	440a      	add	r2, r1
 8008b74:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008b78:	fb02 f303 	mul.w	r3, r2, r3
 8008b7c:	7f3a      	ldrb	r2, [r7, #28]
 8008b7e:	f107 0120 	add.w	r1, r7, #32
 8008b82:	440a      	add	r2, r1
 8008b84:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008b88:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008b94:	7ffb      	ldrb	r3, [r7, #31]
 8008b96:	7f7a      	ldrb	r2, [r7, #29]
 8008b98:	f107 0120 	add.w	r1, r7, #32
 8008b9c:	440a      	add	r2, r1
 8008b9e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008ba2:	fb02 f303 	mul.w	r3, r2, r3
 8008ba6:	7f7a      	ldrb	r2, [r7, #29]
 8008ba8:	f107 0120 	add.w	r1, r7, #32
 8008bac:	440a      	add	r2, r1
 8008bae:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008bb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bb6:	b29a      	uxth	r2, r3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008bbe:	bf00      	nop
 8008bc0:	3724      	adds	r7, #36	; 0x24
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	0800cec0 	.word	0x0800cec0
 8008bd0:	0800cec8 	.word	0x0800cec8

08008bd4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008bd8:	4904      	ldr	r1, [pc, #16]	; (8008bec <MX_FATFS_Init+0x18>)
 8008bda:	4805      	ldr	r0, [pc, #20]	; (8008bf0 <MX_FATFS_Init+0x1c>)
 8008bdc:	f003 fc74 	bl	800c4c8 <FATFS_LinkDriver>
 8008be0:	4603      	mov	r3, r0
 8008be2:	461a      	mov	r2, r3
 8008be4:	4b03      	ldr	r3, [pc, #12]	; (8008bf4 <MX_FATFS_Init+0x20>)
 8008be6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008be8:	bf00      	nop
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	24000aac 	.word	0x24000aac
 8008bf0:	24000014 	.word	0x24000014
 8008bf4:	24000ab0 	.word	0x24000ab0

08008bf8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008bfc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <_Z15USER_initializeh>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	4603      	mov	r3, r0
 8008c10:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
    return USER_SPI_initialize(pdrv);
 8008c12:	79fb      	ldrb	r3, [r7, #7]
 8008c14:	4618      	mov	r0, r3
 8008c16:	f000 fa9d 	bl	8009154 <_Z19USER_SPI_initializeh>
 8008c1a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3708      	adds	r7, #8
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <_Z11USER_statush>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
    return USER_SPI_status(pdrv);
 8008c2e:	79fb      	ldrb	r3, [r7, #7]
 8008c30:	4618      	mov	r0, r3
 8008c32:	f000 fb97 	bl	8009364 <_Z15USER_SPI_statush>
 8008c36:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3708      	adds	r7, #8
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <_Z9USER_readhPhmj>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60b9      	str	r1, [r7, #8]
 8008c48:	607a      	str	r2, [r7, #4]
 8008c4a:	603b      	str	r3, [r7, #0]
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
    return USER_SPI_read(pdrv, buff, sector, count);
 8008c50:	7bf8      	ldrb	r0, [r7, #15]
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	68b9      	ldr	r1, [r7, #8]
 8008c58:	f000 fb9a 	bl	8009390 <_Z13USER_SPI_readhPhmj>
 8008c5c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <_Z10USER_writehPKhmj>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b084      	sub	sp, #16
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
 8008c70:	603b      	str	r3, [r7, #0]
 8008c72:	4603      	mov	r3, r0
 8008c74:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
    return USER_SPI_write(pdrv, buff, sector, count);
 8008c76:	7bf8      	ldrb	r0, [r7, #15]
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	68b9      	ldr	r1, [r7, #8]
 8008c7e:	f000 fc07 	bl	8009490 <_Z14USER_SPI_writehPKhmj>
 8008c82:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <_Z14USER_write_dmahPKhmj>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60b9      	str	r1, [r7, #8]
 8008c94:	607a      	str	r2, [r7, #4]
 8008c96:	603b      	str	r3, [r7, #0]
 8008c98:	4603      	mov	r3, r0
 8008c9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
    return USER_SPI_write_dma(pdrv, buff, sector, count);
 8008c9c:	7bf8      	ldrb	r0, [r7, #15]
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	68b9      	ldr	r1, [r7, #8]
 8008ca4:	f000 fc94 	bl	80095d0 <_Z18USER_SPI_write_dmahPKhmj>
 8008ca8:	4603      	mov	r3, r0
//    return USER_SPI_write_dma(pdrv, buff, sector, count);
  /* USER CODE END WRITE */
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <_Z10USER_ioctlhhPv>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b082      	sub	sp, #8
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	4603      	mov	r3, r0
 8008cba:	603a      	str	r2, [r7, #0]
 8008cbc:	71fb      	strb	r3, [r7, #7]
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8008cc2:	79b9      	ldrb	r1, [r7, #6]
 8008cc4:	79fb      	ldrb	r3, [r7, #7]
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f000 fdcf 	bl	800986c <_Z14USER_SPI_ioctlhhPv>
 8008cce:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <_Z12SPI_Timer_Onm>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8008ce0:	f7f8 fcc4 	bl	800166c <HAL_GetTick>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	4b04      	ldr	r3, [pc, #16]	; (8008cf8 <_Z12SPI_Timer_Onm+0x20>)
 8008ce8:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8008cea:	4a04      	ldr	r2, [pc, #16]	; (8008cfc <_Z12SPI_Timer_Onm+0x24>)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6013      	str	r3, [r2, #0]
}
 8008cf0:	bf00      	nop
 8008cf2:	3708      	adds	r7, #8
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	24000a64 	.word	0x24000a64
 8008cfc:	24000a68 	.word	0x24000a68

08008d00 <_Z16SPI_Timer_Statusv>:

uint8_t SPI_Timer_Status() {
 8008d00:	b580      	push	{r7, lr}
 8008d02:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8008d04:	f7f8 fcb2 	bl	800166c <HAL_GetTick>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	4b06      	ldr	r3, [pc, #24]	; (8008d24 <_Z16SPI_Timer_Statusv+0x24>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	1ad2      	subs	r2, r2, r3
 8008d10:	4b05      	ldr	r3, [pc, #20]	; (8008d28 <_Z16SPI_Timer_Statusv+0x28>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	bf34      	ite	cc
 8008d18:	2301      	movcc	r3, #1
 8008d1a:	2300      	movcs	r3, #0
 8008d1c:	b2db      	uxtb	r3, r3
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	24000a64 	.word	0x24000a64
 8008d28:	24000a68 	.word	0x24000a68

08008d2c <_ZL8xchg_spih>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b086      	sub	sp, #24
 8008d30:	af02      	add	r7, sp, #8
 8008d32:	4603      	mov	r3, r0
 8008d34:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8008d36:	f107 020f 	add.w	r2, r7, #15
 8008d3a:	1df9      	adds	r1, r7, #7
 8008d3c:	2332      	movs	r3, #50	; 0x32
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	2301      	movs	r3, #1
 8008d42:	4804      	ldr	r0, [pc, #16]	; (8008d54 <_ZL8xchg_spih+0x28>)
 8008d44:	f7fd fe94 	bl	8006a70 <HAL_SPI_TransmitReceive>
    return rxDat;
 8008d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	240000b0 	.word	0x240000b0

08008d58 <_ZL14rcvr_spi_multiPhj>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8008d58:	b590      	push	{r4, r7, lr}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8008d62:	2300      	movs	r3, #0
 8008d64:	60fb      	str	r3, [r7, #12]
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d20b      	bcs.n	8008d86 <_ZL14rcvr_spi_multiPhj+0x2e>
		*(buff+i) = xchg_spi(0xFF);
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	18d4      	adds	r4, r2, r3
 8008d74:	20ff      	movs	r0, #255	; 0xff
 8008d76:	f7ff ffd9 	bl	8008d2c <_ZL8xchg_spih>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	3301      	adds	r3, #1
 8008d82:	60fb      	str	r3, [r7, #12]
 8008d84:	e7ef      	b.n	8008d66 <_ZL14rcvr_spi_multiPhj+0xe>
	}
}
 8008d86:	bf00      	nop
 8008d88:	3714      	adds	r7, #20
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd90      	pop	{r4, r7, pc}

08008d8e <_ZL14xmit_spi_multiPKhj>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b084      	sub	sp, #16
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
 8008d96:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8008d98:	2300      	movs	r3, #0
 8008d9a:	60fb      	str	r3, [r7, #12]
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d20a      	bcs.n	8008dba <_ZL14xmit_spi_multiPKhj+0x2c>
		xchg_spi(*(buff+i));
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	4413      	add	r3, r2
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	4618      	mov	r0, r3
 8008dae:	f7ff ffbd 	bl	8008d2c <_ZL8xchg_spih>
	for(UINT i=0; i<btx; i++) {
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	3301      	adds	r3, #1
 8008db6:	60fb      	str	r3, [r7, #12]
 8008db8:	e7f0      	b.n	8008d9c <_ZL14xmit_spi_multiPKhj+0xe>
	}
}
 8008dba:	bf00      	nop
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <_ZL10wait_readyj>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b086      	sub	sp, #24
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8008dca:	f7f8 fc4f 	bl	800166c <HAL_GetTick>
 8008dce:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8008dd4:	20ff      	movs	r0, #255	; 0xff
 8008dd6:	f7ff ffa9 	bl	8008d2c <_ZL8xchg_spih>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
 8008de0:	2bff      	cmp	r3, #255	; 0xff
 8008de2:	d009      	beq.n	8008df8 <_ZL10wait_readyj+0x36>
 8008de4:	f7f8 fc42 	bl	800166c <HAL_GetTick>
 8008de8:	4602      	mov	r2, r0
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	1ad3      	subs	r3, r2, r3
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d901      	bls.n	8008df8 <_ZL10wait_readyj+0x36>
 8008df4:	2301      	movs	r3, #1
 8008df6:	e000      	b.n	8008dfa <_ZL10wait_readyj+0x38>
 8008df8:	2300      	movs	r3, #0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d000      	beq.n	8008e00 <_ZL10wait_readyj+0x3e>
	do {
 8008dfe:	e7e9      	b.n	8008dd4 <_ZL10wait_readyj+0x12>

	return (d == 0xFF) ? 1 : 0;
 8008e00:	7bfb      	ldrb	r3, [r7, #15]
 8008e02:	2bff      	cmp	r3, #255	; 0xff
 8008e04:	d101      	bne.n	8008e0a <_ZL10wait_readyj+0x48>
 8008e06:	2301      	movs	r3, #1
 8008e08:	e000      	b.n	8008e0c <_ZL10wait_readyj+0x4a>
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3718      	adds	r7, #24
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <_ZL11despiselectv>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8008e18:	2201      	movs	r2, #1
 8008e1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e1e:	4804      	ldr	r0, [pc, #16]	; (8008e30 <_ZL11despiselectv+0x1c>)
 8008e20:	f7fb fa46 	bl	80042b0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8008e24:	20ff      	movs	r0, #255	; 0xff
 8008e26:	f7ff ff81 	bl	8008d2c <_ZL8xchg_spih>

}
 8008e2a:	bf00      	nop
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	58020800 	.word	0x58020800

08008e34 <_ZL9spiselectv>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e3e:	480c      	ldr	r0, [pc, #48]	; (8008e70 <_ZL9spiselectv+0x3c>)
 8008e40:	f7fb fa36 	bl	80042b0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8008e44:	20ff      	movs	r0, #255	; 0xff
 8008e46:	f7ff ff71 	bl	8008d2c <_ZL8xchg_spih>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8008e4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008e4e:	f7ff ffb8 	bl	8008dc2 <_ZL10wait_readyj>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	bf14      	ite	ne
 8008e58:	2301      	movne	r3, #1
 8008e5a:	2300      	moveq	r3, #0
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d001      	beq.n	8008e66 <_ZL9spiselectv+0x32>
 8008e62:	2301      	movs	r3, #1
 8008e64:	e002      	b.n	8008e6c <_ZL9spiselectv+0x38>

	despiselect();
 8008e66:	f7ff ffd5 	bl	8008e14 <_ZL11despiselectv>
	return 0;	/* Timeout */
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	58020800 	.word	0x58020800

08008e74 <_ZL14rcvr_datablockPhj>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8008e7e:	20c8      	movs	r0, #200	; 0xc8
 8008e80:	f7ff ff2a 	bl	8008cd8 <_Z12SPI_Timer_Onm>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8008e84:	20ff      	movs	r0, #255	; 0xff
 8008e86:	f7ff ff51 	bl	8008d2c <_ZL8xchg_spih>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8008e8e:	7bfb      	ldrb	r3, [r7, #15]
 8008e90:	2bff      	cmp	r3, #255	; 0xff
 8008e92:	d106      	bne.n	8008ea2 <_ZL14rcvr_datablockPhj+0x2e>
 8008e94:	f7ff ff34 	bl	8008d00 <_Z16SPI_Timer_Statusv>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <_ZL14rcvr_datablockPhj+0x2e>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e000      	b.n	8008ea4 <_ZL14rcvr_datablockPhj+0x30>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d000      	beq.n	8008eaa <_ZL14rcvr_datablockPhj+0x36>
	do {							/* Wait for DataStart token in timeout of 200ms */
 8008ea8:	e7ec      	b.n	8008e84 <_ZL14rcvr_datablockPhj+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8008eaa:	7bfb      	ldrb	r3, [r7, #15]
 8008eac:	2bfe      	cmp	r3, #254	; 0xfe
 8008eae:	d001      	beq.n	8008eb4 <_ZL14rcvr_datablockPhj+0x40>
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	e00a      	b.n	8008eca <_ZL14rcvr_datablockPhj+0x56>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8008eb4:	6839      	ldr	r1, [r7, #0]
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f7ff ff4e 	bl	8008d58 <_ZL14rcvr_spi_multiPhj>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8008ebc:	20ff      	movs	r0, #255	; 0xff
 8008ebe:	f7ff ff35 	bl	8008d2c <_ZL8xchg_spih>
 8008ec2:	20ff      	movs	r0, #255	; 0xff
 8008ec4:	f7ff ff32 	bl	8008d2c <_ZL8xchg_spih>

	return 1;						/* Function succeeded */
 8008ec8:	2301      	movs	r3, #1
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <_ZL14xmit_datablockPKhh>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b084      	sub	sp, #16
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	460b      	mov	r3, r1
 8008edc:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008ede:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008ee2:	f7ff ff6e 	bl	8008dc2 <_ZL10wait_readyj>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	bf0c      	ite	eq
 8008eec:	2301      	moveq	r3, #1
 8008eee:	2300      	movne	r3, #0
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d001      	beq.n	8008efa <_ZL14xmit_datablockPKhh+0x28>
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	e01e      	b.n	8008f38 <_ZL14xmit_datablockPKhh+0x66>

	xchg_spi(token);					/* Send token */
 8008efa:	78fb      	ldrb	r3, [r7, #3]
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7ff ff15 	bl	8008d2c <_ZL8xchg_spih>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008f02:	78fb      	ldrb	r3, [r7, #3]
 8008f04:	2bfd      	cmp	r3, #253	; 0xfd
 8008f06:	d016      	beq.n	8008f36 <_ZL14xmit_datablockPKhh+0x64>
		xmit_spi_multi(buff, 512);		/* Data */
 8008f08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f7ff ff3e 	bl	8008d8e <_ZL14xmit_spi_multiPKhj>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008f12:	20ff      	movs	r0, #255	; 0xff
 8008f14:	f7ff ff0a 	bl	8008d2c <_ZL8xchg_spih>
 8008f18:	20ff      	movs	r0, #255	; 0xff
 8008f1a:	f7ff ff07 	bl	8008d2c <_ZL8xchg_spih>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8008f1e:	20ff      	movs	r0, #255	; 0xff
 8008f20:	f7ff ff04 	bl	8008d2c <_ZL8xchg_spih>
 8008f24:	4603      	mov	r3, r0
 8008f26:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8008f28:	7bfb      	ldrb	r3, [r7, #15]
 8008f2a:	f003 031f 	and.w	r3, r3, #31
 8008f2e:	2b05      	cmp	r3, #5
 8008f30:	d001      	beq.n	8008f36 <_ZL14xmit_datablockPKhh+0x64>
 8008f32:	2300      	movs	r3, #0
 8008f34:	e000      	b.n	8008f38 <_ZL14xmit_datablockPKhh+0x66>
	}
	return 1;
 8008f36:	2301      	movs	r3, #1
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <_ZL18xmit_datablock_dmaPKhh>:
static
int xmit_datablock_dma (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	460b      	mov	r3, r1
 8008f4a:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008f4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008f50:	f7ff ff37 	bl	8008dc2 <_ZL10wait_readyj>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	bf0c      	ite	eq
 8008f5a:	2301      	moveq	r3, #1
 8008f5c:	2300      	movne	r3, #0
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d001      	beq.n	8008f68 <_ZL18xmit_datablock_dmaPKhh+0x28>
 8008f64:	2300      	movs	r3, #0
 8008f66:	e022      	b.n	8008fae <_ZL18xmit_datablock_dmaPKhh+0x6e>

	xchg_spi(token);					/* Send token */
 8008f68:	78fb      	ldrb	r3, [r7, #3]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7ff fede 	bl	8008d2c <_ZL8xchg_spih>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008f70:	78fb      	ldrb	r3, [r7, #3]
 8008f72:	2bfd      	cmp	r3, #253	; 0xfd
 8008f74:	d01a      	beq.n	8008fac <_ZL18xmit_datablock_dmaPKhh+0x6c>
		HAL_SPI_Transmit_DMA(&SD_SPI_HANDLE, (uint8_t*)buff, 512);
 8008f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f7a:	6879      	ldr	r1, [r7, #4]
 8008f7c:	480e      	ldr	r0, [pc, #56]	; (8008fb8 <_ZL18xmit_datablock_dmaPKhh+0x78>)
 8008f7e:	f7fe f863 	bl	8007048 <HAL_SPI_Transmit_DMA>
		HAL_Delay(15);//15
 8008f82:	200f      	movs	r0, #15
 8008f84:	f7f8 fb7e 	bl	8001684 <HAL_Delay>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008f88:	20ff      	movs	r0, #255	; 0xff
 8008f8a:	f7ff fecf 	bl	8008d2c <_ZL8xchg_spih>
 8008f8e:	20ff      	movs	r0, #255	; 0xff
 8008f90:	f7ff fecc 	bl	8008d2c <_ZL8xchg_spih>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8008f94:	20ff      	movs	r0, #255	; 0xff
 8008f96:	f7ff fec9 	bl	8008d2c <_ZL8xchg_spih>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8008f9e:	7bfb      	ldrb	r3, [r7, #15]
 8008fa0:	f003 031f 	and.w	r3, r3, #31
 8008fa4:	2b05      	cmp	r3, #5
 8008fa6:	d001      	beq.n	8008fac <_ZL18xmit_datablock_dmaPKhh+0x6c>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	e000      	b.n	8008fae <_ZL18xmit_datablock_dmaPKhh+0x6e>
	}
	return 1;
 8008fac:	2301      	movs	r3, #1
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	240000b0 	.word	0x240000b0

08008fbc <_ZN6FatDMA14xmit_datablockEPKhh>:

int FatDMA::xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b086      	sub	sp, #24
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	71fb      	strb	r3, [r7, #7]
	BYTE resp;
	HAL_StatusTypeDef ret;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008fca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008fce:	f7ff fef8 	bl	8008dc2 <_ZL10wait_readyj>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	bf0c      	ite	eq
 8008fd8:	2301      	moveq	r3, #1
 8008fda:	2300      	movne	r3, #0
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d001      	beq.n	8008fe6 <_ZN6FatDMA14xmit_datablockEPKhh+0x2a>
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	e01b      	b.n	800901e <_ZN6FatDMA14xmit_datablockEPKhh+0x62>

	xchg_spi(token);					/* Send token */
 8008fe6:	79fb      	ldrb	r3, [r7, #7]
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7ff fe9f 	bl	8008d2c <_ZL8xchg_spih>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008fee:	79fb      	ldrb	r3, [r7, #7]
 8008ff0:	2bfd      	cmp	r3, #253	; 0xfd
 8008ff2:	d00d      	beq.n	8009010 <_ZN6FatDMA14xmit_datablockEPKhh+0x54>
	  nextBuff = buff + 512;
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	  ret = HAL_SPI_Transmit_DMA(&SD_SPI_HANDLE, (uint8_t*)buff, 512);
 8009000:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009004:	68b9      	ldr	r1, [r7, #8]
 8009006:	4808      	ldr	r0, [pc, #32]	; (8009028 <_ZN6FatDMA14xmit_datablockEPKhh+0x6c>)
 8009008:	f7fe f81e 	bl	8007048 <HAL_SPI_Transmit_DMA>
 800900c:	4603      	mov	r3, r0
 800900e:	75fb      	strb	r3, [r7, #23]
//	  ret = HAL_SPI_TransmitReceive_DMA(&SD_SPI_HANDLE, (uint8_t*)buff, (uint8_t*)resp, 512);

	}
	return ret == HAL_OK ? 1 : 0;
 8009010:	7dfb      	ldrb	r3, [r7, #23]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d101      	bne.n	800901a <_ZN6FatDMA14xmit_datablockEPKhh+0x5e>
 8009016:	2301      	movs	r3, #1
 8009018:	e000      	b.n	800901c <_ZN6FatDMA14xmit_datablockEPKhh+0x60>
 800901a:	2300      	movs	r3, #0
 800901c:	bf00      	nop
}
 800901e:	4618      	mov	r0, r3
 8009020:	3718      	adds	r7, #24
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	240000b0 	.word	0x240000b0

0800902c <_ZN6FatDMA19xmit_datablock_cpltEv>:

int FatDMA::xmit_datablock_cplt (	/* 1:OK, 0:Failed */
)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
	BYTE resp;

	xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8009032:	20ff      	movs	r0, #255	; 0xff
 8009034:	f7ff fe7a 	bl	8008d2c <_ZL8xchg_spih>
 8009038:	20ff      	movs	r0, #255	; 0xff
 800903a:	f7ff fe77 	bl	8008d2c <_ZL8xchg_spih>
	resp = xchg_spi(0xFF);				/* Receive data resp */
 800903e:	20ff      	movs	r0, #255	; 0xff
 8009040:	f7ff fe74 	bl	8008d2c <_ZL8xchg_spih>
 8009044:	4603      	mov	r3, r0
 8009046:	71fb      	strb	r3, [r7, #7]
	if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8009048:	79fb      	ldrb	r3, [r7, #7]
 800904a:	f003 031f 	and.w	r3, r3, #31
 800904e:	2b05      	cmp	r3, #5
 8009050:	d001      	beq.n	8009056 <_ZN6FatDMA19xmit_datablock_cpltEv+0x2a>
 8009052:	2300      	movs	r3, #0
 8009054:	e000      	b.n	8009058 <_ZN6FatDMA19xmit_datablock_cpltEv+0x2c>
	return 1;
 8009056:	2301      	movs	r3, #1
}
 8009058:	4618      	mov	r0, r3
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <_ZL8send_cmdhm>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	4603      	mov	r3, r0
 8009068:	6039      	str	r1, [r7, #0]
 800906a:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800906c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009070:	2b00      	cmp	r3, #0
 8009072:	da0e      	bge.n	8009092 <_ZL8send_cmdhm+0x32>
		cmd &= 0x7F;
 8009074:	79fb      	ldrb	r3, [r7, #7]
 8009076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800907a:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800907c:	2100      	movs	r1, #0
 800907e:	2037      	movs	r0, #55	; 0x37
 8009080:	f7ff ffee 	bl	8009060 <_ZL8send_cmdhm>
 8009084:	4603      	mov	r3, r0
 8009086:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8009088:	7bbb      	ldrb	r3, [r7, #14]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d901      	bls.n	8009092 <_ZL8send_cmdhm+0x32>
 800908e:	7bbb      	ldrb	r3, [r7, #14]
 8009090:	e05c      	b.n	800914c <_ZL8send_cmdhm+0xec>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8009092:	79fb      	ldrb	r3, [r7, #7]
 8009094:	2b0c      	cmp	r3, #12
 8009096:	d00d      	beq.n	80090b4 <_ZL8send_cmdhm+0x54>
		despiselect();
 8009098:	f7ff febc 	bl	8008e14 <_ZL11despiselectv>
		if (!spiselect()) return 0xFF;
 800909c:	f7ff feca 	bl	8008e34 <_ZL9spiselectv>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	bf0c      	ite	eq
 80090a6:	2301      	moveq	r3, #1
 80090a8:	2300      	movne	r3, #0
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d001      	beq.n	80090b4 <_ZL8send_cmdhm+0x54>
 80090b0:	23ff      	movs	r3, #255	; 0xff
 80090b2:	e04b      	b.n	800914c <_ZL8send_cmdhm+0xec>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80090b4:	79fb      	ldrb	r3, [r7, #7]
 80090b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	4618      	mov	r0, r3
 80090be:	f7ff fe35 	bl	8008d2c <_ZL8xchg_spih>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	0e1b      	lsrs	r3, r3, #24
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7ff fe2f 	bl	8008d2c <_ZL8xchg_spih>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	0c1b      	lsrs	r3, r3, #16
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7ff fe29 	bl	8008d2c <_ZL8xchg_spih>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	0a1b      	lsrs	r3, r3, #8
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7ff fe23 	bl	8008d2c <_ZL8xchg_spih>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7ff fe1e 	bl	8008d2c <_ZL8xchg_spih>
	n = 0x01;							/* Dummy CRC + Stop */
 80090f0:	2301      	movs	r3, #1
 80090f2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80090f4:	79fb      	ldrb	r3, [r7, #7]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d101      	bne.n	80090fe <_ZL8send_cmdhm+0x9e>
 80090fa:	2395      	movs	r3, #149	; 0x95
 80090fc:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80090fe:	79fb      	ldrb	r3, [r7, #7]
 8009100:	2b08      	cmp	r3, #8
 8009102:	d101      	bne.n	8009108 <_ZL8send_cmdhm+0xa8>
 8009104:	2387      	movs	r3, #135	; 0x87
 8009106:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8009108:	7bfb      	ldrb	r3, [r7, #15]
 800910a:	4618      	mov	r0, r3
 800910c:	f7ff fe0e 	bl	8008d2c <_ZL8xchg_spih>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8009110:	79fb      	ldrb	r3, [r7, #7]
 8009112:	2b0c      	cmp	r3, #12
 8009114:	d102      	bne.n	800911c <_ZL8send_cmdhm+0xbc>
 8009116:	20ff      	movs	r0, #255	; 0xff
 8009118:	f7ff fe08 	bl	8008d2c <_ZL8xchg_spih>
	n = 10;								/* Wait for response (10 bytes max) */
 800911c:	230a      	movs	r3, #10
 800911e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8009120:	20ff      	movs	r0, #255	; 0xff
 8009122:	f7ff fe03 	bl	8008d2c <_ZL8xchg_spih>
 8009126:	4603      	mov	r3, r0
 8009128:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800912a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800912e:	2b00      	cmp	r3, #0
 8009130:	da07      	bge.n	8009142 <_ZL8send_cmdhm+0xe2>
 8009132:	7bfb      	ldrb	r3, [r7, #15]
 8009134:	3b01      	subs	r3, #1
 8009136:	73fb      	strb	r3, [r7, #15]
 8009138:	7bfb      	ldrb	r3, [r7, #15]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <_ZL8send_cmdhm+0xe2>
 800913e:	2301      	movs	r3, #1
 8009140:	e000      	b.n	8009144 <_ZL8send_cmdhm+0xe4>
 8009142:	2300      	movs	r3, #0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d000      	beq.n	800914a <_ZL8send_cmdhm+0xea>
	do {
 8009148:	e7ea      	b.n	8009120 <_ZL8send_cmdhm+0xc0>

	return res;							/* Return received response */
 800914a:	7bbb      	ldrb	r3, [r7, #14]
}
 800914c:	4618      	mov	r0, r3
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <_Z19USER_SPI_initializeh>:
/*-----------------------------------------------------------------------*/

 DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009154:	b590      	push	{r4, r7, lr}
 8009156:	b085      	sub	sp, #20
 8009158:	af00      	add	r7, sp, #0
 800915a:	4603      	mov	r3, r0
 800915c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800915e:	79fb      	ldrb	r3, [r7, #7]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d001      	beq.n	8009168 <_Z19USER_SPI_initializeh+0x14>
 8009164:	2301      	movs	r3, #1
 8009166:	e0f3      	b.n	8009350 <_Z19USER_SPI_initializeh+0x1fc>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8009168:	4b7b      	ldr	r3, [pc, #492]	; (8009358 <_Z19USER_SPI_initializeh+0x204>)
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	b2db      	uxtb	r3, r3
 800916e:	f003 0302 	and.w	r3, r3, #2
 8009172:	2b00      	cmp	r3, #0
 8009174:	bf14      	ite	ne
 8009176:	2301      	movne	r3, #1
 8009178:	2300      	moveq	r3, #0
 800917a:	b2db      	uxtb	r3, r3
 800917c:	2b00      	cmp	r3, #0
 800917e:	d003      	beq.n	8009188 <_Z19USER_SPI_initializeh+0x34>
 8009180:	4b75      	ldr	r3, [pc, #468]	; (8009358 <_Z19USER_SPI_initializeh+0x204>)
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	b2db      	uxtb	r3, r3
 8009186:	e0e3      	b.n	8009350 <_Z19USER_SPI_initializeh+0x1fc>

	FCLK_SLOW();
 8009188:	4b74      	ldr	r3, [pc, #464]	; (800935c <_Z19USER_SPI_initializeh+0x208>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	22aa      	movs	r2, #170	; 0xaa
 800918e:	651a      	str	r2, [r3, #80]	; 0x50
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8009190:	230a      	movs	r3, #10
 8009192:	73fb      	strb	r3, [r7, #15]
 8009194:	7bfb      	ldrb	r3, [r7, #15]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d006      	beq.n	80091a8 <_Z19USER_SPI_initializeh+0x54>
 800919a:	20ff      	movs	r0, #255	; 0xff
 800919c:	f7ff fdc6 	bl	8008d2c <_ZL8xchg_spih>
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
 80091a2:	3b01      	subs	r3, #1
 80091a4:	73fb      	strb	r3, [r7, #15]
 80091a6:	e7f5      	b.n	8009194 <_Z19USER_SPI_initializeh+0x40>

	ty = 0;
 80091a8:	2300      	movs	r3, #0
 80091aa:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80091ac:	2100      	movs	r1, #0
 80091ae:	2000      	movs	r0, #0
 80091b0:	f7ff ff56 	bl	8009060 <_ZL8send_cmdhm>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	bf0c      	ite	eq
 80091ba:	2301      	moveq	r3, #1
 80091bc:	2300      	movne	r3, #0
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f000 80aa 	beq.w	800931a <_Z19USER_SPI_initializeh+0x1c6>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80091c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80091ca:	f7ff fd85 	bl	8008cd8 <_Z12SPI_Timer_Onm>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80091ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80091d2:	2008      	movs	r0, #8
 80091d4:	f7ff ff44 	bl	8009060 <_ZL8send_cmdhm>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b01      	cmp	r3, #1
 80091dc:	bf0c      	ite	eq
 80091de:	2301      	moveq	r3, #1
 80091e0:	2300      	movne	r3, #0
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d05c      	beq.n	80092a2 <_Z19USER_SPI_initializeh+0x14e>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80091e8:	2300      	movs	r3, #0
 80091ea:	73fb      	strb	r3, [r7, #15]
 80091ec:	7bfb      	ldrb	r3, [r7, #15]
 80091ee:	2b03      	cmp	r3, #3
 80091f0:	d80e      	bhi.n	8009210 <_Z19USER_SPI_initializeh+0xbc>
 80091f2:	7bfc      	ldrb	r4, [r7, #15]
 80091f4:	20ff      	movs	r0, #255	; 0xff
 80091f6:	f7ff fd99 	bl	8008d2c <_ZL8xchg_spih>
 80091fa:	4603      	mov	r3, r0
 80091fc:	461a      	mov	r2, r3
 80091fe:	f107 0310 	add.w	r3, r7, #16
 8009202:	4423      	add	r3, r4
 8009204:	f803 2c08 	strb.w	r2, [r3, #-8]
 8009208:	7bfb      	ldrb	r3, [r7, #15]
 800920a:	3301      	adds	r3, #1
 800920c:	73fb      	strb	r3, [r7, #15]
 800920e:	e7ed      	b.n	80091ec <_Z19USER_SPI_initializeh+0x98>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8009210:	7abb      	ldrb	r3, [r7, #10]
 8009212:	2b01      	cmp	r3, #1
 8009214:	f040 8081 	bne.w	800931a <_Z19USER_SPI_initializeh+0x1c6>
 8009218:	7afb      	ldrb	r3, [r7, #11]
 800921a:	2baa      	cmp	r3, #170	; 0xaa
 800921c:	d17d      	bne.n	800931a <_Z19USER_SPI_initializeh+0x1c6>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800921e:	f7ff fd6f 	bl	8008d00 <_Z16SPI_Timer_Statusv>
 8009222:	4603      	mov	r3, r0
 8009224:	2b00      	cmp	r3, #0
 8009226:	d009      	beq.n	800923c <_Z19USER_SPI_initializeh+0xe8>
 8009228:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800922c:	20a9      	movs	r0, #169	; 0xa9
 800922e:	f7ff ff17 	bl	8009060 <_ZL8send_cmdhm>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d001      	beq.n	800923c <_Z19USER_SPI_initializeh+0xe8>
 8009238:	2301      	movs	r3, #1
 800923a:	e000      	b.n	800923e <_Z19USER_SPI_initializeh+0xea>
 800923c:	2300      	movs	r3, #0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d000      	beq.n	8009244 <_Z19USER_SPI_initializeh+0xf0>
 8009242:	e7ec      	b.n	800921e <_Z19USER_SPI_initializeh+0xca>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8009244:	f7ff fd5c 	bl	8008d00 <_Z16SPI_Timer_Statusv>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d008      	beq.n	8009260 <_Z19USER_SPI_initializeh+0x10c>
 800924e:	2100      	movs	r1, #0
 8009250:	203a      	movs	r0, #58	; 0x3a
 8009252:	f7ff ff05 	bl	8009060 <_ZL8send_cmdhm>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	d101      	bne.n	8009260 <_Z19USER_SPI_initializeh+0x10c>
 800925c:	2301      	movs	r3, #1
 800925e:	e000      	b.n	8009262 <_Z19USER_SPI_initializeh+0x10e>
 8009260:	2300      	movs	r3, #0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d059      	beq.n	800931a <_Z19USER_SPI_initializeh+0x1c6>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8009266:	2300      	movs	r3, #0
 8009268:	73fb      	strb	r3, [r7, #15]
 800926a:	7bfb      	ldrb	r3, [r7, #15]
 800926c:	2b03      	cmp	r3, #3
 800926e:	d80e      	bhi.n	800928e <_Z19USER_SPI_initializeh+0x13a>
 8009270:	7bfc      	ldrb	r4, [r7, #15]
 8009272:	20ff      	movs	r0, #255	; 0xff
 8009274:	f7ff fd5a 	bl	8008d2c <_ZL8xchg_spih>
 8009278:	4603      	mov	r3, r0
 800927a:	461a      	mov	r2, r3
 800927c:	f107 0310 	add.w	r3, r7, #16
 8009280:	4423      	add	r3, r4
 8009282:	f803 2c08 	strb.w	r2, [r3, #-8]
 8009286:	7bfb      	ldrb	r3, [r7, #15]
 8009288:	3301      	adds	r3, #1
 800928a:	73fb      	strb	r3, [r7, #15]
 800928c:	e7ed      	b.n	800926a <_Z19USER_SPI_initializeh+0x116>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800928e:	7a3b      	ldrb	r3, [r7, #8]
 8009290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009294:	2b00      	cmp	r3, #0
 8009296:	d001      	beq.n	800929c <_Z19USER_SPI_initializeh+0x148>
 8009298:	230c      	movs	r3, #12
 800929a:	e000      	b.n	800929e <_Z19USER_SPI_initializeh+0x14a>
 800929c:	2304      	movs	r3, #4
 800929e:	737b      	strb	r3, [r7, #13]
 80092a0:	e03b      	b.n	800931a <_Z19USER_SPI_initializeh+0x1c6>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80092a2:	2100      	movs	r1, #0
 80092a4:	20a9      	movs	r0, #169	; 0xa9
 80092a6:	f7ff fedb 	bl	8009060 <_ZL8send_cmdhm>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	bf94      	ite	ls
 80092b0:	2301      	movls	r3, #1
 80092b2:	2300      	movhi	r3, #0
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d004      	beq.n	80092c4 <_Z19USER_SPI_initializeh+0x170>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80092ba:	2302      	movs	r3, #2
 80092bc:	737b      	strb	r3, [r7, #13]
 80092be:	23a9      	movs	r3, #169	; 0xa9
 80092c0:	73bb      	strb	r3, [r7, #14]
 80092c2:	e003      	b.n	80092cc <_Z19USER_SPI_initializeh+0x178>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80092c4:	2301      	movs	r3, #1
 80092c6:	737b      	strb	r3, [r7, #13]
 80092c8:	2301      	movs	r3, #1
 80092ca:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80092cc:	f7ff fd18 	bl	8008d00 <_Z16SPI_Timer_Statusv>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d009      	beq.n	80092ea <_Z19USER_SPI_initializeh+0x196>
 80092d6:	7bbb      	ldrb	r3, [r7, #14]
 80092d8:	2100      	movs	r1, #0
 80092da:	4618      	mov	r0, r3
 80092dc:	f7ff fec0 	bl	8009060 <_ZL8send_cmdhm>
 80092e0:	4603      	mov	r3, r0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d001      	beq.n	80092ea <_Z19USER_SPI_initializeh+0x196>
 80092e6:	2301      	movs	r3, #1
 80092e8:	e000      	b.n	80092ec <_Z19USER_SPI_initializeh+0x198>
 80092ea:	2300      	movs	r3, #0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d000      	beq.n	80092f2 <_Z19USER_SPI_initializeh+0x19e>
 80092f0:	e7ec      	b.n	80092cc <_Z19USER_SPI_initializeh+0x178>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80092f2:	f7ff fd05 	bl	8008d00 <_Z16SPI_Timer_Statusv>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d007      	beq.n	800930c <_Z19USER_SPI_initializeh+0x1b8>
 80092fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009300:	2010      	movs	r0, #16
 8009302:	f7ff fead 	bl	8009060 <_ZL8send_cmdhm>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d001      	beq.n	8009310 <_Z19USER_SPI_initializeh+0x1bc>
 800930c:	2301      	movs	r3, #1
 800930e:	e000      	b.n	8009312 <_Z19USER_SPI_initializeh+0x1be>
 8009310:	2300      	movs	r3, #0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d001      	beq.n	800931a <_Z19USER_SPI_initializeh+0x1c6>
				ty = 0;
 8009316:	2300      	movs	r3, #0
 8009318:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800931a:	4a11      	ldr	r2, [pc, #68]	; (8009360 <_Z19USER_SPI_initializeh+0x20c>)
 800931c:	7b7b      	ldrb	r3, [r7, #13]
 800931e:	7013      	strb	r3, [r2, #0]
	despiselect();
 8009320:	f7ff fd78 	bl	8008e14 <_ZL11despiselectv>

	if (ty) {			/* OK */
 8009324:	7b7b      	ldrb	r3, [r7, #13]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00c      	beq.n	8009344 <_Z19USER_SPI_initializeh+0x1f0>
		FCLK_FAST();			/* Set fast clock */
 800932a:	4b0c      	ldr	r3, [pc, #48]	; (800935c <_Z19USER_SPI_initializeh+0x208>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	220c      	movs	r2, #12
 8009330:	651a      	str	r2, [r3, #80]	; 0x50
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8009332:	4b09      	ldr	r3, [pc, #36]	; (8009358 <_Z19USER_SPI_initializeh+0x204>)
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	b2db      	uxtb	r3, r3
 8009338:	f023 0301 	bic.w	r3, r3, #1
 800933c:	b2da      	uxtb	r2, r3
 800933e:	4b06      	ldr	r3, [pc, #24]	; (8009358 <_Z19USER_SPI_initializeh+0x204>)
 8009340:	701a      	strb	r2, [r3, #0]
 8009342:	e002      	b.n	800934a <_Z19USER_SPI_initializeh+0x1f6>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8009344:	4b04      	ldr	r3, [pc, #16]	; (8009358 <_Z19USER_SPI_initializeh+0x204>)
 8009346:	2201      	movs	r2, #1
 8009348:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800934a:	4b03      	ldr	r3, [pc, #12]	; (8009358 <_Z19USER_SPI_initializeh+0x204>)
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	b2db      	uxtb	r3, r3
}
 8009350:	4618      	mov	r0, r3
 8009352:	3714      	adds	r7, #20
 8009354:	46bd      	mov	sp, r7
 8009356:	bd90      	pop	{r4, r7, pc}
 8009358:	2400002c 	.word	0x2400002c
 800935c:	240000b0 	.word	0x240000b0
 8009360:	24000a60 	.word	0x24000a60

08009364 <_Z15USER_SPI_statush>:
/*-----------------------------------------------------------------------*/

DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	4603      	mov	r3, r0
 800936c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800936e:	79fb      	ldrb	r3, [r7, #7]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d001      	beq.n	8009378 <_Z15USER_SPI_statush+0x14>
 8009374:	2301      	movs	r3, #1
 8009376:	e002      	b.n	800937e <_Z15USER_SPI_statush+0x1a>

	return Stat;	/* Return disk status */
 8009378:	4b04      	ldr	r3, [pc, #16]	; (800938c <_Z15USER_SPI_statush+0x28>)
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	b2db      	uxtb	r3, r3
}
 800937e:	4618      	mov	r0, r3
 8009380:	370c      	adds	r7, #12
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop
 800938c:	2400002c 	.word	0x2400002c

08009390 <_Z13USER_SPI_readhPhmj>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	60b9      	str	r1, [r7, #8]
 8009398:	607a      	str	r2, [r7, #4]
 800939a:	603b      	str	r3, [r7, #0]
 800939c:	4603      	mov	r3, r0
 800939e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80093a0:	7bfb      	ldrb	r3, [r7, #15]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d102      	bne.n	80093ac <_Z13USER_SPI_readhPhmj+0x1c>
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d101      	bne.n	80093b0 <_Z13USER_SPI_readhPhmj+0x20>
 80093ac:	2304      	movs	r3, #4
 80093ae:	e067      	b.n	8009480 <_Z13USER_SPI_readhPhmj+0xf0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80093b0:	4b35      	ldr	r3, [pc, #212]	; (8009488 <_Z13USER_SPI_readhPhmj+0xf8>)
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	f003 0301 	and.w	r3, r3, #1
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	bf14      	ite	ne
 80093be:	2301      	movne	r3, #1
 80093c0:	2300      	moveq	r3, #0
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d001      	beq.n	80093cc <_Z13USER_SPI_readhPhmj+0x3c>
 80093c8:	2303      	movs	r3, #3
 80093ca:	e059      	b.n	8009480 <_Z13USER_SPI_readhPhmj+0xf0>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80093cc:	4b2f      	ldr	r3, [pc, #188]	; (800948c <_Z13USER_SPI_readhPhmj+0xfc>)
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	f003 0308 	and.w	r3, r3, #8
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d102      	bne.n	80093de <_Z13USER_SPI_readhPhmj+0x4e>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	025b      	lsls	r3, r3, #9
 80093dc:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d116      	bne.n	8009412 <_Z13USER_SPI_readhPhmj+0x82>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80093e4:	6879      	ldr	r1, [r7, #4]
 80093e6:	2011      	movs	r0, #17
 80093e8:	f7ff fe3a 	bl	8009060 <_ZL8send_cmdhm>
 80093ec:	4603      	mov	r3, r0
			&& rcvr_datablock(buff, 512)) {
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d109      	bne.n	8009406 <_Z13USER_SPI_readhPhmj+0x76>
 80093f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80093f6:	68b8      	ldr	r0, [r7, #8]
 80093f8:	f7ff fd3c 	bl	8008e74 <_ZL14rcvr_datablockPhj>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d001      	beq.n	8009406 <_Z13USER_SPI_readhPhmj+0x76>
 8009402:	2301      	movs	r3, #1
 8009404:	e000      	b.n	8009408 <_Z13USER_SPI_readhPhmj+0x78>
 8009406:	2300      	movs	r3, #0
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8009408:	2b00      	cmp	r3, #0
 800940a:	d030      	beq.n	800946e <_Z13USER_SPI_readhPhmj+0xde>
			count = 0;
 800940c:	2300      	movs	r3, #0
 800940e:	603b      	str	r3, [r7, #0]
 8009410:	e02d      	b.n	800946e <_Z13USER_SPI_readhPhmj+0xde>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8009412:	6879      	ldr	r1, [r7, #4]
 8009414:	2012      	movs	r0, #18
 8009416:	f7ff fe23 	bl	8009060 <_ZL8send_cmdhm>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	bf0c      	ite	eq
 8009420:	2301      	moveq	r3, #1
 8009422:	2300      	movne	r3, #0
 8009424:	b2db      	uxtb	r3, r3
 8009426:	2b00      	cmp	r3, #0
 8009428:	d021      	beq.n	800946e <_Z13USER_SPI_readhPhmj+0xde>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800942a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800942e:	68b8      	ldr	r0, [r7, #8]
 8009430:	f7ff fd20 	bl	8008e74 <_ZL14rcvr_datablockPhj>
 8009434:	4603      	mov	r3, r0
 8009436:	2b00      	cmp	r3, #0
 8009438:	bf0c      	ite	eq
 800943a:	2301      	moveq	r3, #1
 800943c:	2300      	movne	r3, #0
 800943e:	b2db      	uxtb	r3, r3
 8009440:	2b00      	cmp	r3, #0
 8009442:	d10f      	bne.n	8009464 <_Z13USER_SPI_readhPhmj+0xd4>
				buff += 512;
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800944a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	3b01      	subs	r3, #1
 8009450:	603b      	str	r3, [r7, #0]
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	bf14      	ite	ne
 8009458:	2301      	movne	r3, #1
 800945a:	2300      	moveq	r3, #0
 800945c:	b2db      	uxtb	r3, r3
 800945e:	2b00      	cmp	r3, #0
 8009460:	d001      	beq.n	8009466 <_Z13USER_SPI_readhPhmj+0xd6>
			do {
 8009462:	e7e2      	b.n	800942a <_Z13USER_SPI_readhPhmj+0x9a>
				if (!rcvr_datablock(buff, 512)) break;
 8009464:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8009466:	2100      	movs	r1, #0
 8009468:	200c      	movs	r0, #12
 800946a:	f7ff fdf9 	bl	8009060 <_ZL8send_cmdhm>
		}
	}
	despiselect();
 800946e:	f7ff fcd1 	bl	8008e14 <_ZL11despiselectv>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d001      	beq.n	800947c <_Z13USER_SPI_readhPhmj+0xec>
 8009478:	2301      	movs	r3, #1
 800947a:	e000      	b.n	800947e <_Z13USER_SPI_readhPhmj+0xee>
 800947c:	2300      	movs	r3, #0
 800947e:	bf00      	nop
}
 8009480:	4618      	mov	r0, r3
 8009482:	3710      	adds	r7, #16
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	2400002c 	.word	0x2400002c
 800948c:	24000a60 	.word	0x24000a60

08009490 <_Z14USER_SPI_writehPKhmj>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	60b9      	str	r1, [r7, #8]
 8009498:	607a      	str	r2, [r7, #4]
 800949a:	603b      	str	r3, [r7, #0]
 800949c:	4603      	mov	r3, r0
 800949e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80094a0:	7bfb      	ldrb	r3, [r7, #15]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d102      	bne.n	80094ac <_Z14USER_SPI_writehPKhmj+0x1c>
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d101      	bne.n	80094b0 <_Z14USER_SPI_writehPKhmj+0x20>
 80094ac:	2304      	movs	r3, #4
 80094ae:	e087      	b.n	80095c0 <_Z14USER_SPI_writehPKhmj+0x130>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80094b0:	4b45      	ldr	r3, [pc, #276]	; (80095c8 <_Z14USER_SPI_writehPKhmj+0x138>)
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	f003 0301 	and.w	r3, r3, #1
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	bf14      	ite	ne
 80094be:	2301      	movne	r3, #1
 80094c0:	2300      	moveq	r3, #0
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d001      	beq.n	80094cc <_Z14USER_SPI_writehPKhmj+0x3c>
 80094c8:	2303      	movs	r3, #3
 80094ca:	e079      	b.n	80095c0 <_Z14USER_SPI_writehPKhmj+0x130>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80094cc:	4b3e      	ldr	r3, [pc, #248]	; (80095c8 <_Z14USER_SPI_writehPKhmj+0x138>)
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	f003 0304 	and.w	r3, r3, #4
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	bf14      	ite	ne
 80094da:	2301      	movne	r3, #1
 80094dc:	2300      	moveq	r3, #0
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d001      	beq.n	80094e8 <_Z14USER_SPI_writehPKhmj+0x58>
 80094e4:	2302      	movs	r3, #2
 80094e6:	e06b      	b.n	80095c0 <_Z14USER_SPI_writehPKhmj+0x130>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80094e8:	4b38      	ldr	r3, [pc, #224]	; (80095cc <_Z14USER_SPI_writehPKhmj+0x13c>)
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	f003 0308 	and.w	r3, r3, #8
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d102      	bne.n	80094fa <_Z14USER_SPI_writehPKhmj+0x6a>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	025b      	lsls	r3, r3, #9
 80094f8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d115      	bne.n	800952c <_Z14USER_SPI_writehPKhmj+0x9c>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8009500:	6879      	ldr	r1, [r7, #4]
 8009502:	2018      	movs	r0, #24
 8009504:	f7ff fdac 	bl	8009060 <_ZL8send_cmdhm>
 8009508:	4603      	mov	r3, r0
			&& xmit_datablock(buff, 0xFE)) {
 800950a:	2b00      	cmp	r3, #0
 800950c:	d108      	bne.n	8009520 <_Z14USER_SPI_writehPKhmj+0x90>
 800950e:	21fe      	movs	r1, #254	; 0xfe
 8009510:	68b8      	ldr	r0, [r7, #8]
 8009512:	f7ff fcde 	bl	8008ed2 <_ZL14xmit_datablockPKhh>
 8009516:	4603      	mov	r3, r0
 8009518:	2b00      	cmp	r3, #0
 800951a:	d001      	beq.n	8009520 <_Z14USER_SPI_writehPKhmj+0x90>
 800951c:	2301      	movs	r3, #1
 800951e:	e000      	b.n	8009522 <_Z14USER_SPI_writehPKhmj+0x92>
 8009520:	2300      	movs	r3, #0
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8009522:	2b00      	cmp	r3, #0
 8009524:	d043      	beq.n	80095ae <_Z14USER_SPI_writehPKhmj+0x11e>
			count = 0;
 8009526:	2300      	movs	r3, #0
 8009528:	603b      	str	r3, [r7, #0]
 800952a:	e040      	b.n	80095ae <_Z14USER_SPI_writehPKhmj+0x11e>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800952c:	4b27      	ldr	r3, [pc, #156]	; (80095cc <_Z14USER_SPI_writehPKhmj+0x13c>)
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	f003 0306 	and.w	r3, r3, #6
 8009534:	2b00      	cmp	r3, #0
 8009536:	d003      	beq.n	8009540 <_Z14USER_SPI_writehPKhmj+0xb0>
 8009538:	6839      	ldr	r1, [r7, #0]
 800953a:	2097      	movs	r0, #151	; 0x97
 800953c:	f7ff fd90 	bl	8009060 <_ZL8send_cmdhm>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8009540:	6879      	ldr	r1, [r7, #4]
 8009542:	2019      	movs	r0, #25
 8009544:	f7ff fd8c 	bl	8009060 <_ZL8send_cmdhm>
 8009548:	4603      	mov	r3, r0
 800954a:	2b00      	cmp	r3, #0
 800954c:	bf0c      	ite	eq
 800954e:	2301      	moveq	r3, #1
 8009550:	2300      	movne	r3, #0
 8009552:	b2db      	uxtb	r3, r3
 8009554:	2b00      	cmp	r3, #0
 8009556:	d02a      	beq.n	80095ae <_Z14USER_SPI_writehPKhmj+0x11e>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8009558:	21fc      	movs	r1, #252	; 0xfc
 800955a:	68b8      	ldr	r0, [r7, #8]
 800955c:	f7ff fcb9 	bl	8008ed2 <_ZL14xmit_datablockPKhh>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	bf0c      	ite	eq
 8009566:	2301      	moveq	r3, #1
 8009568:	2300      	movne	r3, #0
 800956a:	b2db      	uxtb	r3, r3
 800956c:	2b00      	cmp	r3, #0
 800956e:	d10f      	bne.n	8009590 <_Z14USER_SPI_writehPKhmj+0x100>
				buff += 512;
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009576:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	3b01      	subs	r3, #1
 800957c:	603b      	str	r3, [r7, #0]
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	bf14      	ite	ne
 8009584:	2301      	movne	r3, #1
 8009586:	2300      	moveq	r3, #0
 8009588:	b2db      	uxtb	r3, r3
 800958a:	2b00      	cmp	r3, #0
 800958c:	d001      	beq.n	8009592 <_Z14USER_SPI_writehPKhmj+0x102>
			do {
 800958e:	e7e3      	b.n	8009558 <_Z14USER_SPI_writehPKhmj+0xc8>
				if (!xmit_datablock(buff, 0xFC)) break;
 8009590:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8009592:	21fd      	movs	r1, #253	; 0xfd
 8009594:	2000      	movs	r0, #0
 8009596:	f7ff fc9c 	bl	8008ed2 <_ZL14xmit_datablockPKhh>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	bf0c      	ite	eq
 80095a0:	2301      	moveq	r3, #1
 80095a2:	2300      	movne	r3, #0
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <_Z14USER_SPI_writehPKhmj+0x11e>
 80095aa:	2301      	movs	r3, #1
 80095ac:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80095ae:	f7ff fc31 	bl	8008e14 <_ZL11despiselectv>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d001      	beq.n	80095bc <_Z14USER_SPI_writehPKhmj+0x12c>
 80095b8:	2301      	movs	r3, #1
 80095ba:	e000      	b.n	80095be <_Z14USER_SPI_writehPKhmj+0x12e>
 80095bc:	2300      	movs	r3, #0
 80095be:	bf00      	nop
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	2400002c 	.word	0x2400002c
 80095cc:	24000a60 	.word	0x24000a60

080095d0 <_Z18USER_SPI_write_dmahPKhmj>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60b9      	str	r1, [r7, #8]
 80095d8:	607a      	str	r2, [r7, #4]
 80095da:	603b      	str	r3, [r7, #0]
 80095dc:	4603      	mov	r3, r0
 80095de:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80095e0:	7bfb      	ldrb	r3, [r7, #15]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d102      	bne.n	80095ec <_Z18USER_SPI_write_dmahPKhmj+0x1c>
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d101      	bne.n	80095f0 <_Z18USER_SPI_write_dmahPKhmj+0x20>
 80095ec:	2304      	movs	r3, #4
 80095ee:	e087      	b.n	8009700 <_Z18USER_SPI_write_dmahPKhmj+0x130>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80095f0:	4b45      	ldr	r3, [pc, #276]	; (8009708 <_Z18USER_SPI_write_dmahPKhmj+0x138>)
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	f003 0301 	and.w	r3, r3, #1
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	bf14      	ite	ne
 80095fe:	2301      	movne	r3, #1
 8009600:	2300      	moveq	r3, #0
 8009602:	b2db      	uxtb	r3, r3
 8009604:	2b00      	cmp	r3, #0
 8009606:	d001      	beq.n	800960c <_Z18USER_SPI_write_dmahPKhmj+0x3c>
 8009608:	2303      	movs	r3, #3
 800960a:	e079      	b.n	8009700 <_Z18USER_SPI_write_dmahPKhmj+0x130>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800960c:	4b3e      	ldr	r3, [pc, #248]	; (8009708 <_Z18USER_SPI_write_dmahPKhmj+0x138>)
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	b2db      	uxtb	r3, r3
 8009612:	f003 0304 	and.w	r3, r3, #4
 8009616:	2b00      	cmp	r3, #0
 8009618:	bf14      	ite	ne
 800961a:	2301      	movne	r3, #1
 800961c:	2300      	moveq	r3, #0
 800961e:	b2db      	uxtb	r3, r3
 8009620:	2b00      	cmp	r3, #0
 8009622:	d001      	beq.n	8009628 <_Z18USER_SPI_write_dmahPKhmj+0x58>
 8009624:	2302      	movs	r3, #2
 8009626:	e06b      	b.n	8009700 <_Z18USER_SPI_write_dmahPKhmj+0x130>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8009628:	4b38      	ldr	r3, [pc, #224]	; (800970c <_Z18USER_SPI_write_dmahPKhmj+0x13c>)
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	f003 0308 	and.w	r3, r3, #8
 8009630:	2b00      	cmp	r3, #0
 8009632:	d102      	bne.n	800963a <_Z18USER_SPI_write_dmahPKhmj+0x6a>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	025b      	lsls	r3, r3, #9
 8009638:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	2b01      	cmp	r3, #1
 800963e:	d115      	bne.n	800966c <_Z18USER_SPI_write_dmahPKhmj+0x9c>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8009640:	6879      	ldr	r1, [r7, #4]
 8009642:	2018      	movs	r0, #24
 8009644:	f7ff fd0c 	bl	8009060 <_ZL8send_cmdhm>
 8009648:	4603      	mov	r3, r0
			&& xmit_datablock_dma(buff, 0xFE)) {
 800964a:	2b00      	cmp	r3, #0
 800964c:	d108      	bne.n	8009660 <_Z18USER_SPI_write_dmahPKhmj+0x90>
 800964e:	21fe      	movs	r1, #254	; 0xfe
 8009650:	68b8      	ldr	r0, [r7, #8]
 8009652:	f7ff fc75 	bl	8008f40 <_ZL18xmit_datablock_dmaPKhh>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d001      	beq.n	8009660 <_Z18USER_SPI_write_dmahPKhmj+0x90>
 800965c:	2301      	movs	r3, #1
 800965e:	e000      	b.n	8009662 <_Z18USER_SPI_write_dmahPKhmj+0x92>
 8009660:	2300      	movs	r3, #0
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8009662:	2b00      	cmp	r3, #0
 8009664:	d043      	beq.n	80096ee <_Z18USER_SPI_write_dmahPKhmj+0x11e>
			count = 0;
 8009666:	2300      	movs	r3, #0
 8009668:	603b      	str	r3, [r7, #0]
 800966a:	e040      	b.n	80096ee <_Z18USER_SPI_write_dmahPKhmj+0x11e>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800966c:	4b27      	ldr	r3, [pc, #156]	; (800970c <_Z18USER_SPI_write_dmahPKhmj+0x13c>)
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	f003 0306 	and.w	r3, r3, #6
 8009674:	2b00      	cmp	r3, #0
 8009676:	d003      	beq.n	8009680 <_Z18USER_SPI_write_dmahPKhmj+0xb0>
 8009678:	6839      	ldr	r1, [r7, #0]
 800967a:	2097      	movs	r0, #151	; 0x97
 800967c:	f7ff fcf0 	bl	8009060 <_ZL8send_cmdhm>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8009680:	6879      	ldr	r1, [r7, #4]
 8009682:	2019      	movs	r0, #25
 8009684:	f7ff fcec 	bl	8009060 <_ZL8send_cmdhm>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	bf0c      	ite	eq
 800968e:	2301      	moveq	r3, #1
 8009690:	2300      	movne	r3, #0
 8009692:	b2db      	uxtb	r3, r3
 8009694:	2b00      	cmp	r3, #0
 8009696:	d02a      	beq.n	80096ee <_Z18USER_SPI_write_dmahPKhmj+0x11e>
			do {
				if (!xmit_datablock_dma(buff, 0xFC)) break;
 8009698:	21fc      	movs	r1, #252	; 0xfc
 800969a:	68b8      	ldr	r0, [r7, #8]
 800969c:	f7ff fc50 	bl	8008f40 <_ZL18xmit_datablock_dmaPKhh>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	bf0c      	ite	eq
 80096a6:	2301      	moveq	r3, #1
 80096a8:	2300      	movne	r3, #0
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d10f      	bne.n	80096d0 <_Z18USER_SPI_write_dmahPKhmj+0x100>
				buff += 512;
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80096b6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	3b01      	subs	r3, #1
 80096bc:	603b      	str	r3, [r7, #0]
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	bf14      	ite	ne
 80096c4:	2301      	movne	r3, #1
 80096c6:	2300      	moveq	r3, #0
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d001      	beq.n	80096d2 <_Z18USER_SPI_write_dmahPKhmj+0x102>
			do {
 80096ce:	e7e3      	b.n	8009698 <_Z18USER_SPI_write_dmahPKhmj+0xc8>
				if (!xmit_datablock_dma(buff, 0xFC)) break;
 80096d0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80096d2:	21fd      	movs	r1, #253	; 0xfd
 80096d4:	2000      	movs	r0, #0
 80096d6:	f7ff fbfc 	bl	8008ed2 <_ZL14xmit_datablockPKhh>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	bf0c      	ite	eq
 80096e0:	2301      	moveq	r3, #1
 80096e2:	2300      	movne	r3, #0
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d001      	beq.n	80096ee <_Z18USER_SPI_write_dmahPKhmj+0x11e>
 80096ea:	2301      	movs	r3, #1
 80096ec:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80096ee:	f7ff fb91 	bl	8008e14 <_ZL11despiselectv>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d001      	beq.n	80096fc <_Z18USER_SPI_write_dmahPKhmj+0x12c>
 80096f8:	2301      	movs	r3, #1
 80096fa:	e000      	b.n	80096fe <_Z18USER_SPI_write_dmahPKhmj+0x12e>
 80096fc:	2300      	movs	r3, #0
 80096fe:	bf00      	nop
}
 8009700:	4618      	mov	r0, r3
 8009702:	3710      	adds	r7, #16
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}
 8009708:	2400002c 	.word	0x2400002c
 800970c:	24000a60 	.word	0x24000a60

08009710 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	607a      	str	r2, [r7, #4]
 800971a:	603b      	str	r3, [r7, #0]
 800971c:	460b      	mov	r3, r1
 800971e:	72fb      	strb	r3, [r7, #11]
	int result = 1;
 8009720:	2301      	movs	r3, #1
 8009722:	617b      	str	r3, [r7, #20]

	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009724:	7afb      	ldrb	r3, [r7, #11]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d102      	bne.n	8009730 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x20>
 800972a:	6a3b      	ldr	r3, [r7, #32]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d101      	bne.n	8009734 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x24>
 8009730:	2304      	movs	r3, #4
 8009732:	e074      	b.n	800981e <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x10e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8009734:	4b3c      	ldr	r3, [pc, #240]	; (8009828 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x118>)
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	b2db      	uxtb	r3, r3
 800973a:	f003 0301 	and.w	r3, r3, #1
 800973e:	2b00      	cmp	r3, #0
 8009740:	bf14      	ite	ne
 8009742:	2301      	movne	r3, #1
 8009744:	2300      	moveq	r3, #0
 8009746:	b2db      	uxtb	r3, r3
 8009748:	2b00      	cmp	r3, #0
 800974a:	d001      	beq.n	8009750 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x40>
 800974c:	2303      	movs	r3, #3
 800974e:	e066      	b.n	800981e <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x10e>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8009750:	4b35      	ldr	r3, [pc, #212]	; (8009828 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x118>)
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	b2db      	uxtb	r3, r3
 8009756:	f003 0304 	and.w	r3, r3, #4
 800975a:	2b00      	cmp	r3, #0
 800975c:	bf14      	ite	ne
 800975e:	2301      	movne	r3, #1
 8009760:	2300      	moveq	r3, #0
 8009762:	b2db      	uxtb	r3, r3
 8009764:	2b00      	cmp	r3, #0
 8009766:	d001      	beq.n	800976c <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x5c>
 8009768:	2302      	movs	r3, #2
 800976a:	e058      	b.n	800981e <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x10e>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800976c:	4b2f      	ldr	r3, [pc, #188]	; (800982c <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x11c>)
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	f003 0308 	and.w	r3, r3, #8
 8009774:	2b00      	cmp	r3, #0
 8009776:	d102      	bne.n	800977e <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x6e>
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	025b      	lsls	r3, r3, #9
 800977c:	603b      	str	r3, [r7, #0]

	if (count == 1) {	/* Single sector write */
 800977e:	6a3b      	ldr	r3, [r7, #32]
 8009780:	2b01      	cmp	r3, #1
 8009782:	d11e      	bne.n	80097c2 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0xb2>
		blocksLeft = 1;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2201      	movs	r2, #1
 8009788:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		multi = false;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2200      	movs	r2, #0
 8009790:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		if ((send_cmd(CMD24, sector) == 0) 	/* WRITE_BLOCK */
 8009794:	6839      	ldr	r1, [r7, #0]
 8009796:	2018      	movs	r0, #24
 8009798:	f7ff fc62 	bl	8009060 <_ZL8send_cmdhm>
 800979c:	4603      	mov	r3, r0
		    && xmit_datablock(buff, 0xFE)) { // HAL_OK on the transmit start
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d109      	bne.n	80097b6 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0xa6>
 80097a2:	22fe      	movs	r2, #254	; 0xfe
 80097a4:	6879      	ldr	r1, [r7, #4]
 80097a6:	68f8      	ldr	r0, [r7, #12]
 80097a8:	f7ff fc08 	bl	8008fbc <_ZN6FatDMA14xmit_datablockEPKhh>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d001      	beq.n	80097b6 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0xa6>
 80097b2:	2301      	movs	r3, #1
 80097b4:	e000      	b.n	80097b8 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0xa8>
 80097b6:	2300      	movs	r3, #0
		if ((send_cmd(CMD24, sector) == 0) 	/* WRITE_BLOCK */
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d02f      	beq.n	800981c <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x10c>
			result = 0;
 80097bc:	2300      	movs	r3, #0
 80097be:	617b      	str	r3, [r7, #20]
 80097c0:	e02c      	b.n	800981c <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x10c>
		}

	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80097c2:	4b1a      	ldr	r3, [pc, #104]	; (800982c <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x11c>)
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	f003 0306 	and.w	r3, r3, #6
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d003      	beq.n	80097d6 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0xc6>
 80097ce:	6a39      	ldr	r1, [r7, #32]
 80097d0:	2097      	movs	r0, #151	; 0x97
 80097d2:	f7ff fc45 	bl	8009060 <_ZL8send_cmdhm>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80097d6:	6839      	ldr	r1, [r7, #0]
 80097d8:	2019      	movs	r0, #25
 80097da:	f7ff fc41 	bl	8009060 <_ZL8send_cmdhm>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	bf0c      	ite	eq
 80097e4:	2301      	moveq	r3, #1
 80097e6:	2300      	movne	r3, #0
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d016      	beq.n	800981c <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x10c>
			blocksLeft = count;
 80097ee:	6a3a      	ldr	r2, [r7, #32]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			multi = true;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2201      	movs	r2, #1
 80097fa:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			if (xmit_datablock(buff, 0xFC)) return 0;
 80097fe:	22fc      	movs	r2, #252	; 0xfc
 8009800:	6879      	ldr	r1, [r7, #4]
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f7ff fbda 	bl	8008fbc <_ZN6FatDMA14xmit_datablockEPKhh>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	bf14      	ite	ne
 800980e:	2301      	movne	r3, #1
 8009810:	2300      	moveq	r3, #0
 8009812:	b2db      	uxtb	r3, r3
 8009814:	2b00      	cmp	r3, #0
 8009816:	d001      	beq.n	800981c <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x10c>
 8009818:	2300      	movs	r3, #0
 800981a:	e000      	b.n	800981e <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x10e>

		}
	}

	return result;	/* Return result */
 800981c:	697b      	ldr	r3, [r7, #20]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3718      	adds	r7, #24
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	2400002c 	.word	0x2400002c
 800982c:	24000a60 	.word	0x24000a60

08009830 <_ZN6FatDMA23USER_SPI_write_dma_cpltEv>:


DRESULT FatDMA::USER_SPI_write_dma_cplt (
)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
	int success = xmit_datablock_cplt();
 8009838:	f7ff fbf8 	bl	800902c <_ZN6FatDMA19xmit_datablock_cpltEv>
 800983c:	60f8      	str	r0, [r7, #12]
	if (multi) {
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8009844:	2b00      	cmp	r3, #0
 8009846:	d004      	beq.n	8009852 <_ZN6FatDMA23USER_SPI_write_dma_cpltEv+0x22>
	    xmit_datablock(0, 0xFD);	// STOP_TRAN token
 8009848:	22fd      	movs	r2, #253	; 0xfd
 800984a:	2100      	movs	r1, #0
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f7ff fbb5 	bl	8008fbc <_ZN6FatDMA14xmit_datablockEPKhh>
	}
	despiselect();
 8009852:	f7ff fadf 	bl	8008e14 <_ZL11despiselectv>

	return success ? RES_OK : RES_ERROR;	/* Return result */
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d001      	beq.n	8009860 <_ZN6FatDMA23USER_SPI_write_dma_cpltEv+0x30>
 800985c:	2300      	movs	r3, #0
 800985e:	e000      	b.n	8009862 <_ZN6FatDMA23USER_SPI_write_dma_cpltEv+0x32>
 8009860:	2301      	movs	r3, #1
}
 8009862:	4618      	mov	r0, r3
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
	...

0800986c <_Z14USER_SPI_ioctlhhPv>:
DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b08c      	sub	sp, #48	; 0x30
 8009870:	af00      	add	r7, sp, #0
 8009872:	4603      	mov	r3, r0
 8009874:	603a      	str	r2, [r7, #0]
 8009876:	71fb      	strb	r3, [r7, #7]
 8009878:	460b      	mov	r3, r1
 800987a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800987c:	79fb      	ldrb	r3, [r7, #7]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d001      	beq.n	8009886 <_Z14USER_SPI_ioctlhhPv+0x1a>
 8009882:	2304      	movs	r3, #4
 8009884:	e17d      	b.n	8009b82 <_Z14USER_SPI_ioctlhhPv+0x316>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009886:	4bba      	ldr	r3, [pc, #744]	; (8009b70 <_Z14USER_SPI_ioctlhhPv+0x304>)
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	b2db      	uxtb	r3, r3
 800988c:	f003 0301 	and.w	r3, r3, #1
 8009890:	2b00      	cmp	r3, #0
 8009892:	bf14      	ite	ne
 8009894:	2301      	movne	r3, #1
 8009896:	2300      	moveq	r3, #0
 8009898:	b2db      	uxtb	r3, r3
 800989a:	2b00      	cmp	r3, #0
 800989c:	d001      	beq.n	80098a2 <_Z14USER_SPI_ioctlhhPv+0x36>
 800989e:	2303      	movs	r3, #3
 80098a0:	e16f      	b.n	8009b82 <_Z14USER_SPI_ioctlhhPv+0x316>

	res = RES_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80098a8:	79bb      	ldrb	r3, [r7, #6]
 80098aa:	2b04      	cmp	r3, #4
 80098ac:	f200 8150 	bhi.w	8009b50 <_Z14USER_SPI_ioctlhhPv+0x2e4>
 80098b0:	a201      	add	r2, pc, #4	; (adr r2, 80098b8 <_Z14USER_SPI_ioctlhhPv+0x4c>)
 80098b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b6:	bf00      	nop
 80098b8:	080098cd 	.word	0x080098cd
 80098bc:	080098eb 	.word	0x080098eb
 80098c0:	08009b51 	.word	0x08009b51
 80098c4:	08009999 	.word	0x08009999
 80098c8:	08009aa3 	.word	0x08009aa3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80098cc:	f7ff fab2 	bl	8008e34 <_ZL9spiselectv>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	bf14      	ite	ne
 80098d6:	2301      	movne	r3, #1
 80098d8:	2300      	moveq	r3, #0
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f000 813b 	beq.w	8009b58 <_Z14USER_SPI_ioctlhhPv+0x2ec>
 80098e2:	2300      	movs	r3, #0
 80098e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80098e8:	e136      	b.n	8009b58 <_Z14USER_SPI_ioctlhhPv+0x2ec>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80098ea:	2100      	movs	r1, #0
 80098ec:	2009      	movs	r0, #9
 80098ee:	f7ff fbb7 	bl	8009060 <_ZL8send_cmdhm>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d10a      	bne.n	800990e <_Z14USER_SPI_ioctlhhPv+0xa2>
 80098f8:	f107 030c 	add.w	r3, r7, #12
 80098fc:	2110      	movs	r1, #16
 80098fe:	4618      	mov	r0, r3
 8009900:	f7ff fab8 	bl	8008e74 <_ZL14rcvr_datablockPhj>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d001      	beq.n	800990e <_Z14USER_SPI_ioctlhhPv+0xa2>
 800990a:	2301      	movs	r3, #1
 800990c:	e000      	b.n	8009910 <_Z14USER_SPI_ioctlhhPv+0xa4>
 800990e:	2300      	movs	r3, #0
 8009910:	2b00      	cmp	r3, #0
 8009912:	f000 8123 	beq.w	8009b5c <_Z14USER_SPI_ioctlhhPv+0x2f0>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8009916:	7b3b      	ldrb	r3, [r7, #12]
 8009918:	119b      	asrs	r3, r3, #6
 800991a:	2b01      	cmp	r3, #1
 800991c:	d111      	bne.n	8009942 <_Z14USER_SPI_ioctlhhPv+0xd6>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800991e:	7d7b      	ldrb	r3, [r7, #21]
 8009920:	461a      	mov	r2, r3
 8009922:	7d3b      	ldrb	r3, [r7, #20]
 8009924:	021b      	lsls	r3, r3, #8
 8009926:	4413      	add	r3, r2
 8009928:	461a      	mov	r2, r3
 800992a:	7cfb      	ldrb	r3, [r7, #19]
 800992c:	041b      	lsls	r3, r3, #16
 800992e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8009932:	4413      	add	r3, r2
 8009934:	3301      	adds	r3, #1
 8009936:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	029a      	lsls	r2, r3, #10
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	601a      	str	r2, [r3, #0]
 8009940:	e026      	b.n	8009990 <_Z14USER_SPI_ioctlhhPv+0x124>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8009942:	7c7b      	ldrb	r3, [r7, #17]
 8009944:	f003 030f 	and.w	r3, r3, #15
 8009948:	b2da      	uxtb	r2, r3
 800994a:	7dbb      	ldrb	r3, [r7, #22]
 800994c:	09db      	lsrs	r3, r3, #7
 800994e:	b2db      	uxtb	r3, r3
 8009950:	4413      	add	r3, r2
 8009952:	b2da      	uxtb	r2, r3
 8009954:	7d7b      	ldrb	r3, [r7, #21]
 8009956:	005b      	lsls	r3, r3, #1
 8009958:	b2db      	uxtb	r3, r3
 800995a:	f003 0306 	and.w	r3, r3, #6
 800995e:	b2db      	uxtb	r3, r3
 8009960:	4413      	add	r3, r2
 8009962:	b2db      	uxtb	r3, r3
 8009964:	3302      	adds	r3, #2
 8009966:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800996a:	7d3b      	ldrb	r3, [r7, #20]
 800996c:	119a      	asrs	r2, r3, #6
 800996e:	7cfb      	ldrb	r3, [r7, #19]
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	441a      	add	r2, r3
 8009974:	7cbb      	ldrb	r3, [r7, #18]
 8009976:	029b      	lsls	r3, r3, #10
 8009978:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800997c:	4413      	add	r3, r2
 800997e:	3301      	adds	r3, #1
 8009980:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8009982:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009986:	3b09      	subs	r3, #9
 8009988:	69fa      	ldr	r2, [r7, #28]
 800998a:	409a      	lsls	r2, r3
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8009990:	2300      	movs	r3, #0
 8009992:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8009996:	e0e1      	b.n	8009b5c <_Z14USER_SPI_ioctlhhPv+0x2f0>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8009998:	4b76      	ldr	r3, [pc, #472]	; (8009b74 <_Z14USER_SPI_ioctlhhPv+0x308>)
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	f003 0304 	and.w	r3, r3, #4
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d038      	beq.n	8009a16 <_Z14USER_SPI_ioctlhhPv+0x1aa>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80099a4:	2100      	movs	r1, #0
 80099a6:	208d      	movs	r0, #141	; 0x8d
 80099a8:	f7ff fb5a 	bl	8009060 <_ZL8send_cmdhm>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	bf0c      	ite	eq
 80099b2:	2301      	moveq	r3, #1
 80099b4:	2300      	movne	r3, #0
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f000 80d1 	beq.w	8009b60 <_Z14USER_SPI_ioctlhhPv+0x2f4>
				xchg_spi(0xFF);
 80099be:	20ff      	movs	r0, #255	; 0xff
 80099c0:	f7ff f9b4 	bl	8008d2c <_ZL8xchg_spih>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80099c4:	f107 030c 	add.w	r3, r7, #12
 80099c8:	2110      	movs	r1, #16
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7ff fa52 	bl	8008e74 <_ZL14rcvr_datablockPhj>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	bf14      	ite	ne
 80099d6:	2301      	movne	r3, #1
 80099d8:	2300      	moveq	r3, #0
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f000 80bf 	beq.w	8009b60 <_Z14USER_SPI_ioctlhhPv+0x2f4>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80099e2:	2330      	movs	r3, #48	; 0x30
 80099e4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80099e8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d008      	beq.n	8009a02 <_Z14USER_SPI_ioctlhhPv+0x196>
 80099f0:	20ff      	movs	r0, #255	; 0xff
 80099f2:	f7ff f99b 	bl	8008d2c <_ZL8xchg_spih>
 80099f6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80099fa:	3b01      	subs	r3, #1
 80099fc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009a00:	e7f2      	b.n	80099e8 <_Z14USER_SPI_ioctlhhPv+0x17c>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8009a02:	7dbb      	ldrb	r3, [r7, #22]
 8009a04:	111b      	asrs	r3, r3, #4
 8009a06:	2210      	movs	r2, #16
 8009a08:	409a      	lsls	r2, r3
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8009a14:	e0a4      	b.n	8009b60 <_Z14USER_SPI_ioctlhhPv+0x2f4>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8009a16:	2100      	movs	r1, #0
 8009a18:	2009      	movs	r0, #9
 8009a1a:	f7ff fb21 	bl	8009060 <_ZL8send_cmdhm>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10a      	bne.n	8009a3a <_Z14USER_SPI_ioctlhhPv+0x1ce>
 8009a24:	f107 030c 	add.w	r3, r7, #12
 8009a28:	2110      	movs	r1, #16
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7ff fa22 	bl	8008e74 <_ZL14rcvr_datablockPhj>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d001      	beq.n	8009a3a <_Z14USER_SPI_ioctlhhPv+0x1ce>
 8009a36:	2301      	movs	r3, #1
 8009a38:	e000      	b.n	8009a3c <_Z14USER_SPI_ioctlhhPv+0x1d0>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f000 808f 	beq.w	8009b60 <_Z14USER_SPI_ioctlhhPv+0x2f4>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8009a42:	4b4c      	ldr	r3, [pc, #304]	; (8009b74 <_Z14USER_SPI_ioctlhhPv+0x308>)
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	f003 0302 	and.w	r3, r3, #2
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d011      	beq.n	8009a72 <_Z14USER_SPI_ioctlhhPv+0x206>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8009a4e:	7dbb      	ldrb	r3, [r7, #22]
 8009a50:	005b      	lsls	r3, r3, #1
 8009a52:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8009a56:	7dfa      	ldrb	r2, [r7, #23]
 8009a58:	09d2      	lsrs	r2, r2, #7
 8009a5a:	b2d2      	uxtb	r2, r2
 8009a5c:	4413      	add	r3, r2
 8009a5e:	1c5a      	adds	r2, r3, #1
 8009a60:	7e7b      	ldrb	r3, [r7, #25]
 8009a62:	119b      	asrs	r3, r3, #6
 8009a64:	3b01      	subs	r3, #1
 8009a66:	fa02 f303 	lsl.w	r3, r2, r3
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	601a      	str	r2, [r3, #0]
 8009a70:	e013      	b.n	8009a9a <_Z14USER_SPI_ioctlhhPv+0x22e>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8009a72:	7dbb      	ldrb	r3, [r7, #22]
 8009a74:	109b      	asrs	r3, r3, #2
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	f003 031f 	and.w	r3, r3, #31
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	7dfa      	ldrb	r2, [r7, #23]
 8009a80:	00d2      	lsls	r2, r2, #3
 8009a82:	f002 0218 	and.w	r2, r2, #24
 8009a86:	7df9      	ldrb	r1, [r7, #23]
 8009a88:	0949      	lsrs	r1, r1, #5
 8009a8a:	b2c9      	uxtb	r1, r1
 8009a8c:	440a      	add	r2, r1
 8009a8e:	3201      	adds	r2, #1
 8009a90:	fb02 f303 	mul.w	r3, r2, r3
 8009a94:	461a      	mov	r2, r3
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8009aa0:	e05e      	b.n	8009b60 <_Z14USER_SPI_ioctlhhPv+0x2f4>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009aa2:	4b34      	ldr	r3, [pc, #208]	; (8009b74 <_Z14USER_SPI_ioctlhhPv+0x308>)
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	f003 0306 	and.w	r3, r3, #6
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d05a      	beq.n	8009b64 <_Z14USER_SPI_ioctlhhPv+0x2f8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009aae:	f107 020c 	add.w	r2, r7, #12
 8009ab2:	79fb      	ldrb	r3, [r7, #7]
 8009ab4:	210b      	movs	r1, #11
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7ff fed8 	bl	800986c <_Z14USER_SPI_ioctlhhPv>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	bf14      	ite	ne
 8009ac2:	2301      	movne	r3, #1
 8009ac4:	2300      	moveq	r3, #0
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d14d      	bne.n	8009b68 <_Z14USER_SPI_ioctlhhPv+0x2fc>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009acc:	7b3b      	ldrb	r3, [r7, #12]
 8009ace:	119b      	asrs	r3, r3, #6
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d104      	bne.n	8009ade <_Z14USER_SPI_ioctlhhPv+0x272>
 8009ad4:	7dbb      	ldrb	r3, [r7, #22]
 8009ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d046      	beq.n	8009b6c <_Z14USER_SPI_ioctlhhPv+0x300>
		dp = (DWORD*)buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	623b      	str	r3, [r7, #32]
 8009ae2:	6a3b      	ldr	r3, [r7, #32]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ae8:	6a3b      	ldr	r3, [r7, #32]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8009aee:	4b21      	ldr	r3, [pc, #132]	; (8009b74 <_Z14USER_SPI_ioctlhhPv+0x308>)
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	f003 0308 	and.w	r3, r3, #8
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d105      	bne.n	8009b06 <_Z14USER_SPI_ioctlhhPv+0x29a>
			st *= 512; ed *= 512;
 8009afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afc:	025b      	lsls	r3, r3, #9
 8009afe:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b02:	025b      	lsls	r3, r3, #9
 8009b04:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8009b06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b08:	2020      	movs	r0, #32
 8009b0a:	f7ff faa9 	bl	8009060 <_ZL8send_cmdhm>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d116      	bne.n	8009b42 <_Z14USER_SPI_ioctlhhPv+0x2d6>
 8009b14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b16:	2021      	movs	r0, #33	; 0x21
 8009b18:	f7ff faa2 	bl	8009060 <_ZL8send_cmdhm>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d10f      	bne.n	8009b42 <_Z14USER_SPI_ioctlhhPv+0x2d6>
 8009b22:	2100      	movs	r1, #0
 8009b24:	2026      	movs	r0, #38	; 0x26
 8009b26:	f7ff fa9b 	bl	8009060 <_ZL8send_cmdhm>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d108      	bne.n	8009b42 <_Z14USER_SPI_ioctlhhPv+0x2d6>
 8009b30:	f247 5030 	movw	r0, #30000	; 0x7530
 8009b34:	f7ff f945 	bl	8008dc2 <_ZL10wait_readyj>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d001      	beq.n	8009b42 <_Z14USER_SPI_ioctlhhPv+0x2d6>
 8009b3e:	2301      	movs	r3, #1
 8009b40:	e000      	b.n	8009b44 <_Z14USER_SPI_ioctlhhPv+0x2d8>
 8009b42:	2300      	movs	r3, #0
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d017      	beq.n	8009b78 <_Z14USER_SPI_ioctlhhPv+0x30c>
			res = RES_OK;	/* FatFs does not check result of this command */
 8009b48:	2300      	movs	r3, #0
 8009b4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8009b4e:	e013      	b.n	8009b78 <_Z14USER_SPI_ioctlhhPv+0x30c>

	default:
		res = RES_PARERR;
 8009b50:	2304      	movs	r3, #4
 8009b52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009b56:	e010      	b.n	8009b7a <_Z14USER_SPI_ioctlhhPv+0x30e>
		break;
 8009b58:	bf00      	nop
 8009b5a:	e00e      	b.n	8009b7a <_Z14USER_SPI_ioctlhhPv+0x30e>
		break;
 8009b5c:	bf00      	nop
 8009b5e:	e00c      	b.n	8009b7a <_Z14USER_SPI_ioctlhhPv+0x30e>
		break;
 8009b60:	bf00      	nop
 8009b62:	e00a      	b.n	8009b7a <_Z14USER_SPI_ioctlhhPv+0x30e>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009b64:	bf00      	nop
 8009b66:	e008      	b.n	8009b7a <_Z14USER_SPI_ioctlhhPv+0x30e>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009b68:	bf00      	nop
 8009b6a:	e006      	b.n	8009b7a <_Z14USER_SPI_ioctlhhPv+0x30e>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009b6c:	bf00      	nop
 8009b6e:	e004      	b.n	8009b7a <_Z14USER_SPI_ioctlhhPv+0x30e>
 8009b70:	2400002c 	.word	0x2400002c
 8009b74:	24000a60 	.word	0x24000a60
		break;
 8009b78:	bf00      	nop
	}

	despiselect();
 8009b7a:	f7ff f94b 	bl	8008e14 <_ZL11despiselectv>

	return res;
 8009b7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3730      	adds	r7, #48	; 0x30
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop

08009b8c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	4603      	mov	r3, r0
 8009b94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009b96:	79fb      	ldrb	r3, [r7, #7]
 8009b98:	4a08      	ldr	r2, [pc, #32]	; (8009bbc <disk_status+0x30>)
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	4413      	add	r3, r2
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	79fa      	ldrb	r2, [r7, #7]
 8009ba4:	4905      	ldr	r1, [pc, #20]	; (8009bbc <disk_status+0x30>)
 8009ba6:	440a      	add	r2, r1
 8009ba8:	7a12      	ldrb	r2, [r2, #8]
 8009baa:	4610      	mov	r0, r2
 8009bac:	4798      	blx	r3
 8009bae:	4603      	mov	r3, r0
 8009bb0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3710      	adds	r7, #16
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	24000a94 	.word	0x24000a94

08009bc0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009bce:	79fb      	ldrb	r3, [r7, #7]
 8009bd0:	4a0d      	ldr	r2, [pc, #52]	; (8009c08 <disk_initialize+0x48>)
 8009bd2:	5cd3      	ldrb	r3, [r2, r3]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d111      	bne.n	8009bfc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009bd8:	79fb      	ldrb	r3, [r7, #7]
 8009bda:	4a0b      	ldr	r2, [pc, #44]	; (8009c08 <disk_initialize+0x48>)
 8009bdc:	2101      	movs	r1, #1
 8009bde:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009be0:	79fb      	ldrb	r3, [r7, #7]
 8009be2:	4a09      	ldr	r2, [pc, #36]	; (8009c08 <disk_initialize+0x48>)
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	4413      	add	r3, r2
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	79fa      	ldrb	r2, [r7, #7]
 8009bee:	4906      	ldr	r1, [pc, #24]	; (8009c08 <disk_initialize+0x48>)
 8009bf0:	440a      	add	r2, r1
 8009bf2:	7a12      	ldrb	r2, [r2, #8]
 8009bf4:	4610      	mov	r0, r2
 8009bf6:	4798      	blx	r3
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	24000a94 	.word	0x24000a94

08009c0c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009c0c:	b590      	push	{r4, r7, lr}
 8009c0e:	b087      	sub	sp, #28
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60b9      	str	r1, [r7, #8]
 8009c14:	607a      	str	r2, [r7, #4]
 8009c16:	603b      	str	r3, [r7, #0]
 8009c18:	4603      	mov	r3, r0
 8009c1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009c1c:	7bfb      	ldrb	r3, [r7, #15]
 8009c1e:	4a0a      	ldr	r2, [pc, #40]	; (8009c48 <disk_read+0x3c>)
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	4413      	add	r3, r2
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	689c      	ldr	r4, [r3, #8]
 8009c28:	7bfb      	ldrb	r3, [r7, #15]
 8009c2a:	4a07      	ldr	r2, [pc, #28]	; (8009c48 <disk_read+0x3c>)
 8009c2c:	4413      	add	r3, r2
 8009c2e:	7a18      	ldrb	r0, [r3, #8]
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	68b9      	ldr	r1, [r7, #8]
 8009c36:	47a0      	blx	r4
 8009c38:	4603      	mov	r3, r0
 8009c3a:	75fb      	strb	r3, [r7, #23]
  return res;
 8009c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	371c      	adds	r7, #28
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd90      	pop	{r4, r7, pc}
 8009c46:	bf00      	nop
 8009c48:	24000a94 	.word	0x24000a94

08009c4c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009c4c:	b590      	push	{r4, r7, lr}
 8009c4e:	b087      	sub	sp, #28
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60b9      	str	r1, [r7, #8]
 8009c54:	607a      	str	r2, [r7, #4]
 8009c56:	603b      	str	r3, [r7, #0]
 8009c58:	4603      	mov	r3, r0
 8009c5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009c5c:	7bfb      	ldrb	r3, [r7, #15]
 8009c5e:	4a0a      	ldr	r2, [pc, #40]	; (8009c88 <disk_write+0x3c>)
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	4413      	add	r3, r2
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	68dc      	ldr	r4, [r3, #12]
 8009c68:	7bfb      	ldrb	r3, [r7, #15]
 8009c6a:	4a07      	ldr	r2, [pc, #28]	; (8009c88 <disk_write+0x3c>)
 8009c6c:	4413      	add	r3, r2
 8009c6e:	7a18      	ldrb	r0, [r3, #8]
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	68b9      	ldr	r1, [r7, #8]
 8009c76:	47a0      	blx	r4
 8009c78:	4603      	mov	r3, r0
 8009c7a:	75fb      	strb	r3, [r7, #23]
  return res;
 8009c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	371c      	adds	r7, #28
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd90      	pop	{r4, r7, pc}
 8009c86:	bf00      	nop
 8009c88:	24000a94 	.word	0x24000a94

08009c8c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	4603      	mov	r3, r0
 8009c94:	603a      	str	r2, [r7, #0]
 8009c96:	71fb      	strb	r3, [r7, #7]
 8009c98:	460b      	mov	r3, r1
 8009c9a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009c9c:	79fb      	ldrb	r3, [r7, #7]
 8009c9e:	4a09      	ldr	r2, [pc, #36]	; (8009cc4 <disk_ioctl+0x38>)
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	4413      	add	r3, r2
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	695b      	ldr	r3, [r3, #20]
 8009ca8:	79fa      	ldrb	r2, [r7, #7]
 8009caa:	4906      	ldr	r1, [pc, #24]	; (8009cc4 <disk_ioctl+0x38>)
 8009cac:	440a      	add	r2, r1
 8009cae:	7a10      	ldrb	r0, [r2, #8]
 8009cb0:	79b9      	ldrb	r1, [r7, #6]
 8009cb2:	683a      	ldr	r2, [r7, #0]
 8009cb4:	4798      	blx	r3
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	73fb      	strb	r3, [r7, #15]
  return res;
 8009cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3710      	adds	r7, #16
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	24000a94 	.word	0x24000a94

08009cc8 <_ZL7ld_wordPKh>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009cd8:	89fb      	ldrh	r3, [r7, #14]
 8009cda:	021b      	lsls	r3, r3, #8
 8009cdc:	b21a      	sxth	r2, r3
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	b21b      	sxth	r3, r3
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	b21b      	sxth	r3, r3
 8009ce8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009cea:	89fb      	ldrh	r3, [r7, #14]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3714      	adds	r7, #20
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr

08009cf8 <_ZL8ld_dwordPKh>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b085      	sub	sp, #20
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	3303      	adds	r3, #3
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	021b      	lsls	r3, r3, #8
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	3202      	adds	r2, #2
 8009d10:	7812      	ldrb	r2, [r2, #0]
 8009d12:	4313      	orrs	r3, r2
 8009d14:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	021b      	lsls	r3, r3, #8
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	3201      	adds	r2, #1
 8009d1e:	7812      	ldrb	r2, [r2, #0]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	021b      	lsls	r3, r3, #8
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	7812      	ldrb	r2, [r2, #0]
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	60fb      	str	r3, [r7, #12]
	return rv;
 8009d30:	68fb      	ldr	r3, [r7, #12]
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3714      	adds	r7, #20
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr

08009d3e <_ZL7st_wordPht>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009d3e:	b480      	push	{r7}
 8009d40:	b083      	sub	sp, #12
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
 8009d46:	460b      	mov	r3, r1
 8009d48:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	1c5a      	adds	r2, r3, #1
 8009d4e:	607a      	str	r2, [r7, #4]
 8009d50:	887a      	ldrh	r2, [r7, #2]
 8009d52:	b2d2      	uxtb	r2, r2
 8009d54:	701a      	strb	r2, [r3, #0]
 8009d56:	887b      	ldrh	r3, [r7, #2]
 8009d58:	121b      	asrs	r3, r3, #8
 8009d5a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	1c5a      	adds	r2, r3, #1
 8009d60:	607a      	str	r2, [r7, #4]
 8009d62:	887a      	ldrh	r2, [r7, #2]
 8009d64:	b2d2      	uxtb	r2, r2
 8009d66:	701a      	strb	r2, [r3, #0]
}
 8009d68:	bf00      	nop
 8009d6a:	370c      	adds	r7, #12
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <_ZL8st_dwordPhm>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	1c5a      	adds	r2, r3, #1
 8009d82:	607a      	str	r2, [r7, #4]
 8009d84:	683a      	ldr	r2, [r7, #0]
 8009d86:	b2d2      	uxtb	r2, r2
 8009d88:	701a      	strb	r2, [r3, #0]
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	0a1b      	lsrs	r3, r3, #8
 8009d8e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	1c5a      	adds	r2, r3, #1
 8009d94:	607a      	str	r2, [r7, #4]
 8009d96:	683a      	ldr	r2, [r7, #0]
 8009d98:	b2d2      	uxtb	r2, r2
 8009d9a:	701a      	strb	r2, [r3, #0]
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	0a1b      	lsrs	r3, r3, #8
 8009da0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	1c5a      	adds	r2, r3, #1
 8009da6:	607a      	str	r2, [r7, #4]
 8009da8:	683a      	ldr	r2, [r7, #0]
 8009daa:	b2d2      	uxtb	r2, r2
 8009dac:	701a      	strb	r2, [r3, #0]
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	0a1b      	lsrs	r3, r3, #8
 8009db2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	1c5a      	adds	r2, r3, #1
 8009db8:	607a      	str	r2, [r7, #4]
 8009dba:	683a      	ldr	r2, [r7, #0]
 8009dbc:	b2d2      	uxtb	r2, r2
 8009dbe:	701a      	strb	r2, [r3, #0]
}
 8009dc0:	bf00      	nop
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <_ZL7mem_cpyPvPKvj>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009dcc:	b480      	push	{r7}
 8009dce:	b087      	sub	sp, #28
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d013      	beq.n	8009e0e <_ZL7mem_cpyPvPKvj+0x42>
		do {
			*d++ = *s++;
 8009de6:	693a      	ldr	r2, [r7, #16]
 8009de8:	1c53      	adds	r3, r2, #1
 8009dea:	613b      	str	r3, [r7, #16]
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	1c59      	adds	r1, r3, #1
 8009df0:	6179      	str	r1, [r7, #20]
 8009df2:	7812      	ldrb	r2, [r2, #0]
 8009df4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	3b01      	subs	r3, #1
 8009dfa:	607b      	str	r3, [r7, #4]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	bf14      	ite	ne
 8009e02:	2301      	movne	r3, #1
 8009e04:	2300      	moveq	r3, #0
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d000      	beq.n	8009e0e <_ZL7mem_cpyPvPKvj+0x42>
		do {
 8009e0c:	e7eb      	b.n	8009de6 <_ZL7mem_cpyPvPKvj+0x1a>
	}
}
 8009e0e:	bf00      	nop
 8009e10:	371c      	adds	r7, #28
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr

08009e1a <_ZL7mem_setPvij>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009e1a:	b480      	push	{r7}
 8009e1c:	b087      	sub	sp, #28
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	60f8      	str	r0, [r7, #12]
 8009e22:	60b9      	str	r1, [r7, #8]
 8009e24:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	1c5a      	adds	r2, r3, #1
 8009e2e:	617a      	str	r2, [r7, #20]
 8009e30:	68ba      	ldr	r2, [r7, #8]
 8009e32:	b2d2      	uxtb	r2, r2
 8009e34:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	607b      	str	r3, [r7, #4]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	bf14      	ite	ne
 8009e42:	2301      	movne	r3, #1
 8009e44:	2300      	moveq	r3, #0
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d000      	beq.n	8009e4e <_ZL7mem_setPvij+0x34>
	do {
 8009e4c:	e7ed      	b.n	8009e2a <_ZL7mem_setPvij+0x10>
}
 8009e4e:	bf00      	nop
 8009e50:	371c      	adds	r7, #28
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr

08009e5a <_ZL7mem_cmpPKvS0_j>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009e5a:	b480      	push	{r7}
 8009e5c:	b089      	sub	sp, #36	; 0x24
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	60f8      	str	r0, [r7, #12]
 8009e62:	60b9      	str	r1, [r7, #8]
 8009e64:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	61fb      	str	r3, [r7, #28]
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	1c5a      	adds	r2, r3, #1
 8009e76:	61fa      	str	r2, [r7, #28]
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	1c5a      	adds	r2, r3, #1
 8009e80:	61ba      	str	r2, [r7, #24]
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	1acb      	subs	r3, r1, r3
 8009e86:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	607b      	str	r3, [r7, #4]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d004      	beq.n	8009e9e <_ZL7mem_cmpPKvS0_j+0x44>
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d101      	bne.n	8009e9e <_ZL7mem_cmpPKvS0_j+0x44>
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e000      	b.n	8009ea0 <_ZL7mem_cmpPKvS0_j+0x46>
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d000      	beq.n	8009ea6 <_ZL7mem_cmpPKvS0_j+0x4c>
	do {
 8009ea4:	e7e5      	b.n	8009e72 <_ZL7mem_cmpPKvS0_j+0x18>

	return r;
 8009ea6:	697b      	ldr	r3, [r7, #20]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3724      	adds	r7, #36	; 0x24
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <_ZL7chk_chrPKci>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009eb4:	b480      	push	{r7}
 8009eb6:	b083      	sub	sp, #12
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d009      	beq.n	8009eda <_ZL7chk_chrPKci+0x26>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	461a      	mov	r2, r3
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d003      	beq.n	8009eda <_ZL7chk_chrPKci+0x26>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	607b      	str	r3, [r7, #4]
 8009ed8:	e7f1      	b.n	8009ebe <_ZL7chk_chrPKci+0xa>
	return *str;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	781b      	ldrb	r3, [r3, #0]
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	370c      	adds	r7, #12
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr
	...

08009eec <_ZL8chk_lockP3DIRi>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	60bb      	str	r3, [r7, #8]
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	60fb      	str	r3, [r7, #12]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d82a      	bhi.n	8009f5a <_ZL8chk_lockP3DIRi+0x6e>
		if (Files[i].fs) {	/* Existing entry */
 8009f04:	4a26      	ldr	r2, [pc, #152]	; (8009fa0 <_ZL8chk_lockP3DIRi+0xb4>)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	011b      	lsls	r3, r3, #4
 8009f0a:	4413      	add	r3, r2
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d01d      	beq.n	8009f4e <_ZL8chk_lockP3DIRi+0x62>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009f12:	4a23      	ldr	r2, [pc, #140]	; (8009fa0 <_ZL8chk_lockP3DIRi+0xb4>)
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	011b      	lsls	r3, r3, #4
 8009f18:	4413      	add	r3, r2
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d116      	bne.n	8009f52 <_ZL8chk_lockP3DIRi+0x66>
				Files[i].clu == dp->obj.sclust &&
 8009f24:	4a1e      	ldr	r2, [pc, #120]	; (8009fa0 <_ZL8chk_lockP3DIRi+0xb4>)
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	011b      	lsls	r3, r3, #4
 8009f2a:	4413      	add	r3, r2
 8009f2c:	3304      	adds	r3, #4
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d10c      	bne.n	8009f52 <_ZL8chk_lockP3DIRi+0x66>
				Files[i].ofs == dp->dptr) break;
 8009f38:	4a19      	ldr	r2, [pc, #100]	; (8009fa0 <_ZL8chk_lockP3DIRi+0xb4>)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	011b      	lsls	r3, r3, #4
 8009f3e:	4413      	add	r3, r2
 8009f40:	3308      	adds	r3, #8
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d102      	bne.n	8009f52 <_ZL8chk_lockP3DIRi+0x66>
				Files[i].ofs == dp->dptr) break;
 8009f4c:	e005      	b.n	8009f5a <_ZL8chk_lockP3DIRi+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	3301      	adds	r3, #1
 8009f56:	60fb      	str	r3, [r7, #12]
 8009f58:	e7d1      	b.n	8009efe <_ZL8chk_lockP3DIRi+0x12>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	d109      	bne.n	8009f74 <_ZL8chk_lockP3DIRi+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d102      	bne.n	8009f6c <_ZL8chk_lockP3DIRi+0x80>
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	2b02      	cmp	r3, #2
 8009f6a:	d101      	bne.n	8009f70 <_ZL8chk_lockP3DIRi+0x84>
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	e011      	b.n	8009f94 <_ZL8chk_lockP3DIRi+0xa8>
 8009f70:	2312      	movs	r3, #18
 8009f72:	e00f      	b.n	8009f94 <_ZL8chk_lockP3DIRi+0xa8>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d108      	bne.n	8009f8c <_ZL8chk_lockP3DIRi+0xa0>
 8009f7a:	4a09      	ldr	r2, [pc, #36]	; (8009fa0 <_ZL8chk_lockP3DIRi+0xb4>)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	011b      	lsls	r3, r3, #4
 8009f80:	4413      	add	r3, r2
 8009f82:	330c      	adds	r3, #12
 8009f84:	881b      	ldrh	r3, [r3, #0]
 8009f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f8a:	d101      	bne.n	8009f90 <_ZL8chk_lockP3DIRi+0xa4>
 8009f8c:	2310      	movs	r3, #16
 8009f8e:	e000      	b.n	8009f92 <_ZL8chk_lockP3DIRi+0xa6>
 8009f90:	2300      	movs	r3, #0
 8009f92:	bf00      	nop
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3714      	adds	r7, #20
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr
 8009fa0:	24000a74 	.word	0x24000a74

08009fa4 <_ZL8enq_lockv>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009faa:	2300      	movs	r3, #0
 8009fac:	607b      	str	r3, [r7, #4]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d80a      	bhi.n	8009fca <_ZL8enq_lockv+0x26>
 8009fb4:	4a0b      	ldr	r2, [pc, #44]	; (8009fe4 <_ZL8enq_lockv+0x40>)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	011b      	lsls	r3, r3, #4
 8009fba:	4413      	add	r3, r2
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d003      	beq.n	8009fca <_ZL8enq_lockv+0x26>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	607b      	str	r3, [r7, #4]
 8009fc8:	e7f1      	b.n	8009fae <_ZL8enq_lockv+0xa>
	return (i == _FS_LOCK) ? 0 : 1;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2b02      	cmp	r3, #2
 8009fce:	bf14      	ite	ne
 8009fd0:	2301      	movne	r3, #1
 8009fd2:	2300      	moveq	r3, #0
 8009fd4:	b2db      	uxtb	r3, r3
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	370c      	adds	r7, #12
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop
 8009fe4:	24000a74 	.word	0x24000a74

08009fe8 <_ZL8inc_lockP3DIRi>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	60fb      	str	r3, [r7, #12]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d821      	bhi.n	800a040 <_ZL8inc_lockP3DIRi+0x58>
		if (Files[i].fs == dp->obj.fs &&
 8009ffc:	4a40      	ldr	r2, [pc, #256]	; (800a100 <_ZL8inc_lockP3DIRi+0x118>)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	011b      	lsls	r3, r3, #4
 800a002:	4413      	add	r3, r2
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d113      	bne.n	800a036 <_ZL8inc_lockP3DIRi+0x4e>
			Files[i].clu == dp->obj.sclust &&
 800a00e:	4a3c      	ldr	r2, [pc, #240]	; (800a100 <_ZL8inc_lockP3DIRi+0x118>)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	011b      	lsls	r3, r3, #4
 800a014:	4413      	add	r3, r2
 800a016:	3304      	adds	r3, #4
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a01e:	429a      	cmp	r2, r3
 800a020:	d109      	bne.n	800a036 <_ZL8inc_lockP3DIRi+0x4e>
			Files[i].ofs == dp->dptr) break;
 800a022:	4a37      	ldr	r2, [pc, #220]	; (800a100 <_ZL8inc_lockP3DIRi+0x118>)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	011b      	lsls	r3, r3, #4
 800a028:	4413      	add	r3, r2
 800a02a:	3308      	adds	r3, #8
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a032:	429a      	cmp	r2, r3
 800a034:	d003      	beq.n	800a03e <_ZL8inc_lockP3DIRi+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	3301      	adds	r3, #1
 800a03a:	60fb      	str	r3, [r7, #12]
 800a03c:	e7db      	b.n	8009ff6 <_ZL8inc_lockP3DIRi+0xe>
			Files[i].ofs == dp->dptr) break;
 800a03e:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2b02      	cmp	r3, #2
 800a044:	d132      	bne.n	800a0ac <_ZL8inc_lockP3DIRi+0xc4>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a046:	2300      	movs	r3, #0
 800a048:	60fb      	str	r3, [r7, #12]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d80a      	bhi.n	800a066 <_ZL8inc_lockP3DIRi+0x7e>
 800a050:	4a2b      	ldr	r2, [pc, #172]	; (800a100 <_ZL8inc_lockP3DIRi+0x118>)
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	011b      	lsls	r3, r3, #4
 800a056:	4413      	add	r3, r2
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d003      	beq.n	800a066 <_ZL8inc_lockP3DIRi+0x7e>
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	3301      	adds	r3, #1
 800a062:	60fb      	str	r3, [r7, #12]
 800a064:	e7f1      	b.n	800a04a <_ZL8inc_lockP3DIRi+0x62>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2b02      	cmp	r3, #2
 800a06a:	d101      	bne.n	800a070 <_ZL8inc_lockP3DIRi+0x88>
 800a06c:	2300      	movs	r3, #0
 800a06e:	e040      	b.n	800a0f2 <_ZL8inc_lockP3DIRi+0x10a>
		Files[i].fs = dp->obj.fs;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	4922      	ldr	r1, [pc, #136]	; (800a100 <_ZL8inc_lockP3DIRi+0x118>)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	011b      	lsls	r3, r3, #4
 800a07a:	440b      	add	r3, r1
 800a07c:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	689a      	ldr	r2, [r3, #8]
 800a082:	491f      	ldr	r1, [pc, #124]	; (800a100 <_ZL8inc_lockP3DIRi+0x118>)
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	011b      	lsls	r3, r3, #4
 800a088:	440b      	add	r3, r1
 800a08a:	3304      	adds	r3, #4
 800a08c:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	695a      	ldr	r2, [r3, #20]
 800a092:	491b      	ldr	r1, [pc, #108]	; (800a100 <_ZL8inc_lockP3DIRi+0x118>)
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	011b      	lsls	r3, r3, #4
 800a098:	440b      	add	r3, r1
 800a09a:	3308      	adds	r3, #8
 800a09c:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a09e:	4a18      	ldr	r2, [pc, #96]	; (800a100 <_ZL8inc_lockP3DIRi+0x118>)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	011b      	lsls	r3, r3, #4
 800a0a4:	4413      	add	r3, r2
 800a0a6:	330c      	adds	r3, #12
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d009      	beq.n	800a0c6 <_ZL8inc_lockP3DIRi+0xde>
 800a0b2:	4a13      	ldr	r2, [pc, #76]	; (800a100 <_ZL8inc_lockP3DIRi+0x118>)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	011b      	lsls	r3, r3, #4
 800a0b8:	4413      	add	r3, r2
 800a0ba:	330c      	adds	r3, #12
 800a0bc:	881b      	ldrh	r3, [r3, #0]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d001      	beq.n	800a0c6 <_ZL8inc_lockP3DIRi+0xde>
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	e015      	b.n	800a0f2 <_ZL8inc_lockP3DIRi+0x10a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d108      	bne.n	800a0de <_ZL8inc_lockP3DIRi+0xf6>
 800a0cc:	4a0c      	ldr	r2, [pc, #48]	; (800a100 <_ZL8inc_lockP3DIRi+0x118>)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	011b      	lsls	r3, r3, #4
 800a0d2:	4413      	add	r3, r2
 800a0d4:	330c      	adds	r3, #12
 800a0d6:	881b      	ldrh	r3, [r3, #0]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	b29a      	uxth	r2, r3
 800a0dc:	e001      	b.n	800a0e2 <_ZL8inc_lockP3DIRi+0xfa>
 800a0de:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a0e2:	4907      	ldr	r1, [pc, #28]	; (800a100 <_ZL8inc_lockP3DIRi+0x118>)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	011b      	lsls	r3, r3, #4
 800a0e8:	440b      	add	r3, r1
 800a0ea:	330c      	adds	r3, #12
 800a0ec:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	3301      	adds	r3, #1
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3714      	adds	r7, #20
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr
 800a0fe:	bf00      	nop
 800a100:	24000a74 	.word	0x24000a74

0800a104 <_ZL8dec_lockj>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a104:	b480      	push	{r7}
 800a106:	b085      	sub	sp, #20
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	3b01      	subs	r3, #1
 800a110:	607b      	str	r3, [r7, #4]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2b01      	cmp	r3, #1
 800a116:	bf94      	ite	ls
 800a118:	2301      	movls	r3, #1
 800a11a:	2300      	movhi	r3, #0
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d025      	beq.n	800a16e <_ZL8dec_lockj+0x6a>
		n = Files[i].ctr;
 800a122:	4a17      	ldr	r2, [pc, #92]	; (800a180 <_ZL8dec_lockj+0x7c>)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	011b      	lsls	r3, r3, #4
 800a128:	4413      	add	r3, r2
 800a12a:	330c      	adds	r3, #12
 800a12c:	881b      	ldrh	r3, [r3, #0]
 800a12e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a130:	89fb      	ldrh	r3, [r7, #14]
 800a132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a136:	d101      	bne.n	800a13c <_ZL8dec_lockj+0x38>
 800a138:	2300      	movs	r3, #0
 800a13a:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a13c:	89fb      	ldrh	r3, [r7, #14]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d002      	beq.n	800a148 <_ZL8dec_lockj+0x44>
 800a142:	89fb      	ldrh	r3, [r7, #14]
 800a144:	3b01      	subs	r3, #1
 800a146:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a148:	4a0d      	ldr	r2, [pc, #52]	; (800a180 <_ZL8dec_lockj+0x7c>)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	011b      	lsls	r3, r3, #4
 800a14e:	4413      	add	r3, r2
 800a150:	330c      	adds	r3, #12
 800a152:	89fa      	ldrh	r2, [r7, #14]
 800a154:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a156:	89fb      	ldrh	r3, [r7, #14]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d105      	bne.n	800a168 <_ZL8dec_lockj+0x64>
 800a15c:	4a08      	ldr	r2, [pc, #32]	; (800a180 <_ZL8dec_lockj+0x7c>)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	011b      	lsls	r3, r3, #4
 800a162:	4413      	add	r3, r2
 800a164:	2200      	movs	r2, #0
 800a166:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a168:	2300      	movs	r3, #0
 800a16a:	737b      	strb	r3, [r7, #13]
 800a16c:	e001      	b.n	800a172 <_ZL8dec_lockj+0x6e>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a16e:	2302      	movs	r3, #2
 800a170:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a172:	7b7b      	ldrb	r3, [r7, #13]
}
 800a174:	4618      	mov	r0, r3
 800a176:	3714      	adds	r7, #20
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr
 800a180:	24000a74 	.word	0x24000a74

0800a184 <_ZL10clear_lockP5FATFS>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a184:	b480      	push	{r7}
 800a186:	b085      	sub	sp, #20
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a18c:	2300      	movs	r3, #0
 800a18e:	60fb      	str	r3, [r7, #12]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2b01      	cmp	r3, #1
 800a194:	d811      	bhi.n	800a1ba <_ZL10clear_lockP5FATFS+0x36>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a196:	4a0c      	ldr	r2, [pc, #48]	; (800a1c8 <_ZL10clear_lockP5FATFS+0x44>)
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	011b      	lsls	r3, r3, #4
 800a19c:	4413      	add	r3, r2
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d105      	bne.n	800a1b2 <_ZL10clear_lockP5FATFS+0x2e>
 800a1a6:	4a08      	ldr	r2, [pc, #32]	; (800a1c8 <_ZL10clear_lockP5FATFS+0x44>)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	011b      	lsls	r3, r3, #4
 800a1ac:	4413      	add	r3, r2
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	60fb      	str	r3, [r7, #12]
 800a1b8:	e7ea      	b.n	800a190 <_ZL10clear_lockP5FATFS+0xc>
	}
}
 800a1ba:	bf00      	nop
 800a1bc:	3714      	adds	r7, #20
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr
 800a1c6:	bf00      	nop
 800a1c8:	24000a74 	.word	0x24000a74

0800a1cc <_ZL11sync_windowP5FATFS>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b086      	sub	sp, #24
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	78db      	ldrb	r3, [r3, #3]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d039      	beq.n	800a254 <_ZL11sync_windowP5FATFS+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	7858      	ldrb	r0, [r3, #1]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	697a      	ldr	r2, [r7, #20]
 800a1f4:	f7ff fd2a 	bl	8009c4c <disk_write>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	bf14      	ite	ne
 800a1fe:	2301      	movne	r3, #1
 800a200:	2300      	moveq	r3, #0
 800a202:	b2db      	uxtb	r3, r3
 800a204:	2b00      	cmp	r3, #0
 800a206:	d002      	beq.n	800a20e <_ZL11sync_windowP5FATFS+0x42>
			res = FR_DISK_ERR;
 800a208:	2301      	movs	r3, #1
 800a20a:	73fb      	strb	r3, [r7, #15]
 800a20c:	e022      	b.n	800a254 <_ZL11sync_windowP5FATFS+0x88>
		} else {
			fs->wflag = 0;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a1b      	ldr	r3, [r3, #32]
 800a218:	697a      	ldr	r2, [r7, #20]
 800a21a:	1ad2      	subs	r2, r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	699b      	ldr	r3, [r3, #24]
 800a220:	429a      	cmp	r2, r3
 800a222:	d217      	bcs.n	800a254 <_ZL11sync_windowP5FATFS+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	789b      	ldrb	r3, [r3, #2]
 800a228:	613b      	str	r3, [r7, #16]
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d911      	bls.n	800a254 <_ZL11sync_windowP5FATFS+0x88>
					wsect += fs->fsize;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	699b      	ldr	r3, [r3, #24]
 800a234:	697a      	ldr	r2, [r7, #20]
 800a236:	4413      	add	r3, r2
 800a238:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	7858      	ldrb	r0, [r3, #1]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a244:	2301      	movs	r3, #1
 800a246:	697a      	ldr	r2, [r7, #20]
 800a248:	f7ff fd00 	bl	8009c4c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	3b01      	subs	r3, #1
 800a250:	613b      	str	r3, [r7, #16]
 800a252:	e7ea      	b.n	800a22a <_ZL11sync_windowP5FATFS+0x5e>
				}
			}
		}
	}
	return res;
 800a254:	7bfb      	ldrb	r3, [r7, #15]
}
 800a256:	4618      	mov	r0, r3
 800a258:	3718      	adds	r7, #24
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <_ZL11move_windowP5FATFSm>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b084      	sub	sp, #16
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
 800a266:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a268:	2300      	movs	r3, #0
 800a26a:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a270:	683a      	ldr	r2, [r7, #0]
 800a272:	429a      	cmp	r2, r3
 800a274:	d020      	beq.n	800a2b8 <_ZL11move_windowP5FATFSm+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f7ff ffa8 	bl	800a1cc <_ZL11sync_windowP5FATFS>
 800a27c:	4603      	mov	r3, r0
 800a27e:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a280:	7bfb      	ldrb	r3, [r7, #15]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d118      	bne.n	800a2b8 <_ZL11move_windowP5FATFSm+0x5a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	7858      	ldrb	r0, [r3, #1]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a290:	2301      	movs	r3, #1
 800a292:	683a      	ldr	r2, [r7, #0]
 800a294:	f7ff fcba 	bl	8009c0c <disk_read>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	bf14      	ite	ne
 800a29e:	2301      	movne	r3, #1
 800a2a0:	2300      	moveq	r3, #0
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d004      	beq.n	800a2b2 <_ZL11move_windowP5FATFSm+0x54>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a2a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	683a      	ldr	r2, [r7, #0]
 800a2b6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800a2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
	...

0800a2c4 <_ZL7sync_fsP5FATFS>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f7ff ff7d 	bl	800a1cc <_ZL11sync_windowP5FATFS>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a2d6:	7bfb      	ldrb	r3, [r7, #15]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d15d      	bne.n	800a398 <_ZL7sync_fsP5FATFS+0xd4>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	2b03      	cmp	r3, #3
 800a2e2:	d148      	bne.n	800a376 <_ZL7sync_fsP5FATFS+0xb2>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	791b      	ldrb	r3, [r3, #4]
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d144      	bne.n	800a376 <_ZL7sync_fsP5FATFS+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	3330      	adds	r3, #48	; 0x30
 800a2f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f7ff fd8f 	bl	8009e1a <_ZL7mem_setPvij>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	3330      	adds	r3, #48	; 0x30
 800a300:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a304:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a308:	4618      	mov	r0, r3
 800a30a:	f7ff fd18 	bl	8009d3e <_ZL7st_wordPht>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	3330      	adds	r3, #48	; 0x30
 800a312:	4924      	ldr	r1, [pc, #144]	; (800a3a4 <_ZL7sync_fsP5FATFS+0xe0>)
 800a314:	4618      	mov	r0, r3
 800a316:	f7ff fd2d 	bl	8009d74 <_ZL8st_dwordPhm>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	3330      	adds	r3, #48	; 0x30
 800a31e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a322:	4921      	ldr	r1, [pc, #132]	; (800a3a8 <_ZL7sync_fsP5FATFS+0xe4>)
 800a324:	4618      	mov	r0, r3
 800a326:	f7ff fd25 	bl	8009d74 <_ZL8st_dwordPhm>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	3330      	adds	r3, #48	; 0x30
 800a32e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	691b      	ldr	r3, [r3, #16]
 800a336:	4619      	mov	r1, r3
 800a338:	4610      	mov	r0, r2
 800a33a:	f7ff fd1b 	bl	8009d74 <_ZL8st_dwordPhm>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	3330      	adds	r3, #48	; 0x30
 800a342:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	4619      	mov	r1, r3
 800a34c:	4610      	mov	r0, r2
 800a34e:	f7ff fd11 	bl	8009d74 <_ZL8st_dwordPhm>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	69db      	ldr	r3, [r3, #28]
 800a356:	1c5a      	adds	r2, r3, #1
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	7858      	ldrb	r0, [r3, #1]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a36a:	2301      	movs	r3, #1
 800a36c:	f7ff fc6e 	bl	8009c4c <disk_write>
			fs->fsi_flag = 0;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	785b      	ldrb	r3, [r3, #1]
 800a37a:	2200      	movs	r2, #0
 800a37c:	2100      	movs	r1, #0
 800a37e:	4618      	mov	r0, r3
 800a380:	f7ff fc84 	bl	8009c8c <disk_ioctl>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	bf14      	ite	ne
 800a38a:	2301      	movne	r3, #1
 800a38c:	2300      	moveq	r3, #0
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	2b00      	cmp	r3, #0
 800a392:	d001      	beq.n	800a398 <_ZL7sync_fsP5FATFS+0xd4>
 800a394:	2301      	movs	r3, #1
 800a396:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a398:	7bfb      	ldrb	r3, [r7, #15]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	41615252 	.word	0x41615252
 800a3a8:	61417272 	.word	0x61417272

0800a3ac <_ZL10clust2sectP5FATFSm>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	3b02      	subs	r3, #2
 800a3ba:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	695b      	ldr	r3, [r3, #20]
 800a3c0:	3b02      	subs	r3, #2
 800a3c2:	683a      	ldr	r2, [r7, #0]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d301      	bcc.n	800a3cc <_ZL10clust2sectP5FATFSm+0x20>
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	e008      	b.n	800a3de <_ZL10clust2sectP5FATFSm+0x32>
	return clst * fs->csize + fs->database;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	895b      	ldrh	r3, [r3, #10]
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	fb03 f202 	mul.w	r2, r3, r2
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3dc:	4413      	add	r3, r2
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	370c      	adds	r7, #12
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr

0800a3ea <_ZL7get_fatP5_FDIDm>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b086      	sub	sp, #24
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
 800a3f2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d904      	bls.n	800a40a <_ZL7get_fatP5_FDIDm+0x20>
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	695b      	ldr	r3, [r3, #20]
 800a404:	683a      	ldr	r2, [r7, #0]
 800a406:	429a      	cmp	r2, r3
 800a408:	d302      	bcc.n	800a410 <_ZL7get_fatP5_FDIDm+0x26>
		val = 1;	/* Internal error */
 800a40a:	2301      	movs	r3, #1
 800a40c:	617b      	str	r3, [r7, #20]
 800a40e:	e0a1      	b.n	800a554 <_ZL7get_fatP5_FDIDm+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a410:	f04f 33ff 	mov.w	r3, #4294967295
 800a414:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	d050      	beq.n	800a4c0 <_ZL7get_fatP5_FDIDm+0xd6>
 800a41e:	2b03      	cmp	r3, #3
 800a420:	d06d      	beq.n	800a4fe <_ZL7get_fatP5_FDIDm+0x114>
 800a422:	2b01      	cmp	r3, #1
 800a424:	f040 808c 	bne.w	800a540 <_ZL7get_fatP5_FDIDm+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	60fb      	str	r3, [r7, #12]
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	085b      	lsrs	r3, r3, #1
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	4413      	add	r3, r2
 800a434:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	6a1a      	ldr	r2, [r3, #32]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	0a5b      	lsrs	r3, r3, #9
 800a43e:	4413      	add	r3, r2
 800a440:	4619      	mov	r1, r3
 800a442:	6938      	ldr	r0, [r7, #16]
 800a444:	f7ff ff0b 	bl	800a25e <_ZL11move_windowP5FATFSm>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	bf14      	ite	ne
 800a44e:	2301      	movne	r3, #1
 800a450:	2300      	moveq	r3, #0
 800a452:	b2db      	uxtb	r3, r3
 800a454:	2b00      	cmp	r3, #0
 800a456:	d176      	bne.n	800a546 <_ZL7get_fatP5_FDIDm+0x15c>
			wc = fs->win[bc++ % SS(fs)];
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	1c5a      	adds	r2, r3, #1
 800a45c:	60fa      	str	r2, [r7, #12]
 800a45e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a462:	693a      	ldr	r2, [r7, #16]
 800a464:	4413      	add	r3, r2
 800a466:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a46a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	6a1a      	ldr	r2, [r3, #32]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	0a5b      	lsrs	r3, r3, #9
 800a474:	4413      	add	r3, r2
 800a476:	4619      	mov	r1, r3
 800a478:	6938      	ldr	r0, [r7, #16]
 800a47a:	f7ff fef0 	bl	800a25e <_ZL11move_windowP5FATFSm>
 800a47e:	4603      	mov	r3, r0
 800a480:	2b00      	cmp	r3, #0
 800a482:	bf14      	ite	ne
 800a484:	2301      	movne	r3, #1
 800a486:	2300      	moveq	r3, #0
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d15d      	bne.n	800a54a <_ZL7get_fatP5_FDIDm+0x160>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a494:	693a      	ldr	r2, [r7, #16]
 800a496:	4413      	add	r3, r2
 800a498:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a49c:	021b      	lsls	r3, r3, #8
 800a49e:	461a      	mov	r2, r3
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	f003 0301 	and.w	r3, r3, #1
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d002      	beq.n	800a4b6 <_ZL7get_fatP5_FDIDm+0xcc>
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	091b      	lsrs	r3, r3, #4
 800a4b4:	e002      	b.n	800a4bc <_ZL7get_fatP5_FDIDm+0xd2>
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4bc:	617b      	str	r3, [r7, #20]
			break;
 800a4be:	e049      	b.n	800a554 <_ZL7get_fatP5_FDIDm+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	6a1a      	ldr	r2, [r3, #32]
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	0a1b      	lsrs	r3, r3, #8
 800a4c8:	4413      	add	r3, r2
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	6938      	ldr	r0, [r7, #16]
 800a4ce:	f7ff fec6 	bl	800a25e <_ZL11move_windowP5FATFSm>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	bf14      	ite	ne
 800a4d8:	2301      	movne	r3, #1
 800a4da:	2300      	moveq	r3, #0
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d135      	bne.n	800a54e <_ZL7get_fatP5_FDIDm+0x164>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	005b      	lsls	r3, r3, #1
 800a4ec:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a4f0:	4413      	add	r3, r2
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7ff fbe8 	bl	8009cc8 <_ZL7ld_wordPKh>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	617b      	str	r3, [r7, #20]
			break;
 800a4fc:	e02a      	b.n	800a554 <_ZL7get_fatP5_FDIDm+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	6a1a      	ldr	r2, [r3, #32]
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	09db      	lsrs	r3, r3, #7
 800a506:	4413      	add	r3, r2
 800a508:	4619      	mov	r1, r3
 800a50a:	6938      	ldr	r0, [r7, #16]
 800a50c:	f7ff fea7 	bl	800a25e <_ZL11move_windowP5FATFSm>
 800a510:	4603      	mov	r3, r0
 800a512:	2b00      	cmp	r3, #0
 800a514:	bf14      	ite	ne
 800a516:	2301      	movne	r3, #1
 800a518:	2300      	moveq	r3, #0
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d118      	bne.n	800a552 <_ZL7get_fatP5_FDIDm+0x168>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a52e:	4413      	add	r3, r2
 800a530:	4618      	mov	r0, r3
 800a532:	f7ff fbe1 	bl	8009cf8 <_ZL8ld_dwordPKh>
 800a536:	4603      	mov	r3, r0
 800a538:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a53c:	617b      	str	r3, [r7, #20]
			break;
 800a53e:	e009      	b.n	800a554 <_ZL7get_fatP5_FDIDm+0x16a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a540:	2301      	movs	r3, #1
 800a542:	617b      	str	r3, [r7, #20]
 800a544:	e006      	b.n	800a554 <_ZL7get_fatP5_FDIDm+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a546:	bf00      	nop
 800a548:	e004      	b.n	800a554 <_ZL7get_fatP5_FDIDm+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a54a:	bf00      	nop
 800a54c:	e002      	b.n	800a554 <_ZL7get_fatP5_FDIDm+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a54e:	bf00      	nop
 800a550:	e000      	b.n	800a554 <_ZL7get_fatP5_FDIDm+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a552:	bf00      	nop
		}
	}

	return val;
 800a554:	697b      	ldr	r3, [r7, #20]
}
 800a556:	4618      	mov	r0, r3
 800a558:	3718      	adds	r7, #24
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <_ZL7put_fatP5FATFSmm>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a55e:	b590      	push	{r4, r7, lr}
 800a560:	b089      	sub	sp, #36	; 0x24
 800a562:	af00      	add	r7, sp, #0
 800a564:	60f8      	str	r0, [r7, #12]
 800a566:	60b9      	str	r1, [r7, #8]
 800a568:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a56a:	2302      	movs	r3, #2
 800a56c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	2b01      	cmp	r3, #1
 800a572:	f240 80d5 	bls.w	800a720 <_ZL7put_fatP5FATFSmm+0x1c2>
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	695b      	ldr	r3, [r3, #20]
 800a57a:	68ba      	ldr	r2, [r7, #8]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	f080 80cf 	bcs.w	800a720 <_ZL7put_fatP5FATFSmm+0x1c2>
		switch (fs->fs_type) {
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	2b02      	cmp	r3, #2
 800a588:	d071      	beq.n	800a66e <_ZL7put_fatP5FATFSmm+0x110>
 800a58a:	2b03      	cmp	r3, #3
 800a58c:	f000 808f 	beq.w	800a6ae <_ZL7put_fatP5FATFSmm+0x150>
 800a590:	2b01      	cmp	r3, #1
 800a592:	f040 80c5 	bne.w	800a720 <_ZL7put_fatP5FATFSmm+0x1c2>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	61bb      	str	r3, [r7, #24]
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	085b      	lsrs	r3, r3, #1
 800a59e:	69ba      	ldr	r2, [r7, #24]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6a1a      	ldr	r2, [r3, #32]
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	0a5b      	lsrs	r3, r3, #9
 800a5ac:	4413      	add	r3, r2
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	f7ff fe54 	bl	800a25e <_ZL11move_windowP5FATFSm>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a5ba:	7ffb      	ldrb	r3, [r7, #31]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f040 80a8 	bne.w	800a712 <_ZL7put_fatP5FATFSmm+0x1b4>
			p = fs->win + bc++ % SS(fs);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a5c8:	69bb      	ldr	r3, [r7, #24]
 800a5ca:	1c59      	adds	r1, r3, #1
 800a5cc:	61b9      	str	r1, [r7, #24]
 800a5ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5d2:	4413      	add	r3, r2
 800a5d4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	f003 0301 	and.w	r3, r3, #1
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d00d      	beq.n	800a5fc <_ZL7put_fatP5FATFSmm+0x9e>
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	b25b      	sxtb	r3, r3
 800a5e6:	f003 030f 	and.w	r3, r3, #15
 800a5ea:	b25a      	sxtb	r2, r3
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	011b      	lsls	r3, r3, #4
 800a5f2:	b25b      	sxtb	r3, r3
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	b25b      	sxtb	r3, r3
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	e001      	b.n	800a600 <_ZL7put_fatP5FATFSmm+0xa2>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	697a      	ldr	r2, [r7, #20]
 800a602:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2201      	movs	r2, #1
 800a608:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	6a1a      	ldr	r2, [r3, #32]
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	0a5b      	lsrs	r3, r3, #9
 800a612:	4413      	add	r3, r2
 800a614:	4619      	mov	r1, r3
 800a616:	68f8      	ldr	r0, [r7, #12]
 800a618:	f7ff fe21 	bl	800a25e <_ZL11move_windowP5FATFSm>
 800a61c:	4603      	mov	r3, r0
 800a61e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a620:	7ffb      	ldrb	r3, [r7, #31]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d177      	bne.n	800a716 <_ZL7put_fatP5FATFSmm+0x1b8>
			p = fs->win + bc % SS(fs);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a632:	4413      	add	r3, r2
 800a634:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	f003 0301 	and.w	r3, r3, #1
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d003      	beq.n	800a648 <_ZL7put_fatP5FATFSmm+0xea>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	091b      	lsrs	r3, r3, #4
 800a644:	b2db      	uxtb	r3, r3
 800a646:	e00c      	b.n	800a662 <_ZL7put_fatP5FATFSmm+0x104>
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	f023 030f 	bic.w	r3, r3, #15
 800a650:	b2da      	uxtb	r2, r3
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	0a1b      	lsrs	r3, r3, #8
 800a656:	b2db      	uxtb	r3, r3
 800a658:	f003 030f 	and.w	r3, r3, #15
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	4313      	orrs	r3, r2
 800a660:	b2db      	uxtb	r3, r3
 800a662:	697a      	ldr	r2, [r7, #20]
 800a664:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2201      	movs	r2, #1
 800a66a:	70da      	strb	r2, [r3, #3]
			break;
 800a66c:	e058      	b.n	800a720 <_ZL7put_fatP5FATFSmm+0x1c2>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	6a1a      	ldr	r2, [r3, #32]
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	0a1b      	lsrs	r3, r3, #8
 800a676:	4413      	add	r3, r2
 800a678:	4619      	mov	r1, r3
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f7ff fdef 	bl	800a25e <_ZL11move_windowP5FATFSm>
 800a680:	4603      	mov	r3, r0
 800a682:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a684:	7ffb      	ldrb	r3, [r7, #31]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d147      	bne.n	800a71a <_ZL7put_fatP5FATFSmm+0x1bc>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	005b      	lsls	r3, r3, #1
 800a694:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a698:	4413      	add	r3, r2
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	b292      	uxth	r2, r2
 800a69e:	4611      	mov	r1, r2
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7ff fb4c 	bl	8009d3e <_ZL7st_wordPht>
			fs->wflag = 1;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	70da      	strb	r2, [r3, #3]
			break;
 800a6ac:	e038      	b.n	800a720 <_ZL7put_fatP5FATFSmm+0x1c2>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6a1a      	ldr	r2, [r3, #32]
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	09db      	lsrs	r3, r3, #7
 800a6b6:	4413      	add	r3, r2
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f7ff fdcf 	bl	800a25e <_ZL11move_windowP5FATFSm>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a6c4:	7ffb      	ldrb	r3, [r7, #31]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d129      	bne.n	800a71e <_ZL7put_fatP5FATFSmm+0x1c0>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a6de:	4413      	add	r3, r2
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7ff fb09 	bl	8009cf8 <_ZL8ld_dwordPKh>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a6ec:	4323      	orrs	r3, r4
 800a6ee:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a6fe:	4413      	add	r3, r2
 800a700:	6879      	ldr	r1, [r7, #4]
 800a702:	4618      	mov	r0, r3
 800a704:	f7ff fb36 	bl	8009d74 <_ZL8st_dwordPhm>
			fs->wflag = 1;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2201      	movs	r2, #1
 800a70c:	70da      	strb	r2, [r3, #3]
			break;
 800a70e:	bf00      	nop
 800a710:	e006      	b.n	800a720 <_ZL7put_fatP5FATFSmm+0x1c2>
			if (res != FR_OK) break;
 800a712:	bf00      	nop
 800a714:	e004      	b.n	800a720 <_ZL7put_fatP5FATFSmm+0x1c2>
			if (res != FR_OK) break;
 800a716:	bf00      	nop
 800a718:	e002      	b.n	800a720 <_ZL7put_fatP5FATFSmm+0x1c2>
			if (res != FR_OK) break;
 800a71a:	bf00      	nop
 800a71c:	e000      	b.n	800a720 <_ZL7put_fatP5FATFSmm+0x1c2>
			if (res != FR_OK) break;
 800a71e:	bf00      	nop
		}
	}
	return res;
 800a720:	7ffb      	ldrb	r3, [r7, #31]
}
 800a722:	4618      	mov	r0, r3
 800a724:	3724      	adds	r7, #36	; 0x24
 800a726:	46bd      	mov	sp, r7
 800a728:	bd90      	pop	{r4, r7, pc}

0800a72a <_ZL12remove_chainP5_FDIDmm>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b088      	sub	sp, #32
 800a72e:	af00      	add	r7, sp, #0
 800a730:	60f8      	str	r0, [r7, #12]
 800a732:	60b9      	str	r1, [r7, #8]
 800a734:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a736:	2300      	movs	r3, #0
 800a738:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	2b01      	cmp	r3, #1
 800a744:	d904      	bls.n	800a750 <_ZL12remove_chainP5_FDIDmm+0x26>
 800a746:	69bb      	ldr	r3, [r7, #24]
 800a748:	695b      	ldr	r3, [r3, #20]
 800a74a:	68ba      	ldr	r2, [r7, #8]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d301      	bcc.n	800a754 <_ZL12remove_chainP5_FDIDmm+0x2a>
 800a750:	2302      	movs	r3, #2
 800a752:	e04b      	b.n	800a7ec <_ZL12remove_chainP5_FDIDmm+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d00c      	beq.n	800a774 <_ZL12remove_chainP5_FDIDmm+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a75a:	f04f 32ff 	mov.w	r2, #4294967295
 800a75e:	6879      	ldr	r1, [r7, #4]
 800a760:	69b8      	ldr	r0, [r7, #24]
 800a762:	f7ff fefc 	bl	800a55e <_ZL7put_fatP5FATFSmm>
 800a766:	4603      	mov	r3, r0
 800a768:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a76a:	7ffb      	ldrb	r3, [r7, #31]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d001      	beq.n	800a774 <_ZL12remove_chainP5_FDIDmm+0x4a>
 800a770:	7ffb      	ldrb	r3, [r7, #31]
 800a772:	e03b      	b.n	800a7ec <_ZL12remove_chainP5_FDIDmm+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a774:	68b9      	ldr	r1, [r7, #8]
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	f7ff fe37 	bl	800a3ea <_ZL7get_fatP5_FDIDm>
 800a77c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d031      	beq.n	800a7e8 <_ZL12remove_chainP5_FDIDmm+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	2b01      	cmp	r3, #1
 800a788:	d101      	bne.n	800a78e <_ZL12remove_chainP5_FDIDmm+0x64>
 800a78a:	2302      	movs	r3, #2
 800a78c:	e02e      	b.n	800a7ec <_ZL12remove_chainP5_FDIDmm+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a794:	d101      	bne.n	800a79a <_ZL12remove_chainP5_FDIDmm+0x70>
 800a796:	2301      	movs	r3, #1
 800a798:	e028      	b.n	800a7ec <_ZL12remove_chainP5_FDIDmm+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a79a:	2200      	movs	r2, #0
 800a79c:	68b9      	ldr	r1, [r7, #8]
 800a79e:	69b8      	ldr	r0, [r7, #24]
 800a7a0:	f7ff fedd 	bl	800a55e <_ZL7put_fatP5FATFSmm>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a7a8:	7ffb      	ldrb	r3, [r7, #31]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d001      	beq.n	800a7b2 <_ZL12remove_chainP5_FDIDmm+0x88>
 800a7ae:	7ffb      	ldrb	r3, [r7, #31]
 800a7b0:	e01c      	b.n	800a7ec <_ZL12remove_chainP5_FDIDmm+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	691a      	ldr	r2, [r3, #16]
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	695b      	ldr	r3, [r3, #20]
 800a7ba:	3b02      	subs	r3, #2
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d20b      	bcs.n	800a7d8 <_ZL12remove_chainP5_FDIDmm+0xae>
			fs->free_clst++;
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	691b      	ldr	r3, [r3, #16]
 800a7c4:	1c5a      	adds	r2, r3, #1
 800a7c6:	69bb      	ldr	r3, [r7, #24]
 800a7c8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a7ca:	69bb      	ldr	r3, [r7, #24]
 800a7cc:	791b      	ldrb	r3, [r3, #4]
 800a7ce:	f043 0301 	orr.w	r3, r3, #1
 800a7d2:	b2da      	uxtb	r2, r3
 800a7d4:	69bb      	ldr	r3, [r7, #24]
 800a7d6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a7dc:	69bb      	ldr	r3, [r7, #24]
 800a7de:	695b      	ldr	r3, [r3, #20]
 800a7e0:	68ba      	ldr	r2, [r7, #8]
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d201      	bcs.n	800a7ea <_ZL12remove_chainP5_FDIDmm+0xc0>
	do {
 800a7e6:	e7c5      	b.n	800a774 <_ZL12remove_chainP5_FDIDmm+0x4a>
		if (nxt == 0) break;				/* Empty cluster? */
 800a7e8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a7ea:	2300      	movs	r3, #0
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3720      	adds	r7, #32
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <_ZL12create_chainP5_FDIDm>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b088      	sub	sp, #32
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d10d      	bne.n	800a826 <_ZL12create_chainP5_FDIDm+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a810:	69bb      	ldr	r3, [r7, #24]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d004      	beq.n	800a820 <_ZL12create_chainP5_FDIDm+0x2c>
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	695b      	ldr	r3, [r3, #20]
 800a81a:	69ba      	ldr	r2, [r7, #24]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d31b      	bcc.n	800a858 <_ZL12create_chainP5_FDIDm+0x64>
 800a820:	2301      	movs	r3, #1
 800a822:	61bb      	str	r3, [r7, #24]
 800a824:	e018      	b.n	800a858 <_ZL12create_chainP5_FDIDm+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a826:	6839      	ldr	r1, [r7, #0]
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f7ff fdde 	bl	800a3ea <_ZL7get_fatP5_FDIDm>
 800a82e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2b01      	cmp	r3, #1
 800a834:	d801      	bhi.n	800a83a <_ZL12create_chainP5_FDIDm+0x46>
 800a836:	2301      	movs	r3, #1
 800a838:	e070      	b.n	800a91c <_ZL12create_chainP5_FDIDm+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a840:	d101      	bne.n	800a846 <_ZL12create_chainP5_FDIDm+0x52>
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	e06a      	b.n	800a91c <_ZL12create_chainP5_FDIDm+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	695b      	ldr	r3, [r3, #20]
 800a84a:	68fa      	ldr	r2, [r7, #12]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d201      	bcs.n	800a854 <_ZL12create_chainP5_FDIDm+0x60>
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	e063      	b.n	800a91c <_ZL12create_chainP5_FDIDm+0x128>
		scl = clst;
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a85c:	69fb      	ldr	r3, [r7, #28]
 800a85e:	3301      	adds	r3, #1
 800a860:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	695b      	ldr	r3, [r3, #20]
 800a866:	69fa      	ldr	r2, [r7, #28]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d307      	bcc.n	800a87c <_ZL12create_chainP5_FDIDm+0x88>
				ncl = 2;
 800a86c:	2302      	movs	r3, #2
 800a86e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a870:	69fa      	ldr	r2, [r7, #28]
 800a872:	69bb      	ldr	r3, [r7, #24]
 800a874:	429a      	cmp	r2, r3
 800a876:	d901      	bls.n	800a87c <_ZL12create_chainP5_FDIDm+0x88>
 800a878:	2300      	movs	r3, #0
 800a87a:	e04f      	b.n	800a91c <_ZL12create_chainP5_FDIDm+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a87c:	69f9      	ldr	r1, [r7, #28]
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f7ff fdb3 	bl	800a3ea <_ZL7get_fatP5_FDIDm>
 800a884:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00e      	beq.n	800a8aa <_ZL12create_chainP5_FDIDm+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d003      	beq.n	800a89a <_ZL12create_chainP5_FDIDm+0xa6>
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a898:	d101      	bne.n	800a89e <_ZL12create_chainP5_FDIDm+0xaa>
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	e03e      	b.n	800a91c <_ZL12create_chainP5_FDIDm+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a89e:	69fa      	ldr	r2, [r7, #28]
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d1da      	bne.n	800a85c <_ZL12create_chainP5_FDIDm+0x68>
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	e038      	b.n	800a91c <_ZL12create_chainP5_FDIDm+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a8aa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a8ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a8b0:	69f9      	ldr	r1, [r7, #28]
 800a8b2:	6938      	ldr	r0, [r7, #16]
 800a8b4:	f7ff fe53 	bl	800a55e <_ZL7put_fatP5FATFSmm>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a8bc:	7dfb      	ldrb	r3, [r7, #23]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d109      	bne.n	800a8d6 <_ZL12create_chainP5_FDIDm+0xe2>
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d006      	beq.n	800a8d6 <_ZL12create_chainP5_FDIDm+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a8c8:	69fa      	ldr	r2, [r7, #28]
 800a8ca:	6839      	ldr	r1, [r7, #0]
 800a8cc:	6938      	ldr	r0, [r7, #16]
 800a8ce:	f7ff fe46 	bl	800a55e <_ZL7put_fatP5FATFSmm>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a8d6:	7dfb      	ldrb	r3, [r7, #23]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d116      	bne.n	800a90a <_ZL12create_chainP5_FDIDm+0x116>
		fs->last_clst = ncl;
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	69fa      	ldr	r2, [r7, #28]
 800a8e0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	691a      	ldr	r2, [r3, #16]
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	695b      	ldr	r3, [r3, #20]
 800a8ea:	3b02      	subs	r3, #2
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d804      	bhi.n	800a8fa <_ZL12create_chainP5_FDIDm+0x106>
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	691b      	ldr	r3, [r3, #16]
 800a8f4:	1e5a      	subs	r2, r3, #1
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	791b      	ldrb	r3, [r3, #4]
 800a8fe:	f043 0301 	orr.w	r3, r3, #1
 800a902:	b2da      	uxtb	r2, r3
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	711a      	strb	r2, [r3, #4]
 800a908:	e007      	b.n	800a91a <_ZL12create_chainP5_FDIDm+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a90a:	7dfb      	ldrb	r3, [r7, #23]
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d102      	bne.n	800a916 <_ZL12create_chainP5_FDIDm+0x122>
 800a910:	f04f 33ff 	mov.w	r3, #4294967295
 800a914:	e000      	b.n	800a918 <_ZL12create_chainP5_FDIDm+0x124>
 800a916:	2301      	movs	r3, #1
 800a918:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a91a:	69fb      	ldr	r3, [r7, #28]
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3720      	adds	r7, #32
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <_ZL10clmt_clustP3FILm>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a924:	b480      	push	{r7}
 800a926:	b087      	sub	sp, #28
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a938:	3304      	adds	r3, #4
 800a93a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	0a5b      	lsrs	r3, r3, #9
 800a940:	68fa      	ldr	r2, [r7, #12]
 800a942:	8952      	ldrh	r2, [r2, #10]
 800a944:	fbb3 f3f2 	udiv	r3, r3, r2
 800a948:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	1d1a      	adds	r2, r3, #4
 800a94e:	613a      	str	r2, [r7, #16]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d101      	bne.n	800a95e <_ZL10clmt_clustP3FILm+0x3a>
 800a95a:	2300      	movs	r3, #0
 800a95c:	e010      	b.n	800a980 <_ZL10clmt_clustP3FILm+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a95e:	697a      	ldr	r2, [r7, #20]
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	429a      	cmp	r2, r3
 800a964:	d307      	bcc.n	800a976 <_ZL10clmt_clustP3FILm+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a966:	697a      	ldr	r2, [r7, #20]
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	1ad3      	subs	r3, r2, r3
 800a96c:	617b      	str	r3, [r7, #20]
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	3304      	adds	r3, #4
 800a972:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a974:	e7e9      	b.n	800a94a <_ZL10clmt_clustP3FILm+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a976:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	4413      	add	r3, r2
}
 800a980:	4618      	mov	r0, r3
 800a982:	371c      	adds	r7, #28
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <_ZL7dir_sdiP3DIRm>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b086      	sub	sp, #24
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9a2:	d204      	bcs.n	800a9ae <_ZL7dir_sdiP3DIRm+0x22>
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	f003 031f 	and.w	r3, r3, #31
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d001      	beq.n	800a9b2 <_ZL7dir_sdiP3DIRm+0x26>
		return FR_INT_ERR;
 800a9ae:	2302      	movs	r3, #2
 800a9b0:	e063      	b.n	800aa7a <_ZL7dir_sdiP3DIRm+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	683a      	ldr	r2, [r7, #0]
 800a9b6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d106      	bne.n	800a9d2 <_ZL7dir_sdiP3DIRm+0x46>
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	2b02      	cmp	r3, #2
 800a9ca:	d902      	bls.n	800a9d2 <_ZL7dir_sdiP3DIRm+0x46>
		clst = fs->dirbase;
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d10c      	bne.n	800a9f2 <_ZL7dir_sdiP3DIRm+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	095b      	lsrs	r3, r3, #5
 800a9dc:	693a      	ldr	r2, [r7, #16]
 800a9de:	8912      	ldrh	r2, [r2, #8]
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d301      	bcc.n	800a9e8 <_ZL7dir_sdiP3DIRm+0x5c>
 800a9e4:	2302      	movs	r3, #2
 800a9e6:	e048      	b.n	800aa7a <_ZL7dir_sdiP3DIRm+0xee>
		dp->sect = fs->dirbase;
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	61da      	str	r2, [r3, #28]
 800a9f0:	e029      	b.n	800aa46 <_ZL7dir_sdiP3DIRm+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	895b      	ldrh	r3, [r3, #10]
 800a9f6:	025b      	lsls	r3, r3, #9
 800a9f8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a9fa:	683a      	ldr	r2, [r7, #0]
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d31a      	bcc.n	800aa38 <_ZL7dir_sdiP3DIRm+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6979      	ldr	r1, [r7, #20]
 800aa06:	4618      	mov	r0, r3
 800aa08:	f7ff fcef 	bl	800a3ea <_ZL7get_fatP5_FDIDm>
 800aa0c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa14:	d101      	bne.n	800aa1a <_ZL7dir_sdiP3DIRm+0x8e>
 800aa16:	2301      	movs	r3, #1
 800aa18:	e02f      	b.n	800aa7a <_ZL7dir_sdiP3DIRm+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	d904      	bls.n	800aa2a <_ZL7dir_sdiP3DIRm+0x9e>
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	695b      	ldr	r3, [r3, #20]
 800aa24:	697a      	ldr	r2, [r7, #20]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d301      	bcc.n	800aa2e <_ZL7dir_sdiP3DIRm+0xa2>
 800aa2a:	2302      	movs	r3, #2
 800aa2c:	e025      	b.n	800aa7a <_ZL7dir_sdiP3DIRm+0xee>
			ofs -= csz;
 800aa2e:	683a      	ldr	r2, [r7, #0]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	1ad3      	subs	r3, r2, r3
 800aa34:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800aa36:	e7e0      	b.n	800a9fa <_ZL7dir_sdiP3DIRm+0x6e>
		}
		dp->sect = clust2sect(fs, clst);
 800aa38:	6979      	ldr	r1, [r7, #20]
 800aa3a:	6938      	ldr	r0, [r7, #16]
 800aa3c:	f7ff fcb6 	bl	800a3ac <_ZL10clust2sectP5FATFSm>
 800aa40:	4602      	mov	r2, r0
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	697a      	ldr	r2, [r7, #20]
 800aa4a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	69db      	ldr	r3, [r3, #28]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d101      	bne.n	800aa58 <_ZL7dir_sdiP3DIRm+0xcc>
 800aa54:	2302      	movs	r3, #2
 800aa56:	e010      	b.n	800aa7a <_ZL7dir_sdiP3DIRm+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	69da      	ldr	r2, [r3, #28]
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	0a5b      	lsrs	r3, r3, #9
 800aa60:	441a      	add	r2, r3
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa72:	441a      	add	r2, r3
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aa78:	2300      	movs	r3, #0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3718      	adds	r7, #24
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <_ZL8dir_nextP3DIRi>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800aa82:	b580      	push	{r7, lr}
 800aa84:	b086      	sub	sp, #24
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
 800aa8a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	695b      	ldr	r3, [r3, #20]
 800aa96:	3320      	adds	r3, #32
 800aa98:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	69db      	ldr	r3, [r3, #28]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d003      	beq.n	800aaaa <_ZL8dir_nextP3DIRi+0x28>
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aaa8:	d301      	bcc.n	800aaae <_ZL8dir_nextP3DIRi+0x2c>
 800aaaa:	2304      	movs	r3, #4
 800aaac:	e0b5      	b.n	800ac1a <_ZL8dir_nextP3DIRi+0x198>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f040 80a3 	bne.w	800ac00 <_ZL8dir_nextP3DIRi+0x17e>
		dp->sect++;				/* Next sector */
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	69db      	ldr	r3, [r3, #28]
 800aabe:	1c5a      	adds	r2, r3, #1
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	699b      	ldr	r3, [r3, #24]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d10b      	bne.n	800aae4 <_ZL8dir_nextP3DIRi+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	095b      	lsrs	r3, r3, #5
 800aad0:	68fa      	ldr	r2, [r7, #12]
 800aad2:	8912      	ldrh	r2, [r2, #8]
 800aad4:	4293      	cmp	r3, r2
 800aad6:	f0c0 8093 	bcc.w	800ac00 <_ZL8dir_nextP3DIRi+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2200      	movs	r2, #0
 800aade:	61da      	str	r2, [r3, #28]
 800aae0:	2304      	movs	r3, #4
 800aae2:	e09a      	b.n	800ac1a <_ZL8dir_nextP3DIRi+0x198>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	0a5b      	lsrs	r3, r3, #9
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	8952      	ldrh	r2, [r2, #10]
 800aaec:	3a01      	subs	r2, #1
 800aaee:	4013      	ands	r3, r2
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	f040 8085 	bne.w	800ac00 <_ZL8dir_nextP3DIRi+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	699b      	ldr	r3, [r3, #24]
 800aafc:	4619      	mov	r1, r3
 800aafe:	4610      	mov	r0, r2
 800ab00:	f7ff fc73 	bl	800a3ea <_ZL7get_fatP5_FDIDm>
 800ab04:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d801      	bhi.n	800ab10 <_ZL8dir_nextP3DIRi+0x8e>
 800ab0c:	2302      	movs	r3, #2
 800ab0e:	e084      	b.n	800ac1a <_ZL8dir_nextP3DIRi+0x198>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab16:	d101      	bne.n	800ab1c <_ZL8dir_nextP3DIRi+0x9a>
 800ab18:	2301      	movs	r3, #1
 800ab1a:	e07e      	b.n	800ac1a <_ZL8dir_nextP3DIRi+0x198>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	695b      	ldr	r3, [r3, #20]
 800ab20:	697a      	ldr	r2, [r7, #20]
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d362      	bcc.n	800abec <_ZL8dir_nextP3DIRi+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d104      	bne.n	800ab36 <_ZL8dir_nextP3DIRi+0xb4>
						dp->sect = 0; return FR_NO_FILE;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	61da      	str	r2, [r3, #28]
 800ab32:	2304      	movs	r3, #4
 800ab34:	e071      	b.n	800ac1a <_ZL8dir_nextP3DIRi+0x198>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	699b      	ldr	r3, [r3, #24]
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	4610      	mov	r0, r2
 800ab40:	f7ff fe58 	bl	800a7f4 <_ZL12create_chainP5_FDIDm>
 800ab44:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d101      	bne.n	800ab50 <_ZL8dir_nextP3DIRi+0xce>
 800ab4c:	2307      	movs	r3, #7
 800ab4e:	e064      	b.n	800ac1a <_ZL8dir_nextP3DIRi+0x198>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	2b01      	cmp	r3, #1
 800ab54:	d101      	bne.n	800ab5a <_ZL8dir_nextP3DIRi+0xd8>
 800ab56:	2302      	movs	r3, #2
 800ab58:	e05f      	b.n	800ac1a <_ZL8dir_nextP3DIRi+0x198>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab60:	d101      	bne.n	800ab66 <_ZL8dir_nextP3DIRi+0xe4>
 800ab62:	2301      	movs	r3, #1
 800ab64:	e059      	b.n	800ac1a <_ZL8dir_nextP3DIRi+0x198>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	f7ff fb30 	bl	800a1cc <_ZL11sync_windowP5FATFS>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	bf14      	ite	ne
 800ab72:	2301      	movne	r3, #1
 800ab74:	2300      	moveq	r3, #0
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d001      	beq.n	800ab80 <_ZL8dir_nextP3DIRi+0xfe>
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	e04c      	b.n	800ac1a <_ZL8dir_nextP3DIRi+0x198>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	3330      	adds	r3, #48	; 0x30
 800ab84:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab88:	2100      	movs	r1, #0
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7ff f945 	bl	8009e1a <_ZL7mem_setPvij>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ab90:	2300      	movs	r3, #0
 800ab92:	613b      	str	r3, [r7, #16]
 800ab94:	6979      	ldr	r1, [r7, #20]
 800ab96:	68f8      	ldr	r0, [r7, #12]
 800ab98:	f7ff fc08 	bl	800a3ac <_ZL10clust2sectP5FATFSm>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	62da      	str	r2, [r3, #44]	; 0x2c
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	895b      	ldrh	r3, [r3, #10]
 800aba6:	461a      	mov	r2, r3
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	4293      	cmp	r3, r2
 800abac:	d218      	bcs.n	800abe0 <_ZL8dir_nextP3DIRi+0x15e>
						fs->wflag = 1;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2201      	movs	r2, #1
 800abb2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800abb4:	68f8      	ldr	r0, [r7, #12]
 800abb6:	f7ff fb09 	bl	800a1cc <_ZL11sync_windowP5FATFS>
 800abba:	4603      	mov	r3, r0
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	bf14      	ite	ne
 800abc0:	2301      	movne	r3, #1
 800abc2:	2300      	moveq	r3, #0
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d001      	beq.n	800abce <_ZL8dir_nextP3DIRi+0x14c>
 800abca:	2301      	movs	r3, #1
 800abcc:	e025      	b.n	800ac1a <_ZL8dir_nextP3DIRi+0x198>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	3301      	adds	r3, #1
 800abd2:	613b      	str	r3, [r7, #16]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd8:	1c5a      	adds	r2, r3, #1
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	62da      	str	r2, [r3, #44]	; 0x2c
 800abde:	e7e0      	b.n	800aba2 <_ZL8dir_nextP3DIRi+0x120>
					}
					fs->winsect -= n;							/* Restore window offset */
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	1ad2      	subs	r2, r2, r3
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	697a      	ldr	r2, [r7, #20]
 800abf0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800abf2:	6979      	ldr	r1, [r7, #20]
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f7ff fbd9 	bl	800a3ac <_ZL10clust2sectP5FATFSm>
 800abfa:	4602      	mov	r2, r0
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	68ba      	ldr	r2, [r7, #8]
 800ac04:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac12:	441a      	add	r2, r3
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ac18:	2300      	movs	r3, #0
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3718      	adds	r7, #24
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}

0800ac22 <_ZL9dir_allocP3DIRj>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ac22:	b580      	push	{r7, lr}
 800ac24:	b086      	sub	sp, #24
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
 800ac2a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ac32:	2100      	movs	r1, #0
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f7ff fea9 	bl	800a98c <_ZL7dir_sdiP3DIRm>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ac3e:	7dfb      	ldrb	r3, [r7, #23]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d130      	bne.n	800aca6 <_ZL9dir_allocP3DIRj+0x84>
		n = 0;
 800ac44:	2300      	movs	r3, #0
 800ac46:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	69db      	ldr	r3, [r3, #28]
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	f7ff fb05 	bl	800a25e <_ZL11move_windowP5FATFSm>
 800ac54:	4603      	mov	r3, r0
 800ac56:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ac58:	7dfb      	ldrb	r3, [r7, #23]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d122      	bne.n	800aca4 <_ZL9dir_allocP3DIRj+0x82>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a1b      	ldr	r3, [r3, #32]
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	2be5      	cmp	r3, #229	; 0xe5
 800ac66:	d004      	beq.n	800ac72 <_ZL9dir_allocP3DIRj+0x50>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6a1b      	ldr	r3, [r3, #32]
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d10c      	bne.n	800ac8c <_ZL9dir_allocP3DIRj+0x6a>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	3301      	adds	r3, #1
 800ac76:	613b      	str	r3, [r7, #16]
 800ac78:	693a      	ldr	r2, [r7, #16]
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	bf0c      	ite	eq
 800ac80:	2301      	moveq	r3, #1
 800ac82:	2300      	movne	r3, #0
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d002      	beq.n	800ac90 <_ZL9dir_allocP3DIRj+0x6e>
 800ac8a:	e00c      	b.n	800aca6 <_ZL9dir_allocP3DIRj+0x84>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ac90:	2101      	movs	r1, #1
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f7ff fef5 	bl	800aa82 <_ZL8dir_nextP3DIRi>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ac9c:	7dfb      	ldrb	r3, [r7, #23]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d101      	bne.n	800aca6 <_ZL9dir_allocP3DIRj+0x84>
		do {
 800aca2:	e7d1      	b.n	800ac48 <_ZL9dir_allocP3DIRj+0x26>
			if (res != FR_OK) break;
 800aca4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800aca6:	7dfb      	ldrb	r3, [r7, #23]
 800aca8:	2b04      	cmp	r3, #4
 800acaa:	d101      	bne.n	800acb0 <_ZL9dir_allocP3DIRj+0x8e>
 800acac:	2307      	movs	r3, #7
 800acae:	75fb      	strb	r3, [r7, #23]
	return res;
 800acb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3718      	adds	r7, #24
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}

0800acba <_ZL8ld_clustP5FATFSPKh>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800acba:	b580      	push	{r7, lr}
 800acbc:	b084      	sub	sp, #16
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
 800acc2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	331a      	adds	r3, #26
 800acc8:	4618      	mov	r0, r3
 800acca:	f7fe fffd 	bl	8009cc8 <_ZL7ld_wordPKh>
 800acce:	4603      	mov	r3, r0
 800acd0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	2b03      	cmp	r3, #3
 800acd8:	d109      	bne.n	800acee <_ZL8ld_clustP5FATFSPKh+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	3314      	adds	r3, #20
 800acde:	4618      	mov	r0, r3
 800ace0:	f7fe fff2 	bl	8009cc8 <_ZL7ld_wordPKh>
 800ace4:	4603      	mov	r3, r0
 800ace6:	041b      	lsls	r3, r3, #16
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	4313      	orrs	r3, r2
 800acec:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800acee:	68fb      	ldr	r3, [r7, #12]
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3710      	adds	r7, #16
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <_ZL8st_clustP5FATFSPhm>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	331a      	adds	r3, #26
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	b292      	uxth	r2, r2
 800ad0c:	4611      	mov	r1, r2
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7ff f815 	bl	8009d3e <_ZL7st_wordPht>
	if (fs->fs_type == FS_FAT32) {
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	2b03      	cmp	r3, #3
 800ad1a:	d109      	bne.n	800ad30 <_ZL8st_clustP5FATFSPhm+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	f103 0214 	add.w	r2, r3, #20
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	0c1b      	lsrs	r3, r3, #16
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	4619      	mov	r1, r3
 800ad2a:	4610      	mov	r0, r2
 800ad2c:	f7ff f807 	bl	8009d3e <_ZL7st_wordPht>
	}
}
 800ad30:	bf00      	nop
 800ad32:	3710      	adds	r7, #16
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <_ZL8dir_findP3DIR>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b086      	sub	sp, #24
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ad46:	2100      	movs	r1, #0
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f7ff fe1f 	bl	800a98c <_ZL7dir_sdiP3DIRm>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ad52:	7dfb      	ldrb	r3, [r7, #23]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d001      	beq.n	800ad5c <_ZL8dir_findP3DIR+0x24>
 800ad58:	7dfb      	ldrb	r3, [r7, #23]
 800ad5a:	e043      	b.n	800ade4 <_ZL8dir_findP3DIR+0xac>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	69db      	ldr	r3, [r3, #28]
 800ad60:	4619      	mov	r1, r3
 800ad62:	6938      	ldr	r0, [r7, #16]
 800ad64:	f7ff fa7b 	bl	800a25e <_ZL11move_windowP5FATFSm>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ad6c:	7dfb      	ldrb	r3, [r7, #23]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d134      	bne.n	800addc <_ZL8dir_findP3DIR+0xa4>
		c = dp->dir[DIR_Name];
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a1b      	ldr	r3, [r3, #32]
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ad7a:	7bfb      	ldrb	r3, [r7, #15]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d102      	bne.n	800ad86 <_ZL8dir_findP3DIR+0x4e>
 800ad80:	2304      	movs	r3, #4
 800ad82:	75fb      	strb	r3, [r7, #23]
 800ad84:	e02d      	b.n	800ade2 <_ZL8dir_findP3DIR+0xaa>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6a1b      	ldr	r3, [r3, #32]
 800ad8a:	330b      	adds	r3, #11
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad92:	b2da      	uxtb	r2, r3
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6a1b      	ldr	r3, [r3, #32]
 800ad9c:	330b      	adds	r3, #11
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	f003 0308 	and.w	r3, r3, #8
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d10c      	bne.n	800adc2 <_ZL8dir_findP3DIR+0x8a>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6a18      	ldr	r0, [r3, #32]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	3324      	adds	r3, #36	; 0x24
 800adb0:	220b      	movs	r2, #11
 800adb2:	4619      	mov	r1, r3
 800adb4:	f7ff f851 	bl	8009e5a <_ZL7mem_cmpPKvS0_j>
 800adb8:	4603      	mov	r3, r0
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d101      	bne.n	800adc2 <_ZL8dir_findP3DIR+0x8a>
 800adbe:	2301      	movs	r3, #1
 800adc0:	e000      	b.n	800adc4 <_ZL8dir_findP3DIR+0x8c>
 800adc2:	2300      	movs	r3, #0
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d10b      	bne.n	800ade0 <_ZL8dir_findP3DIR+0xa8>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800adc8:	2100      	movs	r1, #0
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f7ff fe59 	bl	800aa82 <_ZL8dir_nextP3DIRi>
 800add0:	4603      	mov	r3, r0
 800add2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800add4:	7dfb      	ldrb	r3, [r7, #23]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d103      	bne.n	800ade2 <_ZL8dir_findP3DIR+0xaa>
	do {
 800adda:	e7bf      	b.n	800ad5c <_ZL8dir_findP3DIR+0x24>
		if (res != FR_OK) break;
 800addc:	bf00      	nop
 800adde:	e000      	b.n	800ade2 <_ZL8dir_findP3DIR+0xaa>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ade0:	bf00      	nop

	return res;
 800ade2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3718      	adds	r7, #24
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <_ZL12dir_registerP3DIR>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800adfa:	2101      	movs	r1, #1
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f7ff ff10 	bl	800ac22 <_ZL9dir_allocP3DIRj>
 800ae02:	4603      	mov	r3, r0
 800ae04:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ae06:	7bfb      	ldrb	r3, [r7, #15]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d11c      	bne.n	800ae46 <_ZL12dir_registerP3DIR+0x5a>
		res = move_window(fs, dp->sect);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	69db      	ldr	r3, [r3, #28]
 800ae10:	4619      	mov	r1, r3
 800ae12:	68b8      	ldr	r0, [r7, #8]
 800ae14:	f7ff fa23 	bl	800a25e <_ZL11move_windowP5FATFSm>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ae1c:	7bfb      	ldrb	r3, [r7, #15]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d111      	bne.n	800ae46 <_ZL12dir_registerP3DIR+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6a1b      	ldr	r3, [r3, #32]
 800ae26:	2220      	movs	r2, #32
 800ae28:	2100      	movs	r1, #0
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f7fe fff5 	bl	8009e1a <_ZL7mem_setPvij>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6a18      	ldr	r0, [r3, #32]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	3324      	adds	r3, #36	; 0x24
 800ae38:	220b      	movs	r2, #11
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	f7fe ffc6 	bl	8009dcc <_ZL7mem_cpyPvPKvj>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	2201      	movs	r2, #1
 800ae44:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ae46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3710      	adds	r7, #16
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <_ZL11create_nameP3DIRPPKc>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b088      	sub	sp, #32
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	613b      	str	r3, [r7, #16]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	3324      	adds	r3, #36	; 0x24
 800ae64:	60fb      	str	r3, [r7, #12]
	mem_set(sfn, ' ', 11);
 800ae66:	220b      	movs	r2, #11
 800ae68:	2120      	movs	r1, #32
 800ae6a:	68f8      	ldr	r0, [r7, #12]
 800ae6c:	f7fe ffd5 	bl	8009e1a <_ZL7mem_setPvij>
	si = i = 0; ni = 8;
 800ae70:	2300      	movs	r3, #0
 800ae72:	617b      	str	r3, [r7, #20]
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	61bb      	str	r3, [r7, #24]
 800ae78:	2308      	movs	r3, #8
 800ae7a:	61fb      	str	r3, [r7, #28]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ae7c:	69bb      	ldr	r3, [r7, #24]
 800ae7e:	1c5a      	adds	r2, r3, #1
 800ae80:	61ba      	str	r2, [r7, #24]
 800ae82:	693a      	ldr	r2, [r7, #16]
 800ae84:	4413      	add	r3, r2
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	72fb      	strb	r3, [r7, #11]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ae8a:	7afb      	ldrb	r3, [r7, #11]
 800ae8c:	2b20      	cmp	r3, #32
 800ae8e:	d953      	bls.n	800af38 <_ZL11create_nameP3DIRPPKc+0xe8>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ae90:	7afb      	ldrb	r3, [r7, #11]
 800ae92:	2b2f      	cmp	r3, #47	; 0x2f
 800ae94:	d002      	beq.n	800ae9c <_ZL11create_nameP3DIRPPKc+0x4c>
 800ae96:	7afb      	ldrb	r3, [r7, #11]
 800ae98:	2b5c      	cmp	r3, #92	; 0x5c
 800ae9a:	d10f      	bne.n	800aebc <_ZL11create_nameP3DIRPPKc+0x6c>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ae9c:	693a      	ldr	r2, [r7, #16]
 800ae9e:	69bb      	ldr	r3, [r7, #24]
 800aea0:	4413      	add	r3, r2
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	2b2f      	cmp	r3, #47	; 0x2f
 800aea6:	d005      	beq.n	800aeb4 <_ZL11create_nameP3DIRPPKc+0x64>
 800aea8:	693a      	ldr	r2, [r7, #16]
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	4413      	add	r3, r2
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	2b5c      	cmp	r3, #92	; 0x5c
 800aeb2:	d143      	bne.n	800af3c <_ZL11create_nameP3DIRPPKc+0xec>
 800aeb4:	69bb      	ldr	r3, [r7, #24]
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	61bb      	str	r3, [r7, #24]
 800aeba:	e7ef      	b.n	800ae9c <_ZL11create_nameP3DIRPPKc+0x4c>
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800aebc:	7afb      	ldrb	r3, [r7, #11]
 800aebe:	2b2e      	cmp	r3, #46	; 0x2e
 800aec0:	d003      	beq.n	800aeca <_ZL11create_nameP3DIRPPKc+0x7a>
 800aec2:	697a      	ldr	r2, [r7, #20]
 800aec4:	69fb      	ldr	r3, [r7, #28]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d30c      	bcc.n	800aee4 <_ZL11create_nameP3DIRPPKc+0x94>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800aeca:	69fb      	ldr	r3, [r7, #28]
 800aecc:	2b0b      	cmp	r3, #11
 800aece:	d002      	beq.n	800aed6 <_ZL11create_nameP3DIRPPKc+0x86>
 800aed0:	7afb      	ldrb	r3, [r7, #11]
 800aed2:	2b2e      	cmp	r3, #46	; 0x2e
 800aed4:	d001      	beq.n	800aeda <_ZL11create_nameP3DIRPPKc+0x8a>
 800aed6:	2306      	movs	r3, #6
 800aed8:	e04c      	b.n	800af74 <_ZL11create_nameP3DIRPPKc+0x124>
			i = 8; ni = 11;				/* Goto extension */
 800aeda:	2308      	movs	r3, #8
 800aedc:	617b      	str	r3, [r7, #20]
 800aede:	230b      	movs	r3, #11
 800aee0:	61fb      	str	r3, [r7, #28]
			continue;
 800aee2:	e028      	b.n	800af36 <_ZL11create_nameP3DIRPPKc+0xe6>
		}
		if (c >= 0x80) {				/* Extended character? */
 800aee4:	7afb      	ldrb	r3, [r7, #11]
 800aee6:	b25b      	sxtb	r3, r3
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	da04      	bge.n	800aef6 <_ZL11create_nameP3DIRPPKc+0xa6>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800aeec:	7afb      	ldrb	r3, [r7, #11]
 800aeee:	3b80      	subs	r3, #128	; 0x80
 800aef0:	4a22      	ldr	r2, [pc, #136]	; (800af7c <_ZL11create_nameP3DIRPPKc+0x12c>)
 800aef2:	5cd3      	ldrb	r3, [r2, r3]
 800aef4:	72fb      	strb	r3, [r7, #11]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800aef6:	7afb      	ldrb	r3, [r7, #11]
 800aef8:	4619      	mov	r1, r3
 800aefa:	4821      	ldr	r0, [pc, #132]	; (800af80 <_ZL11create_nameP3DIRPPKc+0x130>)
 800aefc:	f7fe ffda 	bl	8009eb4 <_ZL7chk_chrPKci>
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	bf14      	ite	ne
 800af06:	2301      	movne	r3, #1
 800af08:	2300      	moveq	r3, #0
 800af0a:	b2db      	uxtb	r3, r3
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d001      	beq.n	800af14 <_ZL11create_nameP3DIRPPKc+0xc4>
 800af10:	2306      	movs	r3, #6
 800af12:	e02f      	b.n	800af74 <_ZL11create_nameP3DIRPPKc+0x124>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800af14:	7afb      	ldrb	r3, [r7, #11]
 800af16:	2b60      	cmp	r3, #96	; 0x60
 800af18:	d906      	bls.n	800af28 <_ZL11create_nameP3DIRPPKc+0xd8>
 800af1a:	7afb      	ldrb	r3, [r7, #11]
 800af1c:	2b7a      	cmp	r3, #122	; 0x7a
 800af1e:	d803      	bhi.n	800af28 <_ZL11create_nameP3DIRPPKc+0xd8>
 800af20:	7afb      	ldrb	r3, [r7, #11]
 800af22:	3b20      	subs	r3, #32
 800af24:	b2db      	uxtb	r3, r3
 800af26:	72fb      	strb	r3, [r7, #11]
			sfn[i++] = c;
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	1c5a      	adds	r2, r3, #1
 800af2c:	617a      	str	r2, [r7, #20]
 800af2e:	68fa      	ldr	r2, [r7, #12]
 800af30:	4413      	add	r3, r2
 800af32:	7afa      	ldrb	r2, [r7, #11]
 800af34:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800af36:	e7a1      	b.n	800ae7c <_ZL11create_nameP3DIRPPKc+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800af38:	bf00      	nop
 800af3a:	e000      	b.n	800af3e <_ZL11create_nameP3DIRPPKc+0xee>
			break;
 800af3c:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800af3e:	693a      	ldr	r2, [r7, #16]
 800af40:	69bb      	ldr	r3, [r7, #24]
 800af42:	441a      	add	r2, r3
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d101      	bne.n	800af52 <_ZL11create_nameP3DIRPPKc+0x102>
 800af4e:	2306      	movs	r3, #6
 800af50:	e010      	b.n	800af74 <_ZL11create_nameP3DIRPPKc+0x124>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	2be5      	cmp	r3, #229	; 0xe5
 800af58:	d102      	bne.n	800af60 <_ZL11create_nameP3DIRPPKc+0x110>
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2205      	movs	r2, #5
 800af5e:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800af60:	7afb      	ldrb	r3, [r7, #11]
 800af62:	2b20      	cmp	r3, #32
 800af64:	d801      	bhi.n	800af6a <_ZL11create_nameP3DIRPPKc+0x11a>
 800af66:	2204      	movs	r2, #4
 800af68:	e000      	b.n	800af6c <_ZL11create_nameP3DIRPPKc+0x11c>
 800af6a:	2200      	movs	r2, #0
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	330b      	adds	r3, #11
 800af70:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800af72:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800af74:	4618      	mov	r0, r3
 800af76:	3720      	adds	r7, #32
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	0800cf44 	.word	0x0800cf44
 800af80:	0800ced0 	.word	0x0800ced0

0800af84 <_ZL11follow_pathP3DIRPKc>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b086      	sub	sp, #24
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	2b2f      	cmp	r3, #47	; 0x2f
 800af9e:	d003      	beq.n	800afa8 <_ZL11follow_pathP3DIRPKc+0x24>
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	2b5c      	cmp	r3, #92	; 0x5c
 800afa6:	d103      	bne.n	800afb0 <_ZL11follow_pathP3DIRPKc+0x2c>
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	3301      	adds	r3, #1
 800afac:	603b      	str	r3, [r7, #0]
 800afae:	e7f3      	b.n	800af98 <_ZL11follow_pathP3DIRPKc+0x14>
		obj->sclust = 0;					/* Start from root directory */
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	2200      	movs	r2, #0
 800afb4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	2b1f      	cmp	r3, #31
 800afbc:	d80a      	bhi.n	800afd4 <_ZL11follow_pathP3DIRPKc+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2280      	movs	r2, #128	; 0x80
 800afc2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800afc6:	2100      	movs	r1, #0
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f7ff fcdf 	bl	800a98c <_ZL7dir_sdiP3DIRm>
 800afce:	4603      	mov	r3, r0
 800afd0:	75fb      	strb	r3, [r7, #23]
 800afd2:	e043      	b.n	800b05c <_ZL11follow_pathP3DIRPKc+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800afd4:	463b      	mov	r3, r7
 800afd6:	4619      	mov	r1, r3
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f7ff ff39 	bl	800ae50 <_ZL11create_nameP3DIRPPKc>
 800afde:	4603      	mov	r3, r0
 800afe0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800afe2:	7dfb      	ldrb	r3, [r7, #23]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d134      	bne.n	800b052 <_ZL11follow_pathP3DIRPKc+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f7ff fea5 	bl	800ad38 <_ZL8dir_findP3DIR>
 800afee:	4603      	mov	r3, r0
 800aff0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800aff8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800affa:	7dfb      	ldrb	r3, [r7, #23]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d00a      	beq.n	800b016 <_ZL11follow_pathP3DIRPKc+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b000:	7dfb      	ldrb	r3, [r7, #23]
 800b002:	2b04      	cmp	r3, #4
 800b004:	d127      	bne.n	800b056 <_ZL11follow_pathP3DIRPKc+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b006:	7afb      	ldrb	r3, [r7, #11]
 800b008:	f003 0304 	and.w	r3, r3, #4
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d122      	bne.n	800b056 <_ZL11follow_pathP3DIRPKc+0xd2>
 800b010:	2305      	movs	r3, #5
 800b012:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b014:	e01f      	b.n	800b056 <_ZL11follow_pathP3DIRPKc+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b016:	7afb      	ldrb	r3, [r7, #11]
 800b018:	f003 0304 	and.w	r3, r3, #4
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d11c      	bne.n	800b05a <_ZL11follow_pathP3DIRPKc+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	799b      	ldrb	r3, [r3, #6]
 800b024:	f003 0310 	and.w	r3, r3, #16
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d102      	bne.n	800b032 <_ZL11follow_pathP3DIRPKc+0xae>
				res = FR_NO_PATH; break;
 800b02c:	2305      	movs	r3, #5
 800b02e:	75fb      	strb	r3, [r7, #23]
 800b030:	e014      	b.n	800b05c <_ZL11follow_pathP3DIRPKc+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	695b      	ldr	r3, [r3, #20]
 800b03c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b040:	4413      	add	r3, r2
 800b042:	4619      	mov	r1, r3
 800b044:	68f8      	ldr	r0, [r7, #12]
 800b046:	f7ff fe38 	bl	800acba <_ZL8ld_clustP5FATFSPKh>
 800b04a:	4602      	mov	r2, r0
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b050:	e7c0      	b.n	800afd4 <_ZL11follow_pathP3DIRPKc+0x50>
			if (res != FR_OK) break;
 800b052:	bf00      	nop
 800b054:	e002      	b.n	800b05c <_ZL11follow_pathP3DIRPKc+0xd8>
				break;
 800b056:	bf00      	nop
 800b058:	e000      	b.n	800b05c <_ZL11follow_pathP3DIRPKc+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b05a:	bf00      	nop
			}
		}
	}

	return res;
 800b05c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3718      	adds	r7, #24
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <_ZL12get_ldnumberPPKc>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b066:	b480      	push	{r7}
 800b068:	b087      	sub	sp, #28
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b06e:	f04f 33ff 	mov.w	r3, #4294967295
 800b072:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d031      	beq.n	800b0e0 <_ZL12get_ldnumberPPKc+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	617b      	str	r3, [r7, #20]
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	2b20      	cmp	r3, #32
 800b088:	d907      	bls.n	800b09a <_ZL12get_ldnumberPPKc+0x34>
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	2b3a      	cmp	r3, #58	; 0x3a
 800b090:	d003      	beq.n	800b09a <_ZL12get_ldnumberPPKc+0x34>
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	3301      	adds	r3, #1
 800b096:	617b      	str	r3, [r7, #20]
 800b098:	e7f3      	b.n	800b082 <_ZL12get_ldnumberPPKc+0x1c>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	2b3a      	cmp	r3, #58	; 0x3a
 800b0a0:	d11c      	bne.n	800b0dc <_ZL12get_ldnumberPPKc+0x76>
			tp = *path;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	1c5a      	adds	r2, r3, #1
 800b0ac:	60fa      	str	r2, [r7, #12]
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	3b30      	subs	r3, #48	; 0x30
 800b0b2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	2b09      	cmp	r3, #9
 800b0b8:	d80e      	bhi.n	800b0d8 <_ZL12get_ldnumberPPKc+0x72>
 800b0ba:	68fa      	ldr	r2, [r7, #12]
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d10a      	bne.n	800b0d8 <_ZL12get_ldnumberPPKc+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d107      	bne.n	800b0d8 <_ZL12get_ldnumberPPKc+0x72>
					vol = (int)i;
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	617b      	str	r3, [r7, #20]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	697a      	ldr	r2, [r7, #20]
 800b0d6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	e002      	b.n	800b0e2 <_ZL12get_ldnumberPPKc+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b0dc:	2300      	movs	r3, #0
 800b0de:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b0e0:	693b      	ldr	r3, [r7, #16]
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	371c      	adds	r7, #28
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr
	...

0800b0f0 <_ZL8check_fsP5FATFSm>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	70da      	strb	r2, [r3, #3]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f04f 32ff 	mov.w	r2, #4294967295
 800b106:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b108:	6839      	ldr	r1, [r7, #0]
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f7ff f8a7 	bl	800a25e <_ZL11move_windowP5FATFSm>
 800b110:	4603      	mov	r3, r0
 800b112:	2b00      	cmp	r3, #0
 800b114:	bf14      	ite	ne
 800b116:	2301      	movne	r3, #1
 800b118:	2300      	moveq	r3, #0
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d001      	beq.n	800b124 <_ZL8check_fsP5FATFSm+0x34>
 800b120:	2304      	movs	r3, #4
 800b122:	e047      	b.n	800b1b4 <_ZL8check_fsP5FATFSm+0xc4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	3330      	adds	r3, #48	; 0x30
 800b128:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7fe fdcb 	bl	8009cc8 <_ZL7ld_wordPKh>
 800b132:	4603      	mov	r3, r0
 800b134:	461a      	mov	r2, r3
 800b136:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b13a:	429a      	cmp	r2, r3
 800b13c:	bf14      	ite	ne
 800b13e:	2301      	movne	r3, #1
 800b140:	2300      	moveq	r3, #0
 800b142:	b2db      	uxtb	r3, r3
 800b144:	2b00      	cmp	r3, #0
 800b146:	d001      	beq.n	800b14c <_ZL8check_fsP5FATFSm+0x5c>
 800b148:	2303      	movs	r3, #3
 800b14a:	e033      	b.n	800b1b4 <_ZL8check_fsP5FATFSm+0xc4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b152:	2be9      	cmp	r3, #233	; 0xe9
 800b154:	d009      	beq.n	800b16a <_ZL8check_fsP5FATFSm+0x7a>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b15c:	2beb      	cmp	r3, #235	; 0xeb
 800b15e:	d128      	bne.n	800b1b2 <_ZL8check_fsP5FATFSm+0xc2>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b166:	2b90      	cmp	r3, #144	; 0x90
 800b168:	d123      	bne.n	800b1b2 <_ZL8check_fsP5FATFSm+0xc2>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	3330      	adds	r3, #48	; 0x30
 800b16e:	3336      	adds	r3, #54	; 0x36
 800b170:	4618      	mov	r0, r3
 800b172:	f7fe fdc1 	bl	8009cf8 <_ZL8ld_dwordPKh>
 800b176:	4603      	mov	r3, r0
 800b178:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b17c:	4a0f      	ldr	r2, [pc, #60]	; (800b1bc <_ZL8check_fsP5FATFSm+0xcc>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	bf0c      	ite	eq
 800b182:	2301      	moveq	r3, #1
 800b184:	2300      	movne	r3, #0
 800b186:	b2db      	uxtb	r3, r3
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d001      	beq.n	800b190 <_ZL8check_fsP5FATFSm+0xa0>
 800b18c:	2300      	movs	r3, #0
 800b18e:	e011      	b.n	800b1b4 <_ZL8check_fsP5FATFSm+0xc4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	3330      	adds	r3, #48	; 0x30
 800b194:	3352      	adds	r3, #82	; 0x52
 800b196:	4618      	mov	r0, r3
 800b198:	f7fe fdae 	bl	8009cf8 <_ZL8ld_dwordPKh>
 800b19c:	4602      	mov	r2, r0
 800b19e:	4b08      	ldr	r3, [pc, #32]	; (800b1c0 <_ZL8check_fsP5FATFSm+0xd0>)
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	bf0c      	ite	eq
 800b1a4:	2301      	moveq	r3, #1
 800b1a6:	2300      	movne	r3, #0
 800b1a8:	b2db      	uxtb	r3, r3
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d001      	beq.n	800b1b2 <_ZL8check_fsP5FATFSm+0xc2>
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	e000      	b.n	800b1b4 <_ZL8check_fsP5FATFSm+0xc4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b1b2:	2302      	movs	r3, #2
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3708      	adds	r7, #8
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}
 800b1bc:	00544146 	.word	0x00544146
 800b1c0:	33544146 	.word	0x33544146

0800b1c4 <_ZL11find_volumePPKcPP5FATFSh>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b096      	sub	sp, #88	; 0x58
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	60f8      	str	r0, [r7, #12]
 800b1cc:	60b9      	str	r1, [r7, #8]
 800b1ce:	4613      	mov	r3, r2
 800b1d0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b1d8:	68f8      	ldr	r0, [r7, #12]
 800b1da:	f7ff ff44 	bl	800b066 <_ZL12get_ldnumberPPKc>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	627b      	str	r3, [r7, #36]	; 0x24
	if (vol < 0) return FR_INVALID_DRIVE;
 800b1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	da01      	bge.n	800b1ec <_ZL11find_volumePPKcPP5FATFSh+0x28>
 800b1e8:	230b      	movs	r3, #11
 800b1ea:	e246      	b.n	800b67a <_ZL11find_volumePPKcPP5FATFSh+0x4b6>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ee:	4aac      	ldr	r2, [pc, #688]	; (800b4a0 <_ZL11find_volumePPKcPP5FATFSh+0x2dc>)
 800b1f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b1f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d101      	bne.n	800b200 <_ZL11find_volumePPKcPP5FATFSh+0x3c>
 800b1fc:	230c      	movs	r3, #12
 800b1fe:	e23c      	b.n	800b67a <_ZL11find_volumePPKcPP5FATFSh+0x4b6>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b204:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b206:	79fb      	ldrb	r3, [r7, #7]
 800b208:	f023 0301 	bic.w	r3, r3, #1
 800b20c:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b20e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d01a      	beq.n	800b24c <_ZL11find_volumePPKcPP5FATFSh+0x88>
		stat = disk_status(fs->drv);
 800b216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b218:	785b      	ldrb	r3, [r3, #1]
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7fe fcb6 	bl	8009b8c <disk_status>
 800b220:	4603      	mov	r3, r0
 800b222:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b226:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b22a:	f003 0301 	and.w	r3, r3, #1
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d10c      	bne.n	800b24c <_ZL11find_volumePPKcPP5FATFSh+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b232:	79fb      	ldrb	r3, [r7, #7]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d007      	beq.n	800b248 <_ZL11find_volumePPKcPP5FATFSh+0x84>
 800b238:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b23c:	f003 0304 	and.w	r3, r3, #4
 800b240:	2b00      	cmp	r3, #0
 800b242:	d001      	beq.n	800b248 <_ZL11find_volumePPKcPP5FATFSh+0x84>
				return FR_WRITE_PROTECTED;
 800b244:	230a      	movs	r3, #10
 800b246:	e218      	b.n	800b67a <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
			}
			return FR_OK;				/* The file system object is valid */
 800b248:	2300      	movs	r3, #0
 800b24a:	e216      	b.n	800b67a <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b24c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b24e:	2200      	movs	r2, #0
 800b250:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b254:	b2da      	uxtb	r2, r3
 800b256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b258:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b25a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b25c:	785b      	ldrb	r3, [r3, #1]
 800b25e:	4618      	mov	r0, r3
 800b260:	f7fe fcae 	bl	8009bc0 <disk_initialize>
 800b264:	4603      	mov	r3, r0
 800b266:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b26a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b26e:	f003 0301 	and.w	r3, r3, #1
 800b272:	2b00      	cmp	r3, #0
 800b274:	d001      	beq.n	800b27a <_ZL11find_volumePPKcPP5FATFSh+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b276:	2303      	movs	r3, #3
 800b278:	e1ff      	b.n	800b67a <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b27a:	79fb      	ldrb	r3, [r7, #7]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d007      	beq.n	800b290 <_ZL11find_volumePPKcPP5FATFSh+0xcc>
 800b280:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b284:	f003 0304 	and.w	r3, r3, #4
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d001      	beq.n	800b290 <_ZL11find_volumePPKcPP5FATFSh+0xcc>
		return FR_WRITE_PROTECTED;
 800b28c:	230a      	movs	r3, #10
 800b28e:	e1f4      	b.n	800b67a <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b290:	2300      	movs	r3, #0
 800b292:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b294:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b296:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b298:	f7ff ff2a 	bl	800b0f0 <_ZL8check_fsP5FATFSm>
 800b29c:	4603      	mov	r3, r0
 800b29e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b2a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	d151      	bne.n	800b34e <_ZL11find_volumePPKcPP5FATFSh+0x18a>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	643b      	str	r3, [r7, #64]	; 0x40
 800b2ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2b0:	2b03      	cmp	r3, #3
 800b2b2:	d820      	bhi.n	800b2f6 <_ZL11find_volumePPKcPP5FATFSh+0x132>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b2b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b2ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2bc:	011b      	lsls	r3, r3, #4
 800b2be:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b2c2:	4413      	add	r3, r2
 800b2c4:	637b      	str	r3, [r7, #52]	; 0x34
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b2c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2c8:	3304      	adds	r3, #4
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d006      	beq.n	800b2de <_ZL11find_volumePPKcPP5FATFSh+0x11a>
 800b2d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2d2:	3308      	adds	r3, #8
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f7fe fd0f 	bl	8009cf8 <_ZL8ld_dwordPKh>
 800b2da:	4602      	mov	r2, r0
 800b2dc:	e000      	b.n	800b2e0 <_ZL11find_volumePPKcPP5FATFSh+0x11c>
 800b2de:	2200      	movs	r2, #0
 800b2e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2e2:	009b      	lsls	r3, r3, #2
 800b2e4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b2e8:	440b      	add	r3, r1
 800b2ea:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b2ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	643b      	str	r3, [r7, #64]	; 0x40
 800b2f4:	e7db      	b.n	800b2ae <_ZL11find_volumePPKcPP5FATFSh+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b2fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d002      	beq.n	800b306 <_ZL11find_volumePPKcPP5FATFSh+0x142>
 800b300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b302:	3b01      	subs	r3, #1
 800b304:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b308:	009b      	lsls	r3, r3, #2
 800b30a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b30e:	4413      	add	r3, r2
 800b310:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b314:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d005      	beq.n	800b328 <_ZL11find_volumePPKcPP5FATFSh+0x164>
 800b31c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b31e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b320:	f7ff fee6 	bl	800b0f0 <_ZL8check_fsP5FATFSm>
 800b324:	4603      	mov	r3, r0
 800b326:	e000      	b.n	800b32a <_ZL11find_volumePPKcPP5FATFSh+0x166>
 800b328:	2303      	movs	r3, #3
 800b32a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b32e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b332:	2b01      	cmp	r3, #1
 800b334:	d907      	bls.n	800b346 <_ZL11find_volumePPKcPP5FATFSh+0x182>
 800b336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b338:	3301      	adds	r3, #1
 800b33a:	643b      	str	r3, [r7, #64]	; 0x40
 800b33c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b33e:	2b03      	cmp	r3, #3
 800b340:	d801      	bhi.n	800b346 <_ZL11find_volumePPKcPP5FATFSh+0x182>
 800b342:	2301      	movs	r3, #1
 800b344:	e000      	b.n	800b348 <_ZL11find_volumePPKcPP5FATFSh+0x184>
 800b346:	2300      	movs	r3, #0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d000      	beq.n	800b34e <_ZL11find_volumePPKcPP5FATFSh+0x18a>
		do {							/* Find an FAT volume */
 800b34c:	e7db      	b.n	800b306 <_ZL11find_volumePPKcPP5FATFSh+0x142>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b34e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b352:	2b04      	cmp	r3, #4
 800b354:	d101      	bne.n	800b35a <_ZL11find_volumePPKcPP5FATFSh+0x196>
 800b356:	2301      	movs	r3, #1
 800b358:	e18f      	b.n	800b67a <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b35a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b35e:	2b01      	cmp	r3, #1
 800b360:	d901      	bls.n	800b366 <_ZL11find_volumePPKcPP5FATFSh+0x1a2>
 800b362:	230d      	movs	r3, #13
 800b364:	e189      	b.n	800b67a <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b368:	3330      	adds	r3, #48	; 0x30
 800b36a:	330b      	adds	r3, #11
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7fe fcab 	bl	8009cc8 <_ZL7ld_wordPKh>
 800b372:	4603      	mov	r3, r0
 800b374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b378:	bf14      	ite	ne
 800b37a:	2301      	movne	r3, #1
 800b37c:	2300      	moveq	r3, #0
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	2b00      	cmp	r3, #0
 800b382:	d001      	beq.n	800b388 <_ZL11find_volumePPKcPP5FATFSh+0x1c4>
 800b384:	230d      	movs	r3, #13
 800b386:	e178      	b.n	800b67a <_ZL11find_volumePPKcPP5FATFSh+0x4b6>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b38a:	3330      	adds	r3, #48	; 0x30
 800b38c:	3316      	adds	r3, #22
 800b38e:	4618      	mov	r0, r3
 800b390:	f7fe fc9a 	bl	8009cc8 <_ZL7ld_wordPKh>
 800b394:	4603      	mov	r3, r0
 800b396:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d106      	bne.n	800b3ac <_ZL11find_volumePPKcPP5FATFSh+0x1e8>
 800b39e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3a0:	3330      	adds	r3, #48	; 0x30
 800b3a2:	3324      	adds	r3, #36	; 0x24
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f7fe fca7 	bl	8009cf8 <_ZL8ld_dwordPKh>
 800b3aa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b3ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b3b0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b3b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3b4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b3b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3ba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b3bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3be:	789b      	ldrb	r3, [r3, #2]
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d005      	beq.n	800b3d0 <_ZL11find_volumePPKcPP5FATFSh+0x20c>
 800b3c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3c6:	789b      	ldrb	r3, [r3, #2]
 800b3c8:	2b02      	cmp	r3, #2
 800b3ca:	d001      	beq.n	800b3d0 <_ZL11find_volumePPKcPP5FATFSh+0x20c>
 800b3cc:	230d      	movs	r3, #13
 800b3ce:	e154      	b.n	800b67a <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b3d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3d2:	789b      	ldrb	r3, [r3, #2]
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3d8:	fb02 f303 	mul.w	r3, r2, r3
 800b3dc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b3de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3e4:	b29a      	uxth	r2, r3
 800b3e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3e8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b3ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3ec:	895b      	ldrh	r3, [r3, #10]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d008      	beq.n	800b404 <_ZL11find_volumePPKcPP5FATFSh+0x240>
 800b3f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3f4:	895b      	ldrh	r3, [r3, #10]
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3fa:	895b      	ldrh	r3, [r3, #10]
 800b3fc:	3b01      	subs	r3, #1
 800b3fe:	4013      	ands	r3, r2
 800b400:	2b00      	cmp	r3, #0
 800b402:	d001      	beq.n	800b408 <_ZL11find_volumePPKcPP5FATFSh+0x244>
 800b404:	230d      	movs	r3, #13
 800b406:	e138      	b.n	800b67a <_ZL11find_volumePPKcPP5FATFSh+0x4b6>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b40a:	3330      	adds	r3, #48	; 0x30
 800b40c:	3311      	adds	r3, #17
 800b40e:	4618      	mov	r0, r3
 800b410:	f7fe fc5a 	bl	8009cc8 <_ZL7ld_wordPKh>
 800b414:	4603      	mov	r3, r0
 800b416:	461a      	mov	r2, r3
 800b418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b41a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b41c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b41e:	891b      	ldrh	r3, [r3, #8]
 800b420:	f003 030f 	and.w	r3, r3, #15
 800b424:	2b00      	cmp	r3, #0
 800b426:	d001      	beq.n	800b42c <_ZL11find_volumePPKcPP5FATFSh+0x268>
 800b428:	230d      	movs	r3, #13
 800b42a:	e126      	b.n	800b67a <_ZL11find_volumePPKcPP5FATFSh+0x4b6>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b42c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b42e:	3330      	adds	r3, #48	; 0x30
 800b430:	3313      	adds	r3, #19
 800b432:	4618      	mov	r0, r3
 800b434:	f7fe fc48 	bl	8009cc8 <_ZL7ld_wordPKh>
 800b438:	4603      	mov	r3, r0
 800b43a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b43c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d106      	bne.n	800b450 <_ZL11find_volumePPKcPP5FATFSh+0x28c>
 800b442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b444:	3330      	adds	r3, #48	; 0x30
 800b446:	3320      	adds	r3, #32
 800b448:	4618      	mov	r0, r3
 800b44a:	f7fe fc55 	bl	8009cf8 <_ZL8ld_dwordPKh>
 800b44e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b452:	3330      	adds	r3, #48	; 0x30
 800b454:	330e      	adds	r3, #14
 800b456:	4618      	mov	r0, r3
 800b458:	f7fe fc36 	bl	8009cc8 <_ZL7ld_wordPKh>
 800b45c:	4603      	mov	r3, r0
 800b45e:	867b      	strh	r3, [r7, #50]	; 0x32
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b460:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b462:	2b00      	cmp	r3, #0
 800b464:	d101      	bne.n	800b46a <_ZL11find_volumePPKcPP5FATFSh+0x2a6>
 800b466:	230d      	movs	r3, #13
 800b468:	e107      	b.n	800b67a <_ZL11find_volumePPKcPP5FATFSh+0x4b6>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b46a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800b46c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b46e:	441a      	add	r2, r3
 800b470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b472:	891b      	ldrh	r3, [r3, #8]
 800b474:	091b      	lsrs	r3, r3, #4
 800b476:	4413      	add	r3, r2
 800b478:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b47a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b47e:	429a      	cmp	r2, r3
 800b480:	d201      	bcs.n	800b486 <_ZL11find_volumePPKcPP5FATFSh+0x2c2>
 800b482:	230d      	movs	r3, #13
 800b484:	e0f9      	b.n	800b67a <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b486:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b48a:	1ad3      	subs	r3, r2, r3
 800b48c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b48e:	8952      	ldrh	r2, [r2, #10]
 800b490:	fbb3 f3f2 	udiv	r3, r3, r2
 800b494:	62bb      	str	r3, [r7, #40]	; 0x28
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d103      	bne.n	800b4a4 <_ZL11find_volumePPKcPP5FATFSh+0x2e0>
 800b49c:	230d      	movs	r3, #13
 800b49e:	e0ec      	b.n	800b67a <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
 800b4a0:	24000a6c 	.word	0x24000a6c
		fmt = FS_FAT32;
 800b4a4:	2303      	movs	r3, #3
 800b4a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ac:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d802      	bhi.n	800b4ba <_ZL11find_volumePPKcPP5FATFSh+0x2f6>
 800b4b4:	2302      	movs	r3, #2
 800b4b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4bc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d802      	bhi.n	800b4ca <_ZL11find_volumePPKcPP5FATFSh+0x306>
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4cc:	1c9a      	adds	r2, r3, #2
 800b4ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4d0:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b4d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b4d6:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b4d8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800b4da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4dc:	441a      	add	r2, r3
 800b4de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4e0:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b4e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e6:	441a      	add	r2, r3
 800b4e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4ea:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800b4ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b4f0:	2b03      	cmp	r3, #3
 800b4f2:	d123      	bne.n	800b53c <_ZL11find_volumePPKcPP5FATFSh+0x378>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b4f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4f6:	3330      	adds	r3, #48	; 0x30
 800b4f8:	332a      	adds	r3, #42	; 0x2a
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7fe fbe4 	bl	8009cc8 <_ZL7ld_wordPKh>
 800b500:	4603      	mov	r3, r0
 800b502:	2b00      	cmp	r3, #0
 800b504:	bf14      	ite	ne
 800b506:	2301      	movne	r3, #1
 800b508:	2300      	moveq	r3, #0
 800b50a:	b2db      	uxtb	r3, r3
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d001      	beq.n	800b514 <_ZL11find_volumePPKcPP5FATFSh+0x350>
 800b510:	230d      	movs	r3, #13
 800b512:	e0b2      	b.n	800b67a <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b516:	891b      	ldrh	r3, [r3, #8]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d001      	beq.n	800b520 <_ZL11find_volumePPKcPP5FATFSh+0x35c>
 800b51c:	230d      	movs	r3, #13
 800b51e:	e0ac      	b.n	800b67a <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b522:	3330      	adds	r3, #48	; 0x30
 800b524:	332c      	adds	r3, #44	; 0x2c
 800b526:	4618      	mov	r0, r3
 800b528:	f7fe fbe6 	bl	8009cf8 <_ZL8ld_dwordPKh>
 800b52c:	4602      	mov	r2, r0
 800b52e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b530:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b534:	695b      	ldr	r3, [r3, #20]
 800b536:	009b      	lsls	r3, r3, #2
 800b538:	647b      	str	r3, [r7, #68]	; 0x44
 800b53a:	e01f      	b.n	800b57c <_ZL11find_volumePPKcPP5FATFSh+0x3b8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b53c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b53e:	891b      	ldrh	r3, [r3, #8]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d101      	bne.n	800b548 <_ZL11find_volumePPKcPP5FATFSh+0x384>
 800b544:	230d      	movs	r3, #13
 800b546:	e098      	b.n	800b67a <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b54a:	6a1a      	ldr	r2, [r3, #32]
 800b54c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b54e:	441a      	add	r2, r3
 800b550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b552:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b554:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b558:	2b02      	cmp	r3, #2
 800b55a:	d103      	bne.n	800b564 <_ZL11find_volumePPKcPP5FATFSh+0x3a0>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b55c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b55e:	695b      	ldr	r3, [r3, #20]
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b560:	005b      	lsls	r3, r3, #1
 800b562:	e00a      	b.n	800b57a <_ZL11find_volumePPKcPP5FATFSh+0x3b6>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b566:	695a      	ldr	r2, [r3, #20]
 800b568:	4613      	mov	r3, r2
 800b56a:	005b      	lsls	r3, r3, #1
 800b56c:	4413      	add	r3, r2
 800b56e:	085a      	lsrs	r2, r3, #1
 800b570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b572:	695b      	ldr	r3, [r3, #20]
 800b574:	f003 0301 	and.w	r3, r3, #1
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b578:	4413      	add	r3, r2
 800b57a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b57c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b57e:	699a      	ldr	r2, [r3, #24]
 800b580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b582:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b586:	0a5b      	lsrs	r3, r3, #9
 800b588:	429a      	cmp	r2, r3
 800b58a:	d201      	bcs.n	800b590 <_ZL11find_volumePPKcPP5FATFSh+0x3cc>
 800b58c:	230d      	movs	r3, #13
 800b58e:	e074      	b.n	800b67a <_ZL11find_volumePPKcPP5FATFSh+0x4b6>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b592:	f04f 32ff 	mov.w	r2, #4294967295
 800b596:	611a      	str	r2, [r3, #16]
 800b598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b59a:	691a      	ldr	r2, [r3, #16]
 800b59c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b59e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b5a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5a2:	2280      	movs	r2, #128	; 0x80
 800b5a4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
			&& ld_word(fs->win + BPB_FSInfo32) == 1
			&& move_window(fs, bsect + 1) == FR_OK)
 800b5a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b5aa:	2b03      	cmp	r3, #3
 800b5ac:	d113      	bne.n	800b5d6 <_ZL11find_volumePPKcPP5FATFSh+0x412>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b5ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5b0:	3330      	adds	r3, #48	; 0x30
 800b5b2:	3330      	adds	r3, #48	; 0x30
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f7fe fb87 	bl	8009cc8 <_ZL7ld_wordPKh>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d10a      	bne.n	800b5d6 <_ZL11find_volumePPKcPP5FATFSh+0x412>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b5c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b5c8:	f7fe fe49 	bl	800a25e <_ZL11move_windowP5FATFSm>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d101      	bne.n	800b5d6 <_ZL11find_volumePPKcPP5FATFSh+0x412>
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	e000      	b.n	800b5d8 <_ZL11find_volumePPKcPP5FATFSh+0x414>
 800b5d6:	2300      	movs	r3, #0
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d03c      	beq.n	800b656 <_ZL11find_volumePPKcPP5FATFSh+0x492>
		{
			fs->fsi_flag = 0;
 800b5dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5de:	2200      	movs	r2, #0
 800b5e0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b5e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5e4:	3330      	adds	r3, #48	; 0x30
 800b5e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7fe fb6c 	bl	8009cc8 <_ZL7ld_wordPKh>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	461a      	mov	r2, r3
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b5f4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d115      	bne.n	800b628 <_ZL11find_volumePPKcPP5FATFSh+0x464>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b5fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5fe:	3330      	adds	r3, #48	; 0x30
 800b600:	4618      	mov	r0, r3
 800b602:	f7fe fb79 	bl	8009cf8 <_ZL8ld_dwordPKh>
 800b606:	4602      	mov	r2, r0
 800b608:	4b1e      	ldr	r3, [pc, #120]	; (800b684 <_ZL11find_volumePPKcPP5FATFSh+0x4c0>)
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d10c      	bne.n	800b628 <_ZL11find_volumePPKcPP5FATFSh+0x464>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b60e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b610:	3330      	adds	r3, #48	; 0x30
 800b612:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b616:	4618      	mov	r0, r3
 800b618:	f7fe fb6e 	bl	8009cf8 <_ZL8ld_dwordPKh>
 800b61c:	4602      	mov	r2, r0
 800b61e:	4b1a      	ldr	r3, [pc, #104]	; (800b688 <_ZL11find_volumePPKcPP5FATFSh+0x4c4>)
 800b620:	429a      	cmp	r2, r3
 800b622:	d101      	bne.n	800b628 <_ZL11find_volumePPKcPP5FATFSh+0x464>
 800b624:	2301      	movs	r3, #1
 800b626:	e000      	b.n	800b62a <_ZL11find_volumePPKcPP5FATFSh+0x466>
 800b628:	2300      	movs	r3, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d013      	beq.n	800b656 <_ZL11find_volumePPKcPP5FATFSh+0x492>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b62e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b630:	3330      	adds	r3, #48	; 0x30
 800b632:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b636:	4618      	mov	r0, r3
 800b638:	f7fe fb5e 	bl	8009cf8 <_ZL8ld_dwordPKh>
 800b63c:	4602      	mov	r2, r0
 800b63e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b640:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b644:	3330      	adds	r3, #48	; 0x30
 800b646:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b64a:	4618      	mov	r0, r3
 800b64c:	f7fe fb54 	bl	8009cf8 <_ZL8ld_dwordPKh>
 800b650:	4602      	mov	r2, r0
 800b652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b654:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b658:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b65c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b65e:	4b0b      	ldr	r3, [pc, #44]	; (800b68c <_ZL11find_volumePPKcPP5FATFSh+0x4c8>)
 800b660:	881b      	ldrh	r3, [r3, #0]
 800b662:	3301      	adds	r3, #1
 800b664:	b29a      	uxth	r2, r3
 800b666:	4b09      	ldr	r3, [pc, #36]	; (800b68c <_ZL11find_volumePPKcPP5FATFSh+0x4c8>)
 800b668:	801a      	strh	r2, [r3, #0]
 800b66a:	4b08      	ldr	r3, [pc, #32]	; (800b68c <_ZL11find_volumePPKcPP5FATFSh+0x4c8>)
 800b66c:	881a      	ldrh	r2, [r3, #0]
 800b66e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b670:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b672:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b674:	f7fe fd86 	bl	800a184 <_ZL10clear_lockP5FATFS>
#endif
	return FR_OK;
 800b678:	2300      	movs	r3, #0
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3758      	adds	r7, #88	; 0x58
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
 800b682:	bf00      	nop
 800b684:	41615252 	.word	0x41615252
 800b688:	61417272 	.word	0x61417272
 800b68c:	24000a70 	.word	0x24000a70

0800b690 <_ZL8validateP5_FDIDPP5FATFS>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b69a:	2309      	movs	r3, #9
 800b69c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d021      	beq.n	800b6e8 <_ZL8validateP5_FDIDPP5FATFS+0x58>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d01d      	beq.n	800b6e8 <_ZL8validateP5_FDIDPP5FATFS+0x58>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d018      	beq.n	800b6e8 <_ZL8validateP5_FDIDPP5FATFS+0x58>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	889a      	ldrh	r2, [r3, #4]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	88db      	ldrh	r3, [r3, #6]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d111      	bne.n	800b6e8 <_ZL8validateP5_FDIDPP5FATFS+0x58>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	785b      	ldrb	r3, [r3, #1]
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7fe fa5e 	bl	8009b8c <disk_status>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	f003 0301 	and.w	r3, r3, #1
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	bf0c      	ite	eq
 800b6da:	2301      	moveq	r3, #1
 800b6dc:	2300      	movne	r3, #0
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d001      	beq.n	800b6e8 <_ZL8validateP5_FDIDPP5FATFS+0x58>
			res = FR_OK;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b6e8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d102      	bne.n	800b6f4 <_ZL8validateP5_FDIDPP5FATFS+0x64>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	e000      	b.n	800b6f6 <_ZL8validateP5_FDIDPP5FATFS+0x66>
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	683a      	ldr	r2, [r7, #0]
 800b6f8:	6013      	str	r3, [r2, #0]
	return res;
 800b6fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3710      	adds	r7, #16
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}

0800b704 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b088      	sub	sp, #32
 800b708:	af00      	add	r7, sp, #0
 800b70a:	60f8      	str	r0, [r7, #12]
 800b70c:	60b9      	str	r1, [r7, #8]
 800b70e:	4613      	mov	r3, r2
 800b710:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b716:	f107 0310 	add.w	r3, r7, #16
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7ff fca3 	bl	800b066 <_ZL12get_ldnumberPPKc>
 800b720:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b722:	69fb      	ldr	r3, [r7, #28]
 800b724:	2b00      	cmp	r3, #0
 800b726:	da01      	bge.n	800b72c <f_mount+0x28>
 800b728:	230b      	movs	r3, #11
 800b72a:	e02b      	b.n	800b784 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b72c:	4a17      	ldr	r2, [pc, #92]	; (800b78c <f_mount+0x88>)
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b734:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b736:	69bb      	ldr	r3, [r7, #24]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d005      	beq.n	800b748 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b73c:	69b8      	ldr	r0, [r7, #24]
 800b73e:	f7fe fd21 	bl	800a184 <_ZL10clear_lockP5FATFS>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b742:	69bb      	ldr	r3, [r7, #24]
 800b744:	2200      	movs	r2, #0
 800b746:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d002      	beq.n	800b754 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2200      	movs	r2, #0
 800b752:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b754:	68fa      	ldr	r2, [r7, #12]
 800b756:	490d      	ldr	r1, [pc, #52]	; (800b78c <f_mount+0x88>)
 800b758:	69fb      	ldr	r3, [r7, #28]
 800b75a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d002      	beq.n	800b76a <f_mount+0x66>
 800b764:	79fb      	ldrb	r3, [r7, #7]
 800b766:	2b01      	cmp	r3, #1
 800b768:	d001      	beq.n	800b76e <f_mount+0x6a>
 800b76a:	2300      	movs	r3, #0
 800b76c:	e00a      	b.n	800b784 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b76e:	f107 010c 	add.w	r1, r7, #12
 800b772:	f107 0308 	add.w	r3, r7, #8
 800b776:	2200      	movs	r2, #0
 800b778:	4618      	mov	r0, r3
 800b77a:	f7ff fd23 	bl	800b1c4 <_ZL11find_volumePPKcPP5FATFSh>
 800b77e:	4603      	mov	r3, r0
 800b780:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b782:	7dfb      	ldrb	r3, [r7, #23]
}
 800b784:	4618      	mov	r0, r3
 800b786:	3720      	adds	r7, #32
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	24000a6c 	.word	0x24000a6c

0800b790 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b098      	sub	sp, #96	; 0x60
 800b794:	af00      	add	r7, sp, #0
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	60b9      	str	r1, [r7, #8]
 800b79a:	4613      	mov	r3, r2
 800b79c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d101      	bne.n	800b7a8 <f_open+0x18>
 800b7a4:	2309      	movs	r3, #9
 800b7a6:	e1b5      	b.n	800bb14 <f_open+0x384>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b7a8:	79fb      	ldrb	r3, [r7, #7]
 800b7aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b7ae:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b7b0:	79fa      	ldrb	r2, [r7, #7]
 800b7b2:	f107 0110 	add.w	r1, r7, #16
 800b7b6:	f107 0308 	add.w	r3, r7, #8
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7ff fd02 	bl	800b1c4 <_ZL11find_volumePPKcPP5FATFSh>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b7c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	f040 8199 	bne.w	800bb02 <f_open+0x372>
		dj.obj.fs = fs;
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b7d4:	68ba      	ldr	r2, [r7, #8]
 800b7d6:	f107 0314 	add.w	r3, r7, #20
 800b7da:	4611      	mov	r1, r2
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f7ff fbd1 	bl	800af84 <_ZL11follow_pathP3DIRPKc>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b7e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d119      	bne.n	800b824 <f_open+0x94>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b7f0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b7f4:	b25b      	sxtb	r3, r3
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	da03      	bge.n	800b802 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b7fa:	2306      	movs	r3, #6
 800b7fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b800:	e010      	b.n	800b824 <f_open+0x94>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b802:	79fb      	ldrb	r3, [r7, #7]
 800b804:	f023 0301 	bic.w	r3, r3, #1
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d001      	beq.n	800b810 <f_open+0x80>
 800b80c:	2201      	movs	r2, #1
 800b80e:	e000      	b.n	800b812 <f_open+0x82>
 800b810:	2200      	movs	r2, #0
 800b812:	f107 0314 	add.w	r3, r7, #20
 800b816:	4611      	mov	r1, r2
 800b818:	4618      	mov	r0, r3
 800b81a:	f7fe fb67 	bl	8009eec <_ZL8chk_lockP3DIRi>
 800b81e:	4603      	mov	r3, r0
 800b820:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b824:	79fb      	ldrb	r3, [r7, #7]
 800b826:	f003 031c 	and.w	r3, r3, #28
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d07f      	beq.n	800b92e <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 800b82e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b832:	2b00      	cmp	r3, #0
 800b834:	d017      	beq.n	800b866 <f_open+0xd6>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b836:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b83a:	2b04      	cmp	r3, #4
 800b83c:	d10e      	bne.n	800b85c <f_open+0xcc>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b83e:	f7fe fbb1 	bl	8009fa4 <_ZL8enq_lockv>
 800b842:	4603      	mov	r3, r0
 800b844:	2b00      	cmp	r3, #0
 800b846:	d006      	beq.n	800b856 <f_open+0xc6>
 800b848:	f107 0314 	add.w	r3, r7, #20
 800b84c:	4618      	mov	r0, r3
 800b84e:	f7ff facd 	bl	800adec <_ZL12dir_registerP3DIR>
 800b852:	4603      	mov	r3, r0
 800b854:	e000      	b.n	800b858 <f_open+0xc8>
 800b856:	2312      	movs	r3, #18
 800b858:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b85c:	79fb      	ldrb	r3, [r7, #7]
 800b85e:	f043 0308 	orr.w	r3, r3, #8
 800b862:	71fb      	strb	r3, [r7, #7]
 800b864:	e010      	b.n	800b888 <f_open+0xf8>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b866:	7ebb      	ldrb	r3, [r7, #26]
 800b868:	f003 0311 	and.w	r3, r3, #17
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d003      	beq.n	800b878 <f_open+0xe8>
					res = FR_DENIED;
 800b870:	2307      	movs	r3, #7
 800b872:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b876:	e007      	b.n	800b888 <f_open+0xf8>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b878:	79fb      	ldrb	r3, [r7, #7]
 800b87a:	f003 0304 	and.w	r3, r3, #4
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d002      	beq.n	800b888 <f_open+0xf8>
 800b882:	2308      	movs	r3, #8
 800b884:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b888:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d168      	bne.n	800b962 <f_open+0x1d2>
 800b890:	79fb      	ldrb	r3, [r7, #7]
 800b892:	f003 0308 	and.w	r3, r3, #8
 800b896:	2b00      	cmp	r3, #0
 800b898:	d063      	beq.n	800b962 <f_open+0x1d2>
				dw = GET_FATTIME();
 800b89a:	f7fd f9ad 	bl	8008bf8 <get_fattime>
 800b89e:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8a2:	330e      	adds	r3, #14
 800b8a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7fe fa64 	bl	8009d74 <_ZL8st_dwordPhm>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b8ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ae:	3316      	adds	r3, #22
 800b8b0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7fe fa5e 	bl	8009d74 <_ZL8st_dwordPhm>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ba:	330b      	adds	r3, #11
 800b8bc:	2220      	movs	r2, #32
 800b8be:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8c4:	4611      	mov	r1, r2
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7ff f9f7 	bl	800acba <_ZL8ld_clustP5FATFSPKh>
 800b8cc:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f7ff fa0f 	bl	800acf8 <_ZL8st_clustP5FATFSPhm>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b8da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8dc:	331c      	adds	r3, #28
 800b8de:	2100      	movs	r1, #0
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7fe fa47 	bl	8009d74 <_ZL8st_dwordPhm>
					fs->wflag = 1;
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b8ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d037      	beq.n	800b962 <f_open+0x1d2>
						dw = fs->winsect;
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f6:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b8f8:	f107 0314 	add.w	r3, r7, #20
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b900:	4618      	mov	r0, r3
 800b902:	f7fe ff12 	bl	800a72a <_ZL12remove_chainP5_FDIDmm>
 800b906:	4603      	mov	r3, r0
 800b908:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b90c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b910:	2b00      	cmp	r3, #0
 800b912:	d126      	bne.n	800b962 <f_open+0x1d2>
							res = move_window(fs, dw);
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b918:	4618      	mov	r0, r3
 800b91a:	f7fe fca0 	bl	800a25e <_ZL11move_windowP5FATFSm>
 800b91e:	4603      	mov	r3, r0
 800b920:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b928:	3a01      	subs	r2, #1
 800b92a:	60da      	str	r2, [r3, #12]
 800b92c:	e019      	b.n	800b962 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b92e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b932:	2b00      	cmp	r3, #0
 800b934:	d115      	bne.n	800b962 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b936:	7ebb      	ldrb	r3, [r7, #26]
 800b938:	f003 0310 	and.w	r3, r3, #16
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d003      	beq.n	800b948 <f_open+0x1b8>
					res = FR_NO_FILE;
 800b940:	2304      	movs	r3, #4
 800b942:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b946:	e00c      	b.n	800b962 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b948:	79fb      	ldrb	r3, [r7, #7]
 800b94a:	f003 0302 	and.w	r3, r3, #2
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d007      	beq.n	800b962 <f_open+0x1d2>
 800b952:	7ebb      	ldrb	r3, [r7, #26]
 800b954:	f003 0301 	and.w	r3, r3, #1
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d002      	beq.n	800b962 <f_open+0x1d2>
						res = FR_DENIED;
 800b95c:	2307      	movs	r3, #7
 800b95e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b962:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b966:	2b00      	cmp	r3, #0
 800b968:	d127      	bne.n	800b9ba <f_open+0x22a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b96a:	79fb      	ldrb	r3, [r7, #7]
 800b96c:	f003 0308 	and.w	r3, r3, #8
 800b970:	2b00      	cmp	r3, #0
 800b972:	d003      	beq.n	800b97c <f_open+0x1ec>
				mode |= FA_MODIFIED;
 800b974:	79fb      	ldrb	r3, [r7, #7]
 800b976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b97a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b98a:	79fb      	ldrb	r3, [r7, #7]
 800b98c:	f023 0301 	bic.w	r3, r3, #1
 800b990:	2b00      	cmp	r3, #0
 800b992:	d001      	beq.n	800b998 <f_open+0x208>
 800b994:	2201      	movs	r2, #1
 800b996:	e000      	b.n	800b99a <f_open+0x20a>
 800b998:	2200      	movs	r2, #0
 800b99a:	f107 0314 	add.w	r3, r7, #20
 800b99e:	4611      	mov	r1, r2
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7fe fb21 	bl	8009fe8 <_ZL8inc_lockP3DIRi>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	691b      	ldr	r3, [r3, #16]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d102      	bne.n	800b9ba <f_open+0x22a>
 800b9b4:	2302      	movs	r3, #2
 800b9b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b9ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	f040 809f 	bne.w	800bb02 <f_open+0x372>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9c8:	4611      	mov	r1, r2
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f7ff f975 	bl	800acba <_ZL8ld_clustP5FATFSPKh>
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b9d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9d8:	331c      	adds	r3, #28
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f7fe f98c 	bl	8009cf8 <_ZL8ld_dwordPKh>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b9ec:	693a      	ldr	r2, [r7, #16]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	88da      	ldrh	r2, [r3, #6]
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	79fa      	ldrb	r2, [r7, #7]
 800b9fe:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2200      	movs	r2, #0
 800ba04:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	3330      	adds	r3, #48	; 0x30
 800ba16:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba1a:	2100      	movs	r1, #0
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f7fe f9fc 	bl	8009e1a <_ZL7mem_setPvij>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ba22:	79fb      	ldrb	r3, [r7, #7]
 800ba24:	f003 0320 	and.w	r3, r3, #32
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d06a      	beq.n	800bb02 <f_open+0x372>
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	68db      	ldr	r3, [r3, #12]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d066      	beq.n	800bb02 <f_open+0x372>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	68da      	ldr	r2, [r3, #12]
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	895b      	ldrh	r3, [r3, #10]
 800ba40:	025b      	lsls	r3, r3, #9
 800ba42:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	689b      	ldr	r3, [r3, #8]
 800ba48:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	68db      	ldr	r3, [r3, #12]
 800ba4e:	657b      	str	r3, [r7, #84]	; 0x54
 800ba50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d11b      	bne.n	800ba90 <f_open+0x300>
 800ba58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d917      	bls.n	800ba90 <f_open+0x300>
					clst = get_fat(&fp->obj, clst);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7fe fcc0 	bl	800a3ea <_ZL7get_fatP5_FDIDm>
 800ba6a:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ba6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	d802      	bhi.n	800ba78 <f_open+0x2e8>
 800ba72:	2302      	movs	r3, #2
 800ba74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ba78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba7e:	d102      	bne.n	800ba86 <f_open+0x2f6>
 800ba80:	2301      	movs	r3, #1
 800ba82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ba86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba8a:	1ad3      	subs	r3, r2, r3
 800ba8c:	657b      	str	r3, [r7, #84]	; 0x54
 800ba8e:	e7df      	b.n	800ba50 <f_open+0x2c0>
				}
				fp->clust = clst;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba94:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ba96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d131      	bne.n	800bb02 <f_open+0x372>
 800ba9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800baa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d02c      	beq.n	800bb02 <f_open+0x372>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800baac:	4618      	mov	r0, r3
 800baae:	f7fe fc7d 	bl	800a3ac <_ZL10clust2sectP5FATFSm>
 800bab2:	6478      	str	r0, [r7, #68]	; 0x44
 800bab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	bf0c      	ite	eq
 800baba:	2301      	moveq	r3, #1
 800babc:	2300      	movne	r3, #0
 800babe:	b2db      	uxtb	r3, r3
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d003      	beq.n	800bacc <f_open+0x33c>
						res = FR_INT_ERR;
 800bac4:	2302      	movs	r3, #2
 800bac6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800baca:	e01a      	b.n	800bb02 <f_open+0x372>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bacc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bace:	0a5a      	lsrs	r2, r3, #9
 800bad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bad2:	441a      	add	r2, r3
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	7858      	ldrb	r0, [r3, #1]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	6a1a      	ldr	r2, [r3, #32]
 800bae6:	2301      	movs	r3, #1
 800bae8:	f7fe f890 	bl	8009c0c <disk_read>
 800baec:	4603      	mov	r3, r0
 800baee:	2b00      	cmp	r3, #0
 800baf0:	bf14      	ite	ne
 800baf2:	2301      	movne	r3, #1
 800baf4:	2300      	moveq	r3, #0
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d002      	beq.n	800bb02 <f_open+0x372>
 800bafc:	2301      	movs	r3, #1
 800bafe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bb02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d002      	beq.n	800bb10 <f_open+0x380>
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bb10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3760      	adds	r7, #96	; 0x60
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b08e      	sub	sp, #56	; 0x38
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	60f8      	str	r0, [r7, #12]
 800bb24:	60b9      	str	r1, [r7, #8]
 800bb26:	607a      	str	r2, [r7, #4]
 800bb28:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	2200      	movs	r2, #0
 800bb32:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f107 0214 	add.w	r2, r7, #20
 800bb3a:	4611      	mov	r1, r2
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f7ff fda7 	bl	800b690 <_ZL8validateP5_FDIDPP5FATFS>
 800bb42:	4603      	mov	r3, r0
 800bb44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bb48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d107      	bne.n	800bb60 <f_read+0x44>
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	7d5b      	ldrb	r3, [r3, #21]
 800bb54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bb58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d001      	beq.n	800bb64 <f_read+0x48>
 800bb60:	2301      	movs	r3, #1
 800bb62:	e000      	b.n	800bb66 <f_read+0x4a>
 800bb64:	2300      	movs	r3, #0
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d002      	beq.n	800bb70 <f_read+0x54>
 800bb6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb6e:	e123      	b.n	800bdb8 <f_read+0x29c>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	7d1b      	ldrb	r3, [r3, #20]
 800bb74:	f003 0301 	and.w	r3, r3, #1
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d101      	bne.n	800bb80 <f_read+0x64>
 800bb7c:	2307      	movs	r3, #7
 800bb7e:	e11b      	b.n	800bdb8 <f_read+0x29c>
	remain = fp->obj.objsize - fp->fptr;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	68da      	ldr	r2, [r3, #12]
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	699b      	ldr	r3, [r3, #24]
 800bb88:	1ad3      	subs	r3, r2, r3
 800bb8a:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800bb8c:	687a      	ldr	r2, [r7, #4]
 800bb8e:	6a3b      	ldr	r3, [r7, #32]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d901      	bls.n	800bb98 <f_read+0x7c>
 800bb94:	6a3b      	ldr	r3, [r7, #32]
 800bb96:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	f000 810b 	beq.w	800bdb6 <f_read+0x29a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	699b      	ldr	r3, [r3, #24]
 800bba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	f040 80d5 	bne.w	800bd58 <f_read+0x23c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	699b      	ldr	r3, [r3, #24]
 800bbb2:	0a5b      	lsrs	r3, r3, #9
 800bbb4:	697a      	ldr	r2, [r7, #20]
 800bbb6:	8952      	ldrh	r2, [r2, #10]
 800bbb8:	3a01      	subs	r2, #1
 800bbba:	4013      	ands	r3, r2
 800bbbc:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800bbbe:	69fb      	ldr	r3, [r7, #28]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d12f      	bne.n	800bc24 <f_read+0x108>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	699b      	ldr	r3, [r3, #24]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d103      	bne.n	800bbd4 <f_read+0xb8>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	633b      	str	r3, [r7, #48]	; 0x30
 800bbd2:	e013      	b.n	800bbfc <f_read+0xe0>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d007      	beq.n	800bbec <f_read+0xd0>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	699b      	ldr	r3, [r3, #24]
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	68f8      	ldr	r0, [r7, #12]
 800bbe4:	f7fe fe9e 	bl	800a924 <_ZL10clmt_clustP3FILm>
 800bbe8:	6338      	str	r0, [r7, #48]	; 0x30
 800bbea:	e007      	b.n	800bbfc <f_read+0xe0>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800bbec:	68fa      	ldr	r2, [r7, #12]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	69db      	ldr	r3, [r3, #28]
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	4610      	mov	r0, r2
 800bbf6:	f7fe fbf8 	bl	800a3ea <_ZL7get_fatP5_FDIDm>
 800bbfa:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800bbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfe:	2b01      	cmp	r3, #1
 800bc00:	d804      	bhi.n	800bc0c <f_read+0xf0>
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2202      	movs	r2, #2
 800bc06:	755a      	strb	r2, [r3, #21]
 800bc08:	2302      	movs	r3, #2
 800bc0a:	e0d5      	b.n	800bdb8 <f_read+0x29c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc12:	d104      	bne.n	800bc1e <f_read+0x102>
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2201      	movs	r2, #1
 800bc18:	755a      	strb	r2, [r3, #21]
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	e0cc      	b.n	800bdb8 <f_read+0x29c>
				fp->clust = clst;				/* Update current cluster */
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc22:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bc24:	697a      	ldr	r2, [r7, #20]
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	69db      	ldr	r3, [r3, #28]
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	4610      	mov	r0, r2
 800bc2e:	f7fe fbbd 	bl	800a3ac <_ZL10clust2sectP5FATFSm>
 800bc32:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bc34:	69bb      	ldr	r3, [r7, #24]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d104      	bne.n	800bc44 <f_read+0x128>
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2202      	movs	r2, #2
 800bc3e:	755a      	strb	r2, [r3, #21]
 800bc40:	2302      	movs	r3, #2
 800bc42:	e0b9      	b.n	800bdb8 <f_read+0x29c>
			sect += csect;
 800bc44:	69ba      	ldr	r2, [r7, #24]
 800bc46:	69fb      	ldr	r3, [r7, #28]
 800bc48:	4413      	add	r3, r2
 800bc4a:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	0a5b      	lsrs	r3, r3, #9
 800bc50:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800bc52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d03e      	beq.n	800bcd6 <f_read+0x1ba>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bc58:	69fa      	ldr	r2, [r7, #28]
 800bc5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5c:	4413      	add	r3, r2
 800bc5e:	697a      	ldr	r2, [r7, #20]
 800bc60:	8952      	ldrh	r2, [r2, #10]
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d905      	bls.n	800bc72 <f_read+0x156>
					cc = fs->csize - csect;
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	895b      	ldrh	r3, [r3, #10]
 800bc6a:	461a      	mov	r2, r3
 800bc6c:	69fb      	ldr	r3, [r7, #28]
 800bc6e:	1ad3      	subs	r3, r2, r3
 800bc70:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	7858      	ldrb	r0, [r3, #1]
 800bc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc78:	69ba      	ldr	r2, [r7, #24]
 800bc7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc7c:	f7fd ffc6 	bl	8009c0c <disk_read>
 800bc80:	4603      	mov	r3, r0
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	bf14      	ite	ne
 800bc86:	2301      	movne	r3, #1
 800bc88:	2300      	moveq	r3, #0
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d004      	beq.n	800bc9a <f_read+0x17e>
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	2201      	movs	r2, #1
 800bc94:	755a      	strb	r2, [r3, #21]
 800bc96:	2301      	movs	r3, #1
 800bc98:	e08e      	b.n	800bdb8 <f_read+0x29c>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	7d1b      	ldrb	r3, [r3, #20]
 800bc9e:	b25b      	sxtb	r3, r3
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	da14      	bge.n	800bcce <f_read+0x1b2>
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	6a1a      	ldr	r2, [r3, #32]
 800bca8:	69bb      	ldr	r3, [r7, #24]
 800bcaa:	1ad3      	subs	r3, r2, r3
 800bcac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d90d      	bls.n	800bcce <f_read+0x1b2>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	6a1a      	ldr	r2, [r3, #32]
 800bcb6:	69bb      	ldr	r3, [r7, #24]
 800bcb8:	1ad3      	subs	r3, r2, r3
 800bcba:	025b      	lsls	r3, r3, #9
 800bcbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcbe:	18d0      	adds	r0, r2, r3
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	3330      	adds	r3, #48	; 0x30
 800bcc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bcc8:	4619      	mov	r1, r3
 800bcca:	f7fe f87f 	bl	8009dcc <_ZL7mem_cpyPvPKvj>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800bcce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd0:	025b      	lsls	r3, r3, #9
 800bcd2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800bcd4:	e05a      	b.n	800bd8c <f_read+0x270>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	6a1b      	ldr	r3, [r3, #32]
 800bcda:	69ba      	ldr	r2, [r7, #24]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d038      	beq.n	800bd52 <f_read+0x236>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	7d1b      	ldrb	r3, [r3, #20]
 800bce4:	b25b      	sxtb	r3, r3
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	da1d      	bge.n	800bd26 <f_read+0x20a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	7858      	ldrb	r0, [r3, #1]
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	6a1a      	ldr	r2, [r3, #32]
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	f7fd ffa7 	bl	8009c4c <disk_write>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	bf14      	ite	ne
 800bd04:	2301      	movne	r3, #1
 800bd06:	2300      	moveq	r3, #0
 800bd08:	b2db      	uxtb	r3, r3
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d004      	beq.n	800bd18 <f_read+0x1fc>
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2201      	movs	r2, #1
 800bd12:	755a      	strb	r2, [r3, #21]
 800bd14:	2301      	movs	r3, #1
 800bd16:	e04f      	b.n	800bdb8 <f_read+0x29c>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	7d1b      	ldrb	r3, [r3, #20]
 800bd1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd20:	b2da      	uxtb	r2, r3
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	7858      	ldrb	r0, [r3, #1]
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bd30:	2301      	movs	r3, #1
 800bd32:	69ba      	ldr	r2, [r7, #24]
 800bd34:	f7fd ff6a 	bl	8009c0c <disk_read>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	bf14      	ite	ne
 800bd3e:	2301      	movne	r3, #1
 800bd40:	2300      	moveq	r3, #0
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d004      	beq.n	800bd52 <f_read+0x236>
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	755a      	strb	r2, [r3, #21]
 800bd4e:	2301      	movs	r3, #1
 800bd50:	e032      	b.n	800bdb8 <f_read+0x29c>
			}
#endif
			fp->sect = sect;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	69ba      	ldr	r2, [r7, #24]
 800bd56:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	699b      	ldr	r3, [r3, #24]
 800bd5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd60:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bd64:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800bd66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d901      	bls.n	800bd72 <f_read+0x256>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	699b      	ldr	r3, [r3, #24]
 800bd7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd80:	4413      	add	r3, r2
 800bd82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd84:	4619      	mov	r1, r3
 800bd86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd88:	f7fe f820 	bl	8009dcc <_ZL7mem_cpyPvPKvj>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800bd8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd90:	4413      	add	r3, r2
 800bd92:	627b      	str	r3, [r7, #36]	; 0x24
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	699a      	ldr	r2, [r3, #24]
 800bd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd9a:	441a      	add	r2, r3
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	619a      	str	r2, [r3, #24]
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda6:	441a      	add	r2, r3
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	601a      	str	r2, [r3, #0]
 800bdac:	687a      	ldr	r2, [r7, #4]
 800bdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb0:	1ad3      	subs	r3, r2, r3
 800bdb2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800bdb4:	e6f0      	b.n	800bb98 <f_read+0x7c>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800bdb6:	2300      	movs	r3, #0
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3738      	adds	r7, #56	; 0x38
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <_ZN6FatDMA17f_write_dma_startEP3FILPKvj>:
FRESULT FatDMA::f_write_dma_start (
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw			/* Number of bytes to write */
)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	60f8      	str	r0, [r7, #12]
 800bdc8:	60b9      	str	r1, [r7, #8]
 800bdca:	607a      	str	r2, [r7, #4]
 800bdcc:	603b      	str	r3, [r7, #0]
	wbuff = (const BYTE*)buff;   //lost const qualifier
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	this->fp = fp;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	68ba      	ldr	r2, [r7, #8]
 800bdda:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	this->btw = btw;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	683a      	ldr	r2, [r7, #0]
 800bde2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	wcnt = 0; // clst = 0; sect = 0;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	2200      	movs	r2, #0
 800bdea:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	cc = 0; csect = 0;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bdfe:	68ba      	ldr	r2, [r7, #8]
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	3388      	adds	r3, #136	; 0x88
 800be04:	4619      	mov	r1, r3
 800be06:	4610      	mov	r0, r2
 800be08:	f7ff fc42 	bl	800b690 <_ZL8validateP5_FDIDPP5FATFS>
 800be0c:	4603      	mov	r3, r0
 800be0e:	461a      	mov	r2, r3
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d109      	bne.n	800be34 <_ZN6FatDMA17f_write_dma_startEP3FILPKvj+0x74>
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	7d5a      	ldrb	r2, [r3, #21]
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800be30:	2b00      	cmp	r3, #0
 800be32:	d001      	beq.n	800be38 <_ZN6FatDMA17f_write_dma_startEP3FILPKvj+0x78>
 800be34:	2301      	movs	r3, #1
 800be36:	e000      	b.n	800be3a <_ZN6FatDMA17f_write_dma_startEP3FILPKvj+0x7a>
 800be38:	2300      	movs	r3, #0
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d003      	beq.n	800be46 <_ZN6FatDMA17f_write_dma_startEP3FILPKvj+0x86>
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800be44:	e017      	b.n	800be76 <_ZN6FatDMA17f_write_dma_startEP3FILPKvj+0xb6>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	7d1b      	ldrb	r3, [r3, #20]
 800be4a:	f003 0302 	and.w	r3, r3, #2
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d101      	bne.n	800be56 <_ZN6FatDMA17f_write_dma_startEP3FILPKvj+0x96>
 800be52:	2307      	movs	r3, #7
 800be54:	e00f      	b.n	800be76 <_ZN6FatDMA17f_write_dma_startEP3FILPKvj+0xb6>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	699a      	ldr	r2, [r3, #24]
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	441a      	add	r2, r3
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	699b      	ldr	r3, [r3, #24]
 800be62:	429a      	cmp	r2, r3
 800be64:	d203      	bcs.n	800be6e <_ZN6FatDMA17f_write_dma_startEP3FILPKvj+0xae>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	699b      	ldr	r3, [r3, #24]
 800be6a:	43db      	mvns	r3, r3
 800be6c:	603b      	str	r3, [r7, #0]
	}

	return f_write_dma_loop();
 800be6e:	68f8      	ldr	r0, [r7, #12]
 800be70:	f000 f805 	bl	800be7e <_ZN6FatDMA16f_write_dma_loopEv>
 800be74:	4603      	mov	r3, r0

}
 800be76:	4618      	mov	r0, r3
 800be78:	3710      	adds	r7, #16
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}

0800be7e <_ZN6FatDMA16f_write_dma_loopEv>:

FRESULT FatDMA::f_write_dma_loop() {
 800be7e:	b580      	push	{r7, lr}
 800be80:	b084      	sub	sp, #16
 800be82:	af02      	add	r7, sp, #8
 800be84:	6078      	str	r0, [r7, #4]

	if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be8c:	699b      	ldr	r3, [r3, #24]
 800be8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be92:	2b00      	cmp	r3, #0
 800be94:	f040 8166 	bne.w	800c164 <_ZN6FatDMA16f_write_dma_loopEv+0x2e6>
		csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be9e:	699b      	ldr	r3, [r3, #24]
 800bea0:	0a5b      	lsrs	r3, r3, #9
 800bea2:	687a      	ldr	r2, [r7, #4]
 800bea4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800bea8:	8952      	ldrh	r2, [r2, #10]
 800beaa:	3a01      	subs	r2, #1
 800beac:	401a      	ands	r2, r3
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		if (csect == 0) {				/* On the cluster boundary? */
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d17c      	bne.n	800bfb8 <_ZN6FatDMA16f_write_dma_loopEv+0x13a>
			if (fp->fptr == 0) {		/* On the top of the file? */
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bec4:	699b      	ldr	r3, [r3, #24]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d117      	bne.n	800befa <_ZN6FatDMA16f_write_dma_loopEv+0x7c>
				clst = fp->obj.sclust;	/* Follow from the origin */
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bed0:	689a      	ldr	r2, [r3, #8]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if (clst == 0) {		/* If no cluster is allocated, */
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d131      	bne.n	800bf46 <_ZN6FatDMA16f_write_dma_loopEv+0xc8>
					clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bee8:	2100      	movs	r1, #0
 800beea:	4618      	mov	r0, r3
 800beec:	f7fe fc82 	bl	800a7f4 <_ZL12create_chainP5_FDIDm>
 800bef0:	4602      	mov	r2, r0
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800bef8:	e025      	b.n	800bf46 <_ZN6FatDMA16f_write_dma_loopEv+0xc8>
				}
			} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
				if (fp->cltbl) {
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d00f      	beq.n	800bf26 <_ZN6FatDMA16f_write_dma_loopEv+0xa8>
					clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf12:	699b      	ldr	r3, [r3, #24]
 800bf14:	4619      	mov	r1, r3
 800bf16:	4610      	mov	r0, r2
 800bf18:	f7fe fd04 	bl	800a924 <_ZL10clmt_clustP3FILm>
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800bf24:	e00f      	b.n	800bf46 <_ZN6FatDMA16f_write_dma_loopEv+0xc8>
				} else
#endif
				{
					clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf34:	69db      	ldr	r3, [r3, #28]
 800bf36:	4619      	mov	r1, r3
 800bf38:	4610      	mov	r0, r2
 800bf3a:	f7fe fc5b 	bl	800a7f4 <_ZL12create_chainP5_FDIDm>
 800bf3e:	4602      	mov	r2, r0
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				}
			}
			if (clst == 0) ABORT(fs, FR_DISK_ERR);		/* Could not allocate a new cluster (disk full) */
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d106      	bne.n	800bf5e <_ZN6FatDMA16f_write_dma_loopEv+0xe0>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf56:	2201      	movs	r2, #1
 800bf58:	755a      	strb	r2, [r3, #21]
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	e13c      	b.n	800c1d8 <_ZN6FatDMA16f_write_dma_loopEv+0x35a>
			if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf64:	2b01      	cmp	r3, #1
 800bf66:	d106      	bne.n	800bf76 <_ZN6FatDMA16f_write_dma_loopEv+0xf8>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf6e:	2202      	movs	r2, #2
 800bf70:	755a      	strb	r2, [r3, #21]
 800bf72:	2302      	movs	r3, #2
 800bf74:	e130      	b.n	800c1d8 <_ZN6FatDMA16f_write_dma_loopEv+0x35a>
			if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf80:	d106      	bne.n	800bf90 <_ZN6FatDMA16f_write_dma_loopEv+0x112>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf88:	2201      	movs	r2, #1
 800bf8a:	755a      	strb	r2, [r3, #21]
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	e123      	b.n	800c1d8 <_ZN6FatDMA16f_write_dma_loopEv+0x35a>
			fp->clust = clst;			/* Update current cluster */
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf96:	687a      	ldr	r2, [r7, #4]
 800bf98:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800bf9c:	61da      	str	r2, [r3, #28]
			if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bfa4:	689b      	ldr	r3, [r3, #8]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d106      	bne.n	800bfb8 <_ZN6FatDMA16f_write_dma_loopEv+0x13a>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800bfb6:	609a      	str	r2, [r3, #8]
		}
#if _FS_TINY
		if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
		if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bfbe:	7d1b      	ldrb	r3, [r3, #20]
 800bfc0:	b25b      	sxtb	r3, r3
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	da29      	bge.n	800c01a <_ZN6FatDMA16f_write_dma_loopEv+0x19c>
			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfcc:	7858      	ldrb	r0, [r3, #1]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bfd4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bfde:	6a1a      	ldr	r2, [r3, #32]
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	f7fd fe33 	bl	8009c4c <disk_write>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	bf14      	ite	ne
 800bfec:	2301      	movne	r3, #1
 800bfee:	2300      	moveq	r3, #0
 800bff0:	b2db      	uxtb	r3, r3
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d006      	beq.n	800c004 <_ZN6FatDMA16f_write_dma_loopEv+0x186>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bffc:	2201      	movs	r2, #1
 800bffe:	755a      	strb	r2, [r3, #21]
 800c000:	2301      	movs	r3, #1
 800c002:	e0e9      	b.n	800c1d8 <_ZN6FatDMA16f_write_dma_loopEv+0x35a>
			fp->flag &= (BYTE)~FA_DIRTY;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c00a:	7d1a      	ldrb	r2, [r3, #20]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c012:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c016:	b2d2      	uxtb	r2, r2
 800c018:	751a      	strb	r2, [r3, #20]
		}
#endif
		sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c026:	69db      	ldr	r3, [r3, #28]
 800c028:	4619      	mov	r1, r3
 800c02a:	4610      	mov	r0, r2
 800c02c:	f7fe f9be 	bl	800a3ac <_ZL10clust2sectP5FATFSm>
 800c030:	4602      	mov	r2, r0
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		if (!sect) ABORT(fs, FR_INT_ERR);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d106      	bne.n	800c050 <_ZN6FatDMA16f_write_dma_loopEv+0x1d2>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c048:	2202      	movs	r2, #2
 800c04a:	755a      	strb	r2, [r3, #21]
 800c04c:	2302      	movs	r3, #2
 800c04e:	e0c3      	b.n	800c1d8 <_ZN6FatDMA16f_write_dma_loopEv+0x35a>
		sect += csect;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c05c:	441a      	add	r2, r3
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c06a:	0a5a      	lsrs	r2, r3, #9
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		if (cc) {						/* Write maximum contiguous sectors directly */
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d03b      	beq.n	800c0f4 <_ZN6FatDMA16f_write_dma_loopEv+0x276>
			if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c088:	4413      	add	r3, r2
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800c090:	8952      	ldrh	r2, [r2, #10]
 800c092:	4293      	cmp	r3, r2
 800c094:	d90b      	bls.n	800c0ae <_ZN6FatDMA16f_write_dma_loopEv+0x230>
				cc = fs->csize - csect;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c09c:	895b      	ldrh	r3, [r3, #10]
 800c09e:	461a      	mov	r2, r3
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c0a6:	1ad2      	subs	r2, r2, r3
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
			}
			if (USER_SPI_write_dma_start(fs->drv, wbuff, sect, cc) != 0) ABORT(fs, FR_DISK_ERR);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0b4:	7859      	ldrb	r1, [r3, #1]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c0c8:	9300      	str	r3, [sp, #0]
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f7fd fb1f 	bl	8009710 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	bf14      	ite	ne
 800c0d8:	2301      	movne	r3, #1
 800c0da:	2300      	moveq	r3, #0
 800c0dc:	b2db      	uxtb	r3, r3
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d006      	beq.n	800c0f0 <_ZN6FatDMA16f_write_dma_loopEv+0x272>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	755a      	strb	r2, [r3, #21]
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	e073      	b.n	800c1d8 <_ZN6FatDMA16f_write_dma_loopEv+0x35a>
			LEAVE_FF(fs, FR_OK);
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	e071      	b.n	800c1d8 <_ZN6FatDMA16f_write_dma_loopEv+0x35a>
		if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
			if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
			fs->winsect = sect;
		}
#else
		if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c0fa:	6a1a      	ldr	r2, [r3, #32]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
			fp->fptr < fp->obj.objsize &&
 800c102:	429a      	cmp	r2, r3
 800c104:	d01d      	beq.n	800c142 <_ZN6FatDMA16f_write_dma_loopEv+0x2c4>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c10c:	699a      	ldr	r2, [r3, #24]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c114:	68db      	ldr	r3, [r3, #12]
		if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c116:	429a      	cmp	r2, r3
 800c118:	d213      	bcs.n	800c142 <_ZN6FatDMA16f_write_dma_loopEv+0x2c4>
			disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c120:	7858      	ldrb	r0, [r3, #1]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c128:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800c132:	2301      	movs	r3, #1
 800c134:	f7fd fd6a 	bl	8009c0c <disk_read>
 800c138:	4603      	mov	r3, r0
			fp->fptr < fp->obj.objsize &&
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d001      	beq.n	800c142 <_ZN6FatDMA16f_write_dma_loopEv+0x2c4>
 800c13e:	2301      	movs	r3, #1
 800c140:	e000      	b.n	800c144 <_ZN6FatDMA16f_write_dma_loopEv+0x2c6>
 800c142:	2300      	movs	r3, #0
		if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c144:	2b00      	cmp	r3, #0
 800c146:	d006      	beq.n	800c156 <_ZN6FatDMA16f_write_dma_loopEv+0x2d8>
				ABORT(fs, FR_DISK_ERR);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c14e:	2201      	movs	r2, #1
 800c150:	755a      	strb	r2, [r3, #21]
 800c152:	2301      	movs	r3, #1
 800c154:	e040      	b.n	800c1d8 <_ZN6FatDMA16f_write_dma_loopEv+0x35a>
		}
#endif
		fp->sect = sect;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c15c:	687a      	ldr	r2, [r7, #4]
 800c15e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800c162:	621a      	str	r2, [r3, #32]
	}

	wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c16a:	699b      	ldr	r3, [r3, #24]
 800c16c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c170:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c186:	429a      	cmp	r2, r3
 800c188:	d905      	bls.n	800c196 <_ZN6FatDMA16f_write_dma_loopEv+0x318>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#if _FS_TINY
	if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
	mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
	fs->wflag = 1;
#else
	mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c19c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c1a6:	699b      	ldr	r3, [r3, #24]
 800c1a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1ac:	18d0      	adds	r0, r2, r3
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	f7fd fe06 	bl	8009dcc <_ZL7mem_cpyPvPKvj>
	fp->flag |= FA_DIRTY;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c1c6:	7d1a      	ldrb	r2, [r3, #20]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c1ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c1d2:	b2d2      	uxtb	r2, r2
 800c1d4:	751a      	strb	r2, [r3, #20]
#endif

	LEAVE_FF(fs, FR_OK);
 800c1d6:	2300      	movs	r3, #0

}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3708      	adds	r7, #8
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <_ZN6FatDMA16f_write_dma_cpltEv>:

FRESULT FatDMA::f_write_dma_cplt ()
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
	*bw = 0;	/* Clear write byte counter */
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	689b      	ldr	r3, [r3, #8]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	601a      	str	r2, [r3, #0]
	if (USER_SPI_write_dma_cplt() != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f7fd fb1d 	bl	8009830 <_ZN6FatDMA23USER_SPI_write_dma_cpltEv>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	bf14      	ite	ne
 800c1fc:	2301      	movne	r3, #1
 800c1fe:	2300      	moveq	r3, #0
 800c200:	b2db      	uxtb	r3, r3
 800c202:	2b00      	cmp	r3, #0
 800c204:	d006      	beq.n	800c214 <_ZN6FatDMA16f_write_dma_cpltEv+0x34>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c20c:	2201      	movs	r2, #1
 800c20e:	755a      	strb	r2, [r3, #21]
 800c210:	2301      	movs	r3, #1
 800c212:	e05b      	b.n	800c2cc <_ZN6FatDMA16f_write_dma_cpltEv+0xec>

	wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c21a:	025a      	lsls	r2, r3, #9
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	wbuff += wcnt; fp->fptr += wcnt; fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt; btw -= wcnt;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c22e:	441a      	add	r2, r3
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c23c:	6999      	ldr	r1, [r3, #24]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c24a:	440a      	add	r2, r1
 800c24c:	619a      	str	r2, [r3, #24]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c254:	699a      	ldr	r2, [r3, #24]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c25c:	68db      	ldr	r3, [r3, #12]
 800c25e:	429a      	cmp	r2, r3
 800c260:	d904      	bls.n	800c26c <_ZN6FatDMA16f_write_dma_cpltEv+0x8c>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c268:	699b      	ldr	r3, [r3, #24]
 800c26a:	e003      	b.n	800c274 <_ZN6FatDMA16f_write_dma_cpltEv+0x94>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c272:	68db      	ldr	r3, [r3, #12]
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 800c27a:	60d3      	str	r3, [r2, #12]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	689b      	ldr	r3, [r3, #8]
 800c280:	6819      	ldr	r1, [r3, #0]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	689b      	ldr	r3, [r3, #8]
 800c28c:	440a      	add	r2, r1
 800c28e:	601a      	str	r2, [r3, #0]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c29c:	1ad2      	subs	r2, r2, r3
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	if(btw) f_write_dma_loop();
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d002      	beq.n	800c2b4 <_ZN6FatDMA16f_write_dma_cpltEv+0xd4>
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f7ff fde5 	bl	800be7e <_ZN6FatDMA16f_write_dma_loopEv>

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c2ba:	7d1a      	ldrb	r2, [r3, #20]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c2c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c2c6:	b2d2      	uxtb	r2, r2
 800c2c8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c2ca:	2300      	movs	r3, #0
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3708      	adds	r7, #8
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}

0800c2d4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b086      	sub	sp, #24
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f107 0208 	add.w	r2, r7, #8
 800c2e2:	4611      	mov	r1, r2
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7ff f9d3 	bl	800b690 <_ZL8validateP5_FDIDPP5FATFS>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c2ee:	7dfb      	ldrb	r3, [r7, #23]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d16d      	bne.n	800c3d0 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	7d1b      	ldrb	r3, [r3, #20]
 800c2f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d067      	beq.n	800c3d0 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	7d1b      	ldrb	r3, [r3, #20]
 800c304:	b25b      	sxtb	r3, r3
 800c306:	2b00      	cmp	r3, #0
 800c308:	da1a      	bge.n	800c340 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	7858      	ldrb	r0, [r3, #1]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6a1a      	ldr	r2, [r3, #32]
 800c318:	2301      	movs	r3, #1
 800c31a:	f7fd fc97 	bl	8009c4c <disk_write>
 800c31e:	4603      	mov	r3, r0
 800c320:	2b00      	cmp	r3, #0
 800c322:	bf14      	ite	ne
 800c324:	2301      	movne	r3, #1
 800c326:	2300      	moveq	r3, #0
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d001      	beq.n	800c332 <f_sync+0x5e>
 800c32e:	2301      	movs	r3, #1
 800c330:	e04f      	b.n	800c3d2 <f_sync+0xfe>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	7d1b      	ldrb	r3, [r3, #20]
 800c336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c33a:	b2da      	uxtb	r2, r3
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c340:	f7fc fc5a 	bl	8008bf8 <get_fattime>
 800c344:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c346:	68ba      	ldr	r2, [r7, #8]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c34c:	4619      	mov	r1, r3
 800c34e:	4610      	mov	r0, r2
 800c350:	f7fd ff85 	bl	800a25e <_ZL11move_windowP5FATFSm>
 800c354:	4603      	mov	r3, r0
 800c356:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c358:	7dfb      	ldrb	r3, [r7, #23]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d138      	bne.n	800c3d0 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c362:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	330b      	adds	r3, #11
 800c368:	781a      	ldrb	r2, [r3, #0]
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	330b      	adds	r3, #11
 800c36e:	f042 0220 	orr.w	r2, r2, #32
 800c372:	b2d2      	uxtb	r2, r2
 800c374:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6818      	ldr	r0, [r3, #0]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	689b      	ldr	r3, [r3, #8]
 800c37e:	461a      	mov	r2, r3
 800c380:	68f9      	ldr	r1, [r7, #12]
 800c382:	f7fe fcb9 	bl	800acf8 <_ZL8st_clustP5FATFSPhm>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f103 021c 	add.w	r2, r3, #28
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	68db      	ldr	r3, [r3, #12]
 800c390:	4619      	mov	r1, r3
 800c392:	4610      	mov	r0, r2
 800c394:	f7fd fcee 	bl	8009d74 <_ZL8st_dwordPhm>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	3316      	adds	r3, #22
 800c39c:	6939      	ldr	r1, [r7, #16]
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7fd fce8 	bl	8009d74 <_ZL8st_dwordPhm>
					st_word(dir + DIR_LstAccDate, 0);
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	3312      	adds	r3, #18
 800c3a8:	2100      	movs	r1, #0
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7fd fcc7 	bl	8009d3e <_ZL7st_wordPht>
					fs->wflag = 1;
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7fd ff83 	bl	800a2c4 <_ZL7sync_fsP5FATFS>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	7d1b      	ldrb	r3, [r3, #20]
 800c3c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3ca:	b2da      	uxtb	r2, r3
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c3d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3718      	adds	r7, #24
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}

0800c3da <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c3da:	b580      	push	{r7, lr}
 800c3dc:	b084      	sub	sp, #16
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f7ff ff76 	bl	800c2d4 <f_sync>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c3ec:	7bfb      	ldrb	r3, [r7, #15]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d118      	bne.n	800c424 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f107 0208 	add.w	r2, r7, #8
 800c3f8:	4611      	mov	r1, r2
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7ff f948 	bl	800b690 <_ZL8validateP5_FDIDPP5FATFS>
 800c400:	4603      	mov	r3, r0
 800c402:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c404:	7bfb      	ldrb	r3, [r7, #15]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d10c      	bne.n	800c424 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	691b      	ldr	r3, [r3, #16]
 800c40e:	4618      	mov	r0, r3
 800c410:	f7fd fe78 	bl	800a104 <_ZL8dec_lockj>
 800c414:	4603      	mov	r3, r0
 800c416:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c418:	7bfb      	ldrb	r3, [r7, #15]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d102      	bne.n	800c424 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2200      	movs	r2, #0
 800c422:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c424:	7bfb      	ldrb	r3, [r7, #15]
}
 800c426:	4618      	mov	r0, r3
 800c428:	3710      	adds	r7, #16
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
	...

0800c430 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c430:	b480      	push	{r7}
 800c432:	b087      	sub	sp, #28
 800c434:	af00      	add	r7, sp, #0
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	60b9      	str	r1, [r7, #8]
 800c43a:	4613      	mov	r3, r2
 800c43c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c43e:	2301      	movs	r3, #1
 800c440:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c442:	2300      	movs	r3, #0
 800c444:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c446:	4b1f      	ldr	r3, [pc, #124]	; (800c4c4 <FATFS_LinkDriverEx+0x94>)
 800c448:	7a5b      	ldrb	r3, [r3, #9]
 800c44a:	b2db      	uxtb	r3, r3
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d131      	bne.n	800c4b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c450:	4b1c      	ldr	r3, [pc, #112]	; (800c4c4 <FATFS_LinkDriverEx+0x94>)
 800c452:	7a5b      	ldrb	r3, [r3, #9]
 800c454:	b2db      	uxtb	r3, r3
 800c456:	461a      	mov	r2, r3
 800c458:	4b1a      	ldr	r3, [pc, #104]	; (800c4c4 <FATFS_LinkDriverEx+0x94>)
 800c45a:	2100      	movs	r1, #0
 800c45c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c45e:	4b19      	ldr	r3, [pc, #100]	; (800c4c4 <FATFS_LinkDriverEx+0x94>)
 800c460:	7a5b      	ldrb	r3, [r3, #9]
 800c462:	b2db      	uxtb	r3, r3
 800c464:	4a17      	ldr	r2, [pc, #92]	; (800c4c4 <FATFS_LinkDriverEx+0x94>)
 800c466:	009b      	lsls	r3, r3, #2
 800c468:	4413      	add	r3, r2
 800c46a:	68fa      	ldr	r2, [r7, #12]
 800c46c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c46e:	4b15      	ldr	r3, [pc, #84]	; (800c4c4 <FATFS_LinkDriverEx+0x94>)
 800c470:	7a5b      	ldrb	r3, [r3, #9]
 800c472:	b2db      	uxtb	r3, r3
 800c474:	461a      	mov	r2, r3
 800c476:	4b13      	ldr	r3, [pc, #76]	; (800c4c4 <FATFS_LinkDriverEx+0x94>)
 800c478:	4413      	add	r3, r2
 800c47a:	79fa      	ldrb	r2, [r7, #7]
 800c47c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c47e:	4b11      	ldr	r3, [pc, #68]	; (800c4c4 <FATFS_LinkDriverEx+0x94>)
 800c480:	7a5b      	ldrb	r3, [r3, #9]
 800c482:	b2db      	uxtb	r3, r3
 800c484:	1c5a      	adds	r2, r3, #1
 800c486:	b2d1      	uxtb	r1, r2
 800c488:	4a0e      	ldr	r2, [pc, #56]	; (800c4c4 <FATFS_LinkDriverEx+0x94>)
 800c48a:	7251      	strb	r1, [r2, #9]
 800c48c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c48e:	7dbb      	ldrb	r3, [r7, #22]
 800c490:	3330      	adds	r3, #48	; 0x30
 800c492:	b2da      	uxtb	r2, r3
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	3301      	adds	r3, #1
 800c49c:	223a      	movs	r2, #58	; 0x3a
 800c49e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	3302      	adds	r3, #2
 800c4a4:	222f      	movs	r2, #47	; 0x2f
 800c4a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	3303      	adds	r3, #3
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c4b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	371c      	adds	r7, #28
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c0:	4770      	bx	lr
 800c4c2:	bf00      	nop
 800c4c4:	24000a94 	.word	0x24000a94

0800c4c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	6839      	ldr	r1, [r7, #0]
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f7ff ffaa 	bl	800c430 <FATFS_LinkDriverEx>
 800c4dc:	4603      	mov	r3, r0
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3708      	adds	r7, #8
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
	...

0800c4e8 <__errno>:
 800c4e8:	4b01      	ldr	r3, [pc, #4]	; (800c4f0 <__errno+0x8>)
 800c4ea:	6818      	ldr	r0, [r3, #0]
 800c4ec:	4770      	bx	lr
 800c4ee:	bf00      	nop
 800c4f0:	24000030 	.word	0x24000030

0800c4f4 <__libc_init_array>:
 800c4f4:	b570      	push	{r4, r5, r6, lr}
 800c4f6:	4e0d      	ldr	r6, [pc, #52]	; (800c52c <__libc_init_array+0x38>)
 800c4f8:	4c0d      	ldr	r4, [pc, #52]	; (800c530 <__libc_init_array+0x3c>)
 800c4fa:	1ba4      	subs	r4, r4, r6
 800c4fc:	10a4      	asrs	r4, r4, #2
 800c4fe:	2500      	movs	r5, #0
 800c500:	42a5      	cmp	r5, r4
 800c502:	d109      	bne.n	800c518 <__libc_init_array+0x24>
 800c504:	4e0b      	ldr	r6, [pc, #44]	; (800c534 <__libc_init_array+0x40>)
 800c506:	4c0c      	ldr	r4, [pc, #48]	; (800c538 <__libc_init_array+0x44>)
 800c508:	f000 fc42 	bl	800cd90 <_init>
 800c50c:	1ba4      	subs	r4, r4, r6
 800c50e:	10a4      	asrs	r4, r4, #2
 800c510:	2500      	movs	r5, #0
 800c512:	42a5      	cmp	r5, r4
 800c514:	d105      	bne.n	800c522 <__libc_init_array+0x2e>
 800c516:	bd70      	pop	{r4, r5, r6, pc}
 800c518:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c51c:	4798      	blx	r3
 800c51e:	3501      	adds	r5, #1
 800c520:	e7ee      	b.n	800c500 <__libc_init_array+0xc>
 800c522:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c526:	4798      	blx	r3
 800c528:	3501      	adds	r5, #1
 800c52a:	e7f2      	b.n	800c512 <__libc_init_array+0x1e>
 800c52c:	0800d000 	.word	0x0800d000
 800c530:	0800d000 	.word	0x0800d000
 800c534:	0800d000 	.word	0x0800d000
 800c538:	0800d008 	.word	0x0800d008

0800c53c <memcpy>:
 800c53c:	b510      	push	{r4, lr}
 800c53e:	1e43      	subs	r3, r0, #1
 800c540:	440a      	add	r2, r1
 800c542:	4291      	cmp	r1, r2
 800c544:	d100      	bne.n	800c548 <memcpy+0xc>
 800c546:	bd10      	pop	{r4, pc}
 800c548:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c54c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c550:	e7f7      	b.n	800c542 <memcpy+0x6>

0800c552 <memset>:
 800c552:	4402      	add	r2, r0
 800c554:	4603      	mov	r3, r0
 800c556:	4293      	cmp	r3, r2
 800c558:	d100      	bne.n	800c55c <memset+0xa>
 800c55a:	4770      	bx	lr
 800c55c:	f803 1b01 	strb.w	r1, [r3], #1
 800c560:	e7f9      	b.n	800c556 <memset+0x4>

0800c562 <_vsniprintf_r>:
 800c562:	b530      	push	{r4, r5, lr}
 800c564:	1e14      	subs	r4, r2, #0
 800c566:	4605      	mov	r5, r0
 800c568:	b09b      	sub	sp, #108	; 0x6c
 800c56a:	4618      	mov	r0, r3
 800c56c:	da05      	bge.n	800c57a <_vsniprintf_r+0x18>
 800c56e:	238b      	movs	r3, #139	; 0x8b
 800c570:	602b      	str	r3, [r5, #0]
 800c572:	f04f 30ff 	mov.w	r0, #4294967295
 800c576:	b01b      	add	sp, #108	; 0x6c
 800c578:	bd30      	pop	{r4, r5, pc}
 800c57a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c57e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c582:	bf14      	ite	ne
 800c584:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c588:	4623      	moveq	r3, r4
 800c58a:	9302      	str	r3, [sp, #8]
 800c58c:	9305      	str	r3, [sp, #20]
 800c58e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c592:	9100      	str	r1, [sp, #0]
 800c594:	9104      	str	r1, [sp, #16]
 800c596:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c59a:	4602      	mov	r2, r0
 800c59c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c59e:	4669      	mov	r1, sp
 800c5a0:	4628      	mov	r0, r5
 800c5a2:	f000 f873 	bl	800c68c <_svfiprintf_r>
 800c5a6:	1c43      	adds	r3, r0, #1
 800c5a8:	bfbc      	itt	lt
 800c5aa:	238b      	movlt	r3, #139	; 0x8b
 800c5ac:	602b      	strlt	r3, [r5, #0]
 800c5ae:	2c00      	cmp	r4, #0
 800c5b0:	d0e1      	beq.n	800c576 <_vsniprintf_r+0x14>
 800c5b2:	9b00      	ldr	r3, [sp, #0]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	701a      	strb	r2, [r3, #0]
 800c5b8:	e7dd      	b.n	800c576 <_vsniprintf_r+0x14>
	...

0800c5bc <vsniprintf>:
 800c5bc:	b507      	push	{r0, r1, r2, lr}
 800c5be:	9300      	str	r3, [sp, #0]
 800c5c0:	4613      	mov	r3, r2
 800c5c2:	460a      	mov	r2, r1
 800c5c4:	4601      	mov	r1, r0
 800c5c6:	4803      	ldr	r0, [pc, #12]	; (800c5d4 <vsniprintf+0x18>)
 800c5c8:	6800      	ldr	r0, [r0, #0]
 800c5ca:	f7ff ffca 	bl	800c562 <_vsniprintf_r>
 800c5ce:	b003      	add	sp, #12
 800c5d0:	f85d fb04 	ldr.w	pc, [sp], #4
 800c5d4:	24000030 	.word	0x24000030

0800c5d8 <__ssputs_r>:
 800c5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5dc:	688e      	ldr	r6, [r1, #8]
 800c5de:	429e      	cmp	r6, r3
 800c5e0:	4682      	mov	sl, r0
 800c5e2:	460c      	mov	r4, r1
 800c5e4:	4690      	mov	r8, r2
 800c5e6:	4699      	mov	r9, r3
 800c5e8:	d837      	bhi.n	800c65a <__ssputs_r+0x82>
 800c5ea:	898a      	ldrh	r2, [r1, #12]
 800c5ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c5f0:	d031      	beq.n	800c656 <__ssputs_r+0x7e>
 800c5f2:	6825      	ldr	r5, [r4, #0]
 800c5f4:	6909      	ldr	r1, [r1, #16]
 800c5f6:	1a6f      	subs	r7, r5, r1
 800c5f8:	6965      	ldr	r5, [r4, #20]
 800c5fa:	2302      	movs	r3, #2
 800c5fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c600:	fb95 f5f3 	sdiv	r5, r5, r3
 800c604:	f109 0301 	add.w	r3, r9, #1
 800c608:	443b      	add	r3, r7
 800c60a:	429d      	cmp	r5, r3
 800c60c:	bf38      	it	cc
 800c60e:	461d      	movcc	r5, r3
 800c610:	0553      	lsls	r3, r2, #21
 800c612:	d530      	bpl.n	800c676 <__ssputs_r+0x9e>
 800c614:	4629      	mov	r1, r5
 800c616:	f000 fb21 	bl	800cc5c <_malloc_r>
 800c61a:	4606      	mov	r6, r0
 800c61c:	b950      	cbnz	r0, 800c634 <__ssputs_r+0x5c>
 800c61e:	230c      	movs	r3, #12
 800c620:	f8ca 3000 	str.w	r3, [sl]
 800c624:	89a3      	ldrh	r3, [r4, #12]
 800c626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c62a:	81a3      	strh	r3, [r4, #12]
 800c62c:	f04f 30ff 	mov.w	r0, #4294967295
 800c630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c634:	463a      	mov	r2, r7
 800c636:	6921      	ldr	r1, [r4, #16]
 800c638:	f7ff ff80 	bl	800c53c <memcpy>
 800c63c:	89a3      	ldrh	r3, [r4, #12]
 800c63e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c646:	81a3      	strh	r3, [r4, #12]
 800c648:	6126      	str	r6, [r4, #16]
 800c64a:	6165      	str	r5, [r4, #20]
 800c64c:	443e      	add	r6, r7
 800c64e:	1bed      	subs	r5, r5, r7
 800c650:	6026      	str	r6, [r4, #0]
 800c652:	60a5      	str	r5, [r4, #8]
 800c654:	464e      	mov	r6, r9
 800c656:	454e      	cmp	r6, r9
 800c658:	d900      	bls.n	800c65c <__ssputs_r+0x84>
 800c65a:	464e      	mov	r6, r9
 800c65c:	4632      	mov	r2, r6
 800c65e:	4641      	mov	r1, r8
 800c660:	6820      	ldr	r0, [r4, #0]
 800c662:	f000 fa93 	bl	800cb8c <memmove>
 800c666:	68a3      	ldr	r3, [r4, #8]
 800c668:	1b9b      	subs	r3, r3, r6
 800c66a:	60a3      	str	r3, [r4, #8]
 800c66c:	6823      	ldr	r3, [r4, #0]
 800c66e:	441e      	add	r6, r3
 800c670:	6026      	str	r6, [r4, #0]
 800c672:	2000      	movs	r0, #0
 800c674:	e7dc      	b.n	800c630 <__ssputs_r+0x58>
 800c676:	462a      	mov	r2, r5
 800c678:	f000 fb4a 	bl	800cd10 <_realloc_r>
 800c67c:	4606      	mov	r6, r0
 800c67e:	2800      	cmp	r0, #0
 800c680:	d1e2      	bne.n	800c648 <__ssputs_r+0x70>
 800c682:	6921      	ldr	r1, [r4, #16]
 800c684:	4650      	mov	r0, sl
 800c686:	f000 fa9b 	bl	800cbc0 <_free_r>
 800c68a:	e7c8      	b.n	800c61e <__ssputs_r+0x46>

0800c68c <_svfiprintf_r>:
 800c68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c690:	461d      	mov	r5, r3
 800c692:	898b      	ldrh	r3, [r1, #12]
 800c694:	061f      	lsls	r7, r3, #24
 800c696:	b09d      	sub	sp, #116	; 0x74
 800c698:	4680      	mov	r8, r0
 800c69a:	460c      	mov	r4, r1
 800c69c:	4616      	mov	r6, r2
 800c69e:	d50f      	bpl.n	800c6c0 <_svfiprintf_r+0x34>
 800c6a0:	690b      	ldr	r3, [r1, #16]
 800c6a2:	b96b      	cbnz	r3, 800c6c0 <_svfiprintf_r+0x34>
 800c6a4:	2140      	movs	r1, #64	; 0x40
 800c6a6:	f000 fad9 	bl	800cc5c <_malloc_r>
 800c6aa:	6020      	str	r0, [r4, #0]
 800c6ac:	6120      	str	r0, [r4, #16]
 800c6ae:	b928      	cbnz	r0, 800c6bc <_svfiprintf_r+0x30>
 800c6b0:	230c      	movs	r3, #12
 800c6b2:	f8c8 3000 	str.w	r3, [r8]
 800c6b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ba:	e0c8      	b.n	800c84e <_svfiprintf_r+0x1c2>
 800c6bc:	2340      	movs	r3, #64	; 0x40
 800c6be:	6163      	str	r3, [r4, #20]
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c6c4:	2320      	movs	r3, #32
 800c6c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6ca:	2330      	movs	r3, #48	; 0x30
 800c6cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6d0:	9503      	str	r5, [sp, #12]
 800c6d2:	f04f 0b01 	mov.w	fp, #1
 800c6d6:	4637      	mov	r7, r6
 800c6d8:	463d      	mov	r5, r7
 800c6da:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c6de:	b10b      	cbz	r3, 800c6e4 <_svfiprintf_r+0x58>
 800c6e0:	2b25      	cmp	r3, #37	; 0x25
 800c6e2:	d13e      	bne.n	800c762 <_svfiprintf_r+0xd6>
 800c6e4:	ebb7 0a06 	subs.w	sl, r7, r6
 800c6e8:	d00b      	beq.n	800c702 <_svfiprintf_r+0x76>
 800c6ea:	4653      	mov	r3, sl
 800c6ec:	4632      	mov	r2, r6
 800c6ee:	4621      	mov	r1, r4
 800c6f0:	4640      	mov	r0, r8
 800c6f2:	f7ff ff71 	bl	800c5d8 <__ssputs_r>
 800c6f6:	3001      	adds	r0, #1
 800c6f8:	f000 80a4 	beq.w	800c844 <_svfiprintf_r+0x1b8>
 800c6fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6fe:	4453      	add	r3, sl
 800c700:	9309      	str	r3, [sp, #36]	; 0x24
 800c702:	783b      	ldrb	r3, [r7, #0]
 800c704:	2b00      	cmp	r3, #0
 800c706:	f000 809d 	beq.w	800c844 <_svfiprintf_r+0x1b8>
 800c70a:	2300      	movs	r3, #0
 800c70c:	f04f 32ff 	mov.w	r2, #4294967295
 800c710:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c714:	9304      	str	r3, [sp, #16]
 800c716:	9307      	str	r3, [sp, #28]
 800c718:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c71c:	931a      	str	r3, [sp, #104]	; 0x68
 800c71e:	462f      	mov	r7, r5
 800c720:	2205      	movs	r2, #5
 800c722:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c726:	4850      	ldr	r0, [pc, #320]	; (800c868 <_svfiprintf_r+0x1dc>)
 800c728:	f7f3 fde2 	bl	80002f0 <memchr>
 800c72c:	9b04      	ldr	r3, [sp, #16]
 800c72e:	b9d0      	cbnz	r0, 800c766 <_svfiprintf_r+0xda>
 800c730:	06d9      	lsls	r1, r3, #27
 800c732:	bf44      	itt	mi
 800c734:	2220      	movmi	r2, #32
 800c736:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c73a:	071a      	lsls	r2, r3, #28
 800c73c:	bf44      	itt	mi
 800c73e:	222b      	movmi	r2, #43	; 0x2b
 800c740:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c744:	782a      	ldrb	r2, [r5, #0]
 800c746:	2a2a      	cmp	r2, #42	; 0x2a
 800c748:	d015      	beq.n	800c776 <_svfiprintf_r+0xea>
 800c74a:	9a07      	ldr	r2, [sp, #28]
 800c74c:	462f      	mov	r7, r5
 800c74e:	2000      	movs	r0, #0
 800c750:	250a      	movs	r5, #10
 800c752:	4639      	mov	r1, r7
 800c754:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c758:	3b30      	subs	r3, #48	; 0x30
 800c75a:	2b09      	cmp	r3, #9
 800c75c:	d94d      	bls.n	800c7fa <_svfiprintf_r+0x16e>
 800c75e:	b1b8      	cbz	r0, 800c790 <_svfiprintf_r+0x104>
 800c760:	e00f      	b.n	800c782 <_svfiprintf_r+0xf6>
 800c762:	462f      	mov	r7, r5
 800c764:	e7b8      	b.n	800c6d8 <_svfiprintf_r+0x4c>
 800c766:	4a40      	ldr	r2, [pc, #256]	; (800c868 <_svfiprintf_r+0x1dc>)
 800c768:	1a80      	subs	r0, r0, r2
 800c76a:	fa0b f000 	lsl.w	r0, fp, r0
 800c76e:	4318      	orrs	r0, r3
 800c770:	9004      	str	r0, [sp, #16]
 800c772:	463d      	mov	r5, r7
 800c774:	e7d3      	b.n	800c71e <_svfiprintf_r+0x92>
 800c776:	9a03      	ldr	r2, [sp, #12]
 800c778:	1d11      	adds	r1, r2, #4
 800c77a:	6812      	ldr	r2, [r2, #0]
 800c77c:	9103      	str	r1, [sp, #12]
 800c77e:	2a00      	cmp	r2, #0
 800c780:	db01      	blt.n	800c786 <_svfiprintf_r+0xfa>
 800c782:	9207      	str	r2, [sp, #28]
 800c784:	e004      	b.n	800c790 <_svfiprintf_r+0x104>
 800c786:	4252      	negs	r2, r2
 800c788:	f043 0302 	orr.w	r3, r3, #2
 800c78c:	9207      	str	r2, [sp, #28]
 800c78e:	9304      	str	r3, [sp, #16]
 800c790:	783b      	ldrb	r3, [r7, #0]
 800c792:	2b2e      	cmp	r3, #46	; 0x2e
 800c794:	d10c      	bne.n	800c7b0 <_svfiprintf_r+0x124>
 800c796:	787b      	ldrb	r3, [r7, #1]
 800c798:	2b2a      	cmp	r3, #42	; 0x2a
 800c79a:	d133      	bne.n	800c804 <_svfiprintf_r+0x178>
 800c79c:	9b03      	ldr	r3, [sp, #12]
 800c79e:	1d1a      	adds	r2, r3, #4
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	9203      	str	r2, [sp, #12]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	bfb8      	it	lt
 800c7a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7ac:	3702      	adds	r7, #2
 800c7ae:	9305      	str	r3, [sp, #20]
 800c7b0:	4d2e      	ldr	r5, [pc, #184]	; (800c86c <_svfiprintf_r+0x1e0>)
 800c7b2:	7839      	ldrb	r1, [r7, #0]
 800c7b4:	2203      	movs	r2, #3
 800c7b6:	4628      	mov	r0, r5
 800c7b8:	f7f3 fd9a 	bl	80002f0 <memchr>
 800c7bc:	b138      	cbz	r0, 800c7ce <_svfiprintf_r+0x142>
 800c7be:	2340      	movs	r3, #64	; 0x40
 800c7c0:	1b40      	subs	r0, r0, r5
 800c7c2:	fa03 f000 	lsl.w	r0, r3, r0
 800c7c6:	9b04      	ldr	r3, [sp, #16]
 800c7c8:	4303      	orrs	r3, r0
 800c7ca:	3701      	adds	r7, #1
 800c7cc:	9304      	str	r3, [sp, #16]
 800c7ce:	7839      	ldrb	r1, [r7, #0]
 800c7d0:	4827      	ldr	r0, [pc, #156]	; (800c870 <_svfiprintf_r+0x1e4>)
 800c7d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7d6:	2206      	movs	r2, #6
 800c7d8:	1c7e      	adds	r6, r7, #1
 800c7da:	f7f3 fd89 	bl	80002f0 <memchr>
 800c7de:	2800      	cmp	r0, #0
 800c7e0:	d038      	beq.n	800c854 <_svfiprintf_r+0x1c8>
 800c7e2:	4b24      	ldr	r3, [pc, #144]	; (800c874 <_svfiprintf_r+0x1e8>)
 800c7e4:	bb13      	cbnz	r3, 800c82c <_svfiprintf_r+0x1a0>
 800c7e6:	9b03      	ldr	r3, [sp, #12]
 800c7e8:	3307      	adds	r3, #7
 800c7ea:	f023 0307 	bic.w	r3, r3, #7
 800c7ee:	3308      	adds	r3, #8
 800c7f0:	9303      	str	r3, [sp, #12]
 800c7f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7f4:	444b      	add	r3, r9
 800c7f6:	9309      	str	r3, [sp, #36]	; 0x24
 800c7f8:	e76d      	b.n	800c6d6 <_svfiprintf_r+0x4a>
 800c7fa:	fb05 3202 	mla	r2, r5, r2, r3
 800c7fe:	2001      	movs	r0, #1
 800c800:	460f      	mov	r7, r1
 800c802:	e7a6      	b.n	800c752 <_svfiprintf_r+0xc6>
 800c804:	2300      	movs	r3, #0
 800c806:	3701      	adds	r7, #1
 800c808:	9305      	str	r3, [sp, #20]
 800c80a:	4619      	mov	r1, r3
 800c80c:	250a      	movs	r5, #10
 800c80e:	4638      	mov	r0, r7
 800c810:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c814:	3a30      	subs	r2, #48	; 0x30
 800c816:	2a09      	cmp	r2, #9
 800c818:	d903      	bls.n	800c822 <_svfiprintf_r+0x196>
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d0c8      	beq.n	800c7b0 <_svfiprintf_r+0x124>
 800c81e:	9105      	str	r1, [sp, #20]
 800c820:	e7c6      	b.n	800c7b0 <_svfiprintf_r+0x124>
 800c822:	fb05 2101 	mla	r1, r5, r1, r2
 800c826:	2301      	movs	r3, #1
 800c828:	4607      	mov	r7, r0
 800c82a:	e7f0      	b.n	800c80e <_svfiprintf_r+0x182>
 800c82c:	ab03      	add	r3, sp, #12
 800c82e:	9300      	str	r3, [sp, #0]
 800c830:	4622      	mov	r2, r4
 800c832:	4b11      	ldr	r3, [pc, #68]	; (800c878 <_svfiprintf_r+0x1ec>)
 800c834:	a904      	add	r1, sp, #16
 800c836:	4640      	mov	r0, r8
 800c838:	f3af 8000 	nop.w
 800c83c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c840:	4681      	mov	r9, r0
 800c842:	d1d6      	bne.n	800c7f2 <_svfiprintf_r+0x166>
 800c844:	89a3      	ldrh	r3, [r4, #12]
 800c846:	065b      	lsls	r3, r3, #25
 800c848:	f53f af35 	bmi.w	800c6b6 <_svfiprintf_r+0x2a>
 800c84c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c84e:	b01d      	add	sp, #116	; 0x74
 800c850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c854:	ab03      	add	r3, sp, #12
 800c856:	9300      	str	r3, [sp, #0]
 800c858:	4622      	mov	r2, r4
 800c85a:	4b07      	ldr	r3, [pc, #28]	; (800c878 <_svfiprintf_r+0x1ec>)
 800c85c:	a904      	add	r1, sp, #16
 800c85e:	4640      	mov	r0, r8
 800c860:	f000 f882 	bl	800c968 <_printf_i>
 800c864:	e7ea      	b.n	800c83c <_svfiprintf_r+0x1b0>
 800c866:	bf00      	nop
 800c868:	0800cfc4 	.word	0x0800cfc4
 800c86c:	0800cfca 	.word	0x0800cfca
 800c870:	0800cfce 	.word	0x0800cfce
 800c874:	00000000 	.word	0x00000000
 800c878:	0800c5d9 	.word	0x0800c5d9

0800c87c <_printf_common>:
 800c87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c880:	4691      	mov	r9, r2
 800c882:	461f      	mov	r7, r3
 800c884:	688a      	ldr	r2, [r1, #8]
 800c886:	690b      	ldr	r3, [r1, #16]
 800c888:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c88c:	4293      	cmp	r3, r2
 800c88e:	bfb8      	it	lt
 800c890:	4613      	movlt	r3, r2
 800c892:	f8c9 3000 	str.w	r3, [r9]
 800c896:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c89a:	4606      	mov	r6, r0
 800c89c:	460c      	mov	r4, r1
 800c89e:	b112      	cbz	r2, 800c8a6 <_printf_common+0x2a>
 800c8a0:	3301      	adds	r3, #1
 800c8a2:	f8c9 3000 	str.w	r3, [r9]
 800c8a6:	6823      	ldr	r3, [r4, #0]
 800c8a8:	0699      	lsls	r1, r3, #26
 800c8aa:	bf42      	ittt	mi
 800c8ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c8b0:	3302      	addmi	r3, #2
 800c8b2:	f8c9 3000 	strmi.w	r3, [r9]
 800c8b6:	6825      	ldr	r5, [r4, #0]
 800c8b8:	f015 0506 	ands.w	r5, r5, #6
 800c8bc:	d107      	bne.n	800c8ce <_printf_common+0x52>
 800c8be:	f104 0a19 	add.w	sl, r4, #25
 800c8c2:	68e3      	ldr	r3, [r4, #12]
 800c8c4:	f8d9 2000 	ldr.w	r2, [r9]
 800c8c8:	1a9b      	subs	r3, r3, r2
 800c8ca:	42ab      	cmp	r3, r5
 800c8cc:	dc28      	bgt.n	800c920 <_printf_common+0xa4>
 800c8ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c8d2:	6822      	ldr	r2, [r4, #0]
 800c8d4:	3300      	adds	r3, #0
 800c8d6:	bf18      	it	ne
 800c8d8:	2301      	movne	r3, #1
 800c8da:	0692      	lsls	r2, r2, #26
 800c8dc:	d42d      	bmi.n	800c93a <_printf_common+0xbe>
 800c8de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c8e2:	4639      	mov	r1, r7
 800c8e4:	4630      	mov	r0, r6
 800c8e6:	47c0      	blx	r8
 800c8e8:	3001      	adds	r0, #1
 800c8ea:	d020      	beq.n	800c92e <_printf_common+0xb2>
 800c8ec:	6823      	ldr	r3, [r4, #0]
 800c8ee:	68e5      	ldr	r5, [r4, #12]
 800c8f0:	f8d9 2000 	ldr.w	r2, [r9]
 800c8f4:	f003 0306 	and.w	r3, r3, #6
 800c8f8:	2b04      	cmp	r3, #4
 800c8fa:	bf08      	it	eq
 800c8fc:	1aad      	subeq	r5, r5, r2
 800c8fe:	68a3      	ldr	r3, [r4, #8]
 800c900:	6922      	ldr	r2, [r4, #16]
 800c902:	bf0c      	ite	eq
 800c904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c908:	2500      	movne	r5, #0
 800c90a:	4293      	cmp	r3, r2
 800c90c:	bfc4      	itt	gt
 800c90e:	1a9b      	subgt	r3, r3, r2
 800c910:	18ed      	addgt	r5, r5, r3
 800c912:	f04f 0900 	mov.w	r9, #0
 800c916:	341a      	adds	r4, #26
 800c918:	454d      	cmp	r5, r9
 800c91a:	d11a      	bne.n	800c952 <_printf_common+0xd6>
 800c91c:	2000      	movs	r0, #0
 800c91e:	e008      	b.n	800c932 <_printf_common+0xb6>
 800c920:	2301      	movs	r3, #1
 800c922:	4652      	mov	r2, sl
 800c924:	4639      	mov	r1, r7
 800c926:	4630      	mov	r0, r6
 800c928:	47c0      	blx	r8
 800c92a:	3001      	adds	r0, #1
 800c92c:	d103      	bne.n	800c936 <_printf_common+0xba>
 800c92e:	f04f 30ff 	mov.w	r0, #4294967295
 800c932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c936:	3501      	adds	r5, #1
 800c938:	e7c3      	b.n	800c8c2 <_printf_common+0x46>
 800c93a:	18e1      	adds	r1, r4, r3
 800c93c:	1c5a      	adds	r2, r3, #1
 800c93e:	2030      	movs	r0, #48	; 0x30
 800c940:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c944:	4422      	add	r2, r4
 800c946:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c94a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c94e:	3302      	adds	r3, #2
 800c950:	e7c5      	b.n	800c8de <_printf_common+0x62>
 800c952:	2301      	movs	r3, #1
 800c954:	4622      	mov	r2, r4
 800c956:	4639      	mov	r1, r7
 800c958:	4630      	mov	r0, r6
 800c95a:	47c0      	blx	r8
 800c95c:	3001      	adds	r0, #1
 800c95e:	d0e6      	beq.n	800c92e <_printf_common+0xb2>
 800c960:	f109 0901 	add.w	r9, r9, #1
 800c964:	e7d8      	b.n	800c918 <_printf_common+0x9c>
	...

0800c968 <_printf_i>:
 800c968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c96c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c970:	460c      	mov	r4, r1
 800c972:	7e09      	ldrb	r1, [r1, #24]
 800c974:	b085      	sub	sp, #20
 800c976:	296e      	cmp	r1, #110	; 0x6e
 800c978:	4617      	mov	r7, r2
 800c97a:	4606      	mov	r6, r0
 800c97c:	4698      	mov	r8, r3
 800c97e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c980:	f000 80b3 	beq.w	800caea <_printf_i+0x182>
 800c984:	d822      	bhi.n	800c9cc <_printf_i+0x64>
 800c986:	2963      	cmp	r1, #99	; 0x63
 800c988:	d036      	beq.n	800c9f8 <_printf_i+0x90>
 800c98a:	d80a      	bhi.n	800c9a2 <_printf_i+0x3a>
 800c98c:	2900      	cmp	r1, #0
 800c98e:	f000 80b9 	beq.w	800cb04 <_printf_i+0x19c>
 800c992:	2958      	cmp	r1, #88	; 0x58
 800c994:	f000 8083 	beq.w	800ca9e <_printf_i+0x136>
 800c998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c99c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c9a0:	e032      	b.n	800ca08 <_printf_i+0xa0>
 800c9a2:	2964      	cmp	r1, #100	; 0x64
 800c9a4:	d001      	beq.n	800c9aa <_printf_i+0x42>
 800c9a6:	2969      	cmp	r1, #105	; 0x69
 800c9a8:	d1f6      	bne.n	800c998 <_printf_i+0x30>
 800c9aa:	6820      	ldr	r0, [r4, #0]
 800c9ac:	6813      	ldr	r3, [r2, #0]
 800c9ae:	0605      	lsls	r5, r0, #24
 800c9b0:	f103 0104 	add.w	r1, r3, #4
 800c9b4:	d52a      	bpl.n	800ca0c <_printf_i+0xa4>
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	6011      	str	r1, [r2, #0]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	da03      	bge.n	800c9c6 <_printf_i+0x5e>
 800c9be:	222d      	movs	r2, #45	; 0x2d
 800c9c0:	425b      	negs	r3, r3
 800c9c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c9c6:	486f      	ldr	r0, [pc, #444]	; (800cb84 <_printf_i+0x21c>)
 800c9c8:	220a      	movs	r2, #10
 800c9ca:	e039      	b.n	800ca40 <_printf_i+0xd8>
 800c9cc:	2973      	cmp	r1, #115	; 0x73
 800c9ce:	f000 809d 	beq.w	800cb0c <_printf_i+0x1a4>
 800c9d2:	d808      	bhi.n	800c9e6 <_printf_i+0x7e>
 800c9d4:	296f      	cmp	r1, #111	; 0x6f
 800c9d6:	d020      	beq.n	800ca1a <_printf_i+0xb2>
 800c9d8:	2970      	cmp	r1, #112	; 0x70
 800c9da:	d1dd      	bne.n	800c998 <_printf_i+0x30>
 800c9dc:	6823      	ldr	r3, [r4, #0]
 800c9de:	f043 0320 	orr.w	r3, r3, #32
 800c9e2:	6023      	str	r3, [r4, #0]
 800c9e4:	e003      	b.n	800c9ee <_printf_i+0x86>
 800c9e6:	2975      	cmp	r1, #117	; 0x75
 800c9e8:	d017      	beq.n	800ca1a <_printf_i+0xb2>
 800c9ea:	2978      	cmp	r1, #120	; 0x78
 800c9ec:	d1d4      	bne.n	800c998 <_printf_i+0x30>
 800c9ee:	2378      	movs	r3, #120	; 0x78
 800c9f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c9f4:	4864      	ldr	r0, [pc, #400]	; (800cb88 <_printf_i+0x220>)
 800c9f6:	e055      	b.n	800caa4 <_printf_i+0x13c>
 800c9f8:	6813      	ldr	r3, [r2, #0]
 800c9fa:	1d19      	adds	r1, r3, #4
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	6011      	str	r1, [r2, #0]
 800ca00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca08:	2301      	movs	r3, #1
 800ca0a:	e08c      	b.n	800cb26 <_printf_i+0x1be>
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	6011      	str	r1, [r2, #0]
 800ca10:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ca14:	bf18      	it	ne
 800ca16:	b21b      	sxthne	r3, r3
 800ca18:	e7cf      	b.n	800c9ba <_printf_i+0x52>
 800ca1a:	6813      	ldr	r3, [r2, #0]
 800ca1c:	6825      	ldr	r5, [r4, #0]
 800ca1e:	1d18      	adds	r0, r3, #4
 800ca20:	6010      	str	r0, [r2, #0]
 800ca22:	0628      	lsls	r0, r5, #24
 800ca24:	d501      	bpl.n	800ca2a <_printf_i+0xc2>
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	e002      	b.n	800ca30 <_printf_i+0xc8>
 800ca2a:	0668      	lsls	r0, r5, #25
 800ca2c:	d5fb      	bpl.n	800ca26 <_printf_i+0xbe>
 800ca2e:	881b      	ldrh	r3, [r3, #0]
 800ca30:	4854      	ldr	r0, [pc, #336]	; (800cb84 <_printf_i+0x21c>)
 800ca32:	296f      	cmp	r1, #111	; 0x6f
 800ca34:	bf14      	ite	ne
 800ca36:	220a      	movne	r2, #10
 800ca38:	2208      	moveq	r2, #8
 800ca3a:	2100      	movs	r1, #0
 800ca3c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca40:	6865      	ldr	r5, [r4, #4]
 800ca42:	60a5      	str	r5, [r4, #8]
 800ca44:	2d00      	cmp	r5, #0
 800ca46:	f2c0 8095 	blt.w	800cb74 <_printf_i+0x20c>
 800ca4a:	6821      	ldr	r1, [r4, #0]
 800ca4c:	f021 0104 	bic.w	r1, r1, #4
 800ca50:	6021      	str	r1, [r4, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d13d      	bne.n	800cad2 <_printf_i+0x16a>
 800ca56:	2d00      	cmp	r5, #0
 800ca58:	f040 808e 	bne.w	800cb78 <_printf_i+0x210>
 800ca5c:	4665      	mov	r5, ip
 800ca5e:	2a08      	cmp	r2, #8
 800ca60:	d10b      	bne.n	800ca7a <_printf_i+0x112>
 800ca62:	6823      	ldr	r3, [r4, #0]
 800ca64:	07db      	lsls	r3, r3, #31
 800ca66:	d508      	bpl.n	800ca7a <_printf_i+0x112>
 800ca68:	6923      	ldr	r3, [r4, #16]
 800ca6a:	6862      	ldr	r2, [r4, #4]
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	bfde      	ittt	le
 800ca70:	2330      	movle	r3, #48	; 0x30
 800ca72:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca76:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ca7a:	ebac 0305 	sub.w	r3, ip, r5
 800ca7e:	6123      	str	r3, [r4, #16]
 800ca80:	f8cd 8000 	str.w	r8, [sp]
 800ca84:	463b      	mov	r3, r7
 800ca86:	aa03      	add	r2, sp, #12
 800ca88:	4621      	mov	r1, r4
 800ca8a:	4630      	mov	r0, r6
 800ca8c:	f7ff fef6 	bl	800c87c <_printf_common>
 800ca90:	3001      	adds	r0, #1
 800ca92:	d14d      	bne.n	800cb30 <_printf_i+0x1c8>
 800ca94:	f04f 30ff 	mov.w	r0, #4294967295
 800ca98:	b005      	add	sp, #20
 800ca9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca9e:	4839      	ldr	r0, [pc, #228]	; (800cb84 <_printf_i+0x21c>)
 800caa0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800caa4:	6813      	ldr	r3, [r2, #0]
 800caa6:	6821      	ldr	r1, [r4, #0]
 800caa8:	1d1d      	adds	r5, r3, #4
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	6015      	str	r5, [r2, #0]
 800caae:	060a      	lsls	r2, r1, #24
 800cab0:	d50b      	bpl.n	800caca <_printf_i+0x162>
 800cab2:	07ca      	lsls	r2, r1, #31
 800cab4:	bf44      	itt	mi
 800cab6:	f041 0120 	orrmi.w	r1, r1, #32
 800caba:	6021      	strmi	r1, [r4, #0]
 800cabc:	b91b      	cbnz	r3, 800cac6 <_printf_i+0x15e>
 800cabe:	6822      	ldr	r2, [r4, #0]
 800cac0:	f022 0220 	bic.w	r2, r2, #32
 800cac4:	6022      	str	r2, [r4, #0]
 800cac6:	2210      	movs	r2, #16
 800cac8:	e7b7      	b.n	800ca3a <_printf_i+0xd2>
 800caca:	064d      	lsls	r5, r1, #25
 800cacc:	bf48      	it	mi
 800cace:	b29b      	uxthmi	r3, r3
 800cad0:	e7ef      	b.n	800cab2 <_printf_i+0x14a>
 800cad2:	4665      	mov	r5, ip
 800cad4:	fbb3 f1f2 	udiv	r1, r3, r2
 800cad8:	fb02 3311 	mls	r3, r2, r1, r3
 800cadc:	5cc3      	ldrb	r3, [r0, r3]
 800cade:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cae2:	460b      	mov	r3, r1
 800cae4:	2900      	cmp	r1, #0
 800cae6:	d1f5      	bne.n	800cad4 <_printf_i+0x16c>
 800cae8:	e7b9      	b.n	800ca5e <_printf_i+0xf6>
 800caea:	6813      	ldr	r3, [r2, #0]
 800caec:	6825      	ldr	r5, [r4, #0]
 800caee:	6961      	ldr	r1, [r4, #20]
 800caf0:	1d18      	adds	r0, r3, #4
 800caf2:	6010      	str	r0, [r2, #0]
 800caf4:	0628      	lsls	r0, r5, #24
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	d501      	bpl.n	800cafe <_printf_i+0x196>
 800cafa:	6019      	str	r1, [r3, #0]
 800cafc:	e002      	b.n	800cb04 <_printf_i+0x19c>
 800cafe:	066a      	lsls	r2, r5, #25
 800cb00:	d5fb      	bpl.n	800cafa <_printf_i+0x192>
 800cb02:	8019      	strh	r1, [r3, #0]
 800cb04:	2300      	movs	r3, #0
 800cb06:	6123      	str	r3, [r4, #16]
 800cb08:	4665      	mov	r5, ip
 800cb0a:	e7b9      	b.n	800ca80 <_printf_i+0x118>
 800cb0c:	6813      	ldr	r3, [r2, #0]
 800cb0e:	1d19      	adds	r1, r3, #4
 800cb10:	6011      	str	r1, [r2, #0]
 800cb12:	681d      	ldr	r5, [r3, #0]
 800cb14:	6862      	ldr	r2, [r4, #4]
 800cb16:	2100      	movs	r1, #0
 800cb18:	4628      	mov	r0, r5
 800cb1a:	f7f3 fbe9 	bl	80002f0 <memchr>
 800cb1e:	b108      	cbz	r0, 800cb24 <_printf_i+0x1bc>
 800cb20:	1b40      	subs	r0, r0, r5
 800cb22:	6060      	str	r0, [r4, #4]
 800cb24:	6863      	ldr	r3, [r4, #4]
 800cb26:	6123      	str	r3, [r4, #16]
 800cb28:	2300      	movs	r3, #0
 800cb2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb2e:	e7a7      	b.n	800ca80 <_printf_i+0x118>
 800cb30:	6923      	ldr	r3, [r4, #16]
 800cb32:	462a      	mov	r2, r5
 800cb34:	4639      	mov	r1, r7
 800cb36:	4630      	mov	r0, r6
 800cb38:	47c0      	blx	r8
 800cb3a:	3001      	adds	r0, #1
 800cb3c:	d0aa      	beq.n	800ca94 <_printf_i+0x12c>
 800cb3e:	6823      	ldr	r3, [r4, #0]
 800cb40:	079b      	lsls	r3, r3, #30
 800cb42:	d413      	bmi.n	800cb6c <_printf_i+0x204>
 800cb44:	68e0      	ldr	r0, [r4, #12]
 800cb46:	9b03      	ldr	r3, [sp, #12]
 800cb48:	4298      	cmp	r0, r3
 800cb4a:	bfb8      	it	lt
 800cb4c:	4618      	movlt	r0, r3
 800cb4e:	e7a3      	b.n	800ca98 <_printf_i+0x130>
 800cb50:	2301      	movs	r3, #1
 800cb52:	464a      	mov	r2, r9
 800cb54:	4639      	mov	r1, r7
 800cb56:	4630      	mov	r0, r6
 800cb58:	47c0      	blx	r8
 800cb5a:	3001      	adds	r0, #1
 800cb5c:	d09a      	beq.n	800ca94 <_printf_i+0x12c>
 800cb5e:	3501      	adds	r5, #1
 800cb60:	68e3      	ldr	r3, [r4, #12]
 800cb62:	9a03      	ldr	r2, [sp, #12]
 800cb64:	1a9b      	subs	r3, r3, r2
 800cb66:	42ab      	cmp	r3, r5
 800cb68:	dcf2      	bgt.n	800cb50 <_printf_i+0x1e8>
 800cb6a:	e7eb      	b.n	800cb44 <_printf_i+0x1dc>
 800cb6c:	2500      	movs	r5, #0
 800cb6e:	f104 0919 	add.w	r9, r4, #25
 800cb72:	e7f5      	b.n	800cb60 <_printf_i+0x1f8>
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d1ac      	bne.n	800cad2 <_printf_i+0x16a>
 800cb78:	7803      	ldrb	r3, [r0, #0]
 800cb7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb7e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb82:	e76c      	b.n	800ca5e <_printf_i+0xf6>
 800cb84:	0800cfd5 	.word	0x0800cfd5
 800cb88:	0800cfe6 	.word	0x0800cfe6

0800cb8c <memmove>:
 800cb8c:	4288      	cmp	r0, r1
 800cb8e:	b510      	push	{r4, lr}
 800cb90:	eb01 0302 	add.w	r3, r1, r2
 800cb94:	d807      	bhi.n	800cba6 <memmove+0x1a>
 800cb96:	1e42      	subs	r2, r0, #1
 800cb98:	4299      	cmp	r1, r3
 800cb9a:	d00a      	beq.n	800cbb2 <memmove+0x26>
 800cb9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cba0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800cba4:	e7f8      	b.n	800cb98 <memmove+0xc>
 800cba6:	4283      	cmp	r3, r0
 800cba8:	d9f5      	bls.n	800cb96 <memmove+0xa>
 800cbaa:	1881      	adds	r1, r0, r2
 800cbac:	1ad2      	subs	r2, r2, r3
 800cbae:	42d3      	cmn	r3, r2
 800cbb0:	d100      	bne.n	800cbb4 <memmove+0x28>
 800cbb2:	bd10      	pop	{r4, pc}
 800cbb4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cbb8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800cbbc:	e7f7      	b.n	800cbae <memmove+0x22>
	...

0800cbc0 <_free_r>:
 800cbc0:	b538      	push	{r3, r4, r5, lr}
 800cbc2:	4605      	mov	r5, r0
 800cbc4:	2900      	cmp	r1, #0
 800cbc6:	d045      	beq.n	800cc54 <_free_r+0x94>
 800cbc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbcc:	1f0c      	subs	r4, r1, #4
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	bfb8      	it	lt
 800cbd2:	18e4      	addlt	r4, r4, r3
 800cbd4:	f000 f8d2 	bl	800cd7c <__malloc_lock>
 800cbd8:	4a1f      	ldr	r2, [pc, #124]	; (800cc58 <_free_r+0x98>)
 800cbda:	6813      	ldr	r3, [r2, #0]
 800cbdc:	4610      	mov	r0, r2
 800cbde:	b933      	cbnz	r3, 800cbee <_free_r+0x2e>
 800cbe0:	6063      	str	r3, [r4, #4]
 800cbe2:	6014      	str	r4, [r2, #0]
 800cbe4:	4628      	mov	r0, r5
 800cbe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbea:	f000 b8c8 	b.w	800cd7e <__malloc_unlock>
 800cbee:	42a3      	cmp	r3, r4
 800cbf0:	d90c      	bls.n	800cc0c <_free_r+0x4c>
 800cbf2:	6821      	ldr	r1, [r4, #0]
 800cbf4:	1862      	adds	r2, r4, r1
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	bf04      	itt	eq
 800cbfa:	681a      	ldreq	r2, [r3, #0]
 800cbfc:	685b      	ldreq	r3, [r3, #4]
 800cbfe:	6063      	str	r3, [r4, #4]
 800cc00:	bf04      	itt	eq
 800cc02:	1852      	addeq	r2, r2, r1
 800cc04:	6022      	streq	r2, [r4, #0]
 800cc06:	6004      	str	r4, [r0, #0]
 800cc08:	e7ec      	b.n	800cbe4 <_free_r+0x24>
 800cc0a:	4613      	mov	r3, r2
 800cc0c:	685a      	ldr	r2, [r3, #4]
 800cc0e:	b10a      	cbz	r2, 800cc14 <_free_r+0x54>
 800cc10:	42a2      	cmp	r2, r4
 800cc12:	d9fa      	bls.n	800cc0a <_free_r+0x4a>
 800cc14:	6819      	ldr	r1, [r3, #0]
 800cc16:	1858      	adds	r0, r3, r1
 800cc18:	42a0      	cmp	r0, r4
 800cc1a:	d10b      	bne.n	800cc34 <_free_r+0x74>
 800cc1c:	6820      	ldr	r0, [r4, #0]
 800cc1e:	4401      	add	r1, r0
 800cc20:	1858      	adds	r0, r3, r1
 800cc22:	4282      	cmp	r2, r0
 800cc24:	6019      	str	r1, [r3, #0]
 800cc26:	d1dd      	bne.n	800cbe4 <_free_r+0x24>
 800cc28:	6810      	ldr	r0, [r2, #0]
 800cc2a:	6852      	ldr	r2, [r2, #4]
 800cc2c:	605a      	str	r2, [r3, #4]
 800cc2e:	4401      	add	r1, r0
 800cc30:	6019      	str	r1, [r3, #0]
 800cc32:	e7d7      	b.n	800cbe4 <_free_r+0x24>
 800cc34:	d902      	bls.n	800cc3c <_free_r+0x7c>
 800cc36:	230c      	movs	r3, #12
 800cc38:	602b      	str	r3, [r5, #0]
 800cc3a:	e7d3      	b.n	800cbe4 <_free_r+0x24>
 800cc3c:	6820      	ldr	r0, [r4, #0]
 800cc3e:	1821      	adds	r1, r4, r0
 800cc40:	428a      	cmp	r2, r1
 800cc42:	bf04      	itt	eq
 800cc44:	6811      	ldreq	r1, [r2, #0]
 800cc46:	6852      	ldreq	r2, [r2, #4]
 800cc48:	6062      	str	r2, [r4, #4]
 800cc4a:	bf04      	itt	eq
 800cc4c:	1809      	addeq	r1, r1, r0
 800cc4e:	6021      	streq	r1, [r4, #0]
 800cc50:	605c      	str	r4, [r3, #4]
 800cc52:	e7c7      	b.n	800cbe4 <_free_r+0x24>
 800cc54:	bd38      	pop	{r3, r4, r5, pc}
 800cc56:	bf00      	nop
 800cc58:	24000aa0 	.word	0x24000aa0

0800cc5c <_malloc_r>:
 800cc5c:	b570      	push	{r4, r5, r6, lr}
 800cc5e:	1ccd      	adds	r5, r1, #3
 800cc60:	f025 0503 	bic.w	r5, r5, #3
 800cc64:	3508      	adds	r5, #8
 800cc66:	2d0c      	cmp	r5, #12
 800cc68:	bf38      	it	cc
 800cc6a:	250c      	movcc	r5, #12
 800cc6c:	2d00      	cmp	r5, #0
 800cc6e:	4606      	mov	r6, r0
 800cc70:	db01      	blt.n	800cc76 <_malloc_r+0x1a>
 800cc72:	42a9      	cmp	r1, r5
 800cc74:	d903      	bls.n	800cc7e <_malloc_r+0x22>
 800cc76:	230c      	movs	r3, #12
 800cc78:	6033      	str	r3, [r6, #0]
 800cc7a:	2000      	movs	r0, #0
 800cc7c:	bd70      	pop	{r4, r5, r6, pc}
 800cc7e:	f000 f87d 	bl	800cd7c <__malloc_lock>
 800cc82:	4a21      	ldr	r2, [pc, #132]	; (800cd08 <_malloc_r+0xac>)
 800cc84:	6814      	ldr	r4, [r2, #0]
 800cc86:	4621      	mov	r1, r4
 800cc88:	b991      	cbnz	r1, 800ccb0 <_malloc_r+0x54>
 800cc8a:	4c20      	ldr	r4, [pc, #128]	; (800cd0c <_malloc_r+0xb0>)
 800cc8c:	6823      	ldr	r3, [r4, #0]
 800cc8e:	b91b      	cbnz	r3, 800cc98 <_malloc_r+0x3c>
 800cc90:	4630      	mov	r0, r6
 800cc92:	f000 f863 	bl	800cd5c <_sbrk_r>
 800cc96:	6020      	str	r0, [r4, #0]
 800cc98:	4629      	mov	r1, r5
 800cc9a:	4630      	mov	r0, r6
 800cc9c:	f000 f85e 	bl	800cd5c <_sbrk_r>
 800cca0:	1c43      	adds	r3, r0, #1
 800cca2:	d124      	bne.n	800ccee <_malloc_r+0x92>
 800cca4:	230c      	movs	r3, #12
 800cca6:	6033      	str	r3, [r6, #0]
 800cca8:	4630      	mov	r0, r6
 800ccaa:	f000 f868 	bl	800cd7e <__malloc_unlock>
 800ccae:	e7e4      	b.n	800cc7a <_malloc_r+0x1e>
 800ccb0:	680b      	ldr	r3, [r1, #0]
 800ccb2:	1b5b      	subs	r3, r3, r5
 800ccb4:	d418      	bmi.n	800cce8 <_malloc_r+0x8c>
 800ccb6:	2b0b      	cmp	r3, #11
 800ccb8:	d90f      	bls.n	800ccda <_malloc_r+0x7e>
 800ccba:	600b      	str	r3, [r1, #0]
 800ccbc:	50cd      	str	r5, [r1, r3]
 800ccbe:	18cc      	adds	r4, r1, r3
 800ccc0:	4630      	mov	r0, r6
 800ccc2:	f000 f85c 	bl	800cd7e <__malloc_unlock>
 800ccc6:	f104 000b 	add.w	r0, r4, #11
 800ccca:	1d23      	adds	r3, r4, #4
 800cccc:	f020 0007 	bic.w	r0, r0, #7
 800ccd0:	1ac3      	subs	r3, r0, r3
 800ccd2:	d0d3      	beq.n	800cc7c <_malloc_r+0x20>
 800ccd4:	425a      	negs	r2, r3
 800ccd6:	50e2      	str	r2, [r4, r3]
 800ccd8:	e7d0      	b.n	800cc7c <_malloc_r+0x20>
 800ccda:	428c      	cmp	r4, r1
 800ccdc:	684b      	ldr	r3, [r1, #4]
 800ccde:	bf16      	itet	ne
 800cce0:	6063      	strne	r3, [r4, #4]
 800cce2:	6013      	streq	r3, [r2, #0]
 800cce4:	460c      	movne	r4, r1
 800cce6:	e7eb      	b.n	800ccc0 <_malloc_r+0x64>
 800cce8:	460c      	mov	r4, r1
 800ccea:	6849      	ldr	r1, [r1, #4]
 800ccec:	e7cc      	b.n	800cc88 <_malloc_r+0x2c>
 800ccee:	1cc4      	adds	r4, r0, #3
 800ccf0:	f024 0403 	bic.w	r4, r4, #3
 800ccf4:	42a0      	cmp	r0, r4
 800ccf6:	d005      	beq.n	800cd04 <_malloc_r+0xa8>
 800ccf8:	1a21      	subs	r1, r4, r0
 800ccfa:	4630      	mov	r0, r6
 800ccfc:	f000 f82e 	bl	800cd5c <_sbrk_r>
 800cd00:	3001      	adds	r0, #1
 800cd02:	d0cf      	beq.n	800cca4 <_malloc_r+0x48>
 800cd04:	6025      	str	r5, [r4, #0]
 800cd06:	e7db      	b.n	800ccc0 <_malloc_r+0x64>
 800cd08:	24000aa0 	.word	0x24000aa0
 800cd0c:	24000aa4 	.word	0x24000aa4

0800cd10 <_realloc_r>:
 800cd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd12:	4607      	mov	r7, r0
 800cd14:	4614      	mov	r4, r2
 800cd16:	460e      	mov	r6, r1
 800cd18:	b921      	cbnz	r1, 800cd24 <_realloc_r+0x14>
 800cd1a:	4611      	mov	r1, r2
 800cd1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cd20:	f7ff bf9c 	b.w	800cc5c <_malloc_r>
 800cd24:	b922      	cbnz	r2, 800cd30 <_realloc_r+0x20>
 800cd26:	f7ff ff4b 	bl	800cbc0 <_free_r>
 800cd2a:	4625      	mov	r5, r4
 800cd2c:	4628      	mov	r0, r5
 800cd2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd30:	f000 f826 	bl	800cd80 <_malloc_usable_size_r>
 800cd34:	42a0      	cmp	r0, r4
 800cd36:	d20f      	bcs.n	800cd58 <_realloc_r+0x48>
 800cd38:	4621      	mov	r1, r4
 800cd3a:	4638      	mov	r0, r7
 800cd3c:	f7ff ff8e 	bl	800cc5c <_malloc_r>
 800cd40:	4605      	mov	r5, r0
 800cd42:	2800      	cmp	r0, #0
 800cd44:	d0f2      	beq.n	800cd2c <_realloc_r+0x1c>
 800cd46:	4631      	mov	r1, r6
 800cd48:	4622      	mov	r2, r4
 800cd4a:	f7ff fbf7 	bl	800c53c <memcpy>
 800cd4e:	4631      	mov	r1, r6
 800cd50:	4638      	mov	r0, r7
 800cd52:	f7ff ff35 	bl	800cbc0 <_free_r>
 800cd56:	e7e9      	b.n	800cd2c <_realloc_r+0x1c>
 800cd58:	4635      	mov	r5, r6
 800cd5a:	e7e7      	b.n	800cd2c <_realloc_r+0x1c>

0800cd5c <_sbrk_r>:
 800cd5c:	b538      	push	{r3, r4, r5, lr}
 800cd5e:	4c06      	ldr	r4, [pc, #24]	; (800cd78 <_sbrk_r+0x1c>)
 800cd60:	2300      	movs	r3, #0
 800cd62:	4605      	mov	r5, r0
 800cd64:	4608      	mov	r0, r1
 800cd66:	6023      	str	r3, [r4, #0]
 800cd68:	f7f4 fb0e 	bl	8001388 <_sbrk>
 800cd6c:	1c43      	adds	r3, r0, #1
 800cd6e:	d102      	bne.n	800cd76 <_sbrk_r+0x1a>
 800cd70:	6823      	ldr	r3, [r4, #0]
 800cd72:	b103      	cbz	r3, 800cd76 <_sbrk_r+0x1a>
 800cd74:	602b      	str	r3, [r5, #0]
 800cd76:	bd38      	pop	{r3, r4, r5, pc}
 800cd78:	24000f14 	.word	0x24000f14

0800cd7c <__malloc_lock>:
 800cd7c:	4770      	bx	lr

0800cd7e <__malloc_unlock>:
 800cd7e:	4770      	bx	lr

0800cd80 <_malloc_usable_size_r>:
 800cd80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd84:	1f18      	subs	r0, r3, #4
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	bfbc      	itt	lt
 800cd8a:	580b      	ldrlt	r3, [r1, r0]
 800cd8c:	18c0      	addlt	r0, r0, r3
 800cd8e:	4770      	bx	lr

0800cd90 <_init>:
 800cd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd92:	bf00      	nop
 800cd94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd96:	bc08      	pop	{r3}
 800cd98:	469e      	mov	lr, r3
 800cd9a:	4770      	bx	lr

0800cd9c <_fini>:
 800cd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd9e:	bf00      	nop
 800cda0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cda2:	bc08      	pop	{r3}
 800cda4:	469e      	mov	lr, r3
 800cda6:	4770      	bx	lr
