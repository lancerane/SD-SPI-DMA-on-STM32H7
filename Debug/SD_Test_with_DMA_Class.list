
SD_Test_with_DMA_Class.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cab4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  0800cd54  0800cd54  0001cd54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cff0  0800cff0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800cff0  0800cff0  0001cff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cff8  0800cff8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800cff8  0800cff8  0001cff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800d000  0800d000  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  24000000  0800d008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001684  24000090  0800d098  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24001714  0800d098  00021714  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002711b  00000000  00000000  000200be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000040ac  00000000  00000000  000471d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c8  00000000  00000000  0004b288  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f60  00000000  00000000  0004c350  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003b880  00000000  00000000  0004d2b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000134f4  00000000  00000000  00088b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0015d6bd  00000000  00000000  0009c024  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f96e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047ec  00000000  00000000  001f975c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000090 	.word	0x24000090
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800cd3c 	.word	0x0800cd3c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000094 	.word	0x24000094
 80002dc:	0800cd3c 	.word	0x0800cd3c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <_ZN6FatDMA10initialiseEv>:

#include "FatDMA.h"
#include "diskio.h"


void FatDMA::initialise() {
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  // MX DMA Init stuff
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000698:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <_ZN6FatDMA10initialiseEv+0x40>)
 800069a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800069e:	4a0c      	ldr	r2, [pc, #48]	; (80006d0 <_ZN6FatDMA10initialiseEv+0x40>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <_ZN6FatDMA10initialiseEv+0x40>)
 80006aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	200b      	movs	r0, #11
 80006bc:	f001 f8c1 	bl	8001842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006c0:	200b      	movs	r0, #11
 80006c2:	f001 f8d8 	bl	8001876 <HAL_NVIC_EnableIRQ>



}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	58024400 	.word	0x58024400

080006d4 <_ZN6FatDMA7f_writeEP3FILPKvjPj>:

FRESULT FatDMA::f_write (FIL* fp, const void* buff, UINT btw, UINT* bw){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
 80006e0:	603b      	str	r3, [r7, #0]

  this->bw = bw;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	69ba      	ldr	r2, [r7, #24]
 80006e6:	609a      	str	r2, [r3, #8]
  return f_write_dma_start(fp, buff, btw);
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	68b9      	ldr	r1, [r7, #8]
 80006ee:	68f8      	ldr	r0, [r7, #12]
 80006f0:	f00b fb42 	bl	800bd78 <_ZN6FatDMA17f_write_dma_startEP3FILPKvj>
 80006f4:	4603      	mov	r3, r0


}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <_ZN6FatDMA18on_block_f_writtenEv>:

int FatDMA::on_block_f_written(){ //1: ok; 0 err
 80006fe:	b580      	push	{r7, lr}
 8000700:	b084      	sub	sp, #16
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]

  if (blocksLeft == 1) {
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800070c:	2b01      	cmp	r3, #1
 800070e:	d115      	bne.n	800073c <_ZN6FatDMA18on_block_f_writtenEv+0x3e>
    blocksLeft --;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000716:	1e5a      	subs	r2, r3, #1
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	FRESULT res = f_write_dma_cplt();
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f00b fd35 	bl	800c18e <_ZN6FatDMA16f_write_dma_cpltEv>
 8000724:	4603      	mov	r3, r0
 8000726:	73fb      	strb	r3, [r7, #15]
	DMAReady = true;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2201      	movs	r2, #1
 800072c:	701a      	strb	r2, [r3, #0]
	return res == FR_OK ? 1 : 0;
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d101      	bne.n	8000738 <_ZN6FatDMA18on_block_f_writtenEv+0x3a>
 8000734:	2301      	movs	r3, #1
 8000736:	e013      	b.n	8000760 <_ZN6FatDMA18on_block_f_writtenEv+0x62>
 8000738:	2300      	movs	r3, #0
 800073a:	e011      	b.n	8000760 <_ZN6FatDMA18on_block_f_writtenEv+0x62>
  }


  else {
	xmit_datablock_cplt(); //handshake
 800073c:	f008 fc50 	bl	8008fe0 <_ZN6FatDMA19xmit_datablock_cpltEv>
	blocksLeft--;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000746:	1e5a      	subs	r2, r3, #1
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	return xmit_datablock(nextBuff, 0xFC);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000754:	22fc      	movs	r2, #252	; 0xfc
 8000756:	4619      	mov	r1, r3
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f008 fc09 	bl	8008f70 <_ZN6FatDMA14xmit_datablockEPKhh>
 800075e:	4603      	mov	r3, r0

  }

}
 8000760:	4618      	mov	r0, r3
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <_ZN6FatDMAC1Ev>:
#ifndef SRC_DMA_H_
#define SRC_DMA_H_

class FatDMA {
  public:
    FatDMA(){};
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2201      	movs	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2200      	movs	r2, #0
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2200      	movs	r2, #0
 8000780:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4618      	mov	r0, r3
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <_ZN6FatDMAD1Ev>:
    void initialise();
    FRESULT f_write (FIL* fp, const void* buff, UINT btw, UINT* bw);
    FRESULT f_write_dma_cplt ();
    int on_block_f_written();

    ~FatDMA(){};
 8000792:	b480      	push	{r7}
 8000794:	b083      	sub	sp, #12
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4618      	mov	r0, r3
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <_Z8myprintfPKcz>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 80007a8:	b40f      	push	{r0, r1, r2, r3}
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	693a      	ldr	r2, [r7, #16]
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	480b      	ldr	r0, [pc, #44]	; (80007ec <_Z8myprintfPKcz+0x44>)
 80007c0:	f00b fed2 	bl	800c568 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80007c4:	4809      	ldr	r0, [pc, #36]	; (80007ec <_Z8myprintfPKcz+0x44>)
 80007c6:	f7ff fd8b 	bl	80002e0 <strlen>
 80007ca:	4603      	mov	r3, r0
 80007cc:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, len, -1);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	f04f 33ff 	mov.w	r3, #4294967295
 80007d6:	4905      	ldr	r1, [pc, #20]	; (80007ec <_Z8myprintfPKcz+0x44>)
 80007d8:	4805      	ldr	r0, [pc, #20]	; (80007f0 <_Z8myprintfPKcz+0x48>)
 80007da:	f007 f902 	bl	80079e2 <HAL_UART_Transmit>

}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007e8:	b004      	add	sp, #16
 80007ea:	4770      	bx	lr
 80007ec:	24000b58 	.word	0x24000b58
 80007f0:	240001ac 	.word	0x240001ac

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b590      	push	{r4, r7, lr}
 80007f6:	f5ad 5d92 	sub.w	sp, sp, #4672	; 0x1240
 80007fa:	b083      	sub	sp, #12
 80007fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fe:	f000 fe85 	bl	800150c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000802:	f000 f961 	bl	8000ac8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000806:	f000 faeb 	bl	8000de0 <_ZL12MX_GPIO_Initv>
//  MX_DMA_Init();
  fatDma.initialise();
 800080a:	4885      	ldr	r0, [pc, #532]	; (8000a20 <main+0x22c>)
 800080c:	f7ff ff40 	bl	8000690 <_ZN6FatDMA10initialiseEv>
  MX_USART3_UART_Init();
 8000810:	f000 fa86 	bl	8000d20 <_ZL19MX_USART3_UART_Initv>
  MX_SPI3_Init();
 8000814:	f000 fa28 	bl	8000c68 <_ZL12MX_SPI3_Initv>
  MX_FATFS_Init();
 8000818:	f008 f9b2 	bl	8008b80 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 800081c:	4881      	ldr	r0, [pc, #516]	; (8000a24 <main+0x230>)
 800081e:	f7ff ffc3 	bl	80007a8 <_Z8myprintfPKcz>


  HAL_Delay(1000); //a short delay is important to let the SD card settle
 8000822:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000826:	f000 ff03 	bl	8001630 <HAL_Delay>

  //Open the file system
  fres = f_mount(&FatFs, "", 1); //1=mount now
 800082a:	2201      	movs	r2, #1
 800082c:	497e      	ldr	r1, [pc, #504]	; (8000a28 <main+0x234>)
 800082e:	487f      	ldr	r0, [pc, #508]	; (8000a2c <main+0x238>)
 8000830:	f00a ff44 	bl	800b6bc <f_mount>
 8000834:	4603      	mov	r3, r0
 8000836:	461a      	mov	r2, r3
 8000838:	4b7d      	ldr	r3, [pc, #500]	; (8000a30 <main+0x23c>)
 800083a:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 800083c:	4b7c      	ldr	r3, [pc, #496]	; (8000a30 <main+0x23c>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d006      	beq.n	8000852 <main+0x5e>
    myprintf("f_mount error (%i)\r\n", fres);
 8000844:	4b7a      	ldr	r3, [pc, #488]	; (8000a30 <main+0x23c>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	4619      	mov	r1, r3
 800084a:	487a      	ldr	r0, [pc, #488]	; (8000a34 <main+0x240>)
 800084c:	f7ff ffac 	bl	80007a8 <_Z8myprintfPKcz>
  while(1);
 8000850:	e7fe      	b.n	8000850 <main+0x5c>
  }

  char filename[50] = "newwrite.bin";
 8000852:	4b79      	ldr	r3, [pc, #484]	; (8000a38 <main+0x244>)
 8000854:	f241 2408 	movw	r4, #4616	; 0x1208
 8000858:	443c      	add	r4, r7
 800085a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800085c:	c407      	stmia	r4!, {r0, r1, r2}
 800085e:	7023      	strb	r3, [r4, #0]
 8000860:	f241 2315 	movw	r3, #4629	; 0x1215
 8000864:	443b      	add	r3, r7
 8000866:	2225      	movs	r2, #37	; 0x25
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f00b fe47 	bl	800c4fe <memset>
  fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000870:	f241 2308 	movw	r3, #4616	; 0x1208
 8000874:	443b      	add	r3, r7
 8000876:	221a      	movs	r2, #26
 8000878:	4619      	mov	r1, r3
 800087a:	4870      	ldr	r0, [pc, #448]	; (8000a3c <main+0x248>)
 800087c:	f00a ff64 	bl	800b748 <f_open>
 8000880:	4603      	mov	r3, r0
 8000882:	461a      	mov	r2, r3
 8000884:	4b6a      	ldr	r3, [pc, #424]	; (8000a30 <main+0x23c>)
 8000886:	701a      	strb	r2, [r3, #0]
  if(fres == FR_OK) {
 8000888:	4b69      	ldr	r3, [pc, #420]	; (8000a30 <main+0x23c>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d103      	bne.n	8000898 <main+0xa4>
    myprintf("file opened\r\n");
 8000890:	486b      	ldr	r0, [pc, #428]	; (8000a40 <main+0x24c>)
 8000892:	f7ff ff89 	bl	80007a8 <_Z8myprintfPKcz>
 8000896:	e005      	b.n	80008a4 <main+0xb0>
  }
  else {
    myprintf("f_open error (%i)\r\n", fres);
 8000898:	4b65      	ldr	r3, [pc, #404]	; (8000a30 <main+0x23c>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4619      	mov	r1, r3
 800089e:	4869      	ldr	r0, [pc, #420]	; (8000a44 <main+0x250>)
 80008a0:	f7ff ff82 	bl	80007a8 <_Z8myprintfPKcz>
  }

  //Copy in the data

  buf[0] = 'a';
 80008a4:	4b68      	ldr	r3, [pc, #416]	; (8000a48 <main+0x254>)
 80008a6:	2261      	movs	r2, #97	; 0x61
 80008a8:	701a      	strb	r2, [r3, #0]

  block.data[0].imuData[0] = 343;
 80008aa:	4b68      	ldr	r3, [pc, #416]	; (8000a4c <main+0x258>)
 80008ac:	f240 1257 	movw	r2, #343	; 0x157
 80008b0:	805a      	strh	r2, [r3, #2]
  block2.data[0].imuData[0] = 344;
 80008b2:	4b67      	ldr	r3, [pc, #412]	; (8000a50 <main+0x25c>)
 80008b4:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80008b8:	805a      	strh	r2, [r3, #2]
  block3.data[2].imuData[2] = 377;
 80008ba:	4b66      	ldr	r3, [pc, #408]	; (8000a54 <main+0x260>)
 80008bc:	f240 1279 	movw	r2, #377	; 0x179
 80008c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  //  block_t blocks[2] = {block, block2};
  block_t blocks[3] = {block, block2, block3};
 80008c4:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 80008c8:	4a60      	ldr	r2, [pc, #384]	; (8000a4c <main+0x258>)
 80008ca:	4618      	mov	r0, r3
 80008cc:	4611      	mov	r1, r2
 80008ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008d2:	461a      	mov	r2, r3
 80008d4:	f00b fe08 	bl	800c4e8 <memcpy>
 80008d8:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 80008dc:	4a5c      	ldr	r2, [pc, #368]	; (8000a50 <main+0x25c>)
 80008de:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80008e2:	4611      	mov	r1, r2
 80008e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e8:	4618      	mov	r0, r3
 80008ea:	f00b fdfd 	bl	800c4e8 <memcpy>
 80008ee:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 80008f2:	4a58      	ldr	r2, [pc, #352]	; (8000a54 <main+0x260>)
 80008f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008f8:	4611      	mov	r1, r2
 80008fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008fe:	4618      	mov	r0, r3
 8000900:	f00b fdf2 	bl	800c4e8 <memcpy>

//  fres = fatDma.f_write(&fil, &block, 512, &bytesWrote);
  fres = fatDma.f_write(&fil, &blocks, 1024+512, &bytesWrote);
 8000904:	f607 4208 	addw	r2, r7, #3080	; 0xc08
 8000908:	4b53      	ldr	r3, [pc, #332]	; (8000a58 <main+0x264>)
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000910:	494a      	ldr	r1, [pc, #296]	; (8000a3c <main+0x248>)
 8000912:	4843      	ldr	r0, [pc, #268]	; (8000a20 <main+0x22c>)
 8000914:	f7ff fede 	bl	80006d4 <_ZN6FatDMA7f_writeEP3FILPKvjPj>
 8000918:	4603      	mov	r3, r0
 800091a:	461a      	mov	r2, r3
 800091c:	4b44      	ldr	r3, [pc, #272]	; (8000a30 <main+0x23c>)
 800091e:	701a      	strb	r2, [r3, #0]
//  fres = f_write_dma(&fil, &blocks, 1024+512, &bytesWrote);

  if(fres == FR_OK) {
 8000920:	4b43      	ldr	r3, [pc, #268]	; (8000a30 <main+0x23c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d103      	bne.n	8000930 <main+0x13c>
  	myprintf("Commenced DMA transfer\r\n");
 8000928:	484c      	ldr	r0, [pc, #304]	; (8000a5c <main+0x268>)
 800092a:	f7ff ff3d 	bl	80007a8 <_Z8myprintfPKcz>
 800092e:	e002      	b.n	8000936 <main+0x142>
  }
  else {
  	myprintf("DMA start error\r\n");
 8000930:	484b      	ldr	r0, [pc, #300]	; (8000a60 <main+0x26c>)
 8000932:	f7ff ff39 	bl	80007a8 <_Z8myprintfPKcz>
  }


  HAL_Delay(1000);
 8000936:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800093a:	f000 fe79 	bl	8001630 <HAL_Delay>

  f_close(&fil);
 800093e:	483f      	ldr	r0, [pc, #252]	; (8000a3c <main+0x248>)
 8000940:	f00b fd22 	bl	800c388 <f_close>

  // Unmount
  f_mount(NULL, "", 0);
 8000944:	2200      	movs	r2, #0
 8000946:	4938      	ldr	r1, [pc, #224]	; (8000a28 <main+0x234>)
 8000948:	2000      	movs	r0, #0
 800094a:	f00a feb7 	bl	800b6bc <f_mount>


  /* Now confirm that the write worked correctly */
  //Open the file system
  fres = f_mount(&FatFs, "", 1); //1=mount now
 800094e:	2201      	movs	r2, #1
 8000950:	4935      	ldr	r1, [pc, #212]	; (8000a28 <main+0x234>)
 8000952:	4836      	ldr	r0, [pc, #216]	; (8000a2c <main+0x238>)
 8000954:	f00a feb2 	bl	800b6bc <f_mount>
 8000958:	4603      	mov	r3, r0
 800095a:	461a      	mov	r2, r3
 800095c:	4b34      	ldr	r3, [pc, #208]	; (8000a30 <main+0x23c>)
 800095e:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 8000960:	4b33      	ldr	r3, [pc, #204]	; (8000a30 <main+0x23c>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d006      	beq.n	8000976 <main+0x182>
    myprintf("f_mount error (%i)\r\n", fres);
 8000968:	4b31      	ldr	r3, [pc, #196]	; (8000a30 <main+0x23c>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	4619      	mov	r1, r3
 800096e:	4831      	ldr	r0, [pc, #196]	; (8000a34 <main+0x240>)
 8000970:	f7ff ff1a 	bl	80007a8 <_Z8myprintfPKcz>
  while(1);
 8000974:	e7fe      	b.n	8000974 <main+0x180>
  }

  // Reopen the file
  fres = f_open(&fil, filename, FA_READ);
 8000976:	f241 2308 	movw	r3, #4616	; 0x1208
 800097a:	443b      	add	r3, r7
 800097c:	2201      	movs	r2, #1
 800097e:	4619      	mov	r1, r3
 8000980:	482e      	ldr	r0, [pc, #184]	; (8000a3c <main+0x248>)
 8000982:	f00a fee1 	bl	800b748 <f_open>
 8000986:	4603      	mov	r3, r0
 8000988:	461a      	mov	r2, r3
 800098a:	4b29      	ldr	r3, [pc, #164]	; (8000a30 <main+0x23c>)
 800098c:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 800098e:	4b28      	ldr	r3, [pc, #160]	; (8000a30 <main+0x23c>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d003      	beq.n	800099e <main+0x1aa>
    myprintf("f_open error (%i)\r\n");
 8000996:	482b      	ldr	r0, [pc, #172]	; (8000a44 <main+0x250>)
 8000998:	f7ff ff06 	bl	80007a8 <_Z8myprintfPKcz>
    while(1);
 800099c:	e7fe      	b.n	800099c <main+0x1a8>
  }
  myprintf("File opened for reading\r\n");
 800099e:	4831      	ldr	r0, [pc, #196]	; (8000a64 <main+0x270>)
 80009a0:	f7ff ff02 	bl	80007a8 <_Z8myprintfPKcz>

  //We can either use f_read OR f_gets to get data out of files
  //f_gets is a wrapper on f_read that does some string formatting for us
//  fres = f_read(&fil, &readBlock, 512, &bytesRead);
//  fres = f_read(&fil, &readBlocks, 1024, &bytesRead);
  fres = f_read(&fil, &readBlocks, 1024+512, &bytesRead);
 80009a4:	4b30      	ldr	r3, [pc, #192]	; (8000a68 <main+0x274>)
 80009a6:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 80009aa:	4413      	add	r3, r2
 80009ac:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 80009b0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80009b4:	4821      	ldr	r0, [pc, #132]	; (8000a3c <main+0x248>)
 80009b6:	f00b f88d 	bl	800bad4 <f_read>
 80009ba:	4603      	mov	r3, r0
 80009bc:	461a      	mov	r2, r3
 80009be:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <main+0x23c>)
 80009c0:	701a      	strb	r2, [r3, #0]
//  fres = f_read(&fil, &readBuf, 1024, &bytesRead);

  if(fres == FR_OK) {
 80009c2:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <main+0x23c>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d109      	bne.n	80009de <main+0x1ea>
  	myprintf("Read %d bytes\r\n", bytesRead);
 80009ca:	4b27      	ldr	r3, [pc, #156]	; (8000a68 <main+0x274>)
 80009cc:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 80009d0:	4413      	add	r3, r2
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4619      	mov	r1, r3
 80009d6:	4825      	ldr	r0, [pc, #148]	; (8000a6c <main+0x278>)
 80009d8:	f7ff fee6 	bl	80007a8 <_Z8myprintfPKcz>
 80009dc:	e005      	b.n	80009ea <main+0x1f6>
  }
  else {
  	myprintf("f_read error (%i)\r\n", fres);
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <main+0x23c>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	4619      	mov	r1, r3
 80009e4:	4822      	ldr	r0, [pc, #136]	; (8000a70 <main+0x27c>)
 80009e6:	f7ff fedf 	bl	80007a8 <_Z8myprintfPKcz>
  }

  // Readout the value that we put in earlier
  int val = readBlocks[2].data[2].imuData[2];
 80009ea:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80009ee:	f9b3 3444 	ldrsh.w	r3, [r3, #1092]	; 0x444
 80009f2:	f241 223c 	movw	r2, #4668	; 0x123c
 80009f6:	443a      	add	r2, r7
 80009f8:	6013      	str	r3, [r2, #0]
//  int val = readBlock.data[0].imuData[0];

  myprintf("Read value: %d\r\n", val);
 80009fa:	f241 233c 	movw	r3, #4668	; 0x123c
 80009fe:	443b      	add	r3, r7
 8000a00:	6819      	ldr	r1, [r3, #0]
 8000a02:	481c      	ldr	r0, [pc, #112]	; (8000a74 <main+0x280>)
 8000a04:	f7ff fed0 	bl	80007a8 <_Z8myprintfPKcz>

  f_close(&fil);
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <main+0x248>)
 8000a0a:	f00b fcbd 	bl	800c388 <f_close>

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	4905      	ldr	r1, [pc, #20]	; (8000a28 <main+0x234>)
 8000a12:	2000      	movs	r0, #0
 8000a14:	f00a fe52 	bl	800b6bc <f_mount>

  myprintf("done\r\n");
 8000a18:	4817      	ldr	r0, [pc, #92]	; (8000a78 <main+0x284>)
 8000a1a:	f7ff fec5 	bl	80007a8 <_Z8myprintfPKcz>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <main+0x22a>
 8000a20:	24000aa0 	.word	0x24000aa0
 8000a24:	0800cd54 	.word	0x0800cd54
 8000a28:	0800cd74 	.word	0x0800cd74
 8000a2c:	24000238 	.word	0x24000238
 8000a30:	24000698 	.word	0x24000698
 8000a34:	0800cd78 	.word	0x0800cd78
 8000a38:	0800ce40 	.word	0x0800ce40
 8000a3c:	24000468 	.word	0x24000468
 8000a40:	0800cd90 	.word	0x0800cd90
 8000a44:	0800cda0 	.word	0x0800cda0
 8000a48:	2400069c 	.word	0x2400069c
 8000a4c:	24000c58 	.word	0x24000c58
 8000a50:	24000e58 	.word	0x24000e58
 8000a54:	24001058 	.word	0x24001058
 8000a58:	24000a9c 	.word	0x24000a9c
 8000a5c:	0800cdb4 	.word	0x0800cdb4
 8000a60:	0800cdd0 	.word	0x0800cdd0
 8000a64:	0800cde4 	.word	0x0800cde4
 8000a68:	ffffedc4 	.word	0xffffedc4
 8000a6c:	0800ce00 	.word	0x0800ce00
 8000a70:	0800ce10 	.word	0x0800ce10
 8000a74:	0800ce24 	.word	0x0800ce24
 8000a78:	0800ce38 	.word	0x0800ce38

08000a7c <HAL_SPI_TxCpltCallback>:
  }
  /* USER CODE END 3 */
}

//
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef* hspi) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]

  int res = fatDma.on_block_f_written();
 8000a84:	480b      	ldr	r0, [pc, #44]	; (8000ab4 <HAL_SPI_TxCpltCallback+0x38>)
 8000a86:	f7ff fe3a 	bl	80006fe <_ZN6FatDMA18on_block_f_writtenEv>
 8000a8a:	60f8      	str	r0, [r7, #12]
//	fres = f_write_dma_cplt(&fil, buf, 1024, &bytesWrote);

  myprintf("dma transfer complete\r\n");
 8000a8c:	480a      	ldr	r0, [pc, #40]	; (8000ab8 <HAL_SPI_TxCpltCallback+0x3c>)
 8000a8e:	f7ff fe8b 	bl	80007a8 <_Z8myprintfPKcz>

  if(res == 1) {
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d106      	bne.n	8000aa6 <HAL_SPI_TxCpltCallback+0x2a>
    myprintf("Wrote %d bytes\r\n", bytesWrote);
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <HAL_SPI_TxCpltCallback+0x40>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <HAL_SPI_TxCpltCallback+0x44>)
 8000aa0:	f7ff fe82 	bl	80007a8 <_Z8myprintfPKcz>
  }
  else {
    myprintf( "f_write error (%i)\r\n");
  }

}
 8000aa4:	e002      	b.n	8000aac <HAL_SPI_TxCpltCallback+0x30>
    myprintf( "f_write error (%i)\r\n");
 8000aa6:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <HAL_SPI_TxCpltCallback+0x48>)
 8000aa8:	f7ff fe7e 	bl	80007a8 <_Z8myprintfPKcz>
}
 8000aac:	bf00      	nop
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	24000aa0 	.word	0x24000aa0
 8000ab8:	0800ce74 	.word	0x0800ce74
 8000abc:	24000a9c 	.word	0x24000a9c
 8000ac0:	0800ce8c 	.word	0x0800ce8c
 8000ac4:	0800cea0 	.word	0x0800cea0

08000ac8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b0cc      	sub	sp, #304	; 0x130
 8000acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ace:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ad2:	224c      	movs	r2, #76	; 0x4c
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f00b fd11 	bl	800c4fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000adc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ae0:	2220      	movs	r2, #32
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f00b fd0a 	bl	800c4fe <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	4618      	mov	r0, r3
 8000af0:	23bc      	movs	r3, #188	; 0xbc
 8000af2:	461a      	mov	r2, r3
 8000af4:	2100      	movs	r1, #0
 8000af6:	f00b fd02 	bl	800c4fe <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000afa:	2002      	movs	r0, #2
 8000afc:	f003 fbc8 	bl	8004290 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	4b56      	ldr	r3, [pc, #344]	; (8000c60 <_Z18SystemClock_Configv+0x198>)
 8000b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b0a:	4a55      	ldr	r2, [pc, #340]	; (8000c60 <_Z18SystemClock_Configv+0x198>)
 8000b0c:	f023 0301 	bic.w	r3, r3, #1
 8000b10:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b12:	4b53      	ldr	r3, [pc, #332]	; (8000c60 <_Z18SystemClock_Configv+0x198>)
 8000b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b16:	f003 0201 	and.w	r2, r3, #1
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	4b51      	ldr	r3, [pc, #324]	; (8000c64 <_Z18SystemClock_Configv+0x19c>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b26:	4a4f      	ldr	r2, [pc, #316]	; (8000c64 <_Z18SystemClock_Configv+0x19c>)
 8000b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2c:	6193      	str	r3, [r2, #24]
 8000b2e:	4b4d      	ldr	r3, [pc, #308]	; (8000c64 <_Z18SystemClock_Configv+0x19c>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b3e:	4b49      	ldr	r3, [pc, #292]	; (8000c64 <_Z18SystemClock_Configv+0x19c>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b4a:	bf14      	ite	ne
 8000b4c:	2301      	movne	r3, #1
 8000b4e:	2300      	moveq	r3, #0
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d000      	beq.n	8000b58 <_Z18SystemClock_Configv+0x90>
 8000b56:	e7f2      	b.n	8000b3e <_Z18SystemClock_Configv+0x76>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b5e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b66:	2301      	movs	r3, #1
 8000b68:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b6c:	2340      	movs	r3, #64	; 0x40
 8000b6e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b72:	2302      	movs	r3, #2
 8000b74:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000b84:	2318      	movs	r3, #24
 8000b86:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b90:	2304      	movs	r3, #4
 8000b92:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b96:	2302      	movs	r3, #2
 8000b98:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b9c:	230c      	movs	r3, #12
 8000b9e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bae:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f003 fba6 	bl	8004304 <HAL_RCC_OscConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	bf14      	ite	ne
 8000bbe:	2301      	movne	r3, #1
 8000bc0:	2300      	moveq	r3, #0
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8000bc8:	f000 fa50 	bl	800106c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bcc:	233f      	movs	r3, #63	; 0x3f
 8000bce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000bde:	2300      	movs	r3, #0
 8000be0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bfc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f003 ff8e 	bl	8004b24 <HAL_RCC_ClockConfig>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	bf14      	ite	ne
 8000c0e:	2301      	movne	r3, #1
 8000c10:	2300      	moveq	r3, #0
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <_Z18SystemClock_Configv+0x154>
  {
    Error_Handler();
 8000c18:	f000 fa28 	bl	800106c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SPI3;
 8000c1c:	f107 0308 	add.w	r3, r7, #8
 8000c20:	f241 0202 	movw	r2, #4098	; 0x1002
 8000c24:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000c26:	f107 0308 	add.w	r3, r7, #8
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c2e:	f107 0308 	add.w	r3, r7, #8
 8000c32:	2200      	movs	r2, #0
 8000c34:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f004 faf6 	bl	800522c <HAL_RCCEx_PeriphCLKConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	bf14      	ite	ne
 8000c46:	2301      	movne	r3, #1
 8000c48:	2300      	moveq	r3, #0
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <_Z18SystemClock_Configv+0x18c>
  {
    Error_Handler();
 8000c50:	f000 fa0c 	bl	800106c <Error_Handler>
  }
}
 8000c54:	bf00      	nop
 8000c56:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	58000400 	.word	0x58000400
 8000c64:	58024800 	.word	0x58024800

08000c68 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c6c:	4b2a      	ldr	r3, [pc, #168]	; (8000d18 <_ZL12MX_SPI3_Initv+0xb0>)
 8000c6e:	4a2b      	ldr	r2, [pc, #172]	; (8000d1c <_ZL12MX_SPI3_Initv+0xb4>)
 8000c70:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c72:	4b29      	ldr	r3, [pc, #164]	; (8000d18 <_ZL12MX_SPI3_Initv+0xb0>)
 8000c74:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c78:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c7a:	4b27      	ldr	r3, [pc, #156]	; (8000d18 <_ZL12MX_SPI3_Initv+0xb0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c80:	4b25      	ldr	r3, [pc, #148]	; (8000d18 <_ZL12MX_SPI3_Initv+0xb0>)
 8000c82:	2207      	movs	r2, #7
 8000c84:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c86:	4b24      	ldr	r3, [pc, #144]	; (8000d18 <_ZL12MX_SPI3_Initv+0xb0>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c8c:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <_ZL12MX_SPI3_Initv+0xb0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c92:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <_ZL12MX_SPI3_Initv+0xb0>)
 8000c94:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c98:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000c9a:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <_ZL12MX_SPI3_Initv+0xb0>)
 8000c9c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000ca0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ca2:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <_ZL12MX_SPI3_Initv+0xb0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ca8:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <_ZL12MX_SPI3_Initv+0xb0>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cae:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <_ZL12MX_SPI3_Initv+0xb0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000cb4:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <_ZL12MX_SPI3_Initv+0xb0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cba:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <_ZL12MX_SPI3_Initv+0xb0>)
 8000cbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cc0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000cc2:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <_ZL12MX_SPI3_Initv+0xb0>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <_ZL12MX_SPI3_Initv+0xb0>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cce:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <_ZL12MX_SPI3_Initv+0xb0>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cd4:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <_ZL12MX_SPI3_Initv+0xb0>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000cda:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <_ZL12MX_SPI3_Initv+0xb0>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ce0:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <_ZL12MX_SPI3_Initv+0xb0>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <_ZL12MX_SPI3_Initv+0xb0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <_ZL12MX_SPI3_Initv+0xb0>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <_ZL12MX_SPI3_Initv+0xb0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000cf8:	4807      	ldr	r0, [pc, #28]	; (8000d18 <_ZL12MX_SPI3_Initv+0xb0>)
 8000cfa:	f005 fd97 	bl	800682c <HAL_SPI_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	bf14      	ite	ne
 8000d04:	2301      	movne	r3, #1
 8000d06:	2300      	moveq	r3, #0
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <_ZL12MX_SPI3_Initv+0xaa>
  {
    Error_Handler();
 8000d0e:	f000 f9ad 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	240000ac 	.word	0x240000ac
 8000d1c:	40003c00 	.word	0x40003c00

08000d20 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d24:	4b2c      	ldr	r3, [pc, #176]	; (8000dd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000d26:	4a2d      	ldr	r2, [pc, #180]	; (8000ddc <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000d28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d2a:	4b2b      	ldr	r3, [pc, #172]	; (8000dd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000d2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d32:	4b29      	ldr	r3, [pc, #164]	; (8000dd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d38:	4b27      	ldr	r3, [pc, #156]	; (8000dd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d3e:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d44:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000d46:	220c      	movs	r2, #12
 8000d48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4a:	4b23      	ldr	r3, [pc, #140]	; (8000dd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d50:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d56:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d62:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d68:	481b      	ldr	r0, [pc, #108]	; (8000dd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000d6a:	f006 fdea 	bl	8007942 <HAL_UART_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	bf14      	ite	ne
 8000d74:	2301      	movne	r3, #1
 8000d76:	2300      	moveq	r3, #0
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8000d7e:	f000 f975 	bl	800106c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d82:	2100      	movs	r1, #0
 8000d84:	4814      	ldr	r0, [pc, #80]	; (8000dd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000d86:	f007 fe16 	bl	80089b6 <HAL_UARTEx_SetTxFifoThreshold>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	bf14      	ite	ne
 8000d90:	2301      	movne	r3, #1
 8000d92:	2300      	moveq	r3, #0
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8000d9a:	f000 f967 	bl	800106c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d9e:	2100      	movs	r1, #0
 8000da0:	480d      	ldr	r0, [pc, #52]	; (8000dd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000da2:	f007 fe46 	bl	8008a32 <HAL_UARTEx_SetRxFifoThreshold>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	bf14      	ite	ne
 8000dac:	2301      	movne	r3, #1
 8000dae:	2300      	moveq	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8000db6:	f000 f959 	bl	800106c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000dba:	4807      	ldr	r0, [pc, #28]	; (8000dd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000dbc:	f007 fdc2 	bl	8008944 <HAL_UARTEx_DisableFifoMode>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	bf14      	ite	ne
 8000dc6:	2301      	movne	r3, #1
 8000dc8:	2300      	moveq	r3, #0
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8000dd0:	f000 f94c 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	240001ac 	.word	0x240001ac
 8000ddc:	40004800 	.word	0x40004800

08000de0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08c      	sub	sp, #48	; 0x30
 8000de4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	4b95      	ldr	r3, [pc, #596]	; (800104c <_ZL12MX_GPIO_Initv+0x26c>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfc:	4a93      	ldr	r2, [pc, #588]	; (800104c <_ZL12MX_GPIO_Initv+0x26c>)
 8000dfe:	f043 0304 	orr.w	r3, r3, #4
 8000e02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e06:	4b91      	ldr	r3, [pc, #580]	; (800104c <_ZL12MX_GPIO_Initv+0x26c>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	61bb      	str	r3, [r7, #24]
 8000e12:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e14:	4b8d      	ldr	r3, [pc, #564]	; (800104c <_ZL12MX_GPIO_Initv+0x26c>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1a:	4a8c      	ldr	r2, [pc, #560]	; (800104c <_ZL12MX_GPIO_Initv+0x26c>)
 8000e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e24:	4b89      	ldr	r3, [pc, #548]	; (800104c <_ZL12MX_GPIO_Initv+0x26c>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2e:	617b      	str	r3, [r7, #20]
 8000e30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b86      	ldr	r3, [pc, #536]	; (800104c <_ZL12MX_GPIO_Initv+0x26c>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e38:	4a84      	ldr	r2, [pc, #528]	; (800104c <_ZL12MX_GPIO_Initv+0x26c>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e42:	4b82      	ldr	r3, [pc, #520]	; (800104c <_ZL12MX_GPIO_Initv+0x26c>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e50:	4b7e      	ldr	r3, [pc, #504]	; (800104c <_ZL12MX_GPIO_Initv+0x26c>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e56:	4a7d      	ldr	r2, [pc, #500]	; (800104c <_ZL12MX_GPIO_Initv+0x26c>)
 8000e58:	f043 0302 	orr.w	r3, r3, #2
 8000e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e60:	4b7a      	ldr	r3, [pc, #488]	; (800104c <_ZL12MX_GPIO_Initv+0x26c>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6e:	4b77      	ldr	r3, [pc, #476]	; (800104c <_ZL12MX_GPIO_Initv+0x26c>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e74:	4a75      	ldr	r2, [pc, #468]	; (800104c <_ZL12MX_GPIO_Initv+0x26c>)
 8000e76:	f043 0308 	orr.w	r3, r3, #8
 8000e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7e:	4b73      	ldr	r3, [pc, #460]	; (800104c <_ZL12MX_GPIO_Initv+0x26c>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e84:	f003 0308 	and.w	r3, r3, #8
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e8c:	4b6f      	ldr	r3, [pc, #444]	; (800104c <_ZL12MX_GPIO_Initv+0x26c>)
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e92:	4a6e      	ldr	r2, [pc, #440]	; (800104c <_ZL12MX_GPIO_Initv+0x26c>)
 8000e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9c:	4b6b      	ldr	r3, [pc, #428]	; (800104c <_ZL12MX_GPIO_Initv+0x26c>)
 8000e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eaa:	4b68      	ldr	r3, [pc, #416]	; (800104c <_ZL12MX_GPIO_Initv+0x26c>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb0:	4a66      	ldr	r2, [pc, #408]	; (800104c <_ZL12MX_GPIO_Initv+0x26c>)
 8000eb2:	f043 0310 	orr.w	r3, r3, #16
 8000eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eba:	4b64      	ldr	r3, [pc, #400]	; (800104c <_ZL12MX_GPIO_Initv+0x26c>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec0:	f003 0310 	and.w	r3, r3, #16
 8000ec4:	603b      	str	r3, [r7, #0]
 8000ec6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f244 0101 	movw	r1, #16385	; 0x4001
 8000ece:	4860      	ldr	r0, [pc, #384]	; (8001050 <_ZL12MX_GPIO_Initv+0x270>)
 8000ed0:	f003 f9c4 	bl	800425c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eda:	485e      	ldr	r0, [pc, #376]	; (8001054 <_ZL12MX_GPIO_Initv+0x274>)
 8000edc:	f003 f9be 	bl	800425c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee6:	485c      	ldr	r0, [pc, #368]	; (8001058 <_ZL12MX_GPIO_Initv+0x278>)
 8000ee8:	f003 f9b8 	bl	800425c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2102      	movs	r1, #2
 8000ef0:	485a      	ldr	r0, [pc, #360]	; (800105c <_ZL12MX_GPIO_Initv+0x27c>)
 8000ef2:	f003 f9b3 	bl	800425c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ef6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efc:	2300      	movs	r3, #0
 8000efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4853      	ldr	r0, [pc, #332]	; (8001058 <_ZL12MX_GPIO_Initv+0x278>)
 8000f0c:	f002 fff6 	bl	8003efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f10:	2332      	movs	r3, #50	; 0x32
 8000f12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f20:	230b      	movs	r3, #11
 8000f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	4619      	mov	r1, r3
 8000f2a:	484b      	ldr	r0, [pc, #300]	; (8001058 <_ZL12MX_GPIO_Initv+0x278>)
 8000f2c:	f002 ffe6 	bl	8003efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f30:	2386      	movs	r3, #134	; 0x86
 8000f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f40:	230b      	movs	r3, #11
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4845      	ldr	r0, [pc, #276]	; (8001060 <_ZL12MX_GPIO_Initv+0x280>)
 8000f4c:	f002 ffd6 	bl	8003efc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000f50:	f244 0301 	movw	r3, #16385	; 0x4001
 8000f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	4619      	mov	r1, r3
 8000f68:	4839      	ldr	r0, [pc, #228]	; (8001050 <_ZL12MX_GPIO_Initv+0x270>)
 8000f6a:	f002 ffc7 	bl	8003efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f80:	230b      	movs	r3, #11
 8000f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4831      	ldr	r0, [pc, #196]	; (8001050 <_ZL12MX_GPIO_Initv+0x270>)
 8000f8c:	f002 ffb6 	bl	8003efc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	482a      	ldr	r0, [pc, #168]	; (8001054 <_ZL12MX_GPIO_Initv+0x274>)
 8000faa:	f002 ffa7 	bl	8003efc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000fae:	2380      	movs	r3, #128	; 0x80
 8000fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fb2:	4b2c      	ldr	r3, [pc, #176]	; (8001064 <_ZL12MX_GPIO_Initv+0x284>)
 8000fb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4829      	ldr	r0, [pc, #164]	; (8001068 <_ZL12MX_GPIO_Initv+0x288>)
 8000fc2:	f002 ff9b 	bl	8003efc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000fc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	4619      	mov	r1, r3
 8000fde:	481e      	ldr	r0, [pc, #120]	; (8001058 <_ZL12MX_GPIO_Initv+0x278>)
 8000fe0:	f002 ff8c 	bl	8003efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000fe4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000fe8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000ff6:	230a      	movs	r3, #10
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	4619      	mov	r1, r3
 8001000:	4817      	ldr	r0, [pc, #92]	; (8001060 <_ZL12MX_GPIO_Initv+0x280>)
 8001002:	f002 ff7b 	bl	8003efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001006:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800100a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001018:	230b      	movs	r3, #11
 800101a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4619      	mov	r1, r3
 8001022:	4811      	ldr	r0, [pc, #68]	; (8001068 <_ZL12MX_GPIO_Initv+0x288>)
 8001024:	f002 ff6a 	bl	8003efc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001028:	2302      	movs	r3, #2
 800102a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102c:	2301      	movs	r3, #1
 800102e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	4619      	mov	r1, r3
 800103e:	4807      	ldr	r0, [pc, #28]	; (800105c <_ZL12MX_GPIO_Initv+0x27c>)
 8001040:	f002 ff5c 	bl	8003efc <HAL_GPIO_Init>

}
 8001044:	bf00      	nop
 8001046:	3730      	adds	r7, #48	; 0x30
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	58024400 	.word	0x58024400
 8001050:	58020400 	.word	0x58020400
 8001054:	58020c00 	.word	0x58020c00
 8001058:	58020800 	.word	0x58020800
 800105c:	58021000 	.word	0x58021000
 8001060:	58020000 	.word	0x58020000
 8001064:	11110000 	.word	0x11110000
 8001068:	58021800 	.word	0x58021800

0800106c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <_Z41__static_initialization_and_destruction_0ii>:
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d107      	bne.n	800109c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001092:	4293      	cmp	r3, r2
 8001094:	d102      	bne.n	800109c <_Z41__static_initialization_and_destruction_0ii+0x20>
FatDMA fatDma;
 8001096:	4809      	ldr	r0, [pc, #36]	; (80010bc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001098:	f7ff fb66 	bl	8000768 <_ZN6FatDMAC1Ev>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d107      	bne.n	80010b2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d102      	bne.n	80010b2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80010ac:	4803      	ldr	r0, [pc, #12]	; (80010bc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80010ae:	f7ff fb70 	bl	8000792 <_ZN6FatDMAD1Ev>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	24000aa0 	.word	0x24000aa0

080010c0 <_GLOBAL__sub_I_hspi3>:
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80010c8:	2001      	movs	r0, #1
 80010ca:	f7ff ffd7 	bl	800107c <_Z41__static_initialization_and_destruction_0ii>
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <_GLOBAL__sub_D_hspi3>:
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80010d8:	2000      	movs	r0, #0
 80010da:	f7ff ffcf 	bl	800107c <_Z41__static_initialization_and_destruction_0ii>
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <HAL_MspInit+0x30>)
 80010e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010ec:	4a08      	ldr	r2, [pc, #32]	; (8001110 <HAL_MspInit+0x30>)
 80010ee:	f043 0302 	orr.w	r3, r3, #2
 80010f2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_MspInit+0x30>)
 80010f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	58024400 	.word	0x58024400

08001114 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	; 0x28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a35      	ldr	r2, [pc, #212]	; (8001208 <HAL_SPI_MspInit+0xf4>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d163      	bne.n	80011fe <HAL_SPI_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001136:	4b35      	ldr	r3, [pc, #212]	; (800120c <HAL_SPI_MspInit+0xf8>)
 8001138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800113c:	4a33      	ldr	r2, [pc, #204]	; (800120c <HAL_SPI_MspInit+0xf8>)
 800113e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001142:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001146:	4b31      	ldr	r3, [pc, #196]	; (800120c <HAL_SPI_MspInit+0xf8>)
 8001148:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800114c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001154:	4b2d      	ldr	r3, [pc, #180]	; (800120c <HAL_SPI_MspInit+0xf8>)
 8001156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115a:	4a2c      	ldr	r2, [pc, #176]	; (800120c <HAL_SPI_MspInit+0xf8>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001164:	4b29      	ldr	r3, [pc, #164]	; (800120c <HAL_SPI_MspInit+0xf8>)
 8001166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001172:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001184:	2306      	movs	r3, #6
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	4820      	ldr	r0, [pc, #128]	; (8001210 <HAL_SPI_MspInit+0xfc>)
 8001190:	f002 feb4 	bl	8003efc <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream0;
 8001194:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <HAL_SPI_MspInit+0x100>)
 8001196:	4a20      	ldr	r2, [pc, #128]	; (8001218 <HAL_SPI_MspInit+0x104>)
 8001198:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 800119a:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <HAL_SPI_MspInit+0x100>)
 800119c:	223e      	movs	r2, #62	; 0x3e
 800119e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011a0:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <HAL_SPI_MspInit+0x100>)
 80011a2:	2240      	movs	r2, #64	; 0x40
 80011a4:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011a6:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <HAL_SPI_MspInit+0x100>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011ac:	4b19      	ldr	r3, [pc, #100]	; (8001214 <HAL_SPI_MspInit+0x100>)
 80011ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011b2:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011b4:	4b17      	ldr	r3, [pc, #92]	; (8001214 <HAL_SPI_MspInit+0x100>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011ba:	4b16      	ldr	r3, [pc, #88]	; (8001214 <HAL_SPI_MspInit+0x100>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <HAL_SPI_MspInit+0x100>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011c6:	4b13      	ldr	r3, [pc, #76]	; (8001214 <HAL_SPI_MspInit+0x100>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <HAL_SPI_MspInit+0x100>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80011d2:	4810      	ldr	r0, [pc, #64]	; (8001214 <HAL_SPI_MspInit+0x100>)
 80011d4:	f000 fb6a 	bl	80018ac <HAL_DMA_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 80011de:	f7ff ff45 	bl	800106c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <HAL_SPI_MspInit+0x100>)
 80011e6:	679a      	str	r2, [r3, #120]	; 0x78
 80011e8:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <HAL_SPI_MspInit+0x100>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	2033      	movs	r0, #51	; 0x33
 80011f4:	f000 fb25 	bl	8001842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80011f8:	2033      	movs	r0, #51	; 0x33
 80011fa:	f000 fb3c 	bl	8001876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80011fe:	bf00      	nop
 8001200:	3728      	adds	r7, #40	; 0x28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40003c00 	.word	0x40003c00
 800120c:	58024400 	.word	0x58024400
 8001210:	58020800 	.word	0x58020800
 8001214:	24000134 	.word	0x24000134
 8001218:	40020010 	.word	0x40020010

0800121c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a1a      	ldr	r2, [pc, #104]	; (80012a4 <HAL_UART_MspInit+0x88>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d12e      	bne.n	800129c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800123e:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <HAL_UART_MspInit+0x8c>)
 8001240:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001244:	4a18      	ldr	r2, [pc, #96]	; (80012a8 <HAL_UART_MspInit+0x8c>)
 8001246:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800124a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800124e:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <HAL_UART_MspInit+0x8c>)
 8001250:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001254:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_UART_MspInit+0x8c>)
 800125e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001262:	4a11      	ldr	r2, [pc, #68]	; (80012a8 <HAL_UART_MspInit+0x8c>)
 8001264:	f043 0308 	orr.w	r3, r3, #8
 8001268:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <HAL_UART_MspInit+0x8c>)
 800126e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800127a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800127e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800128c:	2307      	movs	r3, #7
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <HAL_UART_MspInit+0x90>)
 8001298:	f002 fe30 	bl	8003efc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800129c:	bf00      	nop
 800129e:	3728      	adds	r7, #40	; 0x28
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40004800 	.word	0x40004800
 80012a8:	58024400 	.word	0x58024400
 80012ac:	58020c00 	.word	0x58020c00

080012b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <HardFault_Handler+0x4>

080012c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <MemManage_Handler+0x4>

080012ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <BusFault_Handler+0x4>

080012d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <UsageFault_Handler+0x4>

080012d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001304:	f000 f974 	bl	80015f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}

0800130c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <DMA1_Stream0_IRQHandler+0x10>)
 8001312:	f001 fad5 	bl	80028c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	24000134 	.word	0x24000134

08001320 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001324:	4802      	ldr	r0, [pc, #8]	; (8001330 <SPI3_IRQHandler+0x10>)
 8001326:	f005 ffab 	bl	8007280 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	240000ac 	.word	0x240000ac

08001334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800133c:	4a14      	ldr	r2, [pc, #80]	; (8001390 <_sbrk+0x5c>)
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <_sbrk+0x60>)
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001348:	4b13      	ldr	r3, [pc, #76]	; (8001398 <_sbrk+0x64>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d102      	bne.n	8001356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <_sbrk+0x64>)
 8001352:	4a12      	ldr	r2, [pc, #72]	; (800139c <_sbrk+0x68>)
 8001354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <_sbrk+0x64>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	429a      	cmp	r2, r3
 8001362:	d207      	bcs.n	8001374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001364:	f00b f896 	bl	800c494 <__errno>
 8001368:	4602      	mov	r2, r0
 800136a:	230c      	movs	r3, #12
 800136c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
 8001372:	e009      	b.n	8001388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <_sbrk+0x64>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <_sbrk+0x64>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	4a05      	ldr	r2, [pc, #20]	; (8001398 <_sbrk+0x64>)
 8001384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001386:	68fb      	ldr	r3, [r7, #12]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	24080000 	.word	0x24080000
 8001394:	00000400 	.word	0x00000400
 8001398:	24001258 	.word	0x24001258
 800139c:	24001718 	.word	0x24001718

080013a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013a4:	4b39      	ldr	r3, [pc, #228]	; (800148c <SystemInit+0xec>)
 80013a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013aa:	4a38      	ldr	r2, [pc, #224]	; (800148c <SystemInit+0xec>)
 80013ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013b4:	4b36      	ldr	r3, [pc, #216]	; (8001490 <SystemInit+0xf0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 030f 	and.w	r3, r3, #15
 80013bc:	2b06      	cmp	r3, #6
 80013be:	d807      	bhi.n	80013d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013c0:	4b33      	ldr	r3, [pc, #204]	; (8001490 <SystemInit+0xf0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f023 030f 	bic.w	r3, r3, #15
 80013c8:	4a31      	ldr	r2, [pc, #196]	; (8001490 <SystemInit+0xf0>)
 80013ca:	f043 0307 	orr.w	r3, r3, #7
 80013ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013d0:	4b30      	ldr	r3, [pc, #192]	; (8001494 <SystemInit+0xf4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a2f      	ldr	r2, [pc, #188]	; (8001494 <SystemInit+0xf4>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013dc:	4b2d      	ldr	r3, [pc, #180]	; (8001494 <SystemInit+0xf4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013e2:	4b2c      	ldr	r3, [pc, #176]	; (8001494 <SystemInit+0xf4>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	492b      	ldr	r1, [pc, #172]	; (8001494 <SystemInit+0xf4>)
 80013e8:	4b2b      	ldr	r3, [pc, #172]	; (8001498 <SystemInit+0xf8>)
 80013ea:	4013      	ands	r3, r2
 80013ec:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013ee:	4b28      	ldr	r3, [pc, #160]	; (8001490 <SystemInit+0xf0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	2b07      	cmp	r3, #7
 80013f8:	d907      	bls.n	800140a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013fa:	4b25      	ldr	r3, [pc, #148]	; (8001490 <SystemInit+0xf0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f023 030f 	bic.w	r3, r3, #15
 8001402:	4a23      	ldr	r2, [pc, #140]	; (8001490 <SystemInit+0xf0>)
 8001404:	f043 0307 	orr.w	r3, r3, #7
 8001408:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800140a:	4b22      	ldr	r3, [pc, #136]	; (8001494 <SystemInit+0xf4>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001410:	4b20      	ldr	r3, [pc, #128]	; (8001494 <SystemInit+0xf4>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001416:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <SystemInit+0xf4>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800141c:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <SystemInit+0xf4>)
 800141e:	4a1f      	ldr	r2, [pc, #124]	; (800149c <SystemInit+0xfc>)
 8001420:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <SystemInit+0xf4>)
 8001424:	4a1e      	ldr	r2, [pc, #120]	; (80014a0 <SystemInit+0x100>)
 8001426:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001428:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <SystemInit+0xf4>)
 800142a:	4a1e      	ldr	r2, [pc, #120]	; (80014a4 <SystemInit+0x104>)
 800142c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800142e:	4b19      	ldr	r3, [pc, #100]	; (8001494 <SystemInit+0xf4>)
 8001430:	2200      	movs	r2, #0
 8001432:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <SystemInit+0xf4>)
 8001436:	4a1b      	ldr	r2, [pc, #108]	; (80014a4 <SystemInit+0x104>)
 8001438:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800143a:	4b16      	ldr	r3, [pc, #88]	; (8001494 <SystemInit+0xf4>)
 800143c:	2200      	movs	r2, #0
 800143e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <SystemInit+0xf4>)
 8001442:	4a18      	ldr	r2, [pc, #96]	; (80014a4 <SystemInit+0x104>)
 8001444:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <SystemInit+0xf4>)
 8001448:	2200      	movs	r2, #0
 800144a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <SystemInit+0xf4>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a10      	ldr	r2, [pc, #64]	; (8001494 <SystemInit+0xf4>)
 8001452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001456:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001458:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <SystemInit+0xf4>)
 800145a:	2200      	movs	r2, #0
 800145c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800145e:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <SystemInit+0x108>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <SystemInit+0x10c>)
 8001464:	4013      	ands	r3, r2
 8001466:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800146a:	d202      	bcs.n	8001472 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800146c:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <SystemInit+0x110>)
 800146e:	2201      	movs	r2, #1
 8001470:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <SystemInit+0x114>)
 8001474:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001478:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800147a:	4b04      	ldr	r3, [pc, #16]	; (800148c <SystemInit+0xec>)
 800147c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001480:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000ed00 	.word	0xe000ed00
 8001490:	52002000 	.word	0x52002000
 8001494:	58024400 	.word	0x58024400
 8001498:	eaf6ed7f 	.word	0xeaf6ed7f
 800149c:	02020200 	.word	0x02020200
 80014a0:	01ff0000 	.word	0x01ff0000
 80014a4:	01010280 	.word	0x01010280
 80014a8:	5c001000 	.word	0x5c001000
 80014ac:	ffff0000 	.word	0xffff0000
 80014b0:	51008108 	.word	0x51008108
 80014b4:	52004000 	.word	0x52004000

080014b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f0 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80014bc:	f7ff ff70 	bl	80013a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014c2:	e003      	b.n	80014cc <LoopCopyDataInit>

080014c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014c4:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80014c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014ca:	3104      	adds	r1, #4

080014cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014cc:	480a      	ldr	r0, [pc, #40]	; (80014f8 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80014d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014d4:	d3f6      	bcc.n	80014c4 <CopyDataInit>
  ldr  r2, =_sbss
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80014d8:	e002      	b.n	80014e0 <LoopFillZerobss>

080014da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014dc:	f842 3b04 	str.w	r3, [r2], #4

080014e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80014e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014e4:	d3f9      	bcc.n	80014da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014e6:	f00a ffdb 	bl	800c4a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ea:	f7ff f983 	bl	80007f4 <main>
  bx  lr    
 80014ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014f0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80014f4:	0800d008 	.word	0x0800d008
  ldr  r0, =_sdata
 80014f8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80014fc:	24000090 	.word	0x24000090
  ldr  r2, =_sbss
 8001500:	24000090 	.word	0x24000090
  ldr  r3, = _ebss
 8001504:	24001714 	.word	0x24001714

08001508 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001508:	e7fe      	b.n	8001508 <ADC3_IRQHandler>
	...

0800150c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001512:	2003      	movs	r0, #3
 8001514:	f000 f98a 	bl	800182c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001518:	f003 fcba 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 800151c:	4601      	mov	r1, r0
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <HAL_Init+0x68>)
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	0a1b      	lsrs	r3, r3, #8
 8001524:	f003 030f 	and.w	r3, r3, #15
 8001528:	4a13      	ldr	r2, [pc, #76]	; (8001578 <HAL_Init+0x6c>)
 800152a:	5cd3      	ldrb	r3, [r2, r3]
 800152c:	f003 031f 	and.w	r3, r3, #31
 8001530:	fa21 f303 	lsr.w	r3, r1, r3
 8001534:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <HAL_Init+0x68>)
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	4a0e      	ldr	r2, [pc, #56]	; (8001578 <HAL_Init+0x6c>)
 8001540:	5cd3      	ldrb	r3, [r2, r3]
 8001542:	f003 031f 	and.w	r3, r3, #31
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	fa22 f303 	lsr.w	r3, r2, r3
 800154c:	4a0b      	ldr	r2, [pc, #44]	; (800157c <HAL_Init+0x70>)
 800154e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001550:	4a0b      	ldr	r2, [pc, #44]	; (8001580 <HAL_Init+0x74>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001556:	2000      	movs	r0, #0
 8001558:	f000 f814 	bl	8001584 <HAL_InitTick>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e002      	b.n	800156c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001566:	f7ff fdbb 	bl	80010e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	58024400 	.word	0x58024400
 8001578:	0800cf0c 	.word	0x0800cf0c
 800157c:	24000004 	.word	0x24000004
 8001580:	24000000 	.word	0x24000000

08001584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800158c:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_InitTick+0x60>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e021      	b.n	80015dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <HAL_InitTick+0x64>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <HAL_InitTick+0x60>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 f96f 	bl	8001892 <HAL_SYSTICK_Config>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00e      	b.n	80015dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b0f      	cmp	r3, #15
 80015c2:	d80a      	bhi.n	80015da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c4:	2200      	movs	r2, #0
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f000 f939 	bl	8001842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d0:	4a06      	ldr	r2, [pc, #24]	; (80015ec <HAL_InitTick+0x68>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	e000      	b.n	80015dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	2400000c 	.word	0x2400000c
 80015e8:	24000000 	.word	0x24000000
 80015ec:	24000008 	.word	0x24000008

080015f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_IncTick+0x20>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_IncTick+0x24>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <HAL_IncTick+0x24>)
 8001602:	6013      	str	r3, [r2, #0]
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	2400000c 	.word	0x2400000c
 8001614:	240012a4 	.word	0x240012a4

08001618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return uwTick;
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <HAL_GetTick+0x14>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	240012a4 	.word	0x240012a4

08001630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001638:	f7ff ffee 	bl	8001618 <HAL_GetTick>
 800163c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001648:	d005      	beq.n	8001656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_Delay+0x40>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4413      	add	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001656:	bf00      	nop
 8001658:	f7ff ffde 	bl	8001618 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	429a      	cmp	r2, r3
 8001666:	d8f7      	bhi.n	8001658 <HAL_Delay+0x28>
  {
  }
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	2400000c 	.word	0x2400000c

08001674 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <HAL_GetREVID+0x14>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	0c1b      	lsrs	r3, r3, #16
}
 800167e:	4618      	mov	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	5c001000 	.word	0x5c001000

0800168c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800169c:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <__NVIC_SetPriorityGrouping+0x40>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a8:	4013      	ands	r3, r2
 80016aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ba:	4a04      	ldr	r2, [pc, #16]	; (80016cc <__NVIC_SetPriorityGrouping+0x40>)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	60d3      	str	r3, [r2, #12]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000ed00 	.word	0xe000ed00
 80016d0:	05fa0000 	.word	0x05fa0000

080016d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <__NVIC_GetPriorityGrouping+0x18>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	f003 0307 	and.w	r3, r3, #7
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	db0b      	blt.n	800171a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	f003 021f 	and.w	r2, r3, #31
 8001708:	4907      	ldr	r1, [pc, #28]	; (8001728 <__NVIC_EnableIRQ+0x38>)
 800170a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800170e:	095b      	lsrs	r3, r3, #5
 8001710:	2001      	movs	r0, #1
 8001712:	fa00 f202 	lsl.w	r2, r0, r2
 8001716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000e100 	.word	0xe000e100

0800172c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	6039      	str	r1, [r7, #0]
 8001736:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001738:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800173c:	2b00      	cmp	r3, #0
 800173e:	db0a      	blt.n	8001756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	b2da      	uxtb	r2, r3
 8001744:	490c      	ldr	r1, [pc, #48]	; (8001778 <__NVIC_SetPriority+0x4c>)
 8001746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800174a:	0112      	lsls	r2, r2, #4
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	440b      	add	r3, r1
 8001750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001754:	e00a      	b.n	800176c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4908      	ldr	r1, [pc, #32]	; (800177c <__NVIC_SetPriority+0x50>)
 800175c:	88fb      	ldrh	r3, [r7, #6]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	3b04      	subs	r3, #4
 8001764:	0112      	lsls	r2, r2, #4
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	440b      	add	r3, r1
 800176a:	761a      	strb	r2, [r3, #24]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000e100 	.word	0xe000e100
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001780:	b480      	push	{r7}
 8001782:	b089      	sub	sp, #36	; 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f1c3 0307 	rsb	r3, r3, #7
 800179a:	2b04      	cmp	r3, #4
 800179c:	bf28      	it	cs
 800179e:	2304      	movcs	r3, #4
 80017a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3304      	adds	r3, #4
 80017a6:	2b06      	cmp	r3, #6
 80017a8:	d902      	bls.n	80017b0 <NVIC_EncodePriority+0x30>
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3b03      	subs	r3, #3
 80017ae:	e000      	b.n	80017b2 <NVIC_EncodePriority+0x32>
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43da      	mvns	r2, r3
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	401a      	ands	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c8:	f04f 31ff 	mov.w	r1, #4294967295
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	43d9      	mvns	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d8:	4313      	orrs	r3, r2
         );
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3724      	adds	r7, #36	; 0x24
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f8:	d301      	bcc.n	80017fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00f      	b.n	800181e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fe:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <SysTick_Config+0x40>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001806:	210f      	movs	r1, #15
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f7ff ff8e 	bl	800172c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <SysTick_Config+0x40>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001816:	4b04      	ldr	r3, [pc, #16]	; (8001828 <SysTick_Config+0x40>)
 8001818:	2207      	movs	r2, #7
 800181a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	e000e010 	.word	0xe000e010

0800182c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ff29 	bl	800168c <__NVIC_SetPriorityGrouping>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	4603      	mov	r3, r0
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001850:	f7ff ff40 	bl	80016d4 <__NVIC_GetPriorityGrouping>
 8001854:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	68b9      	ldr	r1, [r7, #8]
 800185a:	6978      	ldr	r0, [r7, #20]
 800185c:	f7ff ff90 	bl	8001780 <NVIC_EncodePriority>
 8001860:	4602      	mov	r2, r0
 8001862:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff5f 	bl	800172c <__NVIC_SetPriority>
}
 800186e:	bf00      	nop
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001880:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff33 	bl	80016f0 <__NVIC_EnableIRQ>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ffa4 	bl	80017e8 <SysTick_Config>
 80018a0:	4603      	mov	r3, r0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80018b4:	f7ff feb0 	bl	8001618 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e316      	b.n	8001ef2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a66      	ldr	r2, [pc, #408]	; (8001a64 <HAL_DMA_Init+0x1b8>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d04a      	beq.n	8001964 <HAL_DMA_Init+0xb8>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a65      	ldr	r2, [pc, #404]	; (8001a68 <HAL_DMA_Init+0x1bc>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d045      	beq.n	8001964 <HAL_DMA_Init+0xb8>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a63      	ldr	r2, [pc, #396]	; (8001a6c <HAL_DMA_Init+0x1c0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d040      	beq.n	8001964 <HAL_DMA_Init+0xb8>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a62      	ldr	r2, [pc, #392]	; (8001a70 <HAL_DMA_Init+0x1c4>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d03b      	beq.n	8001964 <HAL_DMA_Init+0xb8>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a60      	ldr	r2, [pc, #384]	; (8001a74 <HAL_DMA_Init+0x1c8>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d036      	beq.n	8001964 <HAL_DMA_Init+0xb8>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a5f      	ldr	r2, [pc, #380]	; (8001a78 <HAL_DMA_Init+0x1cc>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d031      	beq.n	8001964 <HAL_DMA_Init+0xb8>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a5d      	ldr	r2, [pc, #372]	; (8001a7c <HAL_DMA_Init+0x1d0>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d02c      	beq.n	8001964 <HAL_DMA_Init+0xb8>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a5c      	ldr	r2, [pc, #368]	; (8001a80 <HAL_DMA_Init+0x1d4>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d027      	beq.n	8001964 <HAL_DMA_Init+0xb8>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a5a      	ldr	r2, [pc, #360]	; (8001a84 <HAL_DMA_Init+0x1d8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d022      	beq.n	8001964 <HAL_DMA_Init+0xb8>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a59      	ldr	r2, [pc, #356]	; (8001a88 <HAL_DMA_Init+0x1dc>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d01d      	beq.n	8001964 <HAL_DMA_Init+0xb8>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a57      	ldr	r2, [pc, #348]	; (8001a8c <HAL_DMA_Init+0x1e0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d018      	beq.n	8001964 <HAL_DMA_Init+0xb8>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a56      	ldr	r2, [pc, #344]	; (8001a90 <HAL_DMA_Init+0x1e4>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d013      	beq.n	8001964 <HAL_DMA_Init+0xb8>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a54      	ldr	r2, [pc, #336]	; (8001a94 <HAL_DMA_Init+0x1e8>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d00e      	beq.n	8001964 <HAL_DMA_Init+0xb8>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a53      	ldr	r2, [pc, #332]	; (8001a98 <HAL_DMA_Init+0x1ec>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d009      	beq.n	8001964 <HAL_DMA_Init+0xb8>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a51      	ldr	r2, [pc, #324]	; (8001a9c <HAL_DMA_Init+0x1f0>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d004      	beq.n	8001964 <HAL_DMA_Init+0xb8>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a50      	ldr	r2, [pc, #320]	; (8001aa0 <HAL_DMA_Init+0x1f4>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d101      	bne.n	8001968 <HAL_DMA_Init+0xbc>
 8001964:	2301      	movs	r3, #1
 8001966:	e000      	b.n	800196a <HAL_DMA_Init+0xbe>
 8001968:	2300      	movs	r3, #0
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 813b 	beq.w	8001be6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2202      	movs	r2, #2
 800197c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a37      	ldr	r2, [pc, #220]	; (8001a64 <HAL_DMA_Init+0x1b8>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d04a      	beq.n	8001a20 <HAL_DMA_Init+0x174>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a36      	ldr	r2, [pc, #216]	; (8001a68 <HAL_DMA_Init+0x1bc>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d045      	beq.n	8001a20 <HAL_DMA_Init+0x174>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a34      	ldr	r2, [pc, #208]	; (8001a6c <HAL_DMA_Init+0x1c0>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d040      	beq.n	8001a20 <HAL_DMA_Init+0x174>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a33      	ldr	r2, [pc, #204]	; (8001a70 <HAL_DMA_Init+0x1c4>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d03b      	beq.n	8001a20 <HAL_DMA_Init+0x174>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a31      	ldr	r2, [pc, #196]	; (8001a74 <HAL_DMA_Init+0x1c8>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d036      	beq.n	8001a20 <HAL_DMA_Init+0x174>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a30      	ldr	r2, [pc, #192]	; (8001a78 <HAL_DMA_Init+0x1cc>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d031      	beq.n	8001a20 <HAL_DMA_Init+0x174>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a2e      	ldr	r2, [pc, #184]	; (8001a7c <HAL_DMA_Init+0x1d0>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d02c      	beq.n	8001a20 <HAL_DMA_Init+0x174>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a2d      	ldr	r2, [pc, #180]	; (8001a80 <HAL_DMA_Init+0x1d4>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d027      	beq.n	8001a20 <HAL_DMA_Init+0x174>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a2b      	ldr	r2, [pc, #172]	; (8001a84 <HAL_DMA_Init+0x1d8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d022      	beq.n	8001a20 <HAL_DMA_Init+0x174>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a2a      	ldr	r2, [pc, #168]	; (8001a88 <HAL_DMA_Init+0x1dc>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d01d      	beq.n	8001a20 <HAL_DMA_Init+0x174>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a28      	ldr	r2, [pc, #160]	; (8001a8c <HAL_DMA_Init+0x1e0>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d018      	beq.n	8001a20 <HAL_DMA_Init+0x174>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a27      	ldr	r2, [pc, #156]	; (8001a90 <HAL_DMA_Init+0x1e4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d013      	beq.n	8001a20 <HAL_DMA_Init+0x174>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a25      	ldr	r2, [pc, #148]	; (8001a94 <HAL_DMA_Init+0x1e8>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d00e      	beq.n	8001a20 <HAL_DMA_Init+0x174>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a24      	ldr	r2, [pc, #144]	; (8001a98 <HAL_DMA_Init+0x1ec>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d009      	beq.n	8001a20 <HAL_DMA_Init+0x174>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a22      	ldr	r2, [pc, #136]	; (8001a9c <HAL_DMA_Init+0x1f0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d004      	beq.n	8001a20 <HAL_DMA_Init+0x174>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a21      	ldr	r2, [pc, #132]	; (8001aa0 <HAL_DMA_Init+0x1f4>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d108      	bne.n	8001a32 <HAL_DMA_Init+0x186>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 0201 	bic.w	r2, r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	e007      	b.n	8001a42 <HAL_DMA_Init+0x196>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0201 	bic.w	r2, r2, #1
 8001a40:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a42:	e02f      	b.n	8001aa4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a44:	f7ff fde8 	bl	8001618 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b05      	cmp	r3, #5
 8001a50:	d928      	bls.n	8001aa4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2220      	movs	r2, #32
 8001a56:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e246      	b.n	8001ef2 <HAL_DMA_Init+0x646>
 8001a64:	40020010 	.word	0x40020010
 8001a68:	40020028 	.word	0x40020028
 8001a6c:	40020040 	.word	0x40020040
 8001a70:	40020058 	.word	0x40020058
 8001a74:	40020070 	.word	0x40020070
 8001a78:	40020088 	.word	0x40020088
 8001a7c:	400200a0 	.word	0x400200a0
 8001a80:	400200b8 	.word	0x400200b8
 8001a84:	40020410 	.word	0x40020410
 8001a88:	40020428 	.word	0x40020428
 8001a8c:	40020440 	.word	0x40020440
 8001a90:	40020458 	.word	0x40020458
 8001a94:	40020470 	.word	0x40020470
 8001a98:	40020488 	.word	0x40020488
 8001a9c:	400204a0 	.word	0x400204a0
 8001aa0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1c8      	bne.n	8001a44 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4b83      	ldr	r3, [pc, #524]	; (8001ccc <HAL_DMA_Init+0x420>)
 8001abe:	4013      	ands	r3, r2
 8001ac0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001aca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	2b04      	cmp	r3, #4
 8001af6:	d107      	bne.n	8001b08 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b00:	4313      	orrs	r3, r2
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001b08:	4b71      	ldr	r3, [pc, #452]	; (8001cd0 <HAL_DMA_Init+0x424>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b71      	ldr	r3, [pc, #452]	; (8001cd4 <HAL_DMA_Init+0x428>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b14:	d328      	bcc.n	8001b68 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b28      	cmp	r3, #40	; 0x28
 8001b1c:	d903      	bls.n	8001b26 <HAL_DMA_Init+0x27a>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b2e      	cmp	r3, #46	; 0x2e
 8001b24:	d917      	bls.n	8001b56 <HAL_DMA_Init+0x2aa>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b3e      	cmp	r3, #62	; 0x3e
 8001b2c:	d903      	bls.n	8001b36 <HAL_DMA_Init+0x28a>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b42      	cmp	r3, #66	; 0x42
 8001b34:	d90f      	bls.n	8001b56 <HAL_DMA_Init+0x2aa>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b46      	cmp	r3, #70	; 0x46
 8001b3c:	d903      	bls.n	8001b46 <HAL_DMA_Init+0x29a>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b48      	cmp	r3, #72	; 0x48
 8001b44:	d907      	bls.n	8001b56 <HAL_DMA_Init+0x2aa>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b4e      	cmp	r3, #78	; 0x4e
 8001b4c:	d905      	bls.n	8001b5a <HAL_DMA_Init+0x2ae>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b52      	cmp	r3, #82	; 0x52
 8001b54:	d801      	bhi.n	8001b5a <HAL_DMA_Init+0x2ae>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <HAL_DMA_Init+0x2b0>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b66:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f023 0307 	bic.w	r3, r3, #7
 8001b7e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d117      	bne.n	8001bc2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00e      	beq.n	8001bc2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f002 f81f 	bl	8003be8 <DMA_CheckFifoParam>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d008      	beq.n	8001bc2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2240      	movs	r2, #64	; 0x40
 8001bb4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e197      	b.n	8001ef2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f001 ff5a 	bl	8003a84 <DMA_CalcBaseAndBitshift>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd8:	f003 031f 	and.w	r3, r3, #31
 8001bdc:	223f      	movs	r2, #63	; 0x3f
 8001bde:	409a      	lsls	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	e0cd      	b.n	8001d82 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a3b      	ldr	r2, [pc, #236]	; (8001cd8 <HAL_DMA_Init+0x42c>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d022      	beq.n	8001c36 <HAL_DMA_Init+0x38a>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a39      	ldr	r2, [pc, #228]	; (8001cdc <HAL_DMA_Init+0x430>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d01d      	beq.n	8001c36 <HAL_DMA_Init+0x38a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a38      	ldr	r2, [pc, #224]	; (8001ce0 <HAL_DMA_Init+0x434>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d018      	beq.n	8001c36 <HAL_DMA_Init+0x38a>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a36      	ldr	r2, [pc, #216]	; (8001ce4 <HAL_DMA_Init+0x438>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d013      	beq.n	8001c36 <HAL_DMA_Init+0x38a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a35      	ldr	r2, [pc, #212]	; (8001ce8 <HAL_DMA_Init+0x43c>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d00e      	beq.n	8001c36 <HAL_DMA_Init+0x38a>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a33      	ldr	r2, [pc, #204]	; (8001cec <HAL_DMA_Init+0x440>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d009      	beq.n	8001c36 <HAL_DMA_Init+0x38a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a32      	ldr	r2, [pc, #200]	; (8001cf0 <HAL_DMA_Init+0x444>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d004      	beq.n	8001c36 <HAL_DMA_Init+0x38a>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a30      	ldr	r2, [pc, #192]	; (8001cf4 <HAL_DMA_Init+0x448>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d101      	bne.n	8001c3a <HAL_DMA_Init+0x38e>
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <HAL_DMA_Init+0x390>
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 8097 	beq.w	8001d70 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a24      	ldr	r2, [pc, #144]	; (8001cd8 <HAL_DMA_Init+0x42c>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d021      	beq.n	8001c90 <HAL_DMA_Init+0x3e4>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a22      	ldr	r2, [pc, #136]	; (8001cdc <HAL_DMA_Init+0x430>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d01c      	beq.n	8001c90 <HAL_DMA_Init+0x3e4>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a21      	ldr	r2, [pc, #132]	; (8001ce0 <HAL_DMA_Init+0x434>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d017      	beq.n	8001c90 <HAL_DMA_Init+0x3e4>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a1f      	ldr	r2, [pc, #124]	; (8001ce4 <HAL_DMA_Init+0x438>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d012      	beq.n	8001c90 <HAL_DMA_Init+0x3e4>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a1e      	ldr	r2, [pc, #120]	; (8001ce8 <HAL_DMA_Init+0x43c>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d00d      	beq.n	8001c90 <HAL_DMA_Init+0x3e4>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a1c      	ldr	r2, [pc, #112]	; (8001cec <HAL_DMA_Init+0x440>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d008      	beq.n	8001c90 <HAL_DMA_Init+0x3e4>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a1b      	ldr	r2, [pc, #108]	; (8001cf0 <HAL_DMA_Init+0x444>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d003      	beq.n	8001c90 <HAL_DMA_Init+0x3e4>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a19      	ldr	r2, [pc, #100]	; (8001cf4 <HAL_DMA_Init+0x448>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_DMA_Init+0x44c>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b40      	cmp	r3, #64	; 0x40
 8001cb8:	d020      	beq.n	8001cfc <HAL_DMA_Init+0x450>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2b80      	cmp	r3, #128	; 0x80
 8001cc0:	d102      	bne.n	8001cc8 <HAL_DMA_Init+0x41c>
 8001cc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cc6:	e01a      	b.n	8001cfe <HAL_DMA_Init+0x452>
 8001cc8:	2300      	movs	r3, #0
 8001cca:	e018      	b.n	8001cfe <HAL_DMA_Init+0x452>
 8001ccc:	fe10803f 	.word	0xfe10803f
 8001cd0:	5c001000 	.word	0x5c001000
 8001cd4:	ffff0000 	.word	0xffff0000
 8001cd8:	58025408 	.word	0x58025408
 8001cdc:	5802541c 	.word	0x5802541c
 8001ce0:	58025430 	.word	0x58025430
 8001ce4:	58025444 	.word	0x58025444
 8001ce8:	58025458 	.word	0x58025458
 8001cec:	5802546c 	.word	0x5802546c
 8001cf0:	58025480 	.word	0x58025480
 8001cf4:	58025494 	.word	0x58025494
 8001cf8:	fffe000f 	.word	0xfffe000f
 8001cfc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	68d2      	ldr	r2, [r2, #12]
 8001d02:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d2c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b6e      	ldr	r3, [pc, #440]	; (8001efc <HAL_DMA_Init+0x650>)
 8001d44:	4413      	add	r3, r2
 8001d46:	4a6e      	ldr	r2, [pc, #440]	; (8001f00 <HAL_DMA_Init+0x654>)
 8001d48:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	009a      	lsls	r2, r3, #2
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f001 fe95 	bl	8003a84 <DMA_CalcBaseAndBitshift>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d62:	f003 031f 	and.w	r3, r3, #31
 8001d66:	2201      	movs	r2, #1
 8001d68:	409a      	lsls	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	e008      	b.n	8001d82 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2240      	movs	r2, #64	; 0x40
 8001d74:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2203      	movs	r2, #3
 8001d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e0b7      	b.n	8001ef2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a5f      	ldr	r2, [pc, #380]	; (8001f04 <HAL_DMA_Init+0x658>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d072      	beq.n	8001e72 <HAL_DMA_Init+0x5c6>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a5d      	ldr	r2, [pc, #372]	; (8001f08 <HAL_DMA_Init+0x65c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d06d      	beq.n	8001e72 <HAL_DMA_Init+0x5c6>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a5c      	ldr	r2, [pc, #368]	; (8001f0c <HAL_DMA_Init+0x660>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d068      	beq.n	8001e72 <HAL_DMA_Init+0x5c6>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a5a      	ldr	r2, [pc, #360]	; (8001f10 <HAL_DMA_Init+0x664>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d063      	beq.n	8001e72 <HAL_DMA_Init+0x5c6>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a59      	ldr	r2, [pc, #356]	; (8001f14 <HAL_DMA_Init+0x668>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d05e      	beq.n	8001e72 <HAL_DMA_Init+0x5c6>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a57      	ldr	r2, [pc, #348]	; (8001f18 <HAL_DMA_Init+0x66c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d059      	beq.n	8001e72 <HAL_DMA_Init+0x5c6>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a56      	ldr	r2, [pc, #344]	; (8001f1c <HAL_DMA_Init+0x670>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d054      	beq.n	8001e72 <HAL_DMA_Init+0x5c6>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a54      	ldr	r2, [pc, #336]	; (8001f20 <HAL_DMA_Init+0x674>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d04f      	beq.n	8001e72 <HAL_DMA_Init+0x5c6>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a53      	ldr	r2, [pc, #332]	; (8001f24 <HAL_DMA_Init+0x678>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d04a      	beq.n	8001e72 <HAL_DMA_Init+0x5c6>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a51      	ldr	r2, [pc, #324]	; (8001f28 <HAL_DMA_Init+0x67c>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d045      	beq.n	8001e72 <HAL_DMA_Init+0x5c6>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a50      	ldr	r2, [pc, #320]	; (8001f2c <HAL_DMA_Init+0x680>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d040      	beq.n	8001e72 <HAL_DMA_Init+0x5c6>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a4e      	ldr	r2, [pc, #312]	; (8001f30 <HAL_DMA_Init+0x684>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d03b      	beq.n	8001e72 <HAL_DMA_Init+0x5c6>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a4d      	ldr	r2, [pc, #308]	; (8001f34 <HAL_DMA_Init+0x688>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d036      	beq.n	8001e72 <HAL_DMA_Init+0x5c6>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a4b      	ldr	r2, [pc, #300]	; (8001f38 <HAL_DMA_Init+0x68c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d031      	beq.n	8001e72 <HAL_DMA_Init+0x5c6>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a4a      	ldr	r2, [pc, #296]	; (8001f3c <HAL_DMA_Init+0x690>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d02c      	beq.n	8001e72 <HAL_DMA_Init+0x5c6>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a48      	ldr	r2, [pc, #288]	; (8001f40 <HAL_DMA_Init+0x694>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d027      	beq.n	8001e72 <HAL_DMA_Init+0x5c6>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a47      	ldr	r2, [pc, #284]	; (8001f44 <HAL_DMA_Init+0x698>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d022      	beq.n	8001e72 <HAL_DMA_Init+0x5c6>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a45      	ldr	r2, [pc, #276]	; (8001f48 <HAL_DMA_Init+0x69c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d01d      	beq.n	8001e72 <HAL_DMA_Init+0x5c6>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a44      	ldr	r2, [pc, #272]	; (8001f4c <HAL_DMA_Init+0x6a0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d018      	beq.n	8001e72 <HAL_DMA_Init+0x5c6>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a42      	ldr	r2, [pc, #264]	; (8001f50 <HAL_DMA_Init+0x6a4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d013      	beq.n	8001e72 <HAL_DMA_Init+0x5c6>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a41      	ldr	r2, [pc, #260]	; (8001f54 <HAL_DMA_Init+0x6a8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d00e      	beq.n	8001e72 <HAL_DMA_Init+0x5c6>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a3f      	ldr	r2, [pc, #252]	; (8001f58 <HAL_DMA_Init+0x6ac>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d009      	beq.n	8001e72 <HAL_DMA_Init+0x5c6>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a3e      	ldr	r2, [pc, #248]	; (8001f5c <HAL_DMA_Init+0x6b0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d004      	beq.n	8001e72 <HAL_DMA_Init+0x5c6>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a3c      	ldr	r2, [pc, #240]	; (8001f60 <HAL_DMA_Init+0x6b4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d101      	bne.n	8001e76 <HAL_DMA_Init+0x5ca>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <HAL_DMA_Init+0x5cc>
 8001e76:	2300      	movs	r3, #0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d032      	beq.n	8001ee2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f001 ff2f 	bl	8003ce0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b80      	cmp	r3, #128	; 0x80
 8001e88:	d102      	bne.n	8001e90 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001ea4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d010      	beq.n	8001ed0 <HAL_DMA_Init+0x624>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d80c      	bhi.n	8001ed0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f001 ffac 	bl	8003e14 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	e008      	b.n	8001ee2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	a7fdabf8 	.word	0xa7fdabf8
 8001f00:	cccccccd 	.word	0xcccccccd
 8001f04:	40020010 	.word	0x40020010
 8001f08:	40020028 	.word	0x40020028
 8001f0c:	40020040 	.word	0x40020040
 8001f10:	40020058 	.word	0x40020058
 8001f14:	40020070 	.word	0x40020070
 8001f18:	40020088 	.word	0x40020088
 8001f1c:	400200a0 	.word	0x400200a0
 8001f20:	400200b8 	.word	0x400200b8
 8001f24:	40020410 	.word	0x40020410
 8001f28:	40020428 	.word	0x40020428
 8001f2c:	40020440 	.word	0x40020440
 8001f30:	40020458 	.word	0x40020458
 8001f34:	40020470 	.word	0x40020470
 8001f38:	40020488 	.word	0x40020488
 8001f3c:	400204a0 	.word	0x400204a0
 8001f40:	400204b8 	.word	0x400204b8
 8001f44:	58025408 	.word	0x58025408
 8001f48:	5802541c 	.word	0x5802541c
 8001f4c:	58025430 	.word	0x58025430
 8001f50:	58025444 	.word	0x58025444
 8001f54:	58025458 	.word	0x58025458
 8001f58:	5802546c 	.word	0x5802546c
 8001f5c:	58025480 	.word	0x58025480
 8001f60:	58025494 	.word	0x58025494

08001f64 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
 8001f70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e226      	b.n	80023ce <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_DMA_Start_IT+0x2a>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e21f      	b.n	80023ce <HAL_DMA_Start_IT+0x46a>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	f040 820a 	bne.w	80023b8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a68      	ldr	r2, [pc, #416]	; (8002158 <HAL_DMA_Start_IT+0x1f4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d04a      	beq.n	8002052 <HAL_DMA_Start_IT+0xee>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a66      	ldr	r2, [pc, #408]	; (800215c <HAL_DMA_Start_IT+0x1f8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d045      	beq.n	8002052 <HAL_DMA_Start_IT+0xee>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a65      	ldr	r2, [pc, #404]	; (8002160 <HAL_DMA_Start_IT+0x1fc>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d040      	beq.n	8002052 <HAL_DMA_Start_IT+0xee>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a63      	ldr	r2, [pc, #396]	; (8002164 <HAL_DMA_Start_IT+0x200>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d03b      	beq.n	8002052 <HAL_DMA_Start_IT+0xee>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a62      	ldr	r2, [pc, #392]	; (8002168 <HAL_DMA_Start_IT+0x204>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d036      	beq.n	8002052 <HAL_DMA_Start_IT+0xee>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a60      	ldr	r2, [pc, #384]	; (800216c <HAL_DMA_Start_IT+0x208>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d031      	beq.n	8002052 <HAL_DMA_Start_IT+0xee>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a5f      	ldr	r2, [pc, #380]	; (8002170 <HAL_DMA_Start_IT+0x20c>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d02c      	beq.n	8002052 <HAL_DMA_Start_IT+0xee>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a5d      	ldr	r2, [pc, #372]	; (8002174 <HAL_DMA_Start_IT+0x210>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d027      	beq.n	8002052 <HAL_DMA_Start_IT+0xee>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a5c      	ldr	r2, [pc, #368]	; (8002178 <HAL_DMA_Start_IT+0x214>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d022      	beq.n	8002052 <HAL_DMA_Start_IT+0xee>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a5a      	ldr	r2, [pc, #360]	; (800217c <HAL_DMA_Start_IT+0x218>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d01d      	beq.n	8002052 <HAL_DMA_Start_IT+0xee>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a59      	ldr	r2, [pc, #356]	; (8002180 <HAL_DMA_Start_IT+0x21c>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d018      	beq.n	8002052 <HAL_DMA_Start_IT+0xee>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a57      	ldr	r2, [pc, #348]	; (8002184 <HAL_DMA_Start_IT+0x220>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d013      	beq.n	8002052 <HAL_DMA_Start_IT+0xee>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a56      	ldr	r2, [pc, #344]	; (8002188 <HAL_DMA_Start_IT+0x224>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d00e      	beq.n	8002052 <HAL_DMA_Start_IT+0xee>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a54      	ldr	r2, [pc, #336]	; (800218c <HAL_DMA_Start_IT+0x228>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d009      	beq.n	8002052 <HAL_DMA_Start_IT+0xee>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a53      	ldr	r2, [pc, #332]	; (8002190 <HAL_DMA_Start_IT+0x22c>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d004      	beq.n	8002052 <HAL_DMA_Start_IT+0xee>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a51      	ldr	r2, [pc, #324]	; (8002194 <HAL_DMA_Start_IT+0x230>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d108      	bne.n	8002064 <HAL_DMA_Start_IT+0x100>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0201 	bic.w	r2, r2, #1
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	e007      	b.n	8002074 <HAL_DMA_Start_IT+0x110>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0201 	bic.w	r2, r2, #1
 8002072:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	68b9      	ldr	r1, [r7, #8]
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f001 fb56 	bl	800372c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a34      	ldr	r2, [pc, #208]	; (8002158 <HAL_DMA_Start_IT+0x1f4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d04a      	beq.n	8002120 <HAL_DMA_Start_IT+0x1bc>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a33      	ldr	r2, [pc, #204]	; (800215c <HAL_DMA_Start_IT+0x1f8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d045      	beq.n	8002120 <HAL_DMA_Start_IT+0x1bc>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a31      	ldr	r2, [pc, #196]	; (8002160 <HAL_DMA_Start_IT+0x1fc>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d040      	beq.n	8002120 <HAL_DMA_Start_IT+0x1bc>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a30      	ldr	r2, [pc, #192]	; (8002164 <HAL_DMA_Start_IT+0x200>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d03b      	beq.n	8002120 <HAL_DMA_Start_IT+0x1bc>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a2e      	ldr	r2, [pc, #184]	; (8002168 <HAL_DMA_Start_IT+0x204>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d036      	beq.n	8002120 <HAL_DMA_Start_IT+0x1bc>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a2d      	ldr	r2, [pc, #180]	; (800216c <HAL_DMA_Start_IT+0x208>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d031      	beq.n	8002120 <HAL_DMA_Start_IT+0x1bc>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a2b      	ldr	r2, [pc, #172]	; (8002170 <HAL_DMA_Start_IT+0x20c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d02c      	beq.n	8002120 <HAL_DMA_Start_IT+0x1bc>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a2a      	ldr	r2, [pc, #168]	; (8002174 <HAL_DMA_Start_IT+0x210>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d027      	beq.n	8002120 <HAL_DMA_Start_IT+0x1bc>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a28      	ldr	r2, [pc, #160]	; (8002178 <HAL_DMA_Start_IT+0x214>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d022      	beq.n	8002120 <HAL_DMA_Start_IT+0x1bc>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a27      	ldr	r2, [pc, #156]	; (800217c <HAL_DMA_Start_IT+0x218>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d01d      	beq.n	8002120 <HAL_DMA_Start_IT+0x1bc>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a25      	ldr	r2, [pc, #148]	; (8002180 <HAL_DMA_Start_IT+0x21c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d018      	beq.n	8002120 <HAL_DMA_Start_IT+0x1bc>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a24      	ldr	r2, [pc, #144]	; (8002184 <HAL_DMA_Start_IT+0x220>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d013      	beq.n	8002120 <HAL_DMA_Start_IT+0x1bc>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a22      	ldr	r2, [pc, #136]	; (8002188 <HAL_DMA_Start_IT+0x224>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d00e      	beq.n	8002120 <HAL_DMA_Start_IT+0x1bc>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a21      	ldr	r2, [pc, #132]	; (800218c <HAL_DMA_Start_IT+0x228>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d009      	beq.n	8002120 <HAL_DMA_Start_IT+0x1bc>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a1f      	ldr	r2, [pc, #124]	; (8002190 <HAL_DMA_Start_IT+0x22c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d004      	beq.n	8002120 <HAL_DMA_Start_IT+0x1bc>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a1e      	ldr	r2, [pc, #120]	; (8002194 <HAL_DMA_Start_IT+0x230>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d101      	bne.n	8002124 <HAL_DMA_Start_IT+0x1c0>
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <HAL_DMA_Start_IT+0x1c2>
 8002124:	2300      	movs	r3, #0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d036      	beq.n	8002198 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 021e 	bic.w	r2, r3, #30
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 0216 	orr.w	r2, r2, #22
 800213c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	2b00      	cmp	r3, #0
 8002144:	d03e      	beq.n	80021c4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f042 0208 	orr.w	r2, r2, #8
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	e035      	b.n	80021c4 <HAL_DMA_Start_IT+0x260>
 8002158:	40020010 	.word	0x40020010
 800215c:	40020028 	.word	0x40020028
 8002160:	40020040 	.word	0x40020040
 8002164:	40020058 	.word	0x40020058
 8002168:	40020070 	.word	0x40020070
 800216c:	40020088 	.word	0x40020088
 8002170:	400200a0 	.word	0x400200a0
 8002174:	400200b8 	.word	0x400200b8
 8002178:	40020410 	.word	0x40020410
 800217c:	40020428 	.word	0x40020428
 8002180:	40020440 	.word	0x40020440
 8002184:	40020458 	.word	0x40020458
 8002188:	40020470 	.word	0x40020470
 800218c:	40020488 	.word	0x40020488
 8002190:	400204a0 	.word	0x400204a0
 8002194:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f023 020e 	bic.w	r2, r3, #14
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 020a 	orr.w	r2, r2, #10
 80021aa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d007      	beq.n	80021c4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0204 	orr.w	r2, r2, #4
 80021c2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a83      	ldr	r2, [pc, #524]	; (80023d8 <HAL_DMA_Start_IT+0x474>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d072      	beq.n	80022b4 <HAL_DMA_Start_IT+0x350>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a82      	ldr	r2, [pc, #520]	; (80023dc <HAL_DMA_Start_IT+0x478>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d06d      	beq.n	80022b4 <HAL_DMA_Start_IT+0x350>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a80      	ldr	r2, [pc, #512]	; (80023e0 <HAL_DMA_Start_IT+0x47c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d068      	beq.n	80022b4 <HAL_DMA_Start_IT+0x350>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a7f      	ldr	r2, [pc, #508]	; (80023e4 <HAL_DMA_Start_IT+0x480>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d063      	beq.n	80022b4 <HAL_DMA_Start_IT+0x350>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a7d      	ldr	r2, [pc, #500]	; (80023e8 <HAL_DMA_Start_IT+0x484>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d05e      	beq.n	80022b4 <HAL_DMA_Start_IT+0x350>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a7c      	ldr	r2, [pc, #496]	; (80023ec <HAL_DMA_Start_IT+0x488>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d059      	beq.n	80022b4 <HAL_DMA_Start_IT+0x350>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a7a      	ldr	r2, [pc, #488]	; (80023f0 <HAL_DMA_Start_IT+0x48c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d054      	beq.n	80022b4 <HAL_DMA_Start_IT+0x350>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a79      	ldr	r2, [pc, #484]	; (80023f4 <HAL_DMA_Start_IT+0x490>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d04f      	beq.n	80022b4 <HAL_DMA_Start_IT+0x350>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a77      	ldr	r2, [pc, #476]	; (80023f8 <HAL_DMA_Start_IT+0x494>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d04a      	beq.n	80022b4 <HAL_DMA_Start_IT+0x350>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a76      	ldr	r2, [pc, #472]	; (80023fc <HAL_DMA_Start_IT+0x498>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d045      	beq.n	80022b4 <HAL_DMA_Start_IT+0x350>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a74      	ldr	r2, [pc, #464]	; (8002400 <HAL_DMA_Start_IT+0x49c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d040      	beq.n	80022b4 <HAL_DMA_Start_IT+0x350>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a73      	ldr	r2, [pc, #460]	; (8002404 <HAL_DMA_Start_IT+0x4a0>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d03b      	beq.n	80022b4 <HAL_DMA_Start_IT+0x350>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a71      	ldr	r2, [pc, #452]	; (8002408 <HAL_DMA_Start_IT+0x4a4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d036      	beq.n	80022b4 <HAL_DMA_Start_IT+0x350>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a70      	ldr	r2, [pc, #448]	; (800240c <HAL_DMA_Start_IT+0x4a8>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d031      	beq.n	80022b4 <HAL_DMA_Start_IT+0x350>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a6e      	ldr	r2, [pc, #440]	; (8002410 <HAL_DMA_Start_IT+0x4ac>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d02c      	beq.n	80022b4 <HAL_DMA_Start_IT+0x350>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a6d      	ldr	r2, [pc, #436]	; (8002414 <HAL_DMA_Start_IT+0x4b0>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d027      	beq.n	80022b4 <HAL_DMA_Start_IT+0x350>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a6b      	ldr	r2, [pc, #428]	; (8002418 <HAL_DMA_Start_IT+0x4b4>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d022      	beq.n	80022b4 <HAL_DMA_Start_IT+0x350>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a6a      	ldr	r2, [pc, #424]	; (800241c <HAL_DMA_Start_IT+0x4b8>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d01d      	beq.n	80022b4 <HAL_DMA_Start_IT+0x350>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a68      	ldr	r2, [pc, #416]	; (8002420 <HAL_DMA_Start_IT+0x4bc>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d018      	beq.n	80022b4 <HAL_DMA_Start_IT+0x350>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a67      	ldr	r2, [pc, #412]	; (8002424 <HAL_DMA_Start_IT+0x4c0>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d013      	beq.n	80022b4 <HAL_DMA_Start_IT+0x350>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a65      	ldr	r2, [pc, #404]	; (8002428 <HAL_DMA_Start_IT+0x4c4>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00e      	beq.n	80022b4 <HAL_DMA_Start_IT+0x350>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a64      	ldr	r2, [pc, #400]	; (800242c <HAL_DMA_Start_IT+0x4c8>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d009      	beq.n	80022b4 <HAL_DMA_Start_IT+0x350>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a62      	ldr	r2, [pc, #392]	; (8002430 <HAL_DMA_Start_IT+0x4cc>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d004      	beq.n	80022b4 <HAL_DMA_Start_IT+0x350>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a61      	ldr	r2, [pc, #388]	; (8002434 <HAL_DMA_Start_IT+0x4d0>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d101      	bne.n	80022b8 <HAL_DMA_Start_IT+0x354>
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <HAL_DMA_Start_IT+0x356>
 80022b8:	2300      	movs	r3, #0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d01a      	beq.n	80022f4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d007      	beq.n	80022dc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022da:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d007      	beq.n	80022f4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022f2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a37      	ldr	r2, [pc, #220]	; (80023d8 <HAL_DMA_Start_IT+0x474>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d04a      	beq.n	8002394 <HAL_DMA_Start_IT+0x430>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a36      	ldr	r2, [pc, #216]	; (80023dc <HAL_DMA_Start_IT+0x478>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d045      	beq.n	8002394 <HAL_DMA_Start_IT+0x430>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a34      	ldr	r2, [pc, #208]	; (80023e0 <HAL_DMA_Start_IT+0x47c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d040      	beq.n	8002394 <HAL_DMA_Start_IT+0x430>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a33      	ldr	r2, [pc, #204]	; (80023e4 <HAL_DMA_Start_IT+0x480>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d03b      	beq.n	8002394 <HAL_DMA_Start_IT+0x430>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a31      	ldr	r2, [pc, #196]	; (80023e8 <HAL_DMA_Start_IT+0x484>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d036      	beq.n	8002394 <HAL_DMA_Start_IT+0x430>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a30      	ldr	r2, [pc, #192]	; (80023ec <HAL_DMA_Start_IT+0x488>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d031      	beq.n	8002394 <HAL_DMA_Start_IT+0x430>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a2e      	ldr	r2, [pc, #184]	; (80023f0 <HAL_DMA_Start_IT+0x48c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d02c      	beq.n	8002394 <HAL_DMA_Start_IT+0x430>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a2d      	ldr	r2, [pc, #180]	; (80023f4 <HAL_DMA_Start_IT+0x490>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d027      	beq.n	8002394 <HAL_DMA_Start_IT+0x430>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a2b      	ldr	r2, [pc, #172]	; (80023f8 <HAL_DMA_Start_IT+0x494>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d022      	beq.n	8002394 <HAL_DMA_Start_IT+0x430>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a2a      	ldr	r2, [pc, #168]	; (80023fc <HAL_DMA_Start_IT+0x498>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d01d      	beq.n	8002394 <HAL_DMA_Start_IT+0x430>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a28      	ldr	r2, [pc, #160]	; (8002400 <HAL_DMA_Start_IT+0x49c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d018      	beq.n	8002394 <HAL_DMA_Start_IT+0x430>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a27      	ldr	r2, [pc, #156]	; (8002404 <HAL_DMA_Start_IT+0x4a0>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d013      	beq.n	8002394 <HAL_DMA_Start_IT+0x430>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a25      	ldr	r2, [pc, #148]	; (8002408 <HAL_DMA_Start_IT+0x4a4>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d00e      	beq.n	8002394 <HAL_DMA_Start_IT+0x430>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a24      	ldr	r2, [pc, #144]	; (800240c <HAL_DMA_Start_IT+0x4a8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d009      	beq.n	8002394 <HAL_DMA_Start_IT+0x430>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a22      	ldr	r2, [pc, #136]	; (8002410 <HAL_DMA_Start_IT+0x4ac>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d004      	beq.n	8002394 <HAL_DMA_Start_IT+0x430>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a21      	ldr	r2, [pc, #132]	; (8002414 <HAL_DMA_Start_IT+0x4b0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d108      	bne.n	80023a6 <HAL_DMA_Start_IT+0x442>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0201 	orr.w	r2, r2, #1
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	e012      	b.n	80023cc <HAL_DMA_Start_IT+0x468>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f042 0201 	orr.w	r2, r2, #1
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	e009      	b.n	80023cc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80023cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40020010 	.word	0x40020010
 80023dc:	40020028 	.word	0x40020028
 80023e0:	40020040 	.word	0x40020040
 80023e4:	40020058 	.word	0x40020058
 80023e8:	40020070 	.word	0x40020070
 80023ec:	40020088 	.word	0x40020088
 80023f0:	400200a0 	.word	0x400200a0
 80023f4:	400200b8 	.word	0x400200b8
 80023f8:	40020410 	.word	0x40020410
 80023fc:	40020428 	.word	0x40020428
 8002400:	40020440 	.word	0x40020440
 8002404:	40020458 	.word	0x40020458
 8002408:	40020470 	.word	0x40020470
 800240c:	40020488 	.word	0x40020488
 8002410:	400204a0 	.word	0x400204a0
 8002414:	400204b8 	.word	0x400204b8
 8002418:	58025408 	.word	0x58025408
 800241c:	5802541c 	.word	0x5802541c
 8002420:	58025430 	.word	0x58025430
 8002424:	58025444 	.word	0x58025444
 8002428:	58025458 	.word	0x58025458
 800242c:	5802546c 	.word	0x5802546c
 8002430:	58025480 	.word	0x58025480
 8002434:	58025494 	.word	0x58025494

08002438 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e205      	b.n	8002856 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d004      	beq.n	8002460 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2280      	movs	r2, #128	; 0x80
 800245a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e1fa      	b.n	8002856 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a8c      	ldr	r2, [pc, #560]	; (8002698 <HAL_DMA_Abort_IT+0x260>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d04a      	beq.n	8002500 <HAL_DMA_Abort_IT+0xc8>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a8b      	ldr	r2, [pc, #556]	; (800269c <HAL_DMA_Abort_IT+0x264>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d045      	beq.n	8002500 <HAL_DMA_Abort_IT+0xc8>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a89      	ldr	r2, [pc, #548]	; (80026a0 <HAL_DMA_Abort_IT+0x268>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d040      	beq.n	8002500 <HAL_DMA_Abort_IT+0xc8>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a88      	ldr	r2, [pc, #544]	; (80026a4 <HAL_DMA_Abort_IT+0x26c>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d03b      	beq.n	8002500 <HAL_DMA_Abort_IT+0xc8>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a86      	ldr	r2, [pc, #536]	; (80026a8 <HAL_DMA_Abort_IT+0x270>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d036      	beq.n	8002500 <HAL_DMA_Abort_IT+0xc8>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a85      	ldr	r2, [pc, #532]	; (80026ac <HAL_DMA_Abort_IT+0x274>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d031      	beq.n	8002500 <HAL_DMA_Abort_IT+0xc8>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a83      	ldr	r2, [pc, #524]	; (80026b0 <HAL_DMA_Abort_IT+0x278>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d02c      	beq.n	8002500 <HAL_DMA_Abort_IT+0xc8>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a82      	ldr	r2, [pc, #520]	; (80026b4 <HAL_DMA_Abort_IT+0x27c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d027      	beq.n	8002500 <HAL_DMA_Abort_IT+0xc8>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a80      	ldr	r2, [pc, #512]	; (80026b8 <HAL_DMA_Abort_IT+0x280>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d022      	beq.n	8002500 <HAL_DMA_Abort_IT+0xc8>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a7f      	ldr	r2, [pc, #508]	; (80026bc <HAL_DMA_Abort_IT+0x284>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d01d      	beq.n	8002500 <HAL_DMA_Abort_IT+0xc8>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a7d      	ldr	r2, [pc, #500]	; (80026c0 <HAL_DMA_Abort_IT+0x288>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d018      	beq.n	8002500 <HAL_DMA_Abort_IT+0xc8>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a7c      	ldr	r2, [pc, #496]	; (80026c4 <HAL_DMA_Abort_IT+0x28c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d013      	beq.n	8002500 <HAL_DMA_Abort_IT+0xc8>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a7a      	ldr	r2, [pc, #488]	; (80026c8 <HAL_DMA_Abort_IT+0x290>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d00e      	beq.n	8002500 <HAL_DMA_Abort_IT+0xc8>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a79      	ldr	r2, [pc, #484]	; (80026cc <HAL_DMA_Abort_IT+0x294>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d009      	beq.n	8002500 <HAL_DMA_Abort_IT+0xc8>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a77      	ldr	r2, [pc, #476]	; (80026d0 <HAL_DMA_Abort_IT+0x298>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d004      	beq.n	8002500 <HAL_DMA_Abort_IT+0xc8>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a76      	ldr	r2, [pc, #472]	; (80026d4 <HAL_DMA_Abort_IT+0x29c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d101      	bne.n	8002504 <HAL_DMA_Abort_IT+0xcc>
 8002500:	2301      	movs	r3, #1
 8002502:	e000      	b.n	8002506 <HAL_DMA_Abort_IT+0xce>
 8002504:	2300      	movs	r3, #0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d065      	beq.n	80025d6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2204      	movs	r2, #4
 800250e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a60      	ldr	r2, [pc, #384]	; (8002698 <HAL_DMA_Abort_IT+0x260>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d04a      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x17a>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a5e      	ldr	r2, [pc, #376]	; (800269c <HAL_DMA_Abort_IT+0x264>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d045      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x17a>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a5d      	ldr	r2, [pc, #372]	; (80026a0 <HAL_DMA_Abort_IT+0x268>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d040      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x17a>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a5b      	ldr	r2, [pc, #364]	; (80026a4 <HAL_DMA_Abort_IT+0x26c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d03b      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x17a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a5a      	ldr	r2, [pc, #360]	; (80026a8 <HAL_DMA_Abort_IT+0x270>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d036      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x17a>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a58      	ldr	r2, [pc, #352]	; (80026ac <HAL_DMA_Abort_IT+0x274>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d031      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x17a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a57      	ldr	r2, [pc, #348]	; (80026b0 <HAL_DMA_Abort_IT+0x278>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d02c      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x17a>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a55      	ldr	r2, [pc, #340]	; (80026b4 <HAL_DMA_Abort_IT+0x27c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d027      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x17a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a54      	ldr	r2, [pc, #336]	; (80026b8 <HAL_DMA_Abort_IT+0x280>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d022      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x17a>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a52      	ldr	r2, [pc, #328]	; (80026bc <HAL_DMA_Abort_IT+0x284>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d01d      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x17a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a51      	ldr	r2, [pc, #324]	; (80026c0 <HAL_DMA_Abort_IT+0x288>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d018      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x17a>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a4f      	ldr	r2, [pc, #316]	; (80026c4 <HAL_DMA_Abort_IT+0x28c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d013      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x17a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a4e      	ldr	r2, [pc, #312]	; (80026c8 <HAL_DMA_Abort_IT+0x290>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d00e      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x17a>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a4c      	ldr	r2, [pc, #304]	; (80026cc <HAL_DMA_Abort_IT+0x294>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d009      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x17a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a4b      	ldr	r2, [pc, #300]	; (80026d0 <HAL_DMA_Abort_IT+0x298>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d004      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x17a>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a49      	ldr	r2, [pc, #292]	; (80026d4 <HAL_DMA_Abort_IT+0x29c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d108      	bne.n	80025c4 <HAL_DMA_Abort_IT+0x18c>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0201 	bic.w	r2, r2, #1
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	e147      	b.n	8002854 <HAL_DMA_Abort_IT+0x41c>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0201 	bic.w	r2, r2, #1
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	e13e      	b.n	8002854 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 020e 	bic.w	r2, r2, #14
 80025e4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a2b      	ldr	r2, [pc, #172]	; (8002698 <HAL_DMA_Abort_IT+0x260>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d04a      	beq.n	8002686 <HAL_DMA_Abort_IT+0x24e>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a29      	ldr	r2, [pc, #164]	; (800269c <HAL_DMA_Abort_IT+0x264>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d045      	beq.n	8002686 <HAL_DMA_Abort_IT+0x24e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a28      	ldr	r2, [pc, #160]	; (80026a0 <HAL_DMA_Abort_IT+0x268>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d040      	beq.n	8002686 <HAL_DMA_Abort_IT+0x24e>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a26      	ldr	r2, [pc, #152]	; (80026a4 <HAL_DMA_Abort_IT+0x26c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d03b      	beq.n	8002686 <HAL_DMA_Abort_IT+0x24e>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a25      	ldr	r2, [pc, #148]	; (80026a8 <HAL_DMA_Abort_IT+0x270>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d036      	beq.n	8002686 <HAL_DMA_Abort_IT+0x24e>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a23      	ldr	r2, [pc, #140]	; (80026ac <HAL_DMA_Abort_IT+0x274>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d031      	beq.n	8002686 <HAL_DMA_Abort_IT+0x24e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a22      	ldr	r2, [pc, #136]	; (80026b0 <HAL_DMA_Abort_IT+0x278>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d02c      	beq.n	8002686 <HAL_DMA_Abort_IT+0x24e>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a20      	ldr	r2, [pc, #128]	; (80026b4 <HAL_DMA_Abort_IT+0x27c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d027      	beq.n	8002686 <HAL_DMA_Abort_IT+0x24e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a1f      	ldr	r2, [pc, #124]	; (80026b8 <HAL_DMA_Abort_IT+0x280>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d022      	beq.n	8002686 <HAL_DMA_Abort_IT+0x24e>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a1d      	ldr	r2, [pc, #116]	; (80026bc <HAL_DMA_Abort_IT+0x284>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d01d      	beq.n	8002686 <HAL_DMA_Abort_IT+0x24e>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a1c      	ldr	r2, [pc, #112]	; (80026c0 <HAL_DMA_Abort_IT+0x288>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d018      	beq.n	8002686 <HAL_DMA_Abort_IT+0x24e>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a1a      	ldr	r2, [pc, #104]	; (80026c4 <HAL_DMA_Abort_IT+0x28c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d013      	beq.n	8002686 <HAL_DMA_Abort_IT+0x24e>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a19      	ldr	r2, [pc, #100]	; (80026c8 <HAL_DMA_Abort_IT+0x290>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d00e      	beq.n	8002686 <HAL_DMA_Abort_IT+0x24e>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a17      	ldr	r2, [pc, #92]	; (80026cc <HAL_DMA_Abort_IT+0x294>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d009      	beq.n	8002686 <HAL_DMA_Abort_IT+0x24e>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a16      	ldr	r2, [pc, #88]	; (80026d0 <HAL_DMA_Abort_IT+0x298>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d004      	beq.n	8002686 <HAL_DMA_Abort_IT+0x24e>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a14      	ldr	r2, [pc, #80]	; (80026d4 <HAL_DMA_Abort_IT+0x29c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d128      	bne.n	80026d8 <HAL_DMA_Abort_IT+0x2a0>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0201 	bic.w	r2, r2, #1
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	e027      	b.n	80026e8 <HAL_DMA_Abort_IT+0x2b0>
 8002698:	40020010 	.word	0x40020010
 800269c:	40020028 	.word	0x40020028
 80026a0:	40020040 	.word	0x40020040
 80026a4:	40020058 	.word	0x40020058
 80026a8:	40020070 	.word	0x40020070
 80026ac:	40020088 	.word	0x40020088
 80026b0:	400200a0 	.word	0x400200a0
 80026b4:	400200b8 	.word	0x400200b8
 80026b8:	40020410 	.word	0x40020410
 80026bc:	40020428 	.word	0x40020428
 80026c0:	40020440 	.word	0x40020440
 80026c4:	40020458 	.word	0x40020458
 80026c8:	40020470 	.word	0x40020470
 80026cc:	40020488 	.word	0x40020488
 80026d0:	400204a0 	.word	0x400204a0
 80026d4:	400204b8 	.word	0x400204b8
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0201 	bic.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a5c      	ldr	r2, [pc, #368]	; (8002860 <HAL_DMA_Abort_IT+0x428>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d072      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x3a0>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a5b      	ldr	r2, [pc, #364]	; (8002864 <HAL_DMA_Abort_IT+0x42c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d06d      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x3a0>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a59      	ldr	r2, [pc, #356]	; (8002868 <HAL_DMA_Abort_IT+0x430>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d068      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x3a0>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a58      	ldr	r2, [pc, #352]	; (800286c <HAL_DMA_Abort_IT+0x434>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d063      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x3a0>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a56      	ldr	r2, [pc, #344]	; (8002870 <HAL_DMA_Abort_IT+0x438>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d05e      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x3a0>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a55      	ldr	r2, [pc, #340]	; (8002874 <HAL_DMA_Abort_IT+0x43c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d059      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x3a0>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a53      	ldr	r2, [pc, #332]	; (8002878 <HAL_DMA_Abort_IT+0x440>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d054      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x3a0>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a52      	ldr	r2, [pc, #328]	; (800287c <HAL_DMA_Abort_IT+0x444>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d04f      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x3a0>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a50      	ldr	r2, [pc, #320]	; (8002880 <HAL_DMA_Abort_IT+0x448>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d04a      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x3a0>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a4f      	ldr	r2, [pc, #316]	; (8002884 <HAL_DMA_Abort_IT+0x44c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d045      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x3a0>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a4d      	ldr	r2, [pc, #308]	; (8002888 <HAL_DMA_Abort_IT+0x450>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d040      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x3a0>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a4c      	ldr	r2, [pc, #304]	; (800288c <HAL_DMA_Abort_IT+0x454>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d03b      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x3a0>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a4a      	ldr	r2, [pc, #296]	; (8002890 <HAL_DMA_Abort_IT+0x458>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d036      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x3a0>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a49      	ldr	r2, [pc, #292]	; (8002894 <HAL_DMA_Abort_IT+0x45c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d031      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x3a0>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a47      	ldr	r2, [pc, #284]	; (8002898 <HAL_DMA_Abort_IT+0x460>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d02c      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x3a0>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a46      	ldr	r2, [pc, #280]	; (800289c <HAL_DMA_Abort_IT+0x464>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d027      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x3a0>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a44      	ldr	r2, [pc, #272]	; (80028a0 <HAL_DMA_Abort_IT+0x468>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d022      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x3a0>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a43      	ldr	r2, [pc, #268]	; (80028a4 <HAL_DMA_Abort_IT+0x46c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d01d      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x3a0>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a41      	ldr	r2, [pc, #260]	; (80028a8 <HAL_DMA_Abort_IT+0x470>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d018      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x3a0>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a40      	ldr	r2, [pc, #256]	; (80028ac <HAL_DMA_Abort_IT+0x474>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d013      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x3a0>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a3e      	ldr	r2, [pc, #248]	; (80028b0 <HAL_DMA_Abort_IT+0x478>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d00e      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x3a0>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a3d      	ldr	r2, [pc, #244]	; (80028b4 <HAL_DMA_Abort_IT+0x47c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d009      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x3a0>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a3b      	ldr	r2, [pc, #236]	; (80028b8 <HAL_DMA_Abort_IT+0x480>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d004      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x3a0>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a3a      	ldr	r2, [pc, #232]	; (80028bc <HAL_DMA_Abort_IT+0x484>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d101      	bne.n	80027dc <HAL_DMA_Abort_IT+0x3a4>
 80027d8:	2301      	movs	r3, #1
 80027da:	e000      	b.n	80027de <HAL_DMA_Abort_IT+0x3a6>
 80027dc:	2300      	movs	r3, #0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d028      	beq.n	8002834 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027f0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	2201      	movs	r2, #1
 8002802:	409a      	lsls	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002810:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00c      	beq.n	8002834 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002824:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002828:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002832:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40020010 	.word	0x40020010
 8002864:	40020028 	.word	0x40020028
 8002868:	40020040 	.word	0x40020040
 800286c:	40020058 	.word	0x40020058
 8002870:	40020070 	.word	0x40020070
 8002874:	40020088 	.word	0x40020088
 8002878:	400200a0 	.word	0x400200a0
 800287c:	400200b8 	.word	0x400200b8
 8002880:	40020410 	.word	0x40020410
 8002884:	40020428 	.word	0x40020428
 8002888:	40020440 	.word	0x40020440
 800288c:	40020458 	.word	0x40020458
 8002890:	40020470 	.word	0x40020470
 8002894:	40020488 	.word	0x40020488
 8002898:	400204a0 	.word	0x400204a0
 800289c:	400204b8 	.word	0x400204b8
 80028a0:	58025408 	.word	0x58025408
 80028a4:	5802541c 	.word	0x5802541c
 80028a8:	58025430 	.word	0x58025430
 80028ac:	58025444 	.word	0x58025444
 80028b0:	58025458 	.word	0x58025458
 80028b4:	5802546c 	.word	0x5802546c
 80028b8:	58025480 	.word	0x58025480
 80028bc:	58025494 	.word	0x58025494

080028c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08a      	sub	sp, #40	; 0x28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028cc:	4b67      	ldr	r3, [pc, #412]	; (8002a6c <HAL_DMA_IRQHandler+0x1ac>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a67      	ldr	r2, [pc, #412]	; (8002a70 <HAL_DMA_IRQHandler+0x1b0>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	0a9b      	lsrs	r3, r3, #10
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028de:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a5f      	ldr	r2, [pc, #380]	; (8002a74 <HAL_DMA_IRQHandler+0x1b4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d04a      	beq.n	8002992 <HAL_DMA_IRQHandler+0xd2>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a5d      	ldr	r2, [pc, #372]	; (8002a78 <HAL_DMA_IRQHandler+0x1b8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d045      	beq.n	8002992 <HAL_DMA_IRQHandler+0xd2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a5c      	ldr	r2, [pc, #368]	; (8002a7c <HAL_DMA_IRQHandler+0x1bc>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d040      	beq.n	8002992 <HAL_DMA_IRQHandler+0xd2>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a5a      	ldr	r2, [pc, #360]	; (8002a80 <HAL_DMA_IRQHandler+0x1c0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d03b      	beq.n	8002992 <HAL_DMA_IRQHandler+0xd2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a59      	ldr	r2, [pc, #356]	; (8002a84 <HAL_DMA_IRQHandler+0x1c4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d036      	beq.n	8002992 <HAL_DMA_IRQHandler+0xd2>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a57      	ldr	r2, [pc, #348]	; (8002a88 <HAL_DMA_IRQHandler+0x1c8>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d031      	beq.n	8002992 <HAL_DMA_IRQHandler+0xd2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a56      	ldr	r2, [pc, #344]	; (8002a8c <HAL_DMA_IRQHandler+0x1cc>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d02c      	beq.n	8002992 <HAL_DMA_IRQHandler+0xd2>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a54      	ldr	r2, [pc, #336]	; (8002a90 <HAL_DMA_IRQHandler+0x1d0>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d027      	beq.n	8002992 <HAL_DMA_IRQHandler+0xd2>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a53      	ldr	r2, [pc, #332]	; (8002a94 <HAL_DMA_IRQHandler+0x1d4>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d022      	beq.n	8002992 <HAL_DMA_IRQHandler+0xd2>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a51      	ldr	r2, [pc, #324]	; (8002a98 <HAL_DMA_IRQHandler+0x1d8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d01d      	beq.n	8002992 <HAL_DMA_IRQHandler+0xd2>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a50      	ldr	r2, [pc, #320]	; (8002a9c <HAL_DMA_IRQHandler+0x1dc>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d018      	beq.n	8002992 <HAL_DMA_IRQHandler+0xd2>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a4e      	ldr	r2, [pc, #312]	; (8002aa0 <HAL_DMA_IRQHandler+0x1e0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d013      	beq.n	8002992 <HAL_DMA_IRQHandler+0xd2>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a4d      	ldr	r2, [pc, #308]	; (8002aa4 <HAL_DMA_IRQHandler+0x1e4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d00e      	beq.n	8002992 <HAL_DMA_IRQHandler+0xd2>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a4b      	ldr	r2, [pc, #300]	; (8002aa8 <HAL_DMA_IRQHandler+0x1e8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d009      	beq.n	8002992 <HAL_DMA_IRQHandler+0xd2>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a4a      	ldr	r2, [pc, #296]	; (8002aac <HAL_DMA_IRQHandler+0x1ec>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d004      	beq.n	8002992 <HAL_DMA_IRQHandler+0xd2>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a48      	ldr	r2, [pc, #288]	; (8002ab0 <HAL_DMA_IRQHandler+0x1f0>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d101      	bne.n	8002996 <HAL_DMA_IRQHandler+0xd6>
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <HAL_DMA_IRQHandler+0xd8>
 8002996:	2300      	movs	r3, #0
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 842b 	beq.w	80031f4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a2:	f003 031f 	and.w	r3, r3, #31
 80029a6:	2208      	movs	r2, #8
 80029a8:	409a      	lsls	r2, r3
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 80a2 	beq.w	8002af8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a2e      	ldr	r2, [pc, #184]	; (8002a74 <HAL_DMA_IRQHandler+0x1b4>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d04a      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x194>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a2d      	ldr	r2, [pc, #180]	; (8002a78 <HAL_DMA_IRQHandler+0x1b8>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d045      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x194>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a2b      	ldr	r2, [pc, #172]	; (8002a7c <HAL_DMA_IRQHandler+0x1bc>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d040      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x194>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a2a      	ldr	r2, [pc, #168]	; (8002a80 <HAL_DMA_IRQHandler+0x1c0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d03b      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x194>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a28      	ldr	r2, [pc, #160]	; (8002a84 <HAL_DMA_IRQHandler+0x1c4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d036      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x194>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a27      	ldr	r2, [pc, #156]	; (8002a88 <HAL_DMA_IRQHandler+0x1c8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d031      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x194>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a25      	ldr	r2, [pc, #148]	; (8002a8c <HAL_DMA_IRQHandler+0x1cc>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d02c      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x194>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a24      	ldr	r2, [pc, #144]	; (8002a90 <HAL_DMA_IRQHandler+0x1d0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d027      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x194>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a22      	ldr	r2, [pc, #136]	; (8002a94 <HAL_DMA_IRQHandler+0x1d4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d022      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x194>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a21      	ldr	r2, [pc, #132]	; (8002a98 <HAL_DMA_IRQHandler+0x1d8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d01d      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x194>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a1f      	ldr	r2, [pc, #124]	; (8002a9c <HAL_DMA_IRQHandler+0x1dc>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d018      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x194>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a1e      	ldr	r2, [pc, #120]	; (8002aa0 <HAL_DMA_IRQHandler+0x1e0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d013      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x194>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a1c      	ldr	r2, [pc, #112]	; (8002aa4 <HAL_DMA_IRQHandler+0x1e4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00e      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x194>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a1b      	ldr	r2, [pc, #108]	; (8002aa8 <HAL_DMA_IRQHandler+0x1e8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d009      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x194>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a19      	ldr	r2, [pc, #100]	; (8002aac <HAL_DMA_IRQHandler+0x1ec>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d004      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x194>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a18      	ldr	r2, [pc, #96]	; (8002ab0 <HAL_DMA_IRQHandler+0x1f0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d12f      	bne.n	8002ab4 <HAL_DMA_IRQHandler+0x1f4>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	bf14      	ite	ne
 8002a62:	2301      	movne	r3, #1
 8002a64:	2300      	moveq	r3, #0
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	e02e      	b.n	8002ac8 <HAL_DMA_IRQHandler+0x208>
 8002a6a:	bf00      	nop
 8002a6c:	24000000 	.word	0x24000000
 8002a70:	1b4e81b5 	.word	0x1b4e81b5
 8002a74:	40020010 	.word	0x40020010
 8002a78:	40020028 	.word	0x40020028
 8002a7c:	40020040 	.word	0x40020040
 8002a80:	40020058 	.word	0x40020058
 8002a84:	40020070 	.word	0x40020070
 8002a88:	40020088 	.word	0x40020088
 8002a8c:	400200a0 	.word	0x400200a0
 8002a90:	400200b8 	.word	0x400200b8
 8002a94:	40020410 	.word	0x40020410
 8002a98:	40020428 	.word	0x40020428
 8002a9c:	40020440 	.word	0x40020440
 8002aa0:	40020458 	.word	0x40020458
 8002aa4:	40020470 	.word	0x40020470
 8002aa8:	40020488 	.word	0x40020488
 8002aac:	400204a0 	.word	0x400204a0
 8002ab0:	400204b8 	.word	0x400204b8
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	bf14      	ite	ne
 8002ac2:	2301      	movne	r3, #1
 8002ac4:	2300      	moveq	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d015      	beq.n	8002af8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0204 	bic.w	r2, r2, #4
 8002ada:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	2208      	movs	r2, #8
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af0:	f043 0201 	orr.w	r2, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	fa22 f303 	lsr.w	r3, r2, r3
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d06e      	beq.n	8002bec <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a69      	ldr	r2, [pc, #420]	; (8002cb8 <HAL_DMA_IRQHandler+0x3f8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d04a      	beq.n	8002bae <HAL_DMA_IRQHandler+0x2ee>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a67      	ldr	r2, [pc, #412]	; (8002cbc <HAL_DMA_IRQHandler+0x3fc>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d045      	beq.n	8002bae <HAL_DMA_IRQHandler+0x2ee>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a66      	ldr	r2, [pc, #408]	; (8002cc0 <HAL_DMA_IRQHandler+0x400>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d040      	beq.n	8002bae <HAL_DMA_IRQHandler+0x2ee>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a64      	ldr	r2, [pc, #400]	; (8002cc4 <HAL_DMA_IRQHandler+0x404>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d03b      	beq.n	8002bae <HAL_DMA_IRQHandler+0x2ee>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a63      	ldr	r2, [pc, #396]	; (8002cc8 <HAL_DMA_IRQHandler+0x408>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d036      	beq.n	8002bae <HAL_DMA_IRQHandler+0x2ee>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a61      	ldr	r2, [pc, #388]	; (8002ccc <HAL_DMA_IRQHandler+0x40c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d031      	beq.n	8002bae <HAL_DMA_IRQHandler+0x2ee>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a60      	ldr	r2, [pc, #384]	; (8002cd0 <HAL_DMA_IRQHandler+0x410>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d02c      	beq.n	8002bae <HAL_DMA_IRQHandler+0x2ee>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a5e      	ldr	r2, [pc, #376]	; (8002cd4 <HAL_DMA_IRQHandler+0x414>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d027      	beq.n	8002bae <HAL_DMA_IRQHandler+0x2ee>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a5d      	ldr	r2, [pc, #372]	; (8002cd8 <HAL_DMA_IRQHandler+0x418>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d022      	beq.n	8002bae <HAL_DMA_IRQHandler+0x2ee>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a5b      	ldr	r2, [pc, #364]	; (8002cdc <HAL_DMA_IRQHandler+0x41c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d01d      	beq.n	8002bae <HAL_DMA_IRQHandler+0x2ee>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a5a      	ldr	r2, [pc, #360]	; (8002ce0 <HAL_DMA_IRQHandler+0x420>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d018      	beq.n	8002bae <HAL_DMA_IRQHandler+0x2ee>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a58      	ldr	r2, [pc, #352]	; (8002ce4 <HAL_DMA_IRQHandler+0x424>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d013      	beq.n	8002bae <HAL_DMA_IRQHandler+0x2ee>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a57      	ldr	r2, [pc, #348]	; (8002ce8 <HAL_DMA_IRQHandler+0x428>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d00e      	beq.n	8002bae <HAL_DMA_IRQHandler+0x2ee>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a55      	ldr	r2, [pc, #340]	; (8002cec <HAL_DMA_IRQHandler+0x42c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d009      	beq.n	8002bae <HAL_DMA_IRQHandler+0x2ee>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a54      	ldr	r2, [pc, #336]	; (8002cf0 <HAL_DMA_IRQHandler+0x430>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d004      	beq.n	8002bae <HAL_DMA_IRQHandler+0x2ee>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a52      	ldr	r2, [pc, #328]	; (8002cf4 <HAL_DMA_IRQHandler+0x434>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d10a      	bne.n	8002bc4 <HAL_DMA_IRQHandler+0x304>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	bf14      	ite	ne
 8002bbc:	2301      	movne	r3, #1
 8002bbe:	2300      	moveq	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	e003      	b.n	8002bcc <HAL_DMA_IRQHandler+0x30c>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00d      	beq.n	8002bec <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd4:	f003 031f 	and.w	r3, r3, #31
 8002bd8:	2201      	movs	r2, #1
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be4:	f043 0202 	orr.w	r2, r3, #2
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf0:	f003 031f 	and.w	r3, r3, #31
 8002bf4:	2204      	movs	r2, #4
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 808f 	beq.w	8002d20 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a2c      	ldr	r2, [pc, #176]	; (8002cb8 <HAL_DMA_IRQHandler+0x3f8>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d04a      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x3e2>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a2a      	ldr	r2, [pc, #168]	; (8002cbc <HAL_DMA_IRQHandler+0x3fc>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d045      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x3e2>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a29      	ldr	r2, [pc, #164]	; (8002cc0 <HAL_DMA_IRQHandler+0x400>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d040      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x3e2>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a27      	ldr	r2, [pc, #156]	; (8002cc4 <HAL_DMA_IRQHandler+0x404>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d03b      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x3e2>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a26      	ldr	r2, [pc, #152]	; (8002cc8 <HAL_DMA_IRQHandler+0x408>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d036      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x3e2>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a24      	ldr	r2, [pc, #144]	; (8002ccc <HAL_DMA_IRQHandler+0x40c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d031      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x3e2>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a23      	ldr	r2, [pc, #140]	; (8002cd0 <HAL_DMA_IRQHandler+0x410>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d02c      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x3e2>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a21      	ldr	r2, [pc, #132]	; (8002cd4 <HAL_DMA_IRQHandler+0x414>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d027      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x3e2>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a20      	ldr	r2, [pc, #128]	; (8002cd8 <HAL_DMA_IRQHandler+0x418>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d022      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x3e2>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a1e      	ldr	r2, [pc, #120]	; (8002cdc <HAL_DMA_IRQHandler+0x41c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d01d      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x3e2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a1d      	ldr	r2, [pc, #116]	; (8002ce0 <HAL_DMA_IRQHandler+0x420>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d018      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x3e2>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a1b      	ldr	r2, [pc, #108]	; (8002ce4 <HAL_DMA_IRQHandler+0x424>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d013      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x3e2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a1a      	ldr	r2, [pc, #104]	; (8002ce8 <HAL_DMA_IRQHandler+0x428>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d00e      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x3e2>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a18      	ldr	r2, [pc, #96]	; (8002cec <HAL_DMA_IRQHandler+0x42c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d009      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x3e2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a17      	ldr	r2, [pc, #92]	; (8002cf0 <HAL_DMA_IRQHandler+0x430>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d004      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x3e2>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a15      	ldr	r2, [pc, #84]	; (8002cf4 <HAL_DMA_IRQHandler+0x434>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d12a      	bne.n	8002cf8 <HAL_DMA_IRQHandler+0x438>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	bf14      	ite	ne
 8002cb0:	2301      	movne	r3, #1
 8002cb2:	2300      	moveq	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	e023      	b.n	8002d00 <HAL_DMA_IRQHandler+0x440>
 8002cb8:	40020010 	.word	0x40020010
 8002cbc:	40020028 	.word	0x40020028
 8002cc0:	40020040 	.word	0x40020040
 8002cc4:	40020058 	.word	0x40020058
 8002cc8:	40020070 	.word	0x40020070
 8002ccc:	40020088 	.word	0x40020088
 8002cd0:	400200a0 	.word	0x400200a0
 8002cd4:	400200b8 	.word	0x400200b8
 8002cd8:	40020410 	.word	0x40020410
 8002cdc:	40020428 	.word	0x40020428
 8002ce0:	40020440 	.word	0x40020440
 8002ce4:	40020458 	.word	0x40020458
 8002ce8:	40020470 	.word	0x40020470
 8002cec:	40020488 	.word	0x40020488
 8002cf0:	400204a0 	.word	0x400204a0
 8002cf4:	400204b8 	.word	0x400204b8
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2300      	movs	r3, #0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00d      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d08:	f003 031f 	and.w	r3, r3, #31
 8002d0c:	2204      	movs	r2, #4
 8002d0e:	409a      	lsls	r2, r3
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d18:	f043 0204 	orr.w	r2, r3, #4
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d24:	f003 031f 	and.w	r3, r3, #31
 8002d28:	2210      	movs	r2, #16
 8002d2a:	409a      	lsls	r2, r3
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 80a6 	beq.w	8002e82 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a85      	ldr	r2, [pc, #532]	; (8002f50 <HAL_DMA_IRQHandler+0x690>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d04a      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x516>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a83      	ldr	r2, [pc, #524]	; (8002f54 <HAL_DMA_IRQHandler+0x694>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d045      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x516>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a82      	ldr	r2, [pc, #520]	; (8002f58 <HAL_DMA_IRQHandler+0x698>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d040      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x516>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a80      	ldr	r2, [pc, #512]	; (8002f5c <HAL_DMA_IRQHandler+0x69c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d03b      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x516>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a7f      	ldr	r2, [pc, #508]	; (8002f60 <HAL_DMA_IRQHandler+0x6a0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d036      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x516>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a7d      	ldr	r2, [pc, #500]	; (8002f64 <HAL_DMA_IRQHandler+0x6a4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d031      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x516>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a7c      	ldr	r2, [pc, #496]	; (8002f68 <HAL_DMA_IRQHandler+0x6a8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d02c      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x516>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a7a      	ldr	r2, [pc, #488]	; (8002f6c <HAL_DMA_IRQHandler+0x6ac>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d027      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x516>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a79      	ldr	r2, [pc, #484]	; (8002f70 <HAL_DMA_IRQHandler+0x6b0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d022      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x516>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a77      	ldr	r2, [pc, #476]	; (8002f74 <HAL_DMA_IRQHandler+0x6b4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d01d      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x516>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a76      	ldr	r2, [pc, #472]	; (8002f78 <HAL_DMA_IRQHandler+0x6b8>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d018      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x516>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a74      	ldr	r2, [pc, #464]	; (8002f7c <HAL_DMA_IRQHandler+0x6bc>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d013      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x516>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a73      	ldr	r2, [pc, #460]	; (8002f80 <HAL_DMA_IRQHandler+0x6c0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d00e      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x516>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a71      	ldr	r2, [pc, #452]	; (8002f84 <HAL_DMA_IRQHandler+0x6c4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d009      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x516>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a70      	ldr	r2, [pc, #448]	; (8002f88 <HAL_DMA_IRQHandler+0x6c8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d004      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x516>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a6e      	ldr	r2, [pc, #440]	; (8002f8c <HAL_DMA_IRQHandler+0x6cc>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d10a      	bne.n	8002dec <HAL_DMA_IRQHandler+0x52c>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0308 	and.w	r3, r3, #8
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	bf14      	ite	ne
 8002de4:	2301      	movne	r3, #1
 8002de6:	2300      	moveq	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	e009      	b.n	8002e00 <HAL_DMA_IRQHandler+0x540>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	bf14      	ite	ne
 8002dfa:	2301      	movne	r3, #1
 8002dfc:	2300      	moveq	r3, #0
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d03e      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	2210      	movs	r2, #16
 8002e0e:	409a      	lsls	r2, r3
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d018      	beq.n	8002e54 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d108      	bne.n	8002e42 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d024      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	4798      	blx	r3
 8002e40:	e01f      	b.n	8002e82 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d01b      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	4798      	blx	r3
 8002e52:	e016      	b.n	8002e82 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d107      	bne.n	8002e72 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0208 	bic.w	r2, r2, #8
 8002e70:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e86:	f003 031f 	and.w	r3, r3, #31
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	409a      	lsls	r2, r3
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 8110 	beq.w	80030b8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a2c      	ldr	r2, [pc, #176]	; (8002f50 <HAL_DMA_IRQHandler+0x690>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d04a      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x678>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a2b      	ldr	r2, [pc, #172]	; (8002f54 <HAL_DMA_IRQHandler+0x694>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d045      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x678>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a29      	ldr	r2, [pc, #164]	; (8002f58 <HAL_DMA_IRQHandler+0x698>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d040      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x678>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a28      	ldr	r2, [pc, #160]	; (8002f5c <HAL_DMA_IRQHandler+0x69c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d03b      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x678>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a26      	ldr	r2, [pc, #152]	; (8002f60 <HAL_DMA_IRQHandler+0x6a0>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d036      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x678>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a25      	ldr	r2, [pc, #148]	; (8002f64 <HAL_DMA_IRQHandler+0x6a4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d031      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x678>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a23      	ldr	r2, [pc, #140]	; (8002f68 <HAL_DMA_IRQHandler+0x6a8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d02c      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x678>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a22      	ldr	r2, [pc, #136]	; (8002f6c <HAL_DMA_IRQHandler+0x6ac>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d027      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x678>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a20      	ldr	r2, [pc, #128]	; (8002f70 <HAL_DMA_IRQHandler+0x6b0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d022      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x678>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a1f      	ldr	r2, [pc, #124]	; (8002f74 <HAL_DMA_IRQHandler+0x6b4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d01d      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x678>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a1d      	ldr	r2, [pc, #116]	; (8002f78 <HAL_DMA_IRQHandler+0x6b8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d018      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x678>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a1c      	ldr	r2, [pc, #112]	; (8002f7c <HAL_DMA_IRQHandler+0x6bc>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d013      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x678>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a1a      	ldr	r2, [pc, #104]	; (8002f80 <HAL_DMA_IRQHandler+0x6c0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00e      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x678>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a19      	ldr	r2, [pc, #100]	; (8002f84 <HAL_DMA_IRQHandler+0x6c4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d009      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x678>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a17      	ldr	r2, [pc, #92]	; (8002f88 <HAL_DMA_IRQHandler+0x6c8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d004      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x678>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a16      	ldr	r2, [pc, #88]	; (8002f8c <HAL_DMA_IRQHandler+0x6cc>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d12b      	bne.n	8002f90 <HAL_DMA_IRQHandler+0x6d0>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0310 	and.w	r3, r3, #16
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	bf14      	ite	ne
 8002f46:	2301      	movne	r3, #1
 8002f48:	2300      	moveq	r3, #0
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	e02a      	b.n	8002fa4 <HAL_DMA_IRQHandler+0x6e4>
 8002f4e:	bf00      	nop
 8002f50:	40020010 	.word	0x40020010
 8002f54:	40020028 	.word	0x40020028
 8002f58:	40020040 	.word	0x40020040
 8002f5c:	40020058 	.word	0x40020058
 8002f60:	40020070 	.word	0x40020070
 8002f64:	40020088 	.word	0x40020088
 8002f68:	400200a0 	.word	0x400200a0
 8002f6c:	400200b8 	.word	0x400200b8
 8002f70:	40020410 	.word	0x40020410
 8002f74:	40020428 	.word	0x40020428
 8002f78:	40020440 	.word	0x40020440
 8002f7c:	40020458 	.word	0x40020458
 8002f80:	40020470 	.word	0x40020470
 8002f84:	40020488 	.word	0x40020488
 8002f88:	400204a0 	.word	0x400204a0
 8002f8c:	400204b8 	.word	0x400204b8
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	bf14      	ite	ne
 8002f9e:	2301      	movne	r3, #1
 8002fa0:	2300      	moveq	r3, #0
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 8087 	beq.w	80030b8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fae:	f003 031f 	and.w	r3, r3, #31
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d139      	bne.n	800303a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0216 	bic.w	r2, r2, #22
 8002fd4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695a      	ldr	r2, [r3, #20]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fe4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d103      	bne.n	8002ff6 <HAL_DMA_IRQHandler+0x736>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d007      	beq.n	8003006 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0208 	bic.w	r2, r2, #8
 8003004:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300a:	f003 031f 	and.w	r3, r3, #31
 800300e:	223f      	movs	r2, #63	; 0x3f
 8003010:	409a      	lsls	r2, r3
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 834a 	beq.w	80036c4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	4798      	blx	r3
          }
          return;
 8003038:	e344      	b.n	80036c4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d018      	beq.n	800307a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d108      	bne.n	8003068 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	2b00      	cmp	r3, #0
 800305c:	d02c      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	4798      	blx	r3
 8003066:	e027      	b.n	80030b8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306c:	2b00      	cmp	r3, #0
 800306e:	d023      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	4798      	blx	r3
 8003078:	e01e      	b.n	80030b8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10f      	bne.n	80030a8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0210 	bic.w	r2, r2, #16
 8003096:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 8306 	beq.w	80036ce <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 8088 	beq.w	80031e0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2204      	movs	r2, #4
 80030d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a7a      	ldr	r2, [pc, #488]	; (80032c8 <HAL_DMA_IRQHandler+0xa08>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d04a      	beq.n	8003178 <HAL_DMA_IRQHandler+0x8b8>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a79      	ldr	r2, [pc, #484]	; (80032cc <HAL_DMA_IRQHandler+0xa0c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d045      	beq.n	8003178 <HAL_DMA_IRQHandler+0x8b8>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a77      	ldr	r2, [pc, #476]	; (80032d0 <HAL_DMA_IRQHandler+0xa10>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d040      	beq.n	8003178 <HAL_DMA_IRQHandler+0x8b8>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a76      	ldr	r2, [pc, #472]	; (80032d4 <HAL_DMA_IRQHandler+0xa14>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d03b      	beq.n	8003178 <HAL_DMA_IRQHandler+0x8b8>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a74      	ldr	r2, [pc, #464]	; (80032d8 <HAL_DMA_IRQHandler+0xa18>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d036      	beq.n	8003178 <HAL_DMA_IRQHandler+0x8b8>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a73      	ldr	r2, [pc, #460]	; (80032dc <HAL_DMA_IRQHandler+0xa1c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d031      	beq.n	8003178 <HAL_DMA_IRQHandler+0x8b8>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a71      	ldr	r2, [pc, #452]	; (80032e0 <HAL_DMA_IRQHandler+0xa20>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d02c      	beq.n	8003178 <HAL_DMA_IRQHandler+0x8b8>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a70      	ldr	r2, [pc, #448]	; (80032e4 <HAL_DMA_IRQHandler+0xa24>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d027      	beq.n	8003178 <HAL_DMA_IRQHandler+0x8b8>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a6e      	ldr	r2, [pc, #440]	; (80032e8 <HAL_DMA_IRQHandler+0xa28>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d022      	beq.n	8003178 <HAL_DMA_IRQHandler+0x8b8>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a6d      	ldr	r2, [pc, #436]	; (80032ec <HAL_DMA_IRQHandler+0xa2c>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d01d      	beq.n	8003178 <HAL_DMA_IRQHandler+0x8b8>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a6b      	ldr	r2, [pc, #428]	; (80032f0 <HAL_DMA_IRQHandler+0xa30>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d018      	beq.n	8003178 <HAL_DMA_IRQHandler+0x8b8>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a6a      	ldr	r2, [pc, #424]	; (80032f4 <HAL_DMA_IRQHandler+0xa34>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d013      	beq.n	8003178 <HAL_DMA_IRQHandler+0x8b8>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a68      	ldr	r2, [pc, #416]	; (80032f8 <HAL_DMA_IRQHandler+0xa38>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d00e      	beq.n	8003178 <HAL_DMA_IRQHandler+0x8b8>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a67      	ldr	r2, [pc, #412]	; (80032fc <HAL_DMA_IRQHandler+0xa3c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d009      	beq.n	8003178 <HAL_DMA_IRQHandler+0x8b8>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a65      	ldr	r2, [pc, #404]	; (8003300 <HAL_DMA_IRQHandler+0xa40>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d004      	beq.n	8003178 <HAL_DMA_IRQHandler+0x8b8>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a64      	ldr	r2, [pc, #400]	; (8003304 <HAL_DMA_IRQHandler+0xa44>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d108      	bne.n	800318a <HAL_DMA_IRQHandler+0x8ca>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0201 	bic.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	e007      	b.n	800319a <HAL_DMA_IRQHandler+0x8da>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0201 	bic.w	r2, r2, #1
 8003198:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	3301      	adds	r3, #1
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d307      	bcc.n	80031b6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1f2      	bne.n	800319a <HAL_DMA_IRQHandler+0x8da>
 80031b4:	e000      	b.n	80031b8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80031b6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d004      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2203      	movs	r2, #3
 80031d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80031d6:	e003      	b.n	80031e0 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 8272 	beq.w	80036ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	4798      	blx	r3
 80031f2:	e26c      	b.n	80036ce <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a43      	ldr	r2, [pc, #268]	; (8003308 <HAL_DMA_IRQHandler+0xa48>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d022      	beq.n	8003244 <HAL_DMA_IRQHandler+0x984>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a42      	ldr	r2, [pc, #264]	; (800330c <HAL_DMA_IRQHandler+0xa4c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d01d      	beq.n	8003244 <HAL_DMA_IRQHandler+0x984>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a40      	ldr	r2, [pc, #256]	; (8003310 <HAL_DMA_IRQHandler+0xa50>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d018      	beq.n	8003244 <HAL_DMA_IRQHandler+0x984>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a3f      	ldr	r2, [pc, #252]	; (8003314 <HAL_DMA_IRQHandler+0xa54>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d013      	beq.n	8003244 <HAL_DMA_IRQHandler+0x984>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a3d      	ldr	r2, [pc, #244]	; (8003318 <HAL_DMA_IRQHandler+0xa58>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d00e      	beq.n	8003244 <HAL_DMA_IRQHandler+0x984>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a3c      	ldr	r2, [pc, #240]	; (800331c <HAL_DMA_IRQHandler+0xa5c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d009      	beq.n	8003244 <HAL_DMA_IRQHandler+0x984>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a3a      	ldr	r2, [pc, #232]	; (8003320 <HAL_DMA_IRQHandler+0xa60>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d004      	beq.n	8003244 <HAL_DMA_IRQHandler+0x984>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a39      	ldr	r2, [pc, #228]	; (8003324 <HAL_DMA_IRQHandler+0xa64>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d101      	bne.n	8003248 <HAL_DMA_IRQHandler+0x988>
 8003244:	2301      	movs	r3, #1
 8003246:	e000      	b.n	800324a <HAL_DMA_IRQHandler+0x98a>
 8003248:	2300      	movs	r3, #0
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 823f 	beq.w	80036ce <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325c:	f003 031f 	and.w	r3, r3, #31
 8003260:	2204      	movs	r2, #4
 8003262:	409a      	lsls	r2, r3
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	4013      	ands	r3, r2
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80cd 	beq.w	8003408 <HAL_DMA_IRQHandler+0xb48>
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 80c7 	beq.w	8003408 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327e:	f003 031f 	and.w	r3, r3, #31
 8003282:	2204      	movs	r2, #4
 8003284:	409a      	lsls	r2, r3
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d049      	beq.n	8003328 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d109      	bne.n	80032b2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 8210 	beq.w	80036c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032b0:	e20a      	b.n	80036c8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 8206 	beq.w	80036c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032c4:	e200      	b.n	80036c8 <HAL_DMA_IRQHandler+0xe08>
 80032c6:	bf00      	nop
 80032c8:	40020010 	.word	0x40020010
 80032cc:	40020028 	.word	0x40020028
 80032d0:	40020040 	.word	0x40020040
 80032d4:	40020058 	.word	0x40020058
 80032d8:	40020070 	.word	0x40020070
 80032dc:	40020088 	.word	0x40020088
 80032e0:	400200a0 	.word	0x400200a0
 80032e4:	400200b8 	.word	0x400200b8
 80032e8:	40020410 	.word	0x40020410
 80032ec:	40020428 	.word	0x40020428
 80032f0:	40020440 	.word	0x40020440
 80032f4:	40020458 	.word	0x40020458
 80032f8:	40020470 	.word	0x40020470
 80032fc:	40020488 	.word	0x40020488
 8003300:	400204a0 	.word	0x400204a0
 8003304:	400204b8 	.word	0x400204b8
 8003308:	58025408 	.word	0x58025408
 800330c:	5802541c 	.word	0x5802541c
 8003310:	58025430 	.word	0x58025430
 8003314:	58025444 	.word	0x58025444
 8003318:	58025458 	.word	0x58025458
 800331c:	5802546c 	.word	0x5802546c
 8003320:	58025480 	.word	0x58025480
 8003324:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f003 0320 	and.w	r3, r3, #32
 800332e:	2b00      	cmp	r3, #0
 8003330:	d160      	bne.n	80033f4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a8c      	ldr	r2, [pc, #560]	; (8003568 <HAL_DMA_IRQHandler+0xca8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d04a      	beq.n	80033d2 <HAL_DMA_IRQHandler+0xb12>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a8a      	ldr	r2, [pc, #552]	; (800356c <HAL_DMA_IRQHandler+0xcac>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d045      	beq.n	80033d2 <HAL_DMA_IRQHandler+0xb12>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a89      	ldr	r2, [pc, #548]	; (8003570 <HAL_DMA_IRQHandler+0xcb0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d040      	beq.n	80033d2 <HAL_DMA_IRQHandler+0xb12>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a87      	ldr	r2, [pc, #540]	; (8003574 <HAL_DMA_IRQHandler+0xcb4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d03b      	beq.n	80033d2 <HAL_DMA_IRQHandler+0xb12>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a86      	ldr	r2, [pc, #536]	; (8003578 <HAL_DMA_IRQHandler+0xcb8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d036      	beq.n	80033d2 <HAL_DMA_IRQHandler+0xb12>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a84      	ldr	r2, [pc, #528]	; (800357c <HAL_DMA_IRQHandler+0xcbc>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d031      	beq.n	80033d2 <HAL_DMA_IRQHandler+0xb12>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a83      	ldr	r2, [pc, #524]	; (8003580 <HAL_DMA_IRQHandler+0xcc0>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d02c      	beq.n	80033d2 <HAL_DMA_IRQHandler+0xb12>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a81      	ldr	r2, [pc, #516]	; (8003584 <HAL_DMA_IRQHandler+0xcc4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d027      	beq.n	80033d2 <HAL_DMA_IRQHandler+0xb12>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a80      	ldr	r2, [pc, #512]	; (8003588 <HAL_DMA_IRQHandler+0xcc8>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d022      	beq.n	80033d2 <HAL_DMA_IRQHandler+0xb12>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a7e      	ldr	r2, [pc, #504]	; (800358c <HAL_DMA_IRQHandler+0xccc>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d01d      	beq.n	80033d2 <HAL_DMA_IRQHandler+0xb12>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a7d      	ldr	r2, [pc, #500]	; (8003590 <HAL_DMA_IRQHandler+0xcd0>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d018      	beq.n	80033d2 <HAL_DMA_IRQHandler+0xb12>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a7b      	ldr	r2, [pc, #492]	; (8003594 <HAL_DMA_IRQHandler+0xcd4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d013      	beq.n	80033d2 <HAL_DMA_IRQHandler+0xb12>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a7a      	ldr	r2, [pc, #488]	; (8003598 <HAL_DMA_IRQHandler+0xcd8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d00e      	beq.n	80033d2 <HAL_DMA_IRQHandler+0xb12>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a78      	ldr	r2, [pc, #480]	; (800359c <HAL_DMA_IRQHandler+0xcdc>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d009      	beq.n	80033d2 <HAL_DMA_IRQHandler+0xb12>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a77      	ldr	r2, [pc, #476]	; (80035a0 <HAL_DMA_IRQHandler+0xce0>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d004      	beq.n	80033d2 <HAL_DMA_IRQHandler+0xb12>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a75      	ldr	r2, [pc, #468]	; (80035a4 <HAL_DMA_IRQHandler+0xce4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d108      	bne.n	80033e4 <HAL_DMA_IRQHandler+0xb24>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0208 	bic.w	r2, r2, #8
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	e007      	b.n	80033f4 <HAL_DMA_IRQHandler+0xb34>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0204 	bic.w	r2, r2, #4
 80033f2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 8165 	beq.w	80036c8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003406:	e15f      	b.n	80036c8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340c:	f003 031f 	and.w	r3, r3, #31
 8003410:	2202      	movs	r2, #2
 8003412:	409a      	lsls	r2, r3
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	4013      	ands	r3, r2
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 80c5 	beq.w	80035a8 <HAL_DMA_IRQHandler+0xce8>
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80bf 	beq.w	80035a8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	2202      	movs	r2, #2
 8003434:	409a      	lsls	r2, r3
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d018      	beq.n	8003476 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d109      	bne.n	8003462 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 813a 	beq.w	80036cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003460:	e134      	b.n	80036cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 8130 	beq.w	80036cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003474:	e12a      	b.n	80036cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b00      	cmp	r3, #0
 800347e:	d168      	bne.n	8003552 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a38      	ldr	r2, [pc, #224]	; (8003568 <HAL_DMA_IRQHandler+0xca8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d04a      	beq.n	8003520 <HAL_DMA_IRQHandler+0xc60>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a37      	ldr	r2, [pc, #220]	; (800356c <HAL_DMA_IRQHandler+0xcac>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d045      	beq.n	8003520 <HAL_DMA_IRQHandler+0xc60>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a35      	ldr	r2, [pc, #212]	; (8003570 <HAL_DMA_IRQHandler+0xcb0>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d040      	beq.n	8003520 <HAL_DMA_IRQHandler+0xc60>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a34      	ldr	r2, [pc, #208]	; (8003574 <HAL_DMA_IRQHandler+0xcb4>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d03b      	beq.n	8003520 <HAL_DMA_IRQHandler+0xc60>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a32      	ldr	r2, [pc, #200]	; (8003578 <HAL_DMA_IRQHandler+0xcb8>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d036      	beq.n	8003520 <HAL_DMA_IRQHandler+0xc60>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a31      	ldr	r2, [pc, #196]	; (800357c <HAL_DMA_IRQHandler+0xcbc>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d031      	beq.n	8003520 <HAL_DMA_IRQHandler+0xc60>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a2f      	ldr	r2, [pc, #188]	; (8003580 <HAL_DMA_IRQHandler+0xcc0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d02c      	beq.n	8003520 <HAL_DMA_IRQHandler+0xc60>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a2e      	ldr	r2, [pc, #184]	; (8003584 <HAL_DMA_IRQHandler+0xcc4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d027      	beq.n	8003520 <HAL_DMA_IRQHandler+0xc60>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a2c      	ldr	r2, [pc, #176]	; (8003588 <HAL_DMA_IRQHandler+0xcc8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d022      	beq.n	8003520 <HAL_DMA_IRQHandler+0xc60>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a2b      	ldr	r2, [pc, #172]	; (800358c <HAL_DMA_IRQHandler+0xccc>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d01d      	beq.n	8003520 <HAL_DMA_IRQHandler+0xc60>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a29      	ldr	r2, [pc, #164]	; (8003590 <HAL_DMA_IRQHandler+0xcd0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d018      	beq.n	8003520 <HAL_DMA_IRQHandler+0xc60>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a28      	ldr	r2, [pc, #160]	; (8003594 <HAL_DMA_IRQHandler+0xcd4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d013      	beq.n	8003520 <HAL_DMA_IRQHandler+0xc60>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a26      	ldr	r2, [pc, #152]	; (8003598 <HAL_DMA_IRQHandler+0xcd8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d00e      	beq.n	8003520 <HAL_DMA_IRQHandler+0xc60>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a25      	ldr	r2, [pc, #148]	; (800359c <HAL_DMA_IRQHandler+0xcdc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d009      	beq.n	8003520 <HAL_DMA_IRQHandler+0xc60>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a23      	ldr	r2, [pc, #140]	; (80035a0 <HAL_DMA_IRQHandler+0xce0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d004      	beq.n	8003520 <HAL_DMA_IRQHandler+0xc60>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a22      	ldr	r2, [pc, #136]	; (80035a4 <HAL_DMA_IRQHandler+0xce4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d108      	bne.n	8003532 <HAL_DMA_IRQHandler+0xc72>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0214 	bic.w	r2, r2, #20
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	e007      	b.n	8003542 <HAL_DMA_IRQHandler+0xc82>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 020a 	bic.w	r2, r2, #10
 8003540:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 80b8 	beq.w	80036cc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003564:	e0b2      	b.n	80036cc <HAL_DMA_IRQHandler+0xe0c>
 8003566:	bf00      	nop
 8003568:	40020010 	.word	0x40020010
 800356c:	40020028 	.word	0x40020028
 8003570:	40020040 	.word	0x40020040
 8003574:	40020058 	.word	0x40020058
 8003578:	40020070 	.word	0x40020070
 800357c:	40020088 	.word	0x40020088
 8003580:	400200a0 	.word	0x400200a0
 8003584:	400200b8 	.word	0x400200b8
 8003588:	40020410 	.word	0x40020410
 800358c:	40020428 	.word	0x40020428
 8003590:	40020440 	.word	0x40020440
 8003594:	40020458 	.word	0x40020458
 8003598:	40020470 	.word	0x40020470
 800359c:	40020488 	.word	0x40020488
 80035a0:	400204a0 	.word	0x400204a0
 80035a4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ac:	f003 031f 	and.w	r3, r3, #31
 80035b0:	2208      	movs	r2, #8
 80035b2:	409a      	lsls	r2, r3
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	4013      	ands	r3, r2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 8088 	beq.w	80036ce <HAL_DMA_IRQHandler+0xe0e>
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 8082 	beq.w	80036ce <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a41      	ldr	r2, [pc, #260]	; (80036d4 <HAL_DMA_IRQHandler+0xe14>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d04a      	beq.n	800366a <HAL_DMA_IRQHandler+0xdaa>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a3f      	ldr	r2, [pc, #252]	; (80036d8 <HAL_DMA_IRQHandler+0xe18>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d045      	beq.n	800366a <HAL_DMA_IRQHandler+0xdaa>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a3e      	ldr	r2, [pc, #248]	; (80036dc <HAL_DMA_IRQHandler+0xe1c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d040      	beq.n	800366a <HAL_DMA_IRQHandler+0xdaa>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a3c      	ldr	r2, [pc, #240]	; (80036e0 <HAL_DMA_IRQHandler+0xe20>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d03b      	beq.n	800366a <HAL_DMA_IRQHandler+0xdaa>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a3b      	ldr	r2, [pc, #236]	; (80036e4 <HAL_DMA_IRQHandler+0xe24>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d036      	beq.n	800366a <HAL_DMA_IRQHandler+0xdaa>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a39      	ldr	r2, [pc, #228]	; (80036e8 <HAL_DMA_IRQHandler+0xe28>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d031      	beq.n	800366a <HAL_DMA_IRQHandler+0xdaa>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a38      	ldr	r2, [pc, #224]	; (80036ec <HAL_DMA_IRQHandler+0xe2c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d02c      	beq.n	800366a <HAL_DMA_IRQHandler+0xdaa>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a36      	ldr	r2, [pc, #216]	; (80036f0 <HAL_DMA_IRQHandler+0xe30>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d027      	beq.n	800366a <HAL_DMA_IRQHandler+0xdaa>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a35      	ldr	r2, [pc, #212]	; (80036f4 <HAL_DMA_IRQHandler+0xe34>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d022      	beq.n	800366a <HAL_DMA_IRQHandler+0xdaa>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a33      	ldr	r2, [pc, #204]	; (80036f8 <HAL_DMA_IRQHandler+0xe38>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d01d      	beq.n	800366a <HAL_DMA_IRQHandler+0xdaa>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a32      	ldr	r2, [pc, #200]	; (80036fc <HAL_DMA_IRQHandler+0xe3c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d018      	beq.n	800366a <HAL_DMA_IRQHandler+0xdaa>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a30      	ldr	r2, [pc, #192]	; (8003700 <HAL_DMA_IRQHandler+0xe40>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d013      	beq.n	800366a <HAL_DMA_IRQHandler+0xdaa>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a2f      	ldr	r2, [pc, #188]	; (8003704 <HAL_DMA_IRQHandler+0xe44>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d00e      	beq.n	800366a <HAL_DMA_IRQHandler+0xdaa>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a2d      	ldr	r2, [pc, #180]	; (8003708 <HAL_DMA_IRQHandler+0xe48>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d009      	beq.n	800366a <HAL_DMA_IRQHandler+0xdaa>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a2c      	ldr	r2, [pc, #176]	; (800370c <HAL_DMA_IRQHandler+0xe4c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d004      	beq.n	800366a <HAL_DMA_IRQHandler+0xdaa>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a2a      	ldr	r2, [pc, #168]	; (8003710 <HAL_DMA_IRQHandler+0xe50>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d108      	bne.n	800367c <HAL_DMA_IRQHandler+0xdbc>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 021c 	bic.w	r2, r2, #28
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	e007      	b.n	800368c <HAL_DMA_IRQHandler+0xdcc>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 020e 	bic.w	r2, r2, #14
 800368a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003690:	f003 031f 	and.w	r3, r3, #31
 8003694:	2201      	movs	r2, #1
 8003696:	409a      	lsls	r2, r3
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d009      	beq.n	80036ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	4798      	blx	r3
 80036c2:	e004      	b.n	80036ce <HAL_DMA_IRQHandler+0xe0e>
          return;
 80036c4:	bf00      	nop
 80036c6:	e002      	b.n	80036ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036c8:	bf00      	nop
 80036ca:	e000      	b.n	80036ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036cc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80036ce:	3728      	adds	r7, #40	; 0x28
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40020010 	.word	0x40020010
 80036d8:	40020028 	.word	0x40020028
 80036dc:	40020040 	.word	0x40020040
 80036e0:	40020058 	.word	0x40020058
 80036e4:	40020070 	.word	0x40020070
 80036e8:	40020088 	.word	0x40020088
 80036ec:	400200a0 	.word	0x400200a0
 80036f0:	400200b8 	.word	0x400200b8
 80036f4:	40020410 	.word	0x40020410
 80036f8:	40020428 	.word	0x40020428
 80036fc:	40020440 	.word	0x40020440
 8003700:	40020458 	.word	0x40020458
 8003704:	40020470 	.word	0x40020470
 8003708:	40020488 	.word	0x40020488
 800370c:	400204a0 	.word	0x400204a0
 8003710:	400204b8 	.word	0x400204b8

08003714 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003720:	4618      	mov	r0, r3
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003744:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a84      	ldr	r2, [pc, #528]	; (800395c <DMA_SetConfig+0x230>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d072      	beq.n	8003836 <DMA_SetConfig+0x10a>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a82      	ldr	r2, [pc, #520]	; (8003960 <DMA_SetConfig+0x234>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d06d      	beq.n	8003836 <DMA_SetConfig+0x10a>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a81      	ldr	r2, [pc, #516]	; (8003964 <DMA_SetConfig+0x238>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d068      	beq.n	8003836 <DMA_SetConfig+0x10a>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a7f      	ldr	r2, [pc, #508]	; (8003968 <DMA_SetConfig+0x23c>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d063      	beq.n	8003836 <DMA_SetConfig+0x10a>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a7e      	ldr	r2, [pc, #504]	; (800396c <DMA_SetConfig+0x240>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d05e      	beq.n	8003836 <DMA_SetConfig+0x10a>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a7c      	ldr	r2, [pc, #496]	; (8003970 <DMA_SetConfig+0x244>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d059      	beq.n	8003836 <DMA_SetConfig+0x10a>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a7b      	ldr	r2, [pc, #492]	; (8003974 <DMA_SetConfig+0x248>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d054      	beq.n	8003836 <DMA_SetConfig+0x10a>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a79      	ldr	r2, [pc, #484]	; (8003978 <DMA_SetConfig+0x24c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d04f      	beq.n	8003836 <DMA_SetConfig+0x10a>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a78      	ldr	r2, [pc, #480]	; (800397c <DMA_SetConfig+0x250>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d04a      	beq.n	8003836 <DMA_SetConfig+0x10a>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a76      	ldr	r2, [pc, #472]	; (8003980 <DMA_SetConfig+0x254>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d045      	beq.n	8003836 <DMA_SetConfig+0x10a>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a75      	ldr	r2, [pc, #468]	; (8003984 <DMA_SetConfig+0x258>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d040      	beq.n	8003836 <DMA_SetConfig+0x10a>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a73      	ldr	r2, [pc, #460]	; (8003988 <DMA_SetConfig+0x25c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d03b      	beq.n	8003836 <DMA_SetConfig+0x10a>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a72      	ldr	r2, [pc, #456]	; (800398c <DMA_SetConfig+0x260>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d036      	beq.n	8003836 <DMA_SetConfig+0x10a>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a70      	ldr	r2, [pc, #448]	; (8003990 <DMA_SetConfig+0x264>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d031      	beq.n	8003836 <DMA_SetConfig+0x10a>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a6f      	ldr	r2, [pc, #444]	; (8003994 <DMA_SetConfig+0x268>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d02c      	beq.n	8003836 <DMA_SetConfig+0x10a>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a6d      	ldr	r2, [pc, #436]	; (8003998 <DMA_SetConfig+0x26c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d027      	beq.n	8003836 <DMA_SetConfig+0x10a>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a6c      	ldr	r2, [pc, #432]	; (800399c <DMA_SetConfig+0x270>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d022      	beq.n	8003836 <DMA_SetConfig+0x10a>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a6a      	ldr	r2, [pc, #424]	; (80039a0 <DMA_SetConfig+0x274>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d01d      	beq.n	8003836 <DMA_SetConfig+0x10a>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a69      	ldr	r2, [pc, #420]	; (80039a4 <DMA_SetConfig+0x278>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d018      	beq.n	8003836 <DMA_SetConfig+0x10a>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a67      	ldr	r2, [pc, #412]	; (80039a8 <DMA_SetConfig+0x27c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d013      	beq.n	8003836 <DMA_SetConfig+0x10a>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a66      	ldr	r2, [pc, #408]	; (80039ac <DMA_SetConfig+0x280>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d00e      	beq.n	8003836 <DMA_SetConfig+0x10a>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a64      	ldr	r2, [pc, #400]	; (80039b0 <DMA_SetConfig+0x284>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d009      	beq.n	8003836 <DMA_SetConfig+0x10a>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a63      	ldr	r2, [pc, #396]	; (80039b4 <DMA_SetConfig+0x288>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d004      	beq.n	8003836 <DMA_SetConfig+0x10a>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a61      	ldr	r2, [pc, #388]	; (80039b8 <DMA_SetConfig+0x28c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d101      	bne.n	800383a <DMA_SetConfig+0x10e>
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <DMA_SetConfig+0x110>
 800383a:	2300      	movs	r3, #0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00d      	beq.n	800385c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003848:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800384e:	2b00      	cmp	r3, #0
 8003850:	d004      	beq.n	800385c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800385a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a3e      	ldr	r2, [pc, #248]	; (800395c <DMA_SetConfig+0x230>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d04a      	beq.n	80038fc <DMA_SetConfig+0x1d0>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a3d      	ldr	r2, [pc, #244]	; (8003960 <DMA_SetConfig+0x234>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d045      	beq.n	80038fc <DMA_SetConfig+0x1d0>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a3b      	ldr	r2, [pc, #236]	; (8003964 <DMA_SetConfig+0x238>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d040      	beq.n	80038fc <DMA_SetConfig+0x1d0>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a3a      	ldr	r2, [pc, #232]	; (8003968 <DMA_SetConfig+0x23c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d03b      	beq.n	80038fc <DMA_SetConfig+0x1d0>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a38      	ldr	r2, [pc, #224]	; (800396c <DMA_SetConfig+0x240>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d036      	beq.n	80038fc <DMA_SetConfig+0x1d0>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a37      	ldr	r2, [pc, #220]	; (8003970 <DMA_SetConfig+0x244>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d031      	beq.n	80038fc <DMA_SetConfig+0x1d0>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a35      	ldr	r2, [pc, #212]	; (8003974 <DMA_SetConfig+0x248>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d02c      	beq.n	80038fc <DMA_SetConfig+0x1d0>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a34      	ldr	r2, [pc, #208]	; (8003978 <DMA_SetConfig+0x24c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d027      	beq.n	80038fc <DMA_SetConfig+0x1d0>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a32      	ldr	r2, [pc, #200]	; (800397c <DMA_SetConfig+0x250>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d022      	beq.n	80038fc <DMA_SetConfig+0x1d0>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a31      	ldr	r2, [pc, #196]	; (8003980 <DMA_SetConfig+0x254>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d01d      	beq.n	80038fc <DMA_SetConfig+0x1d0>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a2f      	ldr	r2, [pc, #188]	; (8003984 <DMA_SetConfig+0x258>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d018      	beq.n	80038fc <DMA_SetConfig+0x1d0>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a2e      	ldr	r2, [pc, #184]	; (8003988 <DMA_SetConfig+0x25c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d013      	beq.n	80038fc <DMA_SetConfig+0x1d0>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a2c      	ldr	r2, [pc, #176]	; (800398c <DMA_SetConfig+0x260>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00e      	beq.n	80038fc <DMA_SetConfig+0x1d0>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a2b      	ldr	r2, [pc, #172]	; (8003990 <DMA_SetConfig+0x264>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d009      	beq.n	80038fc <DMA_SetConfig+0x1d0>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a29      	ldr	r2, [pc, #164]	; (8003994 <DMA_SetConfig+0x268>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d004      	beq.n	80038fc <DMA_SetConfig+0x1d0>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a28      	ldr	r2, [pc, #160]	; (8003998 <DMA_SetConfig+0x26c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d101      	bne.n	8003900 <DMA_SetConfig+0x1d4>
 80038fc:	2301      	movs	r3, #1
 80038fe:	e000      	b.n	8003902 <DMA_SetConfig+0x1d6>
 8003900:	2300      	movs	r3, #0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d05a      	beq.n	80039bc <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390a:	f003 031f 	and.w	r3, r3, #31
 800390e:	223f      	movs	r2, #63	; 0x3f
 8003910:	409a      	lsls	r2, r3
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003924:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b40      	cmp	r3, #64	; 0x40
 8003934:	d108      	bne.n	8003948 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003946:	e087      	b.n	8003a58 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	60da      	str	r2, [r3, #12]
}
 8003958:	e07e      	b.n	8003a58 <DMA_SetConfig+0x32c>
 800395a:	bf00      	nop
 800395c:	40020010 	.word	0x40020010
 8003960:	40020028 	.word	0x40020028
 8003964:	40020040 	.word	0x40020040
 8003968:	40020058 	.word	0x40020058
 800396c:	40020070 	.word	0x40020070
 8003970:	40020088 	.word	0x40020088
 8003974:	400200a0 	.word	0x400200a0
 8003978:	400200b8 	.word	0x400200b8
 800397c:	40020410 	.word	0x40020410
 8003980:	40020428 	.word	0x40020428
 8003984:	40020440 	.word	0x40020440
 8003988:	40020458 	.word	0x40020458
 800398c:	40020470 	.word	0x40020470
 8003990:	40020488 	.word	0x40020488
 8003994:	400204a0 	.word	0x400204a0
 8003998:	400204b8 	.word	0x400204b8
 800399c:	58025408 	.word	0x58025408
 80039a0:	5802541c 	.word	0x5802541c
 80039a4:	58025430 	.word	0x58025430
 80039a8:	58025444 	.word	0x58025444
 80039ac:	58025458 	.word	0x58025458
 80039b0:	5802546c 	.word	0x5802546c
 80039b4:	58025480 	.word	0x58025480
 80039b8:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a28      	ldr	r2, [pc, #160]	; (8003a64 <DMA_SetConfig+0x338>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d022      	beq.n	8003a0c <DMA_SetConfig+0x2e0>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a27      	ldr	r2, [pc, #156]	; (8003a68 <DMA_SetConfig+0x33c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d01d      	beq.n	8003a0c <DMA_SetConfig+0x2e0>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a25      	ldr	r2, [pc, #148]	; (8003a6c <DMA_SetConfig+0x340>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d018      	beq.n	8003a0c <DMA_SetConfig+0x2e0>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a24      	ldr	r2, [pc, #144]	; (8003a70 <DMA_SetConfig+0x344>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d013      	beq.n	8003a0c <DMA_SetConfig+0x2e0>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a22      	ldr	r2, [pc, #136]	; (8003a74 <DMA_SetConfig+0x348>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d00e      	beq.n	8003a0c <DMA_SetConfig+0x2e0>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a21      	ldr	r2, [pc, #132]	; (8003a78 <DMA_SetConfig+0x34c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d009      	beq.n	8003a0c <DMA_SetConfig+0x2e0>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a1f      	ldr	r2, [pc, #124]	; (8003a7c <DMA_SetConfig+0x350>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d004      	beq.n	8003a0c <DMA_SetConfig+0x2e0>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a1e      	ldr	r2, [pc, #120]	; (8003a80 <DMA_SetConfig+0x354>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d101      	bne.n	8003a10 <DMA_SetConfig+0x2e4>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e000      	b.n	8003a12 <DMA_SetConfig+0x2e6>
 8003a10:	2300      	movs	r3, #0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d020      	beq.n	8003a58 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1a:	f003 031f 	and.w	r3, r3, #31
 8003a1e:	2201      	movs	r2, #1
 8003a20:	409a      	lsls	r2, r3
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	2b40      	cmp	r3, #64	; 0x40
 8003a34:	d108      	bne.n	8003a48 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	60da      	str	r2, [r3, #12]
}
 8003a46:	e007      	b.n	8003a58 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	60da      	str	r2, [r3, #12]
}
 8003a58:	bf00      	nop
 8003a5a:	371c      	adds	r7, #28
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	58025408 	.word	0x58025408
 8003a68:	5802541c 	.word	0x5802541c
 8003a6c:	58025430 	.word	0x58025430
 8003a70:	58025444 	.word	0x58025444
 8003a74:	58025458 	.word	0x58025458
 8003a78:	5802546c 	.word	0x5802546c
 8003a7c:	58025480 	.word	0x58025480
 8003a80:	58025494 	.word	0x58025494

08003a84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a42      	ldr	r2, [pc, #264]	; (8003b9c <DMA_CalcBaseAndBitshift+0x118>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d04a      	beq.n	8003b2c <DMA_CalcBaseAndBitshift+0xa8>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a41      	ldr	r2, [pc, #260]	; (8003ba0 <DMA_CalcBaseAndBitshift+0x11c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d045      	beq.n	8003b2c <DMA_CalcBaseAndBitshift+0xa8>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a3f      	ldr	r2, [pc, #252]	; (8003ba4 <DMA_CalcBaseAndBitshift+0x120>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d040      	beq.n	8003b2c <DMA_CalcBaseAndBitshift+0xa8>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a3e      	ldr	r2, [pc, #248]	; (8003ba8 <DMA_CalcBaseAndBitshift+0x124>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d03b      	beq.n	8003b2c <DMA_CalcBaseAndBitshift+0xa8>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a3c      	ldr	r2, [pc, #240]	; (8003bac <DMA_CalcBaseAndBitshift+0x128>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d036      	beq.n	8003b2c <DMA_CalcBaseAndBitshift+0xa8>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a3b      	ldr	r2, [pc, #236]	; (8003bb0 <DMA_CalcBaseAndBitshift+0x12c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d031      	beq.n	8003b2c <DMA_CalcBaseAndBitshift+0xa8>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a39      	ldr	r2, [pc, #228]	; (8003bb4 <DMA_CalcBaseAndBitshift+0x130>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d02c      	beq.n	8003b2c <DMA_CalcBaseAndBitshift+0xa8>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a38      	ldr	r2, [pc, #224]	; (8003bb8 <DMA_CalcBaseAndBitshift+0x134>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d027      	beq.n	8003b2c <DMA_CalcBaseAndBitshift+0xa8>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a36      	ldr	r2, [pc, #216]	; (8003bbc <DMA_CalcBaseAndBitshift+0x138>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d022      	beq.n	8003b2c <DMA_CalcBaseAndBitshift+0xa8>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a35      	ldr	r2, [pc, #212]	; (8003bc0 <DMA_CalcBaseAndBitshift+0x13c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d01d      	beq.n	8003b2c <DMA_CalcBaseAndBitshift+0xa8>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a33      	ldr	r2, [pc, #204]	; (8003bc4 <DMA_CalcBaseAndBitshift+0x140>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d018      	beq.n	8003b2c <DMA_CalcBaseAndBitshift+0xa8>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a32      	ldr	r2, [pc, #200]	; (8003bc8 <DMA_CalcBaseAndBitshift+0x144>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d013      	beq.n	8003b2c <DMA_CalcBaseAndBitshift+0xa8>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a30      	ldr	r2, [pc, #192]	; (8003bcc <DMA_CalcBaseAndBitshift+0x148>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d00e      	beq.n	8003b2c <DMA_CalcBaseAndBitshift+0xa8>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a2f      	ldr	r2, [pc, #188]	; (8003bd0 <DMA_CalcBaseAndBitshift+0x14c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d009      	beq.n	8003b2c <DMA_CalcBaseAndBitshift+0xa8>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a2d      	ldr	r2, [pc, #180]	; (8003bd4 <DMA_CalcBaseAndBitshift+0x150>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d004      	beq.n	8003b2c <DMA_CalcBaseAndBitshift+0xa8>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a2c      	ldr	r2, [pc, #176]	; (8003bd8 <DMA_CalcBaseAndBitshift+0x154>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d101      	bne.n	8003b30 <DMA_CalcBaseAndBitshift+0xac>
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e000      	b.n	8003b32 <DMA_CalcBaseAndBitshift+0xae>
 8003b30:	2300      	movs	r3, #0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d024      	beq.n	8003b80 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	3b10      	subs	r3, #16
 8003b3e:	4a27      	ldr	r2, [pc, #156]	; (8003bdc <DMA_CalcBaseAndBitshift+0x158>)
 8003b40:	fba2 2303 	umull	r2, r3, r2, r3
 8003b44:	091b      	lsrs	r3, r3, #4
 8003b46:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	4a24      	ldr	r2, [pc, #144]	; (8003be0 <DMA_CalcBaseAndBitshift+0x15c>)
 8003b50:	5cd3      	ldrb	r3, [r2, r3]
 8003b52:	461a      	mov	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	d908      	bls.n	8003b70 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	4b1f      	ldr	r3, [pc, #124]	; (8003be4 <DMA_CalcBaseAndBitshift+0x160>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	1d1a      	adds	r2, r3, #4
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	659a      	str	r2, [r3, #88]	; 0x58
 8003b6e:	e00d      	b.n	8003b8c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	461a      	mov	r2, r3
 8003b76:	4b1b      	ldr	r3, [pc, #108]	; (8003be4 <DMA_CalcBaseAndBitshift+0x160>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6593      	str	r3, [r2, #88]	; 0x58
 8003b7e:	e005      	b.n	8003b8c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	40020010 	.word	0x40020010
 8003ba0:	40020028 	.word	0x40020028
 8003ba4:	40020040 	.word	0x40020040
 8003ba8:	40020058 	.word	0x40020058
 8003bac:	40020070 	.word	0x40020070
 8003bb0:	40020088 	.word	0x40020088
 8003bb4:	400200a0 	.word	0x400200a0
 8003bb8:	400200b8 	.word	0x400200b8
 8003bbc:	40020410 	.word	0x40020410
 8003bc0:	40020428 	.word	0x40020428
 8003bc4:	40020440 	.word	0x40020440
 8003bc8:	40020458 	.word	0x40020458
 8003bcc:	40020470 	.word	0x40020470
 8003bd0:	40020488 	.word	0x40020488
 8003bd4:	400204a0 	.word	0x400204a0
 8003bd8:	400204b8 	.word	0x400204b8
 8003bdc:	aaaaaaab 	.word	0xaaaaaaab
 8003be0:	0800cf1c 	.word	0x0800cf1c
 8003be4:	fffffc00 	.word	0xfffffc00

08003be8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d120      	bne.n	8003c3e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c00:	2b03      	cmp	r3, #3
 8003c02:	d858      	bhi.n	8003cb6 <DMA_CheckFifoParam+0xce>
 8003c04:	a201      	add	r2, pc, #4	; (adr r2, 8003c0c <DMA_CheckFifoParam+0x24>)
 8003c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0a:	bf00      	nop
 8003c0c:	08003c1d 	.word	0x08003c1d
 8003c10:	08003c2f 	.word	0x08003c2f
 8003c14:	08003c1d 	.word	0x08003c1d
 8003c18:	08003cb7 	.word	0x08003cb7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d048      	beq.n	8003cba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c2c:	e045      	b.n	8003cba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c36:	d142      	bne.n	8003cbe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c3c:	e03f      	b.n	8003cbe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c46:	d123      	bne.n	8003c90 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	d838      	bhi.n	8003cc2 <DMA_CheckFifoParam+0xda>
 8003c50:	a201      	add	r2, pc, #4	; (adr r2, 8003c58 <DMA_CheckFifoParam+0x70>)
 8003c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c56:	bf00      	nop
 8003c58:	08003c69 	.word	0x08003c69
 8003c5c:	08003c6f 	.word	0x08003c6f
 8003c60:	08003c69 	.word	0x08003c69
 8003c64:	08003c81 	.word	0x08003c81
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	73fb      	strb	r3, [r7, #15]
        break;
 8003c6c:	e030      	b.n	8003cd0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d025      	beq.n	8003cc6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c7e:	e022      	b.n	8003cc6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c88:	d11f      	bne.n	8003cca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c8e:	e01c      	b.n	8003cca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d902      	bls.n	8003c9e <DMA_CheckFifoParam+0xb6>
 8003c98:	2b03      	cmp	r3, #3
 8003c9a:	d003      	beq.n	8003ca4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003c9c:	e018      	b.n	8003cd0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ca2:	e015      	b.n	8003cd0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00e      	beq.n	8003cce <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	73fb      	strb	r3, [r7, #15]
    break;
 8003cb4:	e00b      	b.n	8003cce <DMA_CheckFifoParam+0xe6>
        break;
 8003cb6:	bf00      	nop
 8003cb8:	e00a      	b.n	8003cd0 <DMA_CheckFifoParam+0xe8>
        break;
 8003cba:	bf00      	nop
 8003cbc:	e008      	b.n	8003cd0 <DMA_CheckFifoParam+0xe8>
        break;
 8003cbe:	bf00      	nop
 8003cc0:	e006      	b.n	8003cd0 <DMA_CheckFifoParam+0xe8>
        break;
 8003cc2:	bf00      	nop
 8003cc4:	e004      	b.n	8003cd0 <DMA_CheckFifoParam+0xe8>
        break;
 8003cc6:	bf00      	nop
 8003cc8:	e002      	b.n	8003cd0 <DMA_CheckFifoParam+0xe8>
        break;
 8003cca:	bf00      	nop
 8003ccc:	e000      	b.n	8003cd0 <DMA_CheckFifoParam+0xe8>
    break;
 8003cce:	bf00      	nop
    }
  }

  return status;
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop

08003ce0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a38      	ldr	r2, [pc, #224]	; (8003dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d022      	beq.n	8003d3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a36      	ldr	r2, [pc, #216]	; (8003dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d01d      	beq.n	8003d3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a35      	ldr	r2, [pc, #212]	; (8003ddc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d018      	beq.n	8003d3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a33      	ldr	r2, [pc, #204]	; (8003de0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d013      	beq.n	8003d3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a32      	ldr	r2, [pc, #200]	; (8003de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d00e      	beq.n	8003d3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a30      	ldr	r2, [pc, #192]	; (8003de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d009      	beq.n	8003d3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a2f      	ldr	r2, [pc, #188]	; (8003dec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d004      	beq.n	8003d3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a2d      	ldr	r2, [pc, #180]	; (8003df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d101      	bne.n	8003d42 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003d42:	2300      	movs	r3, #0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d01a      	beq.n	8003d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	3b08      	subs	r3, #8
 8003d50:	4a28      	ldr	r2, [pc, #160]	; (8003df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003d52:	fba2 2303 	umull	r2, r3, r2, r3
 8003d56:	091b      	lsrs	r3, r3, #4
 8003d58:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	4b26      	ldr	r3, [pc, #152]	; (8003df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003d5e:	4413      	add	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	461a      	mov	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a24      	ldr	r2, [pc, #144]	; (8003dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003d6c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f003 031f 	and.w	r3, r3, #31
 8003d74:	2201      	movs	r2, #1
 8003d76:	409a      	lsls	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003d7c:	e024      	b.n	8003dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	3b10      	subs	r3, #16
 8003d86:	4a1e      	ldr	r2, [pc, #120]	; (8003e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003d88:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4a1c      	ldr	r2, [pc, #112]	; (8003e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d806      	bhi.n	8003da6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	4a1b      	ldr	r2, [pc, #108]	; (8003e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d902      	bls.n	8003da6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	3308      	adds	r3, #8
 8003da4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4b18      	ldr	r3, [pc, #96]	; (8003e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	461a      	mov	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a16      	ldr	r2, [pc, #88]	; (8003e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003db8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f003 031f 	and.w	r3, r3, #31
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	409a      	lsls	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003dc8:	bf00      	nop
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	58025408 	.word	0x58025408
 8003dd8:	5802541c 	.word	0x5802541c
 8003ddc:	58025430 	.word	0x58025430
 8003de0:	58025444 	.word	0x58025444
 8003de4:	58025458 	.word	0x58025458
 8003de8:	5802546c 	.word	0x5802546c
 8003dec:	58025480 	.word	0x58025480
 8003df0:	58025494 	.word	0x58025494
 8003df4:	cccccccd 	.word	0xcccccccd
 8003df8:	16009600 	.word	0x16009600
 8003dfc:	58025880 	.word	0x58025880
 8003e00:	aaaaaaab 	.word	0xaaaaaaab
 8003e04:	400204b8 	.word	0x400204b8
 8003e08:	4002040f 	.word	0x4002040f
 8003e0c:	10008200 	.word	0x10008200
 8003e10:	40020880 	.word	0x40020880

08003e14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d04a      	beq.n	8003ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d847      	bhi.n	8003ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a25      	ldr	r2, [pc, #148]	; (8003ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d022      	beq.n	8003e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a24      	ldr	r2, [pc, #144]	; (8003ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d01d      	beq.n	8003e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a22      	ldr	r2, [pc, #136]	; (8003ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d018      	beq.n	8003e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a21      	ldr	r2, [pc, #132]	; (8003ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d013      	beq.n	8003e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a1f      	ldr	r2, [pc, #124]	; (8003edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d00e      	beq.n	8003e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a1e      	ldr	r2, [pc, #120]	; (8003ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d009      	beq.n	8003e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a1c      	ldr	r2, [pc, #112]	; (8003ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d004      	beq.n	8003e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a1b      	ldr	r2, [pc, #108]	; (8003ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d101      	bne.n	8003e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003e80:	2301      	movs	r3, #1
 8003e82:	e000      	b.n	8003e86 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003e84:	2300      	movs	r3, #0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4b17      	ldr	r3, [pc, #92]	; (8003eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003e8e:	4413      	add	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	461a      	mov	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a15      	ldr	r2, [pc, #84]	; (8003ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003e9c:	671a      	str	r2, [r3, #112]	; 0x70
 8003e9e:	e009      	b.n	8003eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4b14      	ldr	r3, [pc, #80]	; (8003ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003ea4:	4413      	add	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a11      	ldr	r2, [pc, #68]	; (8003ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003eb2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	2201      	movs	r2, #1
 8003eba:	409a      	lsls	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003ec0:	bf00      	nop
 8003ec2:	3714      	adds	r7, #20
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	58025408 	.word	0x58025408
 8003ed0:	5802541c 	.word	0x5802541c
 8003ed4:	58025430 	.word	0x58025430
 8003ed8:	58025444 	.word	0x58025444
 8003edc:	58025458 	.word	0x58025458
 8003ee0:	5802546c 	.word	0x5802546c
 8003ee4:	58025480 	.word	0x58025480
 8003ee8:	58025494 	.word	0x58025494
 8003eec:	1600963f 	.word	0x1600963f
 8003ef0:	58025940 	.word	0x58025940
 8003ef4:	1000823f 	.word	0x1000823f
 8003ef8:	40020940 	.word	0x40020940

08003efc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b089      	sub	sp, #36	; 0x24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003f0a:	4b89      	ldr	r3, [pc, #548]	; (8004130 <HAL_GPIO_Init+0x234>)
 8003f0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f0e:	e194      	b.n	800423a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	2101      	movs	r1, #1
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 8186 	beq.w	8004234 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d00b      	beq.n	8003f48 <HAL_GPIO_Init+0x4c>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d007      	beq.n	8003f48 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f3c:	2b11      	cmp	r3, #17
 8003f3e:	d003      	beq.n	8003f48 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b12      	cmp	r3, #18
 8003f46:	d130      	bne.n	8003faa <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	2203      	movs	r2, #3
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f7e:	2201      	movs	r2, #1
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	43db      	mvns	r3, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	091b      	lsrs	r3, r3, #4
 8003f94:	f003 0201 	and.w	r2, r3, #1
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	689a      	ldr	r2, [r3, #8]
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d003      	beq.n	8003fea <HAL_GPIO_Init+0xee>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b12      	cmp	r3, #18
 8003fe8:	d123      	bne.n	8004032 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	08da      	lsrs	r2, r3, #3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3208      	adds	r2, #8
 8003ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	220f      	movs	r2, #15
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	43db      	mvns	r3, r3
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	4013      	ands	r3, r2
 800400c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	691a      	ldr	r2, [r3, #16]
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	4313      	orrs	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	08da      	lsrs	r2, r3, #3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3208      	adds	r2, #8
 800402c:	69b9      	ldr	r1, [r7, #24]
 800402e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	2203      	movs	r2, #3
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	43db      	mvns	r3, r3
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4013      	ands	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f003 0203 	and.w	r2, r3, #3
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	4313      	orrs	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 80e0 	beq.w	8004234 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004074:	4b2f      	ldr	r3, [pc, #188]	; (8004134 <HAL_GPIO_Init+0x238>)
 8004076:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800407a:	4a2e      	ldr	r2, [pc, #184]	; (8004134 <HAL_GPIO_Init+0x238>)
 800407c:	f043 0302 	orr.w	r3, r3, #2
 8004080:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004084:	4b2b      	ldr	r3, [pc, #172]	; (8004134 <HAL_GPIO_Init+0x238>)
 8004086:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004092:	4a29      	ldr	r2, [pc, #164]	; (8004138 <HAL_GPIO_Init+0x23c>)
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	089b      	lsrs	r3, r3, #2
 8004098:	3302      	adds	r3, #2
 800409a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800409e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	220f      	movs	r2, #15
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	43db      	mvns	r3, r3
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	4013      	ands	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a20      	ldr	r2, [pc, #128]	; (800413c <HAL_GPIO_Init+0x240>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d052      	beq.n	8004164 <HAL_GPIO_Init+0x268>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a1f      	ldr	r2, [pc, #124]	; (8004140 <HAL_GPIO_Init+0x244>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d031      	beq.n	800412a <HAL_GPIO_Init+0x22e>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a1e      	ldr	r2, [pc, #120]	; (8004144 <HAL_GPIO_Init+0x248>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d02b      	beq.n	8004126 <HAL_GPIO_Init+0x22a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a1d      	ldr	r2, [pc, #116]	; (8004148 <HAL_GPIO_Init+0x24c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d025      	beq.n	8004122 <HAL_GPIO_Init+0x226>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a1c      	ldr	r2, [pc, #112]	; (800414c <HAL_GPIO_Init+0x250>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d01f      	beq.n	800411e <HAL_GPIO_Init+0x222>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a1b      	ldr	r2, [pc, #108]	; (8004150 <HAL_GPIO_Init+0x254>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d019      	beq.n	800411a <HAL_GPIO_Init+0x21e>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a1a      	ldr	r2, [pc, #104]	; (8004154 <HAL_GPIO_Init+0x258>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d013      	beq.n	8004116 <HAL_GPIO_Init+0x21a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a19      	ldr	r2, [pc, #100]	; (8004158 <HAL_GPIO_Init+0x25c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d00d      	beq.n	8004112 <HAL_GPIO_Init+0x216>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a18      	ldr	r2, [pc, #96]	; (800415c <HAL_GPIO_Init+0x260>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d007      	beq.n	800410e <HAL_GPIO_Init+0x212>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a17      	ldr	r2, [pc, #92]	; (8004160 <HAL_GPIO_Init+0x264>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d101      	bne.n	800410a <HAL_GPIO_Init+0x20e>
 8004106:	2309      	movs	r3, #9
 8004108:	e02d      	b.n	8004166 <HAL_GPIO_Init+0x26a>
 800410a:	230a      	movs	r3, #10
 800410c:	e02b      	b.n	8004166 <HAL_GPIO_Init+0x26a>
 800410e:	2308      	movs	r3, #8
 8004110:	e029      	b.n	8004166 <HAL_GPIO_Init+0x26a>
 8004112:	2307      	movs	r3, #7
 8004114:	e027      	b.n	8004166 <HAL_GPIO_Init+0x26a>
 8004116:	2306      	movs	r3, #6
 8004118:	e025      	b.n	8004166 <HAL_GPIO_Init+0x26a>
 800411a:	2305      	movs	r3, #5
 800411c:	e023      	b.n	8004166 <HAL_GPIO_Init+0x26a>
 800411e:	2304      	movs	r3, #4
 8004120:	e021      	b.n	8004166 <HAL_GPIO_Init+0x26a>
 8004122:	2303      	movs	r3, #3
 8004124:	e01f      	b.n	8004166 <HAL_GPIO_Init+0x26a>
 8004126:	2302      	movs	r3, #2
 8004128:	e01d      	b.n	8004166 <HAL_GPIO_Init+0x26a>
 800412a:	2301      	movs	r3, #1
 800412c:	e01b      	b.n	8004166 <HAL_GPIO_Init+0x26a>
 800412e:	bf00      	nop
 8004130:	58000080 	.word	0x58000080
 8004134:	58024400 	.word	0x58024400
 8004138:	58000400 	.word	0x58000400
 800413c:	58020000 	.word	0x58020000
 8004140:	58020400 	.word	0x58020400
 8004144:	58020800 	.word	0x58020800
 8004148:	58020c00 	.word	0x58020c00
 800414c:	58021000 	.word	0x58021000
 8004150:	58021400 	.word	0x58021400
 8004154:	58021800 	.word	0x58021800
 8004158:	58021c00 	.word	0x58021c00
 800415c:	58022000 	.word	0x58022000
 8004160:	58022400 	.word	0x58022400
 8004164:	2300      	movs	r3, #0
 8004166:	69fa      	ldr	r2, [r7, #28]
 8004168:	f002 0203 	and.w	r2, r2, #3
 800416c:	0092      	lsls	r2, r2, #2
 800416e:	4093      	lsls	r3, r2
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	4313      	orrs	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004176:	4938      	ldr	r1, [pc, #224]	; (8004258 <HAL_GPIO_Init+0x35c>)
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	089b      	lsrs	r3, r3, #2
 800417c:	3302      	adds	r3, #2
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	43db      	mvns	r3, r3
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	4013      	ands	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	43db      	mvns	r3, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4013      	ands	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	43db      	mvns	r3, r3
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	4013      	ands	r3, r2
 80041e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80041fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	43db      	mvns	r3, r3
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	4013      	ands	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	4313      	orrs	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800422c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	3301      	adds	r3, #1
 8004238:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	fa22 f303 	lsr.w	r3, r2, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	f47f ae63 	bne.w	8003f10 <HAL_GPIO_Init+0x14>
  }
}
 800424a:	bf00      	nop
 800424c:	3724      	adds	r7, #36	; 0x24
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	58000400 	.word	0x58000400

0800425c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	807b      	strh	r3, [r7, #2]
 8004268:	4613      	mov	r3, r2
 800426a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800426c:	787b      	ldrb	r3, [r7, #1]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004272:	887a      	ldrh	r2, [r7, #2]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004278:	e003      	b.n	8004282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800427a:	887b      	ldrh	r3, [r7, #2]
 800427c:	041a      	lsls	r2, r3, #16
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	619a      	str	r2, [r3, #24]
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004298:	4b19      	ldr	r3, [pc, #100]	; (8004300 <HAL_PWREx_ConfigSupply+0x70>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b04      	cmp	r3, #4
 80042a2:	d00a      	beq.n	80042ba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80042a4:	4b16      	ldr	r3, [pc, #88]	; (8004300 <HAL_PWREx_ConfigSupply+0x70>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d001      	beq.n	80042b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e01f      	b.n	80042f6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	e01d      	b.n	80042f6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80042ba:	4b11      	ldr	r3, [pc, #68]	; (8004300 <HAL_PWREx_ConfigSupply+0x70>)
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f023 0207 	bic.w	r2, r3, #7
 80042c2:	490f      	ldr	r1, [pc, #60]	; (8004300 <HAL_PWREx_ConfigSupply+0x70>)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80042ca:	f7fd f9a5 	bl	8001618 <HAL_GetTick>
 80042ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80042d0:	e009      	b.n	80042e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80042d2:	f7fd f9a1 	bl	8001618 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042e0:	d901      	bls.n	80042e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e007      	b.n	80042f6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80042e6:	4b06      	ldr	r3, [pc, #24]	; (8004300 <HAL_PWREx_ConfigSupply+0x70>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f2:	d1ee      	bne.n	80042d2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	58024800 	.word	0x58024800

08004304 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b08c      	sub	sp, #48	; 0x30
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e3ff      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 8087 	beq.w	8004432 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004324:	4b99      	ldr	r3, [pc, #612]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800432c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800432e:	4b97      	ldr	r3, [pc, #604]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004332:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004336:	2b10      	cmp	r3, #16
 8004338:	d007      	beq.n	800434a <HAL_RCC_OscConfig+0x46>
 800433a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433c:	2b18      	cmp	r3, #24
 800433e:	d110      	bne.n	8004362 <HAL_RCC_OscConfig+0x5e>
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d10b      	bne.n	8004362 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800434a:	4b90      	ldr	r3, [pc, #576]	; (800458c <HAL_RCC_OscConfig+0x288>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d06c      	beq.n	8004430 <HAL_RCC_OscConfig+0x12c>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d168      	bne.n	8004430 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e3d9      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800436a:	d106      	bne.n	800437a <HAL_RCC_OscConfig+0x76>
 800436c:	4b87      	ldr	r3, [pc, #540]	; (800458c <HAL_RCC_OscConfig+0x288>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a86      	ldr	r2, [pc, #536]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004376:	6013      	str	r3, [r2, #0]
 8004378:	e02e      	b.n	80043d8 <HAL_RCC_OscConfig+0xd4>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10c      	bne.n	800439c <HAL_RCC_OscConfig+0x98>
 8004382:	4b82      	ldr	r3, [pc, #520]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a81      	ldr	r2, [pc, #516]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	4b7f      	ldr	r3, [pc, #508]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a7e      	ldr	r2, [pc, #504]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004394:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	e01d      	b.n	80043d8 <HAL_RCC_OscConfig+0xd4>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043a4:	d10c      	bne.n	80043c0 <HAL_RCC_OscConfig+0xbc>
 80043a6:	4b79      	ldr	r3, [pc, #484]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a78      	ldr	r2, [pc, #480]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80043ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	4b76      	ldr	r3, [pc, #472]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a75      	ldr	r2, [pc, #468]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80043b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	e00b      	b.n	80043d8 <HAL_RCC_OscConfig+0xd4>
 80043c0:	4b72      	ldr	r3, [pc, #456]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a71      	ldr	r2, [pc, #452]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80043c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ca:	6013      	str	r3, [r2, #0]
 80043cc:	4b6f      	ldr	r3, [pc, #444]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a6e      	ldr	r2, [pc, #440]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80043d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d013      	beq.n	8004408 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e0:	f7fd f91a 	bl	8001618 <HAL_GetTick>
 80043e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043e8:	f7fd f916 	bl	8001618 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b64      	cmp	r3, #100	; 0x64
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e38d      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043fa:	4b64      	ldr	r3, [pc, #400]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f0      	beq.n	80043e8 <HAL_RCC_OscConfig+0xe4>
 8004406:	e014      	b.n	8004432 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004408:	f7fd f906 	bl	8001618 <HAL_GetTick>
 800440c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004410:	f7fd f902 	bl	8001618 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b64      	cmp	r3, #100	; 0x64
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e379      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004422:	4b5a      	ldr	r3, [pc, #360]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x10c>
 800442e:	e000      	b.n	8004432 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 80ae 	beq.w	800459c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004440:	4b52      	ldr	r3, [pc, #328]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004448:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800444a:	4b50      	ldr	r3, [pc, #320]	; (800458c <HAL_RCC_OscConfig+0x288>)
 800444c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d007      	beq.n	8004466 <HAL_RCC_OscConfig+0x162>
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	2b18      	cmp	r3, #24
 800445a:	d13a      	bne.n	80044d2 <HAL_RCC_OscConfig+0x1ce>
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d135      	bne.n	80044d2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004466:	4b49      	ldr	r3, [pc, #292]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b00      	cmp	r3, #0
 8004470:	d005      	beq.n	800447e <HAL_RCC_OscConfig+0x17a>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e34b      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447e:	f7fd f8f9 	bl	8001674 <HAL_GetREVID>
 8004482:	4602      	mov	r2, r0
 8004484:	f241 0303 	movw	r3, #4099	; 0x1003
 8004488:	429a      	cmp	r2, r3
 800448a:	d817      	bhi.n	80044bc <HAL_RCC_OscConfig+0x1b8>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	2b40      	cmp	r3, #64	; 0x40
 8004492:	d108      	bne.n	80044a6 <HAL_RCC_OscConfig+0x1a2>
 8004494:	4b3d      	ldr	r3, [pc, #244]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800449c:	4a3b      	ldr	r2, [pc, #236]	; (800458c <HAL_RCC_OscConfig+0x288>)
 800449e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044a2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044a4:	e07a      	b.n	800459c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a6:	4b39      	ldr	r3, [pc, #228]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	031b      	lsls	r3, r3, #12
 80044b4:	4935      	ldr	r1, [pc, #212]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044ba:	e06f      	b.n	800459c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044bc:	4b33      	ldr	r3, [pc, #204]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	061b      	lsls	r3, r3, #24
 80044ca:	4930      	ldr	r1, [pc, #192]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044d0:	e064      	b.n	800459c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d045      	beq.n	8004566 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044da:	4b2c      	ldr	r3, [pc, #176]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f023 0219 	bic.w	r2, r3, #25
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	4929      	ldr	r1, [pc, #164]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ec:	f7fd f894 	bl	8001618 <HAL_GetTick>
 80044f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044f4:	f7fd f890 	bl	8001618 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e307      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004506:	4b21      	ldr	r3, [pc, #132]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0304 	and.w	r3, r3, #4
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004512:	f7fd f8af 	bl	8001674 <HAL_GetREVID>
 8004516:	4602      	mov	r2, r0
 8004518:	f241 0303 	movw	r3, #4099	; 0x1003
 800451c:	429a      	cmp	r2, r3
 800451e:	d817      	bhi.n	8004550 <HAL_RCC_OscConfig+0x24c>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	2b40      	cmp	r3, #64	; 0x40
 8004526:	d108      	bne.n	800453a <HAL_RCC_OscConfig+0x236>
 8004528:	4b18      	ldr	r3, [pc, #96]	; (800458c <HAL_RCC_OscConfig+0x288>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004530:	4a16      	ldr	r2, [pc, #88]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004536:	6053      	str	r3, [r2, #4]
 8004538:	e030      	b.n	800459c <HAL_RCC_OscConfig+0x298>
 800453a:	4b14      	ldr	r3, [pc, #80]	; (800458c <HAL_RCC_OscConfig+0x288>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	031b      	lsls	r3, r3, #12
 8004548:	4910      	ldr	r1, [pc, #64]	; (800458c <HAL_RCC_OscConfig+0x288>)
 800454a:	4313      	orrs	r3, r2
 800454c:	604b      	str	r3, [r1, #4]
 800454e:	e025      	b.n	800459c <HAL_RCC_OscConfig+0x298>
 8004550:	4b0e      	ldr	r3, [pc, #56]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	061b      	lsls	r3, r3, #24
 800455e:	490b      	ldr	r1, [pc, #44]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004560:	4313      	orrs	r3, r2
 8004562:	604b      	str	r3, [r1, #4]
 8004564:	e01a      	b.n	800459c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004566:	4b09      	ldr	r3, [pc, #36]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a08      	ldr	r2, [pc, #32]	; (800458c <HAL_RCC_OscConfig+0x288>)
 800456c:	f023 0301 	bic.w	r3, r3, #1
 8004570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004572:	f7fd f851 	bl	8001618 <HAL_GetTick>
 8004576:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004578:	e00a      	b.n	8004590 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800457a:	f7fd f84d 	bl	8001618 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d903      	bls.n	8004590 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e2c4      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
 800458c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004590:	4ba4      	ldr	r3, [pc, #656]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1ee      	bne.n	800457a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0310 	and.w	r3, r3, #16
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 80a9 	beq.w	80046fc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045aa:	4b9e      	ldr	r3, [pc, #632]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045b4:	4b9b      	ldr	r3, [pc, #620]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d007      	beq.n	80045d0 <HAL_RCC_OscConfig+0x2cc>
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	2b18      	cmp	r3, #24
 80045c4:	d13a      	bne.n	800463c <HAL_RCC_OscConfig+0x338>
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f003 0303 	and.w	r3, r3, #3
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d135      	bne.n	800463c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045d0:	4b94      	ldr	r3, [pc, #592]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <HAL_RCC_OscConfig+0x2e4>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	2b80      	cmp	r3, #128	; 0x80
 80045e2:	d001      	beq.n	80045e8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e296      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045e8:	f7fd f844 	bl	8001674 <HAL_GetREVID>
 80045ec:	4602      	mov	r2, r0
 80045ee:	f241 0303 	movw	r3, #4099	; 0x1003
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d817      	bhi.n	8004626 <HAL_RCC_OscConfig+0x322>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	2b20      	cmp	r3, #32
 80045fc:	d108      	bne.n	8004610 <HAL_RCC_OscConfig+0x30c>
 80045fe:	4b89      	ldr	r3, [pc, #548]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004606:	4a87      	ldr	r2, [pc, #540]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 8004608:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800460c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800460e:	e075      	b.n	80046fc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004610:	4b84      	ldr	r3, [pc, #528]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	069b      	lsls	r3, r3, #26
 800461e:	4981      	ldr	r1, [pc, #516]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 8004620:	4313      	orrs	r3, r2
 8004622:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004624:	e06a      	b.n	80046fc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004626:	4b7f      	ldr	r3, [pc, #508]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	061b      	lsls	r3, r3, #24
 8004634:	497b      	ldr	r1, [pc, #492]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 8004636:	4313      	orrs	r3, r2
 8004638:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800463a:	e05f      	b.n	80046fc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d042      	beq.n	80046ca <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004644:	4b77      	ldr	r3, [pc, #476]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a76      	ldr	r2, [pc, #472]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 800464a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800464e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004650:	f7fc ffe2 	bl	8001618 <HAL_GetTick>
 8004654:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004658:	f7fc ffde 	bl	8001618 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e255      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800466a:	4b6e      	ldr	r3, [pc, #440]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0f0      	beq.n	8004658 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004676:	f7fc fffd 	bl	8001674 <HAL_GetREVID>
 800467a:	4602      	mov	r2, r0
 800467c:	f241 0303 	movw	r3, #4099	; 0x1003
 8004680:	429a      	cmp	r2, r3
 8004682:	d817      	bhi.n	80046b4 <HAL_RCC_OscConfig+0x3b0>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	2b20      	cmp	r3, #32
 800468a:	d108      	bne.n	800469e <HAL_RCC_OscConfig+0x39a>
 800468c:	4b65      	ldr	r3, [pc, #404]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004694:	4a63      	ldr	r2, [pc, #396]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 8004696:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800469a:	6053      	str	r3, [r2, #4]
 800469c:	e02e      	b.n	80046fc <HAL_RCC_OscConfig+0x3f8>
 800469e:	4b61      	ldr	r3, [pc, #388]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	069b      	lsls	r3, r3, #26
 80046ac:	495d      	ldr	r1, [pc, #372]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	604b      	str	r3, [r1, #4]
 80046b2:	e023      	b.n	80046fc <HAL_RCC_OscConfig+0x3f8>
 80046b4:	4b5b      	ldr	r3, [pc, #364]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	061b      	lsls	r3, r3, #24
 80046c2:	4958      	ldr	r1, [pc, #352]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60cb      	str	r3, [r1, #12]
 80046c8:	e018      	b.n	80046fc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80046ca:	4b56      	ldr	r3, [pc, #344]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a55      	ldr	r2, [pc, #340]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 80046d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d6:	f7fc ff9f 	bl	8001618 <HAL_GetTick>
 80046da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80046de:	f7fc ff9b 	bl	8001618 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e212      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046f0:	4b4c      	ldr	r3, [pc, #304]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1f0      	bne.n	80046de <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0308 	and.w	r3, r3, #8
 8004704:	2b00      	cmp	r3, #0
 8004706:	d036      	beq.n	8004776 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d019      	beq.n	8004744 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004710:	4b44      	ldr	r3, [pc, #272]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 8004712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004714:	4a43      	ldr	r2, [pc, #268]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 8004716:	f043 0301 	orr.w	r3, r3, #1
 800471a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471c:	f7fc ff7c 	bl	8001618 <HAL_GetTick>
 8004720:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004724:	f7fc ff78 	bl	8001618 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e1ef      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004736:	4b3b      	ldr	r3, [pc, #236]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 8004738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0f0      	beq.n	8004724 <HAL_RCC_OscConfig+0x420>
 8004742:	e018      	b.n	8004776 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004744:	4b37      	ldr	r3, [pc, #220]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 8004746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004748:	4a36      	ldr	r2, [pc, #216]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 800474a:	f023 0301 	bic.w	r3, r3, #1
 800474e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004750:	f7fc ff62 	bl	8001618 <HAL_GetTick>
 8004754:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004758:	f7fc ff5e 	bl	8001618 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e1d5      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800476a:	4b2e      	ldr	r3, [pc, #184]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 800476c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f0      	bne.n	8004758 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0320 	and.w	r3, r3, #32
 800477e:	2b00      	cmp	r3, #0
 8004780:	d036      	beq.n	80047f0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d019      	beq.n	80047be <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800478a:	4b26      	ldr	r3, [pc, #152]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a25      	ldr	r2, [pc, #148]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 8004790:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004794:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004796:	f7fc ff3f 	bl	8001618 <HAL_GetTick>
 800479a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800479c:	e008      	b.n	80047b0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800479e:	f7fc ff3b 	bl	8001618 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e1b2      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80047b0:	4b1c      	ldr	r3, [pc, #112]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0f0      	beq.n	800479e <HAL_RCC_OscConfig+0x49a>
 80047bc:	e018      	b.n	80047f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80047be:	4b19      	ldr	r3, [pc, #100]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a18      	ldr	r2, [pc, #96]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 80047c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80047ca:	f7fc ff25 	bl	8001618 <HAL_GetTick>
 80047ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047d0:	e008      	b.n	80047e4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80047d2:	f7fc ff21 	bl	8001618 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d901      	bls.n	80047e4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e198      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047e4:	4b0f      	ldr	r3, [pc, #60]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1f0      	bne.n	80047d2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 8085 	beq.w	8004908 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047fe:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <HAL_RCC_OscConfig+0x524>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a09      	ldr	r2, [pc, #36]	; (8004828 <HAL_RCC_OscConfig+0x524>)
 8004804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004808:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800480a:	f7fc ff05 	bl	8001618 <HAL_GetTick>
 800480e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004810:	e00c      	b.n	800482c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004812:	f7fc ff01 	bl	8001618 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b64      	cmp	r3, #100	; 0x64
 800481e:	d905      	bls.n	800482c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e178      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
 8004824:	58024400 	.word	0x58024400
 8004828:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800482c:	4b96      	ldr	r3, [pc, #600]	; (8004a88 <HAL_RCC_OscConfig+0x784>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0ec      	beq.n	8004812 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d106      	bne.n	800484e <HAL_RCC_OscConfig+0x54a>
 8004840:	4b92      	ldr	r3, [pc, #584]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	4a91      	ldr	r2, [pc, #580]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004846:	f043 0301 	orr.w	r3, r3, #1
 800484a:	6713      	str	r3, [r2, #112]	; 0x70
 800484c:	e02d      	b.n	80048aa <HAL_RCC_OscConfig+0x5a6>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10c      	bne.n	8004870 <HAL_RCC_OscConfig+0x56c>
 8004856:	4b8d      	ldr	r3, [pc, #564]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485a:	4a8c      	ldr	r2, [pc, #560]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 800485c:	f023 0301 	bic.w	r3, r3, #1
 8004860:	6713      	str	r3, [r2, #112]	; 0x70
 8004862:	4b8a      	ldr	r3, [pc, #552]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004866:	4a89      	ldr	r2, [pc, #548]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004868:	f023 0304 	bic.w	r3, r3, #4
 800486c:	6713      	str	r3, [r2, #112]	; 0x70
 800486e:	e01c      	b.n	80048aa <HAL_RCC_OscConfig+0x5a6>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2b05      	cmp	r3, #5
 8004876:	d10c      	bne.n	8004892 <HAL_RCC_OscConfig+0x58e>
 8004878:	4b84      	ldr	r3, [pc, #528]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 800487a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487c:	4a83      	ldr	r2, [pc, #524]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 800487e:	f043 0304 	orr.w	r3, r3, #4
 8004882:	6713      	str	r3, [r2, #112]	; 0x70
 8004884:	4b81      	ldr	r3, [pc, #516]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004888:	4a80      	ldr	r2, [pc, #512]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 800488a:	f043 0301 	orr.w	r3, r3, #1
 800488e:	6713      	str	r3, [r2, #112]	; 0x70
 8004890:	e00b      	b.n	80048aa <HAL_RCC_OscConfig+0x5a6>
 8004892:	4b7e      	ldr	r3, [pc, #504]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004896:	4a7d      	ldr	r2, [pc, #500]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004898:	f023 0301 	bic.w	r3, r3, #1
 800489c:	6713      	str	r3, [r2, #112]	; 0x70
 800489e:	4b7b      	ldr	r3, [pc, #492]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80048a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a2:	4a7a      	ldr	r2, [pc, #488]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80048a4:	f023 0304 	bic.w	r3, r3, #4
 80048a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d015      	beq.n	80048de <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b2:	f7fc feb1 	bl	8001618 <HAL_GetTick>
 80048b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048b8:	e00a      	b.n	80048d0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048ba:	f7fc fead 	bl	8001618 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e122      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048d0:	4b6e      	ldr	r3, [pc, #440]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80048d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0ee      	beq.n	80048ba <HAL_RCC_OscConfig+0x5b6>
 80048dc:	e014      	b.n	8004908 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048de:	f7fc fe9b 	bl	8001618 <HAL_GetTick>
 80048e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048e4:	e00a      	b.n	80048fc <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048e6:	f7fc fe97 	bl	8001618 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e10c      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048fc:	4b63      	ldr	r3, [pc, #396]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80048fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1ee      	bne.n	80048e6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 8101 	beq.w	8004b14 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004912:	4b5e      	ldr	r3, [pc, #376]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800491a:	2b18      	cmp	r3, #24
 800491c:	f000 80bc 	beq.w	8004a98 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	2b02      	cmp	r3, #2
 8004926:	f040 8095 	bne.w	8004a54 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800492a:	4b58      	ldr	r3, [pc, #352]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a57      	ldr	r2, [pc, #348]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004930:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004936:	f7fc fe6f 	bl	8001618 <HAL_GetTick>
 800493a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800493c:	e008      	b.n	8004950 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800493e:	f7fc fe6b 	bl	8001618 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e0e2      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004950:	4b4e      	ldr	r3, [pc, #312]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1f0      	bne.n	800493e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800495c:	4b4b      	ldr	r3, [pc, #300]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 800495e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004960:	4b4b      	ldr	r3, [pc, #300]	; (8004a90 <HAL_RCC_OscConfig+0x78c>)
 8004962:	4013      	ands	r3, r2
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800496c:	0112      	lsls	r2, r2, #4
 800496e:	430a      	orrs	r2, r1
 8004970:	4946      	ldr	r1, [pc, #280]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004972:	4313      	orrs	r3, r2
 8004974:	628b      	str	r3, [r1, #40]	; 0x28
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	3b01      	subs	r3, #1
 800497c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004984:	3b01      	subs	r3, #1
 8004986:	025b      	lsls	r3, r3, #9
 8004988:	b29b      	uxth	r3, r3
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004990:	3b01      	subs	r3, #1
 8004992:	041b      	lsls	r3, r3, #16
 8004994:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004998:	431a      	orrs	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499e:	3b01      	subs	r3, #1
 80049a0:	061b      	lsls	r3, r3, #24
 80049a2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80049a6:	4939      	ldr	r1, [pc, #228]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80049ac:	4b37      	ldr	r3, [pc, #220]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80049ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b0:	4a36      	ldr	r2, [pc, #216]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80049b2:	f023 0301 	bic.w	r3, r3, #1
 80049b6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80049b8:	4b34      	ldr	r3, [pc, #208]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80049ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049bc:	4b35      	ldr	r3, [pc, #212]	; (8004a94 <HAL_RCC_OscConfig+0x790>)
 80049be:	4013      	ands	r3, r2
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80049c4:	00d2      	lsls	r2, r2, #3
 80049c6:	4931      	ldr	r1, [pc, #196]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80049cc:	4b2f      	ldr	r3, [pc, #188]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	f023 020c 	bic.w	r2, r3, #12
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	492c      	ldr	r1, [pc, #176]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80049de:	4b2b      	ldr	r3, [pc, #172]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80049e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e2:	f023 0202 	bic.w	r2, r3, #2
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ea:	4928      	ldr	r1, [pc, #160]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80049f0:	4b26      	ldr	r3, [pc, #152]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80049f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f4:	4a25      	ldr	r2, [pc, #148]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80049f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049fc:	4b23      	ldr	r3, [pc, #140]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	4a22      	ldr	r2, [pc, #136]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004a08:	4b20      	ldr	r3, [pc, #128]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0c:	4a1f      	ldr	r2, [pc, #124]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004a0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004a14:	4b1d      	ldr	r3, [pc, #116]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	4a1c      	ldr	r2, [pc, #112]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004a1a:	f043 0301 	orr.w	r3, r3, #1
 8004a1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a20:	4b1a      	ldr	r3, [pc, #104]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a19      	ldr	r2, [pc, #100]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2c:	f7fc fdf4 	bl	8001618 <HAL_GetTick>
 8004a30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a34:	f7fc fdf0 	bl	8001618 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e067      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a46:	4b11      	ldr	r3, [pc, #68]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0f0      	beq.n	8004a34 <HAL_RCC_OscConfig+0x730>
 8004a52:	e05f      	b.n	8004b14 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a54:	4b0d      	ldr	r3, [pc, #52]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a0c      	ldr	r2, [pc, #48]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004a5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a60:	f7fc fdda 	bl	8001618 <HAL_GetTick>
 8004a64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a68:	f7fc fdd6 	bl	8001618 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e04d      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a7a:	4b04      	ldr	r3, [pc, #16]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1f0      	bne.n	8004a68 <HAL_RCC_OscConfig+0x764>
 8004a86:	e045      	b.n	8004b14 <HAL_RCC_OscConfig+0x810>
 8004a88:	58024800 	.word	0x58024800
 8004a8c:	58024400 	.word	0x58024400
 8004a90:	fffffc0c 	.word	0xfffffc0c
 8004a94:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004a98:	4b21      	ldr	r3, [pc, #132]	; (8004b20 <HAL_RCC_OscConfig+0x81c>)
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004a9e:	4b20      	ldr	r3, [pc, #128]	; (8004b20 <HAL_RCC_OscConfig+0x81c>)
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d031      	beq.n	8004b10 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f003 0203 	and.w	r2, r3, #3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d12a      	bne.n	8004b10 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	091b      	lsrs	r3, r3, #4
 8004abe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d122      	bne.n	8004b10 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d11a      	bne.n	8004b10 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	0a5b      	lsrs	r3, r3, #9
 8004ade:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d111      	bne.n	8004b10 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	0c1b      	lsrs	r3, r3, #16
 8004af0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d108      	bne.n	8004b10 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	0e1b      	lsrs	r3, r3, #24
 8004b02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d001      	beq.n	8004b14 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e000      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3730      	adds	r7, #48	; 0x30
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	58024400 	.word	0x58024400

08004b24 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e19c      	b.n	8004e72 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b38:	4b8a      	ldr	r3, [pc, #552]	; (8004d64 <HAL_RCC_ClockConfig+0x240>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 030f 	and.w	r3, r3, #15
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d910      	bls.n	8004b68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b46:	4b87      	ldr	r3, [pc, #540]	; (8004d64 <HAL_RCC_ClockConfig+0x240>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f023 020f 	bic.w	r2, r3, #15
 8004b4e:	4985      	ldr	r1, [pc, #532]	; (8004d64 <HAL_RCC_ClockConfig+0x240>)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b56:	4b83      	ldr	r3, [pc, #524]	; (8004d64 <HAL_RCC_ClockConfig+0x240>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d001      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e184      	b.n	8004e72 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d010      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691a      	ldr	r2, [r3, #16]
 8004b78:	4b7b      	ldr	r3, [pc, #492]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d908      	bls.n	8004b96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b84:	4b78      	ldr	r3, [pc, #480]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	4975      	ldr	r1, [pc, #468]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d010      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	695a      	ldr	r2, [r3, #20]
 8004ba6:	4b70      	ldr	r3, [pc, #448]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d908      	bls.n	8004bc4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004bb2:	4b6d      	ldr	r3, [pc, #436]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	496a      	ldr	r1, [pc, #424]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0310 	and.w	r3, r3, #16
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d010      	beq.n	8004bf2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	699a      	ldr	r2, [r3, #24]
 8004bd4:	4b64      	ldr	r3, [pc, #400]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d908      	bls.n	8004bf2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004be0:	4b61      	ldr	r3, [pc, #388]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	495e      	ldr	r1, [pc, #376]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d010      	beq.n	8004c20 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	69da      	ldr	r2, [r3, #28]
 8004c02:	4b59      	ldr	r3, [pc, #356]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d908      	bls.n	8004c20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004c0e:	4b56      	ldr	r3, [pc, #344]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	4953      	ldr	r1, [pc, #332]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d010      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	4b4d      	ldr	r3, [pc, #308]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	f003 030f 	and.w	r3, r3, #15
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d908      	bls.n	8004c4e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c3c:	4b4a      	ldr	r3, [pc, #296]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	f023 020f 	bic.w	r2, r3, #15
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	4947      	ldr	r1, [pc, #284]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d055      	beq.n	8004d06 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004c5a:	4b43      	ldr	r3, [pc, #268]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	4940      	ldr	r1, [pc, #256]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d107      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c74:	4b3c      	ldr	r3, [pc, #240]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d121      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e0f6      	b.n	8004e72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2b03      	cmp	r3, #3
 8004c8a:	d107      	bne.n	8004c9c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c8c:	4b36      	ldr	r3, [pc, #216]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d115      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e0ea      	b.n	8004e72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d107      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ca4:	4b30      	ldr	r3, [pc, #192]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d109      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e0de      	b.n	8004e72 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cb4:	4b2c      	ldr	r3, [pc, #176]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e0d6      	b.n	8004e72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cc4:	4b28      	ldr	r3, [pc, #160]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	f023 0207 	bic.w	r2, r3, #7
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	4925      	ldr	r1, [pc, #148]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd6:	f7fc fc9f 	bl	8001618 <HAL_GetTick>
 8004cda:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cdc:	e00a      	b.n	8004cf4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cde:	f7fc fc9b 	bl	8001618 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e0be      	b.n	8004e72 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cf4:	4b1c      	ldr	r3, [pc, #112]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d1eb      	bne.n	8004cde <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d010      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	4b14      	ldr	r3, [pc, #80]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	f003 030f 	and.w	r3, r3, #15
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d208      	bcs.n	8004d34 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d22:	4b11      	ldr	r3, [pc, #68]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	f023 020f 	bic.w	r2, r3, #15
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	490e      	ldr	r1, [pc, #56]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d34:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <HAL_RCC_ClockConfig+0x240>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 030f 	and.w	r3, r3, #15
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d214      	bcs.n	8004d6c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d42:	4b08      	ldr	r3, [pc, #32]	; (8004d64 <HAL_RCC_ClockConfig+0x240>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f023 020f 	bic.w	r2, r3, #15
 8004d4a:	4906      	ldr	r1, [pc, #24]	; (8004d64 <HAL_RCC_ClockConfig+0x240>)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d52:	4b04      	ldr	r3, [pc, #16]	; (8004d64 <HAL_RCC_ClockConfig+0x240>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d005      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e086      	b.n	8004e72 <HAL_RCC_ClockConfig+0x34e>
 8004d64:	52002000 	.word	0x52002000
 8004d68:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0304 	and.w	r3, r3, #4
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d010      	beq.n	8004d9a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	4b3f      	ldr	r3, [pc, #252]	; (8004e7c <HAL_RCC_ClockConfig+0x358>)
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d208      	bcs.n	8004d9a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d88:	4b3c      	ldr	r3, [pc, #240]	; (8004e7c <HAL_RCC_ClockConfig+0x358>)
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	4939      	ldr	r1, [pc, #228]	; (8004e7c <HAL_RCC_ClockConfig+0x358>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d010      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695a      	ldr	r2, [r3, #20]
 8004daa:	4b34      	ldr	r3, [pc, #208]	; (8004e7c <HAL_RCC_ClockConfig+0x358>)
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d208      	bcs.n	8004dc8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004db6:	4b31      	ldr	r3, [pc, #196]	; (8004e7c <HAL_RCC_ClockConfig+0x358>)
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	492e      	ldr	r1, [pc, #184]	; (8004e7c <HAL_RCC_ClockConfig+0x358>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0310 	and.w	r3, r3, #16
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d010      	beq.n	8004df6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699a      	ldr	r2, [r3, #24]
 8004dd8:	4b28      	ldr	r3, [pc, #160]	; (8004e7c <HAL_RCC_ClockConfig+0x358>)
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d208      	bcs.n	8004df6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004de4:	4b25      	ldr	r3, [pc, #148]	; (8004e7c <HAL_RCC_ClockConfig+0x358>)
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	4922      	ldr	r1, [pc, #136]	; (8004e7c <HAL_RCC_ClockConfig+0x358>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0320 	and.w	r3, r3, #32
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d010      	beq.n	8004e24 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	69da      	ldr	r2, [r3, #28]
 8004e06:	4b1d      	ldr	r3, [pc, #116]	; (8004e7c <HAL_RCC_ClockConfig+0x358>)
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d208      	bcs.n	8004e24 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004e12:	4b1a      	ldr	r3, [pc, #104]	; (8004e7c <HAL_RCC_ClockConfig+0x358>)
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	4917      	ldr	r1, [pc, #92]	; (8004e7c <HAL_RCC_ClockConfig+0x358>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e24:	f000 f834 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 8004e28:	4601      	mov	r1, r0
 8004e2a:	4b14      	ldr	r3, [pc, #80]	; (8004e7c <HAL_RCC_ClockConfig+0x358>)
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	0a1b      	lsrs	r3, r3, #8
 8004e30:	f003 030f 	and.w	r3, r3, #15
 8004e34:	4a12      	ldr	r2, [pc, #72]	; (8004e80 <HAL_RCC_ClockConfig+0x35c>)
 8004e36:	5cd3      	ldrb	r3, [r2, r3]
 8004e38:	f003 031f 	and.w	r3, r3, #31
 8004e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8004e40:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e42:	4b0e      	ldr	r3, [pc, #56]	; (8004e7c <HAL_RCC_ClockConfig+0x358>)
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	4a0d      	ldr	r2, [pc, #52]	; (8004e80 <HAL_RCC_ClockConfig+0x35c>)
 8004e4c:	5cd3      	ldrb	r3, [r2, r3]
 8004e4e:	f003 031f 	and.w	r3, r3, #31
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	fa22 f303 	lsr.w	r3, r2, r3
 8004e58:	4a0a      	ldr	r2, [pc, #40]	; (8004e84 <HAL_RCC_ClockConfig+0x360>)
 8004e5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e5c:	4a0a      	ldr	r2, [pc, #40]	; (8004e88 <HAL_RCC_ClockConfig+0x364>)
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004e62:	4b0a      	ldr	r3, [pc, #40]	; (8004e8c <HAL_RCC_ClockConfig+0x368>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fc fb8c 	bl	8001584 <HAL_InitTick>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3718      	adds	r7, #24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	58024400 	.word	0x58024400
 8004e80:	0800cf0c 	.word	0x0800cf0c
 8004e84:	24000004 	.word	0x24000004
 8004e88:	24000000 	.word	0x24000000
 8004e8c:	24000008 	.word	0x24000008

08004e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b089      	sub	sp, #36	; 0x24
 8004e94:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e96:	4baf      	ldr	r3, [pc, #700]	; (8005154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e9e:	2b18      	cmp	r3, #24
 8004ea0:	f200 814e 	bhi.w	8005140 <HAL_RCC_GetSysClockFreq+0x2b0>
 8004ea4:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <HAL_RCC_GetSysClockFreq+0x1c>)
 8004ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eaa:	bf00      	nop
 8004eac:	08004f11 	.word	0x08004f11
 8004eb0:	08005141 	.word	0x08005141
 8004eb4:	08005141 	.word	0x08005141
 8004eb8:	08005141 	.word	0x08005141
 8004ebc:	08005141 	.word	0x08005141
 8004ec0:	08005141 	.word	0x08005141
 8004ec4:	08005141 	.word	0x08005141
 8004ec8:	08005141 	.word	0x08005141
 8004ecc:	08004f37 	.word	0x08004f37
 8004ed0:	08005141 	.word	0x08005141
 8004ed4:	08005141 	.word	0x08005141
 8004ed8:	08005141 	.word	0x08005141
 8004edc:	08005141 	.word	0x08005141
 8004ee0:	08005141 	.word	0x08005141
 8004ee4:	08005141 	.word	0x08005141
 8004ee8:	08005141 	.word	0x08005141
 8004eec:	08004f3d 	.word	0x08004f3d
 8004ef0:	08005141 	.word	0x08005141
 8004ef4:	08005141 	.word	0x08005141
 8004ef8:	08005141 	.word	0x08005141
 8004efc:	08005141 	.word	0x08005141
 8004f00:	08005141 	.word	0x08005141
 8004f04:	08005141 	.word	0x08005141
 8004f08:	08005141 	.word	0x08005141
 8004f0c:	08004f43 	.word	0x08004f43
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f10:	4b90      	ldr	r3, [pc, #576]	; (8005154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0320 	and.w	r3, r3, #32
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d009      	beq.n	8004f30 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f1c:	4b8d      	ldr	r3, [pc, #564]	; (8005154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	08db      	lsrs	r3, r3, #3
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	4a8c      	ldr	r2, [pc, #560]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004f28:	fa22 f303 	lsr.w	r3, r2, r3
 8004f2c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004f2e:	e10a      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004f30:	4b89      	ldr	r3, [pc, #548]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004f32:	61bb      	str	r3, [r7, #24]
    break;
 8004f34:	e107      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004f36:	4b89      	ldr	r3, [pc, #548]	; (800515c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004f38:	61bb      	str	r3, [r7, #24]
    break;
 8004f3a:	e104      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004f3c:	4b88      	ldr	r3, [pc, #544]	; (8005160 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004f3e:	61bb      	str	r3, [r7, #24]
    break;
 8004f40:	e101      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f42:	4b84      	ldr	r3, [pc, #528]	; (8005154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004f4c:	4b81      	ldr	r3, [pc, #516]	; (8005154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f50:	091b      	lsrs	r3, r3, #4
 8004f52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f56:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004f58:	4b7e      	ldr	r3, [pc, #504]	; (8005154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004f62:	4b7c      	ldr	r3, [pc, #496]	; (8005154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f66:	08db      	lsrs	r3, r3, #3
 8004f68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	fb02 f303 	mul.w	r3, r2, r3
 8004f72:	ee07 3a90 	vmov	s15, r3
 8004f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f7a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 80da 	beq.w	800513a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d05a      	beq.n	8005042 <HAL_RCC_GetSysClockFreq+0x1b2>
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d302      	bcc.n	8004f96 <HAL_RCC_GetSysClockFreq+0x106>
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d078      	beq.n	8005086 <HAL_RCC_GetSysClockFreq+0x1f6>
 8004f94:	e099      	b.n	80050ca <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f96:	4b6f      	ldr	r3, [pc, #444]	; (8005154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d02d      	beq.n	8004ffe <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004fa2:	4b6c      	ldr	r3, [pc, #432]	; (8005154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	08db      	lsrs	r3, r3, #3
 8004fa8:	f003 0303 	and.w	r3, r3, #3
 8004fac:	4a6a      	ldr	r2, [pc, #424]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004fae:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	ee07 3a90 	vmov	s15, r3
 8004fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	ee07 3a90 	vmov	s15, r3
 8004fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fcc:	4b61      	ldr	r3, [pc, #388]	; (8005154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd4:	ee07 3a90 	vmov	s15, r3
 8004fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fdc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fe0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8005164 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004fe4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fe8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ff0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ff8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004ffc:	e087      	b.n	800510e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	ee07 3a90 	vmov	s15, r3
 8005004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005008:	eddf 6a57 	vldr	s13, [pc, #348]	; 8005168 <HAL_RCC_GetSysClockFreq+0x2d8>
 800500c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005010:	4b50      	ldr	r3, [pc, #320]	; (8005154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005018:	ee07 3a90 	vmov	s15, r3
 800501c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005020:	ed97 6a02 	vldr	s12, [r7, #8]
 8005024:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8005164 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005028:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800502c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005030:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005034:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800503c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005040:	e065      	b.n	800510e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	ee07 3a90 	vmov	s15, r3
 8005048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800516c <HAL_RCC_GetSysClockFreq+0x2dc>
 8005050:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005054:	4b3f      	ldr	r3, [pc, #252]	; (8005154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800505c:	ee07 3a90 	vmov	s15, r3
 8005060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005064:	ed97 6a02 	vldr	s12, [r7, #8]
 8005068:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005164 <HAL_RCC_GetSysClockFreq+0x2d4>
 800506c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005070:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005074:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005078:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800507c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005080:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005084:	e043      	b.n	800510e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	ee07 3a90 	vmov	s15, r3
 800508c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005090:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005170 <HAL_RCC_GetSysClockFreq+0x2e0>
 8005094:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005098:	4b2e      	ldr	r3, [pc, #184]	; (8005154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800509a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a0:	ee07 3a90 	vmov	s15, r3
 80050a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80050ac:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005164 <HAL_RCC_GetSysClockFreq+0x2d4>
 80050b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050c8:	e021      	b.n	800510e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	ee07 3a90 	vmov	s15, r3
 80050d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800516c <HAL_RCC_GetSysClockFreq+0x2dc>
 80050d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050dc:	4b1d      	ldr	r3, [pc, #116]	; (8005154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80050de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e4:	ee07 3a90 	vmov	s15, r3
 80050e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80050f0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8005164 <HAL_RCC_GetSysClockFreq+0x2d4>
 80050f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005100:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005108:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800510c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800510e:	4b11      	ldr	r3, [pc, #68]	; (8005154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	0a5b      	lsrs	r3, r3, #9
 8005114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005118:	3301      	adds	r3, #1
 800511a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	ee07 3a90 	vmov	s15, r3
 8005122:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005126:	edd7 6a07 	vldr	s13, [r7, #28]
 800512a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800512e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005132:	ee17 3a90 	vmov	r3, s15
 8005136:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005138:	e005      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800513a:	2300      	movs	r3, #0
 800513c:	61bb      	str	r3, [r7, #24]
    break;
 800513e:	e002      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8005140:	4b06      	ldr	r3, [pc, #24]	; (800515c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005142:	61bb      	str	r3, [r7, #24]
    break;
 8005144:	bf00      	nop
  }

  return sysclockfreq;
 8005146:	69bb      	ldr	r3, [r7, #24]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3724      	adds	r7, #36	; 0x24
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	58024400 	.word	0x58024400
 8005158:	03d09000 	.word	0x03d09000
 800515c:	003d0900 	.word	0x003d0900
 8005160:	007a1200 	.word	0x007a1200
 8005164:	46000000 	.word	0x46000000
 8005168:	4c742400 	.word	0x4c742400
 800516c:	4a742400 	.word	0x4a742400
 8005170:	4af42400 	.word	0x4af42400

08005174 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800517a:	f7ff fe89 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 800517e:	4601      	mov	r1, r0
 8005180:	4b10      	ldr	r3, [pc, #64]	; (80051c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	0a1b      	lsrs	r3, r3, #8
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	4a0f      	ldr	r2, [pc, #60]	; (80051c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800518c:	5cd3      	ldrb	r3, [r2, r3]
 800518e:	f003 031f 	and.w	r3, r3, #31
 8005192:	fa21 f303 	lsr.w	r3, r1, r3
 8005196:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005198:	4b0a      	ldr	r3, [pc, #40]	; (80051c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	f003 030f 	and.w	r3, r3, #15
 80051a0:	4a09      	ldr	r2, [pc, #36]	; (80051c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80051a2:	5cd3      	ldrb	r3, [r2, r3]
 80051a4:	f003 031f 	and.w	r3, r3, #31
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	fa22 f303 	lsr.w	r3, r2, r3
 80051ae:	4a07      	ldr	r2, [pc, #28]	; (80051cc <HAL_RCC_GetHCLKFreq+0x58>)
 80051b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051b2:	4a07      	ldr	r2, [pc, #28]	; (80051d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80051b8:	4b04      	ldr	r3, [pc, #16]	; (80051cc <HAL_RCC_GetHCLKFreq+0x58>)
 80051ba:	681b      	ldr	r3, [r3, #0]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	58024400 	.word	0x58024400
 80051c8:	0800cf0c 	.word	0x0800cf0c
 80051cc:	24000004 	.word	0x24000004
 80051d0:	24000000 	.word	0x24000000

080051d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80051d8:	f7ff ffcc 	bl	8005174 <HAL_RCC_GetHCLKFreq>
 80051dc:	4601      	mov	r1, r0
 80051de:	4b06      	ldr	r3, [pc, #24]	; (80051f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	091b      	lsrs	r3, r3, #4
 80051e4:	f003 0307 	and.w	r3, r3, #7
 80051e8:	4a04      	ldr	r2, [pc, #16]	; (80051fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80051ea:	5cd3      	ldrb	r3, [r2, r3]
 80051ec:	f003 031f 	and.w	r3, r3, #31
 80051f0:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	58024400 	.word	0x58024400
 80051fc:	0800cf0c 	.word	0x0800cf0c

08005200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005204:	f7ff ffb6 	bl	8005174 <HAL_RCC_GetHCLKFreq>
 8005208:	4601      	mov	r1, r0
 800520a:	4b06      	ldr	r3, [pc, #24]	; (8005224 <HAL_RCC_GetPCLK2Freq+0x24>)
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	0a1b      	lsrs	r3, r3, #8
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	4a04      	ldr	r2, [pc, #16]	; (8005228 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005216:	5cd3      	ldrb	r3, [r2, r3]
 8005218:	f003 031f 	and.w	r3, r3, #31
 800521c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005220:	4618      	mov	r0, r3
 8005222:	bd80      	pop	{r7, pc}
 8005224:	58024400 	.word	0x58024400
 8005228:	0800cf0c 	.word	0x0800cf0c

0800522c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005234:	2300      	movs	r3, #0
 8005236:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005238:	2300      	movs	r3, #0
 800523a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d03d      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800524c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005250:	d013      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005256:	d802      	bhi.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005258:	2b00      	cmp	r3, #0
 800525a:	d007      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800525c:	e01f      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800525e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005262:	d013      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005264:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005268:	d01c      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800526a:	e018      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800526c:	4baf      	ldr	r3, [pc, #700]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800526e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005270:	4aae      	ldr	r2, [pc, #696]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005276:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005278:	e015      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	3304      	adds	r3, #4
 800527e:	2102      	movs	r1, #2
 8005280:	4618      	mov	r0, r3
 8005282:	f001 f96f 	bl	8006564 <RCCEx_PLL2_Config>
 8005286:	4603      	mov	r3, r0
 8005288:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800528a:	e00c      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3324      	adds	r3, #36	; 0x24
 8005290:	2102      	movs	r1, #2
 8005292:	4618      	mov	r0, r3
 8005294:	f001 fa18 	bl	80066c8 <RCCEx_PLL3_Config>
 8005298:	4603      	mov	r3, r0
 800529a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800529c:	e003      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	75fb      	strb	r3, [r7, #23]
      break;
 80052a2:	e000      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80052a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052a6:	7dfb      	ldrb	r3, [r7, #23]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d109      	bne.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80052ac:	4b9f      	ldr	r3, [pc, #636]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052b8:	499c      	ldr	r1, [pc, #624]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	650b      	str	r3, [r1, #80]	; 0x50
 80052be:	e001      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c0:	7dfb      	ldrb	r3, [r7, #23]
 80052c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d03d      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	d826      	bhi.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80052d8:	a201      	add	r2, pc, #4	; (adr r2, 80052e0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80052da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052de:	bf00      	nop
 80052e0:	080052f5 	.word	0x080052f5
 80052e4:	08005303 	.word	0x08005303
 80052e8:	08005315 	.word	0x08005315
 80052ec:	0800532d 	.word	0x0800532d
 80052f0:	0800532d 	.word	0x0800532d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052f4:	4b8d      	ldr	r3, [pc, #564]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f8:	4a8c      	ldr	r2, [pc, #560]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005300:	e015      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	3304      	adds	r3, #4
 8005306:	2100      	movs	r1, #0
 8005308:	4618      	mov	r0, r3
 800530a:	f001 f92b 	bl	8006564 <RCCEx_PLL2_Config>
 800530e:	4603      	mov	r3, r0
 8005310:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005312:	e00c      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	3324      	adds	r3, #36	; 0x24
 8005318:	2100      	movs	r1, #0
 800531a:	4618      	mov	r0, r3
 800531c:	f001 f9d4 	bl	80066c8 <RCCEx_PLL3_Config>
 8005320:	4603      	mov	r3, r0
 8005322:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005324:	e003      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	75fb      	strb	r3, [r7, #23]
      break;
 800532a:	e000      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800532c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800532e:	7dfb      	ldrb	r3, [r7, #23]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d109      	bne.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005334:	4b7d      	ldr	r3, [pc, #500]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005338:	f023 0207 	bic.w	r2, r3, #7
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005340:	497a      	ldr	r1, [pc, #488]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005342:	4313      	orrs	r3, r2
 8005344:	650b      	str	r3, [r1, #80]	; 0x50
 8005346:	e001      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005348:	7dfb      	ldrb	r3, [r7, #23]
 800534a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005354:	2b00      	cmp	r3, #0
 8005356:	d03e      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800535c:	2b80      	cmp	r3, #128	; 0x80
 800535e:	d01c      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005360:	2b80      	cmp	r3, #128	; 0x80
 8005362:	d804      	bhi.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8005364:	2b00      	cmp	r3, #0
 8005366:	d008      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005368:	2b40      	cmp	r3, #64	; 0x40
 800536a:	d00d      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800536c:	e01e      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x180>
 800536e:	2bc0      	cmp	r3, #192	; 0xc0
 8005370:	d01f      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005376:	d01e      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005378:	e018      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800537a:	4b6c      	ldr	r3, [pc, #432]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800537c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537e:	4a6b      	ldr	r2, [pc, #428]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005384:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005386:	e017      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3304      	adds	r3, #4
 800538c:	2100      	movs	r1, #0
 800538e:	4618      	mov	r0, r3
 8005390:	f001 f8e8 	bl	8006564 <RCCEx_PLL2_Config>
 8005394:	4603      	mov	r3, r0
 8005396:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005398:	e00e      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	3324      	adds	r3, #36	; 0x24
 800539e:	2100      	movs	r1, #0
 80053a0:	4618      	mov	r0, r3
 80053a2:	f001 f991 	bl	80066c8 <RCCEx_PLL3_Config>
 80053a6:	4603      	mov	r3, r0
 80053a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80053aa:	e005      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	75fb      	strb	r3, [r7, #23]
      break;
 80053b0:	e002      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80053b2:	bf00      	nop
 80053b4:	e000      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80053b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053b8:	7dfb      	ldrb	r3, [r7, #23]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d109      	bne.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80053be:	4b5b      	ldr	r3, [pc, #364]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80053c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ca:	4958      	ldr	r1, [pc, #352]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	650b      	str	r3, [r1, #80]	; 0x50
 80053d0:	e001      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d2:	7dfb      	ldrb	r3, [r7, #23]
 80053d4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d044      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80053e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053ec:	d01f      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80053ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053f2:	d805      	bhi.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00a      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80053f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053fc:	d00e      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80053fe:	e01f      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8005400:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005404:	d01f      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8005406:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800540a:	d01e      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800540c:	e018      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800540e:	4b47      	ldr	r3, [pc, #284]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005412:	4a46      	ldr	r2, [pc, #280]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005418:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800541a:	e017      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3304      	adds	r3, #4
 8005420:	2100      	movs	r1, #0
 8005422:	4618      	mov	r0, r3
 8005424:	f001 f89e 	bl	8006564 <RCCEx_PLL2_Config>
 8005428:	4603      	mov	r3, r0
 800542a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800542c:	e00e      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	3324      	adds	r3, #36	; 0x24
 8005432:	2100      	movs	r1, #0
 8005434:	4618      	mov	r0, r3
 8005436:	f001 f947 	bl	80066c8 <RCCEx_PLL3_Config>
 800543a:	4603      	mov	r3, r0
 800543c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800543e:	e005      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	75fb      	strb	r3, [r7, #23]
      break;
 8005444:	e002      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005446:	bf00      	nop
 8005448:	e000      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800544a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800544c:	7dfb      	ldrb	r3, [r7, #23]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10a      	bne.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005452:	4b36      	ldr	r3, [pc, #216]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005456:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005460:	4932      	ldr	r1, [pc, #200]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005462:	4313      	orrs	r3, r2
 8005464:	658b      	str	r3, [r1, #88]	; 0x58
 8005466:	e001      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005468:	7dfb      	ldrb	r3, [r7, #23]
 800546a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005474:	2b00      	cmp	r3, #0
 8005476:	d044      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800547e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005482:	d01f      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005484:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005488:	d805      	bhi.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800548e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005492:	d00e      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005494:	e01f      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8005496:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800549a:	d01f      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800549c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054a0:	d01e      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80054a2:	e018      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054a4:	4b21      	ldr	r3, [pc, #132]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80054a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a8:	4a20      	ldr	r2, [pc, #128]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80054aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80054b0:	e017      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	3304      	adds	r3, #4
 80054b6:	2100      	movs	r1, #0
 80054b8:	4618      	mov	r0, r3
 80054ba:	f001 f853 	bl	8006564 <RCCEx_PLL2_Config>
 80054be:	4603      	mov	r3, r0
 80054c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80054c2:	e00e      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3324      	adds	r3, #36	; 0x24
 80054c8:	2100      	movs	r1, #0
 80054ca:	4618      	mov	r0, r3
 80054cc:	f001 f8fc 	bl	80066c8 <RCCEx_PLL3_Config>
 80054d0:	4603      	mov	r3, r0
 80054d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80054d4:	e005      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	75fb      	strb	r3, [r7, #23]
      break;
 80054da:	e002      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80054dc:	bf00      	nop
 80054de:	e000      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80054e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054e2:	7dfb      	ldrb	r3, [r7, #23]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10a      	bne.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80054e8:	4b10      	ldr	r3, [pc, #64]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80054ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80054f6:	490d      	ldr	r1, [pc, #52]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	658b      	str	r3, [r1, #88]	; 0x58
 80054fc:	e001      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054fe:	7dfb      	ldrb	r3, [r7, #23]
 8005500:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d035      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005512:	2b10      	cmp	r3, #16
 8005514:	d00c      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8005516:	2b10      	cmp	r3, #16
 8005518:	d802      	bhi.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800551a:	2b00      	cmp	r3, #0
 800551c:	d01b      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800551e:	e017      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005520:	2b20      	cmp	r3, #32
 8005522:	d00c      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005524:	2b30      	cmp	r3, #48	; 0x30
 8005526:	d018      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005528:	e012      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800552a:	bf00      	nop
 800552c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005530:	4baf      	ldr	r3, [pc, #700]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	4aae      	ldr	r2, [pc, #696]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800553a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800553c:	e00e      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	3304      	adds	r3, #4
 8005542:	2102      	movs	r1, #2
 8005544:	4618      	mov	r0, r3
 8005546:	f001 f80d 	bl	8006564 <RCCEx_PLL2_Config>
 800554a:	4603      	mov	r3, r0
 800554c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800554e:	e005      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	75fb      	strb	r3, [r7, #23]
      break;
 8005554:	e002      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005556:	bf00      	nop
 8005558:	e000      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800555a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800555c:	7dfb      	ldrb	r3, [r7, #23]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d109      	bne.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005562:	4ba3      	ldr	r3, [pc, #652]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005566:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800556e:	49a0      	ldr	r1, [pc, #640]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005570:	4313      	orrs	r3, r2
 8005572:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005574:	e001      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005576:	7dfb      	ldrb	r3, [r7, #23]
 8005578:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d042      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800558a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800558e:	d01f      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005594:	d805      	bhi.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00a      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800559a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800559e:	d00e      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x392>
 80055a0:	e01f      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80055a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055a6:	d01f      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80055a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055ac:	d01e      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80055ae:	e018      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055b0:	4b8f      	ldr	r3, [pc, #572]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b4:	4a8e      	ldr	r2, [pc, #568]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80055bc:	e017      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	3304      	adds	r3, #4
 80055c2:	2100      	movs	r1, #0
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 ffcd 	bl	8006564 <RCCEx_PLL2_Config>
 80055ca:	4603      	mov	r3, r0
 80055cc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80055ce:	e00e      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3324      	adds	r3, #36	; 0x24
 80055d4:	2100      	movs	r1, #0
 80055d6:	4618      	mov	r0, r3
 80055d8:	f001 f876 	bl	80066c8 <RCCEx_PLL3_Config>
 80055dc:	4603      	mov	r3, r0
 80055de:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80055e0:	e005      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	75fb      	strb	r3, [r7, #23]
      break;
 80055e6:	e002      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80055e8:	bf00      	nop
 80055ea:	e000      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80055ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055ee:	7dfb      	ldrb	r3, [r7, #23]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d109      	bne.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80055f4:	4b7e      	ldr	r3, [pc, #504]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005600:	497b      	ldr	r1, [pc, #492]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005602:	4313      	orrs	r3, r2
 8005604:	650b      	str	r3, [r1, #80]	; 0x50
 8005606:	e001      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005608:	7dfb      	ldrb	r3, [r7, #23]
 800560a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d042      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800561c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005620:	d01b      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005622:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005626:	d805      	bhi.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005628:	2b00      	cmp	r3, #0
 800562a:	d022      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800562c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005630:	d00a      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005632:	e01b      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005634:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005638:	d01d      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800563a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800563e:	d01c      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8005640:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005644:	d01b      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8005646:	e011      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3304      	adds	r3, #4
 800564c:	2101      	movs	r1, #1
 800564e:	4618      	mov	r0, r3
 8005650:	f000 ff88 	bl	8006564 <RCCEx_PLL2_Config>
 8005654:	4603      	mov	r3, r0
 8005656:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005658:	e012      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	3324      	adds	r3, #36	; 0x24
 800565e:	2101      	movs	r1, #1
 8005660:	4618      	mov	r0, r3
 8005662:	f001 f831 	bl	80066c8 <RCCEx_PLL3_Config>
 8005666:	4603      	mov	r3, r0
 8005668:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800566a:	e009      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	75fb      	strb	r3, [r7, #23]
      break;
 8005670:	e006      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005672:	bf00      	nop
 8005674:	e004      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005676:	bf00      	nop
 8005678:	e002      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800567a:	bf00      	nop
 800567c:	e000      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800567e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005680:	7dfb      	ldrb	r3, [r7, #23]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d109      	bne.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005686:	4b5a      	ldr	r3, [pc, #360]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800568a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005692:	4957      	ldr	r1, [pc, #348]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005694:	4313      	orrs	r3, r2
 8005696:	650b      	str	r3, [r1, #80]	; 0x50
 8005698:	e001      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800569a:	7dfb      	ldrb	r3, [r7, #23]
 800569c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d044      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80056b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056b4:	d01b      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80056b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056ba:	d805      	bhi.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d022      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80056c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056c4:	d00a      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80056c6:	e01b      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80056c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056cc:	d01d      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80056ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056d2:	d01c      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80056d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80056d8:	d01b      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80056da:	e011      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	3304      	adds	r3, #4
 80056e0:	2101      	movs	r1, #1
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 ff3e 	bl	8006564 <RCCEx_PLL2_Config>
 80056e8:	4603      	mov	r3, r0
 80056ea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80056ec:	e012      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	3324      	adds	r3, #36	; 0x24
 80056f2:	2101      	movs	r1, #1
 80056f4:	4618      	mov	r0, r3
 80056f6:	f000 ffe7 	bl	80066c8 <RCCEx_PLL3_Config>
 80056fa:	4603      	mov	r3, r0
 80056fc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80056fe:	e009      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	75fb      	strb	r3, [r7, #23]
      break;
 8005704:	e006      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005706:	bf00      	nop
 8005708:	e004      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800570a:	bf00      	nop
 800570c:	e002      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800570e:	bf00      	nop
 8005710:	e000      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005712:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005714:	7dfb      	ldrb	r3, [r7, #23]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10a      	bne.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800571a:	4b35      	ldr	r3, [pc, #212]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800571c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005728:	4931      	ldr	r1, [pc, #196]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800572a:	4313      	orrs	r3, r2
 800572c:	658b      	str	r3, [r1, #88]	; 0x58
 800572e:	e001      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005730:	7dfb      	ldrb	r3, [r7, #23]
 8005732:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d02d      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005744:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005748:	d005      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800574a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800574e:	d009      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8005750:	2b00      	cmp	r3, #0
 8005752:	d013      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005754:	e00f      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005756:	4b26      	ldr	r3, [pc, #152]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575a:	4a25      	ldr	r2, [pc, #148]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800575c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005760:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005762:	e00c      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3304      	adds	r3, #4
 8005768:	2101      	movs	r1, #1
 800576a:	4618      	mov	r0, r3
 800576c:	f000 fefa 	bl	8006564 <RCCEx_PLL2_Config>
 8005770:	4603      	mov	r3, r0
 8005772:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005774:	e003      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	75fb      	strb	r3, [r7, #23]
      break;
 800577a:	e000      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800577c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800577e:	7dfb      	ldrb	r3, [r7, #23]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d109      	bne.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005784:	4b1a      	ldr	r3, [pc, #104]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005788:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005790:	4917      	ldr	r1, [pc, #92]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005792:	4313      	orrs	r3, r2
 8005794:	650b      	str	r3, [r1, #80]	; 0x50
 8005796:	e001      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005798:	7dfb      	ldrb	r3, [r7, #23]
 800579a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d035      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ac:	2b03      	cmp	r3, #3
 80057ae:	d81b      	bhi.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80057b0:	a201      	add	r2, pc, #4	; (adr r2, 80057b8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80057b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b6:	bf00      	nop
 80057b8:	080057f5 	.word	0x080057f5
 80057bc:	080057c9 	.word	0x080057c9
 80057c0:	080057d7 	.word	0x080057d7
 80057c4:	080057f5 	.word	0x080057f5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057c8:	4b09      	ldr	r3, [pc, #36]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80057ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057cc:	4a08      	ldr	r2, [pc, #32]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80057ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80057d4:	e00f      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	3304      	adds	r3, #4
 80057da:	2102      	movs	r1, #2
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 fec1 	bl	8006564 <RCCEx_PLL2_Config>
 80057e2:	4603      	mov	r3, r0
 80057e4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80057e6:	e006      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	75fb      	strb	r3, [r7, #23]
      break;
 80057ec:	e003      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80057ee:	bf00      	nop
 80057f0:	58024400 	.word	0x58024400
      break;
 80057f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057f6:	7dfb      	ldrb	r3, [r7, #23]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d109      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80057fc:	4bba      	ldr	r3, [pc, #744]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80057fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005800:	f023 0203 	bic.w	r2, r3, #3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005808:	49b7      	ldr	r1, [pc, #732]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800580a:	4313      	orrs	r3, r2
 800580c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800580e:	e001      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005810:	7dfb      	ldrb	r3, [r7, #23]
 8005812:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 8086 	beq.w	800592e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005822:	4bb2      	ldr	r3, [pc, #712]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4ab1      	ldr	r2, [pc, #708]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800582c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800582e:	f7fb fef3 	bl	8001618 <HAL_GetTick>
 8005832:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005834:	e009      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005836:	f7fb feef 	bl	8001618 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b64      	cmp	r3, #100	; 0x64
 8005842:	d902      	bls.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	75fb      	strb	r3, [r7, #23]
        break;
 8005848:	e005      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800584a:	4ba8      	ldr	r3, [pc, #672]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005852:	2b00      	cmp	r3, #0
 8005854:	d0ef      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8005856:	7dfb      	ldrb	r3, [r7, #23]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d166      	bne.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800585c:	4ba2      	ldr	r3, [pc, #648]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800585e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005866:	4053      	eors	r3, r2
 8005868:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800586c:	2b00      	cmp	r3, #0
 800586e:	d013      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005870:	4b9d      	ldr	r3, [pc, #628]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005878:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800587a:	4b9b      	ldr	r3, [pc, #620]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800587c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587e:	4a9a      	ldr	r2, [pc, #616]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005884:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005886:	4b98      	ldr	r3, [pc, #608]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588a:	4a97      	ldr	r2, [pc, #604]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800588c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005890:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005892:	4a95      	ldr	r2, [pc, #596]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800589e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058a2:	d115      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a4:	f7fb feb8 	bl	8001618 <HAL_GetTick>
 80058a8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058aa:	e00b      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ac:	f7fb feb4 	bl	8001618 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d902      	bls.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	75fb      	strb	r3, [r7, #23]
            break;
 80058c2:	e005      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058c4:	4b88      	ldr	r3, [pc, #544]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80058c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d0ed      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80058d0:	7dfb      	ldrb	r3, [r7, #23]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d126      	bne.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058e4:	d10d      	bne.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80058e6:	4b80      	ldr	r3, [pc, #512]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058f4:	0919      	lsrs	r1, r3, #4
 80058f6:	4b7e      	ldr	r3, [pc, #504]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80058f8:	400b      	ands	r3, r1
 80058fa:	497b      	ldr	r1, [pc, #492]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	610b      	str	r3, [r1, #16]
 8005900:	e005      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005902:	4b79      	ldr	r3, [pc, #484]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	4a78      	ldr	r2, [pc, #480]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005908:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800590c:	6113      	str	r3, [r2, #16]
 800590e:	4b76      	ldr	r3, [pc, #472]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005910:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800591c:	4972      	ldr	r1, [pc, #456]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800591e:	4313      	orrs	r3, r2
 8005920:	670b      	str	r3, [r1, #112]	; 0x70
 8005922:	e004      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005924:	7dfb      	ldrb	r3, [r7, #23]
 8005926:	75bb      	strb	r3, [r7, #22]
 8005928:	e001      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800592a:	7dfb      	ldrb	r3, [r7, #23]
 800592c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b00      	cmp	r3, #0
 8005938:	d07d      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800593e:	2b28      	cmp	r3, #40	; 0x28
 8005940:	d866      	bhi.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8005942:	a201      	add	r2, pc, #4	; (adr r2, 8005948 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005948:	08005a17 	.word	0x08005a17
 800594c:	08005a11 	.word	0x08005a11
 8005950:	08005a11 	.word	0x08005a11
 8005954:	08005a11 	.word	0x08005a11
 8005958:	08005a11 	.word	0x08005a11
 800595c:	08005a11 	.word	0x08005a11
 8005960:	08005a11 	.word	0x08005a11
 8005964:	08005a11 	.word	0x08005a11
 8005968:	080059ed 	.word	0x080059ed
 800596c:	08005a11 	.word	0x08005a11
 8005970:	08005a11 	.word	0x08005a11
 8005974:	08005a11 	.word	0x08005a11
 8005978:	08005a11 	.word	0x08005a11
 800597c:	08005a11 	.word	0x08005a11
 8005980:	08005a11 	.word	0x08005a11
 8005984:	08005a11 	.word	0x08005a11
 8005988:	080059ff 	.word	0x080059ff
 800598c:	08005a11 	.word	0x08005a11
 8005990:	08005a11 	.word	0x08005a11
 8005994:	08005a11 	.word	0x08005a11
 8005998:	08005a11 	.word	0x08005a11
 800599c:	08005a11 	.word	0x08005a11
 80059a0:	08005a11 	.word	0x08005a11
 80059a4:	08005a11 	.word	0x08005a11
 80059a8:	08005a17 	.word	0x08005a17
 80059ac:	08005a11 	.word	0x08005a11
 80059b0:	08005a11 	.word	0x08005a11
 80059b4:	08005a11 	.word	0x08005a11
 80059b8:	08005a11 	.word	0x08005a11
 80059bc:	08005a11 	.word	0x08005a11
 80059c0:	08005a11 	.word	0x08005a11
 80059c4:	08005a11 	.word	0x08005a11
 80059c8:	08005a17 	.word	0x08005a17
 80059cc:	08005a11 	.word	0x08005a11
 80059d0:	08005a11 	.word	0x08005a11
 80059d4:	08005a11 	.word	0x08005a11
 80059d8:	08005a11 	.word	0x08005a11
 80059dc:	08005a11 	.word	0x08005a11
 80059e0:	08005a11 	.word	0x08005a11
 80059e4:	08005a11 	.word	0x08005a11
 80059e8:	08005a17 	.word	0x08005a17
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3304      	adds	r3, #4
 80059f0:	2101      	movs	r1, #1
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 fdb6 	bl	8006564 <RCCEx_PLL2_Config>
 80059f8:	4603      	mov	r3, r0
 80059fa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80059fc:	e00c      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	3324      	adds	r3, #36	; 0x24
 8005a02:	2101      	movs	r1, #1
 8005a04:	4618      	mov	r0, r3
 8005a06:	f000 fe5f 	bl	80066c8 <RCCEx_PLL3_Config>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005a0e:	e003      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	75fb      	strb	r3, [r7, #23]
      break;
 8005a14:	e000      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8005a16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a18:	7dfb      	ldrb	r3, [r7, #23]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d109      	bne.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005a1e:	4b32      	ldr	r3, [pc, #200]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a22:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a2a:	492f      	ldr	r1, [pc, #188]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	654b      	str	r3, [r1, #84]	; 0x54
 8005a30:	e001      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a32:	7dfb      	ldrb	r3, [r7, #23]
 8005a34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d037      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a46:	2b05      	cmp	r3, #5
 8005a48:	d820      	bhi.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x860>
 8005a4a:	a201      	add	r2, pc, #4	; (adr r2, 8005a50 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a50:	08005a93 	.word	0x08005a93
 8005a54:	08005a69 	.word	0x08005a69
 8005a58:	08005a7b 	.word	0x08005a7b
 8005a5c:	08005a93 	.word	0x08005a93
 8005a60:	08005a93 	.word	0x08005a93
 8005a64:	08005a93 	.word	0x08005a93
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 fd78 	bl	8006564 <RCCEx_PLL2_Config>
 8005a74:	4603      	mov	r3, r0
 8005a76:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005a78:	e00c      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3324      	adds	r3, #36	; 0x24
 8005a7e:	2101      	movs	r1, #1
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 fe21 	bl	80066c8 <RCCEx_PLL3_Config>
 8005a86:	4603      	mov	r3, r0
 8005a88:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005a8a:	e003      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a90:	e000      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8005a92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a94:	7dfb      	ldrb	r3, [r7, #23]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d109      	bne.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005a9a:	4b13      	ldr	r3, [pc, #76]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9e:	f023 0207 	bic.w	r2, r3, #7
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aa6:	4910      	ldr	r1, [pc, #64]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	654b      	str	r3, [r1, #84]	; 0x54
 8005aac:	e001      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aae:	7dfb      	ldrb	r3, [r7, #23]
 8005ab0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0304 	and.w	r3, r3, #4
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d040      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ac4:	2b05      	cmp	r3, #5
 8005ac6:	d827      	bhi.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8005ac8:	a201      	add	r2, pc, #4	; (adr r2, 8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8005aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ace:	bf00      	nop
 8005ad0:	08005b1f 	.word	0x08005b1f
 8005ad4:	08005af5 	.word	0x08005af5
 8005ad8:	08005b07 	.word	0x08005b07
 8005adc:	08005b1f 	.word	0x08005b1f
 8005ae0:	08005b1f 	.word	0x08005b1f
 8005ae4:	08005b1f 	.word	0x08005b1f
 8005ae8:	58024400 	.word	0x58024400
 8005aec:	58024800 	.word	0x58024800
 8005af0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	3304      	adds	r3, #4
 8005af8:	2101      	movs	r1, #1
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 fd32 	bl	8006564 <RCCEx_PLL2_Config>
 8005b00:	4603      	mov	r3, r0
 8005b02:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005b04:	e00c      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	3324      	adds	r3, #36	; 0x24
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 fddb 	bl	80066c8 <RCCEx_PLL3_Config>
 8005b12:	4603      	mov	r3, r0
 8005b14:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005b16:	e003      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b1c:	e000      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8005b1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b20:	7dfb      	ldrb	r3, [r7, #23]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10a      	bne.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b26:	4bb2      	ldr	r3, [pc, #712]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2a:	f023 0207 	bic.w	r2, r3, #7
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b34:	49ae      	ldr	r1, [pc, #696]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	658b      	str	r3, [r1, #88]	; 0x58
 8005b3a:	e001      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b3c:	7dfb      	ldrb	r3, [r7, #23]
 8005b3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0320 	and.w	r3, r3, #32
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d044      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b56:	d01b      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8005b58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b5c:	d805      	bhi.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d022      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8005b62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b66:	d00a      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005b68:	e01b      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b6e:	d01d      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x980>
 8005b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b74:	d01c      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005b76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b7a:	d01b      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005b7c:	e011      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	3304      	adds	r3, #4
 8005b82:	2100      	movs	r1, #0
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 fced 	bl	8006564 <RCCEx_PLL2_Config>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005b8e:	e012      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	3324      	adds	r3, #36	; 0x24
 8005b94:	2102      	movs	r1, #2
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 fd96 	bl	80066c8 <RCCEx_PLL3_Config>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005ba0:	e009      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ba6:	e006      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005ba8:	bf00      	nop
 8005baa:	e004      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005bac:	bf00      	nop
 8005bae:	e002      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005bb0:	bf00      	nop
 8005bb2:	e000      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005bb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bb6:	7dfb      	ldrb	r3, [r7, #23]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10a      	bne.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bbc:	4b8c      	ldr	r3, [pc, #560]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bca:	4989      	ldr	r1, [pc, #548]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	654b      	str	r3, [r1, #84]	; 0x54
 8005bd0:	e001      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd2:	7dfb      	ldrb	r3, [r7, #23]
 8005bd4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d044      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005be8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bec:	d01b      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8005bee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bf2:	d805      	bhi.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d022      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bfc:	d00a      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8005bfe:	e01b      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c04:	d01d      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005c06:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005c0a:	d01c      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8005c0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c10:	d01b      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8005c12:	e011      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	3304      	adds	r3, #4
 8005c18:	2100      	movs	r1, #0
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f000 fca2 	bl	8006564 <RCCEx_PLL2_Config>
 8005c20:	4603      	mov	r3, r0
 8005c22:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005c24:	e012      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3324      	adds	r3, #36	; 0x24
 8005c2a:	2102      	movs	r1, #2
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f000 fd4b 	bl	80066c8 <RCCEx_PLL3_Config>
 8005c32:	4603      	mov	r3, r0
 8005c34:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005c36:	e009      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c3c:	e006      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005c3e:	bf00      	nop
 8005c40:	e004      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005c42:	bf00      	nop
 8005c44:	e002      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005c46:	bf00      	nop
 8005c48:	e000      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005c4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c4c:	7dfb      	ldrb	r3, [r7, #23]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10a      	bne.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c52:	4b67      	ldr	r3, [pc, #412]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c56:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c60:	4963      	ldr	r1, [pc, #396]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	658b      	str	r3, [r1, #88]	; 0x58
 8005c66:	e001      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c68:	7dfb      	ldrb	r3, [r7, #23]
 8005c6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d044      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c82:	d01b      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8005c84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c88:	d805      	bhi.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d022      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c92:	d00a      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005c94:	e01b      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8005c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c9a:	d01d      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005c9c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005ca0:	d01c      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8005ca2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005ca6:	d01b      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005ca8:	e011      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	3304      	adds	r3, #4
 8005cae:	2100      	movs	r1, #0
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 fc57 	bl	8006564 <RCCEx_PLL2_Config>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005cba:	e012      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	3324      	adds	r3, #36	; 0x24
 8005cc0:	2102      	movs	r1, #2
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f000 fd00 	bl	80066c8 <RCCEx_PLL3_Config>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005ccc:	e009      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	75fb      	strb	r3, [r7, #23]
      break;
 8005cd2:	e006      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005cd4:	bf00      	nop
 8005cd6:	e004      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005cd8:	bf00      	nop
 8005cda:	e002      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005cdc:	bf00      	nop
 8005cde:	e000      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005ce0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ce2:	7dfb      	ldrb	r3, [r7, #23]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10a      	bne.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005ce8:	4b41      	ldr	r3, [pc, #260]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cf6:	493e      	ldr	r1, [pc, #248]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	658b      	str	r3, [r1, #88]	; 0x58
 8005cfc:	e001      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cfe:	7dfb      	ldrb	r3, [r7, #23]
 8005d00:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0308 	and.w	r3, r3, #8
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d01a      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d18:	d10a      	bne.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	3324      	adds	r3, #36	; 0x24
 8005d1e:	2102      	movs	r1, #2
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 fcd1 	bl	80066c8 <RCCEx_PLL3_Config>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005d30:	4b2f      	ldr	r3, [pc, #188]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d3e:	492c      	ldr	r1, [pc, #176]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0310 	and.w	r3, r3, #16
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d01a      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d5a:	d10a      	bne.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	3324      	adds	r3, #36	; 0x24
 8005d60:	2102      	movs	r1, #2
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 fcb0 	bl	80066c8 <RCCEx_PLL3_Config>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d72:	4b1f      	ldr	r3, [pc, #124]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d80:	491b      	ldr	r1, [pc, #108]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d032      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d9c:	d00d      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8005d9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005da2:	d016      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d111      	bne.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	3304      	adds	r3, #4
 8005dac:	2100      	movs	r1, #0
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 fbd8 	bl	8006564 <RCCEx_PLL2_Config>
 8005db4:	4603      	mov	r3, r0
 8005db6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005db8:	e00c      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	3324      	adds	r3, #36	; 0x24
 8005dbe:	2102      	movs	r1, #2
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f000 fc81 	bl	80066c8 <RCCEx_PLL3_Config>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005dca:	e003      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	75fb      	strb	r3, [r7, #23]
      break;
 8005dd0:	e000      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8005dd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dd4:	7dfb      	ldrb	r3, [r7, #23]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10c      	bne.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005dda:	4b05      	ldr	r3, [pc, #20]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dde:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005de8:	4901      	ldr	r1, [pc, #4]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	658b      	str	r3, [r1, #88]	; 0x58
 8005dee:	e003      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005df0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df4:	7dfb      	ldrb	r3, [r7, #23]
 8005df6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d02f      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e0e:	d00c      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005e10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e14:	d015      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8005e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e1a:	d10f      	bne.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e1c:	4b79      	ldr	r3, [pc, #484]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e20:	4a78      	ldr	r2, [pc, #480]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005e28:	e00c      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	3324      	adds	r3, #36	; 0x24
 8005e2e:	2101      	movs	r1, #1
 8005e30:	4618      	mov	r0, r3
 8005e32:	f000 fc49 	bl	80066c8 <RCCEx_PLL3_Config>
 8005e36:	4603      	mov	r3, r0
 8005e38:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005e3a:	e003      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e40:	e000      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8005e42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e44:	7dfb      	ldrb	r3, [r7, #23]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10a      	bne.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e4a:	4b6e      	ldr	r3, [pc, #440]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e58:	496a      	ldr	r1, [pc, #424]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	654b      	str	r3, [r1, #84]	; 0x54
 8005e5e:	e001      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e60:	7dfb      	ldrb	r3, [r7, #23]
 8005e62:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d029      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e7c:	d007      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8005e7e:	e00f      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e80:	4b60      	ldr	r3, [pc, #384]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e84:	4a5f      	ldr	r2, [pc, #380]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005e8c:	e00b      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	3304      	adds	r3, #4
 8005e92:	2102      	movs	r1, #2
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 fb65 	bl	8006564 <RCCEx_PLL2_Config>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005e9e:	e002      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ea4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ea6:	7dfb      	ldrb	r3, [r7, #23]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d109      	bne.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005eac:	4b55      	ldr	r3, [pc, #340]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eb8:	4952      	ldr	r1, [pc, #328]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005ebe:	e001      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ec0:	7dfb      	ldrb	r3, [r7, #23]
 8005ec2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00a      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	3324      	adds	r3, #36	; 0x24
 8005ed4:	2102      	movs	r1, #2
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 fbf6 	bl	80066c8 <RCCEx_PLL3_Config>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d02f      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005efa:	d00c      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f00:	d802      	bhi.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d011      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8005f06:	e00d      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f0c:	d00f      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8005f0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f12:	d00e      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005f14:	e006      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f16:	4b3b      	ldr	r3, [pc, #236]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1a:	4a3a      	ldr	r2, [pc, #232]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005f22:	e007      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	75fb      	strb	r3, [r7, #23]
      break;
 8005f28:	e004      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005f2a:	bf00      	nop
 8005f2c:	e002      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005f2e:	bf00      	nop
 8005f30:	e000      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005f32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f34:	7dfb      	ldrb	r3, [r7, #23]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d109      	bne.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f3a:	4b32      	ldr	r3, [pc, #200]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f46:	492f      	ldr	r1, [pc, #188]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	654b      	str	r3, [r1, #84]	; 0x54
 8005f4c:	e001      	b.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f4e:	7dfb      	ldrb	r3, [r7, #23]
 8005f50:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d008      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005f5e:	4b29      	ldr	r3, [pc, #164]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6a:	4926      	ldr	r1, [pc, #152]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d009      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005f7c:	4b21      	ldr	r3, [pc, #132]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005f8a:	491e      	ldr	r1, [pc, #120]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d008      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f9c:	4b19      	ldr	r3, [pc, #100]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fa8:	4916      	ldr	r1, [pc, #88]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00d      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005fba:	4b12      	ldr	r3, [pc, #72]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	4a11      	ldr	r2, [pc, #68]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005fc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005fc4:	6113      	str	r3, [r2, #16]
 8005fc6:	4b0f      	ldr	r3, [pc, #60]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005fc8:	691a      	ldr	r2, [r3, #16]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005fd0:	490c      	ldr	r1, [pc, #48]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	da08      	bge.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005fde:	4b09      	ldr	r3, [pc, #36]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fe2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fea:	4906      	ldr	r1, [pc, #24]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005ff0:	7dbb      	ldrb	r3, [r7, #22]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	e000      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3718      	adds	r7, #24
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	58024400 	.word	0x58024400

08006008 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800600c:	f7ff f8b2 	bl	8005174 <HAL_RCC_GetHCLKFreq>
 8006010:	4601      	mov	r1, r0
 8006012:	4b06      	ldr	r3, [pc, #24]	; (800602c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	091b      	lsrs	r3, r3, #4
 8006018:	f003 0307 	and.w	r3, r3, #7
 800601c:	4a04      	ldr	r2, [pc, #16]	; (8006030 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800601e:	5cd3      	ldrb	r3, [r2, r3]
 8006020:	f003 031f 	and.w	r3, r3, #31
 8006024:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006028:	4618      	mov	r0, r3
 800602a:	bd80      	pop	{r7, pc}
 800602c:	58024400 	.word	0x58024400
 8006030:	0800cf0c 	.word	0x0800cf0c

08006034 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006034:	b480      	push	{r7}
 8006036:	b089      	sub	sp, #36	; 0x24
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800603c:	4b9d      	ldr	r3, [pc, #628]	; (80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800603e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006040:	f003 0303 	and.w	r3, r3, #3
 8006044:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006046:	4b9b      	ldr	r3, [pc, #620]	; (80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604a:	0b1b      	lsrs	r3, r3, #12
 800604c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006050:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006052:	4b98      	ldr	r3, [pc, #608]	; (80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006056:	091b      	lsrs	r3, r3, #4
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800605e:	4b95      	ldr	r3, [pc, #596]	; (80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006062:	08db      	lsrs	r3, r3, #3
 8006064:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	fb02 f303 	mul.w	r3, r2, r3
 800606e:	ee07 3a90 	vmov	s15, r3
 8006072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006076:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 810a 	beq.w	8006296 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d05a      	beq.n	800613e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8006088:	2b01      	cmp	r3, #1
 800608a:	d302      	bcc.n	8006092 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800608c:	2b02      	cmp	r3, #2
 800608e:	d078      	beq.n	8006182 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8006090:	e099      	b.n	80061c6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006092:	4b88      	ldr	r3, [pc, #544]	; (80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0320 	and.w	r3, r3, #32
 800609a:	2b00      	cmp	r3, #0
 800609c:	d02d      	beq.n	80060fa <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800609e:	4b85      	ldr	r3, [pc, #532]	; (80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	08db      	lsrs	r3, r3, #3
 80060a4:	f003 0303 	and.w	r3, r3, #3
 80060a8:	4a83      	ldr	r2, [pc, #524]	; (80062b8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80060aa:	fa22 f303 	lsr.w	r3, r2, r3
 80060ae:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	ee07 3a90 	vmov	s15, r3
 80060b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	ee07 3a90 	vmov	s15, r3
 80060c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060c8:	4b7a      	ldr	r3, [pc, #488]	; (80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060d0:	ee07 3a90 	vmov	s15, r3
 80060d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80060dc:	eddf 5a77 	vldr	s11, [pc, #476]	; 80062bc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80060e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060f4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80060f8:	e087      	b.n	800620a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	ee07 3a90 	vmov	s15, r3
 8006100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006104:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80062c0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8006108:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800610c:	4b69      	ldr	r3, [pc, #420]	; (80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800610e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006114:	ee07 3a90 	vmov	s15, r3
 8006118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800611c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006120:	eddf 5a66 	vldr	s11, [pc, #408]	; 80062bc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006124:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006128:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800612c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006130:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006138:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800613c:	e065      	b.n	800620a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	ee07 3a90 	vmov	s15, r3
 8006144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006148:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80062c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800614c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006150:	4b58      	ldr	r3, [pc, #352]	; (80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006158:	ee07 3a90 	vmov	s15, r3
 800615c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006160:	ed97 6a03 	vldr	s12, [r7, #12]
 8006164:	eddf 5a55 	vldr	s11, [pc, #340]	; 80062bc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006168:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800616c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006170:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006174:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800617c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006180:	e043      	b.n	800620a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	ee07 3a90 	vmov	s15, r3
 8006188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800618c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80062c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8006190:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006194:	4b47      	ldr	r3, [pc, #284]	; (80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800619c:	ee07 3a90 	vmov	s15, r3
 80061a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80061a8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80062bc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80061ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061c4:	e021      	b.n	800620a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	ee07 3a90 	vmov	s15, r3
 80061cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80062c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80061d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061d8:	4b36      	ldr	r3, [pc, #216]	; (80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80061da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061e0:	ee07 3a90 	vmov	s15, r3
 80061e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80061ec:	eddf 5a33 	vldr	s11, [pc, #204]	; 80062bc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80061f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006204:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006208:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800620a:	4b2a      	ldr	r3, [pc, #168]	; (80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800620c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620e:	0a5b      	lsrs	r3, r3, #9
 8006210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006214:	ee07 3a90 	vmov	s15, r3
 8006218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800621c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006220:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006224:	edd7 6a07 	vldr	s13, [r7, #28]
 8006228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800622c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006230:	ee17 2a90 	vmov	r2, s15
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006238:	4b1e      	ldr	r3, [pc, #120]	; (80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800623a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623c:	0c1b      	lsrs	r3, r3, #16
 800623e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006242:	ee07 3a90 	vmov	s15, r3
 8006246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800624e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006252:	edd7 6a07 	vldr	s13, [r7, #28]
 8006256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800625a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800625e:	ee17 2a90 	vmov	r2, s15
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006266:	4b13      	ldr	r3, [pc, #76]	; (80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626a:	0e1b      	lsrs	r3, r3, #24
 800626c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006270:	ee07 3a90 	vmov	s15, r3
 8006274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006278:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800627c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006280:	edd7 6a07 	vldr	s13, [r7, #28]
 8006284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800628c:	ee17 2a90 	vmov	r2, s15
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006294:	e008      	b.n	80062a8 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	609a      	str	r2, [r3, #8]
}
 80062a8:	bf00      	nop
 80062aa:	3724      	adds	r7, #36	; 0x24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr
 80062b4:	58024400 	.word	0x58024400
 80062b8:	03d09000 	.word	0x03d09000
 80062bc:	46000000 	.word	0x46000000
 80062c0:	4c742400 	.word	0x4c742400
 80062c4:	4a742400 	.word	0x4a742400
 80062c8:	4af42400 	.word	0x4af42400

080062cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b089      	sub	sp, #36	; 0x24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062d4:	4b9d      	ldr	r3, [pc, #628]	; (800654c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80062d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d8:	f003 0303 	and.w	r3, r3, #3
 80062dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80062de:	4b9b      	ldr	r3, [pc, #620]	; (800654c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80062e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e2:	0d1b      	lsrs	r3, r3, #20
 80062e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80062ea:	4b98      	ldr	r3, [pc, #608]	; (800654c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80062ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ee:	0a1b      	lsrs	r3, r3, #8
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80062f6:	4b95      	ldr	r3, [pc, #596]	; (800654c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80062f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062fa:	08db      	lsrs	r3, r3, #3
 80062fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	fb02 f303 	mul.w	r3, r2, r3
 8006306:	ee07 3a90 	vmov	s15, r3
 800630a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800630e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 810a 	beq.w	800652e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d05a      	beq.n	80063d6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8006320:	2b01      	cmp	r3, #1
 8006322:	d302      	bcc.n	800632a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8006324:	2b02      	cmp	r3, #2
 8006326:	d078      	beq.n	800641a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8006328:	e099      	b.n	800645e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800632a:	4b88      	ldr	r3, [pc, #544]	; (800654c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0320 	and.w	r3, r3, #32
 8006332:	2b00      	cmp	r3, #0
 8006334:	d02d      	beq.n	8006392 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006336:	4b85      	ldr	r3, [pc, #532]	; (800654c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	08db      	lsrs	r3, r3, #3
 800633c:	f003 0303 	and.w	r3, r3, #3
 8006340:	4a83      	ldr	r2, [pc, #524]	; (8006550 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8006342:	fa22 f303 	lsr.w	r3, r2, r3
 8006346:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	ee07 3a90 	vmov	s15, r3
 800634e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	ee07 3a90 	vmov	s15, r3
 8006358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800635c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006360:	4b7a      	ldr	r3, [pc, #488]	; (800654c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006368:	ee07 3a90 	vmov	s15, r3
 800636c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006370:	ed97 6a03 	vldr	s12, [r7, #12]
 8006374:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006554 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006378:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800637c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006380:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006384:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800638c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006390:	e087      	b.n	80064a2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	ee07 3a90 	vmov	s15, r3
 8006398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800639c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006558 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80063a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063a4:	4b69      	ldr	r3, [pc, #420]	; (800654c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80063a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ac:	ee07 3a90 	vmov	s15, r3
 80063b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80063b8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006554 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80063bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063d4:	e065      	b.n	80064a2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	ee07 3a90 	vmov	s15, r3
 80063dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063e0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800655c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80063e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063e8:	4b58      	ldr	r3, [pc, #352]	; (800654c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80063ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063f0:	ee07 3a90 	vmov	s15, r3
 80063f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80063fc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006554 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006400:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006404:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006408:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800640c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006414:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006418:	e043      	b.n	80064a2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	ee07 3a90 	vmov	s15, r3
 8006420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006424:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006560 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8006428:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800642c:	4b47      	ldr	r3, [pc, #284]	; (800654c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800642e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006434:	ee07 3a90 	vmov	s15, r3
 8006438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800643c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006440:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006554 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006444:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006448:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800644c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006450:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006458:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800645c:	e021      	b.n	80064a2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	ee07 3a90 	vmov	s15, r3
 8006464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006468:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800655c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800646c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006470:	4b36      	ldr	r3, [pc, #216]	; (800654c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006478:	ee07 3a90 	vmov	s15, r3
 800647c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006480:	ed97 6a03 	vldr	s12, [r7, #12]
 8006484:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006554 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006488:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800648c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006490:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006494:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800649c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064a0:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80064a2:	4b2a      	ldr	r3, [pc, #168]	; (800654c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	0a5b      	lsrs	r3, r3, #9
 80064a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064ac:	ee07 3a90 	vmov	s15, r3
 80064b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80064c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064c8:	ee17 2a90 	vmov	r2, s15
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80064d0:	4b1e      	ldr	r3, [pc, #120]	; (800654c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80064d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d4:	0c1b      	lsrs	r3, r3, #16
 80064d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064da:	ee07 3a90 	vmov	s15, r3
 80064de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80064ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064f6:	ee17 2a90 	vmov	r2, s15
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80064fe:	4b13      	ldr	r3, [pc, #76]	; (800654c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006502:	0e1b      	lsrs	r3, r3, #24
 8006504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006508:	ee07 3a90 	vmov	s15, r3
 800650c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006510:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006514:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006518:	edd7 6a07 	vldr	s13, [r7, #28]
 800651c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006524:	ee17 2a90 	vmov	r2, s15
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800652c:	e008      	b.n	8006540 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	609a      	str	r2, [r3, #8]
}
 8006540:	bf00      	nop
 8006542:	3724      	adds	r7, #36	; 0x24
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	58024400 	.word	0x58024400
 8006550:	03d09000 	.word	0x03d09000
 8006554:	46000000 	.word	0x46000000
 8006558:	4c742400 	.word	0x4c742400
 800655c:	4a742400 	.word	0x4a742400
 8006560:	4af42400 	.word	0x4af42400

08006564 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006572:	4b53      	ldr	r3, [pc, #332]	; (80066c0 <RCCEx_PLL2_Config+0x15c>)
 8006574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006576:	f003 0303 	and.w	r3, r3, #3
 800657a:	2b03      	cmp	r3, #3
 800657c:	d101      	bne.n	8006582 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e099      	b.n	80066b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006582:	4b4f      	ldr	r3, [pc, #316]	; (80066c0 <RCCEx_PLL2_Config+0x15c>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a4e      	ldr	r2, [pc, #312]	; (80066c0 <RCCEx_PLL2_Config+0x15c>)
 8006588:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800658c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800658e:	f7fb f843 	bl	8001618 <HAL_GetTick>
 8006592:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006594:	e008      	b.n	80065a8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006596:	f7fb f83f 	bl	8001618 <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d901      	bls.n	80065a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e086      	b.n	80066b6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80065a8:	4b45      	ldr	r3, [pc, #276]	; (80066c0 <RCCEx_PLL2_Config+0x15c>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1f0      	bne.n	8006596 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80065b4:	4b42      	ldr	r3, [pc, #264]	; (80066c0 <RCCEx_PLL2_Config+0x15c>)
 80065b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	031b      	lsls	r3, r3, #12
 80065c2:	493f      	ldr	r1, [pc, #252]	; (80066c0 <RCCEx_PLL2_Config+0x15c>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	628b      	str	r3, [r1, #40]	; 0x28
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	3b01      	subs	r3, #1
 80065ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	3b01      	subs	r3, #1
 80065d8:	025b      	lsls	r3, r3, #9
 80065da:	b29b      	uxth	r3, r3
 80065dc:	431a      	orrs	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	3b01      	subs	r3, #1
 80065e4:	041b      	lsls	r3, r3, #16
 80065e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80065ea:	431a      	orrs	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	3b01      	subs	r3, #1
 80065f2:	061b      	lsls	r3, r3, #24
 80065f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80065f8:	4931      	ldr	r1, [pc, #196]	; (80066c0 <RCCEx_PLL2_Config+0x15c>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80065fe:	4b30      	ldr	r3, [pc, #192]	; (80066c0 <RCCEx_PLL2_Config+0x15c>)
 8006600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006602:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	492d      	ldr	r1, [pc, #180]	; (80066c0 <RCCEx_PLL2_Config+0x15c>)
 800660c:	4313      	orrs	r3, r2
 800660e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006610:	4b2b      	ldr	r3, [pc, #172]	; (80066c0 <RCCEx_PLL2_Config+0x15c>)
 8006612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006614:	f023 0220 	bic.w	r2, r3, #32
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	4928      	ldr	r1, [pc, #160]	; (80066c0 <RCCEx_PLL2_Config+0x15c>)
 800661e:	4313      	orrs	r3, r2
 8006620:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006622:	4b27      	ldr	r3, [pc, #156]	; (80066c0 <RCCEx_PLL2_Config+0x15c>)
 8006624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006626:	4a26      	ldr	r2, [pc, #152]	; (80066c0 <RCCEx_PLL2_Config+0x15c>)
 8006628:	f023 0310 	bic.w	r3, r3, #16
 800662c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800662e:	4b24      	ldr	r3, [pc, #144]	; (80066c0 <RCCEx_PLL2_Config+0x15c>)
 8006630:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006632:	4b24      	ldr	r3, [pc, #144]	; (80066c4 <RCCEx_PLL2_Config+0x160>)
 8006634:	4013      	ands	r3, r2
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	69d2      	ldr	r2, [r2, #28]
 800663a:	00d2      	lsls	r2, r2, #3
 800663c:	4920      	ldr	r1, [pc, #128]	; (80066c0 <RCCEx_PLL2_Config+0x15c>)
 800663e:	4313      	orrs	r3, r2
 8006640:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006642:	4b1f      	ldr	r3, [pc, #124]	; (80066c0 <RCCEx_PLL2_Config+0x15c>)
 8006644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006646:	4a1e      	ldr	r2, [pc, #120]	; (80066c0 <RCCEx_PLL2_Config+0x15c>)
 8006648:	f043 0310 	orr.w	r3, r3, #16
 800664c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d106      	bne.n	8006662 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006654:	4b1a      	ldr	r3, [pc, #104]	; (80066c0 <RCCEx_PLL2_Config+0x15c>)
 8006656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006658:	4a19      	ldr	r2, [pc, #100]	; (80066c0 <RCCEx_PLL2_Config+0x15c>)
 800665a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800665e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006660:	e00f      	b.n	8006682 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d106      	bne.n	8006676 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006668:	4b15      	ldr	r3, [pc, #84]	; (80066c0 <RCCEx_PLL2_Config+0x15c>)
 800666a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666c:	4a14      	ldr	r2, [pc, #80]	; (80066c0 <RCCEx_PLL2_Config+0x15c>)
 800666e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006672:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006674:	e005      	b.n	8006682 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006676:	4b12      	ldr	r3, [pc, #72]	; (80066c0 <RCCEx_PLL2_Config+0x15c>)
 8006678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667a:	4a11      	ldr	r2, [pc, #68]	; (80066c0 <RCCEx_PLL2_Config+0x15c>)
 800667c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006680:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006682:	4b0f      	ldr	r3, [pc, #60]	; (80066c0 <RCCEx_PLL2_Config+0x15c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a0e      	ldr	r2, [pc, #56]	; (80066c0 <RCCEx_PLL2_Config+0x15c>)
 8006688:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800668c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800668e:	f7fa ffc3 	bl	8001618 <HAL_GetTick>
 8006692:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006694:	e008      	b.n	80066a8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006696:	f7fa ffbf 	bl	8001618 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d901      	bls.n	80066a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e006      	b.n	80066b6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80066a8:	4b05      	ldr	r3, [pc, #20]	; (80066c0 <RCCEx_PLL2_Config+0x15c>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d0f0      	beq.n	8006696 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	58024400 	.word	0x58024400
 80066c4:	ffff0007 	.word	0xffff0007

080066c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066d2:	2300      	movs	r3, #0
 80066d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80066d6:	4b53      	ldr	r3, [pc, #332]	; (8006824 <RCCEx_PLL3_Config+0x15c>)
 80066d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066da:	f003 0303 	and.w	r3, r3, #3
 80066de:	2b03      	cmp	r3, #3
 80066e0:	d101      	bne.n	80066e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e099      	b.n	800681a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80066e6:	4b4f      	ldr	r3, [pc, #316]	; (8006824 <RCCEx_PLL3_Config+0x15c>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a4e      	ldr	r2, [pc, #312]	; (8006824 <RCCEx_PLL3_Config+0x15c>)
 80066ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066f2:	f7fa ff91 	bl	8001618 <HAL_GetTick>
 80066f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80066f8:	e008      	b.n	800670c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80066fa:	f7fa ff8d 	bl	8001618 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	2b02      	cmp	r3, #2
 8006706:	d901      	bls.n	800670c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e086      	b.n	800681a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800670c:	4b45      	ldr	r3, [pc, #276]	; (8006824 <RCCEx_PLL3_Config+0x15c>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1f0      	bne.n	80066fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006718:	4b42      	ldr	r3, [pc, #264]	; (8006824 <RCCEx_PLL3_Config+0x15c>)
 800671a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	051b      	lsls	r3, r3, #20
 8006726:	493f      	ldr	r1, [pc, #252]	; (8006824 <RCCEx_PLL3_Config+0x15c>)
 8006728:	4313      	orrs	r3, r2
 800672a:	628b      	str	r3, [r1, #40]	; 0x28
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	3b01      	subs	r3, #1
 8006732:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	3b01      	subs	r3, #1
 800673c:	025b      	lsls	r3, r3, #9
 800673e:	b29b      	uxth	r3, r3
 8006740:	431a      	orrs	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	3b01      	subs	r3, #1
 8006748:	041b      	lsls	r3, r3, #16
 800674a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800674e:	431a      	orrs	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	3b01      	subs	r3, #1
 8006756:	061b      	lsls	r3, r3, #24
 8006758:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800675c:	4931      	ldr	r1, [pc, #196]	; (8006824 <RCCEx_PLL3_Config+0x15c>)
 800675e:	4313      	orrs	r3, r2
 8006760:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006762:	4b30      	ldr	r3, [pc, #192]	; (8006824 <RCCEx_PLL3_Config+0x15c>)
 8006764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006766:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	492d      	ldr	r1, [pc, #180]	; (8006824 <RCCEx_PLL3_Config+0x15c>)
 8006770:	4313      	orrs	r3, r2
 8006772:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006774:	4b2b      	ldr	r3, [pc, #172]	; (8006824 <RCCEx_PLL3_Config+0x15c>)
 8006776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006778:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	4928      	ldr	r1, [pc, #160]	; (8006824 <RCCEx_PLL3_Config+0x15c>)
 8006782:	4313      	orrs	r3, r2
 8006784:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006786:	4b27      	ldr	r3, [pc, #156]	; (8006824 <RCCEx_PLL3_Config+0x15c>)
 8006788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678a:	4a26      	ldr	r2, [pc, #152]	; (8006824 <RCCEx_PLL3_Config+0x15c>)
 800678c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006790:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006792:	4b24      	ldr	r3, [pc, #144]	; (8006824 <RCCEx_PLL3_Config+0x15c>)
 8006794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006796:	4b24      	ldr	r3, [pc, #144]	; (8006828 <RCCEx_PLL3_Config+0x160>)
 8006798:	4013      	ands	r3, r2
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	69d2      	ldr	r2, [r2, #28]
 800679e:	00d2      	lsls	r2, r2, #3
 80067a0:	4920      	ldr	r1, [pc, #128]	; (8006824 <RCCEx_PLL3_Config+0x15c>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80067a6:	4b1f      	ldr	r3, [pc, #124]	; (8006824 <RCCEx_PLL3_Config+0x15c>)
 80067a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067aa:	4a1e      	ldr	r2, [pc, #120]	; (8006824 <RCCEx_PLL3_Config+0x15c>)
 80067ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d106      	bne.n	80067c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80067b8:	4b1a      	ldr	r3, [pc, #104]	; (8006824 <RCCEx_PLL3_Config+0x15c>)
 80067ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067bc:	4a19      	ldr	r2, [pc, #100]	; (8006824 <RCCEx_PLL3_Config+0x15c>)
 80067be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80067c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80067c4:	e00f      	b.n	80067e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d106      	bne.n	80067da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80067cc:	4b15      	ldr	r3, [pc, #84]	; (8006824 <RCCEx_PLL3_Config+0x15c>)
 80067ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d0:	4a14      	ldr	r2, [pc, #80]	; (8006824 <RCCEx_PLL3_Config+0x15c>)
 80067d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80067d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80067d8:	e005      	b.n	80067e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80067da:	4b12      	ldr	r3, [pc, #72]	; (8006824 <RCCEx_PLL3_Config+0x15c>)
 80067dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067de:	4a11      	ldr	r2, [pc, #68]	; (8006824 <RCCEx_PLL3_Config+0x15c>)
 80067e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80067e6:	4b0f      	ldr	r3, [pc, #60]	; (8006824 <RCCEx_PLL3_Config+0x15c>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a0e      	ldr	r2, [pc, #56]	; (8006824 <RCCEx_PLL3_Config+0x15c>)
 80067ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067f2:	f7fa ff11 	bl	8001618 <HAL_GetTick>
 80067f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80067f8:	e008      	b.n	800680c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80067fa:	f7fa ff0d 	bl	8001618 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	2b02      	cmp	r3, #2
 8006806:	d901      	bls.n	800680c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e006      	b.n	800681a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800680c:	4b05      	ldr	r3, [pc, #20]	; (8006824 <RCCEx_PLL3_Config+0x15c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006814:	2b00      	cmp	r3, #0
 8006816:	d0f0      	beq.n	80067fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006818:	7bfb      	ldrb	r3, [r7, #15]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	58024400 	.word	0x58024400
 8006828:	ffff0007 	.word	0xffff0007

0800682c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8006834:	2300      	movs	r3, #0
 8006836:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e0e2      	b.n	8006a08 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a70      	ldr	r2, [pc, #448]	; (8006a10 <HAL_SPI_Init+0x1e4>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d00f      	beq.n	8006872 <HAL_SPI_Init+0x46>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a6f      	ldr	r2, [pc, #444]	; (8006a14 <HAL_SPI_Init+0x1e8>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d00a      	beq.n	8006872 <HAL_SPI_Init+0x46>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a6d      	ldr	r2, [pc, #436]	; (8006a18 <HAL_SPI_Init+0x1ec>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d005      	beq.n	8006872 <HAL_SPI_Init+0x46>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	2b0f      	cmp	r3, #15
 800686c:	d901      	bls.n	8006872 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e0ca      	b.n	8006a08 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f001 f84a 	bl	800790c <SPI_GetPacketSize>
 8006878:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a64      	ldr	r2, [pc, #400]	; (8006a10 <HAL_SPI_Init+0x1e4>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d00c      	beq.n	800689e <HAL_SPI_Init+0x72>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a62      	ldr	r2, [pc, #392]	; (8006a14 <HAL_SPI_Init+0x1e8>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d007      	beq.n	800689e <HAL_SPI_Init+0x72>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a61      	ldr	r2, [pc, #388]	; (8006a18 <HAL_SPI_Init+0x1ec>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d002      	beq.n	800689e <HAL_SPI_Init+0x72>
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	2b08      	cmp	r3, #8
 800689c:	d811      	bhi.n	80068c2 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80068a2:	4a5b      	ldr	r2, [pc, #364]	; (8006a10 <HAL_SPI_Init+0x1e4>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d009      	beq.n	80068bc <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a59      	ldr	r2, [pc, #356]	; (8006a14 <HAL_SPI_Init+0x1e8>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d004      	beq.n	80068bc <HAL_SPI_Init+0x90>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a58      	ldr	r2, [pc, #352]	; (8006a18 <HAL_SPI_Init+0x1ec>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d104      	bne.n	80068c6 <HAL_SPI_Init+0x9a>
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	2b10      	cmp	r3, #16
 80068c0:	d901      	bls.n	80068c6 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e0a0      	b.n	8006a08 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d106      	bne.n	80068e0 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7fa fc1a 	bl	8001114 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2202      	movs	r2, #2
 80068e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 0201 	bic.w	r2, r2, #1
 80068f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006900:	d110      	bne.n	8006924 <HAL_SPI_Init+0xf8>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800690a:	d10b      	bne.n	8006924 <HAL_SPI_Init+0xf8>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006910:	2b00      	cmp	r3, #0
 8006912:	d107      	bne.n	8006924 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006922:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	69da      	ldr	r2, [r3, #28]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692c:	431a      	orrs	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	431a      	orrs	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006936:	ea42 0103 	orr.w	r1, r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68da      	ldr	r2, [r3, #12]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694e:	431a      	orrs	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006954:	431a      	orrs	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	431a      	orrs	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	431a      	orrs	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	431a      	orrs	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	431a      	orrs	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	431a      	orrs	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006978:	431a      	orrs	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	431a      	orrs	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006984:	ea42 0103 	orr.w	r1, r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	430a      	orrs	r2, r1
 8006992:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d113      	bne.n	80069c4 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069ae:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069c2:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f022 0201 	bic.w	r2, r2, #1
 80069d2:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00a      	beq.n	80069f6 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	40013000 	.word	0x40013000
 8006a14:	40003800 	.word	0x40003800
 8006a18:	40003c00 	.word	0x40003c00

08006a1c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b08e      	sub	sp, #56	; 0x38
 8006a20:	af02      	add	r7, sp, #8
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
 8006a28:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	3320      	adds	r3, #32
 8006a36:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	3330      	adds	r3, #48	; 0x30
 8006a3e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d101      	bne.n	8006a4e <HAL_SPI_TransmitReceive+0x32>
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	e2ce      	b.n	8006fec <HAL_SPI_TransmitReceive+0x5d0>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a56:	f7fa fddf 	bl	8001618 <HAL_GetTick>
 8006a5a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8006a5c:	887b      	ldrh	r3, [r7, #2]
 8006a5e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8006a60:	887b      	ldrh	r3, [r7, #2]
 8006a62:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006a6a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a72:	7efb      	ldrb	r3, [r7, #27]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d014      	beq.n	8006aa2 <HAL_SPI_TransmitReceive+0x86>
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a7e:	d106      	bne.n	8006a8e <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d102      	bne.n	8006a8e <HAL_SPI_TransmitReceive+0x72>
 8006a88:	7efb      	ldrb	r3, [r7, #27]
 8006a8a:	2b04      	cmp	r3, #4
 8006a8c:	d009      	beq.n	8006aa2 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8006a8e:	2302      	movs	r3, #2
 8006a90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006a9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006aa0:	e2a4      	b.n	8006fec <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d005      	beq.n	8006ab4 <HAL_SPI_TransmitReceive+0x98>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d002      	beq.n	8006ab4 <HAL_SPI_TransmitReceive+0x98>
 8006aae:	887b      	ldrh	r3, [r7, #2]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d109      	bne.n	8006ac8 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006ac2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ac6:	e291      	b.n	8006fec <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b04      	cmp	r3, #4
 8006ad2:	d003      	beq.n	8006adc <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2205      	movs	r2, #5
 8006ad8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	887a      	ldrh	r2, [r7, #2]
 8006aee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	887a      	ldrh	r2, [r7, #2]
 8006af6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	887a      	ldrh	r2, [r7, #2]
 8006b04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	887a      	ldrh	r2, [r7, #2]
 8006b0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	4b9f      	ldr	r3, [pc, #636]	; (8006da0 <HAL_SPI_TransmitReceive+0x384>)
 8006b24:	4013      	ands	r3, r2
 8006b26:	8879      	ldrh	r1, [r7, #2]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	6812      	ldr	r2, [r2, #0]
 8006b2c:	430b      	orrs	r3, r1
 8006b2e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0201 	orr.w	r2, r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b48:	d107      	bne.n	8006b5a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	2b0f      	cmp	r3, #15
 8006b60:	d970      	bls.n	8006c44 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006b62:	e068      	b.n	8006c36 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d11a      	bne.n	8006ba8 <HAL_SPI_TransmitReceive+0x18c>
 8006b72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d017      	beq.n	8006ba8 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6812      	ldr	r2, [r2, #0]
 8006b82:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b88:	1d1a      	adds	r2, r3, #4
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	3b01      	subs	r3, #1
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006ba6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	695a      	ldr	r2, [r3, #20]
 8006bae:	f248 0308 	movw	r3, #32776	; 0x8008
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d01a      	beq.n	8006bee <HAL_SPI_TransmitReceive+0x1d2>
 8006bb8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d017      	beq.n	8006bee <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bc6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006bc8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bce:	1d1a      	adds	r2, r3, #4
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006bec:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bee:	f7fa fd13 	bl	8001618 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d803      	bhi.n	8006c06 <HAL_SPI_TransmitReceive+0x1ea>
 8006bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c04:	d102      	bne.n	8006c0c <HAL_SPI_TransmitReceive+0x1f0>
 8006c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d114      	bne.n	8006c36 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 fdaf 	bl	8007770 <SPI_CloseTransfer>
      
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e1da      	b.n	8006fec <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006c36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d193      	bne.n	8006b64 <HAL_SPI_TransmitReceive+0x148>
 8006c3c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d190      	bne.n	8006b64 <HAL_SPI_TransmitReceive+0x148>
 8006c42:	e1ac      	b.n	8006f9e <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	2b07      	cmp	r3, #7
 8006c4a:	f240 81a0 	bls.w	8006f8e <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006c4e:	e0a9      	b.n	8006da4 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	f003 0302 	and.w	r3, r3, #2
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d139      	bne.n	8006cd2 <HAL_SPI_TransmitReceive+0x2b6>
 8006c5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d036      	beq.n	8006cd2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006c64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d91c      	bls.n	8006ca4 <HAL_SPI_TransmitReceive+0x288>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d018      	beq.n	8006ca4 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	6812      	ldr	r2, [r2, #0]
 8006c7c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c82:	1d1a      	adds	r2, r3, #4
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	3b02      	subs	r3, #2
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006ca0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006ca2:	e016      	b.n	8006cd2 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ca8:	881a      	ldrh	r2, [r3, #0]
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb2:	1c9a      	adds	r2, r3, #2
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006cd0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	695b      	ldr	r3, [r3, #20]
 8006cd8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d03a      	beq.n	8006d56 <HAL_SPI_TransmitReceive+0x33a>
 8006ce0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d037      	beq.n	8006d56 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d018      	beq.n	8006d26 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cfc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006cfe:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d04:	1d1a      	adds	r2, r3, #4
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	3b02      	subs	r3, #2
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d22:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006d24:	e017      	b.n	8006d56 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d2a:	6a3a      	ldr	r2, [r7, #32]
 8006d2c:	8812      	ldrh	r2, [r2, #0]
 8006d2e:	b292      	uxth	r2, r2
 8006d30:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d36:	1c9a      	adds	r2, r3, #2
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	3b01      	subs	r3, #1
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d54:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d56:	f7fa fc5f 	bl	8001618 <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d803      	bhi.n	8006d6e <HAL_SPI_TransmitReceive+0x352>
 8006d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6c:	d102      	bne.n	8006d74 <HAL_SPI_TransmitReceive+0x358>
 8006d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d117      	bne.n	8006da4 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f000 fcfb 	bl	8007770 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e126      	b.n	8006fec <HAL_SPI_TransmitReceive+0x5d0>
 8006d9e:	bf00      	nop
 8006da0:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006da4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f47f af52 	bne.w	8006c50 <HAL_SPI_TransmitReceive+0x234>
 8006dac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f47f af4e 	bne.w	8006c50 <HAL_SPI_TransmitReceive+0x234>
 8006db4:	e0f3      	b.n	8006f9e <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	695b      	ldr	r3, [r3, #20]
 8006dbc:	f003 0302 	and.w	r3, r3, #2
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d15a      	bne.n	8006e7a <HAL_SPI_TransmitReceive+0x45e>
 8006dc4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d057      	beq.n	8006e7a <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006dca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006dcc:	2b03      	cmp	r3, #3
 8006dce:	d91c      	bls.n	8006e0a <HAL_SPI_TransmitReceive+0x3ee>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd4:	2b40      	cmp	r3, #64	; 0x40
 8006dd6:	d918      	bls.n	8006e0a <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	6812      	ldr	r2, [r2, #0]
 8006de2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006de8:	1d1a      	adds	r2, r3, #4
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	3b04      	subs	r3, #4
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006e06:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006e08:	e037      	b.n	8006e7a <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006e0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d91b      	bls.n	8006e48 <HAL_SPI_TransmitReceive+0x42c>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d017      	beq.n	8006e48 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e1c:	881a      	ldrh	r2, [r3, #0]
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e20:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e26:	1c9a      	adds	r2, r3, #2
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	3b02      	subs	r3, #2
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006e44:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006e46:	e018      	b.n	8006e7a <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3320      	adds	r3, #32
 8006e52:	7812      	ldrb	r2, [r2, #0]
 8006e54:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e5a:	1c5a      	adds	r2, r3, #1
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006e78:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	695b      	ldr	r3, [r3, #20]
 8006e80:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d05e      	beq.n	8006f46 <HAL_SPI_TransmitReceive+0x52a>
 8006e88:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d05b      	beq.n	8006f46 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d018      	beq.n	8006ece <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ea4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006ea6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006eac:	1d1a      	adds	r2, r3, #4
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	3b04      	subs	r3, #4
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006eca:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006ecc:	e03b      	b.n	8006f46 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	695b      	ldr	r3, [r3, #20]
 8006ed4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8006ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006edc:	d918      	bls.n	8006f10 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ee2:	6a3a      	ldr	r2, [r7, #32]
 8006ee4:	8812      	ldrh	r2, [r2, #0]
 8006ee6:	b292      	uxth	r2, r2
 8006ee8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006eee:	1c9a      	adds	r2, r3, #2
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	3b02      	subs	r3, #2
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006f0c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006f0e:	e01a      	b.n	8006f46 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f1c:	7812      	ldrb	r2, [r2, #0]
 8006f1e:	b2d2      	uxtb	r2, r2
 8006f20:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f26:	1c5a      	adds	r2, r3, #1
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	3b01      	subs	r3, #1
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006f44:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f46:	f7fa fb67 	bl	8001618 <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d803      	bhi.n	8006f5e <HAL_SPI_TransmitReceive+0x542>
 8006f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5c:	d102      	bne.n	8006f64 <HAL_SPI_TransmitReceive+0x548>
 8006f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d114      	bne.n	8006f8e <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f000 fc03 	bl	8007770 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e02e      	b.n	8006fec <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006f8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f47f af10 	bne.w	8006db6 <HAL_SPI_TransmitReceive+0x39a>
 8006f96:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f47f af0c 	bne.w	8006db6 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8006f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	2108      	movs	r1, #8
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f000 fc81 	bl	80078b0 <SPI_WaitOnFlagUntilTimeout>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d007      	beq.n	8006fc4 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fba:	f043 0220 	orr.w	r2, r3, #32
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f000 fbd3 	bl	8007770 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d001      	beq.n	8006fe8 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e001      	b.n	8006fec <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8006fe8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3730      	adds	r7, #48	; 0x30
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	4613      	mov	r3, r2
 8007000:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007002:	2300      	movs	r3, #0
 8007004:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800700c:	2b01      	cmp	r3, #1
 800700e:	d101      	bne.n	8007014 <HAL_SPI_Transmit_DMA+0x20>
 8007010:	2302      	movs	r3, #2
 8007012:	e128      	b.n	8007266 <HAL_SPI_Transmit_DMA+0x272>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b01      	cmp	r3, #1
 8007026:	d007      	beq.n	8007038 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8007028:	2302      	movs	r3, #2
 800702a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007034:	7dfb      	ldrb	r3, [r7, #23]
 8007036:	e116      	b.n	8007266 <HAL_SPI_Transmit_DMA+0x272>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d002      	beq.n	8007044 <HAL_SPI_Transmit_DMA+0x50>
 800703e:	88fb      	ldrh	r3, [r7, #6]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d107      	bne.n	8007054 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007050:	7dfb      	ldrb	r3, [r7, #23]
 8007052:	e108      	b.n	8007266 <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2203      	movs	r2, #3
 8007058:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	88fa      	ldrh	r2, [r7, #6]
 800706e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	88fa      	ldrh	r2, [r7, #6]
 8007076:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80070a4:	d107      	bne.n	80070b6 <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070b4:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	2b0f      	cmp	r3, #15
 80070bc:	d905      	bls.n	80070ca <HAL_SPI_Transmit_DMA+0xd6>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070c8:	d10f      	bne.n	80070ea <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80070ce:	2b07      	cmp	r3, #7
 80070d0:	d913      	bls.n	80070fa <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070dc:	d00d      	beq.n	80070fa <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070e2:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80070e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070e8:	d007      	beq.n	80070fa <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80070f6:	7dfb      	ldrb	r3, [r7, #23]
 80070f8:	e0b5      	b.n	8007266 <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	2b07      	cmp	r3, #7
 8007100:	d820      	bhi.n	8007144 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800710c:	d109      	bne.n	8007122 <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007114:	b29b      	uxth	r3, r3
 8007116:	3301      	adds	r3, #1
 8007118:	105b      	asrs	r3, r3, #1
 800711a:	b29a      	uxth	r2, r3
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800712c:	d11e      	bne.n	800716c <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007134:	b29b      	uxth	r3, r3
 8007136:	3303      	adds	r3, #3
 8007138:	109b      	asrs	r3, r3, #2
 800713a:	b29a      	uxth	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007142:	e013      	b.n	800716c <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	2b0f      	cmp	r3, #15
 800714a:	d80f      	bhi.n	800716c <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007156:	d109      	bne.n	800716c <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800715e:	b29b      	uxth	r3, r3
 8007160:	3301      	adds	r3, #1
 8007162:	105b      	asrs	r3, r3, #1
 8007164:	b29a      	uxth	r2, r3
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007170:	4a3f      	ldr	r2, [pc, #252]	; (8007270 <HAL_SPI_Transmit_DMA+0x27c>)
 8007172:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007178:	4a3e      	ldr	r2, [pc, #248]	; (8007274 <HAL_SPI_Transmit_DMA+0x280>)
 800717a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007180:	4a3d      	ldr	r2, [pc, #244]	; (8007278 <HAL_SPI_Transmit_DMA+0x284>)
 8007182:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007188:	2200      	movs	r2, #0
 800718a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689a      	ldr	r2, [r3, #8]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800719a:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071a4:	4619      	mov	r1, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3320      	adds	r3, #32
 80071ac:	461a      	mov	r2, r3
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	f7fa fed5 	bl	8001f64 <HAL_DMA_Start_IT>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00f      	beq.n	80071e0 <HAL_SPI_Transmit_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071c6:	f043 0210 	orr.w	r2, r3, #16
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 80071dc:	7dfb      	ldrb	r3, [r7, #23]
 80071de:	e042      	b.n	8007266 <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ea:	d108      	bne.n	80071fe <HAL_SPI_Transmit_DMA+0x20a>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6859      	ldr	r1, [r3, #4]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	4b21      	ldr	r3, [pc, #132]	; (800727c <HAL_SPI_Transmit_DMA+0x288>)
 80071f8:	400b      	ands	r3, r1
 80071fa:	6053      	str	r3, [r2, #4]
 80071fc:	e009      	b.n	8007212 <HAL_SPI_Transmit_DMA+0x21e>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	4b1d      	ldr	r3, [pc, #116]	; (800727c <HAL_SPI_Transmit_DMA+0x288>)
 8007206:	4013      	ands	r3, r2
 8007208:	88f9      	ldrh	r1, [r7, #6]
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	6812      	ldr	r2, [r2, #0]
 800720e:	430b      	orrs	r3, r1
 8007210:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	689a      	ldr	r2, [r3, #8]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007220:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	691a      	ldr	r2, [r3, #16]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 8007230:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f042 0201 	orr.w	r2, r2, #1
 8007240:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800724a:	d107      	bne.n	800725c <HAL_SPI_Transmit_DMA+0x268>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800725a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8007264:	7dfb      	ldrb	r3, [r7, #23]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3718      	adds	r7, #24
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	080076db 	.word	0x080076db
 8007274:	08007695 	.word	0x08007695
 8007278:	080076f7 	.word	0x080076f7
 800727c:	ffff0000 	.word	0xffff0000

08007280 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b08a      	sub	sp, #40	; 0x28
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007298:	6a3a      	ldr	r2, [r7, #32]
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	4013      	ands	r3, r2
 800729e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80072a8:	2300      	movs	r3, #0
 80072aa:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80072b2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	3330      	adds	r3, #48	; 0x30
 80072ba:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d113      	bne.n	80072ee <HAL_SPI_IRQHandler+0x6e>
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	f003 0320 	and.w	r3, r3, #32
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10e      	bne.n	80072ee <HAL_SPI_IRQHandler+0x6e>
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	f003 0304 	and.w	r3, r3, #4
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d009      	beq.n	80072ee <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	4798      	blx	r3
    hspi->RxISR(hspi);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	4798      	blx	r3
    handled = 1UL;
 80072ea:	2301      	movs	r3, #1
 80072ec:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10f      	bne.n	8007318 <HAL_SPI_IRQHandler+0x98>
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00a      	beq.n	8007318 <HAL_SPI_IRQHandler+0x98>
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	f003 0304 	and.w	r3, r3, #4
 8007308:	2b00      	cmp	r3, #0
 800730a:	d105      	bne.n	8007318 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	4798      	blx	r3
    handled = 1UL;
 8007314:	2301      	movs	r3, #1
 8007316:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	f003 0320 	and.w	r3, r3, #32
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10f      	bne.n	8007342 <HAL_SPI_IRQHandler+0xc2>
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	f003 0302 	and.w	r3, r3, #2
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00a      	beq.n	8007342 <HAL_SPI_IRQHandler+0xc2>
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	f003 0304 	and.w	r3, r3, #4
 8007332:	2b00      	cmp	r3, #0
 8007334:	d105      	bne.n	8007342 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	4798      	blx	r3
    handled = 1UL;
 800733e:	2301      	movs	r3, #1
 8007340:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007344:	2b00      	cmp	r3, #0
 8007346:	f040 8170 	bne.w	800762a <HAL_SPI_IRQHandler+0x3aa>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	f003 0308 	and.w	r3, r3, #8
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 80a0 	beq.w	8007496 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	699a      	ldr	r2, [r3, #24]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f042 0208 	orr.w	r2, r2, #8
 8007364:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	699a      	ldr	r2, [r3, #24]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f042 0210 	orr.w	r2, r2, #16
 8007374:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	699a      	ldr	r2, [r3, #24]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007384:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	691a      	ldr	r2, [r3, #16]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f022 0208 	bic.w	r2, r2, #8
 8007394:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00f      	beq.n	80073c0 <HAL_SPI_IRQHandler+0x140>
 80073a0:	7cfb      	ldrb	r3, [r7, #19]
 80073a2:	2b04      	cmp	r3, #4
 80073a4:	d004      	beq.n	80073b0 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073aa:	69db      	ldr	r3, [r3, #28]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d007      	beq.n	80073c0 <HAL_SPI_IRQHandler+0x140>
 80073b0:	7cfb      	ldrb	r3, [r7, #19]
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	d059      	beq.n	800746a <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073ba:	69db      	ldr	r3, [r3, #28]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d154      	bne.n	800746a <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d13d      	bne.n	800744a <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 80073ce:	e036      	b.n	800743e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	2b0f      	cmp	r3, #15
 80073d6:	d90b      	bls.n	80073f0 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80073e2:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073e8:	1d1a      	adds	r2, r3, #4
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	665a      	str	r2, [r3, #100]	; 0x64
 80073ee:	e01d      	b.n	800742c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	2b07      	cmp	r3, #7
 80073f6:	d90b      	bls.n	8007410 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	8812      	ldrh	r2, [r2, #0]
 8007400:	b292      	uxth	r2, r2
 8007402:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007408:	1c9a      	adds	r2, r3, #2
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	665a      	str	r2, [r3, #100]	; 0x64
 800740e:	e00d      	b.n	800742c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800741c:	7812      	ldrb	r2, [r2, #0]
 800741e:	b2d2      	uxtb	r2, r2
 8007420:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007426:	1c5a      	adds	r2, r3, #1
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007432:	b29b      	uxth	r3, r3
 8007434:	3b01      	subs	r3, #1
 8007436:	b29a      	uxth	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007444:	b29b      	uxth	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1c2      	bne.n	80073d0 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f990 	bl	8007770 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800745e:	2b00      	cmp	r3, #0
 8007460:	d003      	beq.n	800746a <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f90c 	bl	8007680 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8007468:	e0e4      	b.n	8007634 <HAL_SPI_IRQHandler+0x3b4>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800746a:	7cfb      	ldrb	r3, [r7, #19]
 800746c:	2b05      	cmp	r3, #5
 800746e:	d103      	bne.n	8007478 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f8f1 	bl	8007658 <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 8007476:	e0da      	b.n	800762e <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007478:	7cfb      	ldrb	r3, [r7, #19]
 800747a:	2b04      	cmp	r3, #4
 800747c:	d103      	bne.n	8007486 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f8e0 	bl	8007644 <HAL_SPI_RxCpltCallback>
    return;
 8007484:	e0d3      	b.n	800762e <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007486:	7cfb      	ldrb	r3, [r7, #19]
 8007488:	2b03      	cmp	r3, #3
 800748a:	f040 80d0 	bne.w	800762e <HAL_SPI_IRQHandler+0x3ae>
      HAL_SPI_TxCpltCallback(hspi);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7f9 faf4 	bl	8000a7c <HAL_SPI_TxCpltCallback>
    return;
 8007494:	e0cb      	b.n	800762e <HAL_SPI_IRQHandler+0x3ae>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00d      	beq.n	80074bc <HAL_SPI_IRQHandler+0x23c>
 80074a0:	6a3b      	ldr	r3, [r7, #32]
 80074a2:	f003 0308 	and.w	r3, r3, #8
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d008      	beq.n	80074bc <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	699a      	ldr	r2, [r3, #24]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074b8:	619a      	str	r2, [r3, #24]

    return;
 80074ba:	e0bb      	b.n	8007634 <HAL_SPI_IRQHandler+0x3b4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f000 80b6 	beq.w	8007634 <HAL_SPI_IRQHandler+0x3b4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00f      	beq.n	80074f2 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074d8:	f043 0204 	orr.w	r2, r3, #4
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	699a      	ldr	r2, [r3, #24]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074f0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00f      	beq.n	800751c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007502:	f043 0201 	orr.w	r2, r3, #1
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	699a      	ldr	r2, [r3, #24]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800751a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00f      	beq.n	8007546 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800752c:	f043 0208 	orr.w	r2, r3, #8
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	699a      	ldr	r2, [r3, #24]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007544:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	f003 0320 	and.w	r3, r3, #32
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00f      	beq.n	8007570 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007556:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	699a      	ldr	r2, [r3, #24]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f042 0220 	orr.w	r2, r2, #32
 800756e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007576:	2b00      	cmp	r3, #0
 8007578:	d05b      	beq.n	8007632 <HAL_SPI_IRQHandler+0x3b2>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f022 0201 	bic.w	r2, r2, #1
 8007588:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6919      	ldr	r1, [r3, #16]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	4b29      	ldr	r3, [pc, #164]	; (800763c <HAL_SPI_IRQHandler+0x3bc>)
 8007596:	400b      	ands	r3, r1
 8007598:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80075a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80075a4:	d138      	bne.n	8007618 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	689a      	ldr	r2, [r3, #8]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80075b4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d013      	beq.n	80075e6 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075c2:	4a1f      	ldr	r2, [pc, #124]	; (8007640 <HAL_SPI_IRQHandler+0x3c0>)
 80075c4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fa ff34 	bl	8002438 <HAL_DMA_Abort_IT>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d007      	beq.n	80075e6 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d021      	beq.n	8007632 <HAL_SPI_IRQHandler+0x3b2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075f2:	4a13      	ldr	r2, [pc, #76]	; (8007640 <HAL_SPI_IRQHandler+0x3c0>)
 80075f4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fa ff1c 	bl	8002438 <HAL_DMA_Abort_IT>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d015      	beq.n	8007632 <HAL_SPI_IRQHandler+0x3b2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800760c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007616:	e00c      	b.n	8007632 <HAL_SPI_IRQHandler+0x3b2>
        hspi->State = HAL_SPI_STATE_READY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f82d 	bl	8007680 <HAL_SPI_ErrorCallback>
    return;
 8007626:	bf00      	nop
 8007628:	e003      	b.n	8007632 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800762a:	bf00      	nop
 800762c:	e002      	b.n	8007634 <HAL_SPI_IRQHandler+0x3b4>
    return;
 800762e:	bf00      	nop
 8007630:	e000      	b.n	8007634 <HAL_SPI_IRQHandler+0x3b4>
    return;
 8007632:	bf00      	nop
  }
}
 8007634:	3728      	adds	r7, #40	; 0x28
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	fffffc94 	.word	0xfffffc94
 8007640:	0800773d 	.word	0x0800773d

08007644 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a0:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b07      	cmp	r3, #7
 80076ac:	d011      	beq.n	80076d2 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076b2:	69db      	ldr	r3, [r3, #28]
 80076b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076b8:	d103      	bne.n	80076c2 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f7f9 f9de 	bl	8000a7c <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80076c0:	e007      	b.n	80076d2 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	691a      	ldr	r2, [r3, #16]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f042 0208 	orr.w	r2, r2, #8
 80076d0:	611a      	str	r2, [r3, #16]
}
 80076d2:	bf00      	nop
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b084      	sub	sp, #16
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f7ff ffbf 	bl	800766c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80076ee:	bf00      	nop
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b084      	sub	sp, #16
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007702:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f7fc f805 	bl	8003714 <HAL_DMA_GetError>
 800770a:	4603      	mov	r3, r0
 800770c:	2b02      	cmp	r3, #2
 800770e:	d011      	beq.n	8007734 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f000 f82d 	bl	8007770 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800771c:	f043 0210 	orr.w	r2, r3, #16
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f7ff ffa6 	bl	8007680 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8007734:	bf00      	nop
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007748:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f7ff ff8c 	bl	8007680 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007768:	bf00      	nop
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	699a      	ldr	r2, [r3, #24]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f042 0208 	orr.w	r2, r2, #8
 800778e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	699a      	ldr	r2, [r3, #24]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f042 0210 	orr.w	r2, r2, #16
 800779e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f022 0201 	bic.w	r2, r2, #1
 80077ae:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	6919      	ldr	r1, [r3, #16]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	4b3c      	ldr	r3, [pc, #240]	; (80078ac <SPI_CloseTransfer+0x13c>)
 80077bc:	400b      	ands	r3, r1
 80077be:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	689a      	ldr	r2, [r3, #8]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80077ce:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b04      	cmp	r3, #4
 80077da:	d014      	beq.n	8007806 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f003 0320 	and.w	r3, r3, #32
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00f      	beq.n	8007806 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	699a      	ldr	r2, [r3, #24]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f042 0220 	orr.w	r2, r2, #32
 8007804:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b03      	cmp	r3, #3
 8007810:	d014      	beq.n	800783c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00f      	beq.n	800783c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007822:	f043 0204 	orr.w	r2, r3, #4
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	699a      	ldr	r2, [r3, #24]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800783a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00f      	beq.n	8007866 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800784c:	f043 0201 	orr.w	r2, r3, #1
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	699a      	ldr	r2, [r3, #24]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007864:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00f      	beq.n	8007890 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007876:	f043 0208 	orr.w	r2, r3, #8
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	699a      	ldr	r2, [r3, #24]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800788e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80078a0:	bf00      	nop
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	fffffc90 	.word	0xfffffc90

080078b0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	603b      	str	r3, [r7, #0]
 80078bc:	4613      	mov	r3, r2
 80078be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80078c0:	e010      	b.n	80078e4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078c2:	f7f9 fea9 	bl	8001618 <HAL_GetTick>
 80078c6:	4602      	mov	r2, r0
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	69ba      	ldr	r2, [r7, #24]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d803      	bhi.n	80078da <SPI_WaitOnFlagUntilTimeout+0x2a>
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d8:	d102      	bne.n	80078e0 <SPI_WaitOnFlagUntilTimeout+0x30>
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d101      	bne.n	80078e4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e00f      	b.n	8007904 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	695a      	ldr	r2, [r3, #20]
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	4013      	ands	r3, r2
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	bf0c      	ite	eq
 80078f4:	2301      	moveq	r3, #1
 80078f6:	2300      	movne	r3, #0
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	461a      	mov	r2, r3
 80078fc:	79fb      	ldrb	r3, [r7, #7]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d0df      	beq.n	80078c2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007918:	095b      	lsrs	r3, r3, #5
 800791a:	3301      	adds	r3, #1
 800791c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	3301      	adds	r3, #1
 8007924:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	3307      	adds	r3, #7
 800792a:	08db      	lsrs	r3, r3, #3
 800792c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	fb02 f303 	mul.w	r3, r2, r3
}
 8007936:	4618      	mov	r0, r3
 8007938:	3714      	adds	r7, #20
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b082      	sub	sp, #8
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d101      	bne.n	8007954 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	e042      	b.n	80079da <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800795a:	2b00      	cmp	r3, #0
 800795c:	d106      	bne.n	800796c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f7f9 fc58 	bl	800121c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2224      	movs	r2, #36	; 0x24
 8007970:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f022 0201 	bic.w	r2, r2, #1
 8007982:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f8c3 	bl	8007b10 <UART_SetConfig>
 800798a:	4603      	mov	r3, r0
 800798c:	2b01      	cmp	r3, #1
 800798e:	d101      	bne.n	8007994 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e022      	b.n	80079da <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007998:	2b00      	cmp	r3, #0
 800799a:	d002      	beq.n	80079a2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fe67 	bl	8008670 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	685a      	ldr	r2, [r3, #4]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	689a      	ldr	r2, [r3, #8]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f042 0201 	orr.w	r2, r2, #1
 80079d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 feee 	bl	80087b4 <UART_CheckIdleState>
 80079d8:	4603      	mov	r3, r0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b08a      	sub	sp, #40	; 0x28
 80079e6:	af02      	add	r7, sp, #8
 80079e8:	60f8      	str	r0, [r7, #12]
 80079ea:	60b9      	str	r1, [r7, #8]
 80079ec:	603b      	str	r3, [r7, #0]
 80079ee:	4613      	mov	r3, r2
 80079f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079f8:	2b20      	cmp	r3, #32
 80079fa:	f040 8083 	bne.w	8007b04 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d002      	beq.n	8007a0a <HAL_UART_Transmit+0x28>
 8007a04:	88fb      	ldrh	r3, [r7, #6]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d101      	bne.n	8007a0e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e07b      	b.n	8007b06 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d101      	bne.n	8007a1c <HAL_UART_Transmit+0x3a>
 8007a18:	2302      	movs	r3, #2
 8007a1a:	e074      	b.n	8007b06 <HAL_UART_Transmit+0x124>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2221      	movs	r2, #33	; 0x21
 8007a30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007a34:	f7f9 fdf0 	bl	8001618 <HAL_GetTick>
 8007a38:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	88fa      	ldrh	r2, [r7, #6]
 8007a3e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	88fa      	ldrh	r2, [r7, #6]
 8007a46:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a52:	d108      	bne.n	8007a66 <HAL_UART_Transmit+0x84>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d104      	bne.n	8007a66 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	61bb      	str	r3, [r7, #24]
 8007a64:	e003      	b.n	8007a6e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8007a76:	e02c      	b.n	8007ad2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	2180      	movs	r1, #128	; 0x80
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f000 fede 	bl	8008844 <UART_WaitOnFlagUntilTimeout>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d001      	beq.n	8007a92 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e039      	b.n	8007b06 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10b      	bne.n	8007ab0 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	881b      	ldrh	r3, [r3, #0]
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007aa6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	3302      	adds	r3, #2
 8007aac:	61bb      	str	r3, [r7, #24]
 8007aae:	e007      	b.n	8007ac0 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	781a      	ldrb	r2, [r3, #0]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	3301      	adds	r3, #1
 8007abe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	b29a      	uxth	r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1cc      	bne.n	8007a78 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	2140      	movs	r1, #64	; 0x40
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f000 feab 	bl	8008844 <UART_WaitOnFlagUntilTimeout>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d001      	beq.n	8007af8 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e006      	b.n	8007b06 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2220      	movs	r2, #32
 8007afc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	e000      	b.n	8007b06 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007b04:	2302      	movs	r3, #2
  }
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3720      	adds	r7, #32
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
	...

08007b10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b10:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007b14:	b08e      	sub	sp, #56	; 0x38
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	689a      	ldr	r2, [r3, #8]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	431a      	orrs	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	431a      	orrs	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	69db      	ldr	r3, [r3, #28]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	4bc1      	ldr	r3, [pc, #772]	; (8007e50 <UART_SetConfig+0x340>)
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	6812      	ldr	r2, [r2, #0]
 8007b50:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007b52:	430b      	orrs	r3, r1
 8007b54:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	68da      	ldr	r2, [r3, #12]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	430a      	orrs	r2, r1
 8007b6a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4ab7      	ldr	r2, [pc, #732]	; (8007e54 <UART_SetConfig+0x344>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d004      	beq.n	8007b86 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a1b      	ldr	r3, [r3, #32]
 8007b80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b82:	4313      	orrs	r3, r2
 8007b84:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	689a      	ldr	r2, [r3, #8]
 8007b8c:	4bb2      	ldr	r3, [pc, #712]	; (8007e58 <UART_SetConfig+0x348>)
 8007b8e:	4013      	ands	r3, r2
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	6812      	ldr	r2, [r2, #0]
 8007b94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007b96:	430b      	orrs	r3, r1
 8007b98:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba0:	f023 010f 	bic.w	r1, r3, #15
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	430a      	orrs	r2, r1
 8007bae:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4aa9      	ldr	r2, [pc, #676]	; (8007e5c <UART_SetConfig+0x34c>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d177      	bne.n	8007caa <UART_SetConfig+0x19a>
 8007bba:	4ba9      	ldr	r3, [pc, #676]	; (8007e60 <UART_SetConfig+0x350>)
 8007bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007bc2:	2b28      	cmp	r3, #40	; 0x28
 8007bc4:	d86c      	bhi.n	8007ca0 <UART_SetConfig+0x190>
 8007bc6:	a201      	add	r2, pc, #4	; (adr r2, 8007bcc <UART_SetConfig+0xbc>)
 8007bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bcc:	08007c71 	.word	0x08007c71
 8007bd0:	08007ca1 	.word	0x08007ca1
 8007bd4:	08007ca1 	.word	0x08007ca1
 8007bd8:	08007ca1 	.word	0x08007ca1
 8007bdc:	08007ca1 	.word	0x08007ca1
 8007be0:	08007ca1 	.word	0x08007ca1
 8007be4:	08007ca1 	.word	0x08007ca1
 8007be8:	08007ca1 	.word	0x08007ca1
 8007bec:	08007c79 	.word	0x08007c79
 8007bf0:	08007ca1 	.word	0x08007ca1
 8007bf4:	08007ca1 	.word	0x08007ca1
 8007bf8:	08007ca1 	.word	0x08007ca1
 8007bfc:	08007ca1 	.word	0x08007ca1
 8007c00:	08007ca1 	.word	0x08007ca1
 8007c04:	08007ca1 	.word	0x08007ca1
 8007c08:	08007ca1 	.word	0x08007ca1
 8007c0c:	08007c81 	.word	0x08007c81
 8007c10:	08007ca1 	.word	0x08007ca1
 8007c14:	08007ca1 	.word	0x08007ca1
 8007c18:	08007ca1 	.word	0x08007ca1
 8007c1c:	08007ca1 	.word	0x08007ca1
 8007c20:	08007ca1 	.word	0x08007ca1
 8007c24:	08007ca1 	.word	0x08007ca1
 8007c28:	08007ca1 	.word	0x08007ca1
 8007c2c:	08007c89 	.word	0x08007c89
 8007c30:	08007ca1 	.word	0x08007ca1
 8007c34:	08007ca1 	.word	0x08007ca1
 8007c38:	08007ca1 	.word	0x08007ca1
 8007c3c:	08007ca1 	.word	0x08007ca1
 8007c40:	08007ca1 	.word	0x08007ca1
 8007c44:	08007ca1 	.word	0x08007ca1
 8007c48:	08007ca1 	.word	0x08007ca1
 8007c4c:	08007c91 	.word	0x08007c91
 8007c50:	08007ca1 	.word	0x08007ca1
 8007c54:	08007ca1 	.word	0x08007ca1
 8007c58:	08007ca1 	.word	0x08007ca1
 8007c5c:	08007ca1 	.word	0x08007ca1
 8007c60:	08007ca1 	.word	0x08007ca1
 8007c64:	08007ca1 	.word	0x08007ca1
 8007c68:	08007ca1 	.word	0x08007ca1
 8007c6c:	08007c99 	.word	0x08007c99
 8007c70:	2301      	movs	r3, #1
 8007c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c76:	e233      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007c78:	2304      	movs	r3, #4
 8007c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c7e:	e22f      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007c80:	2308      	movs	r3, #8
 8007c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c86:	e22b      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007c88:	2310      	movs	r3, #16
 8007c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c8e:	e227      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007c90:	2320      	movs	r3, #32
 8007c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c96:	e223      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007c98:	2340      	movs	r3, #64	; 0x40
 8007c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c9e:	e21f      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007ca0:	2380      	movs	r3, #128	; 0x80
 8007ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ca6:	bf00      	nop
 8007ca8:	e21a      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a6d      	ldr	r2, [pc, #436]	; (8007e64 <UART_SetConfig+0x354>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d132      	bne.n	8007d1a <UART_SetConfig+0x20a>
 8007cb4:	4b6a      	ldr	r3, [pc, #424]	; (8007e60 <UART_SetConfig+0x350>)
 8007cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cb8:	f003 0307 	and.w	r3, r3, #7
 8007cbc:	2b05      	cmp	r3, #5
 8007cbe:	d827      	bhi.n	8007d10 <UART_SetConfig+0x200>
 8007cc0:	a201      	add	r2, pc, #4	; (adr r2, 8007cc8 <UART_SetConfig+0x1b8>)
 8007cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc6:	bf00      	nop
 8007cc8:	08007ce1 	.word	0x08007ce1
 8007ccc:	08007ce9 	.word	0x08007ce9
 8007cd0:	08007cf1 	.word	0x08007cf1
 8007cd4:	08007cf9 	.word	0x08007cf9
 8007cd8:	08007d01 	.word	0x08007d01
 8007cdc:	08007d09 	.word	0x08007d09
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ce6:	e1fb      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007ce8:	2304      	movs	r3, #4
 8007cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cee:	e1f7      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007cf0:	2308      	movs	r3, #8
 8007cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cf6:	e1f3      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007cf8:	2310      	movs	r3, #16
 8007cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cfe:	e1ef      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007d00:	2320      	movs	r3, #32
 8007d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d06:	e1eb      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007d08:	2340      	movs	r3, #64	; 0x40
 8007d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d0e:	e1e7      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007d10:	2380      	movs	r3, #128	; 0x80
 8007d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d16:	bf00      	nop
 8007d18:	e1e2      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a52      	ldr	r2, [pc, #328]	; (8007e68 <UART_SetConfig+0x358>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d132      	bne.n	8007d8a <UART_SetConfig+0x27a>
 8007d24:	4b4e      	ldr	r3, [pc, #312]	; (8007e60 <UART_SetConfig+0x350>)
 8007d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d28:	f003 0307 	and.w	r3, r3, #7
 8007d2c:	2b05      	cmp	r3, #5
 8007d2e:	d827      	bhi.n	8007d80 <UART_SetConfig+0x270>
 8007d30:	a201      	add	r2, pc, #4	; (adr r2, 8007d38 <UART_SetConfig+0x228>)
 8007d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d36:	bf00      	nop
 8007d38:	08007d51 	.word	0x08007d51
 8007d3c:	08007d59 	.word	0x08007d59
 8007d40:	08007d61 	.word	0x08007d61
 8007d44:	08007d69 	.word	0x08007d69
 8007d48:	08007d71 	.word	0x08007d71
 8007d4c:	08007d79 	.word	0x08007d79
 8007d50:	2300      	movs	r3, #0
 8007d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d56:	e1c3      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007d58:	2304      	movs	r3, #4
 8007d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d5e:	e1bf      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007d60:	2308      	movs	r3, #8
 8007d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d66:	e1bb      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007d68:	2310      	movs	r3, #16
 8007d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d6e:	e1b7      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007d70:	2320      	movs	r3, #32
 8007d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d76:	e1b3      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007d78:	2340      	movs	r3, #64	; 0x40
 8007d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d7e:	e1af      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007d80:	2380      	movs	r3, #128	; 0x80
 8007d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d86:	bf00      	nop
 8007d88:	e1aa      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a37      	ldr	r2, [pc, #220]	; (8007e6c <UART_SetConfig+0x35c>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d132      	bne.n	8007dfa <UART_SetConfig+0x2ea>
 8007d94:	4b32      	ldr	r3, [pc, #200]	; (8007e60 <UART_SetConfig+0x350>)
 8007d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d98:	f003 0307 	and.w	r3, r3, #7
 8007d9c:	2b05      	cmp	r3, #5
 8007d9e:	d827      	bhi.n	8007df0 <UART_SetConfig+0x2e0>
 8007da0:	a201      	add	r2, pc, #4	; (adr r2, 8007da8 <UART_SetConfig+0x298>)
 8007da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da6:	bf00      	nop
 8007da8:	08007dc1 	.word	0x08007dc1
 8007dac:	08007dc9 	.word	0x08007dc9
 8007db0:	08007dd1 	.word	0x08007dd1
 8007db4:	08007dd9 	.word	0x08007dd9
 8007db8:	08007de1 	.word	0x08007de1
 8007dbc:	08007de9 	.word	0x08007de9
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dc6:	e18b      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007dc8:	2304      	movs	r3, #4
 8007dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dce:	e187      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007dd0:	2308      	movs	r3, #8
 8007dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dd6:	e183      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007dd8:	2310      	movs	r3, #16
 8007dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dde:	e17f      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007de0:	2320      	movs	r3, #32
 8007de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007de6:	e17b      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007de8:	2340      	movs	r3, #64	; 0x40
 8007dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dee:	e177      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007df0:	2380      	movs	r3, #128	; 0x80
 8007df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007df6:	bf00      	nop
 8007df8:	e172      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a1c      	ldr	r2, [pc, #112]	; (8007e70 <UART_SetConfig+0x360>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d144      	bne.n	8007e8e <UART_SetConfig+0x37e>
 8007e04:	4b16      	ldr	r3, [pc, #88]	; (8007e60 <UART_SetConfig+0x350>)
 8007e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e08:	f003 0307 	and.w	r3, r3, #7
 8007e0c:	2b05      	cmp	r3, #5
 8007e0e:	d839      	bhi.n	8007e84 <UART_SetConfig+0x374>
 8007e10:	a201      	add	r2, pc, #4	; (adr r2, 8007e18 <UART_SetConfig+0x308>)
 8007e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e16:	bf00      	nop
 8007e18:	08007e31 	.word	0x08007e31
 8007e1c:	08007e39 	.word	0x08007e39
 8007e20:	08007e41 	.word	0x08007e41
 8007e24:	08007e49 	.word	0x08007e49
 8007e28:	08007e75 	.word	0x08007e75
 8007e2c:	08007e7d 	.word	0x08007e7d
 8007e30:	2300      	movs	r3, #0
 8007e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e36:	e153      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007e38:	2304      	movs	r3, #4
 8007e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e3e:	e14f      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007e40:	2308      	movs	r3, #8
 8007e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e46:	e14b      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007e48:	2310      	movs	r3, #16
 8007e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e4e:	e147      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007e50:	cfff69f3 	.word	0xcfff69f3
 8007e54:	58000c00 	.word	0x58000c00
 8007e58:	11fff4ff 	.word	0x11fff4ff
 8007e5c:	40011000 	.word	0x40011000
 8007e60:	58024400 	.word	0x58024400
 8007e64:	40004400 	.word	0x40004400
 8007e68:	40004800 	.word	0x40004800
 8007e6c:	40004c00 	.word	0x40004c00
 8007e70:	40005000 	.word	0x40005000
 8007e74:	2320      	movs	r3, #32
 8007e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e7a:	e131      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007e7c:	2340      	movs	r3, #64	; 0x40
 8007e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e82:	e12d      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007e84:	2380      	movs	r3, #128	; 0x80
 8007e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e8a:	bf00      	nop
 8007e8c:	e128      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4ab6      	ldr	r2, [pc, #728]	; (800816c <UART_SetConfig+0x65c>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d178      	bne.n	8007f8a <UART_SetConfig+0x47a>
 8007e98:	4bb5      	ldr	r3, [pc, #724]	; (8008170 <UART_SetConfig+0x660>)
 8007e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ea0:	2b28      	cmp	r3, #40	; 0x28
 8007ea2:	d86d      	bhi.n	8007f80 <UART_SetConfig+0x470>
 8007ea4:	a201      	add	r2, pc, #4	; (adr r2, 8007eac <UART_SetConfig+0x39c>)
 8007ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eaa:	bf00      	nop
 8007eac:	08007f51 	.word	0x08007f51
 8007eb0:	08007f81 	.word	0x08007f81
 8007eb4:	08007f81 	.word	0x08007f81
 8007eb8:	08007f81 	.word	0x08007f81
 8007ebc:	08007f81 	.word	0x08007f81
 8007ec0:	08007f81 	.word	0x08007f81
 8007ec4:	08007f81 	.word	0x08007f81
 8007ec8:	08007f81 	.word	0x08007f81
 8007ecc:	08007f59 	.word	0x08007f59
 8007ed0:	08007f81 	.word	0x08007f81
 8007ed4:	08007f81 	.word	0x08007f81
 8007ed8:	08007f81 	.word	0x08007f81
 8007edc:	08007f81 	.word	0x08007f81
 8007ee0:	08007f81 	.word	0x08007f81
 8007ee4:	08007f81 	.word	0x08007f81
 8007ee8:	08007f81 	.word	0x08007f81
 8007eec:	08007f61 	.word	0x08007f61
 8007ef0:	08007f81 	.word	0x08007f81
 8007ef4:	08007f81 	.word	0x08007f81
 8007ef8:	08007f81 	.word	0x08007f81
 8007efc:	08007f81 	.word	0x08007f81
 8007f00:	08007f81 	.word	0x08007f81
 8007f04:	08007f81 	.word	0x08007f81
 8007f08:	08007f81 	.word	0x08007f81
 8007f0c:	08007f69 	.word	0x08007f69
 8007f10:	08007f81 	.word	0x08007f81
 8007f14:	08007f81 	.word	0x08007f81
 8007f18:	08007f81 	.word	0x08007f81
 8007f1c:	08007f81 	.word	0x08007f81
 8007f20:	08007f81 	.word	0x08007f81
 8007f24:	08007f81 	.word	0x08007f81
 8007f28:	08007f81 	.word	0x08007f81
 8007f2c:	08007f71 	.word	0x08007f71
 8007f30:	08007f81 	.word	0x08007f81
 8007f34:	08007f81 	.word	0x08007f81
 8007f38:	08007f81 	.word	0x08007f81
 8007f3c:	08007f81 	.word	0x08007f81
 8007f40:	08007f81 	.word	0x08007f81
 8007f44:	08007f81 	.word	0x08007f81
 8007f48:	08007f81 	.word	0x08007f81
 8007f4c:	08007f79 	.word	0x08007f79
 8007f50:	2301      	movs	r3, #1
 8007f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f56:	e0c3      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007f58:	2304      	movs	r3, #4
 8007f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f5e:	e0bf      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007f60:	2308      	movs	r3, #8
 8007f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f66:	e0bb      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007f68:	2310      	movs	r3, #16
 8007f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f6e:	e0b7      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007f70:	2320      	movs	r3, #32
 8007f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f76:	e0b3      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007f78:	2340      	movs	r3, #64	; 0x40
 8007f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f7e:	e0af      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007f80:	2380      	movs	r3, #128	; 0x80
 8007f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f86:	bf00      	nop
 8007f88:	e0aa      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a79      	ldr	r2, [pc, #484]	; (8008174 <UART_SetConfig+0x664>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d132      	bne.n	8007ffa <UART_SetConfig+0x4ea>
 8007f94:	4b76      	ldr	r3, [pc, #472]	; (8008170 <UART_SetConfig+0x660>)
 8007f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f98:	f003 0307 	and.w	r3, r3, #7
 8007f9c:	2b05      	cmp	r3, #5
 8007f9e:	d827      	bhi.n	8007ff0 <UART_SetConfig+0x4e0>
 8007fa0:	a201      	add	r2, pc, #4	; (adr r2, 8007fa8 <UART_SetConfig+0x498>)
 8007fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa6:	bf00      	nop
 8007fa8:	08007fc1 	.word	0x08007fc1
 8007fac:	08007fc9 	.word	0x08007fc9
 8007fb0:	08007fd1 	.word	0x08007fd1
 8007fb4:	08007fd9 	.word	0x08007fd9
 8007fb8:	08007fe1 	.word	0x08007fe1
 8007fbc:	08007fe9 	.word	0x08007fe9
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fc6:	e08b      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007fc8:	2304      	movs	r3, #4
 8007fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fce:	e087      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007fd0:	2308      	movs	r3, #8
 8007fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fd6:	e083      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007fd8:	2310      	movs	r3, #16
 8007fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fde:	e07f      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007fe0:	2320      	movs	r3, #32
 8007fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fe6:	e07b      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007fe8:	2340      	movs	r3, #64	; 0x40
 8007fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fee:	e077      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007ff0:	2380      	movs	r3, #128	; 0x80
 8007ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ff6:	bf00      	nop
 8007ff8:	e072      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a5e      	ldr	r2, [pc, #376]	; (8008178 <UART_SetConfig+0x668>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d132      	bne.n	800806a <UART_SetConfig+0x55a>
 8008004:	4b5a      	ldr	r3, [pc, #360]	; (8008170 <UART_SetConfig+0x660>)
 8008006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008008:	f003 0307 	and.w	r3, r3, #7
 800800c:	2b05      	cmp	r3, #5
 800800e:	d827      	bhi.n	8008060 <UART_SetConfig+0x550>
 8008010:	a201      	add	r2, pc, #4	; (adr r2, 8008018 <UART_SetConfig+0x508>)
 8008012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008016:	bf00      	nop
 8008018:	08008031 	.word	0x08008031
 800801c:	08008039 	.word	0x08008039
 8008020:	08008041 	.word	0x08008041
 8008024:	08008049 	.word	0x08008049
 8008028:	08008051 	.word	0x08008051
 800802c:	08008059 	.word	0x08008059
 8008030:	2300      	movs	r3, #0
 8008032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008036:	e053      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8008038:	2304      	movs	r3, #4
 800803a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800803e:	e04f      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8008040:	2308      	movs	r3, #8
 8008042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008046:	e04b      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8008048:	2310      	movs	r3, #16
 800804a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800804e:	e047      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8008050:	2320      	movs	r3, #32
 8008052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008056:	e043      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8008058:	2340      	movs	r3, #64	; 0x40
 800805a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800805e:	e03f      	b.n	80080e0 <UART_SetConfig+0x5d0>
 8008060:	2380      	movs	r3, #128	; 0x80
 8008062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008066:	bf00      	nop
 8008068:	e03a      	b.n	80080e0 <UART_SetConfig+0x5d0>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a43      	ldr	r2, [pc, #268]	; (800817c <UART_SetConfig+0x66c>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d132      	bne.n	80080da <UART_SetConfig+0x5ca>
 8008074:	4b3e      	ldr	r3, [pc, #248]	; (8008170 <UART_SetConfig+0x660>)
 8008076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008078:	f003 0307 	and.w	r3, r3, #7
 800807c:	2b05      	cmp	r3, #5
 800807e:	d827      	bhi.n	80080d0 <UART_SetConfig+0x5c0>
 8008080:	a201      	add	r2, pc, #4	; (adr r2, 8008088 <UART_SetConfig+0x578>)
 8008082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008086:	bf00      	nop
 8008088:	080080a1 	.word	0x080080a1
 800808c:	080080a9 	.word	0x080080a9
 8008090:	080080b1 	.word	0x080080b1
 8008094:	080080b9 	.word	0x080080b9
 8008098:	080080c1 	.word	0x080080c1
 800809c:	080080c9 	.word	0x080080c9
 80080a0:	2302      	movs	r3, #2
 80080a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080a6:	e01b      	b.n	80080e0 <UART_SetConfig+0x5d0>
 80080a8:	2304      	movs	r3, #4
 80080aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080ae:	e017      	b.n	80080e0 <UART_SetConfig+0x5d0>
 80080b0:	2308      	movs	r3, #8
 80080b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080b6:	e013      	b.n	80080e0 <UART_SetConfig+0x5d0>
 80080b8:	2310      	movs	r3, #16
 80080ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080be:	e00f      	b.n	80080e0 <UART_SetConfig+0x5d0>
 80080c0:	2320      	movs	r3, #32
 80080c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080c6:	e00b      	b.n	80080e0 <UART_SetConfig+0x5d0>
 80080c8:	2340      	movs	r3, #64	; 0x40
 80080ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080ce:	e007      	b.n	80080e0 <UART_SetConfig+0x5d0>
 80080d0:	2380      	movs	r3, #128	; 0x80
 80080d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080d6:	bf00      	nop
 80080d8:	e002      	b.n	80080e0 <UART_SetConfig+0x5d0>
 80080da:	2380      	movs	r3, #128	; 0x80
 80080dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a25      	ldr	r2, [pc, #148]	; (800817c <UART_SetConfig+0x66c>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	f040 80b8 	bne.w	800825c <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80080ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80080f0:	2b08      	cmp	r3, #8
 80080f2:	d019      	beq.n	8008128 <UART_SetConfig+0x618>
 80080f4:	2b08      	cmp	r3, #8
 80080f6:	dc04      	bgt.n	8008102 <UART_SetConfig+0x5f2>
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d009      	beq.n	8008110 <UART_SetConfig+0x600>
 80080fc:	2b04      	cmp	r3, #4
 80080fe:	d00b      	beq.n	8008118 <UART_SetConfig+0x608>
 8008100:	e042      	b.n	8008188 <UART_SetConfig+0x678>
 8008102:	2b20      	cmp	r3, #32
 8008104:	d02b      	beq.n	800815e <UART_SetConfig+0x64e>
 8008106:	2b40      	cmp	r3, #64	; 0x40
 8008108:	d02c      	beq.n	8008164 <UART_SetConfig+0x654>
 800810a:	2b10      	cmp	r3, #16
 800810c:	d014      	beq.n	8008138 <UART_SetConfig+0x628>
 800810e:	e03b      	b.n	8008188 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008110:	f7fd ff7a 	bl	8006008 <HAL_RCCEx_GetD3PCLK1Freq>
 8008114:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008116:	e03d      	b.n	8008194 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008118:	f107 0314 	add.w	r3, r7, #20
 800811c:	4618      	mov	r0, r3
 800811e:	f7fd ff89 	bl	8006034 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008126:	e035      	b.n	8008194 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008128:	f107 0308 	add.w	r3, r7, #8
 800812c:	4618      	mov	r0, r3
 800812e:	f7fe f8cd 	bl	80062cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008136:	e02d      	b.n	8008194 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008138:	4b0d      	ldr	r3, [pc, #52]	; (8008170 <UART_SetConfig+0x660>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 0320 	and.w	r3, r3, #32
 8008140:	2b00      	cmp	r3, #0
 8008142:	d009      	beq.n	8008158 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008144:	4b0a      	ldr	r3, [pc, #40]	; (8008170 <UART_SetConfig+0x660>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	08db      	lsrs	r3, r3, #3
 800814a:	f003 0303 	and.w	r3, r3, #3
 800814e:	4a0c      	ldr	r2, [pc, #48]	; (8008180 <UART_SetConfig+0x670>)
 8008150:	fa22 f303 	lsr.w	r3, r2, r3
 8008154:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008156:	e01d      	b.n	8008194 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8008158:	4b09      	ldr	r3, [pc, #36]	; (8008180 <UART_SetConfig+0x670>)
 800815a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800815c:	e01a      	b.n	8008194 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800815e:	4b09      	ldr	r3, [pc, #36]	; (8008184 <UART_SetConfig+0x674>)
 8008160:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008162:	e017      	b.n	8008194 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008164:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008168:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800816a:	e013      	b.n	8008194 <UART_SetConfig+0x684>
 800816c:	40011400 	.word	0x40011400
 8008170:	58024400 	.word	0x58024400
 8008174:	40007800 	.word	0x40007800
 8008178:	40007c00 	.word	0x40007c00
 800817c:	58000c00 	.word	0x58000c00
 8008180:	03d09000 	.word	0x03d09000
 8008184:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8008188:	2300      	movs	r3, #0
 800818a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008192:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008196:	2b00      	cmp	r3, #0
 8008198:	f000 824d 	beq.w	8008636 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a0:	4aad      	ldr	r2, [pc, #692]	; (8008458 <UART_SetConfig+0x948>)
 80081a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081a6:	461a      	mov	r2, r3
 80081a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80081ae:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	685a      	ldr	r2, [r3, #4]
 80081b4:	4613      	mov	r3, r2
 80081b6:	005b      	lsls	r3, r3, #1
 80081b8:	4413      	add	r3, r2
 80081ba:	6a3a      	ldr	r2, [r7, #32]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d305      	bcc.n	80081cc <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081c6:	6a3a      	ldr	r2, [r7, #32]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d903      	bls.n	80081d4 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80081d2:	e230      	b.n	8008636 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d6:	4618      	mov	r0, r3
 80081d8:	f04f 0100 	mov.w	r1, #0
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e0:	4a9d      	ldr	r2, [pc, #628]	; (8008458 <UART_SetConfig+0x948>)
 80081e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	f04f 0400 	mov.w	r4, #0
 80081ec:	461a      	mov	r2, r3
 80081ee:	4623      	mov	r3, r4
 80081f0:	f7f8 f8ce 	bl	8000390 <__aeabi_uldivmod>
 80081f4:	4603      	mov	r3, r0
 80081f6:	460c      	mov	r4, r1
 80081f8:	4619      	mov	r1, r3
 80081fa:	4622      	mov	r2, r4
 80081fc:	f04f 0300 	mov.w	r3, #0
 8008200:	f04f 0400 	mov.w	r4, #0
 8008204:	0214      	lsls	r4, r2, #8
 8008206:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800820a:	020b      	lsls	r3, r1, #8
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	6852      	ldr	r2, [r2, #4]
 8008210:	0852      	lsrs	r2, r2, #1
 8008212:	4611      	mov	r1, r2
 8008214:	f04f 0200 	mov.w	r2, #0
 8008218:	eb13 0b01 	adds.w	fp, r3, r1
 800821c:	eb44 0c02 	adc.w	ip, r4, r2
 8008220:	4658      	mov	r0, fp
 8008222:	4661      	mov	r1, ip
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	f04f 0400 	mov.w	r4, #0
 800822c:	461a      	mov	r2, r3
 800822e:	4623      	mov	r3, r4
 8008230:	f7f8 f8ae 	bl	8000390 <__aeabi_uldivmod>
 8008234:	4603      	mov	r3, r0
 8008236:	460c      	mov	r4, r1
 8008238:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800823a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008240:	d308      	bcc.n	8008254 <UART_SetConfig+0x744>
 8008242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008244:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008248:	d204      	bcs.n	8008254 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008250:	60da      	str	r2, [r3, #12]
 8008252:	e1f0      	b.n	8008636 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800825a:	e1ec      	b.n	8008636 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	69db      	ldr	r3, [r3, #28]
 8008260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008264:	f040 8100 	bne.w	8008468 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8008268:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800826c:	2b40      	cmp	r3, #64	; 0x40
 800826e:	f200 80b7 	bhi.w	80083e0 <UART_SetConfig+0x8d0>
 8008272:	a201      	add	r2, pc, #4	; (adr r2, 8008278 <UART_SetConfig+0x768>)
 8008274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008278:	0800837d 	.word	0x0800837d
 800827c:	08008385 	.word	0x08008385
 8008280:	080083e1 	.word	0x080083e1
 8008284:	080083e1 	.word	0x080083e1
 8008288:	0800838d 	.word	0x0800838d
 800828c:	080083e1 	.word	0x080083e1
 8008290:	080083e1 	.word	0x080083e1
 8008294:	080083e1 	.word	0x080083e1
 8008298:	0800839d 	.word	0x0800839d
 800829c:	080083e1 	.word	0x080083e1
 80082a0:	080083e1 	.word	0x080083e1
 80082a4:	080083e1 	.word	0x080083e1
 80082a8:	080083e1 	.word	0x080083e1
 80082ac:	080083e1 	.word	0x080083e1
 80082b0:	080083e1 	.word	0x080083e1
 80082b4:	080083e1 	.word	0x080083e1
 80082b8:	080083ad 	.word	0x080083ad
 80082bc:	080083e1 	.word	0x080083e1
 80082c0:	080083e1 	.word	0x080083e1
 80082c4:	080083e1 	.word	0x080083e1
 80082c8:	080083e1 	.word	0x080083e1
 80082cc:	080083e1 	.word	0x080083e1
 80082d0:	080083e1 	.word	0x080083e1
 80082d4:	080083e1 	.word	0x080083e1
 80082d8:	080083e1 	.word	0x080083e1
 80082dc:	080083e1 	.word	0x080083e1
 80082e0:	080083e1 	.word	0x080083e1
 80082e4:	080083e1 	.word	0x080083e1
 80082e8:	080083e1 	.word	0x080083e1
 80082ec:	080083e1 	.word	0x080083e1
 80082f0:	080083e1 	.word	0x080083e1
 80082f4:	080083e1 	.word	0x080083e1
 80082f8:	080083d3 	.word	0x080083d3
 80082fc:	080083e1 	.word	0x080083e1
 8008300:	080083e1 	.word	0x080083e1
 8008304:	080083e1 	.word	0x080083e1
 8008308:	080083e1 	.word	0x080083e1
 800830c:	080083e1 	.word	0x080083e1
 8008310:	080083e1 	.word	0x080083e1
 8008314:	080083e1 	.word	0x080083e1
 8008318:	080083e1 	.word	0x080083e1
 800831c:	080083e1 	.word	0x080083e1
 8008320:	080083e1 	.word	0x080083e1
 8008324:	080083e1 	.word	0x080083e1
 8008328:	080083e1 	.word	0x080083e1
 800832c:	080083e1 	.word	0x080083e1
 8008330:	080083e1 	.word	0x080083e1
 8008334:	080083e1 	.word	0x080083e1
 8008338:	080083e1 	.word	0x080083e1
 800833c:	080083e1 	.word	0x080083e1
 8008340:	080083e1 	.word	0x080083e1
 8008344:	080083e1 	.word	0x080083e1
 8008348:	080083e1 	.word	0x080083e1
 800834c:	080083e1 	.word	0x080083e1
 8008350:	080083e1 	.word	0x080083e1
 8008354:	080083e1 	.word	0x080083e1
 8008358:	080083e1 	.word	0x080083e1
 800835c:	080083e1 	.word	0x080083e1
 8008360:	080083e1 	.word	0x080083e1
 8008364:	080083e1 	.word	0x080083e1
 8008368:	080083e1 	.word	0x080083e1
 800836c:	080083e1 	.word	0x080083e1
 8008370:	080083e1 	.word	0x080083e1
 8008374:	080083e1 	.word	0x080083e1
 8008378:	080083d9 	.word	0x080083d9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800837c:	f7fc ff2a 	bl	80051d4 <HAL_RCC_GetPCLK1Freq>
 8008380:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008382:	e033      	b.n	80083ec <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008384:	f7fc ff3c 	bl	8005200 <HAL_RCC_GetPCLK2Freq>
 8008388:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800838a:	e02f      	b.n	80083ec <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800838c:	f107 0314 	add.w	r3, r7, #20
 8008390:	4618      	mov	r0, r3
 8008392:	f7fd fe4f 	bl	8006034 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800839a:	e027      	b.n	80083ec <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800839c:	f107 0308 	add.w	r3, r7, #8
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7fd ff93 	bl	80062cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083aa:	e01f      	b.n	80083ec <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083ac:	4b2b      	ldr	r3, [pc, #172]	; (800845c <UART_SetConfig+0x94c>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 0320 	and.w	r3, r3, #32
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d009      	beq.n	80083cc <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80083b8:	4b28      	ldr	r3, [pc, #160]	; (800845c <UART_SetConfig+0x94c>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	08db      	lsrs	r3, r3, #3
 80083be:	f003 0303 	and.w	r3, r3, #3
 80083c2:	4a27      	ldr	r2, [pc, #156]	; (8008460 <UART_SetConfig+0x950>)
 80083c4:	fa22 f303 	lsr.w	r3, r2, r3
 80083c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80083ca:	e00f      	b.n	80083ec <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80083cc:	4b24      	ldr	r3, [pc, #144]	; (8008460 <UART_SetConfig+0x950>)
 80083ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083d0:	e00c      	b.n	80083ec <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80083d2:	4b24      	ldr	r3, [pc, #144]	; (8008464 <UART_SetConfig+0x954>)
 80083d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083d6:	e009      	b.n	80083ec <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083de:	e005      	b.n	80083ec <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80083e0:	2300      	movs	r3, #0
 80083e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80083ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f000 8121 	beq.w	8008636 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f8:	4a17      	ldr	r2, [pc, #92]	; (8008458 <UART_SetConfig+0x948>)
 80083fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083fe:	461a      	mov	r2, r3
 8008400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008402:	fbb3 f3f2 	udiv	r3, r3, r2
 8008406:	005a      	lsls	r2, r3, #1
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	085b      	lsrs	r3, r3, #1
 800840e:	441a      	add	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	fbb2 f3f3 	udiv	r3, r2, r3
 8008418:	b29b      	uxth	r3, r3
 800841a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800841c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841e:	2b0f      	cmp	r3, #15
 8008420:	d916      	bls.n	8008450 <UART_SetConfig+0x940>
 8008422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008428:	d212      	bcs.n	8008450 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800842a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842c:	b29b      	uxth	r3, r3
 800842e:	f023 030f 	bic.w	r3, r3, #15
 8008432:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008436:	085b      	lsrs	r3, r3, #1
 8008438:	b29b      	uxth	r3, r3
 800843a:	f003 0307 	and.w	r3, r3, #7
 800843e:	b29a      	uxth	r2, r3
 8008440:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008442:	4313      	orrs	r3, r2
 8008444:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800844c:	60da      	str	r2, [r3, #12]
 800844e:	e0f2      	b.n	8008636 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008456:	e0ee      	b.n	8008636 <UART_SetConfig+0xb26>
 8008458:	0800cf24 	.word	0x0800cf24
 800845c:	58024400 	.word	0x58024400
 8008460:	03d09000 	.word	0x03d09000
 8008464:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8008468:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800846c:	2b40      	cmp	r3, #64	; 0x40
 800846e:	f200 80b7 	bhi.w	80085e0 <UART_SetConfig+0xad0>
 8008472:	a201      	add	r2, pc, #4	; (adr r2, 8008478 <UART_SetConfig+0x968>)
 8008474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008478:	0800857d 	.word	0x0800857d
 800847c:	08008585 	.word	0x08008585
 8008480:	080085e1 	.word	0x080085e1
 8008484:	080085e1 	.word	0x080085e1
 8008488:	0800858d 	.word	0x0800858d
 800848c:	080085e1 	.word	0x080085e1
 8008490:	080085e1 	.word	0x080085e1
 8008494:	080085e1 	.word	0x080085e1
 8008498:	0800859d 	.word	0x0800859d
 800849c:	080085e1 	.word	0x080085e1
 80084a0:	080085e1 	.word	0x080085e1
 80084a4:	080085e1 	.word	0x080085e1
 80084a8:	080085e1 	.word	0x080085e1
 80084ac:	080085e1 	.word	0x080085e1
 80084b0:	080085e1 	.word	0x080085e1
 80084b4:	080085e1 	.word	0x080085e1
 80084b8:	080085ad 	.word	0x080085ad
 80084bc:	080085e1 	.word	0x080085e1
 80084c0:	080085e1 	.word	0x080085e1
 80084c4:	080085e1 	.word	0x080085e1
 80084c8:	080085e1 	.word	0x080085e1
 80084cc:	080085e1 	.word	0x080085e1
 80084d0:	080085e1 	.word	0x080085e1
 80084d4:	080085e1 	.word	0x080085e1
 80084d8:	080085e1 	.word	0x080085e1
 80084dc:	080085e1 	.word	0x080085e1
 80084e0:	080085e1 	.word	0x080085e1
 80084e4:	080085e1 	.word	0x080085e1
 80084e8:	080085e1 	.word	0x080085e1
 80084ec:	080085e1 	.word	0x080085e1
 80084f0:	080085e1 	.word	0x080085e1
 80084f4:	080085e1 	.word	0x080085e1
 80084f8:	080085d3 	.word	0x080085d3
 80084fc:	080085e1 	.word	0x080085e1
 8008500:	080085e1 	.word	0x080085e1
 8008504:	080085e1 	.word	0x080085e1
 8008508:	080085e1 	.word	0x080085e1
 800850c:	080085e1 	.word	0x080085e1
 8008510:	080085e1 	.word	0x080085e1
 8008514:	080085e1 	.word	0x080085e1
 8008518:	080085e1 	.word	0x080085e1
 800851c:	080085e1 	.word	0x080085e1
 8008520:	080085e1 	.word	0x080085e1
 8008524:	080085e1 	.word	0x080085e1
 8008528:	080085e1 	.word	0x080085e1
 800852c:	080085e1 	.word	0x080085e1
 8008530:	080085e1 	.word	0x080085e1
 8008534:	080085e1 	.word	0x080085e1
 8008538:	080085e1 	.word	0x080085e1
 800853c:	080085e1 	.word	0x080085e1
 8008540:	080085e1 	.word	0x080085e1
 8008544:	080085e1 	.word	0x080085e1
 8008548:	080085e1 	.word	0x080085e1
 800854c:	080085e1 	.word	0x080085e1
 8008550:	080085e1 	.word	0x080085e1
 8008554:	080085e1 	.word	0x080085e1
 8008558:	080085e1 	.word	0x080085e1
 800855c:	080085e1 	.word	0x080085e1
 8008560:	080085e1 	.word	0x080085e1
 8008564:	080085e1 	.word	0x080085e1
 8008568:	080085e1 	.word	0x080085e1
 800856c:	080085e1 	.word	0x080085e1
 8008570:	080085e1 	.word	0x080085e1
 8008574:	080085e1 	.word	0x080085e1
 8008578:	080085d9 	.word	0x080085d9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800857c:	f7fc fe2a 	bl	80051d4 <HAL_RCC_GetPCLK1Freq>
 8008580:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008582:	e033      	b.n	80085ec <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008584:	f7fc fe3c 	bl	8005200 <HAL_RCC_GetPCLK2Freq>
 8008588:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800858a:	e02f      	b.n	80085ec <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800858c:	f107 0314 	add.w	r3, r7, #20
 8008590:	4618      	mov	r0, r3
 8008592:	f7fd fd4f 	bl	8006034 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800859a:	e027      	b.n	80085ec <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800859c:	f107 0308 	add.w	r3, r7, #8
 80085a0:	4618      	mov	r0, r3
 80085a2:	f7fd fe93 	bl	80062cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80085aa:	e01f      	b.n	80085ec <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085ac:	4b2c      	ldr	r3, [pc, #176]	; (8008660 <UART_SetConfig+0xb50>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 0320 	and.w	r3, r3, #32
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d009      	beq.n	80085cc <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80085b8:	4b29      	ldr	r3, [pc, #164]	; (8008660 <UART_SetConfig+0xb50>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	08db      	lsrs	r3, r3, #3
 80085be:	f003 0303 	and.w	r3, r3, #3
 80085c2:	4a28      	ldr	r2, [pc, #160]	; (8008664 <UART_SetConfig+0xb54>)
 80085c4:	fa22 f303 	lsr.w	r3, r2, r3
 80085c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80085ca:	e00f      	b.n	80085ec <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 80085cc:	4b25      	ldr	r3, [pc, #148]	; (8008664 <UART_SetConfig+0xb54>)
 80085ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80085d0:	e00c      	b.n	80085ec <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80085d2:	4b25      	ldr	r3, [pc, #148]	; (8008668 <UART_SetConfig+0xb58>)
 80085d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80085d6:	e009      	b.n	80085ec <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80085de:	e005      	b.n	80085ec <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80085e0:	2300      	movs	r3, #0
 80085e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80085ea:	bf00      	nop
    }

    if (pclk != 0U)
 80085ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d021      	beq.n	8008636 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f6:	4a1d      	ldr	r2, [pc, #116]	; (800866c <UART_SetConfig+0xb5c>)
 80085f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085fc:	461a      	mov	r2, r3
 80085fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008600:	fbb3 f2f2 	udiv	r2, r3, r2
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	085b      	lsrs	r3, r3, #1
 800860a:	441a      	add	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	fbb2 f3f3 	udiv	r3, r2, r3
 8008614:	b29b      	uxth	r3, r3
 8008616:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861a:	2b0f      	cmp	r3, #15
 800861c:	d908      	bls.n	8008630 <UART_SetConfig+0xb20>
 800861e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008624:	d204      	bcs.n	8008630 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800862c:	60da      	str	r2, [r3, #12]
 800862e:	e002      	b.n	8008636 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2201      	movs	r2, #1
 8008642:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008652:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8008656:	4618      	mov	r0, r3
 8008658:	3738      	adds	r7, #56	; 0x38
 800865a:	46bd      	mov	sp, r7
 800865c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8008660:	58024400 	.word	0x58024400
 8008664:	03d09000 	.word	0x03d09000
 8008668:	003d0900 	.word	0x003d0900
 800866c:	0800cf24 	.word	0x0800cf24

08008670 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867c:	f003 0301 	and.w	r3, r3, #1
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00a      	beq.n	800869a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	430a      	orrs	r2, r1
 8008698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869e:	f003 0302 	and.w	r3, r3, #2
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00a      	beq.n	80086bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	430a      	orrs	r2, r1
 80086ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c0:	f003 0304 	and.w	r3, r3, #4
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00a      	beq.n	80086de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	430a      	orrs	r2, r1
 80086dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e2:	f003 0308 	and.w	r3, r3, #8
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00a      	beq.n	8008700 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	430a      	orrs	r2, r1
 80086fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008704:	f003 0310 	and.w	r3, r3, #16
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00a      	beq.n	8008722 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	430a      	orrs	r2, r1
 8008720:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008726:	f003 0320 	and.w	r3, r3, #32
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00a      	beq.n	8008744 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	430a      	orrs	r2, r1
 8008742:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800874c:	2b00      	cmp	r3, #0
 800874e:	d01a      	beq.n	8008786 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	430a      	orrs	r2, r1
 8008764:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800876a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800876e:	d10a      	bne.n	8008786 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	430a      	orrs	r2, r1
 8008784:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00a      	beq.n	80087a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	430a      	orrs	r2, r1
 80087a6:	605a      	str	r2, [r3, #4]
  }
}
 80087a8:	bf00      	nop
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b086      	sub	sp, #24
 80087b8:	af02      	add	r7, sp, #8
 80087ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80087c4:	f7f8 ff28 	bl	8001618 <HAL_GetTick>
 80087c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f003 0308 	and.w	r3, r3, #8
 80087d4:	2b08      	cmp	r3, #8
 80087d6:	d10e      	bne.n	80087f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087dc:	9300      	str	r3, [sp, #0]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 f82c 	bl	8008844 <UART_WaitOnFlagUntilTimeout>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087f2:	2303      	movs	r3, #3
 80087f4:	e022      	b.n	800883c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 0304 	and.w	r3, r3, #4
 8008800:	2b04      	cmp	r3, #4
 8008802:	d10e      	bne.n	8008822 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008804:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008808:	9300      	str	r3, [sp, #0]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f816 	bl	8008844 <UART_WaitOnFlagUntilTimeout>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d001      	beq.n	8008822 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e00c      	b.n	800883c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2220      	movs	r2, #32
 8008826:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2220      	movs	r2, #32
 800882e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	603b      	str	r3, [r7, #0]
 8008850:	4613      	mov	r3, r2
 8008852:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008854:	e062      	b.n	800891c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800885c:	d05e      	beq.n	800891c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800885e:	f7f8 fedb 	bl	8001618 <HAL_GetTick>
 8008862:	4602      	mov	r2, r0
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	1ad3      	subs	r3, r2, r3
 8008868:	69ba      	ldr	r2, [r7, #24]
 800886a:	429a      	cmp	r2, r3
 800886c:	d302      	bcc.n	8008874 <UART_WaitOnFlagUntilTimeout+0x30>
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d11d      	bne.n	80088b0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008882:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	689a      	ldr	r2, [r3, #8]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f022 0201 	bic.w	r2, r2, #1
 8008892:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2220      	movs	r2, #32
 8008898:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2220      	movs	r2, #32
 80088a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80088ac:	2303      	movs	r3, #3
 80088ae:	e045      	b.n	800893c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f003 0304 	and.w	r3, r3, #4
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d02e      	beq.n	800891c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	69db      	ldr	r3, [r3, #28]
 80088c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088cc:	d126      	bne.n	800891c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088d6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80088e6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	689a      	ldr	r2, [r3, #8]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f022 0201 	bic.w	r2, r2, #1
 80088f6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2220      	movs	r2, #32
 80088fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2220      	movs	r2, #32
 8008904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2220      	movs	r2, #32
 800890c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8008918:	2303      	movs	r3, #3
 800891a:	e00f      	b.n	800893c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	69da      	ldr	r2, [r3, #28]
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	4013      	ands	r3, r2
 8008926:	68ba      	ldr	r2, [r7, #8]
 8008928:	429a      	cmp	r2, r3
 800892a:	bf0c      	ite	eq
 800892c:	2301      	moveq	r3, #1
 800892e:	2300      	movne	r3, #0
 8008930:	b2db      	uxtb	r3, r3
 8008932:	461a      	mov	r2, r3
 8008934:	79fb      	ldrb	r3, [r7, #7]
 8008936:	429a      	cmp	r2, r3
 8008938:	d08d      	beq.n	8008856 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008952:	2b01      	cmp	r3, #1
 8008954:	d101      	bne.n	800895a <HAL_UARTEx_DisableFifoMode+0x16>
 8008956:	2302      	movs	r3, #2
 8008958:	e027      	b.n	80089aa <HAL_UARTEx_DisableFifoMode+0x66>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2201      	movs	r2, #1
 800895e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2224      	movs	r2, #36	; 0x24
 8008966:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f022 0201 	bic.w	r2, r2, #1
 8008980:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008988:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2220      	movs	r2, #32
 800899c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3714      	adds	r7, #20
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr

080089b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b084      	sub	sp, #16
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
 80089be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d101      	bne.n	80089ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80089ca:	2302      	movs	r3, #2
 80089cc:	e02d      	b.n	8008a2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2201      	movs	r2, #1
 80089d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2224      	movs	r2, #36	; 0x24
 80089da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f022 0201 	bic.w	r2, r2, #1
 80089f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	683a      	ldr	r2, [r7, #0]
 8008a06:	430a      	orrs	r2, r1
 8008a08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f850 	bl	8008ab0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2220      	movs	r2, #32
 8008a1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b084      	sub	sp, #16
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d101      	bne.n	8008a4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008a46:	2302      	movs	r3, #2
 8008a48:	e02d      	b.n	8008aa6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2224      	movs	r2, #36	; 0x24
 8008a56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f022 0201 	bic.w	r2, r2, #1
 8008a70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	683a      	ldr	r2, [r7, #0]
 8008a82:	430a      	orrs	r2, r1
 8008a84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 f812 	bl	8008ab0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2220      	movs	r2, #32
 8008a98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
	...

08008ab0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b089      	sub	sp, #36	; 0x24
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008ab8:	4a2f      	ldr	r2, [pc, #188]	; (8008b78 <UARTEx_SetNbDataToProcess+0xc8>)
 8008aba:	f107 0314 	add.w	r3, r7, #20
 8008abe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008ac2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008ac6:	4a2d      	ldr	r2, [pc, #180]	; (8008b7c <UARTEx_SetNbDataToProcess+0xcc>)
 8008ac8:	f107 030c 	add.w	r3, r7, #12
 8008acc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008ad0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d108      	bne.n	8008aee <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008aec:	e03d      	b.n	8008b6a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008aee:	2310      	movs	r3, #16
 8008af0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008af2:	2310      	movs	r3, #16
 8008af4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	0e5b      	lsrs	r3, r3, #25
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	f003 0307 	and.w	r3, r3, #7
 8008b04:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	0f5b      	lsrs	r3, r3, #29
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	f003 0307 	and.w	r3, r3, #7
 8008b14:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008b16:	7fbb      	ldrb	r3, [r7, #30]
 8008b18:	7f3a      	ldrb	r2, [r7, #28]
 8008b1a:	f107 0120 	add.w	r1, r7, #32
 8008b1e:	440a      	add	r2, r1
 8008b20:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008b24:	fb02 f303 	mul.w	r3, r2, r3
 8008b28:	7f3a      	ldrb	r2, [r7, #28]
 8008b2a:	f107 0120 	add.w	r1, r7, #32
 8008b2e:	440a      	add	r2, r1
 8008b30:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008b34:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008b40:	7ffb      	ldrb	r3, [r7, #31]
 8008b42:	7f7a      	ldrb	r2, [r7, #29]
 8008b44:	f107 0120 	add.w	r1, r7, #32
 8008b48:	440a      	add	r2, r1
 8008b4a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008b4e:	fb02 f303 	mul.w	r3, r2, r3
 8008b52:	7f7a      	ldrb	r2, [r7, #29]
 8008b54:	f107 0120 	add.w	r1, r7, #32
 8008b58:	440a      	add	r2, r1
 8008b5a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008b5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008b6a:	bf00      	nop
 8008b6c:	3724      	adds	r7, #36	; 0x24
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	0800ceb8 	.word	0x0800ceb8
 8008b7c:	0800cec0 	.word	0x0800cec0

08008b80 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008b84:	4904      	ldr	r1, [pc, #16]	; (8008b98 <MX_FATFS_Init+0x18>)
 8008b86:	4805      	ldr	r0, [pc, #20]	; (8008b9c <MX_FATFS_Init+0x1c>)
 8008b88:	f003 fc74 	bl	800c474 <FATFS_LinkDriver>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	461a      	mov	r2, r3
 8008b90:	4b03      	ldr	r3, [pc, #12]	; (8008ba0 <MX_FATFS_Init+0x20>)
 8008b92:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008b94:	bf00      	nop
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	240012a8 	.word	0x240012a8
 8008b9c:	24000010 	.word	0x24000010
 8008ba0:	240012ac 	.word	0x240012ac

08008ba4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008ba8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <_Z15USER_initializeh>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	4603      	mov	r3, r0
 8008bbc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
    return USER_SPI_initialize(pdrv);
 8008bbe:	79fb      	ldrb	r3, [r7, #7]
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f000 faa1 	bl	8009108 <_Z19USER_SPI_initializeh>
 8008bc6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <_Z11USER_statush>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
    return USER_SPI_status(pdrv);
 8008bda:	79fb      	ldrb	r3, [r7, #7]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f000 fb9b 	bl	8009318 <_Z15USER_SPI_statush>
 8008be2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3708      	adds	r7, #8
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <_Z9USER_readhPhmj>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60b9      	str	r1, [r7, #8]
 8008bf4:	607a      	str	r2, [r7, #4]
 8008bf6:	603b      	str	r3, [r7, #0]
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
    return USER_SPI_read(pdrv, buff, sector, count);
 8008bfc:	7bf8      	ldrb	r0, [r7, #15]
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	68b9      	ldr	r1, [r7, #8]
 8008c04:	f000 fb9e 	bl	8009344 <_Z13USER_SPI_readhPhmj>
 8008c08:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3710      	adds	r7, #16
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <_Z10USER_writehPKhmj>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b084      	sub	sp, #16
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	607a      	str	r2, [r7, #4]
 8008c1c:	603b      	str	r3, [r7, #0]
 8008c1e:	4603      	mov	r3, r0
 8008c20:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
    return USER_SPI_write(pdrv, buff, sector, count);
 8008c22:	7bf8      	ldrb	r0, [r7, #15]
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	68b9      	ldr	r1, [r7, #8]
 8008c2a:	f000 fc0b 	bl	8009444 <_Z14USER_SPI_writehPKhmj>
 8008c2e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3710      	adds	r7, #16
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <_Z14USER_write_dmahPKhmj>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60b9      	str	r1, [r7, #8]
 8008c40:	607a      	str	r2, [r7, #4]
 8008c42:	603b      	str	r3, [r7, #0]
 8008c44:	4603      	mov	r3, r0
 8008c46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
    return USER_SPI_write_dma(pdrv, buff, sector, count);
 8008c48:	7bf8      	ldrb	r0, [r7, #15]
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	68b9      	ldr	r1, [r7, #8]
 8008c50:	f000 fc98 	bl	8009584 <_Z18USER_SPI_write_dmahPKhmj>
 8008c54:	4603      	mov	r3, r0
//    return USER_SPI_write_dma(pdrv, buff, sector, count);
  /* USER CODE END WRITE */
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <_Z10USER_ioctlhhPv>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b082      	sub	sp, #8
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	4603      	mov	r3, r0
 8008c66:	603a      	str	r2, [r7, #0]
 8008c68:	71fb      	strb	r3, [r7, #7]
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8008c6e:	79b9      	ldrb	r1, [r7, #6]
 8008c70:	79fb      	ldrb	r3, [r7, #7]
 8008c72:	683a      	ldr	r2, [r7, #0]
 8008c74:	4618      	mov	r0, r3
 8008c76:	f000 fdd5 	bl	8009824 <_Z14USER_SPI_ioctlhhPv>
 8008c7a:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3708      	adds	r7, #8
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <_Z12SPI_Timer_Onm>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8008c8c:	f7f8 fcc4 	bl	8001618 <HAL_GetTick>
 8008c90:	4602      	mov	r2, r0
 8008c92:	4b04      	ldr	r3, [pc, #16]	; (8008ca4 <_Z12SPI_Timer_Onm+0x20>)
 8008c94:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8008c96:	4a04      	ldr	r2, [pc, #16]	; (8008ca8 <_Z12SPI_Timer_Onm+0x24>)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6013      	str	r3, [r2, #0]
}
 8008c9c:	bf00      	nop
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	24001260 	.word	0x24001260
 8008ca8:	24001264 	.word	0x24001264

08008cac <_Z16SPI_Timer_Statusv>:

uint8_t SPI_Timer_Status() {
 8008cac:	b580      	push	{r7, lr}
 8008cae:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8008cb0:	f7f8 fcb2 	bl	8001618 <HAL_GetTick>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	4b06      	ldr	r3, [pc, #24]	; (8008cd0 <_Z16SPI_Timer_Statusv+0x24>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	1ad2      	subs	r2, r2, r3
 8008cbc:	4b05      	ldr	r3, [pc, #20]	; (8008cd4 <_Z16SPI_Timer_Statusv+0x28>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	bf34      	ite	cc
 8008cc4:	2301      	movcc	r3, #1
 8008cc6:	2300      	movcs	r3, #0
 8008cc8:	b2db      	uxtb	r3, r3
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	24001260 	.word	0x24001260
 8008cd4:	24001264 	.word	0x24001264

08008cd8 <_ZL8xchg_spih>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b086      	sub	sp, #24
 8008cdc:	af02      	add	r7, sp, #8
 8008cde:	4603      	mov	r3, r0
 8008ce0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8008ce2:	f107 020f 	add.w	r2, r7, #15
 8008ce6:	1df9      	adds	r1, r7, #7
 8008ce8:	2332      	movs	r3, #50	; 0x32
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	2301      	movs	r3, #1
 8008cee:	4804      	ldr	r0, [pc, #16]	; (8008d00 <_ZL8xchg_spih+0x28>)
 8008cf0:	f7fd fe94 	bl	8006a1c <HAL_SPI_TransmitReceive>
    return rxDat;
 8008cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	240000ac 	.word	0x240000ac

08008d04 <_ZL14rcvr_spi_multiPhj>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8008d04:	b590      	push	{r4, r7, lr}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8008d0e:	2300      	movs	r3, #0
 8008d10:	60fb      	str	r3, [r7, #12]
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d20b      	bcs.n	8008d32 <_ZL14rcvr_spi_multiPhj+0x2e>
		*(buff+i) = xchg_spi(0xFF);
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	18d4      	adds	r4, r2, r3
 8008d20:	20ff      	movs	r0, #255	; 0xff
 8008d22:	f7ff ffd9 	bl	8008cd8 <_ZL8xchg_spih>
 8008d26:	4603      	mov	r3, r0
 8008d28:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	60fb      	str	r3, [r7, #12]
 8008d30:	e7ef      	b.n	8008d12 <_ZL14rcvr_spi_multiPhj+0xe>
	}
}
 8008d32:	bf00      	nop
 8008d34:	3714      	adds	r7, #20
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd90      	pop	{r4, r7, pc}

08008d3a <_ZL14xmit_spi_multiPKhj>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b084      	sub	sp, #16
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
 8008d42:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8008d44:	2300      	movs	r3, #0
 8008d46:	60fb      	str	r3, [r7, #12]
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d20a      	bcs.n	8008d66 <_ZL14xmit_spi_multiPKhj+0x2c>
		xchg_spi(*(buff+i));
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	4413      	add	r3, r2
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7ff ffbd 	bl	8008cd8 <_ZL8xchg_spih>
	for(UINT i=0; i<btx; i++) {
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	3301      	adds	r3, #1
 8008d62:	60fb      	str	r3, [r7, #12]
 8008d64:	e7f0      	b.n	8008d48 <_ZL14xmit_spi_multiPKhj+0xe>
	}
}
 8008d66:	bf00      	nop
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <_ZL10wait_readyj>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b086      	sub	sp, #24
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8008d76:	f7f8 fc4f 	bl	8001618 <HAL_GetTick>
 8008d7a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8008d80:	20ff      	movs	r0, #255	; 0xff
 8008d82:	f7ff ffa9 	bl	8008cd8 <_ZL8xchg_spih>
 8008d86:	4603      	mov	r3, r0
 8008d88:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8008d8a:	7bfb      	ldrb	r3, [r7, #15]
 8008d8c:	2bff      	cmp	r3, #255	; 0xff
 8008d8e:	d009      	beq.n	8008da4 <_ZL10wait_readyj+0x36>
 8008d90:	f7f8 fc42 	bl	8001618 <HAL_GetTick>
 8008d94:	4602      	mov	r2, r0
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	1ad3      	subs	r3, r2, r3
 8008d9a:	693a      	ldr	r2, [r7, #16]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d901      	bls.n	8008da4 <_ZL10wait_readyj+0x36>
 8008da0:	2301      	movs	r3, #1
 8008da2:	e000      	b.n	8008da6 <_ZL10wait_readyj+0x38>
 8008da4:	2300      	movs	r3, #0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d000      	beq.n	8008dac <_ZL10wait_readyj+0x3e>
	do {
 8008daa:	e7e9      	b.n	8008d80 <_ZL10wait_readyj+0x12>

	return (d == 0xFF) ? 1 : 0;
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
 8008dae:	2bff      	cmp	r3, #255	; 0xff
 8008db0:	d101      	bne.n	8008db6 <_ZL10wait_readyj+0x48>
 8008db2:	2301      	movs	r3, #1
 8008db4:	e000      	b.n	8008db8 <_ZL10wait_readyj+0x4a>
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3718      	adds	r7, #24
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <_ZL11despiselectv>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008dca:	4804      	ldr	r0, [pc, #16]	; (8008ddc <_ZL11despiselectv+0x1c>)
 8008dcc:	f7fb fa46 	bl	800425c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8008dd0:	20ff      	movs	r0, #255	; 0xff
 8008dd2:	f7ff ff81 	bl	8008cd8 <_ZL8xchg_spih>

}
 8008dd6:	bf00      	nop
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	58020800 	.word	0x58020800

08008de0 <_ZL9spiselectv>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8008de4:	2200      	movs	r2, #0
 8008de6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008dea:	480c      	ldr	r0, [pc, #48]	; (8008e1c <_ZL9spiselectv+0x3c>)
 8008dec:	f7fb fa36 	bl	800425c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8008df0:	20ff      	movs	r0, #255	; 0xff
 8008df2:	f7ff ff71 	bl	8008cd8 <_ZL8xchg_spih>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8008df6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008dfa:	f7ff ffb8 	bl	8008d6e <_ZL10wait_readyj>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	bf14      	ite	ne
 8008e04:	2301      	movne	r3, #1
 8008e06:	2300      	moveq	r3, #0
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d001      	beq.n	8008e12 <_ZL9spiselectv+0x32>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e002      	b.n	8008e18 <_ZL9spiselectv+0x38>

	despiselect();
 8008e12:	f7ff ffd5 	bl	8008dc0 <_ZL11despiselectv>
	return 0;	/* Timeout */
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	58020800 	.word	0x58020800

08008e20 <_ZL14rcvr_datablockPhj>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8008e2a:	20c8      	movs	r0, #200	; 0xc8
 8008e2c:	f7ff ff2a 	bl	8008c84 <_Z12SPI_Timer_Onm>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8008e30:	20ff      	movs	r0, #255	; 0xff
 8008e32:	f7ff ff51 	bl	8008cd8 <_ZL8xchg_spih>
 8008e36:	4603      	mov	r3, r0
 8008e38:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8008e3a:	7bfb      	ldrb	r3, [r7, #15]
 8008e3c:	2bff      	cmp	r3, #255	; 0xff
 8008e3e:	d106      	bne.n	8008e4e <_ZL14rcvr_datablockPhj+0x2e>
 8008e40:	f7ff ff34 	bl	8008cac <_Z16SPI_Timer_Statusv>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d001      	beq.n	8008e4e <_ZL14rcvr_datablockPhj+0x2e>
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e000      	b.n	8008e50 <_ZL14rcvr_datablockPhj+0x30>
 8008e4e:	2300      	movs	r3, #0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d000      	beq.n	8008e56 <_ZL14rcvr_datablockPhj+0x36>
	do {							/* Wait for DataStart token in timeout of 200ms */
 8008e54:	e7ec      	b.n	8008e30 <_ZL14rcvr_datablockPhj+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8008e56:	7bfb      	ldrb	r3, [r7, #15]
 8008e58:	2bfe      	cmp	r3, #254	; 0xfe
 8008e5a:	d001      	beq.n	8008e60 <_ZL14rcvr_datablockPhj+0x40>
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	e00a      	b.n	8008e76 <_ZL14rcvr_datablockPhj+0x56>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8008e60:	6839      	ldr	r1, [r7, #0]
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f7ff ff4e 	bl	8008d04 <_ZL14rcvr_spi_multiPhj>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8008e68:	20ff      	movs	r0, #255	; 0xff
 8008e6a:	f7ff ff35 	bl	8008cd8 <_ZL8xchg_spih>
 8008e6e:	20ff      	movs	r0, #255	; 0xff
 8008e70:	f7ff ff32 	bl	8008cd8 <_ZL8xchg_spih>

	return 1;						/* Function succeeded */
 8008e74:	2301      	movs	r3, #1
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <_ZL14xmit_datablockPKhh>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b084      	sub	sp, #16
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
 8008e86:	460b      	mov	r3, r1
 8008e88:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008e8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008e8e:	f7ff ff6e 	bl	8008d6e <_ZL10wait_readyj>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	bf0c      	ite	eq
 8008e98:	2301      	moveq	r3, #1
 8008e9a:	2300      	movne	r3, #0
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d001      	beq.n	8008ea6 <_ZL14xmit_datablockPKhh+0x28>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	e01e      	b.n	8008ee4 <_ZL14xmit_datablockPKhh+0x66>

	xchg_spi(token);					/* Send token */
 8008ea6:	78fb      	ldrb	r3, [r7, #3]
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7ff ff15 	bl	8008cd8 <_ZL8xchg_spih>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008eae:	78fb      	ldrb	r3, [r7, #3]
 8008eb0:	2bfd      	cmp	r3, #253	; 0xfd
 8008eb2:	d016      	beq.n	8008ee2 <_ZL14xmit_datablockPKhh+0x64>
		xmit_spi_multi(buff, 512);		/* Data */
 8008eb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f7ff ff3e 	bl	8008d3a <_ZL14xmit_spi_multiPKhj>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008ebe:	20ff      	movs	r0, #255	; 0xff
 8008ec0:	f7ff ff0a 	bl	8008cd8 <_ZL8xchg_spih>
 8008ec4:	20ff      	movs	r0, #255	; 0xff
 8008ec6:	f7ff ff07 	bl	8008cd8 <_ZL8xchg_spih>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8008eca:	20ff      	movs	r0, #255	; 0xff
 8008ecc:	f7ff ff04 	bl	8008cd8 <_ZL8xchg_spih>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8008ed4:	7bfb      	ldrb	r3, [r7, #15]
 8008ed6:	f003 031f 	and.w	r3, r3, #31
 8008eda:	2b05      	cmp	r3, #5
 8008edc:	d001      	beq.n	8008ee2 <_ZL14xmit_datablockPKhh+0x64>
 8008ede:	2300      	movs	r3, #0
 8008ee0:	e000      	b.n	8008ee4 <_ZL14xmit_datablockPKhh+0x66>
	}
	return 1;
 8008ee2:	2301      	movs	r3, #1
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <_ZL13xmit_data_dmaPKhjh>:
int xmit_data_dma (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	UINT count,			/* Number of sectors to write (1..128) */
	BYTE token			/* Token */
)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b086      	sub	sp, #24
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	71fb      	strb	r3, [r7, #7]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008efa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008efe:	f7ff ff36 	bl	8008d6e <_ZL10wait_readyj>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	bf0c      	ite	eq
 8008f08:	2301      	moveq	r3, #1
 8008f0a:	2300      	movne	r3, #0
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d001      	beq.n	8008f16 <_ZL13xmit_data_dmaPKhjh+0x2a>
 8008f12:	2300      	movs	r3, #0
 8008f14:	e025      	b.n	8008f62 <_ZL13xmit_data_dmaPKhjh+0x76>

	xchg_spi(token);					/* Send token */
 8008f16:	79fb      	ldrb	r3, [r7, #7]
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7ff fedd 	bl	8008cd8 <_ZL8xchg_spih>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008f1e:	79fb      	ldrb	r3, [r7, #7]
 8008f20:	2bfd      	cmp	r3, #253	; 0xfd
 8008f22:	d01d      	beq.n	8008f60 <_ZL13xmit_data_dmaPKhjh+0x74>
		HAL_SPI_Transmit_DMA(&SD_SPI_HANDLE, (uint8_t*)buff, count * 512);
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	025b      	lsls	r3, r3, #9
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	68f9      	ldr	r1, [r7, #12]
 8008f30:	480e      	ldr	r0, [pc, #56]	; (8008f6c <_ZL13xmit_data_dmaPKhjh+0x80>)
 8008f32:	f7fe f85f 	bl	8006ff4 <HAL_SPI_Transmit_DMA>
		HAL_Delay(15);//15
 8008f36:	200f      	movs	r0, #15
 8008f38:	f7f8 fb7a 	bl	8001630 <HAL_Delay>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008f3c:	20ff      	movs	r0, #255	; 0xff
 8008f3e:	f7ff fecb 	bl	8008cd8 <_ZL8xchg_spih>
 8008f42:	20ff      	movs	r0, #255	; 0xff
 8008f44:	f7ff fec8 	bl	8008cd8 <_ZL8xchg_spih>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8008f48:	20ff      	movs	r0, #255	; 0xff
 8008f4a:	f7ff fec5 	bl	8008cd8 <_ZL8xchg_spih>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	75fb      	strb	r3, [r7, #23]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8008f52:	7dfb      	ldrb	r3, [r7, #23]
 8008f54:	f003 031f 	and.w	r3, r3, #31
 8008f58:	2b05      	cmp	r3, #5
 8008f5a:	d001      	beq.n	8008f60 <_ZL13xmit_data_dmaPKhjh+0x74>
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	e000      	b.n	8008f62 <_ZL13xmit_data_dmaPKhjh+0x76>
	}
	return 1;
 8008f60:	2301      	movs	r3, #1
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3718      	adds	r7, #24
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	240000ac 	.word	0x240000ac

08008f70 <_ZN6FatDMA14xmit_datablockEPKhh>:

int FatDMA::xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b086      	sub	sp, #24
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	71fb      	strb	r3, [r7, #7]
	BYTE resp;
	HAL_StatusTypeDef ret;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008f7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008f82:	f7ff fef4 	bl	8008d6e <_ZL10wait_readyj>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	bf0c      	ite	eq
 8008f8c:	2301      	moveq	r3, #1
 8008f8e:	2300      	movne	r3, #0
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d001      	beq.n	8008f9a <_ZN6FatDMA14xmit_datablockEPKhh+0x2a>
 8008f96:	2300      	movs	r3, #0
 8008f98:	e01b      	b.n	8008fd2 <_ZN6FatDMA14xmit_datablockEPKhh+0x62>

	xchg_spi(token);					/* Send token */
 8008f9a:	79fb      	ldrb	r3, [r7, #7]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7ff fe9b 	bl	8008cd8 <_ZL8xchg_spih>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008fa2:	79fb      	ldrb	r3, [r7, #7]
 8008fa4:	2bfd      	cmp	r3, #253	; 0xfd
 8008fa6:	d00d      	beq.n	8008fc4 <_ZN6FatDMA14xmit_datablockEPKhh+0x54>
	  nextBuff = buff + 512;
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	  ret = HAL_SPI_Transmit_DMA(&SD_SPI_HANDLE, (uint8_t*)buff, 512);
 8008fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fb8:	68b9      	ldr	r1, [r7, #8]
 8008fba:	4808      	ldr	r0, [pc, #32]	; (8008fdc <_ZN6FatDMA14xmit_datablockEPKhh+0x6c>)
 8008fbc:	f7fe f81a 	bl	8006ff4 <HAL_SPI_Transmit_DMA>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	75fb      	strb	r3, [r7, #23]

	}
	return ret == HAL_OK ? 1 : 0;
 8008fc4:	7dfb      	ldrb	r3, [r7, #23]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d101      	bne.n	8008fce <_ZN6FatDMA14xmit_datablockEPKhh+0x5e>
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e000      	b.n	8008fd0 <_ZN6FatDMA14xmit_datablockEPKhh+0x60>
 8008fce:	2300      	movs	r3, #0
 8008fd0:	bf00      	nop
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3718      	adds	r7, #24
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	240000ac 	.word	0x240000ac

08008fe0 <_ZN6FatDMA19xmit_datablock_cpltEv>:

int FatDMA::xmit_datablock_cplt (	/* 1:OK, 0:Failed */
)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
	BYTE resp;

	xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008fe6:	20ff      	movs	r0, #255	; 0xff
 8008fe8:	f7ff fe76 	bl	8008cd8 <_ZL8xchg_spih>
 8008fec:	20ff      	movs	r0, #255	; 0xff
 8008fee:	f7ff fe73 	bl	8008cd8 <_ZL8xchg_spih>
	resp = xchg_spi(0xFF);				/* Receive data resp */
 8008ff2:	20ff      	movs	r0, #255	; 0xff
 8008ff4:	f7ff fe70 	bl	8008cd8 <_ZL8xchg_spih>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	71fb      	strb	r3, [r7, #7]
	if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8008ffc:	79fb      	ldrb	r3, [r7, #7]
 8008ffe:	f003 031f 	and.w	r3, r3, #31
 8009002:	2b05      	cmp	r3, #5
 8009004:	d001      	beq.n	800900a <_ZN6FatDMA19xmit_datablock_cpltEv+0x2a>
 8009006:	2300      	movs	r3, #0
 8009008:	e000      	b.n	800900c <_ZN6FatDMA19xmit_datablock_cpltEv+0x2c>
	return 1;
 800900a:	2301      	movs	r3, #1
}
 800900c:	4618      	mov	r0, r3
 800900e:	3708      	adds	r7, #8
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <_ZL8send_cmdhm>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	4603      	mov	r3, r0
 800901c:	6039      	str	r1, [r7, #0]
 800901e:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8009020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009024:	2b00      	cmp	r3, #0
 8009026:	da0e      	bge.n	8009046 <_ZL8send_cmdhm+0x32>
		cmd &= 0x7F;
 8009028:	79fb      	ldrb	r3, [r7, #7]
 800902a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800902e:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8009030:	2100      	movs	r1, #0
 8009032:	2037      	movs	r0, #55	; 0x37
 8009034:	f7ff ffee 	bl	8009014 <_ZL8send_cmdhm>
 8009038:	4603      	mov	r3, r0
 800903a:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800903c:	7bbb      	ldrb	r3, [r7, #14]
 800903e:	2b01      	cmp	r3, #1
 8009040:	d901      	bls.n	8009046 <_ZL8send_cmdhm+0x32>
 8009042:	7bbb      	ldrb	r3, [r7, #14]
 8009044:	e05c      	b.n	8009100 <_ZL8send_cmdhm+0xec>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8009046:	79fb      	ldrb	r3, [r7, #7]
 8009048:	2b0c      	cmp	r3, #12
 800904a:	d00d      	beq.n	8009068 <_ZL8send_cmdhm+0x54>
		despiselect();
 800904c:	f7ff feb8 	bl	8008dc0 <_ZL11despiselectv>
		if (!spiselect()) return 0xFF;
 8009050:	f7ff fec6 	bl	8008de0 <_ZL9spiselectv>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	bf0c      	ite	eq
 800905a:	2301      	moveq	r3, #1
 800905c:	2300      	movne	r3, #0
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b00      	cmp	r3, #0
 8009062:	d001      	beq.n	8009068 <_ZL8send_cmdhm+0x54>
 8009064:	23ff      	movs	r3, #255	; 0xff
 8009066:	e04b      	b.n	8009100 <_ZL8send_cmdhm+0xec>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8009068:	79fb      	ldrb	r3, [r7, #7]
 800906a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800906e:	b2db      	uxtb	r3, r3
 8009070:	4618      	mov	r0, r3
 8009072:	f7ff fe31 	bl	8008cd8 <_ZL8xchg_spih>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	0e1b      	lsrs	r3, r3, #24
 800907a:	b2db      	uxtb	r3, r3
 800907c:	4618      	mov	r0, r3
 800907e:	f7ff fe2b 	bl	8008cd8 <_ZL8xchg_spih>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	0c1b      	lsrs	r3, r3, #16
 8009086:	b2db      	uxtb	r3, r3
 8009088:	4618      	mov	r0, r3
 800908a:	f7ff fe25 	bl	8008cd8 <_ZL8xchg_spih>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	0a1b      	lsrs	r3, r3, #8
 8009092:	b2db      	uxtb	r3, r3
 8009094:	4618      	mov	r0, r3
 8009096:	f7ff fe1f 	bl	8008cd8 <_ZL8xchg_spih>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	b2db      	uxtb	r3, r3
 800909e:	4618      	mov	r0, r3
 80090a0:	f7ff fe1a 	bl	8008cd8 <_ZL8xchg_spih>
	n = 0x01;							/* Dummy CRC + Stop */
 80090a4:	2301      	movs	r3, #1
 80090a6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80090a8:	79fb      	ldrb	r3, [r7, #7]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d101      	bne.n	80090b2 <_ZL8send_cmdhm+0x9e>
 80090ae:	2395      	movs	r3, #149	; 0x95
 80090b0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80090b2:	79fb      	ldrb	r3, [r7, #7]
 80090b4:	2b08      	cmp	r3, #8
 80090b6:	d101      	bne.n	80090bc <_ZL8send_cmdhm+0xa8>
 80090b8:	2387      	movs	r3, #135	; 0x87
 80090ba:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80090bc:	7bfb      	ldrb	r3, [r7, #15]
 80090be:	4618      	mov	r0, r3
 80090c0:	f7ff fe0a 	bl	8008cd8 <_ZL8xchg_spih>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80090c4:	79fb      	ldrb	r3, [r7, #7]
 80090c6:	2b0c      	cmp	r3, #12
 80090c8:	d102      	bne.n	80090d0 <_ZL8send_cmdhm+0xbc>
 80090ca:	20ff      	movs	r0, #255	; 0xff
 80090cc:	f7ff fe04 	bl	8008cd8 <_ZL8xchg_spih>
	n = 10;								/* Wait for response (10 bytes max) */
 80090d0:	230a      	movs	r3, #10
 80090d2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80090d4:	20ff      	movs	r0, #255	; 0xff
 80090d6:	f7ff fdff 	bl	8008cd8 <_ZL8xchg_spih>
 80090da:	4603      	mov	r3, r0
 80090dc:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80090de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	da07      	bge.n	80090f6 <_ZL8send_cmdhm+0xe2>
 80090e6:	7bfb      	ldrb	r3, [r7, #15]
 80090e8:	3b01      	subs	r3, #1
 80090ea:	73fb      	strb	r3, [r7, #15]
 80090ec:	7bfb      	ldrb	r3, [r7, #15]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d001      	beq.n	80090f6 <_ZL8send_cmdhm+0xe2>
 80090f2:	2301      	movs	r3, #1
 80090f4:	e000      	b.n	80090f8 <_ZL8send_cmdhm+0xe4>
 80090f6:	2300      	movs	r3, #0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d000      	beq.n	80090fe <_ZL8send_cmdhm+0xea>
	do {
 80090fc:	e7ea      	b.n	80090d4 <_ZL8send_cmdhm+0xc0>

	return res;							/* Return received response */
 80090fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009100:	4618      	mov	r0, r3
 8009102:	3710      	adds	r7, #16
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <_Z19USER_SPI_initializeh>:
/*-----------------------------------------------------------------------*/

 DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009108:	b590      	push	{r4, r7, lr}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	4603      	mov	r3, r0
 8009110:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8009112:	79fb      	ldrb	r3, [r7, #7]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d001      	beq.n	800911c <_Z19USER_SPI_initializeh+0x14>
 8009118:	2301      	movs	r3, #1
 800911a:	e0f3      	b.n	8009304 <_Z19USER_SPI_initializeh+0x1fc>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800911c:	4b7b      	ldr	r3, [pc, #492]	; (800930c <_Z19USER_SPI_initializeh+0x204>)
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	b2db      	uxtb	r3, r3
 8009122:	f003 0302 	and.w	r3, r3, #2
 8009126:	2b00      	cmp	r3, #0
 8009128:	bf14      	ite	ne
 800912a:	2301      	movne	r3, #1
 800912c:	2300      	moveq	r3, #0
 800912e:	b2db      	uxtb	r3, r3
 8009130:	2b00      	cmp	r3, #0
 8009132:	d003      	beq.n	800913c <_Z19USER_SPI_initializeh+0x34>
 8009134:	4b75      	ldr	r3, [pc, #468]	; (800930c <_Z19USER_SPI_initializeh+0x204>)
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	b2db      	uxtb	r3, r3
 800913a:	e0e3      	b.n	8009304 <_Z19USER_SPI_initializeh+0x1fc>

	FCLK_SLOW();
 800913c:	4b74      	ldr	r3, [pc, #464]	; (8009310 <_Z19USER_SPI_initializeh+0x208>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	22aa      	movs	r2, #170	; 0xaa
 8009142:	651a      	str	r2, [r3, #80]	; 0x50
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8009144:	230a      	movs	r3, #10
 8009146:	73fb      	strb	r3, [r7, #15]
 8009148:	7bfb      	ldrb	r3, [r7, #15]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d006      	beq.n	800915c <_Z19USER_SPI_initializeh+0x54>
 800914e:	20ff      	movs	r0, #255	; 0xff
 8009150:	f7ff fdc2 	bl	8008cd8 <_ZL8xchg_spih>
 8009154:	7bfb      	ldrb	r3, [r7, #15]
 8009156:	3b01      	subs	r3, #1
 8009158:	73fb      	strb	r3, [r7, #15]
 800915a:	e7f5      	b.n	8009148 <_Z19USER_SPI_initializeh+0x40>

	ty = 0;
 800915c:	2300      	movs	r3, #0
 800915e:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8009160:	2100      	movs	r1, #0
 8009162:	2000      	movs	r0, #0
 8009164:	f7ff ff56 	bl	8009014 <_ZL8send_cmdhm>
 8009168:	4603      	mov	r3, r0
 800916a:	2b01      	cmp	r3, #1
 800916c:	bf0c      	ite	eq
 800916e:	2301      	moveq	r3, #1
 8009170:	2300      	movne	r3, #0
 8009172:	b2db      	uxtb	r3, r3
 8009174:	2b00      	cmp	r3, #0
 8009176:	f000 80aa 	beq.w	80092ce <_Z19USER_SPI_initializeh+0x1c6>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800917a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800917e:	f7ff fd81 	bl	8008c84 <_Z12SPI_Timer_Onm>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8009182:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009186:	2008      	movs	r0, #8
 8009188:	f7ff ff44 	bl	8009014 <_ZL8send_cmdhm>
 800918c:	4603      	mov	r3, r0
 800918e:	2b01      	cmp	r3, #1
 8009190:	bf0c      	ite	eq
 8009192:	2301      	moveq	r3, #1
 8009194:	2300      	movne	r3, #0
 8009196:	b2db      	uxtb	r3, r3
 8009198:	2b00      	cmp	r3, #0
 800919a:	d05c      	beq.n	8009256 <_Z19USER_SPI_initializeh+0x14e>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800919c:	2300      	movs	r3, #0
 800919e:	73fb      	strb	r3, [r7, #15]
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
 80091a2:	2b03      	cmp	r3, #3
 80091a4:	d80e      	bhi.n	80091c4 <_Z19USER_SPI_initializeh+0xbc>
 80091a6:	7bfc      	ldrb	r4, [r7, #15]
 80091a8:	20ff      	movs	r0, #255	; 0xff
 80091aa:	f7ff fd95 	bl	8008cd8 <_ZL8xchg_spih>
 80091ae:	4603      	mov	r3, r0
 80091b0:	461a      	mov	r2, r3
 80091b2:	f107 0310 	add.w	r3, r7, #16
 80091b6:	4423      	add	r3, r4
 80091b8:	f803 2c08 	strb.w	r2, [r3, #-8]
 80091bc:	7bfb      	ldrb	r3, [r7, #15]
 80091be:	3301      	adds	r3, #1
 80091c0:	73fb      	strb	r3, [r7, #15]
 80091c2:	e7ed      	b.n	80091a0 <_Z19USER_SPI_initializeh+0x98>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80091c4:	7abb      	ldrb	r3, [r7, #10]
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	f040 8081 	bne.w	80092ce <_Z19USER_SPI_initializeh+0x1c6>
 80091cc:	7afb      	ldrb	r3, [r7, #11]
 80091ce:	2baa      	cmp	r3, #170	; 0xaa
 80091d0:	d17d      	bne.n	80092ce <_Z19USER_SPI_initializeh+0x1c6>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80091d2:	f7ff fd6b 	bl	8008cac <_Z16SPI_Timer_Statusv>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d009      	beq.n	80091f0 <_Z19USER_SPI_initializeh+0xe8>
 80091dc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80091e0:	20a9      	movs	r0, #169	; 0xa9
 80091e2:	f7ff ff17 	bl	8009014 <_ZL8send_cmdhm>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d001      	beq.n	80091f0 <_Z19USER_SPI_initializeh+0xe8>
 80091ec:	2301      	movs	r3, #1
 80091ee:	e000      	b.n	80091f2 <_Z19USER_SPI_initializeh+0xea>
 80091f0:	2300      	movs	r3, #0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d000      	beq.n	80091f8 <_Z19USER_SPI_initializeh+0xf0>
 80091f6:	e7ec      	b.n	80091d2 <_Z19USER_SPI_initializeh+0xca>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80091f8:	f7ff fd58 	bl	8008cac <_Z16SPI_Timer_Statusv>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d008      	beq.n	8009214 <_Z19USER_SPI_initializeh+0x10c>
 8009202:	2100      	movs	r1, #0
 8009204:	203a      	movs	r0, #58	; 0x3a
 8009206:	f7ff ff05 	bl	8009014 <_ZL8send_cmdhm>
 800920a:	4603      	mov	r3, r0
 800920c:	2b00      	cmp	r3, #0
 800920e:	d101      	bne.n	8009214 <_Z19USER_SPI_initializeh+0x10c>
 8009210:	2301      	movs	r3, #1
 8009212:	e000      	b.n	8009216 <_Z19USER_SPI_initializeh+0x10e>
 8009214:	2300      	movs	r3, #0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d059      	beq.n	80092ce <_Z19USER_SPI_initializeh+0x1c6>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800921a:	2300      	movs	r3, #0
 800921c:	73fb      	strb	r3, [r7, #15]
 800921e:	7bfb      	ldrb	r3, [r7, #15]
 8009220:	2b03      	cmp	r3, #3
 8009222:	d80e      	bhi.n	8009242 <_Z19USER_SPI_initializeh+0x13a>
 8009224:	7bfc      	ldrb	r4, [r7, #15]
 8009226:	20ff      	movs	r0, #255	; 0xff
 8009228:	f7ff fd56 	bl	8008cd8 <_ZL8xchg_spih>
 800922c:	4603      	mov	r3, r0
 800922e:	461a      	mov	r2, r3
 8009230:	f107 0310 	add.w	r3, r7, #16
 8009234:	4423      	add	r3, r4
 8009236:	f803 2c08 	strb.w	r2, [r3, #-8]
 800923a:	7bfb      	ldrb	r3, [r7, #15]
 800923c:	3301      	adds	r3, #1
 800923e:	73fb      	strb	r3, [r7, #15]
 8009240:	e7ed      	b.n	800921e <_Z19USER_SPI_initializeh+0x116>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8009242:	7a3b      	ldrb	r3, [r7, #8]
 8009244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009248:	2b00      	cmp	r3, #0
 800924a:	d001      	beq.n	8009250 <_Z19USER_SPI_initializeh+0x148>
 800924c:	230c      	movs	r3, #12
 800924e:	e000      	b.n	8009252 <_Z19USER_SPI_initializeh+0x14a>
 8009250:	2304      	movs	r3, #4
 8009252:	737b      	strb	r3, [r7, #13]
 8009254:	e03b      	b.n	80092ce <_Z19USER_SPI_initializeh+0x1c6>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8009256:	2100      	movs	r1, #0
 8009258:	20a9      	movs	r0, #169	; 0xa9
 800925a:	f7ff fedb 	bl	8009014 <_ZL8send_cmdhm>
 800925e:	4603      	mov	r3, r0
 8009260:	2b01      	cmp	r3, #1
 8009262:	bf94      	ite	ls
 8009264:	2301      	movls	r3, #1
 8009266:	2300      	movhi	r3, #0
 8009268:	b2db      	uxtb	r3, r3
 800926a:	2b00      	cmp	r3, #0
 800926c:	d004      	beq.n	8009278 <_Z19USER_SPI_initializeh+0x170>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800926e:	2302      	movs	r3, #2
 8009270:	737b      	strb	r3, [r7, #13]
 8009272:	23a9      	movs	r3, #169	; 0xa9
 8009274:	73bb      	strb	r3, [r7, #14]
 8009276:	e003      	b.n	8009280 <_Z19USER_SPI_initializeh+0x178>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8009278:	2301      	movs	r3, #1
 800927a:	737b      	strb	r3, [r7, #13]
 800927c:	2301      	movs	r3, #1
 800927e:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8009280:	f7ff fd14 	bl	8008cac <_Z16SPI_Timer_Statusv>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d009      	beq.n	800929e <_Z19USER_SPI_initializeh+0x196>
 800928a:	7bbb      	ldrb	r3, [r7, #14]
 800928c:	2100      	movs	r1, #0
 800928e:	4618      	mov	r0, r3
 8009290:	f7ff fec0 	bl	8009014 <_ZL8send_cmdhm>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d001      	beq.n	800929e <_Z19USER_SPI_initializeh+0x196>
 800929a:	2301      	movs	r3, #1
 800929c:	e000      	b.n	80092a0 <_Z19USER_SPI_initializeh+0x198>
 800929e:	2300      	movs	r3, #0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d000      	beq.n	80092a6 <_Z19USER_SPI_initializeh+0x19e>
 80092a4:	e7ec      	b.n	8009280 <_Z19USER_SPI_initializeh+0x178>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80092a6:	f7ff fd01 	bl	8008cac <_Z16SPI_Timer_Statusv>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d007      	beq.n	80092c0 <_Z19USER_SPI_initializeh+0x1b8>
 80092b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80092b4:	2010      	movs	r0, #16
 80092b6:	f7ff fead 	bl	8009014 <_ZL8send_cmdhm>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d001      	beq.n	80092c4 <_Z19USER_SPI_initializeh+0x1bc>
 80092c0:	2301      	movs	r3, #1
 80092c2:	e000      	b.n	80092c6 <_Z19USER_SPI_initializeh+0x1be>
 80092c4:	2300      	movs	r3, #0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d001      	beq.n	80092ce <_Z19USER_SPI_initializeh+0x1c6>
				ty = 0;
 80092ca:	2300      	movs	r3, #0
 80092cc:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80092ce:	4a11      	ldr	r2, [pc, #68]	; (8009314 <_Z19USER_SPI_initializeh+0x20c>)
 80092d0:	7b7b      	ldrb	r3, [r7, #13]
 80092d2:	7013      	strb	r3, [r2, #0]
	despiselect();
 80092d4:	f7ff fd74 	bl	8008dc0 <_ZL11despiselectv>

	if (ty) {			/* OK */
 80092d8:	7b7b      	ldrb	r3, [r7, #13]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00c      	beq.n	80092f8 <_Z19USER_SPI_initializeh+0x1f0>
		FCLK_FAST();			/* Set fast clock */
 80092de:	4b0c      	ldr	r3, [pc, #48]	; (8009310 <_Z19USER_SPI_initializeh+0x208>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	220c      	movs	r2, #12
 80092e4:	651a      	str	r2, [r3, #80]	; 0x50
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80092e6:	4b09      	ldr	r3, [pc, #36]	; (800930c <_Z19USER_SPI_initializeh+0x204>)
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	f023 0301 	bic.w	r3, r3, #1
 80092f0:	b2da      	uxtb	r2, r3
 80092f2:	4b06      	ldr	r3, [pc, #24]	; (800930c <_Z19USER_SPI_initializeh+0x204>)
 80092f4:	701a      	strb	r2, [r3, #0]
 80092f6:	e002      	b.n	80092fe <_Z19USER_SPI_initializeh+0x1f6>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80092f8:	4b04      	ldr	r3, [pc, #16]	; (800930c <_Z19USER_SPI_initializeh+0x204>)
 80092fa:	2201      	movs	r2, #1
 80092fc:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80092fe:	4b03      	ldr	r3, [pc, #12]	; (800930c <_Z19USER_SPI_initializeh+0x204>)
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	b2db      	uxtb	r3, r3
}
 8009304:	4618      	mov	r0, r3
 8009306:	3714      	adds	r7, #20
 8009308:	46bd      	mov	sp, r7
 800930a:	bd90      	pop	{r4, r7, pc}
 800930c:	24000028 	.word	0x24000028
 8009310:	240000ac 	.word	0x240000ac
 8009314:	2400125c 	.word	0x2400125c

08009318 <_Z15USER_SPI_statush>:
/*-----------------------------------------------------------------------*/

DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	4603      	mov	r3, r0
 8009320:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8009322:	79fb      	ldrb	r3, [r7, #7]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d001      	beq.n	800932c <_Z15USER_SPI_statush+0x14>
 8009328:	2301      	movs	r3, #1
 800932a:	e002      	b.n	8009332 <_Z15USER_SPI_statush+0x1a>

	return Stat;	/* Return disk status */
 800932c:	4b04      	ldr	r3, [pc, #16]	; (8009340 <_Z15USER_SPI_statush+0x28>)
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	b2db      	uxtb	r3, r3
}
 8009332:	4618      	mov	r0, r3
 8009334:	370c      	adds	r7, #12
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	24000028 	.word	0x24000028

08009344 <_Z13USER_SPI_readhPhmj>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	60b9      	str	r1, [r7, #8]
 800934c:	607a      	str	r2, [r7, #4]
 800934e:	603b      	str	r3, [r7, #0]
 8009350:	4603      	mov	r3, r0
 8009352:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009354:	7bfb      	ldrb	r3, [r7, #15]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d102      	bne.n	8009360 <_Z13USER_SPI_readhPhmj+0x1c>
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d101      	bne.n	8009364 <_Z13USER_SPI_readhPhmj+0x20>
 8009360:	2304      	movs	r3, #4
 8009362:	e067      	b.n	8009434 <_Z13USER_SPI_readhPhmj+0xf0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009364:	4b35      	ldr	r3, [pc, #212]	; (800943c <_Z13USER_SPI_readhPhmj+0xf8>)
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	b2db      	uxtb	r3, r3
 800936a:	f003 0301 	and.w	r3, r3, #1
 800936e:	2b00      	cmp	r3, #0
 8009370:	bf14      	ite	ne
 8009372:	2301      	movne	r3, #1
 8009374:	2300      	moveq	r3, #0
 8009376:	b2db      	uxtb	r3, r3
 8009378:	2b00      	cmp	r3, #0
 800937a:	d001      	beq.n	8009380 <_Z13USER_SPI_readhPhmj+0x3c>
 800937c:	2303      	movs	r3, #3
 800937e:	e059      	b.n	8009434 <_Z13USER_SPI_readhPhmj+0xf0>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8009380:	4b2f      	ldr	r3, [pc, #188]	; (8009440 <_Z13USER_SPI_readhPhmj+0xfc>)
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	f003 0308 	and.w	r3, r3, #8
 8009388:	2b00      	cmp	r3, #0
 800938a:	d102      	bne.n	8009392 <_Z13USER_SPI_readhPhmj+0x4e>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	025b      	lsls	r3, r3, #9
 8009390:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	2b01      	cmp	r3, #1
 8009396:	d116      	bne.n	80093c6 <_Z13USER_SPI_readhPhmj+0x82>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8009398:	6879      	ldr	r1, [r7, #4]
 800939a:	2011      	movs	r0, #17
 800939c:	f7ff fe3a 	bl	8009014 <_ZL8send_cmdhm>
 80093a0:	4603      	mov	r3, r0
			&& rcvr_datablock(buff, 512)) {
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d109      	bne.n	80093ba <_Z13USER_SPI_readhPhmj+0x76>
 80093a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80093aa:	68b8      	ldr	r0, [r7, #8]
 80093ac:	f7ff fd38 	bl	8008e20 <_ZL14rcvr_datablockPhj>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d001      	beq.n	80093ba <_Z13USER_SPI_readhPhmj+0x76>
 80093b6:	2301      	movs	r3, #1
 80093b8:	e000      	b.n	80093bc <_Z13USER_SPI_readhPhmj+0x78>
 80093ba:	2300      	movs	r3, #0
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d030      	beq.n	8009422 <_Z13USER_SPI_readhPhmj+0xde>
			count = 0;
 80093c0:	2300      	movs	r3, #0
 80093c2:	603b      	str	r3, [r7, #0]
 80093c4:	e02d      	b.n	8009422 <_Z13USER_SPI_readhPhmj+0xde>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80093c6:	6879      	ldr	r1, [r7, #4]
 80093c8:	2012      	movs	r0, #18
 80093ca:	f7ff fe23 	bl	8009014 <_ZL8send_cmdhm>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	bf0c      	ite	eq
 80093d4:	2301      	moveq	r3, #1
 80093d6:	2300      	movne	r3, #0
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d021      	beq.n	8009422 <_Z13USER_SPI_readhPhmj+0xde>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80093de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80093e2:	68b8      	ldr	r0, [r7, #8]
 80093e4:	f7ff fd1c 	bl	8008e20 <_ZL14rcvr_datablockPhj>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	bf0c      	ite	eq
 80093ee:	2301      	moveq	r3, #1
 80093f0:	2300      	movne	r3, #0
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d10f      	bne.n	8009418 <_Z13USER_SPI_readhPhmj+0xd4>
				buff += 512;
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80093fe:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	3b01      	subs	r3, #1
 8009404:	603b      	str	r3, [r7, #0]
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	bf14      	ite	ne
 800940c:	2301      	movne	r3, #1
 800940e:	2300      	moveq	r3, #0
 8009410:	b2db      	uxtb	r3, r3
 8009412:	2b00      	cmp	r3, #0
 8009414:	d001      	beq.n	800941a <_Z13USER_SPI_readhPhmj+0xd6>
			do {
 8009416:	e7e2      	b.n	80093de <_Z13USER_SPI_readhPhmj+0x9a>
				if (!rcvr_datablock(buff, 512)) break;
 8009418:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800941a:	2100      	movs	r1, #0
 800941c:	200c      	movs	r0, #12
 800941e:	f7ff fdf9 	bl	8009014 <_ZL8send_cmdhm>
		}
	}
	despiselect();
 8009422:	f7ff fccd 	bl	8008dc0 <_ZL11despiselectv>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d001      	beq.n	8009430 <_Z13USER_SPI_readhPhmj+0xec>
 800942c:	2301      	movs	r3, #1
 800942e:	e000      	b.n	8009432 <_Z13USER_SPI_readhPhmj+0xee>
 8009430:	2300      	movs	r3, #0
 8009432:	bf00      	nop
}
 8009434:	4618      	mov	r0, r3
 8009436:	3710      	adds	r7, #16
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	24000028 	.word	0x24000028
 8009440:	2400125c 	.word	0x2400125c

08009444 <_Z14USER_SPI_writehPKhmj>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	60b9      	str	r1, [r7, #8]
 800944c:	607a      	str	r2, [r7, #4]
 800944e:	603b      	str	r3, [r7, #0]
 8009450:	4603      	mov	r3, r0
 8009452:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009454:	7bfb      	ldrb	r3, [r7, #15]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d102      	bne.n	8009460 <_Z14USER_SPI_writehPKhmj+0x1c>
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d101      	bne.n	8009464 <_Z14USER_SPI_writehPKhmj+0x20>
 8009460:	2304      	movs	r3, #4
 8009462:	e087      	b.n	8009574 <_Z14USER_SPI_writehPKhmj+0x130>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8009464:	4b45      	ldr	r3, [pc, #276]	; (800957c <_Z14USER_SPI_writehPKhmj+0x138>)
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	b2db      	uxtb	r3, r3
 800946a:	f003 0301 	and.w	r3, r3, #1
 800946e:	2b00      	cmp	r3, #0
 8009470:	bf14      	ite	ne
 8009472:	2301      	movne	r3, #1
 8009474:	2300      	moveq	r3, #0
 8009476:	b2db      	uxtb	r3, r3
 8009478:	2b00      	cmp	r3, #0
 800947a:	d001      	beq.n	8009480 <_Z14USER_SPI_writehPKhmj+0x3c>
 800947c:	2303      	movs	r3, #3
 800947e:	e079      	b.n	8009574 <_Z14USER_SPI_writehPKhmj+0x130>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8009480:	4b3e      	ldr	r3, [pc, #248]	; (800957c <_Z14USER_SPI_writehPKhmj+0x138>)
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	b2db      	uxtb	r3, r3
 8009486:	f003 0304 	and.w	r3, r3, #4
 800948a:	2b00      	cmp	r3, #0
 800948c:	bf14      	ite	ne
 800948e:	2301      	movne	r3, #1
 8009490:	2300      	moveq	r3, #0
 8009492:	b2db      	uxtb	r3, r3
 8009494:	2b00      	cmp	r3, #0
 8009496:	d001      	beq.n	800949c <_Z14USER_SPI_writehPKhmj+0x58>
 8009498:	2302      	movs	r3, #2
 800949a:	e06b      	b.n	8009574 <_Z14USER_SPI_writehPKhmj+0x130>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800949c:	4b38      	ldr	r3, [pc, #224]	; (8009580 <_Z14USER_SPI_writehPKhmj+0x13c>)
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	f003 0308 	and.w	r3, r3, #8
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d102      	bne.n	80094ae <_Z14USER_SPI_writehPKhmj+0x6a>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	025b      	lsls	r3, r3, #9
 80094ac:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d115      	bne.n	80094e0 <_Z14USER_SPI_writehPKhmj+0x9c>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80094b4:	6879      	ldr	r1, [r7, #4]
 80094b6:	2018      	movs	r0, #24
 80094b8:	f7ff fdac 	bl	8009014 <_ZL8send_cmdhm>
 80094bc:	4603      	mov	r3, r0
			&& xmit_datablock(buff, 0xFE)) {
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d108      	bne.n	80094d4 <_Z14USER_SPI_writehPKhmj+0x90>
 80094c2:	21fe      	movs	r1, #254	; 0xfe
 80094c4:	68b8      	ldr	r0, [r7, #8]
 80094c6:	f7ff fcda 	bl	8008e7e <_ZL14xmit_datablockPKhh>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d001      	beq.n	80094d4 <_Z14USER_SPI_writehPKhmj+0x90>
 80094d0:	2301      	movs	r3, #1
 80094d2:	e000      	b.n	80094d6 <_Z14USER_SPI_writehPKhmj+0x92>
 80094d4:	2300      	movs	r3, #0
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d043      	beq.n	8009562 <_Z14USER_SPI_writehPKhmj+0x11e>
			count = 0;
 80094da:	2300      	movs	r3, #0
 80094dc:	603b      	str	r3, [r7, #0]
 80094de:	e040      	b.n	8009562 <_Z14USER_SPI_writehPKhmj+0x11e>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80094e0:	4b27      	ldr	r3, [pc, #156]	; (8009580 <_Z14USER_SPI_writehPKhmj+0x13c>)
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	f003 0306 	and.w	r3, r3, #6
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d003      	beq.n	80094f4 <_Z14USER_SPI_writehPKhmj+0xb0>
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	2097      	movs	r0, #151	; 0x97
 80094f0:	f7ff fd90 	bl	8009014 <_ZL8send_cmdhm>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80094f4:	6879      	ldr	r1, [r7, #4]
 80094f6:	2019      	movs	r0, #25
 80094f8:	f7ff fd8c 	bl	8009014 <_ZL8send_cmdhm>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	bf0c      	ite	eq
 8009502:	2301      	moveq	r3, #1
 8009504:	2300      	movne	r3, #0
 8009506:	b2db      	uxtb	r3, r3
 8009508:	2b00      	cmp	r3, #0
 800950a:	d02a      	beq.n	8009562 <_Z14USER_SPI_writehPKhmj+0x11e>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800950c:	21fc      	movs	r1, #252	; 0xfc
 800950e:	68b8      	ldr	r0, [r7, #8]
 8009510:	f7ff fcb5 	bl	8008e7e <_ZL14xmit_datablockPKhh>
 8009514:	4603      	mov	r3, r0
 8009516:	2b00      	cmp	r3, #0
 8009518:	bf0c      	ite	eq
 800951a:	2301      	moveq	r3, #1
 800951c:	2300      	movne	r3, #0
 800951e:	b2db      	uxtb	r3, r3
 8009520:	2b00      	cmp	r3, #0
 8009522:	d10f      	bne.n	8009544 <_Z14USER_SPI_writehPKhmj+0x100>
				buff += 512;
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800952a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	3b01      	subs	r3, #1
 8009530:	603b      	str	r3, [r7, #0]
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	bf14      	ite	ne
 8009538:	2301      	movne	r3, #1
 800953a:	2300      	moveq	r3, #0
 800953c:	b2db      	uxtb	r3, r3
 800953e:	2b00      	cmp	r3, #0
 8009540:	d001      	beq.n	8009546 <_Z14USER_SPI_writehPKhmj+0x102>
			do {
 8009542:	e7e3      	b.n	800950c <_Z14USER_SPI_writehPKhmj+0xc8>
				if (!xmit_datablock(buff, 0xFC)) break;
 8009544:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8009546:	21fd      	movs	r1, #253	; 0xfd
 8009548:	2000      	movs	r0, #0
 800954a:	f7ff fc98 	bl	8008e7e <_ZL14xmit_datablockPKhh>
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	bf0c      	ite	eq
 8009554:	2301      	moveq	r3, #1
 8009556:	2300      	movne	r3, #0
 8009558:	b2db      	uxtb	r3, r3
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <_Z14USER_SPI_writehPKhmj+0x11e>
 800955e:	2301      	movs	r3, #1
 8009560:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8009562:	f7ff fc2d 	bl	8008dc0 <_ZL11despiselectv>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d001      	beq.n	8009570 <_Z14USER_SPI_writehPKhmj+0x12c>
 800956c:	2301      	movs	r3, #1
 800956e:	e000      	b.n	8009572 <_Z14USER_SPI_writehPKhmj+0x12e>
 8009570:	2300      	movs	r3, #0
 8009572:	bf00      	nop
}
 8009574:	4618      	mov	r0, r3
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	24000028 	.word	0x24000028
 8009580:	2400125c 	.word	0x2400125c

08009584 <_Z18USER_SPI_write_dmahPKhmj>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	60b9      	str	r1, [r7, #8]
 800958c:	607a      	str	r2, [r7, #4]
 800958e:	603b      	str	r3, [r7, #0]
 8009590:	4603      	mov	r3, r0
 8009592:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009594:	7bfb      	ldrb	r3, [r7, #15]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d102      	bne.n	80095a0 <_Z18USER_SPI_write_dmahPKhmj+0x1c>
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d101      	bne.n	80095a4 <_Z18USER_SPI_write_dmahPKhmj+0x20>
 80095a0:	2304      	movs	r3, #4
 80095a2:	e089      	b.n	80096b8 <_Z18USER_SPI_write_dmahPKhmj+0x134>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80095a4:	4b46      	ldr	r3, [pc, #280]	; (80096c0 <_Z18USER_SPI_write_dmahPKhmj+0x13c>)
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	f003 0301 	and.w	r3, r3, #1
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	bf14      	ite	ne
 80095b2:	2301      	movne	r3, #1
 80095b4:	2300      	moveq	r3, #0
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d001      	beq.n	80095c0 <_Z18USER_SPI_write_dmahPKhmj+0x3c>
 80095bc:	2303      	movs	r3, #3
 80095be:	e07b      	b.n	80096b8 <_Z18USER_SPI_write_dmahPKhmj+0x134>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80095c0:	4b3f      	ldr	r3, [pc, #252]	; (80096c0 <_Z18USER_SPI_write_dmahPKhmj+0x13c>)
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	f003 0304 	and.w	r3, r3, #4
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	bf14      	ite	ne
 80095ce:	2301      	movne	r3, #1
 80095d0:	2300      	moveq	r3, #0
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d001      	beq.n	80095dc <_Z18USER_SPI_write_dmahPKhmj+0x58>
 80095d8:	2302      	movs	r3, #2
 80095da:	e06d      	b.n	80096b8 <_Z18USER_SPI_write_dmahPKhmj+0x134>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80095dc:	4b39      	ldr	r3, [pc, #228]	; (80096c4 <_Z18USER_SPI_write_dmahPKhmj+0x140>)
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	f003 0308 	and.w	r3, r3, #8
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d102      	bne.n	80095ee <_Z18USER_SPI_write_dmahPKhmj+0x6a>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	025b      	lsls	r3, r3, #9
 80095ec:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d116      	bne.n	8009622 <_Z18USER_SPI_write_dmahPKhmj+0x9e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80095f4:	6879      	ldr	r1, [r7, #4]
 80095f6:	2018      	movs	r0, #24
 80095f8:	f7ff fd0c 	bl	8009014 <_ZL8send_cmdhm>
 80095fc:	4603      	mov	r3, r0
			&& xmit_data_dma(buff, count, 0xFE)) {
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d109      	bne.n	8009616 <_Z18USER_SPI_write_dmahPKhmj+0x92>
 8009602:	22fe      	movs	r2, #254	; 0xfe
 8009604:	6839      	ldr	r1, [r7, #0]
 8009606:	68b8      	ldr	r0, [r7, #8]
 8009608:	f7ff fc70 	bl	8008eec <_ZL13xmit_data_dmaPKhjh>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d001      	beq.n	8009616 <_Z18USER_SPI_write_dmahPKhmj+0x92>
 8009612:	2301      	movs	r3, #1
 8009614:	e000      	b.n	8009618 <_Z18USER_SPI_write_dmahPKhmj+0x94>
 8009616:	2300      	movs	r3, #0
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8009618:	2b00      	cmp	r3, #0
 800961a:	d044      	beq.n	80096a6 <_Z18USER_SPI_write_dmahPKhmj+0x122>
			count = 0;
 800961c:	2300      	movs	r3, #0
 800961e:	603b      	str	r3, [r7, #0]
 8009620:	e041      	b.n	80096a6 <_Z18USER_SPI_write_dmahPKhmj+0x122>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8009622:	4b28      	ldr	r3, [pc, #160]	; (80096c4 <_Z18USER_SPI_write_dmahPKhmj+0x140>)
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	f003 0306 	and.w	r3, r3, #6
 800962a:	2b00      	cmp	r3, #0
 800962c:	d003      	beq.n	8009636 <_Z18USER_SPI_write_dmahPKhmj+0xb2>
 800962e:	6839      	ldr	r1, [r7, #0]
 8009630:	2097      	movs	r0, #151	; 0x97
 8009632:	f7ff fcef 	bl	8009014 <_ZL8send_cmdhm>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8009636:	6879      	ldr	r1, [r7, #4]
 8009638:	2019      	movs	r0, #25
 800963a:	f7ff fceb 	bl	8009014 <_ZL8send_cmdhm>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	bf0c      	ite	eq
 8009644:	2301      	moveq	r3, #1
 8009646:	2300      	movne	r3, #0
 8009648:	b2db      	uxtb	r3, r3
 800964a:	2b00      	cmp	r3, #0
 800964c:	d02b      	beq.n	80096a6 <_Z18USER_SPI_write_dmahPKhmj+0x122>
			do {
				if (!xmit_data_dma(buff, 1, 0xFC)) break;
 800964e:	22fc      	movs	r2, #252	; 0xfc
 8009650:	2101      	movs	r1, #1
 8009652:	68b8      	ldr	r0, [r7, #8]
 8009654:	f7ff fc4a 	bl	8008eec <_ZL13xmit_data_dmaPKhjh>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	bf0c      	ite	eq
 800965e:	2301      	moveq	r3, #1
 8009660:	2300      	movne	r3, #0
 8009662:	b2db      	uxtb	r3, r3
 8009664:	2b00      	cmp	r3, #0
 8009666:	d10f      	bne.n	8009688 <_Z18USER_SPI_write_dmahPKhmj+0x104>
				buff += 512;
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800966e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	3b01      	subs	r3, #1
 8009674:	603b      	str	r3, [r7, #0]
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	bf14      	ite	ne
 800967c:	2301      	movne	r3, #1
 800967e:	2300      	moveq	r3, #0
 8009680:	b2db      	uxtb	r3, r3
 8009682:	2b00      	cmp	r3, #0
 8009684:	d001      	beq.n	800968a <_Z18USER_SPI_write_dmahPKhmj+0x106>
			do {
 8009686:	e7e2      	b.n	800964e <_Z18USER_SPI_write_dmahPKhmj+0xca>
				if (!xmit_data_dma(buff, 1, 0xFC)) break;
 8009688:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800968a:	21fd      	movs	r1, #253	; 0xfd
 800968c:	2000      	movs	r0, #0
 800968e:	f7ff fbf6 	bl	8008e7e <_ZL14xmit_datablockPKhh>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	bf0c      	ite	eq
 8009698:	2301      	moveq	r3, #1
 800969a:	2300      	movne	r3, #0
 800969c:	b2db      	uxtb	r3, r3
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d001      	beq.n	80096a6 <_Z18USER_SPI_write_dmahPKhmj+0x122>
 80096a2:	2301      	movs	r3, #1
 80096a4:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80096a6:	f7ff fb8b 	bl	8008dc0 <_ZL11despiselectv>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d001      	beq.n	80096b4 <_Z18USER_SPI_write_dmahPKhmj+0x130>
 80096b0:	2301      	movs	r3, #1
 80096b2:	e000      	b.n	80096b6 <_Z18USER_SPI_write_dmahPKhmj+0x132>
 80096b4:	2300      	movs	r3, #0
 80096b6:	bf00      	nop
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	24000028 	.word	0x24000028
 80096c4:	2400125c 	.word	0x2400125c

080096c8 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b086      	sub	sp, #24
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	607a      	str	r2, [r7, #4]
 80096d2:	603b      	str	r3, [r7, #0]
 80096d4:	460b      	mov	r3, r1
 80096d6:	72fb      	strb	r3, [r7, #11]
	int result = 1;
 80096d8:	2301      	movs	r3, #1
 80096da:	617b      	str	r3, [r7, #20]

	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80096dc:	7afb      	ldrb	r3, [r7, #11]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d102      	bne.n	80096e8 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x20>
 80096e2:	6a3b      	ldr	r3, [r7, #32]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d101      	bne.n	80096ec <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x24>
 80096e8:	2304      	movs	r3, #4
 80096ea:	e074      	b.n	80097d6 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x10e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80096ec:	4b3c      	ldr	r3, [pc, #240]	; (80097e0 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x118>)
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	f003 0301 	and.w	r3, r3, #1
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	bf14      	ite	ne
 80096fa:	2301      	movne	r3, #1
 80096fc:	2300      	moveq	r3, #0
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	2b00      	cmp	r3, #0
 8009702:	d001      	beq.n	8009708 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x40>
 8009704:	2303      	movs	r3, #3
 8009706:	e066      	b.n	80097d6 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x10e>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8009708:	4b35      	ldr	r3, [pc, #212]	; (80097e0 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x118>)
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	b2db      	uxtb	r3, r3
 800970e:	f003 0304 	and.w	r3, r3, #4
 8009712:	2b00      	cmp	r3, #0
 8009714:	bf14      	ite	ne
 8009716:	2301      	movne	r3, #1
 8009718:	2300      	moveq	r3, #0
 800971a:	b2db      	uxtb	r3, r3
 800971c:	2b00      	cmp	r3, #0
 800971e:	d001      	beq.n	8009724 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x5c>
 8009720:	2302      	movs	r3, #2
 8009722:	e058      	b.n	80097d6 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x10e>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8009724:	4b2f      	ldr	r3, [pc, #188]	; (80097e4 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x11c>)
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	f003 0308 	and.w	r3, r3, #8
 800972c:	2b00      	cmp	r3, #0
 800972e:	d102      	bne.n	8009736 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x6e>
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	025b      	lsls	r3, r3, #9
 8009734:	603b      	str	r3, [r7, #0]

	if (count == 1) {	/* Single sector write */
 8009736:	6a3b      	ldr	r3, [r7, #32]
 8009738:	2b01      	cmp	r3, #1
 800973a:	d11e      	bne.n	800977a <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0xb2>
		blocksLeft = 1;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2201      	movs	r2, #1
 8009740:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		multi = false;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2200      	movs	r2, #0
 8009748:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		if ((send_cmd(CMD24, sector) == 0) 	/* WRITE_BLOCK */
 800974c:	6839      	ldr	r1, [r7, #0]
 800974e:	2018      	movs	r0, #24
 8009750:	f7ff fc60 	bl	8009014 <_ZL8send_cmdhm>
 8009754:	4603      	mov	r3, r0
		    && xmit_datablock(buff, 0xFE)) { // HAL_OK on the transmit start
 8009756:	2b00      	cmp	r3, #0
 8009758:	d109      	bne.n	800976e <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0xa6>
 800975a:	22fe      	movs	r2, #254	; 0xfe
 800975c:	6879      	ldr	r1, [r7, #4]
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	f7ff fc06 	bl	8008f70 <_ZN6FatDMA14xmit_datablockEPKhh>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d001      	beq.n	800976e <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0xa6>
 800976a:	2301      	movs	r3, #1
 800976c:	e000      	b.n	8009770 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0xa8>
 800976e:	2300      	movs	r3, #0
		if ((send_cmd(CMD24, sector) == 0) 	/* WRITE_BLOCK */
 8009770:	2b00      	cmp	r3, #0
 8009772:	d02f      	beq.n	80097d4 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x10c>
			result = 0;
 8009774:	2300      	movs	r3, #0
 8009776:	617b      	str	r3, [r7, #20]
 8009778:	e02c      	b.n	80097d4 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x10c>
		}

	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800977a:	4b1a      	ldr	r3, [pc, #104]	; (80097e4 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x11c>)
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	f003 0306 	and.w	r3, r3, #6
 8009782:	2b00      	cmp	r3, #0
 8009784:	d003      	beq.n	800978e <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0xc6>
 8009786:	6a39      	ldr	r1, [r7, #32]
 8009788:	2097      	movs	r0, #151	; 0x97
 800978a:	f7ff fc43 	bl	8009014 <_ZL8send_cmdhm>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800978e:	6839      	ldr	r1, [r7, #0]
 8009790:	2019      	movs	r0, #25
 8009792:	f7ff fc3f 	bl	8009014 <_ZL8send_cmdhm>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	bf0c      	ite	eq
 800979c:	2301      	moveq	r3, #1
 800979e:	2300      	movne	r3, #0
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d016      	beq.n	80097d4 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x10c>
			blocksLeft = count;
 80097a6:	6a3a      	ldr	r2, [r7, #32]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			multi = true;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2201      	movs	r2, #1
 80097b2:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			if (xmit_datablock(buff, 0xFC)) return 0;
 80097b6:	22fc      	movs	r2, #252	; 0xfc
 80097b8:	6879      	ldr	r1, [r7, #4]
 80097ba:	68f8      	ldr	r0, [r7, #12]
 80097bc:	f7ff fbd8 	bl	8008f70 <_ZN6FatDMA14xmit_datablockEPKhh>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	bf14      	ite	ne
 80097c6:	2301      	movne	r3, #1
 80097c8:	2300      	moveq	r3, #0
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d001      	beq.n	80097d4 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x10c>
 80097d0:	2300      	movs	r3, #0
 80097d2:	e000      	b.n	80097d6 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x10e>

		}
	}

	return result;	/* Return result */
 80097d4:	697b      	ldr	r3, [r7, #20]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3718      	adds	r7, #24
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	24000028 	.word	0x24000028
 80097e4:	2400125c 	.word	0x2400125c

080097e8 <_ZN6FatDMA23USER_SPI_write_dma_cpltEv>:


DRESULT FatDMA::USER_SPI_write_dma_cplt (
)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
	int success = xmit_datablock_cplt();
 80097f0:	f7ff fbf6 	bl	8008fe0 <_ZN6FatDMA19xmit_datablock_cpltEv>
 80097f4:	60f8      	str	r0, [r7, #12]
	if (multi) {
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d004      	beq.n	800980a <_ZN6FatDMA23USER_SPI_write_dma_cpltEv+0x22>
	    xmit_datablock(0, 0xFD);	// STOP_TRAN token
 8009800:	22fd      	movs	r2, #253	; 0xfd
 8009802:	2100      	movs	r1, #0
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f7ff fbb3 	bl	8008f70 <_ZN6FatDMA14xmit_datablockEPKhh>
	}
	despiselect();
 800980a:	f7ff fad9 	bl	8008dc0 <_ZL11despiselectv>

	return success ? RES_OK : RES_ERROR;	/* Return result */
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d001      	beq.n	8009818 <_ZN6FatDMA23USER_SPI_write_dma_cpltEv+0x30>
 8009814:	2300      	movs	r3, #0
 8009816:	e000      	b.n	800981a <_ZN6FatDMA23USER_SPI_write_dma_cpltEv+0x32>
 8009818:	2301      	movs	r3, #1
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
	...

08009824 <_Z14USER_SPI_ioctlhhPv>:
DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b08c      	sub	sp, #48	; 0x30
 8009828:	af00      	add	r7, sp, #0
 800982a:	4603      	mov	r3, r0
 800982c:	603a      	str	r2, [r7, #0]
 800982e:	71fb      	strb	r3, [r7, #7]
 8009830:	460b      	mov	r3, r1
 8009832:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8009834:	79fb      	ldrb	r3, [r7, #7]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d001      	beq.n	800983e <_Z14USER_SPI_ioctlhhPv+0x1a>
 800983a:	2304      	movs	r3, #4
 800983c:	e17d      	b.n	8009b3a <_Z14USER_SPI_ioctlhhPv+0x316>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800983e:	4bba      	ldr	r3, [pc, #744]	; (8009b28 <_Z14USER_SPI_ioctlhhPv+0x304>)
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	b2db      	uxtb	r3, r3
 8009844:	f003 0301 	and.w	r3, r3, #1
 8009848:	2b00      	cmp	r3, #0
 800984a:	bf14      	ite	ne
 800984c:	2301      	movne	r3, #1
 800984e:	2300      	moveq	r3, #0
 8009850:	b2db      	uxtb	r3, r3
 8009852:	2b00      	cmp	r3, #0
 8009854:	d001      	beq.n	800985a <_Z14USER_SPI_ioctlhhPv+0x36>
 8009856:	2303      	movs	r3, #3
 8009858:	e16f      	b.n	8009b3a <_Z14USER_SPI_ioctlhhPv+0x316>

	res = RES_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8009860:	79bb      	ldrb	r3, [r7, #6]
 8009862:	2b04      	cmp	r3, #4
 8009864:	f200 8150 	bhi.w	8009b08 <_Z14USER_SPI_ioctlhhPv+0x2e4>
 8009868:	a201      	add	r2, pc, #4	; (adr r2, 8009870 <_Z14USER_SPI_ioctlhhPv+0x4c>)
 800986a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800986e:	bf00      	nop
 8009870:	08009885 	.word	0x08009885
 8009874:	080098a3 	.word	0x080098a3
 8009878:	08009b09 	.word	0x08009b09
 800987c:	08009951 	.word	0x08009951
 8009880:	08009a5b 	.word	0x08009a5b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8009884:	f7ff faac 	bl	8008de0 <_ZL9spiselectv>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	bf14      	ite	ne
 800988e:	2301      	movne	r3, #1
 8009890:	2300      	moveq	r3, #0
 8009892:	b2db      	uxtb	r3, r3
 8009894:	2b00      	cmp	r3, #0
 8009896:	f000 813b 	beq.w	8009b10 <_Z14USER_SPI_ioctlhhPv+0x2ec>
 800989a:	2300      	movs	r3, #0
 800989c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80098a0:	e136      	b.n	8009b10 <_Z14USER_SPI_ioctlhhPv+0x2ec>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80098a2:	2100      	movs	r1, #0
 80098a4:	2009      	movs	r0, #9
 80098a6:	f7ff fbb5 	bl	8009014 <_ZL8send_cmdhm>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d10a      	bne.n	80098c6 <_Z14USER_SPI_ioctlhhPv+0xa2>
 80098b0:	f107 030c 	add.w	r3, r7, #12
 80098b4:	2110      	movs	r1, #16
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7ff fab2 	bl	8008e20 <_ZL14rcvr_datablockPhj>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d001      	beq.n	80098c6 <_Z14USER_SPI_ioctlhhPv+0xa2>
 80098c2:	2301      	movs	r3, #1
 80098c4:	e000      	b.n	80098c8 <_Z14USER_SPI_ioctlhhPv+0xa4>
 80098c6:	2300      	movs	r3, #0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f000 8123 	beq.w	8009b14 <_Z14USER_SPI_ioctlhhPv+0x2f0>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80098ce:	7b3b      	ldrb	r3, [r7, #12]
 80098d0:	119b      	asrs	r3, r3, #6
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d111      	bne.n	80098fa <_Z14USER_SPI_ioctlhhPv+0xd6>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80098d6:	7d7b      	ldrb	r3, [r7, #21]
 80098d8:	461a      	mov	r2, r3
 80098da:	7d3b      	ldrb	r3, [r7, #20]
 80098dc:	021b      	lsls	r3, r3, #8
 80098de:	4413      	add	r3, r2
 80098e0:	461a      	mov	r2, r3
 80098e2:	7cfb      	ldrb	r3, [r7, #19]
 80098e4:	041b      	lsls	r3, r3, #16
 80098e6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80098ea:	4413      	add	r3, r2
 80098ec:	3301      	adds	r3, #1
 80098ee:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80098f0:	69fb      	ldr	r3, [r7, #28]
 80098f2:	029a      	lsls	r2, r3, #10
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	601a      	str	r2, [r3, #0]
 80098f8:	e026      	b.n	8009948 <_Z14USER_SPI_ioctlhhPv+0x124>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80098fa:	7c7b      	ldrb	r3, [r7, #17]
 80098fc:	f003 030f 	and.w	r3, r3, #15
 8009900:	b2da      	uxtb	r2, r3
 8009902:	7dbb      	ldrb	r3, [r7, #22]
 8009904:	09db      	lsrs	r3, r3, #7
 8009906:	b2db      	uxtb	r3, r3
 8009908:	4413      	add	r3, r2
 800990a:	b2da      	uxtb	r2, r3
 800990c:	7d7b      	ldrb	r3, [r7, #21]
 800990e:	005b      	lsls	r3, r3, #1
 8009910:	b2db      	uxtb	r3, r3
 8009912:	f003 0306 	and.w	r3, r3, #6
 8009916:	b2db      	uxtb	r3, r3
 8009918:	4413      	add	r3, r2
 800991a:	b2db      	uxtb	r3, r3
 800991c:	3302      	adds	r3, #2
 800991e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8009922:	7d3b      	ldrb	r3, [r7, #20]
 8009924:	119a      	asrs	r2, r3, #6
 8009926:	7cfb      	ldrb	r3, [r7, #19]
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	441a      	add	r2, r3
 800992c:	7cbb      	ldrb	r3, [r7, #18]
 800992e:	029b      	lsls	r3, r3, #10
 8009930:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009934:	4413      	add	r3, r2
 8009936:	3301      	adds	r3, #1
 8009938:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800993a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800993e:	3b09      	subs	r3, #9
 8009940:	69fa      	ldr	r2, [r7, #28]
 8009942:	409a      	lsls	r2, r3
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8009948:	2300      	movs	r3, #0
 800994a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800994e:	e0e1      	b.n	8009b14 <_Z14USER_SPI_ioctlhhPv+0x2f0>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8009950:	4b76      	ldr	r3, [pc, #472]	; (8009b2c <_Z14USER_SPI_ioctlhhPv+0x308>)
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	f003 0304 	and.w	r3, r3, #4
 8009958:	2b00      	cmp	r3, #0
 800995a:	d038      	beq.n	80099ce <_Z14USER_SPI_ioctlhhPv+0x1aa>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800995c:	2100      	movs	r1, #0
 800995e:	208d      	movs	r0, #141	; 0x8d
 8009960:	f7ff fb58 	bl	8009014 <_ZL8send_cmdhm>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	bf0c      	ite	eq
 800996a:	2301      	moveq	r3, #1
 800996c:	2300      	movne	r3, #0
 800996e:	b2db      	uxtb	r3, r3
 8009970:	2b00      	cmp	r3, #0
 8009972:	f000 80d1 	beq.w	8009b18 <_Z14USER_SPI_ioctlhhPv+0x2f4>
				xchg_spi(0xFF);
 8009976:	20ff      	movs	r0, #255	; 0xff
 8009978:	f7ff f9ae 	bl	8008cd8 <_ZL8xchg_spih>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800997c:	f107 030c 	add.w	r3, r7, #12
 8009980:	2110      	movs	r1, #16
 8009982:	4618      	mov	r0, r3
 8009984:	f7ff fa4c 	bl	8008e20 <_ZL14rcvr_datablockPhj>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	bf14      	ite	ne
 800998e:	2301      	movne	r3, #1
 8009990:	2300      	moveq	r3, #0
 8009992:	b2db      	uxtb	r3, r3
 8009994:	2b00      	cmp	r3, #0
 8009996:	f000 80bf 	beq.w	8009b18 <_Z14USER_SPI_ioctlhhPv+0x2f4>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800999a:	2330      	movs	r3, #48	; 0x30
 800999c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80099a0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d008      	beq.n	80099ba <_Z14USER_SPI_ioctlhhPv+0x196>
 80099a8:	20ff      	movs	r0, #255	; 0xff
 80099aa:	f7ff f995 	bl	8008cd8 <_ZL8xchg_spih>
 80099ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80099b2:	3b01      	subs	r3, #1
 80099b4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80099b8:	e7f2      	b.n	80099a0 <_Z14USER_SPI_ioctlhhPv+0x17c>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80099ba:	7dbb      	ldrb	r3, [r7, #22]
 80099bc:	111b      	asrs	r3, r3, #4
 80099be:	2210      	movs	r2, #16
 80099c0:	409a      	lsls	r2, r3
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80099c6:	2300      	movs	r3, #0
 80099c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80099cc:	e0a4      	b.n	8009b18 <_Z14USER_SPI_ioctlhhPv+0x2f4>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80099ce:	2100      	movs	r1, #0
 80099d0:	2009      	movs	r0, #9
 80099d2:	f7ff fb1f 	bl	8009014 <_ZL8send_cmdhm>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d10a      	bne.n	80099f2 <_Z14USER_SPI_ioctlhhPv+0x1ce>
 80099dc:	f107 030c 	add.w	r3, r7, #12
 80099e0:	2110      	movs	r1, #16
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7ff fa1c 	bl	8008e20 <_ZL14rcvr_datablockPhj>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d001      	beq.n	80099f2 <_Z14USER_SPI_ioctlhhPv+0x1ce>
 80099ee:	2301      	movs	r3, #1
 80099f0:	e000      	b.n	80099f4 <_Z14USER_SPI_ioctlhhPv+0x1d0>
 80099f2:	2300      	movs	r3, #0
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	f000 808f 	beq.w	8009b18 <_Z14USER_SPI_ioctlhhPv+0x2f4>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80099fa:	4b4c      	ldr	r3, [pc, #304]	; (8009b2c <_Z14USER_SPI_ioctlhhPv+0x308>)
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	f003 0302 	and.w	r3, r3, #2
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d011      	beq.n	8009a2a <_Z14USER_SPI_ioctlhhPv+0x206>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8009a06:	7dbb      	ldrb	r3, [r7, #22]
 8009a08:	005b      	lsls	r3, r3, #1
 8009a0a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8009a0e:	7dfa      	ldrb	r2, [r7, #23]
 8009a10:	09d2      	lsrs	r2, r2, #7
 8009a12:	b2d2      	uxtb	r2, r2
 8009a14:	4413      	add	r3, r2
 8009a16:	1c5a      	adds	r2, r3, #1
 8009a18:	7e7b      	ldrb	r3, [r7, #25]
 8009a1a:	119b      	asrs	r3, r3, #6
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a22:	461a      	mov	r2, r3
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	601a      	str	r2, [r3, #0]
 8009a28:	e013      	b.n	8009a52 <_Z14USER_SPI_ioctlhhPv+0x22e>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8009a2a:	7dbb      	ldrb	r3, [r7, #22]
 8009a2c:	109b      	asrs	r3, r3, #2
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	f003 031f 	and.w	r3, r3, #31
 8009a34:	3301      	adds	r3, #1
 8009a36:	7dfa      	ldrb	r2, [r7, #23]
 8009a38:	00d2      	lsls	r2, r2, #3
 8009a3a:	f002 0218 	and.w	r2, r2, #24
 8009a3e:	7df9      	ldrb	r1, [r7, #23]
 8009a40:	0949      	lsrs	r1, r1, #5
 8009a42:	b2c9      	uxtb	r1, r1
 8009a44:	440a      	add	r2, r1
 8009a46:	3201      	adds	r2, #1
 8009a48:	fb02 f303 	mul.w	r3, r2, r3
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8009a52:	2300      	movs	r3, #0
 8009a54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8009a58:	e05e      	b.n	8009b18 <_Z14USER_SPI_ioctlhhPv+0x2f4>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009a5a:	4b34      	ldr	r3, [pc, #208]	; (8009b2c <_Z14USER_SPI_ioctlhhPv+0x308>)
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	f003 0306 	and.w	r3, r3, #6
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d05a      	beq.n	8009b1c <_Z14USER_SPI_ioctlhhPv+0x2f8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009a66:	f107 020c 	add.w	r2, r7, #12
 8009a6a:	79fb      	ldrb	r3, [r7, #7]
 8009a6c:	210b      	movs	r1, #11
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7ff fed8 	bl	8009824 <_Z14USER_SPI_ioctlhhPv>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	bf14      	ite	ne
 8009a7a:	2301      	movne	r3, #1
 8009a7c:	2300      	moveq	r3, #0
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d14d      	bne.n	8009b20 <_Z14USER_SPI_ioctlhhPv+0x2fc>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009a84:	7b3b      	ldrb	r3, [r7, #12]
 8009a86:	119b      	asrs	r3, r3, #6
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d104      	bne.n	8009a96 <_Z14USER_SPI_ioctlhhPv+0x272>
 8009a8c:	7dbb      	ldrb	r3, [r7, #22]
 8009a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d046      	beq.n	8009b24 <_Z14USER_SPI_ioctlhhPv+0x300>
		dp = (DWORD*)buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	623b      	str	r3, [r7, #32]
 8009a9a:	6a3b      	ldr	r3, [r7, #32]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009aa0:	6a3b      	ldr	r3, [r7, #32]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8009aa6:	4b21      	ldr	r3, [pc, #132]	; (8009b2c <_Z14USER_SPI_ioctlhhPv+0x308>)
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	f003 0308 	and.w	r3, r3, #8
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d105      	bne.n	8009abe <_Z14USER_SPI_ioctlhhPv+0x29a>
			st *= 512; ed *= 512;
 8009ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab4:	025b      	lsls	r3, r3, #9
 8009ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aba:	025b      	lsls	r3, r3, #9
 8009abc:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8009abe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ac0:	2020      	movs	r0, #32
 8009ac2:	f7ff faa7 	bl	8009014 <_ZL8send_cmdhm>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d116      	bne.n	8009afa <_Z14USER_SPI_ioctlhhPv+0x2d6>
 8009acc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ace:	2021      	movs	r0, #33	; 0x21
 8009ad0:	f7ff faa0 	bl	8009014 <_ZL8send_cmdhm>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d10f      	bne.n	8009afa <_Z14USER_SPI_ioctlhhPv+0x2d6>
 8009ada:	2100      	movs	r1, #0
 8009adc:	2026      	movs	r0, #38	; 0x26
 8009ade:	f7ff fa99 	bl	8009014 <_ZL8send_cmdhm>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d108      	bne.n	8009afa <_Z14USER_SPI_ioctlhhPv+0x2d6>
 8009ae8:	f247 5030 	movw	r0, #30000	; 0x7530
 8009aec:	f7ff f93f 	bl	8008d6e <_ZL10wait_readyj>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d001      	beq.n	8009afa <_Z14USER_SPI_ioctlhhPv+0x2d6>
 8009af6:	2301      	movs	r3, #1
 8009af8:	e000      	b.n	8009afc <_Z14USER_SPI_ioctlhhPv+0x2d8>
 8009afa:	2300      	movs	r3, #0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d017      	beq.n	8009b30 <_Z14USER_SPI_ioctlhhPv+0x30c>
			res = RES_OK;	/* FatFs does not check result of this command */
 8009b00:	2300      	movs	r3, #0
 8009b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8009b06:	e013      	b.n	8009b30 <_Z14USER_SPI_ioctlhhPv+0x30c>

	default:
		res = RES_PARERR;
 8009b08:	2304      	movs	r3, #4
 8009b0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009b0e:	e010      	b.n	8009b32 <_Z14USER_SPI_ioctlhhPv+0x30e>
		break;
 8009b10:	bf00      	nop
 8009b12:	e00e      	b.n	8009b32 <_Z14USER_SPI_ioctlhhPv+0x30e>
		break;
 8009b14:	bf00      	nop
 8009b16:	e00c      	b.n	8009b32 <_Z14USER_SPI_ioctlhhPv+0x30e>
		break;
 8009b18:	bf00      	nop
 8009b1a:	e00a      	b.n	8009b32 <_Z14USER_SPI_ioctlhhPv+0x30e>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009b1c:	bf00      	nop
 8009b1e:	e008      	b.n	8009b32 <_Z14USER_SPI_ioctlhhPv+0x30e>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009b20:	bf00      	nop
 8009b22:	e006      	b.n	8009b32 <_Z14USER_SPI_ioctlhhPv+0x30e>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009b24:	bf00      	nop
 8009b26:	e004      	b.n	8009b32 <_Z14USER_SPI_ioctlhhPv+0x30e>
 8009b28:	24000028 	.word	0x24000028
 8009b2c:	2400125c 	.word	0x2400125c
		break;
 8009b30:	bf00      	nop
	}

	despiselect();
 8009b32:	f7ff f945 	bl	8008dc0 <_ZL11despiselectv>

	return res;
 8009b36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3730      	adds	r7, #48	; 0x30
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop

08009b44 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009b4e:	79fb      	ldrb	r3, [r7, #7]
 8009b50:	4a08      	ldr	r2, [pc, #32]	; (8009b74 <disk_status+0x30>)
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	4413      	add	r3, r2
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	79fa      	ldrb	r2, [r7, #7]
 8009b5c:	4905      	ldr	r1, [pc, #20]	; (8009b74 <disk_status+0x30>)
 8009b5e:	440a      	add	r2, r1
 8009b60:	7a12      	ldrb	r2, [r2, #8]
 8009b62:	4610      	mov	r0, r2
 8009b64:	4798      	blx	r3
 8009b66:	4603      	mov	r3, r0
 8009b68:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	24001290 	.word	0x24001290

08009b78 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	4603      	mov	r3, r0
 8009b80:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009b82:	2300      	movs	r3, #0
 8009b84:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009b86:	79fb      	ldrb	r3, [r7, #7]
 8009b88:	4a0d      	ldr	r2, [pc, #52]	; (8009bc0 <disk_initialize+0x48>)
 8009b8a:	5cd3      	ldrb	r3, [r2, r3]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d111      	bne.n	8009bb4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009b90:	79fb      	ldrb	r3, [r7, #7]
 8009b92:	4a0b      	ldr	r2, [pc, #44]	; (8009bc0 <disk_initialize+0x48>)
 8009b94:	2101      	movs	r1, #1
 8009b96:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009b98:	79fb      	ldrb	r3, [r7, #7]
 8009b9a:	4a09      	ldr	r2, [pc, #36]	; (8009bc0 <disk_initialize+0x48>)
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	4413      	add	r3, r2
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	79fa      	ldrb	r2, [r7, #7]
 8009ba6:	4906      	ldr	r1, [pc, #24]	; (8009bc0 <disk_initialize+0x48>)
 8009ba8:	440a      	add	r2, r1
 8009baa:	7a12      	ldrb	r2, [r2, #8]
 8009bac:	4610      	mov	r0, r2
 8009bae:	4798      	blx	r3
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3710      	adds	r7, #16
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	24001290 	.word	0x24001290

08009bc4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009bc4:	b590      	push	{r4, r7, lr}
 8009bc6:	b087      	sub	sp, #28
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60b9      	str	r1, [r7, #8]
 8009bcc:	607a      	str	r2, [r7, #4]
 8009bce:	603b      	str	r3, [r7, #0]
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009bd4:	7bfb      	ldrb	r3, [r7, #15]
 8009bd6:	4a0a      	ldr	r2, [pc, #40]	; (8009c00 <disk_read+0x3c>)
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	4413      	add	r3, r2
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	689c      	ldr	r4, [r3, #8]
 8009be0:	7bfb      	ldrb	r3, [r7, #15]
 8009be2:	4a07      	ldr	r2, [pc, #28]	; (8009c00 <disk_read+0x3c>)
 8009be4:	4413      	add	r3, r2
 8009be6:	7a18      	ldrb	r0, [r3, #8]
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	68b9      	ldr	r1, [r7, #8]
 8009bee:	47a0      	blx	r4
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	75fb      	strb	r3, [r7, #23]
  return res;
 8009bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	371c      	adds	r7, #28
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd90      	pop	{r4, r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	24001290 	.word	0x24001290

08009c04 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009c04:	b590      	push	{r4, r7, lr}
 8009c06:	b087      	sub	sp, #28
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60b9      	str	r1, [r7, #8]
 8009c0c:	607a      	str	r2, [r7, #4]
 8009c0e:	603b      	str	r3, [r7, #0]
 8009c10:	4603      	mov	r3, r0
 8009c12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009c14:	7bfb      	ldrb	r3, [r7, #15]
 8009c16:	4a0a      	ldr	r2, [pc, #40]	; (8009c40 <disk_write+0x3c>)
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	4413      	add	r3, r2
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	68dc      	ldr	r4, [r3, #12]
 8009c20:	7bfb      	ldrb	r3, [r7, #15]
 8009c22:	4a07      	ldr	r2, [pc, #28]	; (8009c40 <disk_write+0x3c>)
 8009c24:	4413      	add	r3, r2
 8009c26:	7a18      	ldrb	r0, [r3, #8]
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	68b9      	ldr	r1, [r7, #8]
 8009c2e:	47a0      	blx	r4
 8009c30:	4603      	mov	r3, r0
 8009c32:	75fb      	strb	r3, [r7, #23]
  return res;
 8009c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	371c      	adds	r7, #28
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd90      	pop	{r4, r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	24001290 	.word	0x24001290

08009c44 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	603a      	str	r2, [r7, #0]
 8009c4e:	71fb      	strb	r3, [r7, #7]
 8009c50:	460b      	mov	r3, r1
 8009c52:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009c54:	79fb      	ldrb	r3, [r7, #7]
 8009c56:	4a09      	ldr	r2, [pc, #36]	; (8009c7c <disk_ioctl+0x38>)
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	4413      	add	r3, r2
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	695b      	ldr	r3, [r3, #20]
 8009c60:	79fa      	ldrb	r2, [r7, #7]
 8009c62:	4906      	ldr	r1, [pc, #24]	; (8009c7c <disk_ioctl+0x38>)
 8009c64:	440a      	add	r2, r1
 8009c66:	7a10      	ldrb	r0, [r2, #8]
 8009c68:	79b9      	ldrb	r1, [r7, #6]
 8009c6a:	683a      	ldr	r2, [r7, #0]
 8009c6c:	4798      	blx	r3
 8009c6e:	4603      	mov	r3, r0
 8009c70:	73fb      	strb	r3, [r7, #15]
  return res;
 8009c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3710      	adds	r7, #16
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	24001290 	.word	0x24001290

08009c80 <_ZL7ld_wordPKh>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009c80:	b480      	push	{r7}
 8009c82:	b085      	sub	sp, #20
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009c90:	89fb      	ldrh	r3, [r7, #14]
 8009c92:	021b      	lsls	r3, r3, #8
 8009c94:	b21a      	sxth	r2, r3
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	b21b      	sxth	r3, r3
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	b21b      	sxth	r3, r3
 8009ca0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009ca2:	89fb      	ldrh	r3, [r7, #14]
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3714      	adds	r7, #20
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <_ZL8ld_dwordPKh>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	3303      	adds	r3, #3
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	021b      	lsls	r3, r3, #8
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	3202      	adds	r2, #2
 8009cc8:	7812      	ldrb	r2, [r2, #0]
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	021b      	lsls	r3, r3, #8
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	3201      	adds	r2, #1
 8009cd6:	7812      	ldrb	r2, [r2, #0]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	021b      	lsls	r3, r3, #8
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	7812      	ldrb	r2, [r2, #0]
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	60fb      	str	r3, [r7, #12]
	return rv;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3714      	adds	r7, #20
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr

08009cf6 <_ZL7st_wordPht>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009cf6:	b480      	push	{r7}
 8009cf8:	b083      	sub	sp, #12
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
 8009cfe:	460b      	mov	r3, r1
 8009d00:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	1c5a      	adds	r2, r3, #1
 8009d06:	607a      	str	r2, [r7, #4]
 8009d08:	887a      	ldrh	r2, [r7, #2]
 8009d0a:	b2d2      	uxtb	r2, r2
 8009d0c:	701a      	strb	r2, [r3, #0]
 8009d0e:	887b      	ldrh	r3, [r7, #2]
 8009d10:	121b      	asrs	r3, r3, #8
 8009d12:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	1c5a      	adds	r2, r3, #1
 8009d18:	607a      	str	r2, [r7, #4]
 8009d1a:	887a      	ldrh	r2, [r7, #2]
 8009d1c:	b2d2      	uxtb	r2, r2
 8009d1e:	701a      	strb	r2, [r3, #0]
}
 8009d20:	bf00      	nop
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <_ZL8st_dwordPhm>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	1c5a      	adds	r2, r3, #1
 8009d3a:	607a      	str	r2, [r7, #4]
 8009d3c:	683a      	ldr	r2, [r7, #0]
 8009d3e:	b2d2      	uxtb	r2, r2
 8009d40:	701a      	strb	r2, [r3, #0]
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	0a1b      	lsrs	r3, r3, #8
 8009d46:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	1c5a      	adds	r2, r3, #1
 8009d4c:	607a      	str	r2, [r7, #4]
 8009d4e:	683a      	ldr	r2, [r7, #0]
 8009d50:	b2d2      	uxtb	r2, r2
 8009d52:	701a      	strb	r2, [r3, #0]
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	0a1b      	lsrs	r3, r3, #8
 8009d58:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	1c5a      	adds	r2, r3, #1
 8009d5e:	607a      	str	r2, [r7, #4]
 8009d60:	683a      	ldr	r2, [r7, #0]
 8009d62:	b2d2      	uxtb	r2, r2
 8009d64:	701a      	strb	r2, [r3, #0]
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	0a1b      	lsrs	r3, r3, #8
 8009d6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	1c5a      	adds	r2, r3, #1
 8009d70:	607a      	str	r2, [r7, #4]
 8009d72:	683a      	ldr	r2, [r7, #0]
 8009d74:	b2d2      	uxtb	r2, r2
 8009d76:	701a      	strb	r2, [r3, #0]
}
 8009d78:	bf00      	nop
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <_ZL7mem_cpyPvPKvj>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009d84:	b480      	push	{r7}
 8009d86:	b087      	sub	sp, #28
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d013      	beq.n	8009dc6 <_ZL7mem_cpyPvPKvj+0x42>
		do {
			*d++ = *s++;
 8009d9e:	693a      	ldr	r2, [r7, #16]
 8009da0:	1c53      	adds	r3, r2, #1
 8009da2:	613b      	str	r3, [r7, #16]
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	1c59      	adds	r1, r3, #1
 8009da8:	6179      	str	r1, [r7, #20]
 8009daa:	7812      	ldrb	r2, [r2, #0]
 8009dac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	3b01      	subs	r3, #1
 8009db2:	607b      	str	r3, [r7, #4]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	bf14      	ite	ne
 8009dba:	2301      	movne	r3, #1
 8009dbc:	2300      	moveq	r3, #0
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d000      	beq.n	8009dc6 <_ZL7mem_cpyPvPKvj+0x42>
		do {
 8009dc4:	e7eb      	b.n	8009d9e <_ZL7mem_cpyPvPKvj+0x1a>
	}
}
 8009dc6:	bf00      	nop
 8009dc8:	371c      	adds	r7, #28
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr

08009dd2 <_ZL7mem_setPvij>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009dd2:	b480      	push	{r7}
 8009dd4:	b087      	sub	sp, #28
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	60f8      	str	r0, [r7, #12]
 8009dda:	60b9      	str	r1, [r7, #8]
 8009ddc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	1c5a      	adds	r2, r3, #1
 8009de6:	617a      	str	r2, [r7, #20]
 8009de8:	68ba      	ldr	r2, [r7, #8]
 8009dea:	b2d2      	uxtb	r2, r2
 8009dec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	3b01      	subs	r3, #1
 8009df2:	607b      	str	r3, [r7, #4]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	bf14      	ite	ne
 8009dfa:	2301      	movne	r3, #1
 8009dfc:	2300      	moveq	r3, #0
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d000      	beq.n	8009e06 <_ZL7mem_setPvij+0x34>
	do {
 8009e04:	e7ed      	b.n	8009de2 <_ZL7mem_setPvij+0x10>
}
 8009e06:	bf00      	nop
 8009e08:	371c      	adds	r7, #28
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr

08009e12 <_ZL7mem_cmpPKvS0_j>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009e12:	b480      	push	{r7}
 8009e14:	b089      	sub	sp, #36	; 0x24
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	60f8      	str	r0, [r7, #12]
 8009e1a:	60b9      	str	r1, [r7, #8]
 8009e1c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	61fb      	str	r3, [r7, #28]
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009e26:	2300      	movs	r3, #0
 8009e28:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009e2a:	69fb      	ldr	r3, [r7, #28]
 8009e2c:	1c5a      	adds	r2, r3, #1
 8009e2e:	61fa      	str	r2, [r7, #28]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	4619      	mov	r1, r3
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	1c5a      	adds	r2, r3, #1
 8009e38:	61ba      	str	r2, [r7, #24]
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	1acb      	subs	r3, r1, r3
 8009e3e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	3b01      	subs	r3, #1
 8009e44:	607b      	str	r3, [r7, #4]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d004      	beq.n	8009e56 <_ZL7mem_cmpPKvS0_j+0x44>
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d101      	bne.n	8009e56 <_ZL7mem_cmpPKvS0_j+0x44>
 8009e52:	2301      	movs	r3, #1
 8009e54:	e000      	b.n	8009e58 <_ZL7mem_cmpPKvS0_j+0x46>
 8009e56:	2300      	movs	r3, #0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d000      	beq.n	8009e5e <_ZL7mem_cmpPKvS0_j+0x4c>
	do {
 8009e5c:	e7e5      	b.n	8009e2a <_ZL7mem_cmpPKvS0_j+0x18>

	return r;
 8009e5e:	697b      	ldr	r3, [r7, #20]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3724      	adds	r7, #36	; 0x24
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <_ZL7chk_chrPKci>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d009      	beq.n	8009e92 <_ZL7chk_chrPKci+0x26>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	461a      	mov	r2, r3
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d003      	beq.n	8009e92 <_ZL7chk_chrPKci+0x26>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	607b      	str	r3, [r7, #4]
 8009e90:	e7f1      	b.n	8009e76 <_ZL7chk_chrPKci+0xa>
	return *str;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	781b      	ldrb	r3, [r3, #0]
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	370c      	adds	r7, #12
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
	...

08009ea4 <_ZL8chk_lockP3DIRi>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009eae:	2300      	movs	r3, #0
 8009eb0:	60bb      	str	r3, [r7, #8]
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	60fb      	str	r3, [r7, #12]
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d82a      	bhi.n	8009f12 <_ZL8chk_lockP3DIRi+0x6e>
		if (Files[i].fs) {	/* Existing entry */
 8009ebc:	4a26      	ldr	r2, [pc, #152]	; (8009f58 <_ZL8chk_lockP3DIRi+0xb4>)
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	011b      	lsls	r3, r3, #4
 8009ec2:	4413      	add	r3, r2
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d01d      	beq.n	8009f06 <_ZL8chk_lockP3DIRi+0x62>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009eca:	4a23      	ldr	r2, [pc, #140]	; (8009f58 <_ZL8chk_lockP3DIRi+0xb4>)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	011b      	lsls	r3, r3, #4
 8009ed0:	4413      	add	r3, r2
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d116      	bne.n	8009f0a <_ZL8chk_lockP3DIRi+0x66>
				Files[i].clu == dp->obj.sclust &&
 8009edc:	4a1e      	ldr	r2, [pc, #120]	; (8009f58 <_ZL8chk_lockP3DIRi+0xb4>)
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	011b      	lsls	r3, r3, #4
 8009ee2:	4413      	add	r3, r2
 8009ee4:	3304      	adds	r3, #4
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d10c      	bne.n	8009f0a <_ZL8chk_lockP3DIRi+0x66>
				Files[i].ofs == dp->dptr) break;
 8009ef0:	4a19      	ldr	r2, [pc, #100]	; (8009f58 <_ZL8chk_lockP3DIRi+0xb4>)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	011b      	lsls	r3, r3, #4
 8009ef6:	4413      	add	r3, r2
 8009ef8:	3308      	adds	r3, #8
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d102      	bne.n	8009f0a <_ZL8chk_lockP3DIRi+0x66>
				Files[i].ofs == dp->dptr) break;
 8009f04:	e005      	b.n	8009f12 <_ZL8chk_lockP3DIRi+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009f06:	2301      	movs	r3, #1
 8009f08:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	60fb      	str	r3, [r7, #12]
 8009f10:	e7d1      	b.n	8009eb6 <_ZL8chk_lockP3DIRi+0x12>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2b02      	cmp	r3, #2
 8009f16:	d109      	bne.n	8009f2c <_ZL8chk_lockP3DIRi+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d102      	bne.n	8009f24 <_ZL8chk_lockP3DIRi+0x80>
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	2b02      	cmp	r3, #2
 8009f22:	d101      	bne.n	8009f28 <_ZL8chk_lockP3DIRi+0x84>
 8009f24:	2300      	movs	r3, #0
 8009f26:	e011      	b.n	8009f4c <_ZL8chk_lockP3DIRi+0xa8>
 8009f28:	2312      	movs	r3, #18
 8009f2a:	e00f      	b.n	8009f4c <_ZL8chk_lockP3DIRi+0xa8>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d108      	bne.n	8009f44 <_ZL8chk_lockP3DIRi+0xa0>
 8009f32:	4a09      	ldr	r2, [pc, #36]	; (8009f58 <_ZL8chk_lockP3DIRi+0xb4>)
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	011b      	lsls	r3, r3, #4
 8009f38:	4413      	add	r3, r2
 8009f3a:	330c      	adds	r3, #12
 8009f3c:	881b      	ldrh	r3, [r3, #0]
 8009f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f42:	d101      	bne.n	8009f48 <_ZL8chk_lockP3DIRi+0xa4>
 8009f44:	2310      	movs	r3, #16
 8009f46:	e000      	b.n	8009f4a <_ZL8chk_lockP3DIRi+0xa6>
 8009f48:	2300      	movs	r3, #0
 8009f4a:	bf00      	nop
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3714      	adds	r7, #20
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr
 8009f58:	24001270 	.word	0x24001270

08009f5c <_ZL8enq_lockv>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009f62:	2300      	movs	r3, #0
 8009f64:	607b      	str	r3, [r7, #4]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d80a      	bhi.n	8009f82 <_ZL8enq_lockv+0x26>
 8009f6c:	4a0b      	ldr	r2, [pc, #44]	; (8009f9c <_ZL8enq_lockv+0x40>)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	011b      	lsls	r3, r3, #4
 8009f72:	4413      	add	r3, r2
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d003      	beq.n	8009f82 <_ZL8enq_lockv+0x26>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	607b      	str	r3, [r7, #4]
 8009f80:	e7f1      	b.n	8009f66 <_ZL8enq_lockv+0xa>
	return (i == _FS_LOCK) ? 0 : 1;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2b02      	cmp	r3, #2
 8009f86:	bf14      	ite	ne
 8009f88:	2301      	movne	r3, #1
 8009f8a:	2300      	moveq	r3, #0
 8009f8c:	b2db      	uxtb	r3, r3
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	370c      	adds	r7, #12
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr
 8009f9a:	bf00      	nop
 8009f9c:	24001270 	.word	0x24001270

08009fa0 <_ZL8inc_lockP3DIRi>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009faa:	2300      	movs	r3, #0
 8009fac:	60fb      	str	r3, [r7, #12]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d821      	bhi.n	8009ff8 <_ZL8inc_lockP3DIRi+0x58>
		if (Files[i].fs == dp->obj.fs &&
 8009fb4:	4a40      	ldr	r2, [pc, #256]	; (800a0b8 <_ZL8inc_lockP3DIRi+0x118>)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	011b      	lsls	r3, r3, #4
 8009fba:	4413      	add	r3, r2
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d113      	bne.n	8009fee <_ZL8inc_lockP3DIRi+0x4e>
			Files[i].clu == dp->obj.sclust &&
 8009fc6:	4a3c      	ldr	r2, [pc, #240]	; (800a0b8 <_ZL8inc_lockP3DIRi+0x118>)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	011b      	lsls	r3, r3, #4
 8009fcc:	4413      	add	r3, r2
 8009fce:	3304      	adds	r3, #4
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d109      	bne.n	8009fee <_ZL8inc_lockP3DIRi+0x4e>
			Files[i].ofs == dp->dptr) break;
 8009fda:	4a37      	ldr	r2, [pc, #220]	; (800a0b8 <_ZL8inc_lockP3DIRi+0x118>)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	011b      	lsls	r3, r3, #4
 8009fe0:	4413      	add	r3, r2
 8009fe2:	3308      	adds	r3, #8
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d003      	beq.n	8009ff6 <_ZL8inc_lockP3DIRi+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	60fb      	str	r3, [r7, #12]
 8009ff4:	e7db      	b.n	8009fae <_ZL8inc_lockP3DIRi+0xe>
			Files[i].ofs == dp->dptr) break;
 8009ff6:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	d132      	bne.n	800a064 <_ZL8inc_lockP3DIRi+0xc4>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009ffe:	2300      	movs	r3, #0
 800a000:	60fb      	str	r3, [r7, #12]
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2b01      	cmp	r3, #1
 800a006:	d80a      	bhi.n	800a01e <_ZL8inc_lockP3DIRi+0x7e>
 800a008:	4a2b      	ldr	r2, [pc, #172]	; (800a0b8 <_ZL8inc_lockP3DIRi+0x118>)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	011b      	lsls	r3, r3, #4
 800a00e:	4413      	add	r3, r2
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d003      	beq.n	800a01e <_ZL8inc_lockP3DIRi+0x7e>
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	3301      	adds	r3, #1
 800a01a:	60fb      	str	r3, [r7, #12]
 800a01c:	e7f1      	b.n	800a002 <_ZL8inc_lockP3DIRi+0x62>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2b02      	cmp	r3, #2
 800a022:	d101      	bne.n	800a028 <_ZL8inc_lockP3DIRi+0x88>
 800a024:	2300      	movs	r3, #0
 800a026:	e040      	b.n	800a0aa <_ZL8inc_lockP3DIRi+0x10a>
		Files[i].fs = dp->obj.fs;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	4922      	ldr	r1, [pc, #136]	; (800a0b8 <_ZL8inc_lockP3DIRi+0x118>)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	011b      	lsls	r3, r3, #4
 800a032:	440b      	add	r3, r1
 800a034:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	689a      	ldr	r2, [r3, #8]
 800a03a:	491f      	ldr	r1, [pc, #124]	; (800a0b8 <_ZL8inc_lockP3DIRi+0x118>)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	011b      	lsls	r3, r3, #4
 800a040:	440b      	add	r3, r1
 800a042:	3304      	adds	r3, #4
 800a044:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	695a      	ldr	r2, [r3, #20]
 800a04a:	491b      	ldr	r1, [pc, #108]	; (800a0b8 <_ZL8inc_lockP3DIRi+0x118>)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	011b      	lsls	r3, r3, #4
 800a050:	440b      	add	r3, r1
 800a052:	3308      	adds	r3, #8
 800a054:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a056:	4a18      	ldr	r2, [pc, #96]	; (800a0b8 <_ZL8inc_lockP3DIRi+0x118>)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	011b      	lsls	r3, r3, #4
 800a05c:	4413      	add	r3, r2
 800a05e:	330c      	adds	r3, #12
 800a060:	2200      	movs	r2, #0
 800a062:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d009      	beq.n	800a07e <_ZL8inc_lockP3DIRi+0xde>
 800a06a:	4a13      	ldr	r2, [pc, #76]	; (800a0b8 <_ZL8inc_lockP3DIRi+0x118>)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	011b      	lsls	r3, r3, #4
 800a070:	4413      	add	r3, r2
 800a072:	330c      	adds	r3, #12
 800a074:	881b      	ldrh	r3, [r3, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d001      	beq.n	800a07e <_ZL8inc_lockP3DIRi+0xde>
 800a07a:	2300      	movs	r3, #0
 800a07c:	e015      	b.n	800a0aa <_ZL8inc_lockP3DIRi+0x10a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d108      	bne.n	800a096 <_ZL8inc_lockP3DIRi+0xf6>
 800a084:	4a0c      	ldr	r2, [pc, #48]	; (800a0b8 <_ZL8inc_lockP3DIRi+0x118>)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	011b      	lsls	r3, r3, #4
 800a08a:	4413      	add	r3, r2
 800a08c:	330c      	adds	r3, #12
 800a08e:	881b      	ldrh	r3, [r3, #0]
 800a090:	3301      	adds	r3, #1
 800a092:	b29a      	uxth	r2, r3
 800a094:	e001      	b.n	800a09a <_ZL8inc_lockP3DIRi+0xfa>
 800a096:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a09a:	4907      	ldr	r1, [pc, #28]	; (800a0b8 <_ZL8inc_lockP3DIRi+0x118>)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	011b      	lsls	r3, r3, #4
 800a0a0:	440b      	add	r3, r1
 800a0a2:	330c      	adds	r3, #12
 800a0a4:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	3301      	adds	r3, #1
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3714      	adds	r7, #20
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	24001270 	.word	0x24001270

0800a0bc <_ZL8dec_lockj>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b085      	sub	sp, #20
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	607b      	str	r3, [r7, #4]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	bf94      	ite	ls
 800a0d0:	2301      	movls	r3, #1
 800a0d2:	2300      	movhi	r3, #0
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d025      	beq.n	800a126 <_ZL8dec_lockj+0x6a>
		n = Files[i].ctr;
 800a0da:	4a17      	ldr	r2, [pc, #92]	; (800a138 <_ZL8dec_lockj+0x7c>)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	011b      	lsls	r3, r3, #4
 800a0e0:	4413      	add	r3, r2
 800a0e2:	330c      	adds	r3, #12
 800a0e4:	881b      	ldrh	r3, [r3, #0]
 800a0e6:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a0e8:	89fb      	ldrh	r3, [r7, #14]
 800a0ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0ee:	d101      	bne.n	800a0f4 <_ZL8dec_lockj+0x38>
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a0f4:	89fb      	ldrh	r3, [r7, #14]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d002      	beq.n	800a100 <_ZL8dec_lockj+0x44>
 800a0fa:	89fb      	ldrh	r3, [r7, #14]
 800a0fc:	3b01      	subs	r3, #1
 800a0fe:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a100:	4a0d      	ldr	r2, [pc, #52]	; (800a138 <_ZL8dec_lockj+0x7c>)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	011b      	lsls	r3, r3, #4
 800a106:	4413      	add	r3, r2
 800a108:	330c      	adds	r3, #12
 800a10a:	89fa      	ldrh	r2, [r7, #14]
 800a10c:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a10e:	89fb      	ldrh	r3, [r7, #14]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d105      	bne.n	800a120 <_ZL8dec_lockj+0x64>
 800a114:	4a08      	ldr	r2, [pc, #32]	; (800a138 <_ZL8dec_lockj+0x7c>)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	011b      	lsls	r3, r3, #4
 800a11a:	4413      	add	r3, r2
 800a11c:	2200      	movs	r2, #0
 800a11e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a120:	2300      	movs	r3, #0
 800a122:	737b      	strb	r3, [r7, #13]
 800a124:	e001      	b.n	800a12a <_ZL8dec_lockj+0x6e>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a126:	2302      	movs	r3, #2
 800a128:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a12a:	7b7b      	ldrb	r3, [r7, #13]
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3714      	adds	r7, #20
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr
 800a138:	24001270 	.word	0x24001270

0800a13c <_ZL10clear_lockP5FATFS>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b085      	sub	sp, #20
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a144:	2300      	movs	r3, #0
 800a146:	60fb      	str	r3, [r7, #12]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d811      	bhi.n	800a172 <_ZL10clear_lockP5FATFS+0x36>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a14e:	4a0c      	ldr	r2, [pc, #48]	; (800a180 <_ZL10clear_lockP5FATFS+0x44>)
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	011b      	lsls	r3, r3, #4
 800a154:	4413      	add	r3, r2
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d105      	bne.n	800a16a <_ZL10clear_lockP5FATFS+0x2e>
 800a15e:	4a08      	ldr	r2, [pc, #32]	; (800a180 <_ZL10clear_lockP5FATFS+0x44>)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	011b      	lsls	r3, r3, #4
 800a164:	4413      	add	r3, r2
 800a166:	2200      	movs	r2, #0
 800a168:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	3301      	adds	r3, #1
 800a16e:	60fb      	str	r3, [r7, #12]
 800a170:	e7ea      	b.n	800a148 <_ZL10clear_lockP5FATFS+0xc>
	}
}
 800a172:	bf00      	nop
 800a174:	3714      	adds	r7, #20
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop
 800a180:	24001270 	.word	0x24001270

0800a184 <_ZL11sync_windowP5FATFS>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b086      	sub	sp, #24
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a18c:	2300      	movs	r3, #0
 800a18e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	78db      	ldrb	r3, [r3, #3]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d039      	beq.n	800a20c <_ZL11sync_windowP5FATFS+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a19c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	7858      	ldrb	r0, [r3, #1]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	697a      	ldr	r2, [r7, #20]
 800a1ac:	f7ff fd2a 	bl	8009c04 <disk_write>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	bf14      	ite	ne
 800a1b6:	2301      	movne	r3, #1
 800a1b8:	2300      	moveq	r3, #0
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d002      	beq.n	800a1c6 <_ZL11sync_windowP5FATFS+0x42>
			res = FR_DISK_ERR;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	73fb      	strb	r3, [r7, #15]
 800a1c4:	e022      	b.n	800a20c <_ZL11sync_windowP5FATFS+0x88>
		} else {
			fs->wflag = 0;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6a1b      	ldr	r3, [r3, #32]
 800a1d0:	697a      	ldr	r2, [r7, #20]
 800a1d2:	1ad2      	subs	r2, r2, r3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	699b      	ldr	r3, [r3, #24]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d217      	bcs.n	800a20c <_ZL11sync_windowP5FATFS+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	789b      	ldrb	r3, [r3, #2]
 800a1e0:	613b      	str	r3, [r7, #16]
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d911      	bls.n	800a20c <_ZL11sync_windowP5FATFS+0x88>
					wsect += fs->fsize;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	697a      	ldr	r2, [r7, #20]
 800a1ee:	4413      	add	r3, r2
 800a1f0:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	7858      	ldrb	r0, [r3, #1]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	697a      	ldr	r2, [r7, #20]
 800a200:	f7ff fd00 	bl	8009c04 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	3b01      	subs	r3, #1
 800a208:	613b      	str	r3, [r7, #16]
 800a20a:	e7ea      	b.n	800a1e2 <_ZL11sync_windowP5FATFS+0x5e>
				}
			}
		}
	}
	return res;
 800a20c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3718      	adds	r7, #24
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}

0800a216 <_ZL11move_windowP5FATFSm>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a216:	b580      	push	{r7, lr}
 800a218:	b084      	sub	sp, #16
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
 800a21e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a220:	2300      	movs	r3, #0
 800a222:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a228:	683a      	ldr	r2, [r7, #0]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d020      	beq.n	800a270 <_ZL11move_windowP5FATFSm+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f7ff ffa8 	bl	800a184 <_ZL11sync_windowP5FATFS>
 800a234:	4603      	mov	r3, r0
 800a236:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a238:	7bfb      	ldrb	r3, [r7, #15]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d118      	bne.n	800a270 <_ZL11move_windowP5FATFSm+0x5a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	7858      	ldrb	r0, [r3, #1]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a248:	2301      	movs	r3, #1
 800a24a:	683a      	ldr	r2, [r7, #0]
 800a24c:	f7ff fcba 	bl	8009bc4 <disk_read>
 800a250:	4603      	mov	r3, r0
 800a252:	2b00      	cmp	r3, #0
 800a254:	bf14      	ite	ne
 800a256:	2301      	movne	r3, #1
 800a258:	2300      	moveq	r3, #0
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d004      	beq.n	800a26a <_ZL11move_windowP5FATFSm+0x54>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a260:	f04f 33ff 	mov.w	r3, #4294967295
 800a264:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a266:	2301      	movs	r3, #1
 800a268:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	683a      	ldr	r2, [r7, #0]
 800a26e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800a270:	7bfb      	ldrb	r3, [r7, #15]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
	...

0800a27c <_ZL7sync_fsP5FATFS>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f7ff ff7d 	bl	800a184 <_ZL11sync_windowP5FATFS>
 800a28a:	4603      	mov	r3, r0
 800a28c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a28e:	7bfb      	ldrb	r3, [r7, #15]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d15d      	bne.n	800a350 <_ZL7sync_fsP5FATFS+0xd4>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	2b03      	cmp	r3, #3
 800a29a:	d148      	bne.n	800a32e <_ZL7sync_fsP5FATFS+0xb2>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	791b      	ldrb	r3, [r3, #4]
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d144      	bne.n	800a32e <_ZL7sync_fsP5FATFS+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	3330      	adds	r3, #48	; 0x30
 800a2a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7ff fd8f 	bl	8009dd2 <_ZL7mem_setPvij>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	3330      	adds	r3, #48	; 0x30
 800a2b8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a2bc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7ff fd18 	bl	8009cf6 <_ZL7st_wordPht>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	3330      	adds	r3, #48	; 0x30
 800a2ca:	4924      	ldr	r1, [pc, #144]	; (800a35c <_ZL7sync_fsP5FATFS+0xe0>)
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7ff fd2d 	bl	8009d2c <_ZL8st_dwordPhm>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	3330      	adds	r3, #48	; 0x30
 800a2d6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a2da:	4921      	ldr	r1, [pc, #132]	; (800a360 <_ZL7sync_fsP5FATFS+0xe4>)
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f7ff fd25 	bl	8009d2c <_ZL8st_dwordPhm>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	3330      	adds	r3, #48	; 0x30
 800a2e6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	4610      	mov	r0, r2
 800a2f2:	f7ff fd1b 	bl	8009d2c <_ZL8st_dwordPhm>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	3330      	adds	r3, #48	; 0x30
 800a2fa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	4619      	mov	r1, r3
 800a304:	4610      	mov	r0, r2
 800a306:	f7ff fd11 	bl	8009d2c <_ZL8st_dwordPhm>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	69db      	ldr	r3, [r3, #28]
 800a30e:	1c5a      	adds	r2, r3, #1
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	7858      	ldrb	r0, [r3, #1]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a322:	2301      	movs	r3, #1
 800a324:	f7ff fc6e 	bl	8009c04 <disk_write>
			fs->fsi_flag = 0;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	785b      	ldrb	r3, [r3, #1]
 800a332:	2200      	movs	r2, #0
 800a334:	2100      	movs	r1, #0
 800a336:	4618      	mov	r0, r3
 800a338:	f7ff fc84 	bl	8009c44 <disk_ioctl>
 800a33c:	4603      	mov	r3, r0
 800a33e:	2b00      	cmp	r3, #0
 800a340:	bf14      	ite	ne
 800a342:	2301      	movne	r3, #1
 800a344:	2300      	moveq	r3, #0
 800a346:	b2db      	uxtb	r3, r3
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d001      	beq.n	800a350 <_ZL7sync_fsP5FATFS+0xd4>
 800a34c:	2301      	movs	r3, #1
 800a34e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a350:	7bfb      	ldrb	r3, [r7, #15]
}
 800a352:	4618      	mov	r0, r3
 800a354:	3710      	adds	r7, #16
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	41615252 	.word	0x41615252
 800a360:	61417272 	.word	0x61417272

0800a364 <_ZL10clust2sectP5FATFSm>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	3b02      	subs	r3, #2
 800a372:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	695b      	ldr	r3, [r3, #20]
 800a378:	3b02      	subs	r3, #2
 800a37a:	683a      	ldr	r2, [r7, #0]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d301      	bcc.n	800a384 <_ZL10clust2sectP5FATFSm+0x20>
 800a380:	2300      	movs	r3, #0
 800a382:	e008      	b.n	800a396 <_ZL10clust2sectP5FATFSm+0x32>
	return clst * fs->csize + fs->database;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	895b      	ldrh	r3, [r3, #10]
 800a388:	461a      	mov	r2, r3
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	fb03 f202 	mul.w	r2, r3, r2
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a394:	4413      	add	r3, r2
}
 800a396:	4618      	mov	r0, r3
 800a398:	370c      	adds	r7, #12
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr

0800a3a2 <_ZL7get_fatP5_FDIDm>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b086      	sub	sp, #24
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
 800a3aa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d904      	bls.n	800a3c2 <_ZL7get_fatP5_FDIDm+0x20>
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	695b      	ldr	r3, [r3, #20]
 800a3bc:	683a      	ldr	r2, [r7, #0]
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d302      	bcc.n	800a3c8 <_ZL7get_fatP5_FDIDm+0x26>
		val = 1;	/* Internal error */
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	617b      	str	r3, [r7, #20]
 800a3c6:	e0a1      	b.n	800a50c <_ZL7get_fatP5_FDIDm+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a3c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a3cc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	2b02      	cmp	r3, #2
 800a3d4:	d050      	beq.n	800a478 <_ZL7get_fatP5_FDIDm+0xd6>
 800a3d6:	2b03      	cmp	r3, #3
 800a3d8:	d06d      	beq.n	800a4b6 <_ZL7get_fatP5_FDIDm+0x114>
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	f040 808c 	bne.w	800a4f8 <_ZL7get_fatP5_FDIDm+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	60fb      	str	r3, [r7, #12]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	085b      	lsrs	r3, r3, #1
 800a3e8:	68fa      	ldr	r2, [r7, #12]
 800a3ea:	4413      	add	r3, r2
 800a3ec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	6a1a      	ldr	r2, [r3, #32]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	0a5b      	lsrs	r3, r3, #9
 800a3f6:	4413      	add	r3, r2
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	6938      	ldr	r0, [r7, #16]
 800a3fc:	f7ff ff0b 	bl	800a216 <_ZL11move_windowP5FATFSm>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	bf14      	ite	ne
 800a406:	2301      	movne	r3, #1
 800a408:	2300      	moveq	r3, #0
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d176      	bne.n	800a4fe <_ZL7get_fatP5_FDIDm+0x15c>
			wc = fs->win[bc++ % SS(fs)];
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	1c5a      	adds	r2, r3, #1
 800a414:	60fa      	str	r2, [r7, #12]
 800a416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a41a:	693a      	ldr	r2, [r7, #16]
 800a41c:	4413      	add	r3, r2
 800a41e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a422:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	6a1a      	ldr	r2, [r3, #32]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	0a5b      	lsrs	r3, r3, #9
 800a42c:	4413      	add	r3, r2
 800a42e:	4619      	mov	r1, r3
 800a430:	6938      	ldr	r0, [r7, #16]
 800a432:	f7ff fef0 	bl	800a216 <_ZL11move_windowP5FATFSm>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	bf14      	ite	ne
 800a43c:	2301      	movne	r3, #1
 800a43e:	2300      	moveq	r3, #0
 800a440:	b2db      	uxtb	r3, r3
 800a442:	2b00      	cmp	r3, #0
 800a444:	d15d      	bne.n	800a502 <_ZL7get_fatP5_FDIDm+0x160>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a44c:	693a      	ldr	r2, [r7, #16]
 800a44e:	4413      	add	r3, r2
 800a450:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a454:	021b      	lsls	r3, r3, #8
 800a456:	461a      	mov	r2, r3
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	4313      	orrs	r3, r2
 800a45c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	f003 0301 	and.w	r3, r3, #1
 800a464:	2b00      	cmp	r3, #0
 800a466:	d002      	beq.n	800a46e <_ZL7get_fatP5_FDIDm+0xcc>
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	091b      	lsrs	r3, r3, #4
 800a46c:	e002      	b.n	800a474 <_ZL7get_fatP5_FDIDm+0xd2>
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a474:	617b      	str	r3, [r7, #20]
			break;
 800a476:	e049      	b.n	800a50c <_ZL7get_fatP5_FDIDm+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	6a1a      	ldr	r2, [r3, #32]
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	0a1b      	lsrs	r3, r3, #8
 800a480:	4413      	add	r3, r2
 800a482:	4619      	mov	r1, r3
 800a484:	6938      	ldr	r0, [r7, #16]
 800a486:	f7ff fec6 	bl	800a216 <_ZL11move_windowP5FATFSm>
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	bf14      	ite	ne
 800a490:	2301      	movne	r3, #1
 800a492:	2300      	moveq	r3, #0
 800a494:	b2db      	uxtb	r3, r3
 800a496:	2b00      	cmp	r3, #0
 800a498:	d135      	bne.n	800a506 <_ZL7get_fatP5_FDIDm+0x164>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	005b      	lsls	r3, r3, #1
 800a4a4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a4a8:	4413      	add	r3, r2
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7ff fbe8 	bl	8009c80 <_ZL7ld_wordPKh>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	617b      	str	r3, [r7, #20]
			break;
 800a4b4:	e02a      	b.n	800a50c <_ZL7get_fatP5_FDIDm+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	6a1a      	ldr	r2, [r3, #32]
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	09db      	lsrs	r3, r3, #7
 800a4be:	4413      	add	r3, r2
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	6938      	ldr	r0, [r7, #16]
 800a4c4:	f7ff fea7 	bl	800a216 <_ZL11move_windowP5FATFSm>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	bf14      	ite	ne
 800a4ce:	2301      	movne	r3, #1
 800a4d0:	2300      	moveq	r3, #0
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d118      	bne.n	800a50a <_ZL7get_fatP5_FDIDm+0x168>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	009b      	lsls	r3, r3, #2
 800a4e2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a4e6:	4413      	add	r3, r2
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7ff fbe1 	bl	8009cb0 <_ZL8ld_dwordPKh>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a4f4:	617b      	str	r3, [r7, #20]
			break;
 800a4f6:	e009      	b.n	800a50c <_ZL7get_fatP5_FDIDm+0x16a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	617b      	str	r3, [r7, #20]
 800a4fc:	e006      	b.n	800a50c <_ZL7get_fatP5_FDIDm+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a4fe:	bf00      	nop
 800a500:	e004      	b.n	800a50c <_ZL7get_fatP5_FDIDm+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a502:	bf00      	nop
 800a504:	e002      	b.n	800a50c <_ZL7get_fatP5_FDIDm+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a506:	bf00      	nop
 800a508:	e000      	b.n	800a50c <_ZL7get_fatP5_FDIDm+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a50a:	bf00      	nop
		}
	}

	return val;
 800a50c:	697b      	ldr	r3, [r7, #20]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3718      	adds	r7, #24
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <_ZL7put_fatP5FATFSmm>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a516:	b590      	push	{r4, r7, lr}
 800a518:	b089      	sub	sp, #36	; 0x24
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	60f8      	str	r0, [r7, #12]
 800a51e:	60b9      	str	r1, [r7, #8]
 800a520:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a522:	2302      	movs	r3, #2
 800a524:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	2b01      	cmp	r3, #1
 800a52a:	f240 80d5 	bls.w	800a6d8 <_ZL7put_fatP5FATFSmm+0x1c2>
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	695b      	ldr	r3, [r3, #20]
 800a532:	68ba      	ldr	r2, [r7, #8]
 800a534:	429a      	cmp	r2, r3
 800a536:	f080 80cf 	bcs.w	800a6d8 <_ZL7put_fatP5FATFSmm+0x1c2>
		switch (fs->fs_type) {
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	2b02      	cmp	r3, #2
 800a540:	d071      	beq.n	800a626 <_ZL7put_fatP5FATFSmm+0x110>
 800a542:	2b03      	cmp	r3, #3
 800a544:	f000 808f 	beq.w	800a666 <_ZL7put_fatP5FATFSmm+0x150>
 800a548:	2b01      	cmp	r3, #1
 800a54a:	f040 80c5 	bne.w	800a6d8 <_ZL7put_fatP5FATFSmm+0x1c2>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	61bb      	str	r3, [r7, #24]
 800a552:	69bb      	ldr	r3, [r7, #24]
 800a554:	085b      	lsrs	r3, r3, #1
 800a556:	69ba      	ldr	r2, [r7, #24]
 800a558:	4413      	add	r3, r2
 800a55a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	6a1a      	ldr	r2, [r3, #32]
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	0a5b      	lsrs	r3, r3, #9
 800a564:	4413      	add	r3, r2
 800a566:	4619      	mov	r1, r3
 800a568:	68f8      	ldr	r0, [r7, #12]
 800a56a:	f7ff fe54 	bl	800a216 <_ZL11move_windowP5FATFSm>
 800a56e:	4603      	mov	r3, r0
 800a570:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a572:	7ffb      	ldrb	r3, [r7, #31]
 800a574:	2b00      	cmp	r3, #0
 800a576:	f040 80a8 	bne.w	800a6ca <_ZL7put_fatP5FATFSmm+0x1b4>
			p = fs->win + bc++ % SS(fs);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	1c59      	adds	r1, r3, #1
 800a584:	61b9      	str	r1, [r7, #24]
 800a586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a58a:	4413      	add	r3, r2
 800a58c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	f003 0301 	and.w	r3, r3, #1
 800a594:	2b00      	cmp	r3, #0
 800a596:	d00d      	beq.n	800a5b4 <_ZL7put_fatP5FATFSmm+0x9e>
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	b25b      	sxtb	r3, r3
 800a59e:	f003 030f 	and.w	r3, r3, #15
 800a5a2:	b25a      	sxtb	r2, r3
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	011b      	lsls	r3, r3, #4
 800a5aa:	b25b      	sxtb	r3, r3
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	b25b      	sxtb	r3, r3
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	e001      	b.n	800a5b8 <_ZL7put_fatP5FATFSmm+0xa2>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	b2db      	uxtb	r3, r3
 800a5b8:	697a      	ldr	r2, [r7, #20]
 800a5ba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6a1a      	ldr	r2, [r3, #32]
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	0a5b      	lsrs	r3, r3, #9
 800a5ca:	4413      	add	r3, r2
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	68f8      	ldr	r0, [r7, #12]
 800a5d0:	f7ff fe21 	bl	800a216 <_ZL11move_windowP5FATFSm>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a5d8:	7ffb      	ldrb	r3, [r7, #31]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d177      	bne.n	800a6ce <_ZL7put_fatP5FATFSmm+0x1b8>
			p = fs->win + bc % SS(fs);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ea:	4413      	add	r3, r2
 800a5ec:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	f003 0301 	and.w	r3, r3, #1
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d003      	beq.n	800a600 <_ZL7put_fatP5FATFSmm+0xea>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	091b      	lsrs	r3, r3, #4
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	e00c      	b.n	800a61a <_ZL7put_fatP5FATFSmm+0x104>
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	f023 030f 	bic.w	r3, r3, #15
 800a608:	b2da      	uxtb	r2, r3
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	0a1b      	lsrs	r3, r3, #8
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	f003 030f 	and.w	r3, r3, #15
 800a614:	b2db      	uxtb	r3, r3
 800a616:	4313      	orrs	r3, r2
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	697a      	ldr	r2, [r7, #20]
 800a61c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2201      	movs	r2, #1
 800a622:	70da      	strb	r2, [r3, #3]
			break;
 800a624:	e058      	b.n	800a6d8 <_ZL7put_fatP5FATFSmm+0x1c2>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	6a1a      	ldr	r2, [r3, #32]
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	0a1b      	lsrs	r3, r3, #8
 800a62e:	4413      	add	r3, r2
 800a630:	4619      	mov	r1, r3
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	f7ff fdef 	bl	800a216 <_ZL11move_windowP5FATFSm>
 800a638:	4603      	mov	r3, r0
 800a63a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a63c:	7ffb      	ldrb	r3, [r7, #31]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d147      	bne.n	800a6d2 <_ZL7put_fatP5FATFSmm+0x1bc>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	005b      	lsls	r3, r3, #1
 800a64c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a650:	4413      	add	r3, r2
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	b292      	uxth	r2, r2
 800a656:	4611      	mov	r1, r2
 800a658:	4618      	mov	r0, r3
 800a65a:	f7ff fb4c 	bl	8009cf6 <_ZL7st_wordPht>
			fs->wflag = 1;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2201      	movs	r2, #1
 800a662:	70da      	strb	r2, [r3, #3]
			break;
 800a664:	e038      	b.n	800a6d8 <_ZL7put_fatP5FATFSmm+0x1c2>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6a1a      	ldr	r2, [r3, #32]
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	09db      	lsrs	r3, r3, #7
 800a66e:	4413      	add	r3, r2
 800a670:	4619      	mov	r1, r3
 800a672:	68f8      	ldr	r0, [r7, #12]
 800a674:	f7ff fdcf 	bl	800a216 <_ZL11move_windowP5FATFSm>
 800a678:	4603      	mov	r3, r0
 800a67a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a67c:	7ffb      	ldrb	r3, [r7, #31]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d129      	bne.n	800a6d6 <_ZL7put_fatP5FATFSmm+0x1c0>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a696:	4413      	add	r3, r2
 800a698:	4618      	mov	r0, r3
 800a69a:	f7ff fb09 	bl	8009cb0 <_ZL8ld_dwordPKh>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a6a4:	4323      	orrs	r3, r4
 800a6a6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	009b      	lsls	r3, r3, #2
 800a6b2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a6b6:	4413      	add	r3, r2
 800a6b8:	6879      	ldr	r1, [r7, #4]
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7ff fb36 	bl	8009d2c <_ZL8st_dwordPhm>
			fs->wflag = 1;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	70da      	strb	r2, [r3, #3]
			break;
 800a6c6:	bf00      	nop
 800a6c8:	e006      	b.n	800a6d8 <_ZL7put_fatP5FATFSmm+0x1c2>
			if (res != FR_OK) break;
 800a6ca:	bf00      	nop
 800a6cc:	e004      	b.n	800a6d8 <_ZL7put_fatP5FATFSmm+0x1c2>
			if (res != FR_OK) break;
 800a6ce:	bf00      	nop
 800a6d0:	e002      	b.n	800a6d8 <_ZL7put_fatP5FATFSmm+0x1c2>
			if (res != FR_OK) break;
 800a6d2:	bf00      	nop
 800a6d4:	e000      	b.n	800a6d8 <_ZL7put_fatP5FATFSmm+0x1c2>
			if (res != FR_OK) break;
 800a6d6:	bf00      	nop
		}
	}
	return res;
 800a6d8:	7ffb      	ldrb	r3, [r7, #31]
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3724      	adds	r7, #36	; 0x24
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd90      	pop	{r4, r7, pc}

0800a6e2 <_ZL12remove_chainP5_FDIDmm>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b088      	sub	sp, #32
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	60f8      	str	r0, [r7, #12]
 800a6ea:	60b9      	str	r1, [r7, #8]
 800a6ec:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d904      	bls.n	800a708 <_ZL12remove_chainP5_FDIDmm+0x26>
 800a6fe:	69bb      	ldr	r3, [r7, #24]
 800a700:	695b      	ldr	r3, [r3, #20]
 800a702:	68ba      	ldr	r2, [r7, #8]
 800a704:	429a      	cmp	r2, r3
 800a706:	d301      	bcc.n	800a70c <_ZL12remove_chainP5_FDIDmm+0x2a>
 800a708:	2302      	movs	r3, #2
 800a70a:	e04b      	b.n	800a7a4 <_ZL12remove_chainP5_FDIDmm+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d00c      	beq.n	800a72c <_ZL12remove_chainP5_FDIDmm+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a712:	f04f 32ff 	mov.w	r2, #4294967295
 800a716:	6879      	ldr	r1, [r7, #4]
 800a718:	69b8      	ldr	r0, [r7, #24]
 800a71a:	f7ff fefc 	bl	800a516 <_ZL7put_fatP5FATFSmm>
 800a71e:	4603      	mov	r3, r0
 800a720:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a722:	7ffb      	ldrb	r3, [r7, #31]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d001      	beq.n	800a72c <_ZL12remove_chainP5_FDIDmm+0x4a>
 800a728:	7ffb      	ldrb	r3, [r7, #31]
 800a72a:	e03b      	b.n	800a7a4 <_ZL12remove_chainP5_FDIDmm+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a72c:	68b9      	ldr	r1, [r7, #8]
 800a72e:	68f8      	ldr	r0, [r7, #12]
 800a730:	f7ff fe37 	bl	800a3a2 <_ZL7get_fatP5_FDIDm>
 800a734:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d031      	beq.n	800a7a0 <_ZL12remove_chainP5_FDIDmm+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d101      	bne.n	800a746 <_ZL12remove_chainP5_FDIDmm+0x64>
 800a742:	2302      	movs	r3, #2
 800a744:	e02e      	b.n	800a7a4 <_ZL12remove_chainP5_FDIDmm+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a74c:	d101      	bne.n	800a752 <_ZL12remove_chainP5_FDIDmm+0x70>
 800a74e:	2301      	movs	r3, #1
 800a750:	e028      	b.n	800a7a4 <_ZL12remove_chainP5_FDIDmm+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a752:	2200      	movs	r2, #0
 800a754:	68b9      	ldr	r1, [r7, #8]
 800a756:	69b8      	ldr	r0, [r7, #24]
 800a758:	f7ff fedd 	bl	800a516 <_ZL7put_fatP5FATFSmm>
 800a75c:	4603      	mov	r3, r0
 800a75e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a760:	7ffb      	ldrb	r3, [r7, #31]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d001      	beq.n	800a76a <_ZL12remove_chainP5_FDIDmm+0x88>
 800a766:	7ffb      	ldrb	r3, [r7, #31]
 800a768:	e01c      	b.n	800a7a4 <_ZL12remove_chainP5_FDIDmm+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a76a:	69bb      	ldr	r3, [r7, #24]
 800a76c:	691a      	ldr	r2, [r3, #16]
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	695b      	ldr	r3, [r3, #20]
 800a772:	3b02      	subs	r3, #2
 800a774:	429a      	cmp	r2, r3
 800a776:	d20b      	bcs.n	800a790 <_ZL12remove_chainP5_FDIDmm+0xae>
			fs->free_clst++;
 800a778:	69bb      	ldr	r3, [r7, #24]
 800a77a:	691b      	ldr	r3, [r3, #16]
 800a77c:	1c5a      	adds	r2, r3, #1
 800a77e:	69bb      	ldr	r3, [r7, #24]
 800a780:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a782:	69bb      	ldr	r3, [r7, #24]
 800a784:	791b      	ldrb	r3, [r3, #4]
 800a786:	f043 0301 	orr.w	r3, r3, #1
 800a78a:	b2da      	uxtb	r2, r3
 800a78c:	69bb      	ldr	r3, [r7, #24]
 800a78e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a794:	69bb      	ldr	r3, [r7, #24]
 800a796:	695b      	ldr	r3, [r3, #20]
 800a798:	68ba      	ldr	r2, [r7, #8]
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d201      	bcs.n	800a7a2 <_ZL12remove_chainP5_FDIDmm+0xc0>
	do {
 800a79e:	e7c5      	b.n	800a72c <_ZL12remove_chainP5_FDIDmm+0x4a>
		if (nxt == 0) break;				/* Empty cluster? */
 800a7a0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a7a2:	2300      	movs	r3, #0
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3720      	adds	r7, #32
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <_ZL12create_chainP5_FDIDm>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b088      	sub	sp, #32
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d10d      	bne.n	800a7de <_ZL12create_chainP5_FDIDm+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a7c8:	69bb      	ldr	r3, [r7, #24]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d004      	beq.n	800a7d8 <_ZL12create_chainP5_FDIDm+0x2c>
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	695b      	ldr	r3, [r3, #20]
 800a7d2:	69ba      	ldr	r2, [r7, #24]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d31b      	bcc.n	800a810 <_ZL12create_chainP5_FDIDm+0x64>
 800a7d8:	2301      	movs	r3, #1
 800a7da:	61bb      	str	r3, [r7, #24]
 800a7dc:	e018      	b.n	800a810 <_ZL12create_chainP5_FDIDm+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a7de:	6839      	ldr	r1, [r7, #0]
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f7ff fdde 	bl	800a3a2 <_ZL7get_fatP5_FDIDm>
 800a7e6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d801      	bhi.n	800a7f2 <_ZL12create_chainP5_FDIDm+0x46>
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e070      	b.n	800a8d4 <_ZL12create_chainP5_FDIDm+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f8:	d101      	bne.n	800a7fe <_ZL12create_chainP5_FDIDm+0x52>
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	e06a      	b.n	800a8d4 <_ZL12create_chainP5_FDIDm+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	695b      	ldr	r3, [r3, #20]
 800a802:	68fa      	ldr	r2, [r7, #12]
 800a804:	429a      	cmp	r2, r3
 800a806:	d201      	bcs.n	800a80c <_ZL12create_chainP5_FDIDm+0x60>
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	e063      	b.n	800a8d4 <_ZL12create_chainP5_FDIDm+0x128>
		scl = clst;
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a810:	69bb      	ldr	r3, [r7, #24]
 800a812:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	3301      	adds	r3, #1
 800a818:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	695b      	ldr	r3, [r3, #20]
 800a81e:	69fa      	ldr	r2, [r7, #28]
 800a820:	429a      	cmp	r2, r3
 800a822:	d307      	bcc.n	800a834 <_ZL12create_chainP5_FDIDm+0x88>
				ncl = 2;
 800a824:	2302      	movs	r3, #2
 800a826:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a828:	69fa      	ldr	r2, [r7, #28]
 800a82a:	69bb      	ldr	r3, [r7, #24]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d901      	bls.n	800a834 <_ZL12create_chainP5_FDIDm+0x88>
 800a830:	2300      	movs	r3, #0
 800a832:	e04f      	b.n	800a8d4 <_ZL12create_chainP5_FDIDm+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a834:	69f9      	ldr	r1, [r7, #28]
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f7ff fdb3 	bl	800a3a2 <_ZL7get_fatP5_FDIDm>
 800a83c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d00e      	beq.n	800a862 <_ZL12create_chainP5_FDIDm+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2b01      	cmp	r3, #1
 800a848:	d003      	beq.n	800a852 <_ZL12create_chainP5_FDIDm+0xa6>
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a850:	d101      	bne.n	800a856 <_ZL12create_chainP5_FDIDm+0xaa>
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	e03e      	b.n	800a8d4 <_ZL12create_chainP5_FDIDm+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a856:	69fa      	ldr	r2, [r7, #28]
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d1da      	bne.n	800a814 <_ZL12create_chainP5_FDIDm+0x68>
 800a85e:	2300      	movs	r3, #0
 800a860:	e038      	b.n	800a8d4 <_ZL12create_chainP5_FDIDm+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a862:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a864:	f04f 32ff 	mov.w	r2, #4294967295
 800a868:	69f9      	ldr	r1, [r7, #28]
 800a86a:	6938      	ldr	r0, [r7, #16]
 800a86c:	f7ff fe53 	bl	800a516 <_ZL7put_fatP5FATFSmm>
 800a870:	4603      	mov	r3, r0
 800a872:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a874:	7dfb      	ldrb	r3, [r7, #23]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d109      	bne.n	800a88e <_ZL12create_chainP5_FDIDm+0xe2>
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d006      	beq.n	800a88e <_ZL12create_chainP5_FDIDm+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a880:	69fa      	ldr	r2, [r7, #28]
 800a882:	6839      	ldr	r1, [r7, #0]
 800a884:	6938      	ldr	r0, [r7, #16]
 800a886:	f7ff fe46 	bl	800a516 <_ZL7put_fatP5FATFSmm>
 800a88a:	4603      	mov	r3, r0
 800a88c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a88e:	7dfb      	ldrb	r3, [r7, #23]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d116      	bne.n	800a8c2 <_ZL12create_chainP5_FDIDm+0x116>
		fs->last_clst = ncl;
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	69fa      	ldr	r2, [r7, #28]
 800a898:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	691a      	ldr	r2, [r3, #16]
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	695b      	ldr	r3, [r3, #20]
 800a8a2:	3b02      	subs	r3, #2
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d804      	bhi.n	800a8b2 <_ZL12create_chainP5_FDIDm+0x106>
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	691b      	ldr	r3, [r3, #16]
 800a8ac:	1e5a      	subs	r2, r3, #1
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	791b      	ldrb	r3, [r3, #4]
 800a8b6:	f043 0301 	orr.w	r3, r3, #1
 800a8ba:	b2da      	uxtb	r2, r3
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	711a      	strb	r2, [r3, #4]
 800a8c0:	e007      	b.n	800a8d2 <_ZL12create_chainP5_FDIDm+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a8c2:	7dfb      	ldrb	r3, [r7, #23]
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d102      	bne.n	800a8ce <_ZL12create_chainP5_FDIDm+0x122>
 800a8c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a8cc:	e000      	b.n	800a8d0 <_ZL12create_chainP5_FDIDm+0x124>
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a8d2:	69fb      	ldr	r3, [r7, #28]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3720      	adds	r7, #32
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <_ZL10clmt_clustP3FILm>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b087      	sub	sp, #28
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f0:	3304      	adds	r3, #4
 800a8f2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	0a5b      	lsrs	r3, r3, #9
 800a8f8:	68fa      	ldr	r2, [r7, #12]
 800a8fa:	8952      	ldrh	r2, [r2, #10]
 800a8fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a900:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	1d1a      	adds	r2, r3, #4
 800a906:	613a      	str	r2, [r7, #16]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d101      	bne.n	800a916 <_ZL10clmt_clustP3FILm+0x3a>
 800a912:	2300      	movs	r3, #0
 800a914:	e010      	b.n	800a938 <_ZL10clmt_clustP3FILm+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a916:	697a      	ldr	r2, [r7, #20]
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d307      	bcc.n	800a92e <_ZL10clmt_clustP3FILm+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a91e:	697a      	ldr	r2, [r7, #20]
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	1ad3      	subs	r3, r2, r3
 800a924:	617b      	str	r3, [r7, #20]
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	3304      	adds	r3, #4
 800a92a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a92c:	e7e9      	b.n	800a902 <_ZL10clmt_clustP3FILm+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a92e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	4413      	add	r3, r2
}
 800a938:	4618      	mov	r0, r3
 800a93a:	371c      	adds	r7, #28
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <_ZL7dir_sdiP3DIRm>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b086      	sub	sp, #24
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a95a:	d204      	bcs.n	800a966 <_ZL7dir_sdiP3DIRm+0x22>
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	f003 031f 	and.w	r3, r3, #31
 800a962:	2b00      	cmp	r3, #0
 800a964:	d001      	beq.n	800a96a <_ZL7dir_sdiP3DIRm+0x26>
		return FR_INT_ERR;
 800a966:	2302      	movs	r3, #2
 800a968:	e063      	b.n	800aa32 <_ZL7dir_sdiP3DIRm+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	683a      	ldr	r2, [r7, #0]
 800a96e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d106      	bne.n	800a98a <_ZL7dir_sdiP3DIRm+0x46>
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	781b      	ldrb	r3, [r3, #0]
 800a980:	2b02      	cmp	r3, #2
 800a982:	d902      	bls.n	800a98a <_ZL7dir_sdiP3DIRm+0x46>
		clst = fs->dirbase;
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a988:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d10c      	bne.n	800a9aa <_ZL7dir_sdiP3DIRm+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	095b      	lsrs	r3, r3, #5
 800a994:	693a      	ldr	r2, [r7, #16]
 800a996:	8912      	ldrh	r2, [r2, #8]
 800a998:	4293      	cmp	r3, r2
 800a99a:	d301      	bcc.n	800a9a0 <_ZL7dir_sdiP3DIRm+0x5c>
 800a99c:	2302      	movs	r3, #2
 800a99e:	e048      	b.n	800aa32 <_ZL7dir_sdiP3DIRm+0xee>
		dp->sect = fs->dirbase;
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	61da      	str	r2, [r3, #28]
 800a9a8:	e029      	b.n	800a9fe <_ZL7dir_sdiP3DIRm+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	895b      	ldrh	r3, [r3, #10]
 800a9ae:	025b      	lsls	r3, r3, #9
 800a9b0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a9b2:	683a      	ldr	r2, [r7, #0]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d31a      	bcc.n	800a9f0 <_ZL7dir_sdiP3DIRm+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6979      	ldr	r1, [r7, #20]
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7ff fcef 	bl	800a3a2 <_ZL7get_fatP5_FDIDm>
 800a9c4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9cc:	d101      	bne.n	800a9d2 <_ZL7dir_sdiP3DIRm+0x8e>
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e02f      	b.n	800aa32 <_ZL7dir_sdiP3DIRm+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d904      	bls.n	800a9e2 <_ZL7dir_sdiP3DIRm+0x9e>
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	695b      	ldr	r3, [r3, #20]
 800a9dc:	697a      	ldr	r2, [r7, #20]
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d301      	bcc.n	800a9e6 <_ZL7dir_sdiP3DIRm+0xa2>
 800a9e2:	2302      	movs	r3, #2
 800a9e4:	e025      	b.n	800aa32 <_ZL7dir_sdiP3DIRm+0xee>
			ofs -= csz;
 800a9e6:	683a      	ldr	r2, [r7, #0]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	1ad3      	subs	r3, r2, r3
 800a9ec:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a9ee:	e7e0      	b.n	800a9b2 <_ZL7dir_sdiP3DIRm+0x6e>
		}
		dp->sect = clust2sect(fs, clst);
 800a9f0:	6979      	ldr	r1, [r7, #20]
 800a9f2:	6938      	ldr	r0, [r7, #16]
 800a9f4:	f7ff fcb6 	bl	800a364 <_ZL10clust2sectP5FATFSm>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	697a      	ldr	r2, [r7, #20]
 800aa02:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	69db      	ldr	r3, [r3, #28]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d101      	bne.n	800aa10 <_ZL7dir_sdiP3DIRm+0xcc>
 800aa0c:	2302      	movs	r3, #2
 800aa0e:	e010      	b.n	800aa32 <_ZL7dir_sdiP3DIRm+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	69da      	ldr	r2, [r3, #28]
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	0a5b      	lsrs	r3, r3, #9
 800aa18:	441a      	add	r2, r3
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa2a:	441a      	add	r2, r3
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3718      	adds	r7, #24
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <_ZL8dir_nextP3DIRi>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b086      	sub	sp, #24
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
 800aa42:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	695b      	ldr	r3, [r3, #20]
 800aa4e:	3320      	adds	r3, #32
 800aa50:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	69db      	ldr	r3, [r3, #28]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d003      	beq.n	800aa62 <_ZL8dir_nextP3DIRi+0x28>
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa60:	d301      	bcc.n	800aa66 <_ZL8dir_nextP3DIRi+0x2c>
 800aa62:	2304      	movs	r3, #4
 800aa64:	e0b5      	b.n	800abd2 <_ZL8dir_nextP3DIRi+0x198>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	f040 80a3 	bne.w	800abb8 <_ZL8dir_nextP3DIRi+0x17e>
		dp->sect++;				/* Next sector */
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	69db      	ldr	r3, [r3, #28]
 800aa76:	1c5a      	adds	r2, r3, #1
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	699b      	ldr	r3, [r3, #24]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d10b      	bne.n	800aa9c <_ZL8dir_nextP3DIRi+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	095b      	lsrs	r3, r3, #5
 800aa88:	68fa      	ldr	r2, [r7, #12]
 800aa8a:	8912      	ldrh	r2, [r2, #8]
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	f0c0 8093 	bcc.w	800abb8 <_ZL8dir_nextP3DIRi+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2200      	movs	r2, #0
 800aa96:	61da      	str	r2, [r3, #28]
 800aa98:	2304      	movs	r3, #4
 800aa9a:	e09a      	b.n	800abd2 <_ZL8dir_nextP3DIRi+0x198>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	0a5b      	lsrs	r3, r3, #9
 800aaa0:	68fa      	ldr	r2, [r7, #12]
 800aaa2:	8952      	ldrh	r2, [r2, #10]
 800aaa4:	3a01      	subs	r2, #1
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	f040 8085 	bne.w	800abb8 <_ZL8dir_nextP3DIRi+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	699b      	ldr	r3, [r3, #24]
 800aab4:	4619      	mov	r1, r3
 800aab6:	4610      	mov	r0, r2
 800aab8:	f7ff fc73 	bl	800a3a2 <_ZL7get_fatP5_FDIDm>
 800aabc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d801      	bhi.n	800aac8 <_ZL8dir_nextP3DIRi+0x8e>
 800aac4:	2302      	movs	r3, #2
 800aac6:	e084      	b.n	800abd2 <_ZL8dir_nextP3DIRi+0x198>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aace:	d101      	bne.n	800aad4 <_ZL8dir_nextP3DIRi+0x9a>
 800aad0:	2301      	movs	r3, #1
 800aad2:	e07e      	b.n	800abd2 <_ZL8dir_nextP3DIRi+0x198>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	695b      	ldr	r3, [r3, #20]
 800aad8:	697a      	ldr	r2, [r7, #20]
 800aada:	429a      	cmp	r2, r3
 800aadc:	d362      	bcc.n	800aba4 <_ZL8dir_nextP3DIRi+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d104      	bne.n	800aaee <_ZL8dir_nextP3DIRi+0xb4>
						dp->sect = 0; return FR_NO_FILE;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	61da      	str	r2, [r3, #28]
 800aaea:	2304      	movs	r3, #4
 800aaec:	e071      	b.n	800abd2 <_ZL8dir_nextP3DIRi+0x198>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	699b      	ldr	r3, [r3, #24]
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	4610      	mov	r0, r2
 800aaf8:	f7ff fe58 	bl	800a7ac <_ZL12create_chainP5_FDIDm>
 800aafc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d101      	bne.n	800ab08 <_ZL8dir_nextP3DIRi+0xce>
 800ab04:	2307      	movs	r3, #7
 800ab06:	e064      	b.n	800abd2 <_ZL8dir_nextP3DIRi+0x198>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d101      	bne.n	800ab12 <_ZL8dir_nextP3DIRi+0xd8>
 800ab0e:	2302      	movs	r3, #2
 800ab10:	e05f      	b.n	800abd2 <_ZL8dir_nextP3DIRi+0x198>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab18:	d101      	bne.n	800ab1e <_ZL8dir_nextP3DIRi+0xe4>
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	e059      	b.n	800abd2 <_ZL8dir_nextP3DIRi+0x198>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	f7ff fb30 	bl	800a184 <_ZL11sync_windowP5FATFS>
 800ab24:	4603      	mov	r3, r0
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	bf14      	ite	ne
 800ab2a:	2301      	movne	r3, #1
 800ab2c:	2300      	moveq	r3, #0
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d001      	beq.n	800ab38 <_ZL8dir_nextP3DIRi+0xfe>
 800ab34:	2301      	movs	r3, #1
 800ab36:	e04c      	b.n	800abd2 <_ZL8dir_nextP3DIRi+0x198>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	3330      	adds	r3, #48	; 0x30
 800ab3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab40:	2100      	movs	r1, #0
 800ab42:	4618      	mov	r0, r3
 800ab44:	f7ff f945 	bl	8009dd2 <_ZL7mem_setPvij>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ab48:	2300      	movs	r3, #0
 800ab4a:	613b      	str	r3, [r7, #16]
 800ab4c:	6979      	ldr	r1, [r7, #20]
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f7ff fc08 	bl	800a364 <_ZL10clust2sectP5FATFSm>
 800ab54:	4602      	mov	r2, r0
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	62da      	str	r2, [r3, #44]	; 0x2c
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	895b      	ldrh	r3, [r3, #10]
 800ab5e:	461a      	mov	r2, r3
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d218      	bcs.n	800ab98 <_ZL8dir_nextP3DIRi+0x15e>
						fs->wflag = 1;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2201      	movs	r2, #1
 800ab6a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ab6c:	68f8      	ldr	r0, [r7, #12]
 800ab6e:	f7ff fb09 	bl	800a184 <_ZL11sync_windowP5FATFS>
 800ab72:	4603      	mov	r3, r0
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	bf14      	ite	ne
 800ab78:	2301      	movne	r3, #1
 800ab7a:	2300      	moveq	r3, #0
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d001      	beq.n	800ab86 <_ZL8dir_nextP3DIRi+0x14c>
 800ab82:	2301      	movs	r3, #1
 800ab84:	e025      	b.n	800abd2 <_ZL8dir_nextP3DIRi+0x198>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	613b      	str	r3, [r7, #16]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab90:	1c5a      	adds	r2, r3, #1
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	62da      	str	r2, [r3, #44]	; 0x2c
 800ab96:	e7e0      	b.n	800ab5a <_ZL8dir_nextP3DIRi+0x120>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	1ad2      	subs	r2, r2, r3
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	697a      	ldr	r2, [r7, #20]
 800aba8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800abaa:	6979      	ldr	r1, [r7, #20]
 800abac:	68f8      	ldr	r0, [r7, #12]
 800abae:	f7ff fbd9 	bl	800a364 <_ZL10clust2sectP5FATFSm>
 800abb2:	4602      	mov	r2, r0
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	68ba      	ldr	r2, [r7, #8]
 800abbc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abca:	441a      	add	r2, r3
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800abd0:	2300      	movs	r3, #0
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3718      	adds	r7, #24
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}

0800abda <_ZL9dir_allocP3DIRj>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800abda:	b580      	push	{r7, lr}
 800abdc:	b086      	sub	sp, #24
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
 800abe2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800abea:	2100      	movs	r1, #0
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f7ff fea9 	bl	800a944 <_ZL7dir_sdiP3DIRm>
 800abf2:	4603      	mov	r3, r0
 800abf4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800abf6:	7dfb      	ldrb	r3, [r7, #23]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d130      	bne.n	800ac5e <_ZL9dir_allocP3DIRj+0x84>
		n = 0;
 800abfc:	2300      	movs	r3, #0
 800abfe:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	69db      	ldr	r3, [r3, #28]
 800ac04:	4619      	mov	r1, r3
 800ac06:	68f8      	ldr	r0, [r7, #12]
 800ac08:	f7ff fb05 	bl	800a216 <_ZL11move_windowP5FATFSm>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ac10:	7dfb      	ldrb	r3, [r7, #23]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d122      	bne.n	800ac5c <_ZL9dir_allocP3DIRj+0x82>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6a1b      	ldr	r3, [r3, #32]
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	2be5      	cmp	r3, #229	; 0xe5
 800ac1e:	d004      	beq.n	800ac2a <_ZL9dir_allocP3DIRj+0x50>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6a1b      	ldr	r3, [r3, #32]
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d10c      	bne.n	800ac44 <_ZL9dir_allocP3DIRj+0x6a>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	613b      	str	r3, [r7, #16]
 800ac30:	693a      	ldr	r2, [r7, #16]
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	bf0c      	ite	eq
 800ac38:	2301      	moveq	r3, #1
 800ac3a:	2300      	movne	r3, #0
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d002      	beq.n	800ac48 <_ZL9dir_allocP3DIRj+0x6e>
 800ac42:	e00c      	b.n	800ac5e <_ZL9dir_allocP3DIRj+0x84>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ac44:	2300      	movs	r3, #0
 800ac46:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ac48:	2101      	movs	r1, #1
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f7ff fef5 	bl	800aa3a <_ZL8dir_nextP3DIRi>
 800ac50:	4603      	mov	r3, r0
 800ac52:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ac54:	7dfb      	ldrb	r3, [r7, #23]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d101      	bne.n	800ac5e <_ZL9dir_allocP3DIRj+0x84>
		do {
 800ac5a:	e7d1      	b.n	800ac00 <_ZL9dir_allocP3DIRj+0x26>
			if (res != FR_OK) break;
 800ac5c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ac5e:	7dfb      	ldrb	r3, [r7, #23]
 800ac60:	2b04      	cmp	r3, #4
 800ac62:	d101      	bne.n	800ac68 <_ZL9dir_allocP3DIRj+0x8e>
 800ac64:	2307      	movs	r3, #7
 800ac66:	75fb      	strb	r3, [r7, #23]
	return res;
 800ac68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3718      	adds	r7, #24
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}

0800ac72 <_ZL8ld_clustP5FATFSPKh>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b084      	sub	sp, #16
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
 800ac7a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	331a      	adds	r3, #26
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7fe fffd 	bl	8009c80 <_ZL7ld_wordPKh>
 800ac86:	4603      	mov	r3, r0
 800ac88:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	2b03      	cmp	r3, #3
 800ac90:	d109      	bne.n	800aca6 <_ZL8ld_clustP5FATFSPKh+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	3314      	adds	r3, #20
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7fe fff2 	bl	8009c80 <_ZL7ld_wordPKh>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	041b      	lsls	r3, r3, #16
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	4313      	orrs	r3, r2
 800aca4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800aca6:	68fb      	ldr	r3, [r7, #12]
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3710      	adds	r7, #16
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <_ZL8st_clustP5FATFSPhm>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	60b9      	str	r1, [r7, #8]
 800acba:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	331a      	adds	r3, #26
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	b292      	uxth	r2, r2
 800acc4:	4611      	mov	r1, r2
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7ff f815 	bl	8009cf6 <_ZL7st_wordPht>
	if (fs->fs_type == FS_FAT32) {
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	2b03      	cmp	r3, #3
 800acd2:	d109      	bne.n	800ace8 <_ZL8st_clustP5FATFSPhm+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	f103 0214 	add.w	r2, r3, #20
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	0c1b      	lsrs	r3, r3, #16
 800acde:	b29b      	uxth	r3, r3
 800ace0:	4619      	mov	r1, r3
 800ace2:	4610      	mov	r0, r2
 800ace4:	f7ff f807 	bl	8009cf6 <_ZL7st_wordPht>
	}
}
 800ace8:	bf00      	nop
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <_ZL8dir_findP3DIR>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b086      	sub	sp, #24
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800acfe:	2100      	movs	r1, #0
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f7ff fe1f 	bl	800a944 <_ZL7dir_sdiP3DIRm>
 800ad06:	4603      	mov	r3, r0
 800ad08:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ad0a:	7dfb      	ldrb	r3, [r7, #23]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d001      	beq.n	800ad14 <_ZL8dir_findP3DIR+0x24>
 800ad10:	7dfb      	ldrb	r3, [r7, #23]
 800ad12:	e043      	b.n	800ad9c <_ZL8dir_findP3DIR+0xac>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	69db      	ldr	r3, [r3, #28]
 800ad18:	4619      	mov	r1, r3
 800ad1a:	6938      	ldr	r0, [r7, #16]
 800ad1c:	f7ff fa7b 	bl	800a216 <_ZL11move_windowP5FATFSm>
 800ad20:	4603      	mov	r3, r0
 800ad22:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ad24:	7dfb      	ldrb	r3, [r7, #23]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d134      	bne.n	800ad94 <_ZL8dir_findP3DIR+0xa4>
		c = dp->dir[DIR_Name];
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6a1b      	ldr	r3, [r3, #32]
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ad32:	7bfb      	ldrb	r3, [r7, #15]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d102      	bne.n	800ad3e <_ZL8dir_findP3DIR+0x4e>
 800ad38:	2304      	movs	r3, #4
 800ad3a:	75fb      	strb	r3, [r7, #23]
 800ad3c:	e02d      	b.n	800ad9a <_ZL8dir_findP3DIR+0xaa>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6a1b      	ldr	r3, [r3, #32]
 800ad42:	330b      	adds	r3, #11
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad4a:	b2da      	uxtb	r2, r3
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6a1b      	ldr	r3, [r3, #32]
 800ad54:	330b      	adds	r3, #11
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	f003 0308 	and.w	r3, r3, #8
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d10c      	bne.n	800ad7a <_ZL8dir_findP3DIR+0x8a>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6a18      	ldr	r0, [r3, #32]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	3324      	adds	r3, #36	; 0x24
 800ad68:	220b      	movs	r2, #11
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	f7ff f851 	bl	8009e12 <_ZL7mem_cmpPKvS0_j>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d101      	bne.n	800ad7a <_ZL8dir_findP3DIR+0x8a>
 800ad76:	2301      	movs	r3, #1
 800ad78:	e000      	b.n	800ad7c <_ZL8dir_findP3DIR+0x8c>
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d10b      	bne.n	800ad98 <_ZL8dir_findP3DIR+0xa8>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ad80:	2100      	movs	r1, #0
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f7ff fe59 	bl	800aa3a <_ZL8dir_nextP3DIRi>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ad8c:	7dfb      	ldrb	r3, [r7, #23]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d103      	bne.n	800ad9a <_ZL8dir_findP3DIR+0xaa>
	do {
 800ad92:	e7bf      	b.n	800ad14 <_ZL8dir_findP3DIR+0x24>
		if (res != FR_OK) break;
 800ad94:	bf00      	nop
 800ad96:	e000      	b.n	800ad9a <_ZL8dir_findP3DIR+0xaa>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ad98:	bf00      	nop

	return res;
 800ad9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3718      	adds	r7, #24
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <_ZL12dir_registerP3DIR>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800adb2:	2101      	movs	r1, #1
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f7ff ff10 	bl	800abda <_ZL9dir_allocP3DIRj>
 800adba:	4603      	mov	r3, r0
 800adbc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800adbe:	7bfb      	ldrb	r3, [r7, #15]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d11c      	bne.n	800adfe <_ZL12dir_registerP3DIR+0x5a>
		res = move_window(fs, dp->sect);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	69db      	ldr	r3, [r3, #28]
 800adc8:	4619      	mov	r1, r3
 800adca:	68b8      	ldr	r0, [r7, #8]
 800adcc:	f7ff fa23 	bl	800a216 <_ZL11move_windowP5FATFSm>
 800add0:	4603      	mov	r3, r0
 800add2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800add4:	7bfb      	ldrb	r3, [r7, #15]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d111      	bne.n	800adfe <_ZL12dir_registerP3DIR+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a1b      	ldr	r3, [r3, #32]
 800adde:	2220      	movs	r2, #32
 800ade0:	2100      	movs	r1, #0
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7fe fff5 	bl	8009dd2 <_ZL7mem_setPvij>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6a18      	ldr	r0, [r3, #32]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	3324      	adds	r3, #36	; 0x24
 800adf0:	220b      	movs	r2, #11
 800adf2:	4619      	mov	r1, r3
 800adf4:	f7fe ffc6 	bl	8009d84 <_ZL7mem_cpyPvPKvj>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	2201      	movs	r2, #1
 800adfc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800adfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3710      	adds	r7, #16
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <_ZL11create_nameP3DIRPPKc>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b088      	sub	sp, #32
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	613b      	str	r3, [r7, #16]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	3324      	adds	r3, #36	; 0x24
 800ae1c:	60fb      	str	r3, [r7, #12]
	mem_set(sfn, ' ', 11);
 800ae1e:	220b      	movs	r2, #11
 800ae20:	2120      	movs	r1, #32
 800ae22:	68f8      	ldr	r0, [r7, #12]
 800ae24:	f7fe ffd5 	bl	8009dd2 <_ZL7mem_setPvij>
	si = i = 0; ni = 8;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	617b      	str	r3, [r7, #20]
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	61bb      	str	r3, [r7, #24]
 800ae30:	2308      	movs	r3, #8
 800ae32:	61fb      	str	r3, [r7, #28]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ae34:	69bb      	ldr	r3, [r7, #24]
 800ae36:	1c5a      	adds	r2, r3, #1
 800ae38:	61ba      	str	r2, [r7, #24]
 800ae3a:	693a      	ldr	r2, [r7, #16]
 800ae3c:	4413      	add	r3, r2
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	72fb      	strb	r3, [r7, #11]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ae42:	7afb      	ldrb	r3, [r7, #11]
 800ae44:	2b20      	cmp	r3, #32
 800ae46:	d953      	bls.n	800aef0 <_ZL11create_nameP3DIRPPKc+0xe8>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ae48:	7afb      	ldrb	r3, [r7, #11]
 800ae4a:	2b2f      	cmp	r3, #47	; 0x2f
 800ae4c:	d002      	beq.n	800ae54 <_ZL11create_nameP3DIRPPKc+0x4c>
 800ae4e:	7afb      	ldrb	r3, [r7, #11]
 800ae50:	2b5c      	cmp	r3, #92	; 0x5c
 800ae52:	d10f      	bne.n	800ae74 <_ZL11create_nameP3DIRPPKc+0x6c>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ae54:	693a      	ldr	r2, [r7, #16]
 800ae56:	69bb      	ldr	r3, [r7, #24]
 800ae58:	4413      	add	r3, r2
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	2b2f      	cmp	r3, #47	; 0x2f
 800ae5e:	d005      	beq.n	800ae6c <_ZL11create_nameP3DIRPPKc+0x64>
 800ae60:	693a      	ldr	r2, [r7, #16]
 800ae62:	69bb      	ldr	r3, [r7, #24]
 800ae64:	4413      	add	r3, r2
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	2b5c      	cmp	r3, #92	; 0x5c
 800ae6a:	d143      	bne.n	800aef4 <_ZL11create_nameP3DIRPPKc+0xec>
 800ae6c:	69bb      	ldr	r3, [r7, #24]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	61bb      	str	r3, [r7, #24]
 800ae72:	e7ef      	b.n	800ae54 <_ZL11create_nameP3DIRPPKc+0x4c>
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ae74:	7afb      	ldrb	r3, [r7, #11]
 800ae76:	2b2e      	cmp	r3, #46	; 0x2e
 800ae78:	d003      	beq.n	800ae82 <_ZL11create_nameP3DIRPPKc+0x7a>
 800ae7a:	697a      	ldr	r2, [r7, #20]
 800ae7c:	69fb      	ldr	r3, [r7, #28]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d30c      	bcc.n	800ae9c <_ZL11create_nameP3DIRPPKc+0x94>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ae82:	69fb      	ldr	r3, [r7, #28]
 800ae84:	2b0b      	cmp	r3, #11
 800ae86:	d002      	beq.n	800ae8e <_ZL11create_nameP3DIRPPKc+0x86>
 800ae88:	7afb      	ldrb	r3, [r7, #11]
 800ae8a:	2b2e      	cmp	r3, #46	; 0x2e
 800ae8c:	d001      	beq.n	800ae92 <_ZL11create_nameP3DIRPPKc+0x8a>
 800ae8e:	2306      	movs	r3, #6
 800ae90:	e04c      	b.n	800af2c <_ZL11create_nameP3DIRPPKc+0x124>
			i = 8; ni = 11;				/* Goto extension */
 800ae92:	2308      	movs	r3, #8
 800ae94:	617b      	str	r3, [r7, #20]
 800ae96:	230b      	movs	r3, #11
 800ae98:	61fb      	str	r3, [r7, #28]
			continue;
 800ae9a:	e028      	b.n	800aeee <_ZL11create_nameP3DIRPPKc+0xe6>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ae9c:	7afb      	ldrb	r3, [r7, #11]
 800ae9e:	b25b      	sxtb	r3, r3
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	da04      	bge.n	800aeae <_ZL11create_nameP3DIRPPKc+0xa6>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800aea4:	7afb      	ldrb	r3, [r7, #11]
 800aea6:	3b80      	subs	r3, #128	; 0x80
 800aea8:	4a22      	ldr	r2, [pc, #136]	; (800af34 <_ZL11create_nameP3DIRPPKc+0x12c>)
 800aeaa:	5cd3      	ldrb	r3, [r2, r3]
 800aeac:	72fb      	strb	r3, [r7, #11]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800aeae:	7afb      	ldrb	r3, [r7, #11]
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	4821      	ldr	r0, [pc, #132]	; (800af38 <_ZL11create_nameP3DIRPPKc+0x130>)
 800aeb4:	f7fe ffda 	bl	8009e6c <_ZL7chk_chrPKci>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	bf14      	ite	ne
 800aebe:	2301      	movne	r3, #1
 800aec0:	2300      	moveq	r3, #0
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d001      	beq.n	800aecc <_ZL11create_nameP3DIRPPKc+0xc4>
 800aec8:	2306      	movs	r3, #6
 800aeca:	e02f      	b.n	800af2c <_ZL11create_nameP3DIRPPKc+0x124>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800aecc:	7afb      	ldrb	r3, [r7, #11]
 800aece:	2b60      	cmp	r3, #96	; 0x60
 800aed0:	d906      	bls.n	800aee0 <_ZL11create_nameP3DIRPPKc+0xd8>
 800aed2:	7afb      	ldrb	r3, [r7, #11]
 800aed4:	2b7a      	cmp	r3, #122	; 0x7a
 800aed6:	d803      	bhi.n	800aee0 <_ZL11create_nameP3DIRPPKc+0xd8>
 800aed8:	7afb      	ldrb	r3, [r7, #11]
 800aeda:	3b20      	subs	r3, #32
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	72fb      	strb	r3, [r7, #11]
			sfn[i++] = c;
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	1c5a      	adds	r2, r3, #1
 800aee4:	617a      	str	r2, [r7, #20]
 800aee6:	68fa      	ldr	r2, [r7, #12]
 800aee8:	4413      	add	r3, r2
 800aeea:	7afa      	ldrb	r2, [r7, #11]
 800aeec:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800aeee:	e7a1      	b.n	800ae34 <_ZL11create_nameP3DIRPPKc+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800aef0:	bf00      	nop
 800aef2:	e000      	b.n	800aef6 <_ZL11create_nameP3DIRPPKc+0xee>
			break;
 800aef4:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800aef6:	693a      	ldr	r2, [r7, #16]
 800aef8:	69bb      	ldr	r3, [r7, #24]
 800aefa:	441a      	add	r2, r3
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d101      	bne.n	800af0a <_ZL11create_nameP3DIRPPKc+0x102>
 800af06:	2306      	movs	r3, #6
 800af08:	e010      	b.n	800af2c <_ZL11create_nameP3DIRPPKc+0x124>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	2be5      	cmp	r3, #229	; 0xe5
 800af10:	d102      	bne.n	800af18 <_ZL11create_nameP3DIRPPKc+0x110>
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2205      	movs	r2, #5
 800af16:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800af18:	7afb      	ldrb	r3, [r7, #11]
 800af1a:	2b20      	cmp	r3, #32
 800af1c:	d801      	bhi.n	800af22 <_ZL11create_nameP3DIRPPKc+0x11a>
 800af1e:	2204      	movs	r2, #4
 800af20:	e000      	b.n	800af24 <_ZL11create_nameP3DIRPPKc+0x11c>
 800af22:	2200      	movs	r2, #0
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	330b      	adds	r3, #11
 800af28:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800af2a:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3720      	adds	r7, #32
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}
 800af34:	0800cf3c 	.word	0x0800cf3c
 800af38:	0800cec8 	.word	0x0800cec8

0800af3c <_ZL11follow_pathP3DIRPKc>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b086      	sub	sp, #24
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	2b2f      	cmp	r3, #47	; 0x2f
 800af56:	d003      	beq.n	800af60 <_ZL11follow_pathP3DIRPKc+0x24>
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	2b5c      	cmp	r3, #92	; 0x5c
 800af5e:	d103      	bne.n	800af68 <_ZL11follow_pathP3DIRPKc+0x2c>
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	3301      	adds	r3, #1
 800af64:	603b      	str	r3, [r7, #0]
 800af66:	e7f3      	b.n	800af50 <_ZL11follow_pathP3DIRPKc+0x14>
		obj->sclust = 0;					/* Start from root directory */
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	2200      	movs	r2, #0
 800af6c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	2b1f      	cmp	r3, #31
 800af74:	d80a      	bhi.n	800af8c <_ZL11follow_pathP3DIRPKc+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2280      	movs	r2, #128	; 0x80
 800af7a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800af7e:	2100      	movs	r1, #0
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f7ff fcdf 	bl	800a944 <_ZL7dir_sdiP3DIRm>
 800af86:	4603      	mov	r3, r0
 800af88:	75fb      	strb	r3, [r7, #23]
 800af8a:	e043      	b.n	800b014 <_ZL11follow_pathP3DIRPKc+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800af8c:	463b      	mov	r3, r7
 800af8e:	4619      	mov	r1, r3
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f7ff ff39 	bl	800ae08 <_ZL11create_nameP3DIRPPKc>
 800af96:	4603      	mov	r3, r0
 800af98:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800af9a:	7dfb      	ldrb	r3, [r7, #23]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d134      	bne.n	800b00a <_ZL11follow_pathP3DIRPKc+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f7ff fea5 	bl	800acf0 <_ZL8dir_findP3DIR>
 800afa6:	4603      	mov	r3, r0
 800afa8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800afb0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800afb2:	7dfb      	ldrb	r3, [r7, #23]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d00a      	beq.n	800afce <_ZL11follow_pathP3DIRPKc+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800afb8:	7dfb      	ldrb	r3, [r7, #23]
 800afba:	2b04      	cmp	r3, #4
 800afbc:	d127      	bne.n	800b00e <_ZL11follow_pathP3DIRPKc+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800afbe:	7afb      	ldrb	r3, [r7, #11]
 800afc0:	f003 0304 	and.w	r3, r3, #4
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d122      	bne.n	800b00e <_ZL11follow_pathP3DIRPKc+0xd2>
 800afc8:	2305      	movs	r3, #5
 800afca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800afcc:	e01f      	b.n	800b00e <_ZL11follow_pathP3DIRPKc+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800afce:	7afb      	ldrb	r3, [r7, #11]
 800afd0:	f003 0304 	and.w	r3, r3, #4
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d11c      	bne.n	800b012 <_ZL11follow_pathP3DIRPKc+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	799b      	ldrb	r3, [r3, #6]
 800afdc:	f003 0310 	and.w	r3, r3, #16
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d102      	bne.n	800afea <_ZL11follow_pathP3DIRPKc+0xae>
				res = FR_NO_PATH; break;
 800afe4:	2305      	movs	r3, #5
 800afe6:	75fb      	strb	r3, [r7, #23]
 800afe8:	e014      	b.n	800b014 <_ZL11follow_pathP3DIRPKc+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	695b      	ldr	r3, [r3, #20]
 800aff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aff8:	4413      	add	r3, r2
 800affa:	4619      	mov	r1, r3
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f7ff fe38 	bl	800ac72 <_ZL8ld_clustP5FATFSPKh>
 800b002:	4602      	mov	r2, r0
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b008:	e7c0      	b.n	800af8c <_ZL11follow_pathP3DIRPKc+0x50>
			if (res != FR_OK) break;
 800b00a:	bf00      	nop
 800b00c:	e002      	b.n	800b014 <_ZL11follow_pathP3DIRPKc+0xd8>
				break;
 800b00e:	bf00      	nop
 800b010:	e000      	b.n	800b014 <_ZL11follow_pathP3DIRPKc+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b012:	bf00      	nop
			}
		}
	}

	return res;
 800b014:	7dfb      	ldrb	r3, [r7, #23]
}
 800b016:	4618      	mov	r0, r3
 800b018:	3718      	adds	r7, #24
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}

0800b01e <_ZL12get_ldnumberPPKc>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b01e:	b480      	push	{r7}
 800b020:	b087      	sub	sp, #28
 800b022:	af00      	add	r7, sp, #0
 800b024:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b026:	f04f 33ff 	mov.w	r3, #4294967295
 800b02a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d031      	beq.n	800b098 <_ZL12get_ldnumberPPKc+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	617b      	str	r3, [r7, #20]
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	2b20      	cmp	r3, #32
 800b040:	d907      	bls.n	800b052 <_ZL12get_ldnumberPPKc+0x34>
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	2b3a      	cmp	r3, #58	; 0x3a
 800b048:	d003      	beq.n	800b052 <_ZL12get_ldnumberPPKc+0x34>
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	3301      	adds	r3, #1
 800b04e:	617b      	str	r3, [r7, #20]
 800b050:	e7f3      	b.n	800b03a <_ZL12get_ldnumberPPKc+0x1c>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	2b3a      	cmp	r3, #58	; 0x3a
 800b058:	d11c      	bne.n	800b094 <_ZL12get_ldnumberPPKc+0x76>
			tp = *path;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	1c5a      	adds	r2, r3, #1
 800b064:	60fa      	str	r2, [r7, #12]
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	3b30      	subs	r3, #48	; 0x30
 800b06a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	2b09      	cmp	r3, #9
 800b070:	d80e      	bhi.n	800b090 <_ZL12get_ldnumberPPKc+0x72>
 800b072:	68fa      	ldr	r2, [r7, #12]
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	429a      	cmp	r2, r3
 800b078:	d10a      	bne.n	800b090 <_ZL12get_ldnumberPPKc+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d107      	bne.n	800b090 <_ZL12get_ldnumberPPKc+0x72>
					vol = (int)i;
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	3301      	adds	r3, #1
 800b088:	617b      	str	r3, [r7, #20]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	697a      	ldr	r2, [r7, #20]
 800b08e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	e002      	b.n	800b09a <_ZL12get_ldnumberPPKc+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b094:	2300      	movs	r3, #0
 800b096:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b098:	693b      	ldr	r3, [r7, #16]
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	371c      	adds	r7, #28
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr
	...

0800b0a8 <_ZL8check_fsP5FATFSm>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	70da      	strb	r2, [r3, #3]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b0be:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b0c0:	6839      	ldr	r1, [r7, #0]
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f7ff f8a7 	bl	800a216 <_ZL11move_windowP5FATFSm>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	bf14      	ite	ne
 800b0ce:	2301      	movne	r3, #1
 800b0d0:	2300      	moveq	r3, #0
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d001      	beq.n	800b0dc <_ZL8check_fsP5FATFSm+0x34>
 800b0d8:	2304      	movs	r3, #4
 800b0da:	e047      	b.n	800b16c <_ZL8check_fsP5FATFSm+0xc4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	3330      	adds	r3, #48	; 0x30
 800b0e0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f7fe fdcb 	bl	8009c80 <_ZL7ld_wordPKh>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	bf14      	ite	ne
 800b0f6:	2301      	movne	r3, #1
 800b0f8:	2300      	moveq	r3, #0
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d001      	beq.n	800b104 <_ZL8check_fsP5FATFSm+0x5c>
 800b100:	2303      	movs	r3, #3
 800b102:	e033      	b.n	800b16c <_ZL8check_fsP5FATFSm+0xc4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b10a:	2be9      	cmp	r3, #233	; 0xe9
 800b10c:	d009      	beq.n	800b122 <_ZL8check_fsP5FATFSm+0x7a>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b114:	2beb      	cmp	r3, #235	; 0xeb
 800b116:	d128      	bne.n	800b16a <_ZL8check_fsP5FATFSm+0xc2>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b11e:	2b90      	cmp	r3, #144	; 0x90
 800b120:	d123      	bne.n	800b16a <_ZL8check_fsP5FATFSm+0xc2>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	3330      	adds	r3, #48	; 0x30
 800b126:	3336      	adds	r3, #54	; 0x36
 800b128:	4618      	mov	r0, r3
 800b12a:	f7fe fdc1 	bl	8009cb0 <_ZL8ld_dwordPKh>
 800b12e:	4603      	mov	r3, r0
 800b130:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b134:	4a0f      	ldr	r2, [pc, #60]	; (800b174 <_ZL8check_fsP5FATFSm+0xcc>)
 800b136:	4293      	cmp	r3, r2
 800b138:	bf0c      	ite	eq
 800b13a:	2301      	moveq	r3, #1
 800b13c:	2300      	movne	r3, #0
 800b13e:	b2db      	uxtb	r3, r3
 800b140:	2b00      	cmp	r3, #0
 800b142:	d001      	beq.n	800b148 <_ZL8check_fsP5FATFSm+0xa0>
 800b144:	2300      	movs	r3, #0
 800b146:	e011      	b.n	800b16c <_ZL8check_fsP5FATFSm+0xc4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	3330      	adds	r3, #48	; 0x30
 800b14c:	3352      	adds	r3, #82	; 0x52
 800b14e:	4618      	mov	r0, r3
 800b150:	f7fe fdae 	bl	8009cb0 <_ZL8ld_dwordPKh>
 800b154:	4602      	mov	r2, r0
 800b156:	4b08      	ldr	r3, [pc, #32]	; (800b178 <_ZL8check_fsP5FATFSm+0xd0>)
 800b158:	429a      	cmp	r2, r3
 800b15a:	bf0c      	ite	eq
 800b15c:	2301      	moveq	r3, #1
 800b15e:	2300      	movne	r3, #0
 800b160:	b2db      	uxtb	r3, r3
 800b162:	2b00      	cmp	r3, #0
 800b164:	d001      	beq.n	800b16a <_ZL8check_fsP5FATFSm+0xc2>
 800b166:	2300      	movs	r3, #0
 800b168:	e000      	b.n	800b16c <_ZL8check_fsP5FATFSm+0xc4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b16a:	2302      	movs	r3, #2
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3708      	adds	r7, #8
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}
 800b174:	00544146 	.word	0x00544146
 800b178:	33544146 	.word	0x33544146

0800b17c <_ZL11find_volumePPKcPP5FATFSh>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b096      	sub	sp, #88	; 0x58
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	4613      	mov	r3, r2
 800b188:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	2200      	movs	r2, #0
 800b18e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b190:	68f8      	ldr	r0, [r7, #12]
 800b192:	f7ff ff44 	bl	800b01e <_ZL12get_ldnumberPPKc>
 800b196:	4603      	mov	r3, r0
 800b198:	627b      	str	r3, [r7, #36]	; 0x24
	if (vol < 0) return FR_INVALID_DRIVE;
 800b19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	da01      	bge.n	800b1a4 <_ZL11find_volumePPKcPP5FATFSh+0x28>
 800b1a0:	230b      	movs	r3, #11
 800b1a2:	e246      	b.n	800b632 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a6:	4aac      	ldr	r2, [pc, #688]	; (800b458 <_ZL11find_volumePPKcPP5FATFSh+0x2dc>)
 800b1a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b1ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d101      	bne.n	800b1b8 <_ZL11find_volumePPKcPP5FATFSh+0x3c>
 800b1b4:	230c      	movs	r3, #12
 800b1b6:	e23c      	b.n	800b632 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b1bc:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b1be:	79fb      	ldrb	r3, [r7, #7]
 800b1c0:	f023 0301 	bic.w	r3, r3, #1
 800b1c4:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b1c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d01a      	beq.n	800b204 <_ZL11find_volumePPKcPP5FATFSh+0x88>
		stat = disk_status(fs->drv);
 800b1ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1d0:	785b      	ldrb	r3, [r3, #1]
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7fe fcb6 	bl	8009b44 <disk_status>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b1de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b1e2:	f003 0301 	and.w	r3, r3, #1
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d10c      	bne.n	800b204 <_ZL11find_volumePPKcPP5FATFSh+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b1ea:	79fb      	ldrb	r3, [r7, #7]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d007      	beq.n	800b200 <_ZL11find_volumePPKcPP5FATFSh+0x84>
 800b1f0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b1f4:	f003 0304 	and.w	r3, r3, #4
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d001      	beq.n	800b200 <_ZL11find_volumePPKcPP5FATFSh+0x84>
				return FR_WRITE_PROTECTED;
 800b1fc:	230a      	movs	r3, #10
 800b1fe:	e218      	b.n	800b632 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
			}
			return FR_OK;				/* The file system object is valid */
 800b200:	2300      	movs	r3, #0
 800b202:	e216      	b.n	800b632 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b206:	2200      	movs	r2, #0
 800b208:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20c:	b2da      	uxtb	r2, r3
 800b20e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b210:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b214:	785b      	ldrb	r3, [r3, #1]
 800b216:	4618      	mov	r0, r3
 800b218:	f7fe fcae 	bl	8009b78 <disk_initialize>
 800b21c:	4603      	mov	r3, r0
 800b21e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b222:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b226:	f003 0301 	and.w	r3, r3, #1
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d001      	beq.n	800b232 <_ZL11find_volumePPKcPP5FATFSh+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b22e:	2303      	movs	r3, #3
 800b230:	e1ff      	b.n	800b632 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b232:	79fb      	ldrb	r3, [r7, #7]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d007      	beq.n	800b248 <_ZL11find_volumePPKcPP5FATFSh+0xcc>
 800b238:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b23c:	f003 0304 	and.w	r3, r3, #4
 800b240:	2b00      	cmp	r3, #0
 800b242:	d001      	beq.n	800b248 <_ZL11find_volumePPKcPP5FATFSh+0xcc>
		return FR_WRITE_PROTECTED;
 800b244:	230a      	movs	r3, #10
 800b246:	e1f4      	b.n	800b632 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b248:	2300      	movs	r3, #0
 800b24a:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b24c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b24e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b250:	f7ff ff2a 	bl	800b0a8 <_ZL8check_fsP5FATFSm>
 800b254:	4603      	mov	r3, r0
 800b256:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b25a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b25e:	2b02      	cmp	r3, #2
 800b260:	d151      	bne.n	800b306 <_ZL11find_volumePPKcPP5FATFSh+0x18a>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b262:	2300      	movs	r3, #0
 800b264:	643b      	str	r3, [r7, #64]	; 0x40
 800b266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b268:	2b03      	cmp	r3, #3
 800b26a:	d820      	bhi.n	800b2ae <_ZL11find_volumePPKcPP5FATFSh+0x132>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b26c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b26e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b274:	011b      	lsls	r3, r3, #4
 800b276:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b27a:	4413      	add	r3, r2
 800b27c:	637b      	str	r3, [r7, #52]	; 0x34
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b27e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b280:	3304      	adds	r3, #4
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d006      	beq.n	800b296 <_ZL11find_volumePPKcPP5FATFSh+0x11a>
 800b288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b28a:	3308      	adds	r3, #8
 800b28c:	4618      	mov	r0, r3
 800b28e:	f7fe fd0f 	bl	8009cb0 <_ZL8ld_dwordPKh>
 800b292:	4602      	mov	r2, r0
 800b294:	e000      	b.n	800b298 <_ZL11find_volumePPKcPP5FATFSh+0x11c>
 800b296:	2200      	movs	r2, #0
 800b298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b29a:	009b      	lsls	r3, r3, #2
 800b29c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b2a0:	440b      	add	r3, r1
 800b2a2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b2a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	643b      	str	r3, [r7, #64]	; 0x40
 800b2ac:	e7db      	b.n	800b266 <_ZL11find_volumePPKcPP5FATFSh+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b2b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d002      	beq.n	800b2be <_ZL11find_volumePPKcPP5FATFSh+0x142>
 800b2b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2ba:	3b01      	subs	r3, #1
 800b2bc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b2be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2c0:	009b      	lsls	r3, r3, #2
 800b2c2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b2c6:	4413      	add	r3, r2
 800b2c8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b2cc:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b2ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d005      	beq.n	800b2e0 <_ZL11find_volumePPKcPP5FATFSh+0x164>
 800b2d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b2d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b2d8:	f7ff fee6 	bl	800b0a8 <_ZL8check_fsP5FATFSm>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	e000      	b.n	800b2e2 <_ZL11find_volumePPKcPP5FATFSh+0x166>
 800b2e0:	2303      	movs	r3, #3
 800b2e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b2e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d907      	bls.n	800b2fe <_ZL11find_volumePPKcPP5FATFSh+0x182>
 800b2ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	643b      	str	r3, [r7, #64]	; 0x40
 800b2f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2f6:	2b03      	cmp	r3, #3
 800b2f8:	d801      	bhi.n	800b2fe <_ZL11find_volumePPKcPP5FATFSh+0x182>
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	e000      	b.n	800b300 <_ZL11find_volumePPKcPP5FATFSh+0x184>
 800b2fe:	2300      	movs	r3, #0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d000      	beq.n	800b306 <_ZL11find_volumePPKcPP5FATFSh+0x18a>
		do {							/* Find an FAT volume */
 800b304:	e7db      	b.n	800b2be <_ZL11find_volumePPKcPP5FATFSh+0x142>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b306:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b30a:	2b04      	cmp	r3, #4
 800b30c:	d101      	bne.n	800b312 <_ZL11find_volumePPKcPP5FATFSh+0x196>
 800b30e:	2301      	movs	r3, #1
 800b310:	e18f      	b.n	800b632 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b312:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b316:	2b01      	cmp	r3, #1
 800b318:	d901      	bls.n	800b31e <_ZL11find_volumePPKcPP5FATFSh+0x1a2>
 800b31a:	230d      	movs	r3, #13
 800b31c:	e189      	b.n	800b632 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b31e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b320:	3330      	adds	r3, #48	; 0x30
 800b322:	330b      	adds	r3, #11
 800b324:	4618      	mov	r0, r3
 800b326:	f7fe fcab 	bl	8009c80 <_ZL7ld_wordPKh>
 800b32a:	4603      	mov	r3, r0
 800b32c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b330:	bf14      	ite	ne
 800b332:	2301      	movne	r3, #1
 800b334:	2300      	moveq	r3, #0
 800b336:	b2db      	uxtb	r3, r3
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d001      	beq.n	800b340 <_ZL11find_volumePPKcPP5FATFSh+0x1c4>
 800b33c:	230d      	movs	r3, #13
 800b33e:	e178      	b.n	800b632 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b342:	3330      	adds	r3, #48	; 0x30
 800b344:	3316      	adds	r3, #22
 800b346:	4618      	mov	r0, r3
 800b348:	f7fe fc9a 	bl	8009c80 <_ZL7ld_wordPKh>
 800b34c:	4603      	mov	r3, r0
 800b34e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b352:	2b00      	cmp	r3, #0
 800b354:	d106      	bne.n	800b364 <_ZL11find_volumePPKcPP5FATFSh+0x1e8>
 800b356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b358:	3330      	adds	r3, #48	; 0x30
 800b35a:	3324      	adds	r3, #36	; 0x24
 800b35c:	4618      	mov	r0, r3
 800b35e:	f7fe fca7 	bl	8009cb0 <_ZL8ld_dwordPKh>
 800b362:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b366:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b368:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b36a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b36c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b372:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b376:	789b      	ldrb	r3, [r3, #2]
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d005      	beq.n	800b388 <_ZL11find_volumePPKcPP5FATFSh+0x20c>
 800b37c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b37e:	789b      	ldrb	r3, [r3, #2]
 800b380:	2b02      	cmp	r3, #2
 800b382:	d001      	beq.n	800b388 <_ZL11find_volumePPKcPP5FATFSh+0x20c>
 800b384:	230d      	movs	r3, #13
 800b386:	e154      	b.n	800b632 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b38a:	789b      	ldrb	r3, [r3, #2]
 800b38c:	461a      	mov	r2, r3
 800b38e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b390:	fb02 f303 	mul.w	r3, r2, r3
 800b394:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b39c:	b29a      	uxth	r2, r3
 800b39e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3a0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b3a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3a4:	895b      	ldrh	r3, [r3, #10]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d008      	beq.n	800b3bc <_ZL11find_volumePPKcPP5FATFSh+0x240>
 800b3aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3ac:	895b      	ldrh	r3, [r3, #10]
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3b2:	895b      	ldrh	r3, [r3, #10]
 800b3b4:	3b01      	subs	r3, #1
 800b3b6:	4013      	ands	r3, r2
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d001      	beq.n	800b3c0 <_ZL11find_volumePPKcPP5FATFSh+0x244>
 800b3bc:	230d      	movs	r3, #13
 800b3be:	e138      	b.n	800b632 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b3c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3c2:	3330      	adds	r3, #48	; 0x30
 800b3c4:	3311      	adds	r3, #17
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f7fe fc5a 	bl	8009c80 <_ZL7ld_wordPKh>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3d2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b3d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3d6:	891b      	ldrh	r3, [r3, #8]
 800b3d8:	f003 030f 	and.w	r3, r3, #15
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d001      	beq.n	800b3e4 <_ZL11find_volumePPKcPP5FATFSh+0x268>
 800b3e0:	230d      	movs	r3, #13
 800b3e2:	e126      	b.n	800b632 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b3e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3e6:	3330      	adds	r3, #48	; 0x30
 800b3e8:	3313      	adds	r3, #19
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7fe fc48 	bl	8009c80 <_ZL7ld_wordPKh>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b3f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d106      	bne.n	800b408 <_ZL11find_volumePPKcPP5FATFSh+0x28c>
 800b3fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3fc:	3330      	adds	r3, #48	; 0x30
 800b3fe:	3320      	adds	r3, #32
 800b400:	4618      	mov	r0, r3
 800b402:	f7fe fc55 	bl	8009cb0 <_ZL8ld_dwordPKh>
 800b406:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b40a:	3330      	adds	r3, #48	; 0x30
 800b40c:	330e      	adds	r3, #14
 800b40e:	4618      	mov	r0, r3
 800b410:	f7fe fc36 	bl	8009c80 <_ZL7ld_wordPKh>
 800b414:	4603      	mov	r3, r0
 800b416:	867b      	strh	r3, [r7, #50]	; 0x32
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b418:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d101      	bne.n	800b422 <_ZL11find_volumePPKcPP5FATFSh+0x2a6>
 800b41e:	230d      	movs	r3, #13
 800b420:	e107      	b.n	800b632 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b422:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800b424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b426:	441a      	add	r2, r3
 800b428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b42a:	891b      	ldrh	r3, [r3, #8]
 800b42c:	091b      	lsrs	r3, r3, #4
 800b42e:	4413      	add	r3, r2
 800b430:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b432:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b436:	429a      	cmp	r2, r3
 800b438:	d201      	bcs.n	800b43e <_ZL11find_volumePPKcPP5FATFSh+0x2c2>
 800b43a:	230d      	movs	r3, #13
 800b43c:	e0f9      	b.n	800b632 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b43e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b442:	1ad3      	subs	r3, r2, r3
 800b444:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b446:	8952      	ldrh	r2, [r2, #10]
 800b448:	fbb3 f3f2 	udiv	r3, r3, r2
 800b44c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b450:	2b00      	cmp	r3, #0
 800b452:	d103      	bne.n	800b45c <_ZL11find_volumePPKcPP5FATFSh+0x2e0>
 800b454:	230d      	movs	r3, #13
 800b456:	e0ec      	b.n	800b632 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
 800b458:	24001268 	.word	0x24001268
		fmt = FS_FAT32;
 800b45c:	2303      	movs	r3, #3
 800b45e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b464:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b468:	4293      	cmp	r3, r2
 800b46a:	d802      	bhi.n	800b472 <_ZL11find_volumePPKcPP5FATFSh+0x2f6>
 800b46c:	2302      	movs	r3, #2
 800b46e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b474:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b478:	4293      	cmp	r3, r2
 800b47a:	d802      	bhi.n	800b482 <_ZL11find_volumePPKcPP5FATFSh+0x306>
 800b47c:	2301      	movs	r3, #1
 800b47e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b484:	1c9a      	adds	r2, r3, #2
 800b486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b488:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b48a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b48c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b48e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b490:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800b492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b494:	441a      	add	r2, r3
 800b496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b498:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b49a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b49e:	441a      	add	r2, r3
 800b4a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4a2:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800b4a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b4a8:	2b03      	cmp	r3, #3
 800b4aa:	d123      	bne.n	800b4f4 <_ZL11find_volumePPKcPP5FATFSh+0x378>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b4ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4ae:	3330      	adds	r3, #48	; 0x30
 800b4b0:	332a      	adds	r3, #42	; 0x2a
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7fe fbe4 	bl	8009c80 <_ZL7ld_wordPKh>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	bf14      	ite	ne
 800b4be:	2301      	movne	r3, #1
 800b4c0:	2300      	moveq	r3, #0
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d001      	beq.n	800b4cc <_ZL11find_volumePPKcPP5FATFSh+0x350>
 800b4c8:	230d      	movs	r3, #13
 800b4ca:	e0b2      	b.n	800b632 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b4cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4ce:	891b      	ldrh	r3, [r3, #8]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d001      	beq.n	800b4d8 <_ZL11find_volumePPKcPP5FATFSh+0x35c>
 800b4d4:	230d      	movs	r3, #13
 800b4d6:	e0ac      	b.n	800b632 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b4d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4da:	3330      	adds	r3, #48	; 0x30
 800b4dc:	332c      	adds	r3, #44	; 0x2c
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7fe fbe6 	bl	8009cb0 <_ZL8ld_dwordPKh>
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4e8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b4ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4ec:	695b      	ldr	r3, [r3, #20]
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	647b      	str	r3, [r7, #68]	; 0x44
 800b4f2:	e01f      	b.n	800b534 <_ZL11find_volumePPKcPP5FATFSh+0x3b8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b4f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4f6:	891b      	ldrh	r3, [r3, #8]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d101      	bne.n	800b500 <_ZL11find_volumePPKcPP5FATFSh+0x384>
 800b4fc:	230d      	movs	r3, #13
 800b4fe:	e098      	b.n	800b632 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b502:	6a1a      	ldr	r2, [r3, #32]
 800b504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b506:	441a      	add	r2, r3
 800b508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b50a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b50c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b510:	2b02      	cmp	r3, #2
 800b512:	d103      	bne.n	800b51c <_ZL11find_volumePPKcPP5FATFSh+0x3a0>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b516:	695b      	ldr	r3, [r3, #20]
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b518:	005b      	lsls	r3, r3, #1
 800b51a:	e00a      	b.n	800b532 <_ZL11find_volumePPKcPP5FATFSh+0x3b6>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b51c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b51e:	695a      	ldr	r2, [r3, #20]
 800b520:	4613      	mov	r3, r2
 800b522:	005b      	lsls	r3, r3, #1
 800b524:	4413      	add	r3, r2
 800b526:	085a      	lsrs	r2, r3, #1
 800b528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b52a:	695b      	ldr	r3, [r3, #20]
 800b52c:	f003 0301 	and.w	r3, r3, #1
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b530:	4413      	add	r3, r2
 800b532:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b536:	699a      	ldr	r2, [r3, #24]
 800b538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b53a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b53e:	0a5b      	lsrs	r3, r3, #9
 800b540:	429a      	cmp	r2, r3
 800b542:	d201      	bcs.n	800b548 <_ZL11find_volumePPKcPP5FATFSh+0x3cc>
 800b544:	230d      	movs	r3, #13
 800b546:	e074      	b.n	800b632 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b54a:	f04f 32ff 	mov.w	r2, #4294967295
 800b54e:	611a      	str	r2, [r3, #16]
 800b550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b552:	691a      	ldr	r2, [r3, #16]
 800b554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b556:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b55a:	2280      	movs	r2, #128	; 0x80
 800b55c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
			&& ld_word(fs->win + BPB_FSInfo32) == 1
			&& move_window(fs, bsect + 1) == FR_OK)
 800b55e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b562:	2b03      	cmp	r3, #3
 800b564:	d113      	bne.n	800b58e <_ZL11find_volumePPKcPP5FATFSh+0x412>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b568:	3330      	adds	r3, #48	; 0x30
 800b56a:	3330      	adds	r3, #48	; 0x30
 800b56c:	4618      	mov	r0, r3
 800b56e:	f7fe fb87 	bl	8009c80 <_ZL7ld_wordPKh>
 800b572:	4603      	mov	r3, r0
 800b574:	2b01      	cmp	r3, #1
 800b576:	d10a      	bne.n	800b58e <_ZL11find_volumePPKcPP5FATFSh+0x412>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b57a:	3301      	adds	r3, #1
 800b57c:	4619      	mov	r1, r3
 800b57e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b580:	f7fe fe49 	bl	800a216 <_ZL11move_windowP5FATFSm>
 800b584:	4603      	mov	r3, r0
 800b586:	2b00      	cmp	r3, #0
 800b588:	d101      	bne.n	800b58e <_ZL11find_volumePPKcPP5FATFSh+0x412>
 800b58a:	2301      	movs	r3, #1
 800b58c:	e000      	b.n	800b590 <_ZL11find_volumePPKcPP5FATFSh+0x414>
 800b58e:	2300      	movs	r3, #0
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b590:	2b00      	cmp	r3, #0
 800b592:	d03c      	beq.n	800b60e <_ZL11find_volumePPKcPP5FATFSh+0x492>
		{
			fs->fsi_flag = 0;
 800b594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b596:	2200      	movs	r2, #0
 800b598:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b59a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b59c:	3330      	adds	r3, #48	; 0x30
 800b59e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7fe fb6c 	bl	8009c80 <_ZL7ld_wordPKh>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	461a      	mov	r2, r3
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b5ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d115      	bne.n	800b5e0 <_ZL11find_volumePPKcPP5FATFSh+0x464>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b5b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5b6:	3330      	adds	r3, #48	; 0x30
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7fe fb79 	bl	8009cb0 <_ZL8ld_dwordPKh>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	4b1e      	ldr	r3, [pc, #120]	; (800b63c <_ZL11find_volumePPKcPP5FATFSh+0x4c0>)
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d10c      	bne.n	800b5e0 <_ZL11find_volumePPKcPP5FATFSh+0x464>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b5c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5c8:	3330      	adds	r3, #48	; 0x30
 800b5ca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f7fe fb6e 	bl	8009cb0 <_ZL8ld_dwordPKh>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	4b1a      	ldr	r3, [pc, #104]	; (800b640 <_ZL11find_volumePPKcPP5FATFSh+0x4c4>)
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d101      	bne.n	800b5e0 <_ZL11find_volumePPKcPP5FATFSh+0x464>
 800b5dc:	2301      	movs	r3, #1
 800b5de:	e000      	b.n	800b5e2 <_ZL11find_volumePPKcPP5FATFSh+0x466>
 800b5e0:	2300      	movs	r3, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d013      	beq.n	800b60e <_ZL11find_volumePPKcPP5FATFSh+0x492>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b5e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5e8:	3330      	adds	r3, #48	; 0x30
 800b5ea:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7fe fb5e 	bl	8009cb0 <_ZL8ld_dwordPKh>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5f8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b5fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5fc:	3330      	adds	r3, #48	; 0x30
 800b5fe:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b602:	4618      	mov	r0, r3
 800b604:	f7fe fb54 	bl	8009cb0 <_ZL8ld_dwordPKh>
 800b608:	4602      	mov	r2, r0
 800b60a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b60c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b60e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b610:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b614:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b616:	4b0b      	ldr	r3, [pc, #44]	; (800b644 <_ZL11find_volumePPKcPP5FATFSh+0x4c8>)
 800b618:	881b      	ldrh	r3, [r3, #0]
 800b61a:	3301      	adds	r3, #1
 800b61c:	b29a      	uxth	r2, r3
 800b61e:	4b09      	ldr	r3, [pc, #36]	; (800b644 <_ZL11find_volumePPKcPP5FATFSh+0x4c8>)
 800b620:	801a      	strh	r2, [r3, #0]
 800b622:	4b08      	ldr	r3, [pc, #32]	; (800b644 <_ZL11find_volumePPKcPP5FATFSh+0x4c8>)
 800b624:	881a      	ldrh	r2, [r3, #0]
 800b626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b628:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b62a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b62c:	f7fe fd86 	bl	800a13c <_ZL10clear_lockP5FATFS>
#endif
	return FR_OK;
 800b630:	2300      	movs	r3, #0
}
 800b632:	4618      	mov	r0, r3
 800b634:	3758      	adds	r7, #88	; 0x58
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	41615252 	.word	0x41615252
 800b640:	61417272 	.word	0x61417272
 800b644:	2400126c 	.word	0x2400126c

0800b648 <_ZL8validateP5_FDIDPP5FATFS>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b652:	2309      	movs	r3, #9
 800b654:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d021      	beq.n	800b6a0 <_ZL8validateP5_FDIDPP5FATFS+0x58>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d01d      	beq.n	800b6a0 <_ZL8validateP5_FDIDPP5FATFS+0x58>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d018      	beq.n	800b6a0 <_ZL8validateP5_FDIDPP5FATFS+0x58>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	889a      	ldrh	r2, [r3, #4]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	88db      	ldrh	r3, [r3, #6]
 800b678:	429a      	cmp	r2, r3
 800b67a:	d111      	bne.n	800b6a0 <_ZL8validateP5_FDIDPP5FATFS+0x58>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	785b      	ldrb	r3, [r3, #1]
 800b682:	4618      	mov	r0, r3
 800b684:	f7fe fa5e 	bl	8009b44 <disk_status>
 800b688:	4603      	mov	r3, r0
 800b68a:	f003 0301 	and.w	r3, r3, #1
 800b68e:	2b00      	cmp	r3, #0
 800b690:	bf0c      	ite	eq
 800b692:	2301      	moveq	r3, #1
 800b694:	2300      	movne	r3, #0
 800b696:	b2db      	uxtb	r3, r3
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d001      	beq.n	800b6a0 <_ZL8validateP5_FDIDPP5FATFS+0x58>
			res = FR_OK;
 800b69c:	2300      	movs	r3, #0
 800b69e:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b6a0:	7bfb      	ldrb	r3, [r7, #15]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d102      	bne.n	800b6ac <_ZL8validateP5_FDIDPP5FATFS+0x64>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	e000      	b.n	800b6ae <_ZL8validateP5_FDIDPP5FATFS+0x66>
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	683a      	ldr	r2, [r7, #0]
 800b6b0:	6013      	str	r3, [r2, #0]
	return res;
 800b6b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3710      	adds	r7, #16
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b088      	sub	sp, #32
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	4613      	mov	r3, r2
 800b6c8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b6ce:	f107 0310 	add.w	r3, r7, #16
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7ff fca3 	bl	800b01e <_ZL12get_ldnumberPPKc>
 800b6d8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b6da:	69fb      	ldr	r3, [r7, #28]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	da01      	bge.n	800b6e4 <f_mount+0x28>
 800b6e0:	230b      	movs	r3, #11
 800b6e2:	e02b      	b.n	800b73c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b6e4:	4a17      	ldr	r2, [pc, #92]	; (800b744 <f_mount+0x88>)
 800b6e6:	69fb      	ldr	r3, [r7, #28]
 800b6e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6ec:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b6ee:	69bb      	ldr	r3, [r7, #24]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d005      	beq.n	800b700 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b6f4:	69b8      	ldr	r0, [r7, #24]
 800b6f6:	f7fe fd21 	bl	800a13c <_ZL10clear_lockP5FATFS>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b6fa:	69bb      	ldr	r3, [r7, #24]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d002      	beq.n	800b70c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2200      	movs	r2, #0
 800b70a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b70c:	68fa      	ldr	r2, [r7, #12]
 800b70e:	490d      	ldr	r1, [pc, #52]	; (800b744 <f_mount+0x88>)
 800b710:	69fb      	ldr	r3, [r7, #28]
 800b712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d002      	beq.n	800b722 <f_mount+0x66>
 800b71c:	79fb      	ldrb	r3, [r7, #7]
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d001      	beq.n	800b726 <f_mount+0x6a>
 800b722:	2300      	movs	r3, #0
 800b724:	e00a      	b.n	800b73c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b726:	f107 010c 	add.w	r1, r7, #12
 800b72a:	f107 0308 	add.w	r3, r7, #8
 800b72e:	2200      	movs	r2, #0
 800b730:	4618      	mov	r0, r3
 800b732:	f7ff fd23 	bl	800b17c <_ZL11find_volumePPKcPP5FATFSh>
 800b736:	4603      	mov	r3, r0
 800b738:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b73a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3720      	adds	r7, #32
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}
 800b744:	24001268 	.word	0x24001268

0800b748 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b098      	sub	sp, #96	; 0x60
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	4613      	mov	r3, r2
 800b754:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d101      	bne.n	800b760 <f_open+0x18>
 800b75c:	2309      	movs	r3, #9
 800b75e:	e1b5      	b.n	800bacc <f_open+0x384>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b760:	79fb      	ldrb	r3, [r7, #7]
 800b762:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b766:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b768:	79fa      	ldrb	r2, [r7, #7]
 800b76a:	f107 0110 	add.w	r1, r7, #16
 800b76e:	f107 0308 	add.w	r3, r7, #8
 800b772:	4618      	mov	r0, r3
 800b774:	f7ff fd02 	bl	800b17c <_ZL11find_volumePPKcPP5FATFSh>
 800b778:	4603      	mov	r3, r0
 800b77a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b77e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b782:	2b00      	cmp	r3, #0
 800b784:	f040 8199 	bne.w	800baba <f_open+0x372>
		dj.obj.fs = fs;
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b78c:	68ba      	ldr	r2, [r7, #8]
 800b78e:	f107 0314 	add.w	r3, r7, #20
 800b792:	4611      	mov	r1, r2
 800b794:	4618      	mov	r0, r3
 800b796:	f7ff fbd1 	bl	800af3c <_ZL11follow_pathP3DIRPKc>
 800b79a:	4603      	mov	r3, r0
 800b79c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b7a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d119      	bne.n	800b7dc <f_open+0x94>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b7a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b7ac:	b25b      	sxtb	r3, r3
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	da03      	bge.n	800b7ba <f_open+0x72>
				res = FR_INVALID_NAME;
 800b7b2:	2306      	movs	r3, #6
 800b7b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b7b8:	e010      	b.n	800b7dc <f_open+0x94>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b7ba:	79fb      	ldrb	r3, [r7, #7]
 800b7bc:	f023 0301 	bic.w	r3, r3, #1
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d001      	beq.n	800b7c8 <f_open+0x80>
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	e000      	b.n	800b7ca <f_open+0x82>
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f107 0314 	add.w	r3, r7, #20
 800b7ce:	4611      	mov	r1, r2
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7fe fb67 	bl	8009ea4 <_ZL8chk_lockP3DIRi>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b7dc:	79fb      	ldrb	r3, [r7, #7]
 800b7de:	f003 031c 	and.w	r3, r3, #28
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d07f      	beq.n	800b8e6 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 800b7e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d017      	beq.n	800b81e <f_open+0xd6>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b7ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7f2:	2b04      	cmp	r3, #4
 800b7f4:	d10e      	bne.n	800b814 <f_open+0xcc>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b7f6:	f7fe fbb1 	bl	8009f5c <_ZL8enq_lockv>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d006      	beq.n	800b80e <f_open+0xc6>
 800b800:	f107 0314 	add.w	r3, r7, #20
 800b804:	4618      	mov	r0, r3
 800b806:	f7ff facd 	bl	800ada4 <_ZL12dir_registerP3DIR>
 800b80a:	4603      	mov	r3, r0
 800b80c:	e000      	b.n	800b810 <f_open+0xc8>
 800b80e:	2312      	movs	r3, #18
 800b810:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b814:	79fb      	ldrb	r3, [r7, #7]
 800b816:	f043 0308 	orr.w	r3, r3, #8
 800b81a:	71fb      	strb	r3, [r7, #7]
 800b81c:	e010      	b.n	800b840 <f_open+0xf8>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b81e:	7ebb      	ldrb	r3, [r7, #26]
 800b820:	f003 0311 	and.w	r3, r3, #17
 800b824:	2b00      	cmp	r3, #0
 800b826:	d003      	beq.n	800b830 <f_open+0xe8>
					res = FR_DENIED;
 800b828:	2307      	movs	r3, #7
 800b82a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b82e:	e007      	b.n	800b840 <f_open+0xf8>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b830:	79fb      	ldrb	r3, [r7, #7]
 800b832:	f003 0304 	and.w	r3, r3, #4
 800b836:	2b00      	cmp	r3, #0
 800b838:	d002      	beq.n	800b840 <f_open+0xf8>
 800b83a:	2308      	movs	r3, #8
 800b83c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b840:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b844:	2b00      	cmp	r3, #0
 800b846:	d168      	bne.n	800b91a <f_open+0x1d2>
 800b848:	79fb      	ldrb	r3, [r7, #7]
 800b84a:	f003 0308 	and.w	r3, r3, #8
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d063      	beq.n	800b91a <f_open+0x1d2>
				dw = GET_FATTIME();
 800b852:	f7fd f9a7 	bl	8008ba4 <get_fattime>
 800b856:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b85a:	330e      	adds	r3, #14
 800b85c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b85e:	4618      	mov	r0, r3
 800b860:	f7fe fa64 	bl	8009d2c <_ZL8st_dwordPhm>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b866:	3316      	adds	r3, #22
 800b868:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7fe fa5e 	bl	8009d2c <_ZL8st_dwordPhm>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b872:	330b      	adds	r3, #11
 800b874:	2220      	movs	r2, #32
 800b876:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b87c:	4611      	mov	r1, r2
 800b87e:	4618      	mov	r0, r3
 800b880:	f7ff f9f7 	bl	800ac72 <_ZL8ld_clustP5FATFSPKh>
 800b884:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b88a:	2200      	movs	r2, #0
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7ff fa0f 	bl	800acb0 <_ZL8st_clustP5FATFSPhm>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b894:	331c      	adds	r3, #28
 800b896:	2100      	movs	r1, #0
 800b898:	4618      	mov	r0, r3
 800b89a:	f7fe fa47 	bl	8009d2c <_ZL8st_dwordPhm>
					fs->wflag = 1;
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b8a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d037      	beq.n	800b91a <f_open+0x1d2>
						dw = fs->winsect;
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ae:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b8b0:	f107 0314 	add.w	r3, r7, #20
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f7fe ff12 	bl	800a6e2 <_ZL12remove_chainP5_FDIDmm>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b8c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d126      	bne.n	800b91a <f_open+0x1d2>
							res = move_window(fs, dw);
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f7fe fca0 	bl	800a216 <_ZL11move_windowP5FATFSm>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b8e0:	3a01      	subs	r2, #1
 800b8e2:	60da      	str	r2, [r3, #12]
 800b8e4:	e019      	b.n	800b91a <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b8e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d115      	bne.n	800b91a <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b8ee:	7ebb      	ldrb	r3, [r7, #26]
 800b8f0:	f003 0310 	and.w	r3, r3, #16
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d003      	beq.n	800b900 <f_open+0x1b8>
					res = FR_NO_FILE;
 800b8f8:	2304      	movs	r3, #4
 800b8fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b8fe:	e00c      	b.n	800b91a <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b900:	79fb      	ldrb	r3, [r7, #7]
 800b902:	f003 0302 	and.w	r3, r3, #2
 800b906:	2b00      	cmp	r3, #0
 800b908:	d007      	beq.n	800b91a <f_open+0x1d2>
 800b90a:	7ebb      	ldrb	r3, [r7, #26]
 800b90c:	f003 0301 	and.w	r3, r3, #1
 800b910:	2b00      	cmp	r3, #0
 800b912:	d002      	beq.n	800b91a <f_open+0x1d2>
						res = FR_DENIED;
 800b914:	2307      	movs	r3, #7
 800b916:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b91a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d127      	bne.n	800b972 <f_open+0x22a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b922:	79fb      	ldrb	r3, [r7, #7]
 800b924:	f003 0308 	and.w	r3, r3, #8
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d003      	beq.n	800b934 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 800b92c:	79fb      	ldrb	r3, [r7, #7]
 800b92e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b932:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b93c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b942:	79fb      	ldrb	r3, [r7, #7]
 800b944:	f023 0301 	bic.w	r3, r3, #1
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d001      	beq.n	800b950 <f_open+0x208>
 800b94c:	2201      	movs	r2, #1
 800b94e:	e000      	b.n	800b952 <f_open+0x20a>
 800b950:	2200      	movs	r2, #0
 800b952:	f107 0314 	add.w	r3, r7, #20
 800b956:	4611      	mov	r1, r2
 800b958:	4618      	mov	r0, r3
 800b95a:	f7fe fb21 	bl	8009fa0 <_ZL8inc_lockP3DIRi>
 800b95e:	4602      	mov	r2, r0
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	691b      	ldr	r3, [r3, #16]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d102      	bne.n	800b972 <f_open+0x22a>
 800b96c:	2302      	movs	r3, #2
 800b96e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b972:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b976:	2b00      	cmp	r3, #0
 800b978:	f040 809f 	bne.w	800baba <f_open+0x372>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b980:	4611      	mov	r1, r2
 800b982:	4618      	mov	r0, r3
 800b984:	f7ff f975 	bl	800ac72 <_ZL8ld_clustP5FATFSPKh>
 800b988:	4602      	mov	r2, r0
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b98e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b990:	331c      	adds	r3, #28
 800b992:	4618      	mov	r0, r3
 800b994:	f7fe f98c 	bl	8009cb0 <_ZL8ld_dwordPKh>
 800b998:	4602      	mov	r2, r0
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b9a4:	693a      	ldr	r2, [r7, #16]
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	88da      	ldrh	r2, [r3, #6]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	79fa      	ldrb	r2, [r7, #7]
 800b9b6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	3330      	adds	r3, #48	; 0x30
 800b9ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9d2:	2100      	movs	r1, #0
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7fe f9fc 	bl	8009dd2 <_ZL7mem_setPvij>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b9da:	79fb      	ldrb	r3, [r7, #7]
 800b9dc:	f003 0320 	and.w	r3, r3, #32
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d06a      	beq.n	800baba <f_open+0x372>
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	68db      	ldr	r3, [r3, #12]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d066      	beq.n	800baba <f_open+0x372>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	68da      	ldr	r2, [r3, #12]
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	895b      	ldrh	r3, [r3, #10]
 800b9f8:	025b      	lsls	r3, r3, #9
 800b9fa:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	68db      	ldr	r3, [r3, #12]
 800ba06:	657b      	str	r3, [r7, #84]	; 0x54
 800ba08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d11b      	bne.n	800ba48 <f_open+0x300>
 800ba10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d917      	bls.n	800ba48 <f_open+0x300>
					clst = get_fat(&fp->obj, clst);
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f7fe fcc0 	bl	800a3a2 <_ZL7get_fatP5_FDIDm>
 800ba22:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ba24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d802      	bhi.n	800ba30 <f_open+0x2e8>
 800ba2a:	2302      	movs	r3, #2
 800ba2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ba30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba36:	d102      	bne.n	800ba3e <f_open+0x2f6>
 800ba38:	2301      	movs	r3, #1
 800ba3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ba3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba42:	1ad3      	subs	r3, r2, r3
 800ba44:	657b      	str	r3, [r7, #84]	; 0x54
 800ba46:	e7df      	b.n	800ba08 <f_open+0x2c0>
				}
				fp->clust = clst;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba4c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ba4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d131      	bne.n	800baba <f_open+0x372>
 800ba56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d02c      	beq.n	800baba <f_open+0x372>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7fe fc7d 	bl	800a364 <_ZL10clust2sectP5FATFSm>
 800ba6a:	6478      	str	r0, [r7, #68]	; 0x44
 800ba6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	bf0c      	ite	eq
 800ba72:	2301      	moveq	r3, #1
 800ba74:	2300      	movne	r3, #0
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d003      	beq.n	800ba84 <f_open+0x33c>
						res = FR_INT_ERR;
 800ba7c:	2302      	movs	r3, #2
 800ba7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ba82:	e01a      	b.n	800baba <f_open+0x372>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ba84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba86:	0a5a      	lsrs	r2, r3, #9
 800ba88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba8a:	441a      	add	r2, r3
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	7858      	ldrb	r0, [r3, #1]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	6a1a      	ldr	r2, [r3, #32]
 800ba9e:	2301      	movs	r3, #1
 800baa0:	f7fe f890 	bl	8009bc4 <disk_read>
 800baa4:	4603      	mov	r3, r0
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	bf14      	ite	ne
 800baaa:	2301      	movne	r3, #1
 800baac:	2300      	moveq	r3, #0
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d002      	beq.n	800baba <f_open+0x372>
 800bab4:	2301      	movs	r3, #1
 800bab6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800baba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d002      	beq.n	800bac8 <f_open+0x380>
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2200      	movs	r2, #0
 800bac6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bac8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3760      	adds	r7, #96	; 0x60
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b08e      	sub	sp, #56	; 0x38
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	607a      	str	r2, [r7, #4]
 800bae0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	2200      	movs	r2, #0
 800baea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f107 0214 	add.w	r2, r7, #20
 800baf2:	4611      	mov	r1, r2
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7ff fda7 	bl	800b648 <_ZL8validateP5_FDIDPP5FATFS>
 800bafa:	4603      	mov	r3, r0
 800bafc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bb00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d107      	bne.n	800bb18 <f_read+0x44>
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	7d5b      	ldrb	r3, [r3, #21]
 800bb0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bb10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d001      	beq.n	800bb1c <f_read+0x48>
 800bb18:	2301      	movs	r3, #1
 800bb1a:	e000      	b.n	800bb1e <f_read+0x4a>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d002      	beq.n	800bb28 <f_read+0x54>
 800bb22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb26:	e123      	b.n	800bd70 <f_read+0x29c>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	7d1b      	ldrb	r3, [r3, #20]
 800bb2c:	f003 0301 	and.w	r3, r3, #1
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d101      	bne.n	800bb38 <f_read+0x64>
 800bb34:	2307      	movs	r3, #7
 800bb36:	e11b      	b.n	800bd70 <f_read+0x29c>
	remain = fp->obj.objsize - fp->fptr;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	68da      	ldr	r2, [r3, #12]
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	699b      	ldr	r3, [r3, #24]
 800bb40:	1ad3      	subs	r3, r2, r3
 800bb42:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800bb44:	687a      	ldr	r2, [r7, #4]
 800bb46:	6a3b      	ldr	r3, [r7, #32]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d901      	bls.n	800bb50 <f_read+0x7c>
 800bb4c:	6a3b      	ldr	r3, [r7, #32]
 800bb4e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	f000 810b 	beq.w	800bd6e <f_read+0x29a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	699b      	ldr	r3, [r3, #24]
 800bb5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	f040 80d5 	bne.w	800bd10 <f_read+0x23c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	699b      	ldr	r3, [r3, #24]
 800bb6a:	0a5b      	lsrs	r3, r3, #9
 800bb6c:	697a      	ldr	r2, [r7, #20]
 800bb6e:	8952      	ldrh	r2, [r2, #10]
 800bb70:	3a01      	subs	r2, #1
 800bb72:	4013      	ands	r3, r2
 800bb74:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800bb76:	69fb      	ldr	r3, [r7, #28]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d12f      	bne.n	800bbdc <f_read+0x108>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	699b      	ldr	r3, [r3, #24]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d103      	bne.n	800bb8c <f_read+0xb8>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	689b      	ldr	r3, [r3, #8]
 800bb88:	633b      	str	r3, [r7, #48]	; 0x30
 800bb8a:	e013      	b.n	800bbb4 <f_read+0xe0>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d007      	beq.n	800bba4 <f_read+0xd0>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	699b      	ldr	r3, [r3, #24]
 800bb98:	4619      	mov	r1, r3
 800bb9a:	68f8      	ldr	r0, [r7, #12]
 800bb9c:	f7fe fe9e 	bl	800a8dc <_ZL10clmt_clustP3FILm>
 800bba0:	6338      	str	r0, [r7, #48]	; 0x30
 800bba2:	e007      	b.n	800bbb4 <f_read+0xe0>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800bba4:	68fa      	ldr	r2, [r7, #12]
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	69db      	ldr	r3, [r3, #28]
 800bbaa:	4619      	mov	r1, r3
 800bbac:	4610      	mov	r0, r2
 800bbae:	f7fe fbf8 	bl	800a3a2 <_ZL7get_fatP5_FDIDm>
 800bbb2:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800bbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	d804      	bhi.n	800bbc4 <f_read+0xf0>
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2202      	movs	r2, #2
 800bbbe:	755a      	strb	r2, [r3, #21]
 800bbc0:	2302      	movs	r3, #2
 800bbc2:	e0d5      	b.n	800bd70 <f_read+0x29c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbca:	d104      	bne.n	800bbd6 <f_read+0x102>
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2201      	movs	r2, #1
 800bbd0:	755a      	strb	r2, [r3, #21]
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	e0cc      	b.n	800bd70 <f_read+0x29c>
				fp->clust = clst;				/* Update current cluster */
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbda:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bbdc:	697a      	ldr	r2, [r7, #20]
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	69db      	ldr	r3, [r3, #28]
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	4610      	mov	r0, r2
 800bbe6:	f7fe fbbd 	bl	800a364 <_ZL10clust2sectP5FATFSm>
 800bbea:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bbec:	69bb      	ldr	r3, [r7, #24]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d104      	bne.n	800bbfc <f_read+0x128>
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2202      	movs	r2, #2
 800bbf6:	755a      	strb	r2, [r3, #21]
 800bbf8:	2302      	movs	r3, #2
 800bbfa:	e0b9      	b.n	800bd70 <f_read+0x29c>
			sect += csect;
 800bbfc:	69ba      	ldr	r2, [r7, #24]
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	4413      	add	r3, r2
 800bc02:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	0a5b      	lsrs	r3, r3, #9
 800bc08:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800bc0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d03e      	beq.n	800bc8e <f_read+0x1ba>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bc10:	69fa      	ldr	r2, [r7, #28]
 800bc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc14:	4413      	add	r3, r2
 800bc16:	697a      	ldr	r2, [r7, #20]
 800bc18:	8952      	ldrh	r2, [r2, #10]
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d905      	bls.n	800bc2a <f_read+0x156>
					cc = fs->csize - csect;
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	895b      	ldrh	r3, [r3, #10]
 800bc22:	461a      	mov	r2, r3
 800bc24:	69fb      	ldr	r3, [r7, #28]
 800bc26:	1ad3      	subs	r3, r2, r3
 800bc28:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	7858      	ldrb	r0, [r3, #1]
 800bc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc30:	69ba      	ldr	r2, [r7, #24]
 800bc32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc34:	f7fd ffc6 	bl	8009bc4 <disk_read>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	bf14      	ite	ne
 800bc3e:	2301      	movne	r3, #1
 800bc40:	2300      	moveq	r3, #0
 800bc42:	b2db      	uxtb	r3, r3
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d004      	beq.n	800bc52 <f_read+0x17e>
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	755a      	strb	r2, [r3, #21]
 800bc4e:	2301      	movs	r3, #1
 800bc50:	e08e      	b.n	800bd70 <f_read+0x29c>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	7d1b      	ldrb	r3, [r3, #20]
 800bc56:	b25b      	sxtb	r3, r3
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	da14      	bge.n	800bc86 <f_read+0x1b2>
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	6a1a      	ldr	r2, [r3, #32]
 800bc60:	69bb      	ldr	r3, [r7, #24]
 800bc62:	1ad3      	subs	r3, r2, r3
 800bc64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d90d      	bls.n	800bc86 <f_read+0x1b2>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	6a1a      	ldr	r2, [r3, #32]
 800bc6e:	69bb      	ldr	r3, [r7, #24]
 800bc70:	1ad3      	subs	r3, r2, r3
 800bc72:	025b      	lsls	r3, r3, #9
 800bc74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc76:	18d0      	adds	r0, r2, r3
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	3330      	adds	r3, #48	; 0x30
 800bc7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc80:	4619      	mov	r1, r3
 800bc82:	f7fe f87f 	bl	8009d84 <_ZL7mem_cpyPvPKvj>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800bc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc88:	025b      	lsls	r3, r3, #9
 800bc8a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800bc8c:	e05a      	b.n	800bd44 <f_read+0x270>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	6a1b      	ldr	r3, [r3, #32]
 800bc92:	69ba      	ldr	r2, [r7, #24]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d038      	beq.n	800bd0a <f_read+0x236>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	7d1b      	ldrb	r3, [r3, #20]
 800bc9c:	b25b      	sxtb	r3, r3
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	da1d      	bge.n	800bcde <f_read+0x20a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	7858      	ldrb	r0, [r3, #1]
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	6a1a      	ldr	r2, [r3, #32]
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	f7fd ffa7 	bl	8009c04 <disk_write>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	bf14      	ite	ne
 800bcbc:	2301      	movne	r3, #1
 800bcbe:	2300      	moveq	r3, #0
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d004      	beq.n	800bcd0 <f_read+0x1fc>
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	2201      	movs	r2, #1
 800bcca:	755a      	strb	r2, [r3, #21]
 800bccc:	2301      	movs	r3, #1
 800bcce:	e04f      	b.n	800bd70 <f_read+0x29c>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	7d1b      	ldrb	r3, [r3, #20]
 800bcd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcd8:	b2da      	uxtb	r2, r3
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	7858      	ldrb	r0, [r3, #1]
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bce8:	2301      	movs	r3, #1
 800bcea:	69ba      	ldr	r2, [r7, #24]
 800bcec:	f7fd ff6a 	bl	8009bc4 <disk_read>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	bf14      	ite	ne
 800bcf6:	2301      	movne	r3, #1
 800bcf8:	2300      	moveq	r3, #0
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d004      	beq.n	800bd0a <f_read+0x236>
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2201      	movs	r2, #1
 800bd04:	755a      	strb	r2, [r3, #21]
 800bd06:	2301      	movs	r3, #1
 800bd08:	e032      	b.n	800bd70 <f_read+0x29c>
			}
#endif
			fp->sect = sect;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	69ba      	ldr	r2, [r7, #24]
 800bd0e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	699b      	ldr	r3, [r3, #24]
 800bd14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd18:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bd1c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800bd1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d901      	bls.n	800bd2a <f_read+0x256>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	699b      	ldr	r3, [r3, #24]
 800bd34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd38:	4413      	add	r3, r2
 800bd3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd40:	f7fe f820 	bl	8009d84 <_ZL7mem_cpyPvPKvj>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800bd44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd48:	4413      	add	r3, r2
 800bd4a:	627b      	str	r3, [r7, #36]	; 0x24
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	699a      	ldr	r2, [r3, #24]
 800bd50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd52:	441a      	add	r2, r3
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	619a      	str	r2, [r3, #24]
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	681a      	ldr	r2, [r3, #0]
 800bd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd5e:	441a      	add	r2, r3
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	601a      	str	r2, [r3, #0]
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd68:	1ad3      	subs	r3, r2, r3
 800bd6a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800bd6c:	e6f0      	b.n	800bb50 <f_read+0x7c>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800bd6e:	2300      	movs	r3, #0
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3738      	adds	r7, #56	; 0x38
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <_ZN6FatDMA17f_write_dma_startEP3FILPKvj>:
FRESULT FatDMA::f_write_dma_start (
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw			/* Number of bytes to write */
)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	607a      	str	r2, [r7, #4]
 800bd84:	603b      	str	r3, [r7, #0]
	wbuff = (const BYTE*)buff;   //lost const qualifier
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	687a      	ldr	r2, [r7, #4]
 800bd8a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	this->fp = fp;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	68ba      	ldr	r2, [r7, #8]
 800bd92:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	this->btw = btw;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	683a      	ldr	r2, [r7, #0]
 800bd9a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	DMAReady = false;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2200      	movs	r2, #0
 800bda2:	701a      	strb	r2, [r3, #0]
	wcnt = 0;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2200      	movs	r2, #0
 800bda8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bdac:	68ba      	ldr	r2, [r7, #8]
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	3388      	adds	r3, #136	; 0x88
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	4610      	mov	r0, r2
 800bdb6:	f7ff fc47 	bl	800b648 <_ZL8validateP5_FDIDPP5FATFS>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d109      	bne.n	800bde2 <_ZN6FatDMA17f_write_dma_startEP3FILPKvj+0x6a>
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	7d5a      	ldrb	r2, [r3, #21]
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d001      	beq.n	800bde6 <_ZN6FatDMA17f_write_dma_startEP3FILPKvj+0x6e>
 800bde2:	2301      	movs	r3, #1
 800bde4:	e000      	b.n	800bde8 <_ZN6FatDMA17f_write_dma_startEP3FILPKvj+0x70>
 800bde6:	2300      	movs	r3, #0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d003      	beq.n	800bdf4 <_ZN6FatDMA17f_write_dma_startEP3FILPKvj+0x7c>
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bdf2:	e017      	b.n	800be24 <_ZN6FatDMA17f_write_dma_startEP3FILPKvj+0xac>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	7d1b      	ldrb	r3, [r3, #20]
 800bdf8:	f003 0302 	and.w	r3, r3, #2
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d101      	bne.n	800be04 <_ZN6FatDMA17f_write_dma_startEP3FILPKvj+0x8c>
 800be00:	2307      	movs	r3, #7
 800be02:	e00f      	b.n	800be24 <_ZN6FatDMA17f_write_dma_startEP3FILPKvj+0xac>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	699a      	ldr	r2, [r3, #24]
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	441a      	add	r2, r3
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	699b      	ldr	r3, [r3, #24]
 800be10:	429a      	cmp	r2, r3
 800be12:	d203      	bcs.n	800be1c <_ZN6FatDMA17f_write_dma_startEP3FILPKvj+0xa4>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	699b      	ldr	r3, [r3, #24]
 800be18:	43db      	mvns	r3, r3
 800be1a:	603b      	str	r3, [r7, #0]
	}

	return f_write_dma_loop();
 800be1c:	68f8      	ldr	r0, [r7, #12]
 800be1e:	f000 f805 	bl	800be2c <_ZN6FatDMA16f_write_dma_loopEv>
 800be22:	4603      	mov	r3, r0

}
 800be24:	4618      	mov	r0, r3
 800be26:	3710      	adds	r7, #16
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <_ZN6FatDMA16f_write_dma_loopEv>:

FRESULT FatDMA::f_write_dma_loop() {
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b084      	sub	sp, #16
 800be30:	af02      	add	r7, sp, #8
 800be32:	6078      	str	r0, [r7, #4]

	if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be3a:	699b      	ldr	r3, [r3, #24]
 800be3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be40:	2b00      	cmp	r3, #0
 800be42:	f040 8166 	bne.w	800c112 <_ZN6FatDMA16f_write_dma_loopEv+0x2e6>
		csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be4c:	699b      	ldr	r3, [r3, #24]
 800be4e:	0a5b      	lsrs	r3, r3, #9
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800be56:	8952      	ldrh	r2, [r2, #10]
 800be58:	3a01      	subs	r2, #1
 800be5a:	401a      	ands	r2, r3
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		if (csect == 0) {				/* On the cluster boundary? */
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d17c      	bne.n	800bf66 <_ZN6FatDMA16f_write_dma_loopEv+0x13a>
			if (fp->fptr == 0) {		/* On the top of the file? */
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be72:	699b      	ldr	r3, [r3, #24]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d117      	bne.n	800bea8 <_ZN6FatDMA16f_write_dma_loopEv+0x7c>
				clst = fp->obj.sclust;	/* Follow from the origin */
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be7e:	689a      	ldr	r2, [r3, #8]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if (clst == 0) {		/* If no cluster is allocated, */
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d131      	bne.n	800bef4 <_ZN6FatDMA16f_write_dma_loopEv+0xc8>
					clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be96:	2100      	movs	r1, #0
 800be98:	4618      	mov	r0, r3
 800be9a:	f7fe fc87 	bl	800a7ac <_ZL12create_chainP5_FDIDm>
 800be9e:	4602      	mov	r2, r0
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800bea6:	e025      	b.n	800bef4 <_ZN6FatDMA16f_write_dma_loopEv+0xc8>
				}
			} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
				if (fp->cltbl) {
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800beae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d00f      	beq.n	800bed4 <_ZN6FatDMA16f_write_dma_loopEv+0xa8>
					clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bec0:	699b      	ldr	r3, [r3, #24]
 800bec2:	4619      	mov	r1, r3
 800bec4:	4610      	mov	r0, r2
 800bec6:	f7fe fd09 	bl	800a8dc <_ZL10clmt_clustP3FILm>
 800beca:	4602      	mov	r2, r0
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800bed2:	e00f      	b.n	800bef4 <_ZN6FatDMA16f_write_dma_loopEv+0xc8>
				} else
#endif
				{
					clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800beda:	461a      	mov	r2, r3
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bee2:	69db      	ldr	r3, [r3, #28]
 800bee4:	4619      	mov	r1, r3
 800bee6:	4610      	mov	r0, r2
 800bee8:	f7fe fc60 	bl	800a7ac <_ZL12create_chainP5_FDIDm>
 800beec:	4602      	mov	r2, r0
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				}
			}
			if (clst == 0) ABORT(fs, FR_DISK_ERR);		/* Could not allocate a new cluster (disk full) */
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800befa:	2b00      	cmp	r3, #0
 800befc:	d106      	bne.n	800bf0c <_ZN6FatDMA16f_write_dma_loopEv+0xe0>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf04:	2201      	movs	r2, #1
 800bf06:	755a      	strb	r2, [r3, #21]
 800bf08:	2301      	movs	r3, #1
 800bf0a:	e13c      	b.n	800c186 <_ZN6FatDMA16f_write_dma_loopEv+0x35a>
			if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d106      	bne.n	800bf24 <_ZN6FatDMA16f_write_dma_loopEv+0xf8>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf1c:	2202      	movs	r2, #2
 800bf1e:	755a      	strb	r2, [r3, #21]
 800bf20:	2302      	movs	r3, #2
 800bf22:	e130      	b.n	800c186 <_ZN6FatDMA16f_write_dma_loopEv+0x35a>
			if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf2e:	d106      	bne.n	800bf3e <_ZN6FatDMA16f_write_dma_loopEv+0x112>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf36:	2201      	movs	r2, #1
 800bf38:	755a      	strb	r2, [r3, #21]
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e123      	b.n	800c186 <_ZN6FatDMA16f_write_dma_loopEv+0x35a>
			fp->clust = clst;			/* Update current cluster */
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800bf4a:	61da      	str	r2, [r3, #28]
			if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d106      	bne.n	800bf66 <_ZN6FatDMA16f_write_dma_loopEv+0x13a>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800bf64:	609a      	str	r2, [r3, #8]
		}
#if _FS_TINY
		if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
		if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf6c:	7d1b      	ldrb	r3, [r3, #20]
 800bf6e:	b25b      	sxtb	r3, r3
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	da29      	bge.n	800bfc8 <_ZN6FatDMA16f_write_dma_loopEv+0x19c>
			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf7a:	7858      	ldrb	r0, [r3, #1]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf8c:	6a1a      	ldr	r2, [r3, #32]
 800bf8e:	2301      	movs	r3, #1
 800bf90:	f7fd fe38 	bl	8009c04 <disk_write>
 800bf94:	4603      	mov	r3, r0
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	bf14      	ite	ne
 800bf9a:	2301      	movne	r3, #1
 800bf9c:	2300      	moveq	r3, #0
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d006      	beq.n	800bfb2 <_ZN6FatDMA16f_write_dma_loopEv+0x186>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bfaa:	2201      	movs	r2, #1
 800bfac:	755a      	strb	r2, [r3, #21]
 800bfae:	2301      	movs	r3, #1
 800bfb0:	e0e9      	b.n	800c186 <_ZN6FatDMA16f_write_dma_loopEv+0x35a>
			fp->flag &= (BYTE)~FA_DIRTY;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bfb8:	7d1a      	ldrb	r2, [r3, #20]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bfc0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bfc4:	b2d2      	uxtb	r2, r2
 800bfc6:	751a      	strb	r2, [r3, #20]
		}
#endif
		sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bfd4:	69db      	ldr	r3, [r3, #28]
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	4610      	mov	r0, r2
 800bfda:	f7fe f9c3 	bl	800a364 <_ZL10clust2sectP5FATFSm>
 800bfde:	4602      	mov	r2, r0
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		if (!sect) ABORT(fs, FR_INT_ERR);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d106      	bne.n	800bffe <_ZN6FatDMA16f_write_dma_loopEv+0x1d2>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bff6:	2202      	movs	r2, #2
 800bff8:	755a      	strb	r2, [r3, #21]
 800bffa:	2302      	movs	r3, #2
 800bffc:	e0c3      	b.n	800c186 <_ZN6FatDMA16f_write_dma_loopEv+0x35a>
		sect += csect;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c00a:	441a      	add	r2, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c018:	0a5a      	lsrs	r2, r3, #9
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		if (cc) {						/* Write maximum contiguous sectors directly */
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c026:	2b00      	cmp	r3, #0
 800c028:	d03b      	beq.n	800c0a2 <_ZN6FatDMA16f_write_dma_loopEv+0x276>
			if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c036:	4413      	add	r3, r2
 800c038:	687a      	ldr	r2, [r7, #4]
 800c03a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800c03e:	8952      	ldrh	r2, [r2, #10]
 800c040:	4293      	cmp	r3, r2
 800c042:	d90b      	bls.n	800c05c <_ZN6FatDMA16f_write_dma_loopEv+0x230>
				cc = fs->csize - csect;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c04a:	895b      	ldrh	r3, [r3, #10]
 800c04c:	461a      	mov	r2, r3
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c054:	1ad2      	subs	r2, r2, r3
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
			}
			if (USER_SPI_write_dma_start(fs->drv, wbuff, sect, cc) != 0) ABORT(fs, FR_DISK_ERR);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c062:	7859      	ldrb	r1, [r3, #1]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c076:	9300      	str	r3, [sp, #0]
 800c078:	4603      	mov	r3, r0
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f7fd fb24 	bl	80096c8 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj>
 800c080:	4603      	mov	r3, r0
 800c082:	2b00      	cmp	r3, #0
 800c084:	bf14      	ite	ne
 800c086:	2301      	movne	r3, #1
 800c088:	2300      	moveq	r3, #0
 800c08a:	b2db      	uxtb	r3, r3
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d006      	beq.n	800c09e <_ZN6FatDMA16f_write_dma_loopEv+0x272>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c096:	2201      	movs	r2, #1
 800c098:	755a      	strb	r2, [r3, #21]
 800c09a:	2301      	movs	r3, #1
 800c09c:	e073      	b.n	800c186 <_ZN6FatDMA16f_write_dma_loopEv+0x35a>
			LEAVE_FF(fs, FR_OK);
 800c09e:	2300      	movs	r3, #0
 800c0a0:	e071      	b.n	800c186 <_ZN6FatDMA16f_write_dma_loopEv+0x35a>
		if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
			if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
			fs->winsect = sect;
		}
#else
		if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c0a8:	6a1a      	ldr	r2, [r3, #32]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
			fp->fptr < fp->obj.objsize &&
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d01d      	beq.n	800c0f0 <_ZN6FatDMA16f_write_dma_loopEv+0x2c4>
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c0ba:	699a      	ldr	r2, [r3, #24]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c0c2:	68db      	ldr	r3, [r3, #12]
		if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d213      	bcs.n	800c0f0 <_ZN6FatDMA16f_write_dma_loopEv+0x2c4>
			disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0ce:	7858      	ldrb	r0, [r3, #1]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c0d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	f7fd fd6f 	bl	8009bc4 <disk_read>
 800c0e6:	4603      	mov	r3, r0
			fp->fptr < fp->obj.objsize &&
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d001      	beq.n	800c0f0 <_ZN6FatDMA16f_write_dma_loopEv+0x2c4>
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	e000      	b.n	800c0f2 <_ZN6FatDMA16f_write_dma_loopEv+0x2c6>
 800c0f0:	2300      	movs	r3, #0
		if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d006      	beq.n	800c104 <_ZN6FatDMA16f_write_dma_loopEv+0x2d8>
				ABORT(fs, FR_DISK_ERR);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	755a      	strb	r2, [r3, #21]
 800c100:	2301      	movs	r3, #1
 800c102:	e040      	b.n	800c186 <_ZN6FatDMA16f_write_dma_loopEv+0x35a>
		}
#endif
		fp->sect = sect;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800c110:	621a      	str	r2, [r3, #32]
	}

	wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c118:	699b      	ldr	r3, [r3, #24]
 800c11a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c11e:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c134:	429a      	cmp	r2, r3
 800c136:	d905      	bls.n	800c144 <_ZN6FatDMA16f_write_dma_loopEv+0x318>
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#if _FS_TINY
	if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
	mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
	fs->wflag = 1;
#else
	mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c14a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c154:	699b      	ldr	r3, [r3, #24]
 800c156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c15a:	18d0      	adds	r0, r2, r3
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c168:	461a      	mov	r2, r3
 800c16a:	f7fd fe0b 	bl	8009d84 <_ZL7mem_cpyPvPKvj>
	fp->flag |= FA_DIRTY;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c174:	7d1a      	ldrb	r2, [r3, #20]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c17c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c180:	b2d2      	uxtb	r2, r2
 800c182:	751a      	strb	r2, [r3, #20]
#endif

	LEAVE_FF(fs, FR_OK);
 800c184:	2300      	movs	r3, #0

}
 800c186:	4618      	mov	r0, r3
 800c188:	3708      	adds	r7, #8
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <_ZN6FatDMA16f_write_dma_cpltEv>:

FRESULT FatDMA::f_write_dma_cplt ()
{
 800c18e:	b580      	push	{r7, lr}
 800c190:	b082      	sub	sp, #8
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
	*bw = 0;	/* Clear write byte counter */
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	689b      	ldr	r3, [r3, #8]
 800c19a:	2200      	movs	r2, #0
 800c19c:	601a      	str	r2, [r3, #0]
	if (USER_SPI_write_dma_cplt() != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f7fd fb22 	bl	80097e8 <_ZN6FatDMA23USER_SPI_write_dma_cpltEv>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	bf14      	ite	ne
 800c1aa:	2301      	movne	r3, #1
 800c1ac:	2300      	moveq	r3, #0
 800c1ae:	b2db      	uxtb	r3, r3
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d006      	beq.n	800c1c2 <_ZN6FatDMA16f_write_dma_cpltEv+0x34>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	755a      	strb	r2, [r3, #21]
 800c1be:	2301      	movs	r3, #1
 800c1c0:	e05b      	b.n	800c27a <_ZN6FatDMA16f_write_dma_cpltEv+0xec>

	wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c1c8:	025a      	lsls	r2, r3, #9
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	wbuff += wcnt; fp->fptr += wcnt; fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt; btw -= wcnt;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c1dc:	441a      	add	r2, r3
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c1ea:	6999      	ldr	r1, [r3, #24]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c1f8:	440a      	add	r2, r1
 800c1fa:	619a      	str	r2, [r3, #24]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c202:	699a      	ldr	r2, [r3, #24]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d904      	bls.n	800c21a <_ZN6FatDMA16f_write_dma_cpltEv+0x8c>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c216:	699b      	ldr	r3, [r3, #24]
 800c218:	e003      	b.n	800c222 <_ZN6FatDMA16f_write_dma_cpltEv+0x94>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c220:	68db      	ldr	r3, [r3, #12]
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 800c228:	60d3      	str	r3, [r2, #12]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	689b      	ldr	r3, [r3, #8]
 800c22e:	6819      	ldr	r1, [r3, #0]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	689b      	ldr	r3, [r3, #8]
 800c23a:	440a      	add	r2, r1
 800c23c:	601a      	str	r2, [r3, #0]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c24a:	1ad2      	subs	r2, r2, r3
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	if(btw) f_write_dma_loop();
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d002      	beq.n	800c262 <_ZN6FatDMA16f_write_dma_cpltEv+0xd4>
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f7ff fde5 	bl	800be2c <_ZN6FatDMA16f_write_dma_loopEv>

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c268:	7d1a      	ldrb	r2, [r3, #20]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c270:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c274:	b2d2      	uxtb	r2, r2
 800c276:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c278:	2300      	movs	r3, #0
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3708      	adds	r7, #8
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}

0800c282 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c282:	b580      	push	{r7, lr}
 800c284:	b086      	sub	sp, #24
 800c286:	af00      	add	r7, sp, #0
 800c288:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f107 0208 	add.w	r2, r7, #8
 800c290:	4611      	mov	r1, r2
 800c292:	4618      	mov	r0, r3
 800c294:	f7ff f9d8 	bl	800b648 <_ZL8validateP5_FDIDPP5FATFS>
 800c298:	4603      	mov	r3, r0
 800c29a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c29c:	7dfb      	ldrb	r3, [r7, #23]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d16d      	bne.n	800c37e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	7d1b      	ldrb	r3, [r3, #20]
 800c2a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d067      	beq.n	800c37e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	7d1b      	ldrb	r3, [r3, #20]
 800c2b2:	b25b      	sxtb	r3, r3
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	da1a      	bge.n	800c2ee <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	7858      	ldrb	r0, [r3, #1]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6a1a      	ldr	r2, [r3, #32]
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	f7fd fc9c 	bl	8009c04 <disk_write>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	bf14      	ite	ne
 800c2d2:	2301      	movne	r3, #1
 800c2d4:	2300      	moveq	r3, #0
 800c2d6:	b2db      	uxtb	r3, r3
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d001      	beq.n	800c2e0 <f_sync+0x5e>
 800c2dc:	2301      	movs	r3, #1
 800c2de:	e04f      	b.n	800c380 <f_sync+0xfe>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	7d1b      	ldrb	r3, [r3, #20]
 800c2e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2e8:	b2da      	uxtb	r2, r3
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c2ee:	f7fc fc59 	bl	8008ba4 <get_fattime>
 800c2f2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c2f4:	68ba      	ldr	r2, [r7, #8]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	4610      	mov	r0, r2
 800c2fe:	f7fd ff8a 	bl	800a216 <_ZL11move_windowP5FATFSm>
 800c302:	4603      	mov	r3, r0
 800c304:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c306:	7dfb      	ldrb	r3, [r7, #23]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d138      	bne.n	800c37e <f_sync+0xfc>
					dir = fp->dir_ptr;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c310:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	330b      	adds	r3, #11
 800c316:	781a      	ldrb	r2, [r3, #0]
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	330b      	adds	r3, #11
 800c31c:	f042 0220 	orr.w	r2, r2, #32
 800c320:	b2d2      	uxtb	r2, r2
 800c322:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6818      	ldr	r0, [r3, #0]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	689b      	ldr	r3, [r3, #8]
 800c32c:	461a      	mov	r2, r3
 800c32e:	68f9      	ldr	r1, [r7, #12]
 800c330:	f7fe fcbe 	bl	800acb0 <_ZL8st_clustP5FATFSPhm>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f103 021c 	add.w	r2, r3, #28
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	68db      	ldr	r3, [r3, #12]
 800c33e:	4619      	mov	r1, r3
 800c340:	4610      	mov	r0, r2
 800c342:	f7fd fcf3 	bl	8009d2c <_ZL8st_dwordPhm>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	3316      	adds	r3, #22
 800c34a:	6939      	ldr	r1, [r7, #16]
 800c34c:	4618      	mov	r0, r3
 800c34e:	f7fd fced 	bl	8009d2c <_ZL8st_dwordPhm>
					st_word(dir + DIR_LstAccDate, 0);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	3312      	adds	r3, #18
 800c356:	2100      	movs	r1, #0
 800c358:	4618      	mov	r0, r3
 800c35a:	f7fd fccc 	bl	8009cf6 <_ZL7st_wordPht>
					fs->wflag = 1;
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	2201      	movs	r2, #1
 800c362:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	4618      	mov	r0, r3
 800c368:	f7fd ff88 	bl	800a27c <_ZL7sync_fsP5FATFS>
 800c36c:	4603      	mov	r3, r0
 800c36e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	7d1b      	ldrb	r3, [r3, #20]
 800c374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c378:	b2da      	uxtb	r2, r3
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c37e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c380:	4618      	mov	r0, r3
 800c382:	3718      	adds	r7, #24
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b084      	sub	sp, #16
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f7ff ff76 	bl	800c282 <f_sync>
 800c396:	4603      	mov	r3, r0
 800c398:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c39a:	7bfb      	ldrb	r3, [r7, #15]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d118      	bne.n	800c3d2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f107 0208 	add.w	r2, r7, #8
 800c3a6:	4611      	mov	r1, r2
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f7ff f94d 	bl	800b648 <_ZL8validateP5_FDIDPP5FATFS>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c3b2:	7bfb      	ldrb	r3, [r7, #15]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d10c      	bne.n	800c3d2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	691b      	ldr	r3, [r3, #16]
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f7fd fe7d 	bl	800a0bc <_ZL8dec_lockj>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c3c6:	7bfb      	ldrb	r3, [r7, #15]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d102      	bne.n	800c3d2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c3d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3710      	adds	r7, #16
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b087      	sub	sp, #28
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	60f8      	str	r0, [r7, #12]
 800c3e4:	60b9      	str	r1, [r7, #8]
 800c3e6:	4613      	mov	r3, r2
 800c3e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c3f2:	4b1f      	ldr	r3, [pc, #124]	; (800c470 <FATFS_LinkDriverEx+0x94>)
 800c3f4:	7a5b      	ldrb	r3, [r3, #9]
 800c3f6:	b2db      	uxtb	r3, r3
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d131      	bne.n	800c460 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c3fc:	4b1c      	ldr	r3, [pc, #112]	; (800c470 <FATFS_LinkDriverEx+0x94>)
 800c3fe:	7a5b      	ldrb	r3, [r3, #9]
 800c400:	b2db      	uxtb	r3, r3
 800c402:	461a      	mov	r2, r3
 800c404:	4b1a      	ldr	r3, [pc, #104]	; (800c470 <FATFS_LinkDriverEx+0x94>)
 800c406:	2100      	movs	r1, #0
 800c408:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c40a:	4b19      	ldr	r3, [pc, #100]	; (800c470 <FATFS_LinkDriverEx+0x94>)
 800c40c:	7a5b      	ldrb	r3, [r3, #9]
 800c40e:	b2db      	uxtb	r3, r3
 800c410:	4a17      	ldr	r2, [pc, #92]	; (800c470 <FATFS_LinkDriverEx+0x94>)
 800c412:	009b      	lsls	r3, r3, #2
 800c414:	4413      	add	r3, r2
 800c416:	68fa      	ldr	r2, [r7, #12]
 800c418:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c41a:	4b15      	ldr	r3, [pc, #84]	; (800c470 <FATFS_LinkDriverEx+0x94>)
 800c41c:	7a5b      	ldrb	r3, [r3, #9]
 800c41e:	b2db      	uxtb	r3, r3
 800c420:	461a      	mov	r2, r3
 800c422:	4b13      	ldr	r3, [pc, #76]	; (800c470 <FATFS_LinkDriverEx+0x94>)
 800c424:	4413      	add	r3, r2
 800c426:	79fa      	ldrb	r2, [r7, #7]
 800c428:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c42a:	4b11      	ldr	r3, [pc, #68]	; (800c470 <FATFS_LinkDriverEx+0x94>)
 800c42c:	7a5b      	ldrb	r3, [r3, #9]
 800c42e:	b2db      	uxtb	r3, r3
 800c430:	1c5a      	adds	r2, r3, #1
 800c432:	b2d1      	uxtb	r1, r2
 800c434:	4a0e      	ldr	r2, [pc, #56]	; (800c470 <FATFS_LinkDriverEx+0x94>)
 800c436:	7251      	strb	r1, [r2, #9]
 800c438:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c43a:	7dbb      	ldrb	r3, [r7, #22]
 800c43c:	3330      	adds	r3, #48	; 0x30
 800c43e:	b2da      	uxtb	r2, r3
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	3301      	adds	r3, #1
 800c448:	223a      	movs	r2, #58	; 0x3a
 800c44a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	3302      	adds	r3, #2
 800c450:	222f      	movs	r2, #47	; 0x2f
 800c452:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	3303      	adds	r3, #3
 800c458:	2200      	movs	r2, #0
 800c45a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c45c:	2300      	movs	r3, #0
 800c45e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c460:	7dfb      	ldrb	r3, [r7, #23]
}
 800c462:	4618      	mov	r0, r3
 800c464:	371c      	adds	r7, #28
 800c466:	46bd      	mov	sp, r7
 800c468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46c:	4770      	bx	lr
 800c46e:	bf00      	nop
 800c470:	24001290 	.word	0x24001290

0800c474 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c47e:	2200      	movs	r2, #0
 800c480:	6839      	ldr	r1, [r7, #0]
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f7ff ffaa 	bl	800c3dc <FATFS_LinkDriverEx>
 800c488:	4603      	mov	r3, r0
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3708      	adds	r7, #8
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
	...

0800c494 <__errno>:
 800c494:	4b01      	ldr	r3, [pc, #4]	; (800c49c <__errno+0x8>)
 800c496:	6818      	ldr	r0, [r3, #0]
 800c498:	4770      	bx	lr
 800c49a:	bf00      	nop
 800c49c:	2400002c 	.word	0x2400002c

0800c4a0 <__libc_init_array>:
 800c4a0:	b570      	push	{r4, r5, r6, lr}
 800c4a2:	4e0d      	ldr	r6, [pc, #52]	; (800c4d8 <__libc_init_array+0x38>)
 800c4a4:	4c0d      	ldr	r4, [pc, #52]	; (800c4dc <__libc_init_array+0x3c>)
 800c4a6:	1ba4      	subs	r4, r4, r6
 800c4a8:	10a4      	asrs	r4, r4, #2
 800c4aa:	2500      	movs	r5, #0
 800c4ac:	42a5      	cmp	r5, r4
 800c4ae:	d109      	bne.n	800c4c4 <__libc_init_array+0x24>
 800c4b0:	4e0b      	ldr	r6, [pc, #44]	; (800c4e0 <__libc_init_array+0x40>)
 800c4b2:	4c0c      	ldr	r4, [pc, #48]	; (800c4e4 <__libc_init_array+0x44>)
 800c4b4:	f000 fc42 	bl	800cd3c <_init>
 800c4b8:	1ba4      	subs	r4, r4, r6
 800c4ba:	10a4      	asrs	r4, r4, #2
 800c4bc:	2500      	movs	r5, #0
 800c4be:	42a5      	cmp	r5, r4
 800c4c0:	d105      	bne.n	800c4ce <__libc_init_array+0x2e>
 800c4c2:	bd70      	pop	{r4, r5, r6, pc}
 800c4c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c4c8:	4798      	blx	r3
 800c4ca:	3501      	adds	r5, #1
 800c4cc:	e7ee      	b.n	800c4ac <__libc_init_array+0xc>
 800c4ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c4d2:	4798      	blx	r3
 800c4d4:	3501      	adds	r5, #1
 800c4d6:	e7f2      	b.n	800c4be <__libc_init_array+0x1e>
 800c4d8:	0800cff8 	.word	0x0800cff8
 800c4dc:	0800cff8 	.word	0x0800cff8
 800c4e0:	0800cff8 	.word	0x0800cff8
 800c4e4:	0800d000 	.word	0x0800d000

0800c4e8 <memcpy>:
 800c4e8:	b510      	push	{r4, lr}
 800c4ea:	1e43      	subs	r3, r0, #1
 800c4ec:	440a      	add	r2, r1
 800c4ee:	4291      	cmp	r1, r2
 800c4f0:	d100      	bne.n	800c4f4 <memcpy+0xc>
 800c4f2:	bd10      	pop	{r4, pc}
 800c4f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c4fc:	e7f7      	b.n	800c4ee <memcpy+0x6>

0800c4fe <memset>:
 800c4fe:	4402      	add	r2, r0
 800c500:	4603      	mov	r3, r0
 800c502:	4293      	cmp	r3, r2
 800c504:	d100      	bne.n	800c508 <memset+0xa>
 800c506:	4770      	bx	lr
 800c508:	f803 1b01 	strb.w	r1, [r3], #1
 800c50c:	e7f9      	b.n	800c502 <memset+0x4>

0800c50e <_vsniprintf_r>:
 800c50e:	b530      	push	{r4, r5, lr}
 800c510:	1e14      	subs	r4, r2, #0
 800c512:	4605      	mov	r5, r0
 800c514:	b09b      	sub	sp, #108	; 0x6c
 800c516:	4618      	mov	r0, r3
 800c518:	da05      	bge.n	800c526 <_vsniprintf_r+0x18>
 800c51a:	238b      	movs	r3, #139	; 0x8b
 800c51c:	602b      	str	r3, [r5, #0]
 800c51e:	f04f 30ff 	mov.w	r0, #4294967295
 800c522:	b01b      	add	sp, #108	; 0x6c
 800c524:	bd30      	pop	{r4, r5, pc}
 800c526:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c52a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c52e:	bf14      	ite	ne
 800c530:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c534:	4623      	moveq	r3, r4
 800c536:	9302      	str	r3, [sp, #8]
 800c538:	9305      	str	r3, [sp, #20]
 800c53a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c53e:	9100      	str	r1, [sp, #0]
 800c540:	9104      	str	r1, [sp, #16]
 800c542:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c546:	4602      	mov	r2, r0
 800c548:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c54a:	4669      	mov	r1, sp
 800c54c:	4628      	mov	r0, r5
 800c54e:	f000 f873 	bl	800c638 <_svfiprintf_r>
 800c552:	1c43      	adds	r3, r0, #1
 800c554:	bfbc      	itt	lt
 800c556:	238b      	movlt	r3, #139	; 0x8b
 800c558:	602b      	strlt	r3, [r5, #0]
 800c55a:	2c00      	cmp	r4, #0
 800c55c:	d0e1      	beq.n	800c522 <_vsniprintf_r+0x14>
 800c55e:	9b00      	ldr	r3, [sp, #0]
 800c560:	2200      	movs	r2, #0
 800c562:	701a      	strb	r2, [r3, #0]
 800c564:	e7dd      	b.n	800c522 <_vsniprintf_r+0x14>
	...

0800c568 <vsniprintf>:
 800c568:	b507      	push	{r0, r1, r2, lr}
 800c56a:	9300      	str	r3, [sp, #0]
 800c56c:	4613      	mov	r3, r2
 800c56e:	460a      	mov	r2, r1
 800c570:	4601      	mov	r1, r0
 800c572:	4803      	ldr	r0, [pc, #12]	; (800c580 <vsniprintf+0x18>)
 800c574:	6800      	ldr	r0, [r0, #0]
 800c576:	f7ff ffca 	bl	800c50e <_vsniprintf_r>
 800c57a:	b003      	add	sp, #12
 800c57c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c580:	2400002c 	.word	0x2400002c

0800c584 <__ssputs_r>:
 800c584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c588:	688e      	ldr	r6, [r1, #8]
 800c58a:	429e      	cmp	r6, r3
 800c58c:	4682      	mov	sl, r0
 800c58e:	460c      	mov	r4, r1
 800c590:	4690      	mov	r8, r2
 800c592:	4699      	mov	r9, r3
 800c594:	d837      	bhi.n	800c606 <__ssputs_r+0x82>
 800c596:	898a      	ldrh	r2, [r1, #12]
 800c598:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c59c:	d031      	beq.n	800c602 <__ssputs_r+0x7e>
 800c59e:	6825      	ldr	r5, [r4, #0]
 800c5a0:	6909      	ldr	r1, [r1, #16]
 800c5a2:	1a6f      	subs	r7, r5, r1
 800c5a4:	6965      	ldr	r5, [r4, #20]
 800c5a6:	2302      	movs	r3, #2
 800c5a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5ac:	fb95 f5f3 	sdiv	r5, r5, r3
 800c5b0:	f109 0301 	add.w	r3, r9, #1
 800c5b4:	443b      	add	r3, r7
 800c5b6:	429d      	cmp	r5, r3
 800c5b8:	bf38      	it	cc
 800c5ba:	461d      	movcc	r5, r3
 800c5bc:	0553      	lsls	r3, r2, #21
 800c5be:	d530      	bpl.n	800c622 <__ssputs_r+0x9e>
 800c5c0:	4629      	mov	r1, r5
 800c5c2:	f000 fb21 	bl	800cc08 <_malloc_r>
 800c5c6:	4606      	mov	r6, r0
 800c5c8:	b950      	cbnz	r0, 800c5e0 <__ssputs_r+0x5c>
 800c5ca:	230c      	movs	r3, #12
 800c5cc:	f8ca 3000 	str.w	r3, [sl]
 800c5d0:	89a3      	ldrh	r3, [r4, #12]
 800c5d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5d6:	81a3      	strh	r3, [r4, #12]
 800c5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5e0:	463a      	mov	r2, r7
 800c5e2:	6921      	ldr	r1, [r4, #16]
 800c5e4:	f7ff ff80 	bl	800c4e8 <memcpy>
 800c5e8:	89a3      	ldrh	r3, [r4, #12]
 800c5ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c5ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5f2:	81a3      	strh	r3, [r4, #12]
 800c5f4:	6126      	str	r6, [r4, #16]
 800c5f6:	6165      	str	r5, [r4, #20]
 800c5f8:	443e      	add	r6, r7
 800c5fa:	1bed      	subs	r5, r5, r7
 800c5fc:	6026      	str	r6, [r4, #0]
 800c5fe:	60a5      	str	r5, [r4, #8]
 800c600:	464e      	mov	r6, r9
 800c602:	454e      	cmp	r6, r9
 800c604:	d900      	bls.n	800c608 <__ssputs_r+0x84>
 800c606:	464e      	mov	r6, r9
 800c608:	4632      	mov	r2, r6
 800c60a:	4641      	mov	r1, r8
 800c60c:	6820      	ldr	r0, [r4, #0]
 800c60e:	f000 fa93 	bl	800cb38 <memmove>
 800c612:	68a3      	ldr	r3, [r4, #8]
 800c614:	1b9b      	subs	r3, r3, r6
 800c616:	60a3      	str	r3, [r4, #8]
 800c618:	6823      	ldr	r3, [r4, #0]
 800c61a:	441e      	add	r6, r3
 800c61c:	6026      	str	r6, [r4, #0]
 800c61e:	2000      	movs	r0, #0
 800c620:	e7dc      	b.n	800c5dc <__ssputs_r+0x58>
 800c622:	462a      	mov	r2, r5
 800c624:	f000 fb4a 	bl	800ccbc <_realloc_r>
 800c628:	4606      	mov	r6, r0
 800c62a:	2800      	cmp	r0, #0
 800c62c:	d1e2      	bne.n	800c5f4 <__ssputs_r+0x70>
 800c62e:	6921      	ldr	r1, [r4, #16]
 800c630:	4650      	mov	r0, sl
 800c632:	f000 fa9b 	bl	800cb6c <_free_r>
 800c636:	e7c8      	b.n	800c5ca <__ssputs_r+0x46>

0800c638 <_svfiprintf_r>:
 800c638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c63c:	461d      	mov	r5, r3
 800c63e:	898b      	ldrh	r3, [r1, #12]
 800c640:	061f      	lsls	r7, r3, #24
 800c642:	b09d      	sub	sp, #116	; 0x74
 800c644:	4680      	mov	r8, r0
 800c646:	460c      	mov	r4, r1
 800c648:	4616      	mov	r6, r2
 800c64a:	d50f      	bpl.n	800c66c <_svfiprintf_r+0x34>
 800c64c:	690b      	ldr	r3, [r1, #16]
 800c64e:	b96b      	cbnz	r3, 800c66c <_svfiprintf_r+0x34>
 800c650:	2140      	movs	r1, #64	; 0x40
 800c652:	f000 fad9 	bl	800cc08 <_malloc_r>
 800c656:	6020      	str	r0, [r4, #0]
 800c658:	6120      	str	r0, [r4, #16]
 800c65a:	b928      	cbnz	r0, 800c668 <_svfiprintf_r+0x30>
 800c65c:	230c      	movs	r3, #12
 800c65e:	f8c8 3000 	str.w	r3, [r8]
 800c662:	f04f 30ff 	mov.w	r0, #4294967295
 800c666:	e0c8      	b.n	800c7fa <_svfiprintf_r+0x1c2>
 800c668:	2340      	movs	r3, #64	; 0x40
 800c66a:	6163      	str	r3, [r4, #20]
 800c66c:	2300      	movs	r3, #0
 800c66e:	9309      	str	r3, [sp, #36]	; 0x24
 800c670:	2320      	movs	r3, #32
 800c672:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c676:	2330      	movs	r3, #48	; 0x30
 800c678:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c67c:	9503      	str	r5, [sp, #12]
 800c67e:	f04f 0b01 	mov.w	fp, #1
 800c682:	4637      	mov	r7, r6
 800c684:	463d      	mov	r5, r7
 800c686:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c68a:	b10b      	cbz	r3, 800c690 <_svfiprintf_r+0x58>
 800c68c:	2b25      	cmp	r3, #37	; 0x25
 800c68e:	d13e      	bne.n	800c70e <_svfiprintf_r+0xd6>
 800c690:	ebb7 0a06 	subs.w	sl, r7, r6
 800c694:	d00b      	beq.n	800c6ae <_svfiprintf_r+0x76>
 800c696:	4653      	mov	r3, sl
 800c698:	4632      	mov	r2, r6
 800c69a:	4621      	mov	r1, r4
 800c69c:	4640      	mov	r0, r8
 800c69e:	f7ff ff71 	bl	800c584 <__ssputs_r>
 800c6a2:	3001      	adds	r0, #1
 800c6a4:	f000 80a4 	beq.w	800c7f0 <_svfiprintf_r+0x1b8>
 800c6a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6aa:	4453      	add	r3, sl
 800c6ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c6ae:	783b      	ldrb	r3, [r7, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	f000 809d 	beq.w	800c7f0 <_svfiprintf_r+0x1b8>
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	f04f 32ff 	mov.w	r2, #4294967295
 800c6bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6c0:	9304      	str	r3, [sp, #16]
 800c6c2:	9307      	str	r3, [sp, #28]
 800c6c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6c8:	931a      	str	r3, [sp, #104]	; 0x68
 800c6ca:	462f      	mov	r7, r5
 800c6cc:	2205      	movs	r2, #5
 800c6ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c6d2:	4850      	ldr	r0, [pc, #320]	; (800c814 <_svfiprintf_r+0x1dc>)
 800c6d4:	f7f3 fe0c 	bl	80002f0 <memchr>
 800c6d8:	9b04      	ldr	r3, [sp, #16]
 800c6da:	b9d0      	cbnz	r0, 800c712 <_svfiprintf_r+0xda>
 800c6dc:	06d9      	lsls	r1, r3, #27
 800c6de:	bf44      	itt	mi
 800c6e0:	2220      	movmi	r2, #32
 800c6e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c6e6:	071a      	lsls	r2, r3, #28
 800c6e8:	bf44      	itt	mi
 800c6ea:	222b      	movmi	r2, #43	; 0x2b
 800c6ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c6f0:	782a      	ldrb	r2, [r5, #0]
 800c6f2:	2a2a      	cmp	r2, #42	; 0x2a
 800c6f4:	d015      	beq.n	800c722 <_svfiprintf_r+0xea>
 800c6f6:	9a07      	ldr	r2, [sp, #28]
 800c6f8:	462f      	mov	r7, r5
 800c6fa:	2000      	movs	r0, #0
 800c6fc:	250a      	movs	r5, #10
 800c6fe:	4639      	mov	r1, r7
 800c700:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c704:	3b30      	subs	r3, #48	; 0x30
 800c706:	2b09      	cmp	r3, #9
 800c708:	d94d      	bls.n	800c7a6 <_svfiprintf_r+0x16e>
 800c70a:	b1b8      	cbz	r0, 800c73c <_svfiprintf_r+0x104>
 800c70c:	e00f      	b.n	800c72e <_svfiprintf_r+0xf6>
 800c70e:	462f      	mov	r7, r5
 800c710:	e7b8      	b.n	800c684 <_svfiprintf_r+0x4c>
 800c712:	4a40      	ldr	r2, [pc, #256]	; (800c814 <_svfiprintf_r+0x1dc>)
 800c714:	1a80      	subs	r0, r0, r2
 800c716:	fa0b f000 	lsl.w	r0, fp, r0
 800c71a:	4318      	orrs	r0, r3
 800c71c:	9004      	str	r0, [sp, #16]
 800c71e:	463d      	mov	r5, r7
 800c720:	e7d3      	b.n	800c6ca <_svfiprintf_r+0x92>
 800c722:	9a03      	ldr	r2, [sp, #12]
 800c724:	1d11      	adds	r1, r2, #4
 800c726:	6812      	ldr	r2, [r2, #0]
 800c728:	9103      	str	r1, [sp, #12]
 800c72a:	2a00      	cmp	r2, #0
 800c72c:	db01      	blt.n	800c732 <_svfiprintf_r+0xfa>
 800c72e:	9207      	str	r2, [sp, #28]
 800c730:	e004      	b.n	800c73c <_svfiprintf_r+0x104>
 800c732:	4252      	negs	r2, r2
 800c734:	f043 0302 	orr.w	r3, r3, #2
 800c738:	9207      	str	r2, [sp, #28]
 800c73a:	9304      	str	r3, [sp, #16]
 800c73c:	783b      	ldrb	r3, [r7, #0]
 800c73e:	2b2e      	cmp	r3, #46	; 0x2e
 800c740:	d10c      	bne.n	800c75c <_svfiprintf_r+0x124>
 800c742:	787b      	ldrb	r3, [r7, #1]
 800c744:	2b2a      	cmp	r3, #42	; 0x2a
 800c746:	d133      	bne.n	800c7b0 <_svfiprintf_r+0x178>
 800c748:	9b03      	ldr	r3, [sp, #12]
 800c74a:	1d1a      	adds	r2, r3, #4
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	9203      	str	r2, [sp, #12]
 800c750:	2b00      	cmp	r3, #0
 800c752:	bfb8      	it	lt
 800c754:	f04f 33ff 	movlt.w	r3, #4294967295
 800c758:	3702      	adds	r7, #2
 800c75a:	9305      	str	r3, [sp, #20]
 800c75c:	4d2e      	ldr	r5, [pc, #184]	; (800c818 <_svfiprintf_r+0x1e0>)
 800c75e:	7839      	ldrb	r1, [r7, #0]
 800c760:	2203      	movs	r2, #3
 800c762:	4628      	mov	r0, r5
 800c764:	f7f3 fdc4 	bl	80002f0 <memchr>
 800c768:	b138      	cbz	r0, 800c77a <_svfiprintf_r+0x142>
 800c76a:	2340      	movs	r3, #64	; 0x40
 800c76c:	1b40      	subs	r0, r0, r5
 800c76e:	fa03 f000 	lsl.w	r0, r3, r0
 800c772:	9b04      	ldr	r3, [sp, #16]
 800c774:	4303      	orrs	r3, r0
 800c776:	3701      	adds	r7, #1
 800c778:	9304      	str	r3, [sp, #16]
 800c77a:	7839      	ldrb	r1, [r7, #0]
 800c77c:	4827      	ldr	r0, [pc, #156]	; (800c81c <_svfiprintf_r+0x1e4>)
 800c77e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c782:	2206      	movs	r2, #6
 800c784:	1c7e      	adds	r6, r7, #1
 800c786:	f7f3 fdb3 	bl	80002f0 <memchr>
 800c78a:	2800      	cmp	r0, #0
 800c78c:	d038      	beq.n	800c800 <_svfiprintf_r+0x1c8>
 800c78e:	4b24      	ldr	r3, [pc, #144]	; (800c820 <_svfiprintf_r+0x1e8>)
 800c790:	bb13      	cbnz	r3, 800c7d8 <_svfiprintf_r+0x1a0>
 800c792:	9b03      	ldr	r3, [sp, #12]
 800c794:	3307      	adds	r3, #7
 800c796:	f023 0307 	bic.w	r3, r3, #7
 800c79a:	3308      	adds	r3, #8
 800c79c:	9303      	str	r3, [sp, #12]
 800c79e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7a0:	444b      	add	r3, r9
 800c7a2:	9309      	str	r3, [sp, #36]	; 0x24
 800c7a4:	e76d      	b.n	800c682 <_svfiprintf_r+0x4a>
 800c7a6:	fb05 3202 	mla	r2, r5, r2, r3
 800c7aa:	2001      	movs	r0, #1
 800c7ac:	460f      	mov	r7, r1
 800c7ae:	e7a6      	b.n	800c6fe <_svfiprintf_r+0xc6>
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	3701      	adds	r7, #1
 800c7b4:	9305      	str	r3, [sp, #20]
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	250a      	movs	r5, #10
 800c7ba:	4638      	mov	r0, r7
 800c7bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7c0:	3a30      	subs	r2, #48	; 0x30
 800c7c2:	2a09      	cmp	r2, #9
 800c7c4:	d903      	bls.n	800c7ce <_svfiprintf_r+0x196>
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d0c8      	beq.n	800c75c <_svfiprintf_r+0x124>
 800c7ca:	9105      	str	r1, [sp, #20]
 800c7cc:	e7c6      	b.n	800c75c <_svfiprintf_r+0x124>
 800c7ce:	fb05 2101 	mla	r1, r5, r1, r2
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	4607      	mov	r7, r0
 800c7d6:	e7f0      	b.n	800c7ba <_svfiprintf_r+0x182>
 800c7d8:	ab03      	add	r3, sp, #12
 800c7da:	9300      	str	r3, [sp, #0]
 800c7dc:	4622      	mov	r2, r4
 800c7de:	4b11      	ldr	r3, [pc, #68]	; (800c824 <_svfiprintf_r+0x1ec>)
 800c7e0:	a904      	add	r1, sp, #16
 800c7e2:	4640      	mov	r0, r8
 800c7e4:	f3af 8000 	nop.w
 800c7e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c7ec:	4681      	mov	r9, r0
 800c7ee:	d1d6      	bne.n	800c79e <_svfiprintf_r+0x166>
 800c7f0:	89a3      	ldrh	r3, [r4, #12]
 800c7f2:	065b      	lsls	r3, r3, #25
 800c7f4:	f53f af35 	bmi.w	800c662 <_svfiprintf_r+0x2a>
 800c7f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7fa:	b01d      	add	sp, #116	; 0x74
 800c7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c800:	ab03      	add	r3, sp, #12
 800c802:	9300      	str	r3, [sp, #0]
 800c804:	4622      	mov	r2, r4
 800c806:	4b07      	ldr	r3, [pc, #28]	; (800c824 <_svfiprintf_r+0x1ec>)
 800c808:	a904      	add	r1, sp, #16
 800c80a:	4640      	mov	r0, r8
 800c80c:	f000 f882 	bl	800c914 <_printf_i>
 800c810:	e7ea      	b.n	800c7e8 <_svfiprintf_r+0x1b0>
 800c812:	bf00      	nop
 800c814:	0800cfbc 	.word	0x0800cfbc
 800c818:	0800cfc2 	.word	0x0800cfc2
 800c81c:	0800cfc6 	.word	0x0800cfc6
 800c820:	00000000 	.word	0x00000000
 800c824:	0800c585 	.word	0x0800c585

0800c828 <_printf_common>:
 800c828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c82c:	4691      	mov	r9, r2
 800c82e:	461f      	mov	r7, r3
 800c830:	688a      	ldr	r2, [r1, #8]
 800c832:	690b      	ldr	r3, [r1, #16]
 800c834:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c838:	4293      	cmp	r3, r2
 800c83a:	bfb8      	it	lt
 800c83c:	4613      	movlt	r3, r2
 800c83e:	f8c9 3000 	str.w	r3, [r9]
 800c842:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c846:	4606      	mov	r6, r0
 800c848:	460c      	mov	r4, r1
 800c84a:	b112      	cbz	r2, 800c852 <_printf_common+0x2a>
 800c84c:	3301      	adds	r3, #1
 800c84e:	f8c9 3000 	str.w	r3, [r9]
 800c852:	6823      	ldr	r3, [r4, #0]
 800c854:	0699      	lsls	r1, r3, #26
 800c856:	bf42      	ittt	mi
 800c858:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c85c:	3302      	addmi	r3, #2
 800c85e:	f8c9 3000 	strmi.w	r3, [r9]
 800c862:	6825      	ldr	r5, [r4, #0]
 800c864:	f015 0506 	ands.w	r5, r5, #6
 800c868:	d107      	bne.n	800c87a <_printf_common+0x52>
 800c86a:	f104 0a19 	add.w	sl, r4, #25
 800c86e:	68e3      	ldr	r3, [r4, #12]
 800c870:	f8d9 2000 	ldr.w	r2, [r9]
 800c874:	1a9b      	subs	r3, r3, r2
 800c876:	42ab      	cmp	r3, r5
 800c878:	dc28      	bgt.n	800c8cc <_printf_common+0xa4>
 800c87a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c87e:	6822      	ldr	r2, [r4, #0]
 800c880:	3300      	adds	r3, #0
 800c882:	bf18      	it	ne
 800c884:	2301      	movne	r3, #1
 800c886:	0692      	lsls	r2, r2, #26
 800c888:	d42d      	bmi.n	800c8e6 <_printf_common+0xbe>
 800c88a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c88e:	4639      	mov	r1, r7
 800c890:	4630      	mov	r0, r6
 800c892:	47c0      	blx	r8
 800c894:	3001      	adds	r0, #1
 800c896:	d020      	beq.n	800c8da <_printf_common+0xb2>
 800c898:	6823      	ldr	r3, [r4, #0]
 800c89a:	68e5      	ldr	r5, [r4, #12]
 800c89c:	f8d9 2000 	ldr.w	r2, [r9]
 800c8a0:	f003 0306 	and.w	r3, r3, #6
 800c8a4:	2b04      	cmp	r3, #4
 800c8a6:	bf08      	it	eq
 800c8a8:	1aad      	subeq	r5, r5, r2
 800c8aa:	68a3      	ldr	r3, [r4, #8]
 800c8ac:	6922      	ldr	r2, [r4, #16]
 800c8ae:	bf0c      	ite	eq
 800c8b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8b4:	2500      	movne	r5, #0
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	bfc4      	itt	gt
 800c8ba:	1a9b      	subgt	r3, r3, r2
 800c8bc:	18ed      	addgt	r5, r5, r3
 800c8be:	f04f 0900 	mov.w	r9, #0
 800c8c2:	341a      	adds	r4, #26
 800c8c4:	454d      	cmp	r5, r9
 800c8c6:	d11a      	bne.n	800c8fe <_printf_common+0xd6>
 800c8c8:	2000      	movs	r0, #0
 800c8ca:	e008      	b.n	800c8de <_printf_common+0xb6>
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	4652      	mov	r2, sl
 800c8d0:	4639      	mov	r1, r7
 800c8d2:	4630      	mov	r0, r6
 800c8d4:	47c0      	blx	r8
 800c8d6:	3001      	adds	r0, #1
 800c8d8:	d103      	bne.n	800c8e2 <_printf_common+0xba>
 800c8da:	f04f 30ff 	mov.w	r0, #4294967295
 800c8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8e2:	3501      	adds	r5, #1
 800c8e4:	e7c3      	b.n	800c86e <_printf_common+0x46>
 800c8e6:	18e1      	adds	r1, r4, r3
 800c8e8:	1c5a      	adds	r2, r3, #1
 800c8ea:	2030      	movs	r0, #48	; 0x30
 800c8ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c8f0:	4422      	add	r2, r4
 800c8f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c8fa:	3302      	adds	r3, #2
 800c8fc:	e7c5      	b.n	800c88a <_printf_common+0x62>
 800c8fe:	2301      	movs	r3, #1
 800c900:	4622      	mov	r2, r4
 800c902:	4639      	mov	r1, r7
 800c904:	4630      	mov	r0, r6
 800c906:	47c0      	blx	r8
 800c908:	3001      	adds	r0, #1
 800c90a:	d0e6      	beq.n	800c8da <_printf_common+0xb2>
 800c90c:	f109 0901 	add.w	r9, r9, #1
 800c910:	e7d8      	b.n	800c8c4 <_printf_common+0x9c>
	...

0800c914 <_printf_i>:
 800c914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c918:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c91c:	460c      	mov	r4, r1
 800c91e:	7e09      	ldrb	r1, [r1, #24]
 800c920:	b085      	sub	sp, #20
 800c922:	296e      	cmp	r1, #110	; 0x6e
 800c924:	4617      	mov	r7, r2
 800c926:	4606      	mov	r6, r0
 800c928:	4698      	mov	r8, r3
 800c92a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c92c:	f000 80b3 	beq.w	800ca96 <_printf_i+0x182>
 800c930:	d822      	bhi.n	800c978 <_printf_i+0x64>
 800c932:	2963      	cmp	r1, #99	; 0x63
 800c934:	d036      	beq.n	800c9a4 <_printf_i+0x90>
 800c936:	d80a      	bhi.n	800c94e <_printf_i+0x3a>
 800c938:	2900      	cmp	r1, #0
 800c93a:	f000 80b9 	beq.w	800cab0 <_printf_i+0x19c>
 800c93e:	2958      	cmp	r1, #88	; 0x58
 800c940:	f000 8083 	beq.w	800ca4a <_printf_i+0x136>
 800c944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c948:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c94c:	e032      	b.n	800c9b4 <_printf_i+0xa0>
 800c94e:	2964      	cmp	r1, #100	; 0x64
 800c950:	d001      	beq.n	800c956 <_printf_i+0x42>
 800c952:	2969      	cmp	r1, #105	; 0x69
 800c954:	d1f6      	bne.n	800c944 <_printf_i+0x30>
 800c956:	6820      	ldr	r0, [r4, #0]
 800c958:	6813      	ldr	r3, [r2, #0]
 800c95a:	0605      	lsls	r5, r0, #24
 800c95c:	f103 0104 	add.w	r1, r3, #4
 800c960:	d52a      	bpl.n	800c9b8 <_printf_i+0xa4>
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	6011      	str	r1, [r2, #0]
 800c966:	2b00      	cmp	r3, #0
 800c968:	da03      	bge.n	800c972 <_printf_i+0x5e>
 800c96a:	222d      	movs	r2, #45	; 0x2d
 800c96c:	425b      	negs	r3, r3
 800c96e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c972:	486f      	ldr	r0, [pc, #444]	; (800cb30 <_printf_i+0x21c>)
 800c974:	220a      	movs	r2, #10
 800c976:	e039      	b.n	800c9ec <_printf_i+0xd8>
 800c978:	2973      	cmp	r1, #115	; 0x73
 800c97a:	f000 809d 	beq.w	800cab8 <_printf_i+0x1a4>
 800c97e:	d808      	bhi.n	800c992 <_printf_i+0x7e>
 800c980:	296f      	cmp	r1, #111	; 0x6f
 800c982:	d020      	beq.n	800c9c6 <_printf_i+0xb2>
 800c984:	2970      	cmp	r1, #112	; 0x70
 800c986:	d1dd      	bne.n	800c944 <_printf_i+0x30>
 800c988:	6823      	ldr	r3, [r4, #0]
 800c98a:	f043 0320 	orr.w	r3, r3, #32
 800c98e:	6023      	str	r3, [r4, #0]
 800c990:	e003      	b.n	800c99a <_printf_i+0x86>
 800c992:	2975      	cmp	r1, #117	; 0x75
 800c994:	d017      	beq.n	800c9c6 <_printf_i+0xb2>
 800c996:	2978      	cmp	r1, #120	; 0x78
 800c998:	d1d4      	bne.n	800c944 <_printf_i+0x30>
 800c99a:	2378      	movs	r3, #120	; 0x78
 800c99c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c9a0:	4864      	ldr	r0, [pc, #400]	; (800cb34 <_printf_i+0x220>)
 800c9a2:	e055      	b.n	800ca50 <_printf_i+0x13c>
 800c9a4:	6813      	ldr	r3, [r2, #0]
 800c9a6:	1d19      	adds	r1, r3, #4
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	6011      	str	r1, [r2, #0]
 800c9ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	e08c      	b.n	800cad2 <_printf_i+0x1be>
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	6011      	str	r1, [r2, #0]
 800c9bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c9c0:	bf18      	it	ne
 800c9c2:	b21b      	sxthne	r3, r3
 800c9c4:	e7cf      	b.n	800c966 <_printf_i+0x52>
 800c9c6:	6813      	ldr	r3, [r2, #0]
 800c9c8:	6825      	ldr	r5, [r4, #0]
 800c9ca:	1d18      	adds	r0, r3, #4
 800c9cc:	6010      	str	r0, [r2, #0]
 800c9ce:	0628      	lsls	r0, r5, #24
 800c9d0:	d501      	bpl.n	800c9d6 <_printf_i+0xc2>
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	e002      	b.n	800c9dc <_printf_i+0xc8>
 800c9d6:	0668      	lsls	r0, r5, #25
 800c9d8:	d5fb      	bpl.n	800c9d2 <_printf_i+0xbe>
 800c9da:	881b      	ldrh	r3, [r3, #0]
 800c9dc:	4854      	ldr	r0, [pc, #336]	; (800cb30 <_printf_i+0x21c>)
 800c9de:	296f      	cmp	r1, #111	; 0x6f
 800c9e0:	bf14      	ite	ne
 800c9e2:	220a      	movne	r2, #10
 800c9e4:	2208      	moveq	r2, #8
 800c9e6:	2100      	movs	r1, #0
 800c9e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c9ec:	6865      	ldr	r5, [r4, #4]
 800c9ee:	60a5      	str	r5, [r4, #8]
 800c9f0:	2d00      	cmp	r5, #0
 800c9f2:	f2c0 8095 	blt.w	800cb20 <_printf_i+0x20c>
 800c9f6:	6821      	ldr	r1, [r4, #0]
 800c9f8:	f021 0104 	bic.w	r1, r1, #4
 800c9fc:	6021      	str	r1, [r4, #0]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d13d      	bne.n	800ca7e <_printf_i+0x16a>
 800ca02:	2d00      	cmp	r5, #0
 800ca04:	f040 808e 	bne.w	800cb24 <_printf_i+0x210>
 800ca08:	4665      	mov	r5, ip
 800ca0a:	2a08      	cmp	r2, #8
 800ca0c:	d10b      	bne.n	800ca26 <_printf_i+0x112>
 800ca0e:	6823      	ldr	r3, [r4, #0]
 800ca10:	07db      	lsls	r3, r3, #31
 800ca12:	d508      	bpl.n	800ca26 <_printf_i+0x112>
 800ca14:	6923      	ldr	r3, [r4, #16]
 800ca16:	6862      	ldr	r2, [r4, #4]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	bfde      	ittt	le
 800ca1c:	2330      	movle	r3, #48	; 0x30
 800ca1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca22:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ca26:	ebac 0305 	sub.w	r3, ip, r5
 800ca2a:	6123      	str	r3, [r4, #16]
 800ca2c:	f8cd 8000 	str.w	r8, [sp]
 800ca30:	463b      	mov	r3, r7
 800ca32:	aa03      	add	r2, sp, #12
 800ca34:	4621      	mov	r1, r4
 800ca36:	4630      	mov	r0, r6
 800ca38:	f7ff fef6 	bl	800c828 <_printf_common>
 800ca3c:	3001      	adds	r0, #1
 800ca3e:	d14d      	bne.n	800cadc <_printf_i+0x1c8>
 800ca40:	f04f 30ff 	mov.w	r0, #4294967295
 800ca44:	b005      	add	sp, #20
 800ca46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca4a:	4839      	ldr	r0, [pc, #228]	; (800cb30 <_printf_i+0x21c>)
 800ca4c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ca50:	6813      	ldr	r3, [r2, #0]
 800ca52:	6821      	ldr	r1, [r4, #0]
 800ca54:	1d1d      	adds	r5, r3, #4
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	6015      	str	r5, [r2, #0]
 800ca5a:	060a      	lsls	r2, r1, #24
 800ca5c:	d50b      	bpl.n	800ca76 <_printf_i+0x162>
 800ca5e:	07ca      	lsls	r2, r1, #31
 800ca60:	bf44      	itt	mi
 800ca62:	f041 0120 	orrmi.w	r1, r1, #32
 800ca66:	6021      	strmi	r1, [r4, #0]
 800ca68:	b91b      	cbnz	r3, 800ca72 <_printf_i+0x15e>
 800ca6a:	6822      	ldr	r2, [r4, #0]
 800ca6c:	f022 0220 	bic.w	r2, r2, #32
 800ca70:	6022      	str	r2, [r4, #0]
 800ca72:	2210      	movs	r2, #16
 800ca74:	e7b7      	b.n	800c9e6 <_printf_i+0xd2>
 800ca76:	064d      	lsls	r5, r1, #25
 800ca78:	bf48      	it	mi
 800ca7a:	b29b      	uxthmi	r3, r3
 800ca7c:	e7ef      	b.n	800ca5e <_printf_i+0x14a>
 800ca7e:	4665      	mov	r5, ip
 800ca80:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca84:	fb02 3311 	mls	r3, r2, r1, r3
 800ca88:	5cc3      	ldrb	r3, [r0, r3]
 800ca8a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ca8e:	460b      	mov	r3, r1
 800ca90:	2900      	cmp	r1, #0
 800ca92:	d1f5      	bne.n	800ca80 <_printf_i+0x16c>
 800ca94:	e7b9      	b.n	800ca0a <_printf_i+0xf6>
 800ca96:	6813      	ldr	r3, [r2, #0]
 800ca98:	6825      	ldr	r5, [r4, #0]
 800ca9a:	6961      	ldr	r1, [r4, #20]
 800ca9c:	1d18      	adds	r0, r3, #4
 800ca9e:	6010      	str	r0, [r2, #0]
 800caa0:	0628      	lsls	r0, r5, #24
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	d501      	bpl.n	800caaa <_printf_i+0x196>
 800caa6:	6019      	str	r1, [r3, #0]
 800caa8:	e002      	b.n	800cab0 <_printf_i+0x19c>
 800caaa:	066a      	lsls	r2, r5, #25
 800caac:	d5fb      	bpl.n	800caa6 <_printf_i+0x192>
 800caae:	8019      	strh	r1, [r3, #0]
 800cab0:	2300      	movs	r3, #0
 800cab2:	6123      	str	r3, [r4, #16]
 800cab4:	4665      	mov	r5, ip
 800cab6:	e7b9      	b.n	800ca2c <_printf_i+0x118>
 800cab8:	6813      	ldr	r3, [r2, #0]
 800caba:	1d19      	adds	r1, r3, #4
 800cabc:	6011      	str	r1, [r2, #0]
 800cabe:	681d      	ldr	r5, [r3, #0]
 800cac0:	6862      	ldr	r2, [r4, #4]
 800cac2:	2100      	movs	r1, #0
 800cac4:	4628      	mov	r0, r5
 800cac6:	f7f3 fc13 	bl	80002f0 <memchr>
 800caca:	b108      	cbz	r0, 800cad0 <_printf_i+0x1bc>
 800cacc:	1b40      	subs	r0, r0, r5
 800cace:	6060      	str	r0, [r4, #4]
 800cad0:	6863      	ldr	r3, [r4, #4]
 800cad2:	6123      	str	r3, [r4, #16]
 800cad4:	2300      	movs	r3, #0
 800cad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cada:	e7a7      	b.n	800ca2c <_printf_i+0x118>
 800cadc:	6923      	ldr	r3, [r4, #16]
 800cade:	462a      	mov	r2, r5
 800cae0:	4639      	mov	r1, r7
 800cae2:	4630      	mov	r0, r6
 800cae4:	47c0      	blx	r8
 800cae6:	3001      	adds	r0, #1
 800cae8:	d0aa      	beq.n	800ca40 <_printf_i+0x12c>
 800caea:	6823      	ldr	r3, [r4, #0]
 800caec:	079b      	lsls	r3, r3, #30
 800caee:	d413      	bmi.n	800cb18 <_printf_i+0x204>
 800caf0:	68e0      	ldr	r0, [r4, #12]
 800caf2:	9b03      	ldr	r3, [sp, #12]
 800caf4:	4298      	cmp	r0, r3
 800caf6:	bfb8      	it	lt
 800caf8:	4618      	movlt	r0, r3
 800cafa:	e7a3      	b.n	800ca44 <_printf_i+0x130>
 800cafc:	2301      	movs	r3, #1
 800cafe:	464a      	mov	r2, r9
 800cb00:	4639      	mov	r1, r7
 800cb02:	4630      	mov	r0, r6
 800cb04:	47c0      	blx	r8
 800cb06:	3001      	adds	r0, #1
 800cb08:	d09a      	beq.n	800ca40 <_printf_i+0x12c>
 800cb0a:	3501      	adds	r5, #1
 800cb0c:	68e3      	ldr	r3, [r4, #12]
 800cb0e:	9a03      	ldr	r2, [sp, #12]
 800cb10:	1a9b      	subs	r3, r3, r2
 800cb12:	42ab      	cmp	r3, r5
 800cb14:	dcf2      	bgt.n	800cafc <_printf_i+0x1e8>
 800cb16:	e7eb      	b.n	800caf0 <_printf_i+0x1dc>
 800cb18:	2500      	movs	r5, #0
 800cb1a:	f104 0919 	add.w	r9, r4, #25
 800cb1e:	e7f5      	b.n	800cb0c <_printf_i+0x1f8>
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d1ac      	bne.n	800ca7e <_printf_i+0x16a>
 800cb24:	7803      	ldrb	r3, [r0, #0]
 800cb26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb2e:	e76c      	b.n	800ca0a <_printf_i+0xf6>
 800cb30:	0800cfcd 	.word	0x0800cfcd
 800cb34:	0800cfde 	.word	0x0800cfde

0800cb38 <memmove>:
 800cb38:	4288      	cmp	r0, r1
 800cb3a:	b510      	push	{r4, lr}
 800cb3c:	eb01 0302 	add.w	r3, r1, r2
 800cb40:	d807      	bhi.n	800cb52 <memmove+0x1a>
 800cb42:	1e42      	subs	r2, r0, #1
 800cb44:	4299      	cmp	r1, r3
 800cb46:	d00a      	beq.n	800cb5e <memmove+0x26>
 800cb48:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb4c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800cb50:	e7f8      	b.n	800cb44 <memmove+0xc>
 800cb52:	4283      	cmp	r3, r0
 800cb54:	d9f5      	bls.n	800cb42 <memmove+0xa>
 800cb56:	1881      	adds	r1, r0, r2
 800cb58:	1ad2      	subs	r2, r2, r3
 800cb5a:	42d3      	cmn	r3, r2
 800cb5c:	d100      	bne.n	800cb60 <memmove+0x28>
 800cb5e:	bd10      	pop	{r4, pc}
 800cb60:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb64:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800cb68:	e7f7      	b.n	800cb5a <memmove+0x22>
	...

0800cb6c <_free_r>:
 800cb6c:	b538      	push	{r3, r4, r5, lr}
 800cb6e:	4605      	mov	r5, r0
 800cb70:	2900      	cmp	r1, #0
 800cb72:	d045      	beq.n	800cc00 <_free_r+0x94>
 800cb74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb78:	1f0c      	subs	r4, r1, #4
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	bfb8      	it	lt
 800cb7e:	18e4      	addlt	r4, r4, r3
 800cb80:	f000 f8d2 	bl	800cd28 <__malloc_lock>
 800cb84:	4a1f      	ldr	r2, [pc, #124]	; (800cc04 <_free_r+0x98>)
 800cb86:	6813      	ldr	r3, [r2, #0]
 800cb88:	4610      	mov	r0, r2
 800cb8a:	b933      	cbnz	r3, 800cb9a <_free_r+0x2e>
 800cb8c:	6063      	str	r3, [r4, #4]
 800cb8e:	6014      	str	r4, [r2, #0]
 800cb90:	4628      	mov	r0, r5
 800cb92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb96:	f000 b8c8 	b.w	800cd2a <__malloc_unlock>
 800cb9a:	42a3      	cmp	r3, r4
 800cb9c:	d90c      	bls.n	800cbb8 <_free_r+0x4c>
 800cb9e:	6821      	ldr	r1, [r4, #0]
 800cba0:	1862      	adds	r2, r4, r1
 800cba2:	4293      	cmp	r3, r2
 800cba4:	bf04      	itt	eq
 800cba6:	681a      	ldreq	r2, [r3, #0]
 800cba8:	685b      	ldreq	r3, [r3, #4]
 800cbaa:	6063      	str	r3, [r4, #4]
 800cbac:	bf04      	itt	eq
 800cbae:	1852      	addeq	r2, r2, r1
 800cbb0:	6022      	streq	r2, [r4, #0]
 800cbb2:	6004      	str	r4, [r0, #0]
 800cbb4:	e7ec      	b.n	800cb90 <_free_r+0x24>
 800cbb6:	4613      	mov	r3, r2
 800cbb8:	685a      	ldr	r2, [r3, #4]
 800cbba:	b10a      	cbz	r2, 800cbc0 <_free_r+0x54>
 800cbbc:	42a2      	cmp	r2, r4
 800cbbe:	d9fa      	bls.n	800cbb6 <_free_r+0x4a>
 800cbc0:	6819      	ldr	r1, [r3, #0]
 800cbc2:	1858      	adds	r0, r3, r1
 800cbc4:	42a0      	cmp	r0, r4
 800cbc6:	d10b      	bne.n	800cbe0 <_free_r+0x74>
 800cbc8:	6820      	ldr	r0, [r4, #0]
 800cbca:	4401      	add	r1, r0
 800cbcc:	1858      	adds	r0, r3, r1
 800cbce:	4282      	cmp	r2, r0
 800cbd0:	6019      	str	r1, [r3, #0]
 800cbd2:	d1dd      	bne.n	800cb90 <_free_r+0x24>
 800cbd4:	6810      	ldr	r0, [r2, #0]
 800cbd6:	6852      	ldr	r2, [r2, #4]
 800cbd8:	605a      	str	r2, [r3, #4]
 800cbda:	4401      	add	r1, r0
 800cbdc:	6019      	str	r1, [r3, #0]
 800cbde:	e7d7      	b.n	800cb90 <_free_r+0x24>
 800cbe0:	d902      	bls.n	800cbe8 <_free_r+0x7c>
 800cbe2:	230c      	movs	r3, #12
 800cbe4:	602b      	str	r3, [r5, #0]
 800cbe6:	e7d3      	b.n	800cb90 <_free_r+0x24>
 800cbe8:	6820      	ldr	r0, [r4, #0]
 800cbea:	1821      	adds	r1, r4, r0
 800cbec:	428a      	cmp	r2, r1
 800cbee:	bf04      	itt	eq
 800cbf0:	6811      	ldreq	r1, [r2, #0]
 800cbf2:	6852      	ldreq	r2, [r2, #4]
 800cbf4:	6062      	str	r2, [r4, #4]
 800cbf6:	bf04      	itt	eq
 800cbf8:	1809      	addeq	r1, r1, r0
 800cbfa:	6021      	streq	r1, [r4, #0]
 800cbfc:	605c      	str	r4, [r3, #4]
 800cbfe:	e7c7      	b.n	800cb90 <_free_r+0x24>
 800cc00:	bd38      	pop	{r3, r4, r5, pc}
 800cc02:	bf00      	nop
 800cc04:	2400129c 	.word	0x2400129c

0800cc08 <_malloc_r>:
 800cc08:	b570      	push	{r4, r5, r6, lr}
 800cc0a:	1ccd      	adds	r5, r1, #3
 800cc0c:	f025 0503 	bic.w	r5, r5, #3
 800cc10:	3508      	adds	r5, #8
 800cc12:	2d0c      	cmp	r5, #12
 800cc14:	bf38      	it	cc
 800cc16:	250c      	movcc	r5, #12
 800cc18:	2d00      	cmp	r5, #0
 800cc1a:	4606      	mov	r6, r0
 800cc1c:	db01      	blt.n	800cc22 <_malloc_r+0x1a>
 800cc1e:	42a9      	cmp	r1, r5
 800cc20:	d903      	bls.n	800cc2a <_malloc_r+0x22>
 800cc22:	230c      	movs	r3, #12
 800cc24:	6033      	str	r3, [r6, #0]
 800cc26:	2000      	movs	r0, #0
 800cc28:	bd70      	pop	{r4, r5, r6, pc}
 800cc2a:	f000 f87d 	bl	800cd28 <__malloc_lock>
 800cc2e:	4a21      	ldr	r2, [pc, #132]	; (800ccb4 <_malloc_r+0xac>)
 800cc30:	6814      	ldr	r4, [r2, #0]
 800cc32:	4621      	mov	r1, r4
 800cc34:	b991      	cbnz	r1, 800cc5c <_malloc_r+0x54>
 800cc36:	4c20      	ldr	r4, [pc, #128]	; (800ccb8 <_malloc_r+0xb0>)
 800cc38:	6823      	ldr	r3, [r4, #0]
 800cc3a:	b91b      	cbnz	r3, 800cc44 <_malloc_r+0x3c>
 800cc3c:	4630      	mov	r0, r6
 800cc3e:	f000 f863 	bl	800cd08 <_sbrk_r>
 800cc42:	6020      	str	r0, [r4, #0]
 800cc44:	4629      	mov	r1, r5
 800cc46:	4630      	mov	r0, r6
 800cc48:	f000 f85e 	bl	800cd08 <_sbrk_r>
 800cc4c:	1c43      	adds	r3, r0, #1
 800cc4e:	d124      	bne.n	800cc9a <_malloc_r+0x92>
 800cc50:	230c      	movs	r3, #12
 800cc52:	6033      	str	r3, [r6, #0]
 800cc54:	4630      	mov	r0, r6
 800cc56:	f000 f868 	bl	800cd2a <__malloc_unlock>
 800cc5a:	e7e4      	b.n	800cc26 <_malloc_r+0x1e>
 800cc5c:	680b      	ldr	r3, [r1, #0]
 800cc5e:	1b5b      	subs	r3, r3, r5
 800cc60:	d418      	bmi.n	800cc94 <_malloc_r+0x8c>
 800cc62:	2b0b      	cmp	r3, #11
 800cc64:	d90f      	bls.n	800cc86 <_malloc_r+0x7e>
 800cc66:	600b      	str	r3, [r1, #0]
 800cc68:	50cd      	str	r5, [r1, r3]
 800cc6a:	18cc      	adds	r4, r1, r3
 800cc6c:	4630      	mov	r0, r6
 800cc6e:	f000 f85c 	bl	800cd2a <__malloc_unlock>
 800cc72:	f104 000b 	add.w	r0, r4, #11
 800cc76:	1d23      	adds	r3, r4, #4
 800cc78:	f020 0007 	bic.w	r0, r0, #7
 800cc7c:	1ac3      	subs	r3, r0, r3
 800cc7e:	d0d3      	beq.n	800cc28 <_malloc_r+0x20>
 800cc80:	425a      	negs	r2, r3
 800cc82:	50e2      	str	r2, [r4, r3]
 800cc84:	e7d0      	b.n	800cc28 <_malloc_r+0x20>
 800cc86:	428c      	cmp	r4, r1
 800cc88:	684b      	ldr	r3, [r1, #4]
 800cc8a:	bf16      	itet	ne
 800cc8c:	6063      	strne	r3, [r4, #4]
 800cc8e:	6013      	streq	r3, [r2, #0]
 800cc90:	460c      	movne	r4, r1
 800cc92:	e7eb      	b.n	800cc6c <_malloc_r+0x64>
 800cc94:	460c      	mov	r4, r1
 800cc96:	6849      	ldr	r1, [r1, #4]
 800cc98:	e7cc      	b.n	800cc34 <_malloc_r+0x2c>
 800cc9a:	1cc4      	adds	r4, r0, #3
 800cc9c:	f024 0403 	bic.w	r4, r4, #3
 800cca0:	42a0      	cmp	r0, r4
 800cca2:	d005      	beq.n	800ccb0 <_malloc_r+0xa8>
 800cca4:	1a21      	subs	r1, r4, r0
 800cca6:	4630      	mov	r0, r6
 800cca8:	f000 f82e 	bl	800cd08 <_sbrk_r>
 800ccac:	3001      	adds	r0, #1
 800ccae:	d0cf      	beq.n	800cc50 <_malloc_r+0x48>
 800ccb0:	6025      	str	r5, [r4, #0]
 800ccb2:	e7db      	b.n	800cc6c <_malloc_r+0x64>
 800ccb4:	2400129c 	.word	0x2400129c
 800ccb8:	240012a0 	.word	0x240012a0

0800ccbc <_realloc_r>:
 800ccbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccbe:	4607      	mov	r7, r0
 800ccc0:	4614      	mov	r4, r2
 800ccc2:	460e      	mov	r6, r1
 800ccc4:	b921      	cbnz	r1, 800ccd0 <_realloc_r+0x14>
 800ccc6:	4611      	mov	r1, r2
 800ccc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cccc:	f7ff bf9c 	b.w	800cc08 <_malloc_r>
 800ccd0:	b922      	cbnz	r2, 800ccdc <_realloc_r+0x20>
 800ccd2:	f7ff ff4b 	bl	800cb6c <_free_r>
 800ccd6:	4625      	mov	r5, r4
 800ccd8:	4628      	mov	r0, r5
 800ccda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccdc:	f000 f826 	bl	800cd2c <_malloc_usable_size_r>
 800cce0:	42a0      	cmp	r0, r4
 800cce2:	d20f      	bcs.n	800cd04 <_realloc_r+0x48>
 800cce4:	4621      	mov	r1, r4
 800cce6:	4638      	mov	r0, r7
 800cce8:	f7ff ff8e 	bl	800cc08 <_malloc_r>
 800ccec:	4605      	mov	r5, r0
 800ccee:	2800      	cmp	r0, #0
 800ccf0:	d0f2      	beq.n	800ccd8 <_realloc_r+0x1c>
 800ccf2:	4631      	mov	r1, r6
 800ccf4:	4622      	mov	r2, r4
 800ccf6:	f7ff fbf7 	bl	800c4e8 <memcpy>
 800ccfa:	4631      	mov	r1, r6
 800ccfc:	4638      	mov	r0, r7
 800ccfe:	f7ff ff35 	bl	800cb6c <_free_r>
 800cd02:	e7e9      	b.n	800ccd8 <_realloc_r+0x1c>
 800cd04:	4635      	mov	r5, r6
 800cd06:	e7e7      	b.n	800ccd8 <_realloc_r+0x1c>

0800cd08 <_sbrk_r>:
 800cd08:	b538      	push	{r3, r4, r5, lr}
 800cd0a:	4c06      	ldr	r4, [pc, #24]	; (800cd24 <_sbrk_r+0x1c>)
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	4605      	mov	r5, r0
 800cd10:	4608      	mov	r0, r1
 800cd12:	6023      	str	r3, [r4, #0]
 800cd14:	f7f4 fb0e 	bl	8001334 <_sbrk>
 800cd18:	1c43      	adds	r3, r0, #1
 800cd1a:	d102      	bne.n	800cd22 <_sbrk_r+0x1a>
 800cd1c:	6823      	ldr	r3, [r4, #0]
 800cd1e:	b103      	cbz	r3, 800cd22 <_sbrk_r+0x1a>
 800cd20:	602b      	str	r3, [r5, #0]
 800cd22:	bd38      	pop	{r3, r4, r5, pc}
 800cd24:	24001710 	.word	0x24001710

0800cd28 <__malloc_lock>:
 800cd28:	4770      	bx	lr

0800cd2a <__malloc_unlock>:
 800cd2a:	4770      	bx	lr

0800cd2c <_malloc_usable_size_r>:
 800cd2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd30:	1f18      	subs	r0, r3, #4
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	bfbc      	itt	lt
 800cd36:	580b      	ldrlt	r3, [r1, r0]
 800cd38:	18c0      	addlt	r0, r0, r3
 800cd3a:	4770      	bx	lr

0800cd3c <_init>:
 800cd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd3e:	bf00      	nop
 800cd40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd42:	bc08      	pop	{r3}
 800cd44:	469e      	mov	lr, r3
 800cd46:	4770      	bx	lr

0800cd48 <_fini>:
 800cd48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd4a:	bf00      	nop
 800cd4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd4e:	bc08      	pop	{r3}
 800cd50:	469e      	mov	lr, r3
 800cd52:	4770      	bx	lr
