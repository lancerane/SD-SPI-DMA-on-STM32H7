
SD_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb24  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  0800cdc4  0800cdc4  0001cdc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d040  0800d040  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800d040  0800d040  0001d040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d048  0800d048  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d048  0800d048  0001d048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800d050  0800d050  0001d050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  24000000  0800d058  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e84  24000094  0800d0ec  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000f18  0800d0ec  00020f18  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002711b  00000000  00000000  000200c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000040b5  00000000  00000000  000471dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c8  00000000  00000000  0004b298  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f60  00000000  00000000  0004c360  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003b880  00000000  00000000  0004d2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000134ff  00000000  00000000  00088b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0015d6b6  00000000  00000000  0009c03f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f96f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047f0  00000000  00000000  001f9770  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000094 	.word	0x24000094
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800cdac 	.word	0x0800cdac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000098 	.word	0x24000098
 80002dc:	0800cdac 	.word	0x0800cdac

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <_ZN6FatDMA10initialiseEv>:

#include "FatDMA.h"
#include "diskio.h"


void FatDMA::initialise() {
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  // MX DMA Init stuff
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000698:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <_ZN6FatDMA10initialiseEv+0x40>)
 800069a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800069e:	4a0c      	ldr	r2, [pc, #48]	; (80006d0 <_ZN6FatDMA10initialiseEv+0x40>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <_ZN6FatDMA10initialiseEv+0x40>)
 80006aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	200b      	movs	r0, #11
 80006bc:	f001 f8f9 	bl	80018b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006c0:	200b      	movs	r0, #11
 80006c2:	f001 f910 	bl	80018e6 <HAL_NVIC_EnableIRQ>



}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	58024400 	.word	0x58024400

080006d4 <_ZN6FatDMA7f_writeEP3FILPKvjPj>:

FRESULT FatDMA::f_write (FIL* fp, const void* buff, UINT btw, UINT* bw){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
 80006e0:	603b      	str	r3, [r7, #0]
  DMAReady = false;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
  this->bw = bw;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	69ba      	ldr	r2, [r7, #24]
 80006ec:	609a      	str	r2, [r3, #8]
  return f_write_dma_start(fp, buff, btw);
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	68b9      	ldr	r1, [r7, #8]
 80006f4:	68f8      	ldr	r0, [r7, #12]
 80006f6:	f00b fb71 	bl	800bddc <_ZN6FatDMA17f_write_dma_startEP3FILPKvj>
 80006fa:	4603      	mov	r3, r0


}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <_ZN6FatDMA16on_block_writtenEv>:
// Called from the DMA transfer cplt callback. Determine if there are further blocks to transfer. If so,
// need to call the lower level funcs to handshake and start the next block. When the final block is done,
// the necessary logic is handled by higher level f_write_dma_cplt, which checks to see if the transfer was
// mmultiblock, in which case an additional stop token must be sent

int FatDMA::on_block_written(){ //1: ok; 0 err
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

  if (blocksLeft == 1) {
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000712:	2b01      	cmp	r3, #1
 8000714:	d115      	bne.n	8000742 <_ZN6FatDMA16on_block_writtenEv+0x3e>
    blocksLeft --;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	FRESULT res = f_write_dma_cplt();
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f00b fd69 	bl	800c1fc <_ZN6FatDMA16f_write_dma_cpltEv>
 800072a:	4603      	mov	r3, r0
 800072c:	73fb      	strb	r3, [r7, #15]
	DMAReady = true;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2201      	movs	r2, #1
 8000732:	701a      	strb	r2, [r3, #0]
	return res == FR_OK ? 1 : 0;
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d101      	bne.n	800073e <_ZN6FatDMA16on_block_writtenEv+0x3a>
 800073a:	2301      	movs	r3, #1
 800073c:	e013      	b.n	8000766 <_ZN6FatDMA16on_block_writtenEv+0x62>
 800073e:	2300      	movs	r3, #0
 8000740:	e011      	b.n	8000766 <_ZN6FatDMA16on_block_writtenEv+0x62>
  }


  else {
	xmit_datablock_cplt(); //handshake
 8000742:	f008 fc81 	bl	8009048 <_ZN6FatDMA19xmit_datablock_cpltEv>
	blocksLeft--;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800074c:	1e5a      	subs	r2, r3, #1
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	return xmit_datablock(nextBuff, 0xFC);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800075a:	22fc      	movs	r2, #252	; 0xfc
 800075c:	4619      	mov	r1, r3
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f008 fc3a 	bl	8008fd8 <_ZN6FatDMA14xmit_datablockEPKhh>
 8000764:	4603      	mov	r3, r0

  }

}
 8000766:	4618      	mov	r0, r3
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <_ZN6FatDMAC1Ev>:
#ifndef SRC_DMA_H_
#define SRC_DMA_H_

class FatDMA {
  public:
    FatDMA(){};
 800076e:	b480      	push	{r7}
 8000770:	b083      	sub	sp, #12
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2201      	movs	r2, #1
 800077a:	701a      	strb	r2, [r3, #0]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2200      	movs	r2, #0
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2200      	movs	r2, #0
 8000786:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4618      	mov	r0, r3
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <_ZN6FatDMAD1Ev>:
    void initialise();
    FRESULT f_write (FIL* fp, const void* buff, UINT btw, UINT* bw);
    FRESULT f_write_dma_cplt ();
    int on_block_written();

    ~FatDMA(){};
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4618      	mov	r0, r3
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
	...

080007b0 <_Z8myprintfPKcz>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 80007b0:	b40f      	push	{r0, r1, r2, r3}
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	693a      	ldr	r2, [r7, #16]
 80007c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c6:	480b      	ldr	r0, [pc, #44]	; (80007f4 <_Z8myprintfPKcz+0x44>)
 80007c8:	f00b ff06 	bl	800c5d8 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80007cc:	4809      	ldr	r0, [pc, #36]	; (80007f4 <_Z8myprintfPKcz+0x44>)
 80007ce:	f7ff fd87 	bl	80002e0 <strlen>
 80007d2:	4603      	mov	r3, r0
 80007d4:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, len, -1);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	b29a      	uxth	r2, r3
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	4905      	ldr	r1, [pc, #20]	; (80007f4 <_Z8myprintfPKcz+0x44>)
 80007e0:	4805      	ldr	r0, [pc, #20]	; (80007f8 <_Z8myprintfPKcz+0x48>)
 80007e2:	f007 f936 	bl	8007a52 <HAL_UART_Transmit>

}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007f0:	b004      	add	sp, #16
 80007f2:	4770      	bx	lr
 80007f4:	2400075c 	.word	0x2400075c
 80007f8:	240001b0 	.word	0x240001b0

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b5b0      	push	{r4, r5, r7, lr}
 80007fe:	b098      	sub	sp, #96	; 0x60
 8000800:	af02      	add	r7, sp, #8
    f_close(&fil);

    //We're done, so de-mount the drive
    f_mount(NULL, "", 0);

    myprintf("done\r\n");
 8000802:	466b      	mov	r3, sp
 8000804:	461d      	mov	r5, r3
  HAL_Init();
 8000806:	f000 feb9 	bl	800157c <HAL_Init>
  SystemClock_Config();
 800080a:	f000 f995 	bl	8000b38 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 800080e:	f000 fb1f 	bl	8000e50 <_ZL12MX_GPIO_Initv>
  fatDma.initialise();
 8000812:	48ad      	ldr	r0, [pc, #692]	; (8000ac8 <main+0x2cc>)
 8000814:	f7ff ff3c 	bl	8000690 <_ZN6FatDMA10initialiseEv>
  MX_USART3_UART_Init();
 8000818:	f000 faba 	bl	8000d90 <_ZL19MX_USART3_UART_Initv>
  MX_SPI3_Init();
 800081c:	f000 fa5c 	bl	8000cd8 <_ZL12MX_SPI3_Initv>
  MX_FATFS_Init();
 8000820:	f008 f9e6 	bl	8008bf0 <MX_FATFS_Init>
  myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 8000824:	48a9      	ldr	r0, [pc, #676]	; (8000acc <main+0x2d0>)
 8000826:	f7ff ffc3 	bl	80007b0 <_Z8myprintfPKcz>
  HAL_Delay(1000); //a short delay is important to let the SD card settle
 800082a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800082e:	f000 ff37 	bl	80016a0 <HAL_Delay>
  fres = f_mount(&FatFs, "", 1); //1=mount now
 8000832:	2201      	movs	r2, #1
 8000834:	49a6      	ldr	r1, [pc, #664]	; (8000ad0 <main+0x2d4>)
 8000836:	48a7      	ldr	r0, [pc, #668]	; (8000ad4 <main+0x2d8>)
 8000838:	f00a ff72 	bl	800b720 <f_mount>
 800083c:	4603      	mov	r3, r0
 800083e:	461a      	mov	r2, r3
 8000840:	4ba5      	ldr	r3, [pc, #660]	; (8000ad8 <main+0x2dc>)
 8000842:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 8000844:	4ba4      	ldr	r3, [pc, #656]	; (8000ad8 <main+0x2dc>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d006      	beq.n	800085a <main+0x5e>
    myprintf("f_mount error (%i)\r\n", fres);
 800084c:	4ba2      	ldr	r3, [pc, #648]	; (8000ad8 <main+0x2dc>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4619      	mov	r1, r3
 8000852:	48a2      	ldr	r0, [pc, #648]	; (8000adc <main+0x2e0>)
 8000854:	f7ff ffac 	bl	80007b0 <_Z8myprintfPKcz>
  while(1);
 8000858:	e7fe      	b.n	8000858 <main+0x5c>
  char filename[50] = "newwrite.bin";
 800085a:	4ba1      	ldr	r3, [pc, #644]	; (8000ae0 <main+0x2e4>)
 800085c:	1d3c      	adds	r4, r7, #4
 800085e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000860:	c407      	stmia	r4!, {r0, r1, r2}
 8000862:	7023      	strb	r3, [r4, #0]
 8000864:	f107 0311 	add.w	r3, r7, #17
 8000868:	2225      	movs	r2, #37	; 0x25
 800086a:	2100      	movs	r1, #0
 800086c:	4618      	mov	r0, r3
 800086e:	f00b fe7e 	bl	800c56e <memset>
  fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	221a      	movs	r2, #26
 8000876:	4619      	mov	r1, r3
 8000878:	489a      	ldr	r0, [pc, #616]	; (8000ae4 <main+0x2e8>)
 800087a:	f00a ff97 	bl	800b7ac <f_open>
 800087e:	4603      	mov	r3, r0
 8000880:	461a      	mov	r2, r3
 8000882:	4b95      	ldr	r3, [pc, #596]	; (8000ad8 <main+0x2dc>)
 8000884:	701a      	strb	r2, [r3, #0]
  if(fres == FR_OK) {
 8000886:	4b94      	ldr	r3, [pc, #592]	; (8000ad8 <main+0x2dc>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d103      	bne.n	8000896 <main+0x9a>
    myprintf("file opened\r\n");
 800088e:	4896      	ldr	r0, [pc, #600]	; (8000ae8 <main+0x2ec>)
 8000890:	f7ff ff8e 	bl	80007b0 <_Z8myprintfPKcz>
 8000894:	e005      	b.n	80008a2 <main+0xa6>
    myprintf("f_open error (%i)\r\n", fres);
 8000896:	4b90      	ldr	r3, [pc, #576]	; (8000ad8 <main+0x2dc>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	4619      	mov	r1, r3
 800089c:	4893      	ldr	r0, [pc, #588]	; (8000aec <main+0x2f0>)
 800089e:	f7ff ff87 	bl	80007b0 <_Z8myprintfPKcz>
  block.data[10].imuData[10] = n_blocks;
 80008a2:	4b93      	ldr	r3, [pc, #588]	; (8000af0 <main+0x2f4>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	b21a      	sxth	r2, r3
 80008a8:	4b92      	ldr	r3, [pc, #584]	; (8000af4 <main+0x2f8>)
 80008aa:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
  block_t blocks[n_blocks];
 80008ae:	4b90      	ldr	r3, [pc, #576]	; (8000af0 <main+0x2f4>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	1e58      	subs	r0, r3, #1
 80008b4:	64f8      	str	r0, [r7, #76]	; 0x4c
 80008b6:	4603      	mov	r3, r0
 80008b8:	3301      	adds	r3, #1
 80008ba:	4619      	mov	r1, r3
 80008bc:	f04f 0200 	mov.w	r2, #0
 80008c0:	f04f 0300 	mov.w	r3, #0
 80008c4:	f04f 0400 	mov.w	r4, #0
 80008c8:	0314      	lsls	r4, r2, #12
 80008ca:	ea44 5411 	orr.w	r4, r4, r1, lsr #20
 80008ce:	030b      	lsls	r3, r1, #12
 80008d0:	4603      	mov	r3, r0
 80008d2:	3301      	adds	r3, #1
 80008d4:	4619      	mov	r1, r3
 80008d6:	f04f 0200 	mov.w	r2, #0
 80008da:	f04f 0300 	mov.w	r3, #0
 80008de:	f04f 0400 	mov.w	r4, #0
 80008e2:	0314      	lsls	r4, r2, #12
 80008e4:	ea44 5411 	orr.w	r4, r4, r1, lsr #20
 80008e8:	030b      	lsls	r3, r1, #12
 80008ea:	4603      	mov	r3, r0
 80008ec:	3301      	adds	r3, #1
 80008ee:	025b      	lsls	r3, r3, #9
 80008f0:	3307      	adds	r3, #7
 80008f2:	08db      	lsrs	r3, r3, #3
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	ebad 0d03 	sub.w	sp, sp, r3
 80008fa:	ab02      	add	r3, sp, #8
 80008fc:	3300      	adds	r3, #0
 80008fe:	64bb      	str	r3, [r7, #72]	; 0x48
  blocks[n_blocks - 1] = block;
 8000900:	4b7b      	ldr	r3, [pc, #492]	; (8000af0 <main+0x2f4>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	3b01      	subs	r3, #1
 8000906:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000908:	025b      	lsls	r3, r3, #9
 800090a:	4413      	add	r3, r2
 800090c:	4a79      	ldr	r2, [pc, #484]	; (8000af4 <main+0x2f8>)
 800090e:	4618      	mov	r0, r3
 8000910:	4611      	mov	r1, r2
 8000912:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000916:	461a      	mov	r2, r3
 8000918:	f00b fe1e 	bl	800c558 <memcpy>
  myprintf("Starting DMA transfer\r\n");
 800091c:	4876      	ldr	r0, [pc, #472]	; (8000af8 <main+0x2fc>)
 800091e:	f7ff ff47 	bl	80007b0 <_Z8myprintfPKcz>
  int k = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	653b      	str	r3, [r7, #80]	; 0x50
  int count = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	657b      	str	r3, [r7, #84]	; 0x54
  int n_iters = 2;
 800092a:	2302      	movs	r3, #2
 800092c:	647b      	str	r3, [r7, #68]	; 0x44
	if (fatDma.DMAReady) {
 800092e:	4b66      	ldr	r3, [pc, #408]	; (8000ac8 <main+0x2cc>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d01c      	beq.n	8000970 <main+0x174>
	  myprintf("wrote %dbytes\r\n", bytesWrote);
 8000936:	4b71      	ldr	r3, [pc, #452]	; (8000afc <main+0x300>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4619      	mov	r1, r3
 800093c:	4870      	ldr	r0, [pc, #448]	; (8000b00 <main+0x304>)
 800093e:	f7ff ff37 	bl	80007b0 <_Z8myprintfPKcz>
	  fres = fatDma.f_write(&fil, &blocks, n_blocks*512, &bytesWrote); // DMA: over twice as fast, with little cpu usage
 8000942:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000944:	4b6a      	ldr	r3, [pc, #424]	; (8000af0 <main+0x2f4>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	025b      	lsls	r3, r3, #9
 800094a:	4619      	mov	r1, r3
 800094c:	4b6b      	ldr	r3, [pc, #428]	; (8000afc <main+0x300>)
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	460b      	mov	r3, r1
 8000952:	4964      	ldr	r1, [pc, #400]	; (8000ae4 <main+0x2e8>)
 8000954:	485c      	ldr	r0, [pc, #368]	; (8000ac8 <main+0x2cc>)
 8000956:	f7ff febd 	bl	80006d4 <_ZN6FatDMA7f_writeEP3FILPKvjPj>
 800095a:	4603      	mov	r3, r0
 800095c:	461a      	mov	r2, r3
 800095e:	4b5e      	ldr	r3, [pc, #376]	; (8000ad8 <main+0x2dc>)
 8000960:	701a      	strb	r2, [r3, #0]
	  k++;
 8000962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000964:	3301      	adds	r3, #1
 8000966:	653b      	str	r3, [r7, #80]	; 0x50
	  if (k == n_iters) break;
 8000968:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800096a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800096c:	429a      	cmp	r2, r3
 800096e:	d003      	beq.n	8000978 <main+0x17c>
	count ++;
 8000970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000972:	3301      	adds	r3, #1
 8000974:	657b      	str	r3, [r7, #84]	; 0x54
	if (fatDma.DMAReady) {
 8000976:	e7da      	b.n	800092e <main+0x132>
	  if (k == n_iters) break;
 8000978:	bf00      	nop
    HAL_Delay(15 * n_blocks); // Wait for the final write to complete
 800097a:	4b5d      	ldr	r3, [pc, #372]	; (8000af0 <main+0x2f4>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	4613      	mov	r3, r2
 8000980:	011b      	lsls	r3, r3, #4
 8000982:	1a9b      	subs	r3, r3, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f000 fe8b 	bl	80016a0 <HAL_Delay>
    myprintf("Write complete; cpu cycles saved : %d \r\n", count);
 800098a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800098c:	485d      	ldr	r0, [pc, #372]	; (8000b04 <main+0x308>)
 800098e:	f7ff ff0f 	bl	80007b0 <_Z8myprintfPKcz>
    f_close(&fil);
 8000992:	4854      	ldr	r0, [pc, #336]	; (8000ae4 <main+0x2e8>)
 8000994:	f00b fd2f 	bl	800c3f6 <f_close>
    f_mount(NULL, "", 0);
 8000998:	2200      	movs	r2, #0
 800099a:	494d      	ldr	r1, [pc, #308]	; (8000ad0 <main+0x2d4>)
 800099c:	2000      	movs	r0, #0
 800099e:	f00a febf 	bl	800b720 <f_mount>
    fres = f_mount(&FatFs, "", 1); //1=mount now
 80009a2:	2201      	movs	r2, #1
 80009a4:	494a      	ldr	r1, [pc, #296]	; (8000ad0 <main+0x2d4>)
 80009a6:	484b      	ldr	r0, [pc, #300]	; (8000ad4 <main+0x2d8>)
 80009a8:	f00a feba 	bl	800b720 <f_mount>
 80009ac:	4603      	mov	r3, r0
 80009ae:	461a      	mov	r2, r3
 80009b0:	4b49      	ldr	r3, [pc, #292]	; (8000ad8 <main+0x2dc>)
 80009b2:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 80009b4:	4b48      	ldr	r3, [pc, #288]	; (8000ad8 <main+0x2dc>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d006      	beq.n	80009ca <main+0x1ce>
      myprintf("f_mount error (%i)\r\n", fres);
 80009bc:	4b46      	ldr	r3, [pc, #280]	; (8000ad8 <main+0x2dc>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	4619      	mov	r1, r3
 80009c2:	4846      	ldr	r0, [pc, #280]	; (8000adc <main+0x2e0>)
 80009c4:	f7ff fef4 	bl	80007b0 <_Z8myprintfPKcz>
    while(1);
 80009c8:	e7fe      	b.n	80009c8 <main+0x1cc>
    fres = f_open(&fil, filename, FA_READ);
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2201      	movs	r2, #1
 80009ce:	4619      	mov	r1, r3
 80009d0:	4844      	ldr	r0, [pc, #272]	; (8000ae4 <main+0x2e8>)
 80009d2:	f00a feeb 	bl	800b7ac <f_open>
 80009d6:	4603      	mov	r3, r0
 80009d8:	461a      	mov	r2, r3
 80009da:	4b3f      	ldr	r3, [pc, #252]	; (8000ad8 <main+0x2dc>)
 80009dc:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 80009de:	4b3e      	ldr	r3, [pc, #248]	; (8000ad8 <main+0x2dc>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d003      	beq.n	80009ee <main+0x1f2>
      myprintf("f_open error (%i)\r\n");
 80009e6:	4841      	ldr	r0, [pc, #260]	; (8000aec <main+0x2f0>)
 80009e8:	f7ff fee2 	bl	80007b0 <_Z8myprintfPKcz>
      while(1);
 80009ec:	e7fe      	b.n	80009ec <main+0x1f0>
    myprintf("File opened for reading\r\n");
 80009ee:	4846      	ldr	r0, [pc, #280]	; (8000b08 <main+0x30c>)
 80009f0:	f7ff fede 	bl	80007b0 <_Z8myprintfPKcz>
    block_t readBlocks[n_blocks];
 80009f4:	4b3e      	ldr	r3, [pc, #248]	; (8000af0 <main+0x2f4>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	1e58      	subs	r0, r3, #1
 80009fa:	6438      	str	r0, [r7, #64]	; 0x40
 80009fc:	4603      	mov	r3, r0
 80009fe:	3301      	adds	r3, #1
 8000a00:	4619      	mov	r1, r3
 8000a02:	f04f 0200 	mov.w	r2, #0
 8000a06:	f04f 0300 	mov.w	r3, #0
 8000a0a:	f04f 0400 	mov.w	r4, #0
 8000a0e:	0314      	lsls	r4, r2, #12
 8000a10:	ea44 5411 	orr.w	r4, r4, r1, lsr #20
 8000a14:	030b      	lsls	r3, r1, #12
 8000a16:	4603      	mov	r3, r0
 8000a18:	3301      	adds	r3, #1
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f04f 0200 	mov.w	r2, #0
 8000a20:	f04f 0300 	mov.w	r3, #0
 8000a24:	f04f 0400 	mov.w	r4, #0
 8000a28:	0314      	lsls	r4, r2, #12
 8000a2a:	ea44 5411 	orr.w	r4, r4, r1, lsr #20
 8000a2e:	030b      	lsls	r3, r1, #12
 8000a30:	4603      	mov	r3, r0
 8000a32:	3301      	adds	r3, #1
 8000a34:	025b      	lsls	r3, r3, #9
 8000a36:	3307      	adds	r3, #7
 8000a38:	08db      	lsrs	r3, r3, #3
 8000a3a:	00db      	lsls	r3, r3, #3
 8000a3c:	ebad 0d03 	sub.w	sp, sp, r3
 8000a40:	ab02      	add	r3, sp, #8
 8000a42:	3300      	adds	r3, #0
 8000a44:	63fb      	str	r3, [r7, #60]	; 0x3c
    UINT bytesRead = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
    fres = f_read(&fil, &readBlocks, 512*n_blocks, &bytesRead);
 8000a4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000a4c:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <main+0x2f4>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	025b      	lsls	r3, r3, #9
 8000a52:	461a      	mov	r2, r3
 8000a54:	463b      	mov	r3, r7
 8000a56:	4823      	ldr	r0, [pc, #140]	; (8000ae4 <main+0x2e8>)
 8000a58:	f00b f86e 	bl	800bb38 <f_read>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <main+0x2dc>)
 8000a62:	701a      	strb	r2, [r3, #0]
    if(fres == FR_OK) {
 8000a64:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <main+0x2dc>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d105      	bne.n	8000a78 <main+0x27c>
    	myprintf("Read %d bytes\r\n", bytesRead);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4826      	ldr	r0, [pc, #152]	; (8000b0c <main+0x310>)
 8000a72:	f7ff fe9d 	bl	80007b0 <_Z8myprintfPKcz>
 8000a76:	e005      	b.n	8000a84 <main+0x288>
    	myprintf("f_read error (%i)\r\n", fres);
 8000a78:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <main+0x2dc>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4824      	ldr	r0, [pc, #144]	; (8000b10 <main+0x314>)
 8000a80:	f7ff fe96 	bl	80007b0 <_Z8myprintfPKcz>
    int val = readBlocks[n_blocks-1].data[10].imuData[10];
 8000a84:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <main+0x2f4>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000a8c:	025b      	lsls	r3, r3, #9
 8000a8e:	4413      	add	r3, r2
 8000a90:	f503 73a5 	add.w	r3, r3, #330	; 0x14a
 8000a94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a98:	b21b      	sxth	r3, r3
 8000a9a:	63bb      	str	r3, [r7, #56]	; 0x38
    myprintf("Read value: %d\r\n", val);
 8000a9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000a9e:	481d      	ldr	r0, [pc, #116]	; (8000b14 <main+0x318>)
 8000aa0:	f7ff fe86 	bl	80007b0 <_Z8myprintfPKcz>
    f_close(&fil);
 8000aa4:	480f      	ldr	r0, [pc, #60]	; (8000ae4 <main+0x2e8>)
 8000aa6:	f00b fca6 	bl	800c3f6 <f_close>
    f_mount(NULL, "", 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	4908      	ldr	r1, [pc, #32]	; (8000ad0 <main+0x2d4>)
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f00a fe36 	bl	800b720 <f_mount>
    myprintf("done\r\n");
 8000ab4:	4818      	ldr	r0, [pc, #96]	; (8000b18 <main+0x31c>)
 8000ab6:	f7ff fe7b 	bl	80007b0 <_Z8myprintfPKcz>
 8000aba:	46ad      	mov	sp, r5



  /* USER CODE END 3 */
}
 8000abc:	2300      	movs	r3, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3758      	adds	r7, #88	; 0x58
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	240006a4 	.word	0x240006a4
 8000acc:	0800cdc4 	.word	0x0800cdc4
 8000ad0:	0800cde4 	.word	0x0800cde4
 8000ad4:	2400023c 	.word	0x2400023c
 8000ad8:	2400069c 	.word	0x2400069c
 8000adc:	0800cde8 	.word	0x0800cde8
 8000ae0:	0800ced4 	.word	0x0800ced4
 8000ae4:	2400046c 	.word	0x2400046c
 8000ae8:	0800ce00 	.word	0x0800ce00
 8000aec:	0800ce10 	.word	0x0800ce10
 8000af0:	24000000 	.word	0x24000000
 8000af4:	2400085c 	.word	0x2400085c
 8000af8:	0800ce24 	.word	0x0800ce24
 8000afc:	240006a0 	.word	0x240006a0
 8000b00:	0800ce3c 	.word	0x0800ce3c
 8000b04:	0800ce4c 	.word	0x0800ce4c
 8000b08:	0800ce78 	.word	0x0800ce78
 8000b0c:	0800ce94 	.word	0x0800ce94
 8000b10:	0800cea4 	.word	0x0800cea4
 8000b14:	0800ceb8 	.word	0x0800ceb8
 8000b18:	0800cecc 	.word	0x0800cecc

08000b1c <HAL_SPI_TxCpltCallback>:

//
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef* hspi) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]

  int res = fatDma.on_block_written();
 8000b24:	4803      	ldr	r0, [pc, #12]	; (8000b34 <HAL_SPI_TxCpltCallback+0x18>)
 8000b26:	f7ff fded 	bl	8000704 <_ZN6FatDMA16on_block_writtenEv>
 8000b2a:	60f8      	str	r0, [r7, #12]
//  }
//  else {
//    myprintf( "f_write error (%i)\r\n");
//  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	240006a4 	.word	0x240006a4

08000b38 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b0cc      	sub	sp, #304	; 0x130
 8000b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b42:	224c      	movs	r2, #76	; 0x4c
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f00b fd11 	bl	800c56e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b4c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b50:	2220      	movs	r2, #32
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f00b fd0a 	bl	800c56e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b5a:	f107 0308 	add.w	r3, r7, #8
 8000b5e:	4618      	mov	r0, r3
 8000b60:	23bc      	movs	r3, #188	; 0xbc
 8000b62:	461a      	mov	r2, r3
 8000b64:	2100      	movs	r1, #0
 8000b66:	f00b fd02 	bl	800c56e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b6a:	2002      	movs	r0, #2
 8000b6c:	f003 fbc8 	bl	8004300 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	4b56      	ldr	r3, [pc, #344]	; (8000cd0 <_Z18SystemClock_Configv+0x198>)
 8000b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b7a:	4a55      	ldr	r2, [pc, #340]	; (8000cd0 <_Z18SystemClock_Configv+0x198>)
 8000b7c:	f023 0301 	bic.w	r3, r3, #1
 8000b80:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b82:	4b53      	ldr	r3, [pc, #332]	; (8000cd0 <_Z18SystemClock_Configv+0x198>)
 8000b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b86:	f003 0201 	and.w	r2, r3, #1
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	4b51      	ldr	r3, [pc, #324]	; (8000cd4 <_Z18SystemClock_Configv+0x19c>)
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b96:	4a4f      	ldr	r2, [pc, #316]	; (8000cd4 <_Z18SystemClock_Configv+0x19c>)
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9c:	6193      	str	r3, [r2, #24]
 8000b9e:	4b4d      	ldr	r3, [pc, #308]	; (8000cd4 <_Z18SystemClock_Configv+0x19c>)
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bae:	4b49      	ldr	r3, [pc, #292]	; (8000cd4 <_Z18SystemClock_Configv+0x19c>)
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bba:	bf14      	ite	ne
 8000bbc:	2301      	movne	r3, #1
 8000bbe:	2300      	moveq	r3, #0
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d000      	beq.n	8000bc8 <_Z18SystemClock_Configv+0x90>
 8000bc6:	e7f2      	b.n	8000bae <_Z18SystemClock_Configv+0x76>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bce:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bdc:	2340      	movs	r3, #64	; 0x40
 8000bde:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be2:	2302      	movs	r3, #2
 8000be4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000be8:	2302      	movs	r3, #2
 8000bea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000bf4:	2318      	movs	r3, #24
 8000bf6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c00:	2304      	movs	r3, #4
 8000c02:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c06:	2302      	movs	r3, #2
 8000c08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c0c:	230c      	movs	r3, #12
 8000c0e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c22:	4618      	mov	r0, r3
 8000c24:	f003 fba6 	bl	8004374 <HAL_RCC_OscConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	bf14      	ite	ne
 8000c2e:	2301      	movne	r3, #1
 8000c30:	2300      	moveq	r3, #0
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8000c38:	f000 fa50 	bl	80010dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3c:	233f      	movs	r3, #63	; 0x3f
 8000c3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c42:	2300      	movs	r3, #0
 8000c44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c6c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f003 ff8e 	bl	8004b94 <HAL_RCC_ClockConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	bf14      	ite	ne
 8000c7e:	2301      	movne	r3, #1
 8000c80:	2300      	moveq	r3, #0
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <_Z18SystemClock_Configv+0x154>
  {
    Error_Handler();
 8000c88:	f000 fa28 	bl	80010dc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SPI3;
 8000c8c:	f107 0308 	add.w	r3, r7, #8
 8000c90:	f241 0202 	movw	r2, #4098	; 0x1002
 8000c94:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000c96:	f107 0308 	add.w	r3, r7, #8
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c9e:	f107 0308 	add.w	r3, r7, #8
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ca6:	f107 0308 	add.w	r3, r7, #8
 8000caa:	4618      	mov	r0, r3
 8000cac:	f004 faf6 	bl	800529c <HAL_RCCEx_PeriphCLKConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	bf14      	ite	ne
 8000cb6:	2301      	movne	r3, #1
 8000cb8:	2300      	moveq	r3, #0
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <_Z18SystemClock_Configv+0x18c>
  {
    Error_Handler();
 8000cc0:	f000 fa0c 	bl	80010dc <Error_Handler>
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	58000400 	.word	0x58000400
 8000cd4:	58024800 	.word	0x58024800

08000cd8 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000cdc:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <_ZL12MX_SPI3_Initv+0xb0>)
 8000cde:	4a2b      	ldr	r2, [pc, #172]	; (8000d8c <_ZL12MX_SPI3_Initv+0xb4>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ce2:	4b29      	ldr	r3, [pc, #164]	; (8000d88 <_ZL12MX_SPI3_Initv+0xb0>)
 8000ce4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ce8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000cea:	4b27      	ldr	r3, [pc, #156]	; (8000d88 <_ZL12MX_SPI3_Initv+0xb0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cf0:	4b25      	ldr	r3, [pc, #148]	; (8000d88 <_ZL12MX_SPI3_Initv+0xb0>)
 8000cf2:	2207      	movs	r2, #7
 8000cf4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cf6:	4b24      	ldr	r3, [pc, #144]	; (8000d88 <_ZL12MX_SPI3_Initv+0xb0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cfc:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <_ZL12MX_SPI3_Initv+0xb0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d02:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <_ZL12MX_SPI3_Initv+0xb0>)
 8000d04:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d08:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <_ZL12MX_SPI3_Initv+0xb0>)
 8000d0c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000d10:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d12:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <_ZL12MX_SPI3_Initv+0xb0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <_ZL12MX_SPI3_Initv+0xb0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <_ZL12MX_SPI3_Initv+0xb0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000d24:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <_ZL12MX_SPI3_Initv+0xb0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d2a:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <_ZL12MX_SPI3_Initv+0xb0>)
 8000d2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d30:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <_ZL12MX_SPI3_Initv+0xb0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <_ZL12MX_SPI3_Initv+0xb0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <_ZL12MX_SPI3_Initv+0xb0>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d44:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <_ZL12MX_SPI3_Initv+0xb0>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <_ZL12MX_SPI3_Initv+0xb0>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d50:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <_ZL12MX_SPI3_Initv+0xb0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <_ZL12MX_SPI3_Initv+0xb0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <_ZL12MX_SPI3_Initv+0xb0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <_ZL12MX_SPI3_Initv+0xb0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d68:	4807      	ldr	r0, [pc, #28]	; (8000d88 <_ZL12MX_SPI3_Initv+0xb0>)
 8000d6a:	f005 fd97 	bl	800689c <HAL_SPI_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	bf14      	ite	ne
 8000d74:	2301      	movne	r3, #1
 8000d76:	2300      	moveq	r3, #0
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <_ZL12MX_SPI3_Initv+0xaa>
  {
    Error_Handler();
 8000d7e:	f000 f9ad 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	240000b0 	.word	0x240000b0
 8000d8c:	40003c00 	.word	0x40003c00

08000d90 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d94:	4b2c      	ldr	r3, [pc, #176]	; (8000e48 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000d96:	4a2d      	ldr	r2, [pc, #180]	; (8000e4c <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000d98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d9a:	4b2b      	ldr	r3, [pc, #172]	; (8000e48 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000d9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000da0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000da2:	4b29      	ldr	r3, [pc, #164]	; (8000e48 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000da8:	4b27      	ldr	r3, [pc, #156]	; (8000e48 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dae:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000db4:	4b24      	ldr	r3, [pc, #144]	; (8000e48 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000db6:	220c      	movs	r2, #12
 8000db8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dba:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc0:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dc6:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dd8:	481b      	ldr	r0, [pc, #108]	; (8000e48 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000dda:	f006 fdea 	bl	80079b2 <HAL_UART_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	bf14      	ite	ne
 8000de4:	2301      	movne	r3, #1
 8000de6:	2300      	moveq	r3, #0
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8000dee:	f000 f975 	bl	80010dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000df2:	2100      	movs	r1, #0
 8000df4:	4814      	ldr	r0, [pc, #80]	; (8000e48 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000df6:	f007 fe16 	bl	8008a26 <HAL_UARTEx_SetTxFifoThreshold>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	bf14      	ite	ne
 8000e00:	2301      	movne	r3, #1
 8000e02:	2300      	moveq	r3, #0
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8000e0a:	f000 f967 	bl	80010dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e0e:	2100      	movs	r1, #0
 8000e10:	480d      	ldr	r0, [pc, #52]	; (8000e48 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000e12:	f007 fe46 	bl	8008aa2 <HAL_UARTEx_SetRxFifoThreshold>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	bf14      	ite	ne
 8000e1c:	2301      	movne	r3, #1
 8000e1e:	2300      	moveq	r3, #0
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8000e26:	f000 f959 	bl	80010dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e2a:	4807      	ldr	r0, [pc, #28]	; (8000e48 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000e2c:	f007 fdc2 	bl	80089b4 <HAL_UARTEx_DisableFifoMode>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	bf14      	ite	ne
 8000e36:	2301      	movne	r3, #1
 8000e38:	2300      	moveq	r3, #0
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8000e40:	f000 f94c 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	240001b0 	.word	0x240001b0
 8000e4c:	40004800 	.word	0x40004800

08000e50 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08c      	sub	sp, #48	; 0x30
 8000e54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e66:	4b95      	ldr	r3, [pc, #596]	; (80010bc <_ZL12MX_GPIO_Initv+0x26c>)
 8000e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6c:	4a93      	ldr	r2, [pc, #588]	; (80010bc <_ZL12MX_GPIO_Initv+0x26c>)
 8000e6e:	f043 0304 	orr.w	r3, r3, #4
 8000e72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e76:	4b91      	ldr	r3, [pc, #580]	; (80010bc <_ZL12MX_GPIO_Initv+0x26c>)
 8000e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7c:	f003 0304 	and.w	r3, r3, #4
 8000e80:	61bb      	str	r3, [r7, #24]
 8000e82:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e84:	4b8d      	ldr	r3, [pc, #564]	; (80010bc <_ZL12MX_GPIO_Initv+0x26c>)
 8000e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8a:	4a8c      	ldr	r2, [pc, #560]	; (80010bc <_ZL12MX_GPIO_Initv+0x26c>)
 8000e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e94:	4b89      	ldr	r3, [pc, #548]	; (80010bc <_ZL12MX_GPIO_Initv+0x26c>)
 8000e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	4b86      	ldr	r3, [pc, #536]	; (80010bc <_ZL12MX_GPIO_Initv+0x26c>)
 8000ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea8:	4a84      	ldr	r2, [pc, #528]	; (80010bc <_ZL12MX_GPIO_Initv+0x26c>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb2:	4b82      	ldr	r3, [pc, #520]	; (80010bc <_ZL12MX_GPIO_Initv+0x26c>)
 8000eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec0:	4b7e      	ldr	r3, [pc, #504]	; (80010bc <_ZL12MX_GPIO_Initv+0x26c>)
 8000ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec6:	4a7d      	ldr	r2, [pc, #500]	; (80010bc <_ZL12MX_GPIO_Initv+0x26c>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed0:	4b7a      	ldr	r3, [pc, #488]	; (80010bc <_ZL12MX_GPIO_Initv+0x26c>)
 8000ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ede:	4b77      	ldr	r3, [pc, #476]	; (80010bc <_ZL12MX_GPIO_Initv+0x26c>)
 8000ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee4:	4a75      	ldr	r2, [pc, #468]	; (80010bc <_ZL12MX_GPIO_Initv+0x26c>)
 8000ee6:	f043 0308 	orr.w	r3, r3, #8
 8000eea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eee:	4b73      	ldr	r3, [pc, #460]	; (80010bc <_ZL12MX_GPIO_Initv+0x26c>)
 8000ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef4:	f003 0308 	and.w	r3, r3, #8
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000efc:	4b6f      	ldr	r3, [pc, #444]	; (80010bc <_ZL12MX_GPIO_Initv+0x26c>)
 8000efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f02:	4a6e      	ldr	r2, [pc, #440]	; (80010bc <_ZL12MX_GPIO_Initv+0x26c>)
 8000f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f0c:	4b6b      	ldr	r3, [pc, #428]	; (80010bc <_ZL12MX_GPIO_Initv+0x26c>)
 8000f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f1a:	4b68      	ldr	r3, [pc, #416]	; (80010bc <_ZL12MX_GPIO_Initv+0x26c>)
 8000f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f20:	4a66      	ldr	r2, [pc, #408]	; (80010bc <_ZL12MX_GPIO_Initv+0x26c>)
 8000f22:	f043 0310 	orr.w	r3, r3, #16
 8000f26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f2a:	4b64      	ldr	r3, [pc, #400]	; (80010bc <_ZL12MX_GPIO_Initv+0x26c>)
 8000f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f30:	f003 0310 	and.w	r3, r3, #16
 8000f34:	603b      	str	r3, [r7, #0]
 8000f36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f244 0101 	movw	r1, #16385	; 0x4001
 8000f3e:	4860      	ldr	r0, [pc, #384]	; (80010c0 <_ZL12MX_GPIO_Initv+0x270>)
 8000f40:	f003 f9c4 	bl	80042cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f4a:	485e      	ldr	r0, [pc, #376]	; (80010c4 <_ZL12MX_GPIO_Initv+0x274>)
 8000f4c:	f003 f9be 	bl	80042cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f56:	485c      	ldr	r0, [pc, #368]	; (80010c8 <_ZL12MX_GPIO_Initv+0x278>)
 8000f58:	f003 f9b8 	bl	80042cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2102      	movs	r1, #2
 8000f60:	485a      	ldr	r0, [pc, #360]	; (80010cc <_ZL12MX_GPIO_Initv+0x27c>)
 8000f62:	f003 f9b3 	bl	80042cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4853      	ldr	r0, [pc, #332]	; (80010c8 <_ZL12MX_GPIO_Initv+0x278>)
 8000f7c:	f002 fff6 	bl	8003f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f80:	2332      	movs	r3, #50	; 0x32
 8000f82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f90:	230b      	movs	r3, #11
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	484b      	ldr	r0, [pc, #300]	; (80010c8 <_ZL12MX_GPIO_Initv+0x278>)
 8000f9c:	f002 ffe6 	bl	8003f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000fa0:	2386      	movs	r3, #134	; 0x86
 8000fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fb0:	230b      	movs	r3, #11
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb4:	f107 031c 	add.w	r3, r7, #28
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4845      	ldr	r0, [pc, #276]	; (80010d0 <_ZL12MX_GPIO_Initv+0x280>)
 8000fbc:	f002 ffd6 	bl	8003f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000fc0:	f244 0301 	movw	r3, #16385	; 0x4001
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4839      	ldr	r0, [pc, #228]	; (80010c0 <_ZL12MX_GPIO_Initv+0x270>)
 8000fda:	f002 ffc7 	bl	8003f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ff0:	230b      	movs	r3, #11
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff4:	f107 031c 	add.w	r3, r7, #28
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4831      	ldr	r0, [pc, #196]	; (80010c0 <_ZL12MX_GPIO_Initv+0x270>)
 8000ffc:	f002 ffb6 	bl	8003f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001000:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001006:	2301      	movs	r3, #1
 8001008:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	4619      	mov	r1, r3
 8001018:	482a      	ldr	r0, [pc, #168]	; (80010c4 <_ZL12MX_GPIO_Initv+0x274>)
 800101a:	f002 ffa7 	bl	8003f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800101e:	2380      	movs	r3, #128	; 0x80
 8001020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001022:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <_ZL12MX_GPIO_Initv+0x284>)
 8001024:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	4619      	mov	r1, r3
 8001030:	4829      	ldr	r0, [pc, #164]	; (80010d8 <_ZL12MX_GPIO_Initv+0x288>)
 8001032:	f002 ff9b 	bl	8003f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001036:	f44f 7300 	mov.w	r3, #512	; 0x200
 800103a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	4619      	mov	r1, r3
 800104e:	481e      	ldr	r0, [pc, #120]	; (80010c8 <_ZL12MX_GPIO_Initv+0x278>)
 8001050:	f002 ff8c 	bl	8003f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001054:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001066:	230a      	movs	r3, #10
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4619      	mov	r1, r3
 8001070:	4817      	ldr	r0, [pc, #92]	; (80010d0 <_ZL12MX_GPIO_Initv+0x280>)
 8001072:	f002 ff7b 	bl	8003f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001076:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800107a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001088:	230b      	movs	r3, #11
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	4619      	mov	r1, r3
 8001092:	4811      	ldr	r0, [pc, #68]	; (80010d8 <_ZL12MX_GPIO_Initv+0x288>)
 8001094:	f002 ff6a 	bl	8003f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001098:	2302      	movs	r3, #2
 800109a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	4619      	mov	r1, r3
 80010ae:	4807      	ldr	r0, [pc, #28]	; (80010cc <_ZL12MX_GPIO_Initv+0x27c>)
 80010b0:	f002 ff5c 	bl	8003f6c <HAL_GPIO_Init>

}
 80010b4:	bf00      	nop
 80010b6:	3730      	adds	r7, #48	; 0x30
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	58024400 	.word	0x58024400
 80010c0:	58020400 	.word	0x58020400
 80010c4:	58020c00 	.word	0x58020c00
 80010c8:	58020800 	.word	0x58020800
 80010cc:	58021000 	.word	0x58021000
 80010d0:	58020000 	.word	0x58020000
 80010d4:	11110000 	.word	0x11110000
 80010d8:	58021800 	.word	0x58021800

080010dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <_Z41__static_initialization_and_destruction_0ii>:
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d107      	bne.n	800110c <_Z41__static_initialization_and_destruction_0ii+0x20>
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001102:	4293      	cmp	r3, r2
 8001104:	d102      	bne.n	800110c <_Z41__static_initialization_and_destruction_0ii+0x20>
FatDMA fatDma;
 8001106:	4809      	ldr	r0, [pc, #36]	; (800112c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001108:	f7ff fb31 	bl	800076e <_ZN6FatDMAC1Ev>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d107      	bne.n	8001122 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001118:	4293      	cmp	r3, r2
 800111a:	d102      	bne.n	8001122 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800111c:	4803      	ldr	r0, [pc, #12]	; (800112c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800111e:	f7ff fb3b 	bl	8000798 <_ZN6FatDMAD1Ev>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	240006a4 	.word	0x240006a4

08001130 <_GLOBAL__sub_I_hspi3>:
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
 8001134:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001138:	2001      	movs	r0, #1
 800113a:	f7ff ffd7 	bl	80010ec <_Z41__static_initialization_and_destruction_0ii>
 800113e:	bd80      	pop	{r7, pc}

08001140 <_GLOBAL__sub_D_hspi3>:
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
 8001144:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001148:	2000      	movs	r0, #0
 800114a:	f7ff ffcf 	bl	80010ec <_Z41__static_initialization_and_destruction_0ii>
 800114e:	bd80      	pop	{r7, pc}

08001150 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <HAL_MspInit+0x30>)
 8001158:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800115c:	4a08      	ldr	r2, [pc, #32]	; (8001180 <HAL_MspInit+0x30>)
 800115e:	f043 0302 	orr.w	r3, r3, #2
 8001162:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_MspInit+0x30>)
 8001168:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	58024400 	.word	0x58024400

08001184 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	; 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a35      	ldr	r2, [pc, #212]	; (8001278 <HAL_SPI_MspInit+0xf4>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d163      	bne.n	800126e <HAL_SPI_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011a6:	4b35      	ldr	r3, [pc, #212]	; (800127c <HAL_SPI_MspInit+0xf8>)
 80011a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011ac:	4a33      	ldr	r2, [pc, #204]	; (800127c <HAL_SPI_MspInit+0xf8>)
 80011ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011b6:	4b31      	ldr	r3, [pc, #196]	; (800127c <HAL_SPI_MspInit+0xf8>)
 80011b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c4:	4b2d      	ldr	r3, [pc, #180]	; (800127c <HAL_SPI_MspInit+0xf8>)
 80011c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ca:	4a2c      	ldr	r2, [pc, #176]	; (800127c <HAL_SPI_MspInit+0xf8>)
 80011cc:	f043 0304 	orr.w	r3, r3, #4
 80011d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011d4:	4b29      	ldr	r3, [pc, #164]	; (800127c <HAL_SPI_MspInit+0xf8>)
 80011d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80011e2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011f4:	2306      	movs	r3, #6
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	4820      	ldr	r0, [pc, #128]	; (8001280 <HAL_SPI_MspInit+0xfc>)
 8001200:	f002 feb4 	bl	8003f6c <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream0;
 8001204:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <HAL_SPI_MspInit+0x100>)
 8001206:	4a20      	ldr	r2, [pc, #128]	; (8001288 <HAL_SPI_MspInit+0x104>)
 8001208:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 800120a:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <HAL_SPI_MspInit+0x100>)
 800120c:	223e      	movs	r2, #62	; 0x3e
 800120e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001210:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <HAL_SPI_MspInit+0x100>)
 8001212:	2240      	movs	r2, #64	; 0x40
 8001214:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001216:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <HAL_SPI_MspInit+0x100>)
 8001218:	2200      	movs	r2, #0
 800121a:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800121c:	4b19      	ldr	r3, [pc, #100]	; (8001284 <HAL_SPI_MspInit+0x100>)
 800121e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001222:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <HAL_SPI_MspInit+0x100>)
 8001226:	2200      	movs	r2, #0
 8001228:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800122a:	4b16      	ldr	r3, [pc, #88]	; (8001284 <HAL_SPI_MspInit+0x100>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <HAL_SPI_MspInit+0x100>)
 8001232:	2200      	movs	r2, #0
 8001234:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <HAL_SPI_MspInit+0x100>)
 8001238:	2200      	movs	r2, #0
 800123a:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <HAL_SPI_MspInit+0x100>)
 800123e:	2200      	movs	r2, #0
 8001240:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001242:	4810      	ldr	r0, [pc, #64]	; (8001284 <HAL_SPI_MspInit+0x100>)
 8001244:	f000 fb6a 	bl	800191c <HAL_DMA_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 800124e:	f7ff ff45 	bl	80010dc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <HAL_SPI_MspInit+0x100>)
 8001256:	679a      	str	r2, [r3, #120]	; 0x78
 8001258:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <HAL_SPI_MspInit+0x100>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	2033      	movs	r0, #51	; 0x33
 8001264:	f000 fb25 	bl	80018b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001268:	2033      	movs	r0, #51	; 0x33
 800126a:	f000 fb3c 	bl	80018e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800126e:	bf00      	nop
 8001270:	3728      	adds	r7, #40	; 0x28
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40003c00 	.word	0x40003c00
 800127c:	58024400 	.word	0x58024400
 8001280:	58020800 	.word	0x58020800
 8001284:	24000138 	.word	0x24000138
 8001288:	40020010 	.word	0x40020010

0800128c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a1a      	ldr	r2, [pc, #104]	; (8001314 <HAL_UART_MspInit+0x88>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d12e      	bne.n	800130c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <HAL_UART_MspInit+0x8c>)
 80012b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012b4:	4a18      	ldr	r2, [pc, #96]	; (8001318 <HAL_UART_MspInit+0x8c>)
 80012b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <HAL_UART_MspInit+0x8c>)
 80012c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_UART_MspInit+0x8c>)
 80012ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d2:	4a11      	ldr	r2, [pc, #68]	; (8001318 <HAL_UART_MspInit+0x8c>)
 80012d4:	f043 0308 	orr.w	r3, r3, #8
 80012d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012dc:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <HAL_UART_MspInit+0x8c>)
 80012de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	2302      	movs	r3, #2
 80012f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012fc:	2307      	movs	r3, #7
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4619      	mov	r1, r3
 8001306:	4805      	ldr	r0, [pc, #20]	; (800131c <HAL_UART_MspInit+0x90>)
 8001308:	f002 fe30 	bl	8003f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800130c:	bf00      	nop
 800130e:	3728      	adds	r7, #40	; 0x28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40004800 	.word	0x40004800
 8001318:	58024400 	.word	0x58024400
 800131c:	58020c00 	.word	0x58020c00

08001320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001332:	e7fe      	b.n	8001332 <HardFault_Handler+0x4>

08001334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <MemManage_Handler+0x4>

0800133a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <BusFault_Handler+0x4>

08001340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <UsageFault_Handler+0x4>

08001346 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001374:	f000 f974 	bl	8001660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <DMA1_Stream0_IRQHandler+0x10>)
 8001382:	f001 fad5 	bl	8002930 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	24000138 	.word	0x24000138

08001390 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <SPI3_IRQHandler+0x10>)
 8001396:	f005 ffab 	bl	80072f0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	240000b0 	.word	0x240000b0

080013a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013ac:	4a14      	ldr	r2, [pc, #80]	; (8001400 <_sbrk+0x5c>)
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <_sbrk+0x60>)
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <_sbrk+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d102      	bne.n	80013c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <_sbrk+0x64>)
 80013c2:	4a12      	ldr	r2, [pc, #72]	; (800140c <_sbrk+0x68>)
 80013c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <_sbrk+0x64>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d207      	bcs.n	80013e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d4:	f00b f896 	bl	800c504 <__errno>
 80013d8:	4602      	mov	r2, r0
 80013da:	230c      	movs	r3, #12
 80013dc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
 80013e2:	e009      	b.n	80013f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <_sbrk+0x64>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ea:	4b07      	ldr	r3, [pc, #28]	; (8001408 <_sbrk+0x64>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	4a05      	ldr	r2, [pc, #20]	; (8001408 <_sbrk+0x64>)
 80013f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013f6:	68fb      	ldr	r3, [r7, #12]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	24080000 	.word	0x24080000
 8001404:	00000400 	.word	0x00000400
 8001408:	24000a5c 	.word	0x24000a5c
 800140c:	24000f18 	.word	0x24000f18

08001410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001414:	4b39      	ldr	r3, [pc, #228]	; (80014fc <SystemInit+0xec>)
 8001416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800141a:	4a38      	ldr	r2, [pc, #224]	; (80014fc <SystemInit+0xec>)
 800141c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001424:	4b36      	ldr	r3, [pc, #216]	; (8001500 <SystemInit+0xf0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 030f 	and.w	r3, r3, #15
 800142c:	2b06      	cmp	r3, #6
 800142e:	d807      	bhi.n	8001440 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001430:	4b33      	ldr	r3, [pc, #204]	; (8001500 <SystemInit+0xf0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f023 030f 	bic.w	r3, r3, #15
 8001438:	4a31      	ldr	r2, [pc, #196]	; (8001500 <SystemInit+0xf0>)
 800143a:	f043 0307 	orr.w	r3, r3, #7
 800143e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001440:	4b30      	ldr	r3, [pc, #192]	; (8001504 <SystemInit+0xf4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a2f      	ldr	r2, [pc, #188]	; (8001504 <SystemInit+0xf4>)
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800144c:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <SystemInit+0xf4>)
 800144e:	2200      	movs	r2, #0
 8001450:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001452:	4b2c      	ldr	r3, [pc, #176]	; (8001504 <SystemInit+0xf4>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	492b      	ldr	r1, [pc, #172]	; (8001504 <SystemInit+0xf4>)
 8001458:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <SystemInit+0xf8>)
 800145a:	4013      	ands	r3, r2
 800145c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800145e:	4b28      	ldr	r3, [pc, #160]	; (8001500 <SystemInit+0xf0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	2b07      	cmp	r3, #7
 8001468:	d907      	bls.n	800147a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800146a:	4b25      	ldr	r3, [pc, #148]	; (8001500 <SystemInit+0xf0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f023 030f 	bic.w	r3, r3, #15
 8001472:	4a23      	ldr	r2, [pc, #140]	; (8001500 <SystemInit+0xf0>)
 8001474:	f043 0307 	orr.w	r3, r3, #7
 8001478:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800147a:	4b22      	ldr	r3, [pc, #136]	; (8001504 <SystemInit+0xf4>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001480:	4b20      	ldr	r3, [pc, #128]	; (8001504 <SystemInit+0xf4>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001486:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <SystemInit+0xf4>)
 8001488:	2200      	movs	r2, #0
 800148a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800148c:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <SystemInit+0xf4>)
 800148e:	4a1f      	ldr	r2, [pc, #124]	; (800150c <SystemInit+0xfc>)
 8001490:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001492:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <SystemInit+0xf4>)
 8001494:	4a1e      	ldr	r2, [pc, #120]	; (8001510 <SystemInit+0x100>)
 8001496:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001498:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <SystemInit+0xf4>)
 800149a:	4a1e      	ldr	r2, [pc, #120]	; (8001514 <SystemInit+0x104>)
 800149c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800149e:	4b19      	ldr	r3, [pc, #100]	; (8001504 <SystemInit+0xf4>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014a4:	4b17      	ldr	r3, [pc, #92]	; (8001504 <SystemInit+0xf4>)
 80014a6:	4a1b      	ldr	r2, [pc, #108]	; (8001514 <SystemInit+0x104>)
 80014a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <SystemInit+0xf4>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <SystemInit+0xf4>)
 80014b2:	4a18      	ldr	r2, [pc, #96]	; (8001514 <SystemInit+0x104>)
 80014b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014b6:	4b13      	ldr	r3, [pc, #76]	; (8001504 <SystemInit+0xf4>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <SystemInit+0xf4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a10      	ldr	r2, [pc, #64]	; (8001504 <SystemInit+0xf4>)
 80014c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <SystemInit+0xf4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80014ce:	4b12      	ldr	r3, [pc, #72]	; (8001518 <SystemInit+0x108>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <SystemInit+0x10c>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014da:	d202      	bcs.n	80014e2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80014dc:	4b10      	ldr	r3, [pc, #64]	; (8001520 <SystemInit+0x110>)
 80014de:	2201      	movs	r2, #1
 80014e0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <SystemInit+0x114>)
 80014e4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80014e8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014ea:	4b04      	ldr	r3, [pc, #16]	; (80014fc <SystemInit+0xec>)
 80014ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014f0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000ed00 	.word	0xe000ed00
 8001500:	52002000 	.word	0x52002000
 8001504:	58024400 	.word	0x58024400
 8001508:	eaf6ed7f 	.word	0xeaf6ed7f
 800150c:	02020200 	.word	0x02020200
 8001510:	01ff0000 	.word	0x01ff0000
 8001514:	01010280 	.word	0x01010280
 8001518:	5c001000 	.word	0x5c001000
 800151c:	ffff0000 	.word	0xffff0000
 8001520:	51008108 	.word	0x51008108
 8001524:	52004000 	.word	0x52004000

08001528 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001528:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001560 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800152c:	f7ff ff70 	bl	8001410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001530:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001532:	e003      	b.n	800153c <LoopCopyDataInit>

08001534 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001536:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001538:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800153a:	3104      	adds	r1, #4

0800153c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800153c:	480a      	ldr	r0, [pc, #40]	; (8001568 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001540:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001542:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001544:	d3f6      	bcc.n	8001534 <CopyDataInit>
  ldr  r2, =_sbss
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001548:	e002      	b.n	8001550 <LoopFillZerobss>

0800154a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800154a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800154c:	f842 3b04 	str.w	r3, [r2], #4

08001550 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001552:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001554:	d3f9      	bcc.n	800154a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001556:	f00a ffdb 	bl	800c510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800155a:	f7ff f94f 	bl	80007fc <main>
  bx  lr    
 800155e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001560:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001564:	0800d058 	.word	0x0800d058
  ldr  r0, =_sdata
 8001568:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800156c:	24000094 	.word	0x24000094
  ldr  r2, =_sbss
 8001570:	24000094 	.word	0x24000094
  ldr  r3, = _ebss
 8001574:	24000f18 	.word	0x24000f18

08001578 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001578:	e7fe      	b.n	8001578 <ADC3_IRQHandler>
	...

0800157c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001582:	2003      	movs	r0, #3
 8001584:	f000 f98a 	bl	800189c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001588:	f003 fcba 	bl	8004f00 <HAL_RCC_GetSysClockFreq>
 800158c:	4601      	mov	r1, r0
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_Init+0x68>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	0a1b      	lsrs	r3, r3, #8
 8001594:	f003 030f 	and.w	r3, r3, #15
 8001598:	4a13      	ldr	r2, [pc, #76]	; (80015e8 <HAL_Init+0x6c>)
 800159a:	5cd3      	ldrb	r3, [r2, r3]
 800159c:	f003 031f 	and.w	r3, r3, #31
 80015a0:	fa21 f303 	lsr.w	r3, r1, r3
 80015a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <HAL_Init+0x68>)
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <HAL_Init+0x6c>)
 80015b0:	5cd3      	ldrb	r3, [r2, r3]
 80015b2:	f003 031f 	and.w	r3, r3, #31
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	fa22 f303 	lsr.w	r3, r2, r3
 80015bc:	4a0b      	ldr	r2, [pc, #44]	; (80015ec <HAL_Init+0x70>)
 80015be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015c0:	4a0b      	ldr	r2, [pc, #44]	; (80015f0 <HAL_Init+0x74>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015c6:	2000      	movs	r0, #0
 80015c8:	f000 f814 	bl	80015f4 <HAL_InitTick>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e002      	b.n	80015dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015d6:	f7ff fdbb 	bl	8001150 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	58024400 	.word	0x58024400
 80015e8:	0800cf5c 	.word	0x0800cf5c
 80015ec:	24000008 	.word	0x24000008
 80015f0:	24000004 	.word	0x24000004

080015f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015fc:	4b15      	ldr	r3, [pc, #84]	; (8001654 <HAL_InitTick+0x60>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e021      	b.n	800164c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <HAL_InitTick+0x64>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <HAL_InitTick+0x60>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	4619      	mov	r1, r3
 8001612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001616:	fbb3 f3f1 	udiv	r3, r3, r1
 800161a:	fbb2 f3f3 	udiv	r3, r2, r3
 800161e:	4618      	mov	r0, r3
 8001620:	f000 f96f 	bl	8001902 <HAL_SYSTICK_Config>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e00e      	b.n	800164c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b0f      	cmp	r3, #15
 8001632:	d80a      	bhi.n	800164a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001634:	2200      	movs	r2, #0
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	f04f 30ff 	mov.w	r0, #4294967295
 800163c:	f000 f939 	bl	80018b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001640:	4a06      	ldr	r2, [pc, #24]	; (800165c <HAL_InitTick+0x68>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	e000      	b.n	800164c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
}
 800164c:	4618      	mov	r0, r3
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	24000010 	.word	0x24000010
 8001658:	24000004 	.word	0x24000004
 800165c:	2400000c 	.word	0x2400000c

08001660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_IncTick+0x20>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_IncTick+0x24>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4413      	add	r3, r2
 8001670:	4a04      	ldr	r2, [pc, #16]	; (8001684 <HAL_IncTick+0x24>)
 8001672:	6013      	str	r3, [r2, #0]
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	24000010 	.word	0x24000010
 8001684:	24000aa8 	.word	0x24000aa8

08001688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return uwTick;
 800168c:	4b03      	ldr	r3, [pc, #12]	; (800169c <HAL_GetTick+0x14>)
 800168e:	681b      	ldr	r3, [r3, #0]
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	24000aa8 	.word	0x24000aa8

080016a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a8:	f7ff ffee 	bl	8001688 <HAL_GetTick>
 80016ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b8:	d005      	beq.n	80016c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <HAL_Delay+0x40>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4413      	add	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016c6:	bf00      	nop
 80016c8:	f7ff ffde 	bl	8001688 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d8f7      	bhi.n	80016c8 <HAL_Delay+0x28>
  {
  }
}
 80016d8:	bf00      	nop
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	24000010 	.word	0x24000010

080016e4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <HAL_GetREVID+0x14>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	0c1b      	lsrs	r3, r3, #16
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	5c001000 	.word	0x5c001000

080016fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <__NVIC_SetPriorityGrouping+0x40>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001718:	4013      	ands	r3, r2
 800171a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <__NVIC_SetPriorityGrouping+0x44>)
 8001726:	4313      	orrs	r3, r2
 8001728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800172a:	4a04      	ldr	r2, [pc, #16]	; (800173c <__NVIC_SetPriorityGrouping+0x40>)
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	60d3      	str	r3, [r2, #12]
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00
 8001740:	05fa0000 	.word	0x05fa0000

08001744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001748:	4b04      	ldr	r3, [pc, #16]	; (800175c <__NVIC_GetPriorityGrouping+0x18>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	0a1b      	lsrs	r3, r3, #8
 800174e:	f003 0307 	and.w	r3, r3, #7
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800176a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800176e:	2b00      	cmp	r3, #0
 8001770:	db0b      	blt.n	800178a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	f003 021f 	and.w	r2, r3, #31
 8001778:	4907      	ldr	r1, [pc, #28]	; (8001798 <__NVIC_EnableIRQ+0x38>)
 800177a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800177e:	095b      	lsrs	r3, r3, #5
 8001780:	2001      	movs	r0, #1
 8001782:	fa00 f202 	lsl.w	r2, r0, r2
 8001786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000e100 	.word	0xe000e100

0800179c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	db0a      	blt.n	80017c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	490c      	ldr	r1, [pc, #48]	; (80017e8 <__NVIC_SetPriority+0x4c>)
 80017b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ba:	0112      	lsls	r2, r2, #4
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	440b      	add	r3, r1
 80017c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c4:	e00a      	b.n	80017dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4908      	ldr	r1, [pc, #32]	; (80017ec <__NVIC_SetPriority+0x50>)
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	3b04      	subs	r3, #4
 80017d4:	0112      	lsls	r2, r2, #4
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	440b      	add	r3, r1
 80017da:	761a      	strb	r2, [r3, #24]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000e100 	.word	0xe000e100
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b089      	sub	sp, #36	; 0x24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f1c3 0307 	rsb	r3, r3, #7
 800180a:	2b04      	cmp	r3, #4
 800180c:	bf28      	it	cs
 800180e:	2304      	movcs	r3, #4
 8001810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3304      	adds	r3, #4
 8001816:	2b06      	cmp	r3, #6
 8001818:	d902      	bls.n	8001820 <NVIC_EncodePriority+0x30>
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3b03      	subs	r3, #3
 800181e:	e000      	b.n	8001822 <NVIC_EncodePriority+0x32>
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	f04f 32ff 	mov.w	r2, #4294967295
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43da      	mvns	r2, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	401a      	ands	r2, r3
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001838:	f04f 31ff 	mov.w	r1, #4294967295
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	43d9      	mvns	r1, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001848:	4313      	orrs	r3, r2
         );
}
 800184a:	4618      	mov	r0, r3
 800184c:	3724      	adds	r7, #36	; 0x24
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001868:	d301      	bcc.n	800186e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800186a:	2301      	movs	r3, #1
 800186c:	e00f      	b.n	800188e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800186e:	4a0a      	ldr	r2, [pc, #40]	; (8001898 <SysTick_Config+0x40>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001876:	210f      	movs	r1, #15
 8001878:	f04f 30ff 	mov.w	r0, #4294967295
 800187c:	f7ff ff8e 	bl	800179c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <SysTick_Config+0x40>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001886:	4b04      	ldr	r3, [pc, #16]	; (8001898 <SysTick_Config+0x40>)
 8001888:	2207      	movs	r2, #7
 800188a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	e000e010 	.word	0xe000e010

0800189c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ff29 	bl	80016fc <__NVIC_SetPriorityGrouping>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b086      	sub	sp, #24
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
 80018be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018c0:	f7ff ff40 	bl	8001744 <__NVIC_GetPriorityGrouping>
 80018c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	68b9      	ldr	r1, [r7, #8]
 80018ca:	6978      	ldr	r0, [r7, #20]
 80018cc:	f7ff ff90 	bl	80017f0 <NVIC_EncodePriority>
 80018d0:	4602      	mov	r2, r0
 80018d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018d6:	4611      	mov	r1, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff5f 	bl	800179c <__NVIC_SetPriority>
}
 80018de:	bf00      	nop
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4603      	mov	r3, r0
 80018ee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff33 	bl	8001760 <__NVIC_EnableIRQ>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ffa4 	bl	8001858 <SysTick_Config>
 8001910:	4603      	mov	r3, r0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001924:	f7ff feb0 	bl	8001688 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e316      	b.n	8001f62 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a66      	ldr	r2, [pc, #408]	; (8001ad4 <HAL_DMA_Init+0x1b8>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d04a      	beq.n	80019d4 <HAL_DMA_Init+0xb8>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a65      	ldr	r2, [pc, #404]	; (8001ad8 <HAL_DMA_Init+0x1bc>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d045      	beq.n	80019d4 <HAL_DMA_Init+0xb8>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a63      	ldr	r2, [pc, #396]	; (8001adc <HAL_DMA_Init+0x1c0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d040      	beq.n	80019d4 <HAL_DMA_Init+0xb8>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a62      	ldr	r2, [pc, #392]	; (8001ae0 <HAL_DMA_Init+0x1c4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d03b      	beq.n	80019d4 <HAL_DMA_Init+0xb8>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a60      	ldr	r2, [pc, #384]	; (8001ae4 <HAL_DMA_Init+0x1c8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d036      	beq.n	80019d4 <HAL_DMA_Init+0xb8>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a5f      	ldr	r2, [pc, #380]	; (8001ae8 <HAL_DMA_Init+0x1cc>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d031      	beq.n	80019d4 <HAL_DMA_Init+0xb8>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a5d      	ldr	r2, [pc, #372]	; (8001aec <HAL_DMA_Init+0x1d0>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d02c      	beq.n	80019d4 <HAL_DMA_Init+0xb8>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a5c      	ldr	r2, [pc, #368]	; (8001af0 <HAL_DMA_Init+0x1d4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d027      	beq.n	80019d4 <HAL_DMA_Init+0xb8>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a5a      	ldr	r2, [pc, #360]	; (8001af4 <HAL_DMA_Init+0x1d8>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d022      	beq.n	80019d4 <HAL_DMA_Init+0xb8>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a59      	ldr	r2, [pc, #356]	; (8001af8 <HAL_DMA_Init+0x1dc>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d01d      	beq.n	80019d4 <HAL_DMA_Init+0xb8>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a57      	ldr	r2, [pc, #348]	; (8001afc <HAL_DMA_Init+0x1e0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d018      	beq.n	80019d4 <HAL_DMA_Init+0xb8>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a56      	ldr	r2, [pc, #344]	; (8001b00 <HAL_DMA_Init+0x1e4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d013      	beq.n	80019d4 <HAL_DMA_Init+0xb8>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a54      	ldr	r2, [pc, #336]	; (8001b04 <HAL_DMA_Init+0x1e8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d00e      	beq.n	80019d4 <HAL_DMA_Init+0xb8>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a53      	ldr	r2, [pc, #332]	; (8001b08 <HAL_DMA_Init+0x1ec>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d009      	beq.n	80019d4 <HAL_DMA_Init+0xb8>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a51      	ldr	r2, [pc, #324]	; (8001b0c <HAL_DMA_Init+0x1f0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d004      	beq.n	80019d4 <HAL_DMA_Init+0xb8>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a50      	ldr	r2, [pc, #320]	; (8001b10 <HAL_DMA_Init+0x1f4>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d101      	bne.n	80019d8 <HAL_DMA_Init+0xbc>
 80019d4:	2301      	movs	r3, #1
 80019d6:	e000      	b.n	80019da <HAL_DMA_Init+0xbe>
 80019d8:	2300      	movs	r3, #0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 813b 	beq.w	8001c56 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2202      	movs	r2, #2
 80019ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a37      	ldr	r2, [pc, #220]	; (8001ad4 <HAL_DMA_Init+0x1b8>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d04a      	beq.n	8001a90 <HAL_DMA_Init+0x174>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a36      	ldr	r2, [pc, #216]	; (8001ad8 <HAL_DMA_Init+0x1bc>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d045      	beq.n	8001a90 <HAL_DMA_Init+0x174>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a34      	ldr	r2, [pc, #208]	; (8001adc <HAL_DMA_Init+0x1c0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d040      	beq.n	8001a90 <HAL_DMA_Init+0x174>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a33      	ldr	r2, [pc, #204]	; (8001ae0 <HAL_DMA_Init+0x1c4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d03b      	beq.n	8001a90 <HAL_DMA_Init+0x174>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a31      	ldr	r2, [pc, #196]	; (8001ae4 <HAL_DMA_Init+0x1c8>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d036      	beq.n	8001a90 <HAL_DMA_Init+0x174>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a30      	ldr	r2, [pc, #192]	; (8001ae8 <HAL_DMA_Init+0x1cc>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d031      	beq.n	8001a90 <HAL_DMA_Init+0x174>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a2e      	ldr	r2, [pc, #184]	; (8001aec <HAL_DMA_Init+0x1d0>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d02c      	beq.n	8001a90 <HAL_DMA_Init+0x174>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a2d      	ldr	r2, [pc, #180]	; (8001af0 <HAL_DMA_Init+0x1d4>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d027      	beq.n	8001a90 <HAL_DMA_Init+0x174>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a2b      	ldr	r2, [pc, #172]	; (8001af4 <HAL_DMA_Init+0x1d8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d022      	beq.n	8001a90 <HAL_DMA_Init+0x174>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a2a      	ldr	r2, [pc, #168]	; (8001af8 <HAL_DMA_Init+0x1dc>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d01d      	beq.n	8001a90 <HAL_DMA_Init+0x174>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a28      	ldr	r2, [pc, #160]	; (8001afc <HAL_DMA_Init+0x1e0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d018      	beq.n	8001a90 <HAL_DMA_Init+0x174>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a27      	ldr	r2, [pc, #156]	; (8001b00 <HAL_DMA_Init+0x1e4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d013      	beq.n	8001a90 <HAL_DMA_Init+0x174>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a25      	ldr	r2, [pc, #148]	; (8001b04 <HAL_DMA_Init+0x1e8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d00e      	beq.n	8001a90 <HAL_DMA_Init+0x174>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a24      	ldr	r2, [pc, #144]	; (8001b08 <HAL_DMA_Init+0x1ec>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d009      	beq.n	8001a90 <HAL_DMA_Init+0x174>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a22      	ldr	r2, [pc, #136]	; (8001b0c <HAL_DMA_Init+0x1f0>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d004      	beq.n	8001a90 <HAL_DMA_Init+0x174>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a21      	ldr	r2, [pc, #132]	; (8001b10 <HAL_DMA_Init+0x1f4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d108      	bne.n	8001aa2 <HAL_DMA_Init+0x186>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 0201 	bic.w	r2, r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	e007      	b.n	8001ab2 <HAL_DMA_Init+0x196>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 0201 	bic.w	r2, r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ab2:	e02f      	b.n	8001b14 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ab4:	f7ff fde8 	bl	8001688 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b05      	cmp	r3, #5
 8001ac0:	d928      	bls.n	8001b14 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2203      	movs	r2, #3
 8001acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e246      	b.n	8001f62 <HAL_DMA_Init+0x646>
 8001ad4:	40020010 	.word	0x40020010
 8001ad8:	40020028 	.word	0x40020028
 8001adc:	40020040 	.word	0x40020040
 8001ae0:	40020058 	.word	0x40020058
 8001ae4:	40020070 	.word	0x40020070
 8001ae8:	40020088 	.word	0x40020088
 8001aec:	400200a0 	.word	0x400200a0
 8001af0:	400200b8 	.word	0x400200b8
 8001af4:	40020410 	.word	0x40020410
 8001af8:	40020428 	.word	0x40020428
 8001afc:	40020440 	.word	0x40020440
 8001b00:	40020458 	.word	0x40020458
 8001b04:	40020470 	.word	0x40020470
 8001b08:	40020488 	.word	0x40020488
 8001b0c:	400204a0 	.word	0x400204a0
 8001b10:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1c8      	bne.n	8001ab4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	4b83      	ldr	r3, [pc, #524]	; (8001d3c <HAL_DMA_Init+0x420>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001b3a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b46:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b52:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d107      	bne.n	8001b78 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b70:	4313      	orrs	r3, r2
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001b78:	4b71      	ldr	r3, [pc, #452]	; (8001d40 <HAL_DMA_Init+0x424>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b71      	ldr	r3, [pc, #452]	; (8001d44 <HAL_DMA_Init+0x428>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b84:	d328      	bcc.n	8001bd8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b28      	cmp	r3, #40	; 0x28
 8001b8c:	d903      	bls.n	8001b96 <HAL_DMA_Init+0x27a>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b2e      	cmp	r3, #46	; 0x2e
 8001b94:	d917      	bls.n	8001bc6 <HAL_DMA_Init+0x2aa>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b3e      	cmp	r3, #62	; 0x3e
 8001b9c:	d903      	bls.n	8001ba6 <HAL_DMA_Init+0x28a>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b42      	cmp	r3, #66	; 0x42
 8001ba4:	d90f      	bls.n	8001bc6 <HAL_DMA_Init+0x2aa>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b46      	cmp	r3, #70	; 0x46
 8001bac:	d903      	bls.n	8001bb6 <HAL_DMA_Init+0x29a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b48      	cmp	r3, #72	; 0x48
 8001bb4:	d907      	bls.n	8001bc6 <HAL_DMA_Init+0x2aa>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b4e      	cmp	r3, #78	; 0x4e
 8001bbc:	d905      	bls.n	8001bca <HAL_DMA_Init+0x2ae>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b52      	cmp	r3, #82	; 0x52
 8001bc4:	d801      	bhi.n	8001bca <HAL_DMA_Init+0x2ae>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_DMA_Init+0x2b0>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bd6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f023 0307 	bic.w	r3, r3, #7
 8001bee:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d117      	bne.n	8001c32 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00e      	beq.n	8001c32 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f002 f81f 	bl	8003c58 <DMA_CheckFifoParam>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d008      	beq.n	8001c32 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2240      	movs	r2, #64	; 0x40
 8001c24:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e197      	b.n	8001f62 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f001 ff5a 	bl	8003af4 <DMA_CalcBaseAndBitshift>
 8001c40:	4603      	mov	r3, r0
 8001c42:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c48:	f003 031f 	and.w	r3, r3, #31
 8001c4c:	223f      	movs	r2, #63	; 0x3f
 8001c4e:	409a      	lsls	r2, r3
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	e0cd      	b.n	8001df2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a3b      	ldr	r2, [pc, #236]	; (8001d48 <HAL_DMA_Init+0x42c>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d022      	beq.n	8001ca6 <HAL_DMA_Init+0x38a>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a39      	ldr	r2, [pc, #228]	; (8001d4c <HAL_DMA_Init+0x430>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d01d      	beq.n	8001ca6 <HAL_DMA_Init+0x38a>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a38      	ldr	r2, [pc, #224]	; (8001d50 <HAL_DMA_Init+0x434>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d018      	beq.n	8001ca6 <HAL_DMA_Init+0x38a>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a36      	ldr	r2, [pc, #216]	; (8001d54 <HAL_DMA_Init+0x438>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d013      	beq.n	8001ca6 <HAL_DMA_Init+0x38a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a35      	ldr	r2, [pc, #212]	; (8001d58 <HAL_DMA_Init+0x43c>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d00e      	beq.n	8001ca6 <HAL_DMA_Init+0x38a>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a33      	ldr	r2, [pc, #204]	; (8001d5c <HAL_DMA_Init+0x440>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d009      	beq.n	8001ca6 <HAL_DMA_Init+0x38a>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a32      	ldr	r2, [pc, #200]	; (8001d60 <HAL_DMA_Init+0x444>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d004      	beq.n	8001ca6 <HAL_DMA_Init+0x38a>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a30      	ldr	r2, [pc, #192]	; (8001d64 <HAL_DMA_Init+0x448>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d101      	bne.n	8001caa <HAL_DMA_Init+0x38e>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <HAL_DMA_Init+0x390>
 8001caa:	2300      	movs	r3, #0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 8097 	beq.w	8001de0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a24      	ldr	r2, [pc, #144]	; (8001d48 <HAL_DMA_Init+0x42c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d021      	beq.n	8001d00 <HAL_DMA_Init+0x3e4>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a22      	ldr	r2, [pc, #136]	; (8001d4c <HAL_DMA_Init+0x430>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d01c      	beq.n	8001d00 <HAL_DMA_Init+0x3e4>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a21      	ldr	r2, [pc, #132]	; (8001d50 <HAL_DMA_Init+0x434>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d017      	beq.n	8001d00 <HAL_DMA_Init+0x3e4>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a1f      	ldr	r2, [pc, #124]	; (8001d54 <HAL_DMA_Init+0x438>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d012      	beq.n	8001d00 <HAL_DMA_Init+0x3e4>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a1e      	ldr	r2, [pc, #120]	; (8001d58 <HAL_DMA_Init+0x43c>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d00d      	beq.n	8001d00 <HAL_DMA_Init+0x3e4>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a1c      	ldr	r2, [pc, #112]	; (8001d5c <HAL_DMA_Init+0x440>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d008      	beq.n	8001d00 <HAL_DMA_Init+0x3e4>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a1b      	ldr	r2, [pc, #108]	; (8001d60 <HAL_DMA_Init+0x444>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d003      	beq.n	8001d00 <HAL_DMA_Init+0x3e4>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a19      	ldr	r2, [pc, #100]	; (8001d64 <HAL_DMA_Init+0x448>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <HAL_DMA_Init+0x44c>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2b40      	cmp	r3, #64	; 0x40
 8001d28:	d020      	beq.n	8001d6c <HAL_DMA_Init+0x450>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	2b80      	cmp	r3, #128	; 0x80
 8001d30:	d102      	bne.n	8001d38 <HAL_DMA_Init+0x41c>
 8001d32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d36:	e01a      	b.n	8001d6e <HAL_DMA_Init+0x452>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	e018      	b.n	8001d6e <HAL_DMA_Init+0x452>
 8001d3c:	fe10803f 	.word	0xfe10803f
 8001d40:	5c001000 	.word	0x5c001000
 8001d44:	ffff0000 	.word	0xffff0000
 8001d48:	58025408 	.word	0x58025408
 8001d4c:	5802541c 	.word	0x5802541c
 8001d50:	58025430 	.word	0x58025430
 8001d54:	58025444 	.word	0x58025444
 8001d58:	58025458 	.word	0x58025458
 8001d5c:	5802546c 	.word	0x5802546c
 8001d60:	58025480 	.word	0x58025480
 8001d64:	58025494 	.word	0x58025494
 8001d68:	fffe000f 	.word	0xfffe000f
 8001d6c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	68d2      	ldr	r2, [r2, #12]
 8001d72:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d9c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b6e      	ldr	r3, [pc, #440]	; (8001f6c <HAL_DMA_Init+0x650>)
 8001db4:	4413      	add	r3, r2
 8001db6:	4a6e      	ldr	r2, [pc, #440]	; (8001f70 <HAL_DMA_Init+0x654>)
 8001db8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	009a      	lsls	r2, r3, #2
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f001 fe95 	bl	8003af4 <DMA_CalcBaseAndBitshift>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd2:	f003 031f 	and.w	r3, r3, #31
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	409a      	lsls	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	e008      	b.n	8001df2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2240      	movs	r2, #64	; 0x40
 8001de4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2203      	movs	r2, #3
 8001dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e0b7      	b.n	8001f62 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a5f      	ldr	r2, [pc, #380]	; (8001f74 <HAL_DMA_Init+0x658>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d072      	beq.n	8001ee2 <HAL_DMA_Init+0x5c6>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a5d      	ldr	r2, [pc, #372]	; (8001f78 <HAL_DMA_Init+0x65c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d06d      	beq.n	8001ee2 <HAL_DMA_Init+0x5c6>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a5c      	ldr	r2, [pc, #368]	; (8001f7c <HAL_DMA_Init+0x660>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d068      	beq.n	8001ee2 <HAL_DMA_Init+0x5c6>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a5a      	ldr	r2, [pc, #360]	; (8001f80 <HAL_DMA_Init+0x664>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d063      	beq.n	8001ee2 <HAL_DMA_Init+0x5c6>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a59      	ldr	r2, [pc, #356]	; (8001f84 <HAL_DMA_Init+0x668>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d05e      	beq.n	8001ee2 <HAL_DMA_Init+0x5c6>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a57      	ldr	r2, [pc, #348]	; (8001f88 <HAL_DMA_Init+0x66c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d059      	beq.n	8001ee2 <HAL_DMA_Init+0x5c6>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a56      	ldr	r2, [pc, #344]	; (8001f8c <HAL_DMA_Init+0x670>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d054      	beq.n	8001ee2 <HAL_DMA_Init+0x5c6>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a54      	ldr	r2, [pc, #336]	; (8001f90 <HAL_DMA_Init+0x674>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d04f      	beq.n	8001ee2 <HAL_DMA_Init+0x5c6>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a53      	ldr	r2, [pc, #332]	; (8001f94 <HAL_DMA_Init+0x678>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d04a      	beq.n	8001ee2 <HAL_DMA_Init+0x5c6>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a51      	ldr	r2, [pc, #324]	; (8001f98 <HAL_DMA_Init+0x67c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d045      	beq.n	8001ee2 <HAL_DMA_Init+0x5c6>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a50      	ldr	r2, [pc, #320]	; (8001f9c <HAL_DMA_Init+0x680>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d040      	beq.n	8001ee2 <HAL_DMA_Init+0x5c6>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a4e      	ldr	r2, [pc, #312]	; (8001fa0 <HAL_DMA_Init+0x684>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d03b      	beq.n	8001ee2 <HAL_DMA_Init+0x5c6>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a4d      	ldr	r2, [pc, #308]	; (8001fa4 <HAL_DMA_Init+0x688>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d036      	beq.n	8001ee2 <HAL_DMA_Init+0x5c6>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a4b      	ldr	r2, [pc, #300]	; (8001fa8 <HAL_DMA_Init+0x68c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d031      	beq.n	8001ee2 <HAL_DMA_Init+0x5c6>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a4a      	ldr	r2, [pc, #296]	; (8001fac <HAL_DMA_Init+0x690>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d02c      	beq.n	8001ee2 <HAL_DMA_Init+0x5c6>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a48      	ldr	r2, [pc, #288]	; (8001fb0 <HAL_DMA_Init+0x694>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d027      	beq.n	8001ee2 <HAL_DMA_Init+0x5c6>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a47      	ldr	r2, [pc, #284]	; (8001fb4 <HAL_DMA_Init+0x698>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d022      	beq.n	8001ee2 <HAL_DMA_Init+0x5c6>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a45      	ldr	r2, [pc, #276]	; (8001fb8 <HAL_DMA_Init+0x69c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d01d      	beq.n	8001ee2 <HAL_DMA_Init+0x5c6>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a44      	ldr	r2, [pc, #272]	; (8001fbc <HAL_DMA_Init+0x6a0>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d018      	beq.n	8001ee2 <HAL_DMA_Init+0x5c6>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a42      	ldr	r2, [pc, #264]	; (8001fc0 <HAL_DMA_Init+0x6a4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d013      	beq.n	8001ee2 <HAL_DMA_Init+0x5c6>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a41      	ldr	r2, [pc, #260]	; (8001fc4 <HAL_DMA_Init+0x6a8>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d00e      	beq.n	8001ee2 <HAL_DMA_Init+0x5c6>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a3f      	ldr	r2, [pc, #252]	; (8001fc8 <HAL_DMA_Init+0x6ac>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d009      	beq.n	8001ee2 <HAL_DMA_Init+0x5c6>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a3e      	ldr	r2, [pc, #248]	; (8001fcc <HAL_DMA_Init+0x6b0>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d004      	beq.n	8001ee2 <HAL_DMA_Init+0x5c6>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a3c      	ldr	r2, [pc, #240]	; (8001fd0 <HAL_DMA_Init+0x6b4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d101      	bne.n	8001ee6 <HAL_DMA_Init+0x5ca>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <HAL_DMA_Init+0x5cc>
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d032      	beq.n	8001f52 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f001 ff2f 	bl	8003d50 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b80      	cmp	r3, #128	; 0x80
 8001ef8:	d102      	bne.n	8001f00 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001f14:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d010      	beq.n	8001f40 <HAL_DMA_Init+0x624>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d80c      	bhi.n	8001f40 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f001 ffac 	bl	8003e84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	e008      	b.n	8001f52 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	a7fdabf8 	.word	0xa7fdabf8
 8001f70:	cccccccd 	.word	0xcccccccd
 8001f74:	40020010 	.word	0x40020010
 8001f78:	40020028 	.word	0x40020028
 8001f7c:	40020040 	.word	0x40020040
 8001f80:	40020058 	.word	0x40020058
 8001f84:	40020070 	.word	0x40020070
 8001f88:	40020088 	.word	0x40020088
 8001f8c:	400200a0 	.word	0x400200a0
 8001f90:	400200b8 	.word	0x400200b8
 8001f94:	40020410 	.word	0x40020410
 8001f98:	40020428 	.word	0x40020428
 8001f9c:	40020440 	.word	0x40020440
 8001fa0:	40020458 	.word	0x40020458
 8001fa4:	40020470 	.word	0x40020470
 8001fa8:	40020488 	.word	0x40020488
 8001fac:	400204a0 	.word	0x400204a0
 8001fb0:	400204b8 	.word	0x400204b8
 8001fb4:	58025408 	.word	0x58025408
 8001fb8:	5802541c 	.word	0x5802541c
 8001fbc:	58025430 	.word	0x58025430
 8001fc0:	58025444 	.word	0x58025444
 8001fc4:	58025458 	.word	0x58025458
 8001fc8:	5802546c 	.word	0x5802546c
 8001fcc:	58025480 	.word	0x58025480
 8001fd0:	58025494 	.word	0x58025494

08001fd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
 8001fe0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e226      	b.n	800243e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_DMA_Start_IT+0x2a>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e21f      	b.n	800243e <HAL_DMA_Start_IT+0x46a>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b01      	cmp	r3, #1
 8002010:	f040 820a 	bne.w	8002428 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2202      	movs	r2, #2
 8002018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a68      	ldr	r2, [pc, #416]	; (80021c8 <HAL_DMA_Start_IT+0x1f4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d04a      	beq.n	80020c2 <HAL_DMA_Start_IT+0xee>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a66      	ldr	r2, [pc, #408]	; (80021cc <HAL_DMA_Start_IT+0x1f8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d045      	beq.n	80020c2 <HAL_DMA_Start_IT+0xee>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a65      	ldr	r2, [pc, #404]	; (80021d0 <HAL_DMA_Start_IT+0x1fc>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d040      	beq.n	80020c2 <HAL_DMA_Start_IT+0xee>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a63      	ldr	r2, [pc, #396]	; (80021d4 <HAL_DMA_Start_IT+0x200>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d03b      	beq.n	80020c2 <HAL_DMA_Start_IT+0xee>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a62      	ldr	r2, [pc, #392]	; (80021d8 <HAL_DMA_Start_IT+0x204>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d036      	beq.n	80020c2 <HAL_DMA_Start_IT+0xee>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a60      	ldr	r2, [pc, #384]	; (80021dc <HAL_DMA_Start_IT+0x208>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d031      	beq.n	80020c2 <HAL_DMA_Start_IT+0xee>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a5f      	ldr	r2, [pc, #380]	; (80021e0 <HAL_DMA_Start_IT+0x20c>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d02c      	beq.n	80020c2 <HAL_DMA_Start_IT+0xee>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a5d      	ldr	r2, [pc, #372]	; (80021e4 <HAL_DMA_Start_IT+0x210>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d027      	beq.n	80020c2 <HAL_DMA_Start_IT+0xee>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a5c      	ldr	r2, [pc, #368]	; (80021e8 <HAL_DMA_Start_IT+0x214>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d022      	beq.n	80020c2 <HAL_DMA_Start_IT+0xee>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a5a      	ldr	r2, [pc, #360]	; (80021ec <HAL_DMA_Start_IT+0x218>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d01d      	beq.n	80020c2 <HAL_DMA_Start_IT+0xee>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a59      	ldr	r2, [pc, #356]	; (80021f0 <HAL_DMA_Start_IT+0x21c>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d018      	beq.n	80020c2 <HAL_DMA_Start_IT+0xee>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a57      	ldr	r2, [pc, #348]	; (80021f4 <HAL_DMA_Start_IT+0x220>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d013      	beq.n	80020c2 <HAL_DMA_Start_IT+0xee>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a56      	ldr	r2, [pc, #344]	; (80021f8 <HAL_DMA_Start_IT+0x224>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d00e      	beq.n	80020c2 <HAL_DMA_Start_IT+0xee>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a54      	ldr	r2, [pc, #336]	; (80021fc <HAL_DMA_Start_IT+0x228>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d009      	beq.n	80020c2 <HAL_DMA_Start_IT+0xee>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a53      	ldr	r2, [pc, #332]	; (8002200 <HAL_DMA_Start_IT+0x22c>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d004      	beq.n	80020c2 <HAL_DMA_Start_IT+0xee>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a51      	ldr	r2, [pc, #324]	; (8002204 <HAL_DMA_Start_IT+0x230>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d108      	bne.n	80020d4 <HAL_DMA_Start_IT+0x100>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0201 	bic.w	r2, r2, #1
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	e007      	b.n	80020e4 <HAL_DMA_Start_IT+0x110>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0201 	bic.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f001 fb56 	bl	800379c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a34      	ldr	r2, [pc, #208]	; (80021c8 <HAL_DMA_Start_IT+0x1f4>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d04a      	beq.n	8002190 <HAL_DMA_Start_IT+0x1bc>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a33      	ldr	r2, [pc, #204]	; (80021cc <HAL_DMA_Start_IT+0x1f8>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d045      	beq.n	8002190 <HAL_DMA_Start_IT+0x1bc>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a31      	ldr	r2, [pc, #196]	; (80021d0 <HAL_DMA_Start_IT+0x1fc>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d040      	beq.n	8002190 <HAL_DMA_Start_IT+0x1bc>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a30      	ldr	r2, [pc, #192]	; (80021d4 <HAL_DMA_Start_IT+0x200>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d03b      	beq.n	8002190 <HAL_DMA_Start_IT+0x1bc>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a2e      	ldr	r2, [pc, #184]	; (80021d8 <HAL_DMA_Start_IT+0x204>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d036      	beq.n	8002190 <HAL_DMA_Start_IT+0x1bc>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a2d      	ldr	r2, [pc, #180]	; (80021dc <HAL_DMA_Start_IT+0x208>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d031      	beq.n	8002190 <HAL_DMA_Start_IT+0x1bc>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a2b      	ldr	r2, [pc, #172]	; (80021e0 <HAL_DMA_Start_IT+0x20c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d02c      	beq.n	8002190 <HAL_DMA_Start_IT+0x1bc>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a2a      	ldr	r2, [pc, #168]	; (80021e4 <HAL_DMA_Start_IT+0x210>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d027      	beq.n	8002190 <HAL_DMA_Start_IT+0x1bc>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a28      	ldr	r2, [pc, #160]	; (80021e8 <HAL_DMA_Start_IT+0x214>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d022      	beq.n	8002190 <HAL_DMA_Start_IT+0x1bc>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a27      	ldr	r2, [pc, #156]	; (80021ec <HAL_DMA_Start_IT+0x218>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d01d      	beq.n	8002190 <HAL_DMA_Start_IT+0x1bc>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a25      	ldr	r2, [pc, #148]	; (80021f0 <HAL_DMA_Start_IT+0x21c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d018      	beq.n	8002190 <HAL_DMA_Start_IT+0x1bc>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a24      	ldr	r2, [pc, #144]	; (80021f4 <HAL_DMA_Start_IT+0x220>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d013      	beq.n	8002190 <HAL_DMA_Start_IT+0x1bc>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a22      	ldr	r2, [pc, #136]	; (80021f8 <HAL_DMA_Start_IT+0x224>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d00e      	beq.n	8002190 <HAL_DMA_Start_IT+0x1bc>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a21      	ldr	r2, [pc, #132]	; (80021fc <HAL_DMA_Start_IT+0x228>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d009      	beq.n	8002190 <HAL_DMA_Start_IT+0x1bc>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a1f      	ldr	r2, [pc, #124]	; (8002200 <HAL_DMA_Start_IT+0x22c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d004      	beq.n	8002190 <HAL_DMA_Start_IT+0x1bc>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a1e      	ldr	r2, [pc, #120]	; (8002204 <HAL_DMA_Start_IT+0x230>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d101      	bne.n	8002194 <HAL_DMA_Start_IT+0x1c0>
 8002190:	2301      	movs	r3, #1
 8002192:	e000      	b.n	8002196 <HAL_DMA_Start_IT+0x1c2>
 8002194:	2300      	movs	r3, #0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d036      	beq.n	8002208 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f023 021e 	bic.w	r2, r3, #30
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f042 0216 	orr.w	r2, r2, #22
 80021ac:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d03e      	beq.n	8002234 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f042 0208 	orr.w	r2, r2, #8
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	e035      	b.n	8002234 <HAL_DMA_Start_IT+0x260>
 80021c8:	40020010 	.word	0x40020010
 80021cc:	40020028 	.word	0x40020028
 80021d0:	40020040 	.word	0x40020040
 80021d4:	40020058 	.word	0x40020058
 80021d8:	40020070 	.word	0x40020070
 80021dc:	40020088 	.word	0x40020088
 80021e0:	400200a0 	.word	0x400200a0
 80021e4:	400200b8 	.word	0x400200b8
 80021e8:	40020410 	.word	0x40020410
 80021ec:	40020428 	.word	0x40020428
 80021f0:	40020440 	.word	0x40020440
 80021f4:	40020458 	.word	0x40020458
 80021f8:	40020470 	.word	0x40020470
 80021fc:	40020488 	.word	0x40020488
 8002200:	400204a0 	.word	0x400204a0
 8002204:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 020e 	bic.w	r2, r3, #14
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 020a 	orr.w	r2, r2, #10
 800221a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	2b00      	cmp	r3, #0
 8002222:	d007      	beq.n	8002234 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0204 	orr.w	r2, r2, #4
 8002232:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a83      	ldr	r2, [pc, #524]	; (8002448 <HAL_DMA_Start_IT+0x474>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d072      	beq.n	8002324 <HAL_DMA_Start_IT+0x350>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a82      	ldr	r2, [pc, #520]	; (800244c <HAL_DMA_Start_IT+0x478>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d06d      	beq.n	8002324 <HAL_DMA_Start_IT+0x350>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a80      	ldr	r2, [pc, #512]	; (8002450 <HAL_DMA_Start_IT+0x47c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d068      	beq.n	8002324 <HAL_DMA_Start_IT+0x350>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a7f      	ldr	r2, [pc, #508]	; (8002454 <HAL_DMA_Start_IT+0x480>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d063      	beq.n	8002324 <HAL_DMA_Start_IT+0x350>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a7d      	ldr	r2, [pc, #500]	; (8002458 <HAL_DMA_Start_IT+0x484>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d05e      	beq.n	8002324 <HAL_DMA_Start_IT+0x350>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a7c      	ldr	r2, [pc, #496]	; (800245c <HAL_DMA_Start_IT+0x488>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d059      	beq.n	8002324 <HAL_DMA_Start_IT+0x350>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a7a      	ldr	r2, [pc, #488]	; (8002460 <HAL_DMA_Start_IT+0x48c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d054      	beq.n	8002324 <HAL_DMA_Start_IT+0x350>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a79      	ldr	r2, [pc, #484]	; (8002464 <HAL_DMA_Start_IT+0x490>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d04f      	beq.n	8002324 <HAL_DMA_Start_IT+0x350>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a77      	ldr	r2, [pc, #476]	; (8002468 <HAL_DMA_Start_IT+0x494>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d04a      	beq.n	8002324 <HAL_DMA_Start_IT+0x350>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a76      	ldr	r2, [pc, #472]	; (800246c <HAL_DMA_Start_IT+0x498>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d045      	beq.n	8002324 <HAL_DMA_Start_IT+0x350>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a74      	ldr	r2, [pc, #464]	; (8002470 <HAL_DMA_Start_IT+0x49c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d040      	beq.n	8002324 <HAL_DMA_Start_IT+0x350>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a73      	ldr	r2, [pc, #460]	; (8002474 <HAL_DMA_Start_IT+0x4a0>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d03b      	beq.n	8002324 <HAL_DMA_Start_IT+0x350>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a71      	ldr	r2, [pc, #452]	; (8002478 <HAL_DMA_Start_IT+0x4a4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d036      	beq.n	8002324 <HAL_DMA_Start_IT+0x350>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a70      	ldr	r2, [pc, #448]	; (800247c <HAL_DMA_Start_IT+0x4a8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d031      	beq.n	8002324 <HAL_DMA_Start_IT+0x350>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a6e      	ldr	r2, [pc, #440]	; (8002480 <HAL_DMA_Start_IT+0x4ac>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d02c      	beq.n	8002324 <HAL_DMA_Start_IT+0x350>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a6d      	ldr	r2, [pc, #436]	; (8002484 <HAL_DMA_Start_IT+0x4b0>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d027      	beq.n	8002324 <HAL_DMA_Start_IT+0x350>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a6b      	ldr	r2, [pc, #428]	; (8002488 <HAL_DMA_Start_IT+0x4b4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d022      	beq.n	8002324 <HAL_DMA_Start_IT+0x350>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a6a      	ldr	r2, [pc, #424]	; (800248c <HAL_DMA_Start_IT+0x4b8>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d01d      	beq.n	8002324 <HAL_DMA_Start_IT+0x350>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a68      	ldr	r2, [pc, #416]	; (8002490 <HAL_DMA_Start_IT+0x4bc>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d018      	beq.n	8002324 <HAL_DMA_Start_IT+0x350>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a67      	ldr	r2, [pc, #412]	; (8002494 <HAL_DMA_Start_IT+0x4c0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d013      	beq.n	8002324 <HAL_DMA_Start_IT+0x350>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a65      	ldr	r2, [pc, #404]	; (8002498 <HAL_DMA_Start_IT+0x4c4>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d00e      	beq.n	8002324 <HAL_DMA_Start_IT+0x350>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a64      	ldr	r2, [pc, #400]	; (800249c <HAL_DMA_Start_IT+0x4c8>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d009      	beq.n	8002324 <HAL_DMA_Start_IT+0x350>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a62      	ldr	r2, [pc, #392]	; (80024a0 <HAL_DMA_Start_IT+0x4cc>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d004      	beq.n	8002324 <HAL_DMA_Start_IT+0x350>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a61      	ldr	r2, [pc, #388]	; (80024a4 <HAL_DMA_Start_IT+0x4d0>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d101      	bne.n	8002328 <HAL_DMA_Start_IT+0x354>
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <HAL_DMA_Start_IT+0x356>
 8002328:	2300      	movs	r3, #0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d01a      	beq.n	8002364 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d007      	beq.n	800234c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002346:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800234a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002350:	2b00      	cmp	r3, #0
 8002352:	d007      	beq.n	8002364 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800235e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002362:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a37      	ldr	r2, [pc, #220]	; (8002448 <HAL_DMA_Start_IT+0x474>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d04a      	beq.n	8002404 <HAL_DMA_Start_IT+0x430>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a36      	ldr	r2, [pc, #216]	; (800244c <HAL_DMA_Start_IT+0x478>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d045      	beq.n	8002404 <HAL_DMA_Start_IT+0x430>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a34      	ldr	r2, [pc, #208]	; (8002450 <HAL_DMA_Start_IT+0x47c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d040      	beq.n	8002404 <HAL_DMA_Start_IT+0x430>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a33      	ldr	r2, [pc, #204]	; (8002454 <HAL_DMA_Start_IT+0x480>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d03b      	beq.n	8002404 <HAL_DMA_Start_IT+0x430>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a31      	ldr	r2, [pc, #196]	; (8002458 <HAL_DMA_Start_IT+0x484>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d036      	beq.n	8002404 <HAL_DMA_Start_IT+0x430>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a30      	ldr	r2, [pc, #192]	; (800245c <HAL_DMA_Start_IT+0x488>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d031      	beq.n	8002404 <HAL_DMA_Start_IT+0x430>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a2e      	ldr	r2, [pc, #184]	; (8002460 <HAL_DMA_Start_IT+0x48c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d02c      	beq.n	8002404 <HAL_DMA_Start_IT+0x430>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a2d      	ldr	r2, [pc, #180]	; (8002464 <HAL_DMA_Start_IT+0x490>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d027      	beq.n	8002404 <HAL_DMA_Start_IT+0x430>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a2b      	ldr	r2, [pc, #172]	; (8002468 <HAL_DMA_Start_IT+0x494>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d022      	beq.n	8002404 <HAL_DMA_Start_IT+0x430>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a2a      	ldr	r2, [pc, #168]	; (800246c <HAL_DMA_Start_IT+0x498>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d01d      	beq.n	8002404 <HAL_DMA_Start_IT+0x430>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a28      	ldr	r2, [pc, #160]	; (8002470 <HAL_DMA_Start_IT+0x49c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d018      	beq.n	8002404 <HAL_DMA_Start_IT+0x430>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a27      	ldr	r2, [pc, #156]	; (8002474 <HAL_DMA_Start_IT+0x4a0>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d013      	beq.n	8002404 <HAL_DMA_Start_IT+0x430>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a25      	ldr	r2, [pc, #148]	; (8002478 <HAL_DMA_Start_IT+0x4a4>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d00e      	beq.n	8002404 <HAL_DMA_Start_IT+0x430>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a24      	ldr	r2, [pc, #144]	; (800247c <HAL_DMA_Start_IT+0x4a8>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d009      	beq.n	8002404 <HAL_DMA_Start_IT+0x430>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a22      	ldr	r2, [pc, #136]	; (8002480 <HAL_DMA_Start_IT+0x4ac>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d004      	beq.n	8002404 <HAL_DMA_Start_IT+0x430>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a21      	ldr	r2, [pc, #132]	; (8002484 <HAL_DMA_Start_IT+0x4b0>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d108      	bne.n	8002416 <HAL_DMA_Start_IT+0x442>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0201 	orr.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	e012      	b.n	800243c <HAL_DMA_Start_IT+0x468>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f042 0201 	orr.w	r2, r2, #1
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	e009      	b.n	800243c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002436:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800243c:	7dfb      	ldrb	r3, [r7, #23]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40020010 	.word	0x40020010
 800244c:	40020028 	.word	0x40020028
 8002450:	40020040 	.word	0x40020040
 8002454:	40020058 	.word	0x40020058
 8002458:	40020070 	.word	0x40020070
 800245c:	40020088 	.word	0x40020088
 8002460:	400200a0 	.word	0x400200a0
 8002464:	400200b8 	.word	0x400200b8
 8002468:	40020410 	.word	0x40020410
 800246c:	40020428 	.word	0x40020428
 8002470:	40020440 	.word	0x40020440
 8002474:	40020458 	.word	0x40020458
 8002478:	40020470 	.word	0x40020470
 800247c:	40020488 	.word	0x40020488
 8002480:	400204a0 	.word	0x400204a0
 8002484:	400204b8 	.word	0x400204b8
 8002488:	58025408 	.word	0x58025408
 800248c:	5802541c 	.word	0x5802541c
 8002490:	58025430 	.word	0x58025430
 8002494:	58025444 	.word	0x58025444
 8002498:	58025458 	.word	0x58025458
 800249c:	5802546c 	.word	0x5802546c
 80024a0:	58025480 	.word	0x58025480
 80024a4:	58025494 	.word	0x58025494

080024a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e205      	b.n	80028c6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d004      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2280      	movs	r2, #128	; 0x80
 80024ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e1fa      	b.n	80028c6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a8c      	ldr	r2, [pc, #560]	; (8002708 <HAL_DMA_Abort_IT+0x260>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d04a      	beq.n	8002570 <HAL_DMA_Abort_IT+0xc8>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a8b      	ldr	r2, [pc, #556]	; (800270c <HAL_DMA_Abort_IT+0x264>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d045      	beq.n	8002570 <HAL_DMA_Abort_IT+0xc8>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a89      	ldr	r2, [pc, #548]	; (8002710 <HAL_DMA_Abort_IT+0x268>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d040      	beq.n	8002570 <HAL_DMA_Abort_IT+0xc8>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a88      	ldr	r2, [pc, #544]	; (8002714 <HAL_DMA_Abort_IT+0x26c>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d03b      	beq.n	8002570 <HAL_DMA_Abort_IT+0xc8>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a86      	ldr	r2, [pc, #536]	; (8002718 <HAL_DMA_Abort_IT+0x270>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d036      	beq.n	8002570 <HAL_DMA_Abort_IT+0xc8>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a85      	ldr	r2, [pc, #532]	; (800271c <HAL_DMA_Abort_IT+0x274>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d031      	beq.n	8002570 <HAL_DMA_Abort_IT+0xc8>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a83      	ldr	r2, [pc, #524]	; (8002720 <HAL_DMA_Abort_IT+0x278>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d02c      	beq.n	8002570 <HAL_DMA_Abort_IT+0xc8>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a82      	ldr	r2, [pc, #520]	; (8002724 <HAL_DMA_Abort_IT+0x27c>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d027      	beq.n	8002570 <HAL_DMA_Abort_IT+0xc8>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a80      	ldr	r2, [pc, #512]	; (8002728 <HAL_DMA_Abort_IT+0x280>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d022      	beq.n	8002570 <HAL_DMA_Abort_IT+0xc8>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a7f      	ldr	r2, [pc, #508]	; (800272c <HAL_DMA_Abort_IT+0x284>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d01d      	beq.n	8002570 <HAL_DMA_Abort_IT+0xc8>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a7d      	ldr	r2, [pc, #500]	; (8002730 <HAL_DMA_Abort_IT+0x288>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d018      	beq.n	8002570 <HAL_DMA_Abort_IT+0xc8>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a7c      	ldr	r2, [pc, #496]	; (8002734 <HAL_DMA_Abort_IT+0x28c>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d013      	beq.n	8002570 <HAL_DMA_Abort_IT+0xc8>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a7a      	ldr	r2, [pc, #488]	; (8002738 <HAL_DMA_Abort_IT+0x290>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d00e      	beq.n	8002570 <HAL_DMA_Abort_IT+0xc8>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a79      	ldr	r2, [pc, #484]	; (800273c <HAL_DMA_Abort_IT+0x294>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d009      	beq.n	8002570 <HAL_DMA_Abort_IT+0xc8>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a77      	ldr	r2, [pc, #476]	; (8002740 <HAL_DMA_Abort_IT+0x298>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d004      	beq.n	8002570 <HAL_DMA_Abort_IT+0xc8>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a76      	ldr	r2, [pc, #472]	; (8002744 <HAL_DMA_Abort_IT+0x29c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d101      	bne.n	8002574 <HAL_DMA_Abort_IT+0xcc>
 8002570:	2301      	movs	r3, #1
 8002572:	e000      	b.n	8002576 <HAL_DMA_Abort_IT+0xce>
 8002574:	2300      	movs	r3, #0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d065      	beq.n	8002646 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2204      	movs	r2, #4
 800257e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a60      	ldr	r2, [pc, #384]	; (8002708 <HAL_DMA_Abort_IT+0x260>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d04a      	beq.n	8002622 <HAL_DMA_Abort_IT+0x17a>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a5e      	ldr	r2, [pc, #376]	; (800270c <HAL_DMA_Abort_IT+0x264>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d045      	beq.n	8002622 <HAL_DMA_Abort_IT+0x17a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a5d      	ldr	r2, [pc, #372]	; (8002710 <HAL_DMA_Abort_IT+0x268>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d040      	beq.n	8002622 <HAL_DMA_Abort_IT+0x17a>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a5b      	ldr	r2, [pc, #364]	; (8002714 <HAL_DMA_Abort_IT+0x26c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d03b      	beq.n	8002622 <HAL_DMA_Abort_IT+0x17a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a5a      	ldr	r2, [pc, #360]	; (8002718 <HAL_DMA_Abort_IT+0x270>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d036      	beq.n	8002622 <HAL_DMA_Abort_IT+0x17a>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a58      	ldr	r2, [pc, #352]	; (800271c <HAL_DMA_Abort_IT+0x274>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d031      	beq.n	8002622 <HAL_DMA_Abort_IT+0x17a>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a57      	ldr	r2, [pc, #348]	; (8002720 <HAL_DMA_Abort_IT+0x278>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d02c      	beq.n	8002622 <HAL_DMA_Abort_IT+0x17a>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a55      	ldr	r2, [pc, #340]	; (8002724 <HAL_DMA_Abort_IT+0x27c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d027      	beq.n	8002622 <HAL_DMA_Abort_IT+0x17a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a54      	ldr	r2, [pc, #336]	; (8002728 <HAL_DMA_Abort_IT+0x280>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d022      	beq.n	8002622 <HAL_DMA_Abort_IT+0x17a>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a52      	ldr	r2, [pc, #328]	; (800272c <HAL_DMA_Abort_IT+0x284>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d01d      	beq.n	8002622 <HAL_DMA_Abort_IT+0x17a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a51      	ldr	r2, [pc, #324]	; (8002730 <HAL_DMA_Abort_IT+0x288>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d018      	beq.n	8002622 <HAL_DMA_Abort_IT+0x17a>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a4f      	ldr	r2, [pc, #316]	; (8002734 <HAL_DMA_Abort_IT+0x28c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d013      	beq.n	8002622 <HAL_DMA_Abort_IT+0x17a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a4e      	ldr	r2, [pc, #312]	; (8002738 <HAL_DMA_Abort_IT+0x290>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d00e      	beq.n	8002622 <HAL_DMA_Abort_IT+0x17a>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a4c      	ldr	r2, [pc, #304]	; (800273c <HAL_DMA_Abort_IT+0x294>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d009      	beq.n	8002622 <HAL_DMA_Abort_IT+0x17a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a4b      	ldr	r2, [pc, #300]	; (8002740 <HAL_DMA_Abort_IT+0x298>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d004      	beq.n	8002622 <HAL_DMA_Abort_IT+0x17a>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a49      	ldr	r2, [pc, #292]	; (8002744 <HAL_DMA_Abort_IT+0x29c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d108      	bne.n	8002634 <HAL_DMA_Abort_IT+0x18c>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0201 	bic.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	e147      	b.n	80028c4 <HAL_DMA_Abort_IT+0x41c>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0201 	bic.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	e13e      	b.n	80028c4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 020e 	bic.w	r2, r2, #14
 8002654:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a2b      	ldr	r2, [pc, #172]	; (8002708 <HAL_DMA_Abort_IT+0x260>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d04a      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x24e>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a29      	ldr	r2, [pc, #164]	; (800270c <HAL_DMA_Abort_IT+0x264>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d045      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x24e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a28      	ldr	r2, [pc, #160]	; (8002710 <HAL_DMA_Abort_IT+0x268>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d040      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x24e>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a26      	ldr	r2, [pc, #152]	; (8002714 <HAL_DMA_Abort_IT+0x26c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d03b      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x24e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a25      	ldr	r2, [pc, #148]	; (8002718 <HAL_DMA_Abort_IT+0x270>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d036      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x24e>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a23      	ldr	r2, [pc, #140]	; (800271c <HAL_DMA_Abort_IT+0x274>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d031      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x24e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a22      	ldr	r2, [pc, #136]	; (8002720 <HAL_DMA_Abort_IT+0x278>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d02c      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x24e>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a20      	ldr	r2, [pc, #128]	; (8002724 <HAL_DMA_Abort_IT+0x27c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d027      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x24e>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a1f      	ldr	r2, [pc, #124]	; (8002728 <HAL_DMA_Abort_IT+0x280>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d022      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x24e>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a1d      	ldr	r2, [pc, #116]	; (800272c <HAL_DMA_Abort_IT+0x284>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d01d      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x24e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1c      	ldr	r2, [pc, #112]	; (8002730 <HAL_DMA_Abort_IT+0x288>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d018      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x24e>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a1a      	ldr	r2, [pc, #104]	; (8002734 <HAL_DMA_Abort_IT+0x28c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d013      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x24e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a19      	ldr	r2, [pc, #100]	; (8002738 <HAL_DMA_Abort_IT+0x290>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d00e      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x24e>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a17      	ldr	r2, [pc, #92]	; (800273c <HAL_DMA_Abort_IT+0x294>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d009      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x24e>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a16      	ldr	r2, [pc, #88]	; (8002740 <HAL_DMA_Abort_IT+0x298>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d004      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x24e>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a14      	ldr	r2, [pc, #80]	; (8002744 <HAL_DMA_Abort_IT+0x29c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d128      	bne.n	8002748 <HAL_DMA_Abort_IT+0x2a0>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0201 	bic.w	r2, r2, #1
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	e027      	b.n	8002758 <HAL_DMA_Abort_IT+0x2b0>
 8002708:	40020010 	.word	0x40020010
 800270c:	40020028 	.word	0x40020028
 8002710:	40020040 	.word	0x40020040
 8002714:	40020058 	.word	0x40020058
 8002718:	40020070 	.word	0x40020070
 800271c:	40020088 	.word	0x40020088
 8002720:	400200a0 	.word	0x400200a0
 8002724:	400200b8 	.word	0x400200b8
 8002728:	40020410 	.word	0x40020410
 800272c:	40020428 	.word	0x40020428
 8002730:	40020440 	.word	0x40020440
 8002734:	40020458 	.word	0x40020458
 8002738:	40020470 	.word	0x40020470
 800273c:	40020488 	.word	0x40020488
 8002740:	400204a0 	.word	0x400204a0
 8002744:	400204b8 	.word	0x400204b8
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0201 	bic.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a5c      	ldr	r2, [pc, #368]	; (80028d0 <HAL_DMA_Abort_IT+0x428>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d072      	beq.n	8002848 <HAL_DMA_Abort_IT+0x3a0>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a5b      	ldr	r2, [pc, #364]	; (80028d4 <HAL_DMA_Abort_IT+0x42c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d06d      	beq.n	8002848 <HAL_DMA_Abort_IT+0x3a0>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a59      	ldr	r2, [pc, #356]	; (80028d8 <HAL_DMA_Abort_IT+0x430>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d068      	beq.n	8002848 <HAL_DMA_Abort_IT+0x3a0>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a58      	ldr	r2, [pc, #352]	; (80028dc <HAL_DMA_Abort_IT+0x434>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d063      	beq.n	8002848 <HAL_DMA_Abort_IT+0x3a0>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a56      	ldr	r2, [pc, #344]	; (80028e0 <HAL_DMA_Abort_IT+0x438>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d05e      	beq.n	8002848 <HAL_DMA_Abort_IT+0x3a0>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a55      	ldr	r2, [pc, #340]	; (80028e4 <HAL_DMA_Abort_IT+0x43c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d059      	beq.n	8002848 <HAL_DMA_Abort_IT+0x3a0>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a53      	ldr	r2, [pc, #332]	; (80028e8 <HAL_DMA_Abort_IT+0x440>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d054      	beq.n	8002848 <HAL_DMA_Abort_IT+0x3a0>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a52      	ldr	r2, [pc, #328]	; (80028ec <HAL_DMA_Abort_IT+0x444>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d04f      	beq.n	8002848 <HAL_DMA_Abort_IT+0x3a0>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a50      	ldr	r2, [pc, #320]	; (80028f0 <HAL_DMA_Abort_IT+0x448>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d04a      	beq.n	8002848 <HAL_DMA_Abort_IT+0x3a0>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a4f      	ldr	r2, [pc, #316]	; (80028f4 <HAL_DMA_Abort_IT+0x44c>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d045      	beq.n	8002848 <HAL_DMA_Abort_IT+0x3a0>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a4d      	ldr	r2, [pc, #308]	; (80028f8 <HAL_DMA_Abort_IT+0x450>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d040      	beq.n	8002848 <HAL_DMA_Abort_IT+0x3a0>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a4c      	ldr	r2, [pc, #304]	; (80028fc <HAL_DMA_Abort_IT+0x454>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d03b      	beq.n	8002848 <HAL_DMA_Abort_IT+0x3a0>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a4a      	ldr	r2, [pc, #296]	; (8002900 <HAL_DMA_Abort_IT+0x458>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d036      	beq.n	8002848 <HAL_DMA_Abort_IT+0x3a0>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a49      	ldr	r2, [pc, #292]	; (8002904 <HAL_DMA_Abort_IT+0x45c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d031      	beq.n	8002848 <HAL_DMA_Abort_IT+0x3a0>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a47      	ldr	r2, [pc, #284]	; (8002908 <HAL_DMA_Abort_IT+0x460>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d02c      	beq.n	8002848 <HAL_DMA_Abort_IT+0x3a0>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a46      	ldr	r2, [pc, #280]	; (800290c <HAL_DMA_Abort_IT+0x464>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d027      	beq.n	8002848 <HAL_DMA_Abort_IT+0x3a0>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a44      	ldr	r2, [pc, #272]	; (8002910 <HAL_DMA_Abort_IT+0x468>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d022      	beq.n	8002848 <HAL_DMA_Abort_IT+0x3a0>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a43      	ldr	r2, [pc, #268]	; (8002914 <HAL_DMA_Abort_IT+0x46c>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d01d      	beq.n	8002848 <HAL_DMA_Abort_IT+0x3a0>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a41      	ldr	r2, [pc, #260]	; (8002918 <HAL_DMA_Abort_IT+0x470>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d018      	beq.n	8002848 <HAL_DMA_Abort_IT+0x3a0>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a40      	ldr	r2, [pc, #256]	; (800291c <HAL_DMA_Abort_IT+0x474>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d013      	beq.n	8002848 <HAL_DMA_Abort_IT+0x3a0>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a3e      	ldr	r2, [pc, #248]	; (8002920 <HAL_DMA_Abort_IT+0x478>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00e      	beq.n	8002848 <HAL_DMA_Abort_IT+0x3a0>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a3d      	ldr	r2, [pc, #244]	; (8002924 <HAL_DMA_Abort_IT+0x47c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d009      	beq.n	8002848 <HAL_DMA_Abort_IT+0x3a0>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a3b      	ldr	r2, [pc, #236]	; (8002928 <HAL_DMA_Abort_IT+0x480>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d004      	beq.n	8002848 <HAL_DMA_Abort_IT+0x3a0>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a3a      	ldr	r2, [pc, #232]	; (800292c <HAL_DMA_Abort_IT+0x484>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d101      	bne.n	800284c <HAL_DMA_Abort_IT+0x3a4>
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <HAL_DMA_Abort_IT+0x3a6>
 800284c:	2300      	movs	r3, #0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d028      	beq.n	80028a4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800285c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002860:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002866:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286c:	f003 031f 	and.w	r3, r3, #31
 8002870:	2201      	movs	r2, #1
 8002872:	409a      	lsls	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002880:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00c      	beq.n	80028a4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002894:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002898:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80028a2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40020010 	.word	0x40020010
 80028d4:	40020028 	.word	0x40020028
 80028d8:	40020040 	.word	0x40020040
 80028dc:	40020058 	.word	0x40020058
 80028e0:	40020070 	.word	0x40020070
 80028e4:	40020088 	.word	0x40020088
 80028e8:	400200a0 	.word	0x400200a0
 80028ec:	400200b8 	.word	0x400200b8
 80028f0:	40020410 	.word	0x40020410
 80028f4:	40020428 	.word	0x40020428
 80028f8:	40020440 	.word	0x40020440
 80028fc:	40020458 	.word	0x40020458
 8002900:	40020470 	.word	0x40020470
 8002904:	40020488 	.word	0x40020488
 8002908:	400204a0 	.word	0x400204a0
 800290c:	400204b8 	.word	0x400204b8
 8002910:	58025408 	.word	0x58025408
 8002914:	5802541c 	.word	0x5802541c
 8002918:	58025430 	.word	0x58025430
 800291c:	58025444 	.word	0x58025444
 8002920:	58025458 	.word	0x58025458
 8002924:	5802546c 	.word	0x5802546c
 8002928:	58025480 	.word	0x58025480
 800292c:	58025494 	.word	0x58025494

08002930 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b08a      	sub	sp, #40	; 0x28
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002938:	2300      	movs	r3, #0
 800293a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800293c:	4b67      	ldr	r3, [pc, #412]	; (8002adc <HAL_DMA_IRQHandler+0x1ac>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a67      	ldr	r2, [pc, #412]	; (8002ae0 <HAL_DMA_IRQHandler+0x1b0>)
 8002942:	fba2 2303 	umull	r2, r3, r2, r3
 8002946:	0a9b      	lsrs	r3, r3, #10
 8002948:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002954:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a5f      	ldr	r2, [pc, #380]	; (8002ae4 <HAL_DMA_IRQHandler+0x1b4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d04a      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xd2>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a5d      	ldr	r2, [pc, #372]	; (8002ae8 <HAL_DMA_IRQHandler+0x1b8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d045      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xd2>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a5c      	ldr	r2, [pc, #368]	; (8002aec <HAL_DMA_IRQHandler+0x1bc>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d040      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xd2>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a5a      	ldr	r2, [pc, #360]	; (8002af0 <HAL_DMA_IRQHandler+0x1c0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d03b      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xd2>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a59      	ldr	r2, [pc, #356]	; (8002af4 <HAL_DMA_IRQHandler+0x1c4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d036      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xd2>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a57      	ldr	r2, [pc, #348]	; (8002af8 <HAL_DMA_IRQHandler+0x1c8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d031      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xd2>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a56      	ldr	r2, [pc, #344]	; (8002afc <HAL_DMA_IRQHandler+0x1cc>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d02c      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xd2>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a54      	ldr	r2, [pc, #336]	; (8002b00 <HAL_DMA_IRQHandler+0x1d0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d027      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xd2>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a53      	ldr	r2, [pc, #332]	; (8002b04 <HAL_DMA_IRQHandler+0x1d4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d022      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xd2>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a51      	ldr	r2, [pc, #324]	; (8002b08 <HAL_DMA_IRQHandler+0x1d8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d01d      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xd2>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a50      	ldr	r2, [pc, #320]	; (8002b0c <HAL_DMA_IRQHandler+0x1dc>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d018      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xd2>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a4e      	ldr	r2, [pc, #312]	; (8002b10 <HAL_DMA_IRQHandler+0x1e0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d013      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xd2>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a4d      	ldr	r2, [pc, #308]	; (8002b14 <HAL_DMA_IRQHandler+0x1e4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d00e      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xd2>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a4b      	ldr	r2, [pc, #300]	; (8002b18 <HAL_DMA_IRQHandler+0x1e8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d009      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xd2>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a4a      	ldr	r2, [pc, #296]	; (8002b1c <HAL_DMA_IRQHandler+0x1ec>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d004      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xd2>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a48      	ldr	r2, [pc, #288]	; (8002b20 <HAL_DMA_IRQHandler+0x1f0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d101      	bne.n	8002a06 <HAL_DMA_IRQHandler+0xd6>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <HAL_DMA_IRQHandler+0xd8>
 8002a06:	2300      	movs	r3, #0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 842b 	beq.w	8003264 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a12:	f003 031f 	and.w	r3, r3, #31
 8002a16:	2208      	movs	r2, #8
 8002a18:	409a      	lsls	r2, r3
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 80a2 	beq.w	8002b68 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a2e      	ldr	r2, [pc, #184]	; (8002ae4 <HAL_DMA_IRQHandler+0x1b4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d04a      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x194>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a2d      	ldr	r2, [pc, #180]	; (8002ae8 <HAL_DMA_IRQHandler+0x1b8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d045      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x194>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a2b      	ldr	r2, [pc, #172]	; (8002aec <HAL_DMA_IRQHandler+0x1bc>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d040      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x194>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a2a      	ldr	r2, [pc, #168]	; (8002af0 <HAL_DMA_IRQHandler+0x1c0>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d03b      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x194>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a28      	ldr	r2, [pc, #160]	; (8002af4 <HAL_DMA_IRQHandler+0x1c4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d036      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x194>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a27      	ldr	r2, [pc, #156]	; (8002af8 <HAL_DMA_IRQHandler+0x1c8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d031      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x194>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a25      	ldr	r2, [pc, #148]	; (8002afc <HAL_DMA_IRQHandler+0x1cc>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d02c      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x194>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a24      	ldr	r2, [pc, #144]	; (8002b00 <HAL_DMA_IRQHandler+0x1d0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d027      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x194>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a22      	ldr	r2, [pc, #136]	; (8002b04 <HAL_DMA_IRQHandler+0x1d4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d022      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x194>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a21      	ldr	r2, [pc, #132]	; (8002b08 <HAL_DMA_IRQHandler+0x1d8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d01d      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x194>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a1f      	ldr	r2, [pc, #124]	; (8002b0c <HAL_DMA_IRQHandler+0x1dc>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d018      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x194>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a1e      	ldr	r2, [pc, #120]	; (8002b10 <HAL_DMA_IRQHandler+0x1e0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d013      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x194>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a1c      	ldr	r2, [pc, #112]	; (8002b14 <HAL_DMA_IRQHandler+0x1e4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d00e      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x194>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a1b      	ldr	r2, [pc, #108]	; (8002b18 <HAL_DMA_IRQHandler+0x1e8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d009      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x194>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a19      	ldr	r2, [pc, #100]	; (8002b1c <HAL_DMA_IRQHandler+0x1ec>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d004      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x194>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a18      	ldr	r2, [pc, #96]	; (8002b20 <HAL_DMA_IRQHandler+0x1f0>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d12f      	bne.n	8002b24 <HAL_DMA_IRQHandler+0x1f4>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	bf14      	ite	ne
 8002ad2:	2301      	movne	r3, #1
 8002ad4:	2300      	moveq	r3, #0
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	e02e      	b.n	8002b38 <HAL_DMA_IRQHandler+0x208>
 8002ada:	bf00      	nop
 8002adc:	24000004 	.word	0x24000004
 8002ae0:	1b4e81b5 	.word	0x1b4e81b5
 8002ae4:	40020010 	.word	0x40020010
 8002ae8:	40020028 	.word	0x40020028
 8002aec:	40020040 	.word	0x40020040
 8002af0:	40020058 	.word	0x40020058
 8002af4:	40020070 	.word	0x40020070
 8002af8:	40020088 	.word	0x40020088
 8002afc:	400200a0 	.word	0x400200a0
 8002b00:	400200b8 	.word	0x400200b8
 8002b04:	40020410 	.word	0x40020410
 8002b08:	40020428 	.word	0x40020428
 8002b0c:	40020440 	.word	0x40020440
 8002b10:	40020458 	.word	0x40020458
 8002b14:	40020470 	.word	0x40020470
 8002b18:	40020488 	.word	0x40020488
 8002b1c:	400204a0 	.word	0x400204a0
 8002b20:	400204b8 	.word	0x400204b8
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	bf14      	ite	ne
 8002b32:	2301      	movne	r3, #1
 8002b34:	2300      	moveq	r3, #0
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d015      	beq.n	8002b68 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0204 	bic.w	r2, r2, #4
 8002b4a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b50:	f003 031f 	and.w	r3, r3, #31
 8002b54:	2208      	movs	r2, #8
 8002b56:	409a      	lsls	r2, r3
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b60:	f043 0201 	orr.w	r2, r3, #1
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6c:	f003 031f 	and.w	r3, r3, #31
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	fa22 f303 	lsr.w	r3, r2, r3
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d06e      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a69      	ldr	r2, [pc, #420]	; (8002d28 <HAL_DMA_IRQHandler+0x3f8>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d04a      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x2ee>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a67      	ldr	r2, [pc, #412]	; (8002d2c <HAL_DMA_IRQHandler+0x3fc>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d045      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x2ee>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a66      	ldr	r2, [pc, #408]	; (8002d30 <HAL_DMA_IRQHandler+0x400>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d040      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x2ee>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a64      	ldr	r2, [pc, #400]	; (8002d34 <HAL_DMA_IRQHandler+0x404>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d03b      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x2ee>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a63      	ldr	r2, [pc, #396]	; (8002d38 <HAL_DMA_IRQHandler+0x408>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d036      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x2ee>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a61      	ldr	r2, [pc, #388]	; (8002d3c <HAL_DMA_IRQHandler+0x40c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d031      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x2ee>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a60      	ldr	r2, [pc, #384]	; (8002d40 <HAL_DMA_IRQHandler+0x410>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d02c      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x2ee>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a5e      	ldr	r2, [pc, #376]	; (8002d44 <HAL_DMA_IRQHandler+0x414>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d027      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x2ee>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a5d      	ldr	r2, [pc, #372]	; (8002d48 <HAL_DMA_IRQHandler+0x418>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d022      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x2ee>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a5b      	ldr	r2, [pc, #364]	; (8002d4c <HAL_DMA_IRQHandler+0x41c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d01d      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x2ee>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a5a      	ldr	r2, [pc, #360]	; (8002d50 <HAL_DMA_IRQHandler+0x420>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d018      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x2ee>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a58      	ldr	r2, [pc, #352]	; (8002d54 <HAL_DMA_IRQHandler+0x424>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d013      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x2ee>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a57      	ldr	r2, [pc, #348]	; (8002d58 <HAL_DMA_IRQHandler+0x428>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d00e      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x2ee>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a55      	ldr	r2, [pc, #340]	; (8002d5c <HAL_DMA_IRQHandler+0x42c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d009      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x2ee>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a54      	ldr	r2, [pc, #336]	; (8002d60 <HAL_DMA_IRQHandler+0x430>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d004      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x2ee>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a52      	ldr	r2, [pc, #328]	; (8002d64 <HAL_DMA_IRQHandler+0x434>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d10a      	bne.n	8002c34 <HAL_DMA_IRQHandler+0x304>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	bf14      	ite	ne
 8002c2c:	2301      	movne	r3, #1
 8002c2e:	2300      	moveq	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	e003      	b.n	8002c3c <HAL_DMA_IRQHandler+0x30c>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00d      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c44:	f003 031f 	and.w	r3, r3, #31
 8002c48:	2201      	movs	r2, #1
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c54:	f043 0202 	orr.w	r2, r3, #2
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c60:	f003 031f 	and.w	r3, r3, #31
 8002c64:	2204      	movs	r2, #4
 8002c66:	409a      	lsls	r2, r3
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 808f 	beq.w	8002d90 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a2c      	ldr	r2, [pc, #176]	; (8002d28 <HAL_DMA_IRQHandler+0x3f8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d04a      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x3e2>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a2a      	ldr	r2, [pc, #168]	; (8002d2c <HAL_DMA_IRQHandler+0x3fc>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d045      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x3e2>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a29      	ldr	r2, [pc, #164]	; (8002d30 <HAL_DMA_IRQHandler+0x400>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d040      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x3e2>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a27      	ldr	r2, [pc, #156]	; (8002d34 <HAL_DMA_IRQHandler+0x404>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d03b      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x3e2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a26      	ldr	r2, [pc, #152]	; (8002d38 <HAL_DMA_IRQHandler+0x408>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d036      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x3e2>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a24      	ldr	r2, [pc, #144]	; (8002d3c <HAL_DMA_IRQHandler+0x40c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d031      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x3e2>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a23      	ldr	r2, [pc, #140]	; (8002d40 <HAL_DMA_IRQHandler+0x410>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d02c      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x3e2>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a21      	ldr	r2, [pc, #132]	; (8002d44 <HAL_DMA_IRQHandler+0x414>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d027      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x3e2>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a20      	ldr	r2, [pc, #128]	; (8002d48 <HAL_DMA_IRQHandler+0x418>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d022      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x3e2>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a1e      	ldr	r2, [pc, #120]	; (8002d4c <HAL_DMA_IRQHandler+0x41c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d01d      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x3e2>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a1d      	ldr	r2, [pc, #116]	; (8002d50 <HAL_DMA_IRQHandler+0x420>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d018      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x3e2>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a1b      	ldr	r2, [pc, #108]	; (8002d54 <HAL_DMA_IRQHandler+0x424>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d013      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x3e2>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a1a      	ldr	r2, [pc, #104]	; (8002d58 <HAL_DMA_IRQHandler+0x428>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00e      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x3e2>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a18      	ldr	r2, [pc, #96]	; (8002d5c <HAL_DMA_IRQHandler+0x42c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d009      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x3e2>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a17      	ldr	r2, [pc, #92]	; (8002d60 <HAL_DMA_IRQHandler+0x430>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d004      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x3e2>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a15      	ldr	r2, [pc, #84]	; (8002d64 <HAL_DMA_IRQHandler+0x434>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d12a      	bne.n	8002d68 <HAL_DMA_IRQHandler+0x438>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bf14      	ite	ne
 8002d20:	2301      	movne	r3, #1
 8002d22:	2300      	moveq	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	e023      	b.n	8002d70 <HAL_DMA_IRQHandler+0x440>
 8002d28:	40020010 	.word	0x40020010
 8002d2c:	40020028 	.word	0x40020028
 8002d30:	40020040 	.word	0x40020040
 8002d34:	40020058 	.word	0x40020058
 8002d38:	40020070 	.word	0x40020070
 8002d3c:	40020088 	.word	0x40020088
 8002d40:	400200a0 	.word	0x400200a0
 8002d44:	400200b8 	.word	0x400200b8
 8002d48:	40020410 	.word	0x40020410
 8002d4c:	40020428 	.word	0x40020428
 8002d50:	40020440 	.word	0x40020440
 8002d54:	40020458 	.word	0x40020458
 8002d58:	40020470 	.word	0x40020470
 8002d5c:	40020488 	.word	0x40020488
 8002d60:	400204a0 	.word	0x400204a0
 8002d64:	400204b8 	.word	0x400204b8
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00d      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d78:	f003 031f 	and.w	r3, r3, #31
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d88:	f043 0204 	orr.w	r2, r3, #4
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d94:	f003 031f 	and.w	r3, r3, #31
 8002d98:	2210      	movs	r2, #16
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 80a6 	beq.w	8002ef2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a85      	ldr	r2, [pc, #532]	; (8002fc0 <HAL_DMA_IRQHandler+0x690>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d04a      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x516>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a83      	ldr	r2, [pc, #524]	; (8002fc4 <HAL_DMA_IRQHandler+0x694>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d045      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x516>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a82      	ldr	r2, [pc, #520]	; (8002fc8 <HAL_DMA_IRQHandler+0x698>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d040      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x516>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a80      	ldr	r2, [pc, #512]	; (8002fcc <HAL_DMA_IRQHandler+0x69c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d03b      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x516>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a7f      	ldr	r2, [pc, #508]	; (8002fd0 <HAL_DMA_IRQHandler+0x6a0>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d036      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x516>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a7d      	ldr	r2, [pc, #500]	; (8002fd4 <HAL_DMA_IRQHandler+0x6a4>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d031      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x516>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a7c      	ldr	r2, [pc, #496]	; (8002fd8 <HAL_DMA_IRQHandler+0x6a8>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d02c      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x516>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a7a      	ldr	r2, [pc, #488]	; (8002fdc <HAL_DMA_IRQHandler+0x6ac>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d027      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x516>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a79      	ldr	r2, [pc, #484]	; (8002fe0 <HAL_DMA_IRQHandler+0x6b0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d022      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x516>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a77      	ldr	r2, [pc, #476]	; (8002fe4 <HAL_DMA_IRQHandler+0x6b4>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d01d      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x516>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a76      	ldr	r2, [pc, #472]	; (8002fe8 <HAL_DMA_IRQHandler+0x6b8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d018      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x516>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a74      	ldr	r2, [pc, #464]	; (8002fec <HAL_DMA_IRQHandler+0x6bc>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d013      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x516>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a73      	ldr	r2, [pc, #460]	; (8002ff0 <HAL_DMA_IRQHandler+0x6c0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d00e      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x516>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a71      	ldr	r2, [pc, #452]	; (8002ff4 <HAL_DMA_IRQHandler+0x6c4>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d009      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x516>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a70      	ldr	r2, [pc, #448]	; (8002ff8 <HAL_DMA_IRQHandler+0x6c8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d004      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x516>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a6e      	ldr	r2, [pc, #440]	; (8002ffc <HAL_DMA_IRQHandler+0x6cc>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d10a      	bne.n	8002e5c <HAL_DMA_IRQHandler+0x52c>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	bf14      	ite	ne
 8002e54:	2301      	movne	r3, #1
 8002e56:	2300      	moveq	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	e009      	b.n	8002e70 <HAL_DMA_IRQHandler+0x540>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	bf14      	ite	ne
 8002e6a:	2301      	movne	r3, #1
 8002e6c:	2300      	moveq	r3, #0
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d03e      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e78:	f003 031f 	and.w	r3, r3, #31
 8002e7c:	2210      	movs	r2, #16
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d018      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d108      	bne.n	8002eb2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d024      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	4798      	blx	r3
 8002eb0:	e01f      	b.n	8002ef2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d01b      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	4798      	blx	r3
 8002ec2:	e016      	b.n	8002ef2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d107      	bne.n	8002ee2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0208 	bic.w	r2, r2, #8
 8002ee0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef6:	f003 031f 	and.w	r3, r3, #31
 8002efa:	2220      	movs	r2, #32
 8002efc:	409a      	lsls	r2, r3
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 8110 	beq.w	8003128 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a2c      	ldr	r2, [pc, #176]	; (8002fc0 <HAL_DMA_IRQHandler+0x690>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d04a      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x678>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a2b      	ldr	r2, [pc, #172]	; (8002fc4 <HAL_DMA_IRQHandler+0x694>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d045      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x678>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a29      	ldr	r2, [pc, #164]	; (8002fc8 <HAL_DMA_IRQHandler+0x698>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d040      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x678>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a28      	ldr	r2, [pc, #160]	; (8002fcc <HAL_DMA_IRQHandler+0x69c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d03b      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x678>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a26      	ldr	r2, [pc, #152]	; (8002fd0 <HAL_DMA_IRQHandler+0x6a0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d036      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x678>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a25      	ldr	r2, [pc, #148]	; (8002fd4 <HAL_DMA_IRQHandler+0x6a4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d031      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x678>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a23      	ldr	r2, [pc, #140]	; (8002fd8 <HAL_DMA_IRQHandler+0x6a8>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d02c      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x678>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a22      	ldr	r2, [pc, #136]	; (8002fdc <HAL_DMA_IRQHandler+0x6ac>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d027      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x678>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a20      	ldr	r2, [pc, #128]	; (8002fe0 <HAL_DMA_IRQHandler+0x6b0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d022      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x678>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a1f      	ldr	r2, [pc, #124]	; (8002fe4 <HAL_DMA_IRQHandler+0x6b4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d01d      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x678>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a1d      	ldr	r2, [pc, #116]	; (8002fe8 <HAL_DMA_IRQHandler+0x6b8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d018      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x678>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a1c      	ldr	r2, [pc, #112]	; (8002fec <HAL_DMA_IRQHandler+0x6bc>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d013      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x678>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a1a      	ldr	r2, [pc, #104]	; (8002ff0 <HAL_DMA_IRQHandler+0x6c0>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d00e      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x678>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a19      	ldr	r2, [pc, #100]	; (8002ff4 <HAL_DMA_IRQHandler+0x6c4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d009      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x678>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a17      	ldr	r2, [pc, #92]	; (8002ff8 <HAL_DMA_IRQHandler+0x6c8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d004      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x678>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a16      	ldr	r2, [pc, #88]	; (8002ffc <HAL_DMA_IRQHandler+0x6cc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d12b      	bne.n	8003000 <HAL_DMA_IRQHandler+0x6d0>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0310 	and.w	r3, r3, #16
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	bf14      	ite	ne
 8002fb6:	2301      	movne	r3, #1
 8002fb8:	2300      	moveq	r3, #0
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	e02a      	b.n	8003014 <HAL_DMA_IRQHandler+0x6e4>
 8002fbe:	bf00      	nop
 8002fc0:	40020010 	.word	0x40020010
 8002fc4:	40020028 	.word	0x40020028
 8002fc8:	40020040 	.word	0x40020040
 8002fcc:	40020058 	.word	0x40020058
 8002fd0:	40020070 	.word	0x40020070
 8002fd4:	40020088 	.word	0x40020088
 8002fd8:	400200a0 	.word	0x400200a0
 8002fdc:	400200b8 	.word	0x400200b8
 8002fe0:	40020410 	.word	0x40020410
 8002fe4:	40020428 	.word	0x40020428
 8002fe8:	40020440 	.word	0x40020440
 8002fec:	40020458 	.word	0x40020458
 8002ff0:	40020470 	.word	0x40020470
 8002ff4:	40020488 	.word	0x40020488
 8002ff8:	400204a0 	.word	0x400204a0
 8002ffc:	400204b8 	.word	0x400204b8
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	bf14      	ite	ne
 800300e:	2301      	movne	r3, #1
 8003010:	2300      	moveq	r3, #0
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 8087 	beq.w	8003128 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301e:	f003 031f 	and.w	r3, r3, #31
 8003022:	2220      	movs	r2, #32
 8003024:	409a      	lsls	r2, r3
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b04      	cmp	r3, #4
 8003034:	d139      	bne.n	80030aa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0216 	bic.w	r2, r2, #22
 8003044:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695a      	ldr	r2, [r3, #20]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003054:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	2b00      	cmp	r3, #0
 800305c:	d103      	bne.n	8003066 <HAL_DMA_IRQHandler+0x736>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003062:	2b00      	cmp	r3, #0
 8003064:	d007      	beq.n	8003076 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0208 	bic.w	r2, r2, #8
 8003074:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307a:	f003 031f 	and.w	r3, r3, #31
 800307e:	223f      	movs	r2, #63	; 0x3f
 8003080:	409a      	lsls	r2, r3
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 834a 	beq.w	8003734 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	4798      	blx	r3
          }
          return;
 80030a8:	e344      	b.n	8003734 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d018      	beq.n	80030ea <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d108      	bne.n	80030d8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d02c      	beq.n	8003128 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	4798      	blx	r3
 80030d6:	e027      	b.n	8003128 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d023      	beq.n	8003128 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	4798      	blx	r3
 80030e8:	e01e      	b.n	8003128 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10f      	bne.n	8003118 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0210 	bic.w	r2, r2, #16
 8003106:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 8306 	beq.w	800373e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 8088 	beq.w	8003250 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2204      	movs	r2, #4
 8003144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a7a      	ldr	r2, [pc, #488]	; (8003338 <HAL_DMA_IRQHandler+0xa08>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d04a      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x8b8>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a79      	ldr	r2, [pc, #484]	; (800333c <HAL_DMA_IRQHandler+0xa0c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d045      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x8b8>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a77      	ldr	r2, [pc, #476]	; (8003340 <HAL_DMA_IRQHandler+0xa10>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d040      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x8b8>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a76      	ldr	r2, [pc, #472]	; (8003344 <HAL_DMA_IRQHandler+0xa14>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d03b      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x8b8>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a74      	ldr	r2, [pc, #464]	; (8003348 <HAL_DMA_IRQHandler+0xa18>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d036      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x8b8>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a73      	ldr	r2, [pc, #460]	; (800334c <HAL_DMA_IRQHandler+0xa1c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d031      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x8b8>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a71      	ldr	r2, [pc, #452]	; (8003350 <HAL_DMA_IRQHandler+0xa20>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d02c      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x8b8>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a70      	ldr	r2, [pc, #448]	; (8003354 <HAL_DMA_IRQHandler+0xa24>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d027      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x8b8>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a6e      	ldr	r2, [pc, #440]	; (8003358 <HAL_DMA_IRQHandler+0xa28>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d022      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x8b8>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a6d      	ldr	r2, [pc, #436]	; (800335c <HAL_DMA_IRQHandler+0xa2c>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d01d      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x8b8>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a6b      	ldr	r2, [pc, #428]	; (8003360 <HAL_DMA_IRQHandler+0xa30>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d018      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x8b8>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a6a      	ldr	r2, [pc, #424]	; (8003364 <HAL_DMA_IRQHandler+0xa34>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d013      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x8b8>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a68      	ldr	r2, [pc, #416]	; (8003368 <HAL_DMA_IRQHandler+0xa38>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d00e      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x8b8>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a67      	ldr	r2, [pc, #412]	; (800336c <HAL_DMA_IRQHandler+0xa3c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d009      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x8b8>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a65      	ldr	r2, [pc, #404]	; (8003370 <HAL_DMA_IRQHandler+0xa40>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d004      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x8b8>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a64      	ldr	r2, [pc, #400]	; (8003374 <HAL_DMA_IRQHandler+0xa44>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d108      	bne.n	80031fa <HAL_DMA_IRQHandler+0x8ca>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0201 	bic.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	e007      	b.n	800320a <HAL_DMA_IRQHandler+0x8da>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0201 	bic.w	r2, r2, #1
 8003208:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	3301      	adds	r3, #1
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003212:	429a      	cmp	r2, r3
 8003214:	d307      	bcc.n	8003226 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1f2      	bne.n	800320a <HAL_DMA_IRQHandler+0x8da>
 8003224:	e000      	b.n	8003228 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003226:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d004      	beq.n	8003248 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2203      	movs	r2, #3
 8003242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003246:	e003      	b.n	8003250 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 8272 	beq.w	800373e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	4798      	blx	r3
 8003262:	e26c      	b.n	800373e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a43      	ldr	r2, [pc, #268]	; (8003378 <HAL_DMA_IRQHandler+0xa48>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d022      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x984>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a42      	ldr	r2, [pc, #264]	; (800337c <HAL_DMA_IRQHandler+0xa4c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d01d      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x984>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a40      	ldr	r2, [pc, #256]	; (8003380 <HAL_DMA_IRQHandler+0xa50>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d018      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x984>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a3f      	ldr	r2, [pc, #252]	; (8003384 <HAL_DMA_IRQHandler+0xa54>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d013      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x984>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a3d      	ldr	r2, [pc, #244]	; (8003388 <HAL_DMA_IRQHandler+0xa58>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00e      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x984>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a3c      	ldr	r2, [pc, #240]	; (800338c <HAL_DMA_IRQHandler+0xa5c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d009      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x984>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a3a      	ldr	r2, [pc, #232]	; (8003390 <HAL_DMA_IRQHandler+0xa60>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d004      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x984>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a39      	ldr	r2, [pc, #228]	; (8003394 <HAL_DMA_IRQHandler+0xa64>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d101      	bne.n	80032b8 <HAL_DMA_IRQHandler+0x988>
 80032b4:	2301      	movs	r3, #1
 80032b6:	e000      	b.n	80032ba <HAL_DMA_IRQHandler+0x98a>
 80032b8:	2300      	movs	r3, #0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 823f 	beq.w	800373e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032cc:	f003 031f 	and.w	r3, r3, #31
 80032d0:	2204      	movs	r2, #4
 80032d2:	409a      	lsls	r2, r3
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 80cd 	beq.w	8003478 <HAL_DMA_IRQHandler+0xb48>
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80c7 	beq.w	8003478 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ee:	f003 031f 	and.w	r3, r3, #31
 80032f2:	2204      	movs	r2, #4
 80032f4:	409a      	lsls	r2, r3
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d049      	beq.n	8003398 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d109      	bne.n	8003322 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 8210 	beq.w	8003738 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003320:	e20a      	b.n	8003738 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 8206 	beq.w	8003738 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003334:	e200      	b.n	8003738 <HAL_DMA_IRQHandler+0xe08>
 8003336:	bf00      	nop
 8003338:	40020010 	.word	0x40020010
 800333c:	40020028 	.word	0x40020028
 8003340:	40020040 	.word	0x40020040
 8003344:	40020058 	.word	0x40020058
 8003348:	40020070 	.word	0x40020070
 800334c:	40020088 	.word	0x40020088
 8003350:	400200a0 	.word	0x400200a0
 8003354:	400200b8 	.word	0x400200b8
 8003358:	40020410 	.word	0x40020410
 800335c:	40020428 	.word	0x40020428
 8003360:	40020440 	.word	0x40020440
 8003364:	40020458 	.word	0x40020458
 8003368:	40020470 	.word	0x40020470
 800336c:	40020488 	.word	0x40020488
 8003370:	400204a0 	.word	0x400204a0
 8003374:	400204b8 	.word	0x400204b8
 8003378:	58025408 	.word	0x58025408
 800337c:	5802541c 	.word	0x5802541c
 8003380:	58025430 	.word	0x58025430
 8003384:	58025444 	.word	0x58025444
 8003388:	58025458 	.word	0x58025458
 800338c:	5802546c 	.word	0x5802546c
 8003390:	58025480 	.word	0x58025480
 8003394:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f003 0320 	and.w	r3, r3, #32
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d160      	bne.n	8003464 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a8c      	ldr	r2, [pc, #560]	; (80035d8 <HAL_DMA_IRQHandler+0xca8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d04a      	beq.n	8003442 <HAL_DMA_IRQHandler+0xb12>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a8a      	ldr	r2, [pc, #552]	; (80035dc <HAL_DMA_IRQHandler+0xcac>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d045      	beq.n	8003442 <HAL_DMA_IRQHandler+0xb12>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a89      	ldr	r2, [pc, #548]	; (80035e0 <HAL_DMA_IRQHandler+0xcb0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d040      	beq.n	8003442 <HAL_DMA_IRQHandler+0xb12>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a87      	ldr	r2, [pc, #540]	; (80035e4 <HAL_DMA_IRQHandler+0xcb4>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d03b      	beq.n	8003442 <HAL_DMA_IRQHandler+0xb12>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a86      	ldr	r2, [pc, #536]	; (80035e8 <HAL_DMA_IRQHandler+0xcb8>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d036      	beq.n	8003442 <HAL_DMA_IRQHandler+0xb12>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a84      	ldr	r2, [pc, #528]	; (80035ec <HAL_DMA_IRQHandler+0xcbc>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d031      	beq.n	8003442 <HAL_DMA_IRQHandler+0xb12>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a83      	ldr	r2, [pc, #524]	; (80035f0 <HAL_DMA_IRQHandler+0xcc0>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d02c      	beq.n	8003442 <HAL_DMA_IRQHandler+0xb12>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a81      	ldr	r2, [pc, #516]	; (80035f4 <HAL_DMA_IRQHandler+0xcc4>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d027      	beq.n	8003442 <HAL_DMA_IRQHandler+0xb12>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a80      	ldr	r2, [pc, #512]	; (80035f8 <HAL_DMA_IRQHandler+0xcc8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d022      	beq.n	8003442 <HAL_DMA_IRQHandler+0xb12>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a7e      	ldr	r2, [pc, #504]	; (80035fc <HAL_DMA_IRQHandler+0xccc>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d01d      	beq.n	8003442 <HAL_DMA_IRQHandler+0xb12>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a7d      	ldr	r2, [pc, #500]	; (8003600 <HAL_DMA_IRQHandler+0xcd0>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d018      	beq.n	8003442 <HAL_DMA_IRQHandler+0xb12>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a7b      	ldr	r2, [pc, #492]	; (8003604 <HAL_DMA_IRQHandler+0xcd4>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d013      	beq.n	8003442 <HAL_DMA_IRQHandler+0xb12>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a7a      	ldr	r2, [pc, #488]	; (8003608 <HAL_DMA_IRQHandler+0xcd8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d00e      	beq.n	8003442 <HAL_DMA_IRQHandler+0xb12>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a78      	ldr	r2, [pc, #480]	; (800360c <HAL_DMA_IRQHandler+0xcdc>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d009      	beq.n	8003442 <HAL_DMA_IRQHandler+0xb12>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a77      	ldr	r2, [pc, #476]	; (8003610 <HAL_DMA_IRQHandler+0xce0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d004      	beq.n	8003442 <HAL_DMA_IRQHandler+0xb12>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a75      	ldr	r2, [pc, #468]	; (8003614 <HAL_DMA_IRQHandler+0xce4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d108      	bne.n	8003454 <HAL_DMA_IRQHandler+0xb24>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0208 	bic.w	r2, r2, #8
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	e007      	b.n	8003464 <HAL_DMA_IRQHandler+0xb34>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0204 	bic.w	r2, r2, #4
 8003462:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 8165 	beq.w	8003738 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003476:	e15f      	b.n	8003738 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347c:	f003 031f 	and.w	r3, r3, #31
 8003480:	2202      	movs	r2, #2
 8003482:	409a      	lsls	r2, r3
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	4013      	ands	r3, r2
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80c5 	beq.w	8003618 <HAL_DMA_IRQHandler+0xce8>
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 80bf 	beq.w	8003618 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349e:	f003 031f 	and.w	r3, r3, #31
 80034a2:	2202      	movs	r2, #2
 80034a4:	409a      	lsls	r2, r3
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d018      	beq.n	80034e6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d109      	bne.n	80034d2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 813a 	beq.w	800373c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034d0:	e134      	b.n	800373c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 8130 	beq.w	800373c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034e4:	e12a      	b.n	800373c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d168      	bne.n	80035c2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a38      	ldr	r2, [pc, #224]	; (80035d8 <HAL_DMA_IRQHandler+0xca8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d04a      	beq.n	8003590 <HAL_DMA_IRQHandler+0xc60>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a37      	ldr	r2, [pc, #220]	; (80035dc <HAL_DMA_IRQHandler+0xcac>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d045      	beq.n	8003590 <HAL_DMA_IRQHandler+0xc60>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a35      	ldr	r2, [pc, #212]	; (80035e0 <HAL_DMA_IRQHandler+0xcb0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d040      	beq.n	8003590 <HAL_DMA_IRQHandler+0xc60>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a34      	ldr	r2, [pc, #208]	; (80035e4 <HAL_DMA_IRQHandler+0xcb4>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d03b      	beq.n	8003590 <HAL_DMA_IRQHandler+0xc60>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a32      	ldr	r2, [pc, #200]	; (80035e8 <HAL_DMA_IRQHandler+0xcb8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d036      	beq.n	8003590 <HAL_DMA_IRQHandler+0xc60>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a31      	ldr	r2, [pc, #196]	; (80035ec <HAL_DMA_IRQHandler+0xcbc>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d031      	beq.n	8003590 <HAL_DMA_IRQHandler+0xc60>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a2f      	ldr	r2, [pc, #188]	; (80035f0 <HAL_DMA_IRQHandler+0xcc0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d02c      	beq.n	8003590 <HAL_DMA_IRQHandler+0xc60>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a2e      	ldr	r2, [pc, #184]	; (80035f4 <HAL_DMA_IRQHandler+0xcc4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d027      	beq.n	8003590 <HAL_DMA_IRQHandler+0xc60>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a2c      	ldr	r2, [pc, #176]	; (80035f8 <HAL_DMA_IRQHandler+0xcc8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d022      	beq.n	8003590 <HAL_DMA_IRQHandler+0xc60>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a2b      	ldr	r2, [pc, #172]	; (80035fc <HAL_DMA_IRQHandler+0xccc>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d01d      	beq.n	8003590 <HAL_DMA_IRQHandler+0xc60>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a29      	ldr	r2, [pc, #164]	; (8003600 <HAL_DMA_IRQHandler+0xcd0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d018      	beq.n	8003590 <HAL_DMA_IRQHandler+0xc60>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a28      	ldr	r2, [pc, #160]	; (8003604 <HAL_DMA_IRQHandler+0xcd4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d013      	beq.n	8003590 <HAL_DMA_IRQHandler+0xc60>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a26      	ldr	r2, [pc, #152]	; (8003608 <HAL_DMA_IRQHandler+0xcd8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00e      	beq.n	8003590 <HAL_DMA_IRQHandler+0xc60>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a25      	ldr	r2, [pc, #148]	; (800360c <HAL_DMA_IRQHandler+0xcdc>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d009      	beq.n	8003590 <HAL_DMA_IRQHandler+0xc60>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a23      	ldr	r2, [pc, #140]	; (8003610 <HAL_DMA_IRQHandler+0xce0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d004      	beq.n	8003590 <HAL_DMA_IRQHandler+0xc60>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a22      	ldr	r2, [pc, #136]	; (8003614 <HAL_DMA_IRQHandler+0xce4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d108      	bne.n	80035a2 <HAL_DMA_IRQHandler+0xc72>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0214 	bic.w	r2, r2, #20
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	e007      	b.n	80035b2 <HAL_DMA_IRQHandler+0xc82>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 020a 	bic.w	r2, r2, #10
 80035b0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 80b8 	beq.w	800373c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035d4:	e0b2      	b.n	800373c <HAL_DMA_IRQHandler+0xe0c>
 80035d6:	bf00      	nop
 80035d8:	40020010 	.word	0x40020010
 80035dc:	40020028 	.word	0x40020028
 80035e0:	40020040 	.word	0x40020040
 80035e4:	40020058 	.word	0x40020058
 80035e8:	40020070 	.word	0x40020070
 80035ec:	40020088 	.word	0x40020088
 80035f0:	400200a0 	.word	0x400200a0
 80035f4:	400200b8 	.word	0x400200b8
 80035f8:	40020410 	.word	0x40020410
 80035fc:	40020428 	.word	0x40020428
 8003600:	40020440 	.word	0x40020440
 8003604:	40020458 	.word	0x40020458
 8003608:	40020470 	.word	0x40020470
 800360c:	40020488 	.word	0x40020488
 8003610:	400204a0 	.word	0x400204a0
 8003614:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361c:	f003 031f 	and.w	r3, r3, #31
 8003620:	2208      	movs	r2, #8
 8003622:	409a      	lsls	r2, r3
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	4013      	ands	r3, r2
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 8088 	beq.w	800373e <HAL_DMA_IRQHandler+0xe0e>
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f003 0308 	and.w	r3, r3, #8
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 8082 	beq.w	800373e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a41      	ldr	r2, [pc, #260]	; (8003744 <HAL_DMA_IRQHandler+0xe14>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d04a      	beq.n	80036da <HAL_DMA_IRQHandler+0xdaa>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a3f      	ldr	r2, [pc, #252]	; (8003748 <HAL_DMA_IRQHandler+0xe18>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d045      	beq.n	80036da <HAL_DMA_IRQHandler+0xdaa>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a3e      	ldr	r2, [pc, #248]	; (800374c <HAL_DMA_IRQHandler+0xe1c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d040      	beq.n	80036da <HAL_DMA_IRQHandler+0xdaa>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a3c      	ldr	r2, [pc, #240]	; (8003750 <HAL_DMA_IRQHandler+0xe20>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d03b      	beq.n	80036da <HAL_DMA_IRQHandler+0xdaa>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a3b      	ldr	r2, [pc, #236]	; (8003754 <HAL_DMA_IRQHandler+0xe24>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d036      	beq.n	80036da <HAL_DMA_IRQHandler+0xdaa>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a39      	ldr	r2, [pc, #228]	; (8003758 <HAL_DMA_IRQHandler+0xe28>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d031      	beq.n	80036da <HAL_DMA_IRQHandler+0xdaa>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a38      	ldr	r2, [pc, #224]	; (800375c <HAL_DMA_IRQHandler+0xe2c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d02c      	beq.n	80036da <HAL_DMA_IRQHandler+0xdaa>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a36      	ldr	r2, [pc, #216]	; (8003760 <HAL_DMA_IRQHandler+0xe30>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d027      	beq.n	80036da <HAL_DMA_IRQHandler+0xdaa>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a35      	ldr	r2, [pc, #212]	; (8003764 <HAL_DMA_IRQHandler+0xe34>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d022      	beq.n	80036da <HAL_DMA_IRQHandler+0xdaa>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a33      	ldr	r2, [pc, #204]	; (8003768 <HAL_DMA_IRQHandler+0xe38>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d01d      	beq.n	80036da <HAL_DMA_IRQHandler+0xdaa>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a32      	ldr	r2, [pc, #200]	; (800376c <HAL_DMA_IRQHandler+0xe3c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d018      	beq.n	80036da <HAL_DMA_IRQHandler+0xdaa>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a30      	ldr	r2, [pc, #192]	; (8003770 <HAL_DMA_IRQHandler+0xe40>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d013      	beq.n	80036da <HAL_DMA_IRQHandler+0xdaa>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a2f      	ldr	r2, [pc, #188]	; (8003774 <HAL_DMA_IRQHandler+0xe44>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d00e      	beq.n	80036da <HAL_DMA_IRQHandler+0xdaa>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a2d      	ldr	r2, [pc, #180]	; (8003778 <HAL_DMA_IRQHandler+0xe48>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d009      	beq.n	80036da <HAL_DMA_IRQHandler+0xdaa>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a2c      	ldr	r2, [pc, #176]	; (800377c <HAL_DMA_IRQHandler+0xe4c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d004      	beq.n	80036da <HAL_DMA_IRQHandler+0xdaa>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a2a      	ldr	r2, [pc, #168]	; (8003780 <HAL_DMA_IRQHandler+0xe50>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d108      	bne.n	80036ec <HAL_DMA_IRQHandler+0xdbc>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 021c 	bic.w	r2, r2, #28
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	e007      	b.n	80036fc <HAL_DMA_IRQHandler+0xdcc>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 020e 	bic.w	r2, r2, #14
 80036fa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003700:	f003 031f 	and.w	r3, r3, #31
 8003704:	2201      	movs	r2, #1
 8003706:	409a      	lsls	r2, r3
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003726:	2b00      	cmp	r3, #0
 8003728:	d009      	beq.n	800373e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	4798      	blx	r3
 8003732:	e004      	b.n	800373e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003734:	bf00      	nop
 8003736:	e002      	b.n	800373e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003738:	bf00      	nop
 800373a:	e000      	b.n	800373e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800373c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800373e:	3728      	adds	r7, #40	; 0x28
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40020010 	.word	0x40020010
 8003748:	40020028 	.word	0x40020028
 800374c:	40020040 	.word	0x40020040
 8003750:	40020058 	.word	0x40020058
 8003754:	40020070 	.word	0x40020070
 8003758:	40020088 	.word	0x40020088
 800375c:	400200a0 	.word	0x400200a0
 8003760:	400200b8 	.word	0x400200b8
 8003764:	40020410 	.word	0x40020410
 8003768:	40020428 	.word	0x40020428
 800376c:	40020440 	.word	0x40020440
 8003770:	40020458 	.word	0x40020458
 8003774:	40020470 	.word	0x40020470
 8003778:	40020488 	.word	0x40020488
 800377c:	400204a0 	.word	0x400204a0
 8003780:	400204b8 	.word	0x400204b8

08003784 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003790:	4618      	mov	r0, r3
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
 80037a8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ae:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a84      	ldr	r2, [pc, #528]	; (80039cc <DMA_SetConfig+0x230>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d072      	beq.n	80038a6 <DMA_SetConfig+0x10a>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a82      	ldr	r2, [pc, #520]	; (80039d0 <DMA_SetConfig+0x234>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d06d      	beq.n	80038a6 <DMA_SetConfig+0x10a>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a81      	ldr	r2, [pc, #516]	; (80039d4 <DMA_SetConfig+0x238>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d068      	beq.n	80038a6 <DMA_SetConfig+0x10a>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a7f      	ldr	r2, [pc, #508]	; (80039d8 <DMA_SetConfig+0x23c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d063      	beq.n	80038a6 <DMA_SetConfig+0x10a>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a7e      	ldr	r2, [pc, #504]	; (80039dc <DMA_SetConfig+0x240>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d05e      	beq.n	80038a6 <DMA_SetConfig+0x10a>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a7c      	ldr	r2, [pc, #496]	; (80039e0 <DMA_SetConfig+0x244>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d059      	beq.n	80038a6 <DMA_SetConfig+0x10a>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a7b      	ldr	r2, [pc, #492]	; (80039e4 <DMA_SetConfig+0x248>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d054      	beq.n	80038a6 <DMA_SetConfig+0x10a>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a79      	ldr	r2, [pc, #484]	; (80039e8 <DMA_SetConfig+0x24c>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d04f      	beq.n	80038a6 <DMA_SetConfig+0x10a>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a78      	ldr	r2, [pc, #480]	; (80039ec <DMA_SetConfig+0x250>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d04a      	beq.n	80038a6 <DMA_SetConfig+0x10a>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a76      	ldr	r2, [pc, #472]	; (80039f0 <DMA_SetConfig+0x254>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d045      	beq.n	80038a6 <DMA_SetConfig+0x10a>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a75      	ldr	r2, [pc, #468]	; (80039f4 <DMA_SetConfig+0x258>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d040      	beq.n	80038a6 <DMA_SetConfig+0x10a>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a73      	ldr	r2, [pc, #460]	; (80039f8 <DMA_SetConfig+0x25c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d03b      	beq.n	80038a6 <DMA_SetConfig+0x10a>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a72      	ldr	r2, [pc, #456]	; (80039fc <DMA_SetConfig+0x260>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d036      	beq.n	80038a6 <DMA_SetConfig+0x10a>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a70      	ldr	r2, [pc, #448]	; (8003a00 <DMA_SetConfig+0x264>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d031      	beq.n	80038a6 <DMA_SetConfig+0x10a>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a6f      	ldr	r2, [pc, #444]	; (8003a04 <DMA_SetConfig+0x268>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d02c      	beq.n	80038a6 <DMA_SetConfig+0x10a>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a6d      	ldr	r2, [pc, #436]	; (8003a08 <DMA_SetConfig+0x26c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d027      	beq.n	80038a6 <DMA_SetConfig+0x10a>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a6c      	ldr	r2, [pc, #432]	; (8003a0c <DMA_SetConfig+0x270>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d022      	beq.n	80038a6 <DMA_SetConfig+0x10a>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a6a      	ldr	r2, [pc, #424]	; (8003a10 <DMA_SetConfig+0x274>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d01d      	beq.n	80038a6 <DMA_SetConfig+0x10a>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a69      	ldr	r2, [pc, #420]	; (8003a14 <DMA_SetConfig+0x278>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d018      	beq.n	80038a6 <DMA_SetConfig+0x10a>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a67      	ldr	r2, [pc, #412]	; (8003a18 <DMA_SetConfig+0x27c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d013      	beq.n	80038a6 <DMA_SetConfig+0x10a>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a66      	ldr	r2, [pc, #408]	; (8003a1c <DMA_SetConfig+0x280>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d00e      	beq.n	80038a6 <DMA_SetConfig+0x10a>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a64      	ldr	r2, [pc, #400]	; (8003a20 <DMA_SetConfig+0x284>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d009      	beq.n	80038a6 <DMA_SetConfig+0x10a>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a63      	ldr	r2, [pc, #396]	; (8003a24 <DMA_SetConfig+0x288>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d004      	beq.n	80038a6 <DMA_SetConfig+0x10a>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a61      	ldr	r2, [pc, #388]	; (8003a28 <DMA_SetConfig+0x28c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d101      	bne.n	80038aa <DMA_SetConfig+0x10e>
 80038a6:	2301      	movs	r3, #1
 80038a8:	e000      	b.n	80038ac <DMA_SetConfig+0x110>
 80038aa:	2300      	movs	r3, #0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00d      	beq.n	80038cc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80038b8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d004      	beq.n	80038cc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038ca:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a3e      	ldr	r2, [pc, #248]	; (80039cc <DMA_SetConfig+0x230>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d04a      	beq.n	800396c <DMA_SetConfig+0x1d0>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a3d      	ldr	r2, [pc, #244]	; (80039d0 <DMA_SetConfig+0x234>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d045      	beq.n	800396c <DMA_SetConfig+0x1d0>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a3b      	ldr	r2, [pc, #236]	; (80039d4 <DMA_SetConfig+0x238>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d040      	beq.n	800396c <DMA_SetConfig+0x1d0>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a3a      	ldr	r2, [pc, #232]	; (80039d8 <DMA_SetConfig+0x23c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d03b      	beq.n	800396c <DMA_SetConfig+0x1d0>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a38      	ldr	r2, [pc, #224]	; (80039dc <DMA_SetConfig+0x240>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d036      	beq.n	800396c <DMA_SetConfig+0x1d0>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a37      	ldr	r2, [pc, #220]	; (80039e0 <DMA_SetConfig+0x244>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d031      	beq.n	800396c <DMA_SetConfig+0x1d0>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a35      	ldr	r2, [pc, #212]	; (80039e4 <DMA_SetConfig+0x248>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d02c      	beq.n	800396c <DMA_SetConfig+0x1d0>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a34      	ldr	r2, [pc, #208]	; (80039e8 <DMA_SetConfig+0x24c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d027      	beq.n	800396c <DMA_SetConfig+0x1d0>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a32      	ldr	r2, [pc, #200]	; (80039ec <DMA_SetConfig+0x250>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d022      	beq.n	800396c <DMA_SetConfig+0x1d0>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a31      	ldr	r2, [pc, #196]	; (80039f0 <DMA_SetConfig+0x254>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d01d      	beq.n	800396c <DMA_SetConfig+0x1d0>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a2f      	ldr	r2, [pc, #188]	; (80039f4 <DMA_SetConfig+0x258>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d018      	beq.n	800396c <DMA_SetConfig+0x1d0>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a2e      	ldr	r2, [pc, #184]	; (80039f8 <DMA_SetConfig+0x25c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d013      	beq.n	800396c <DMA_SetConfig+0x1d0>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a2c      	ldr	r2, [pc, #176]	; (80039fc <DMA_SetConfig+0x260>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00e      	beq.n	800396c <DMA_SetConfig+0x1d0>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a2b      	ldr	r2, [pc, #172]	; (8003a00 <DMA_SetConfig+0x264>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d009      	beq.n	800396c <DMA_SetConfig+0x1d0>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a29      	ldr	r2, [pc, #164]	; (8003a04 <DMA_SetConfig+0x268>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d004      	beq.n	800396c <DMA_SetConfig+0x1d0>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a28      	ldr	r2, [pc, #160]	; (8003a08 <DMA_SetConfig+0x26c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d101      	bne.n	8003970 <DMA_SetConfig+0x1d4>
 800396c:	2301      	movs	r3, #1
 800396e:	e000      	b.n	8003972 <DMA_SetConfig+0x1d6>
 8003970:	2300      	movs	r3, #0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d05a      	beq.n	8003a2c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	223f      	movs	r2, #63	; 0x3f
 8003980:	409a      	lsls	r2, r3
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003994:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b40      	cmp	r3, #64	; 0x40
 80039a4:	d108      	bne.n	80039b8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80039b6:	e087      	b.n	8003ac8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	60da      	str	r2, [r3, #12]
}
 80039c8:	e07e      	b.n	8003ac8 <DMA_SetConfig+0x32c>
 80039ca:	bf00      	nop
 80039cc:	40020010 	.word	0x40020010
 80039d0:	40020028 	.word	0x40020028
 80039d4:	40020040 	.word	0x40020040
 80039d8:	40020058 	.word	0x40020058
 80039dc:	40020070 	.word	0x40020070
 80039e0:	40020088 	.word	0x40020088
 80039e4:	400200a0 	.word	0x400200a0
 80039e8:	400200b8 	.word	0x400200b8
 80039ec:	40020410 	.word	0x40020410
 80039f0:	40020428 	.word	0x40020428
 80039f4:	40020440 	.word	0x40020440
 80039f8:	40020458 	.word	0x40020458
 80039fc:	40020470 	.word	0x40020470
 8003a00:	40020488 	.word	0x40020488
 8003a04:	400204a0 	.word	0x400204a0
 8003a08:	400204b8 	.word	0x400204b8
 8003a0c:	58025408 	.word	0x58025408
 8003a10:	5802541c 	.word	0x5802541c
 8003a14:	58025430 	.word	0x58025430
 8003a18:	58025444 	.word	0x58025444
 8003a1c:	58025458 	.word	0x58025458
 8003a20:	5802546c 	.word	0x5802546c
 8003a24:	58025480 	.word	0x58025480
 8003a28:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a28      	ldr	r2, [pc, #160]	; (8003ad4 <DMA_SetConfig+0x338>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d022      	beq.n	8003a7c <DMA_SetConfig+0x2e0>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a27      	ldr	r2, [pc, #156]	; (8003ad8 <DMA_SetConfig+0x33c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d01d      	beq.n	8003a7c <DMA_SetConfig+0x2e0>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a25      	ldr	r2, [pc, #148]	; (8003adc <DMA_SetConfig+0x340>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d018      	beq.n	8003a7c <DMA_SetConfig+0x2e0>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a24      	ldr	r2, [pc, #144]	; (8003ae0 <DMA_SetConfig+0x344>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d013      	beq.n	8003a7c <DMA_SetConfig+0x2e0>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a22      	ldr	r2, [pc, #136]	; (8003ae4 <DMA_SetConfig+0x348>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d00e      	beq.n	8003a7c <DMA_SetConfig+0x2e0>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a21      	ldr	r2, [pc, #132]	; (8003ae8 <DMA_SetConfig+0x34c>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d009      	beq.n	8003a7c <DMA_SetConfig+0x2e0>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a1f      	ldr	r2, [pc, #124]	; (8003aec <DMA_SetConfig+0x350>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d004      	beq.n	8003a7c <DMA_SetConfig+0x2e0>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a1e      	ldr	r2, [pc, #120]	; (8003af0 <DMA_SetConfig+0x354>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d101      	bne.n	8003a80 <DMA_SetConfig+0x2e4>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e000      	b.n	8003a82 <DMA_SetConfig+0x2e6>
 8003a80:	2300      	movs	r3, #0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d020      	beq.n	8003ac8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8a:	f003 031f 	and.w	r3, r3, #31
 8003a8e:	2201      	movs	r2, #1
 8003a90:	409a      	lsls	r2, r3
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	2b40      	cmp	r3, #64	; 0x40
 8003aa4:	d108      	bne.n	8003ab8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	60da      	str	r2, [r3, #12]
}
 8003ab6:	e007      	b.n	8003ac8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	60da      	str	r2, [r3, #12]
}
 8003ac8:	bf00      	nop
 8003aca:	371c      	adds	r7, #28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	58025408 	.word	0x58025408
 8003ad8:	5802541c 	.word	0x5802541c
 8003adc:	58025430 	.word	0x58025430
 8003ae0:	58025444 	.word	0x58025444
 8003ae4:	58025458 	.word	0x58025458
 8003ae8:	5802546c 	.word	0x5802546c
 8003aec:	58025480 	.word	0x58025480
 8003af0:	58025494 	.word	0x58025494

08003af4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a42      	ldr	r2, [pc, #264]	; (8003c0c <DMA_CalcBaseAndBitshift+0x118>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d04a      	beq.n	8003b9c <DMA_CalcBaseAndBitshift+0xa8>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a41      	ldr	r2, [pc, #260]	; (8003c10 <DMA_CalcBaseAndBitshift+0x11c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d045      	beq.n	8003b9c <DMA_CalcBaseAndBitshift+0xa8>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a3f      	ldr	r2, [pc, #252]	; (8003c14 <DMA_CalcBaseAndBitshift+0x120>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d040      	beq.n	8003b9c <DMA_CalcBaseAndBitshift+0xa8>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a3e      	ldr	r2, [pc, #248]	; (8003c18 <DMA_CalcBaseAndBitshift+0x124>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d03b      	beq.n	8003b9c <DMA_CalcBaseAndBitshift+0xa8>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a3c      	ldr	r2, [pc, #240]	; (8003c1c <DMA_CalcBaseAndBitshift+0x128>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d036      	beq.n	8003b9c <DMA_CalcBaseAndBitshift+0xa8>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a3b      	ldr	r2, [pc, #236]	; (8003c20 <DMA_CalcBaseAndBitshift+0x12c>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d031      	beq.n	8003b9c <DMA_CalcBaseAndBitshift+0xa8>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a39      	ldr	r2, [pc, #228]	; (8003c24 <DMA_CalcBaseAndBitshift+0x130>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d02c      	beq.n	8003b9c <DMA_CalcBaseAndBitshift+0xa8>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a38      	ldr	r2, [pc, #224]	; (8003c28 <DMA_CalcBaseAndBitshift+0x134>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d027      	beq.n	8003b9c <DMA_CalcBaseAndBitshift+0xa8>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a36      	ldr	r2, [pc, #216]	; (8003c2c <DMA_CalcBaseAndBitshift+0x138>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d022      	beq.n	8003b9c <DMA_CalcBaseAndBitshift+0xa8>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a35      	ldr	r2, [pc, #212]	; (8003c30 <DMA_CalcBaseAndBitshift+0x13c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d01d      	beq.n	8003b9c <DMA_CalcBaseAndBitshift+0xa8>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a33      	ldr	r2, [pc, #204]	; (8003c34 <DMA_CalcBaseAndBitshift+0x140>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d018      	beq.n	8003b9c <DMA_CalcBaseAndBitshift+0xa8>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a32      	ldr	r2, [pc, #200]	; (8003c38 <DMA_CalcBaseAndBitshift+0x144>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d013      	beq.n	8003b9c <DMA_CalcBaseAndBitshift+0xa8>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a30      	ldr	r2, [pc, #192]	; (8003c3c <DMA_CalcBaseAndBitshift+0x148>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00e      	beq.n	8003b9c <DMA_CalcBaseAndBitshift+0xa8>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a2f      	ldr	r2, [pc, #188]	; (8003c40 <DMA_CalcBaseAndBitshift+0x14c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d009      	beq.n	8003b9c <DMA_CalcBaseAndBitshift+0xa8>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a2d      	ldr	r2, [pc, #180]	; (8003c44 <DMA_CalcBaseAndBitshift+0x150>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d004      	beq.n	8003b9c <DMA_CalcBaseAndBitshift+0xa8>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a2c      	ldr	r2, [pc, #176]	; (8003c48 <DMA_CalcBaseAndBitshift+0x154>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d101      	bne.n	8003ba0 <DMA_CalcBaseAndBitshift+0xac>
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e000      	b.n	8003ba2 <DMA_CalcBaseAndBitshift+0xae>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d024      	beq.n	8003bf0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	3b10      	subs	r3, #16
 8003bae:	4a27      	ldr	r2, [pc, #156]	; (8003c4c <DMA_CalcBaseAndBitshift+0x158>)
 8003bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb4:	091b      	lsrs	r3, r3, #4
 8003bb6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	4a24      	ldr	r2, [pc, #144]	; (8003c50 <DMA_CalcBaseAndBitshift+0x15c>)
 8003bc0:	5cd3      	ldrb	r3, [r2, r3]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d908      	bls.n	8003be0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	4b1f      	ldr	r3, [pc, #124]	; (8003c54 <DMA_CalcBaseAndBitshift+0x160>)
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	1d1a      	adds	r2, r3, #4
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	659a      	str	r2, [r3, #88]	; 0x58
 8003bde:	e00d      	b.n	8003bfc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	4b1b      	ldr	r3, [pc, #108]	; (8003c54 <DMA_CalcBaseAndBitshift+0x160>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6593      	str	r3, [r2, #88]	; 0x58
 8003bee:	e005      	b.n	8003bfc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	40020010 	.word	0x40020010
 8003c10:	40020028 	.word	0x40020028
 8003c14:	40020040 	.word	0x40020040
 8003c18:	40020058 	.word	0x40020058
 8003c1c:	40020070 	.word	0x40020070
 8003c20:	40020088 	.word	0x40020088
 8003c24:	400200a0 	.word	0x400200a0
 8003c28:	400200b8 	.word	0x400200b8
 8003c2c:	40020410 	.word	0x40020410
 8003c30:	40020428 	.word	0x40020428
 8003c34:	40020440 	.word	0x40020440
 8003c38:	40020458 	.word	0x40020458
 8003c3c:	40020470 	.word	0x40020470
 8003c40:	40020488 	.word	0x40020488
 8003c44:	400204a0 	.word	0x400204a0
 8003c48:	400204b8 	.word	0x400204b8
 8003c4c:	aaaaaaab 	.word	0xaaaaaaab
 8003c50:	0800cf6c 	.word	0x0800cf6c
 8003c54:	fffffc00 	.word	0xfffffc00

08003c58 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d120      	bne.n	8003cae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	d858      	bhi.n	8003d26 <DMA_CheckFifoParam+0xce>
 8003c74:	a201      	add	r2, pc, #4	; (adr r2, 8003c7c <DMA_CheckFifoParam+0x24>)
 8003c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7a:	bf00      	nop
 8003c7c:	08003c8d 	.word	0x08003c8d
 8003c80:	08003c9f 	.word	0x08003c9f
 8003c84:	08003c8d 	.word	0x08003c8d
 8003c88:	08003d27 	.word	0x08003d27
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d048      	beq.n	8003d2a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c9c:	e045      	b.n	8003d2a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ca6:	d142      	bne.n	8003d2e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003cac:	e03f      	b.n	8003d2e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cb6:	d123      	bne.n	8003d00 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d838      	bhi.n	8003d32 <DMA_CheckFifoParam+0xda>
 8003cc0:	a201      	add	r2, pc, #4	; (adr r2, 8003cc8 <DMA_CheckFifoParam+0x70>)
 8003cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc6:	bf00      	nop
 8003cc8:	08003cd9 	.word	0x08003cd9
 8003ccc:	08003cdf 	.word	0x08003cdf
 8003cd0:	08003cd9 	.word	0x08003cd9
 8003cd4:	08003cf1 	.word	0x08003cf1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	73fb      	strb	r3, [r7, #15]
        break;
 8003cdc:	e030      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d025      	beq.n	8003d36 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003cee:	e022      	b.n	8003d36 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cf8:	d11f      	bne.n	8003d3a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003cfe:	e01c      	b.n	8003d3a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d902      	bls.n	8003d0e <DMA_CheckFifoParam+0xb6>
 8003d08:	2b03      	cmp	r3, #3
 8003d0a:	d003      	beq.n	8003d14 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003d0c:	e018      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	73fb      	strb	r3, [r7, #15]
        break;
 8003d12:	e015      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00e      	beq.n	8003d3e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	73fb      	strb	r3, [r7, #15]
    break;
 8003d24:	e00b      	b.n	8003d3e <DMA_CheckFifoParam+0xe6>
        break;
 8003d26:	bf00      	nop
 8003d28:	e00a      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
        break;
 8003d2a:	bf00      	nop
 8003d2c:	e008      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
        break;
 8003d2e:	bf00      	nop
 8003d30:	e006      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
        break;
 8003d32:	bf00      	nop
 8003d34:	e004      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
        break;
 8003d36:	bf00      	nop
 8003d38:	e002      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
        break;
 8003d3a:	bf00      	nop
 8003d3c:	e000      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
    break;
 8003d3e:	bf00      	nop
    }
  }

  return status;
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop

08003d50 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a38      	ldr	r2, [pc, #224]	; (8003e44 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d022      	beq.n	8003dae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a36      	ldr	r2, [pc, #216]	; (8003e48 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d01d      	beq.n	8003dae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a35      	ldr	r2, [pc, #212]	; (8003e4c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d018      	beq.n	8003dae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a33      	ldr	r2, [pc, #204]	; (8003e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d013      	beq.n	8003dae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a32      	ldr	r2, [pc, #200]	; (8003e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00e      	beq.n	8003dae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a30      	ldr	r2, [pc, #192]	; (8003e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d009      	beq.n	8003dae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a2f      	ldr	r2, [pc, #188]	; (8003e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d004      	beq.n	8003dae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a2d      	ldr	r2, [pc, #180]	; (8003e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d101      	bne.n	8003db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e000      	b.n	8003db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003db2:	2300      	movs	r3, #0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d01a      	beq.n	8003dee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	3b08      	subs	r3, #8
 8003dc0:	4a28      	ldr	r2, [pc, #160]	; (8003e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc6:	091b      	lsrs	r3, r3, #4
 8003dc8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	4b26      	ldr	r3, [pc, #152]	; (8003e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003dce:	4413      	add	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a24      	ldr	r2, [pc, #144]	; (8003e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003ddc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f003 031f 	and.w	r3, r3, #31
 8003de4:	2201      	movs	r2, #1
 8003de6:	409a      	lsls	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003dec:	e024      	b.n	8003e38 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	3b10      	subs	r3, #16
 8003df6:	4a1e      	ldr	r2, [pc, #120]	; (8003e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003df8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfc:	091b      	lsrs	r3, r3, #4
 8003dfe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4a1c      	ldr	r2, [pc, #112]	; (8003e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d806      	bhi.n	8003e16 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	4a1b      	ldr	r2, [pc, #108]	; (8003e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d902      	bls.n	8003e16 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	3308      	adds	r3, #8
 8003e14:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4b18      	ldr	r3, [pc, #96]	; (8003e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	461a      	mov	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a16      	ldr	r2, [pc, #88]	; (8003e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003e28:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f003 031f 	and.w	r3, r3, #31
 8003e30:	2201      	movs	r2, #1
 8003e32:	409a      	lsls	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e38:	bf00      	nop
 8003e3a:	3714      	adds	r7, #20
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	58025408 	.word	0x58025408
 8003e48:	5802541c 	.word	0x5802541c
 8003e4c:	58025430 	.word	0x58025430
 8003e50:	58025444 	.word	0x58025444
 8003e54:	58025458 	.word	0x58025458
 8003e58:	5802546c 	.word	0x5802546c
 8003e5c:	58025480 	.word	0x58025480
 8003e60:	58025494 	.word	0x58025494
 8003e64:	cccccccd 	.word	0xcccccccd
 8003e68:	16009600 	.word	0x16009600
 8003e6c:	58025880 	.word	0x58025880
 8003e70:	aaaaaaab 	.word	0xaaaaaaab
 8003e74:	400204b8 	.word	0x400204b8
 8003e78:	4002040f 	.word	0x4002040f
 8003e7c:	10008200 	.word	0x10008200
 8003e80:	40020880 	.word	0x40020880

08003e84 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d04a      	beq.n	8003f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d847      	bhi.n	8003f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a25      	ldr	r2, [pc, #148]	; (8003f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d022      	beq.n	8003ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a24      	ldr	r2, [pc, #144]	; (8003f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d01d      	beq.n	8003ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a22      	ldr	r2, [pc, #136]	; (8003f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d018      	beq.n	8003ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a21      	ldr	r2, [pc, #132]	; (8003f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d013      	beq.n	8003ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a1f      	ldr	r2, [pc, #124]	; (8003f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00e      	beq.n	8003ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a1e      	ldr	r2, [pc, #120]	; (8003f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d009      	beq.n	8003ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a1c      	ldr	r2, [pc, #112]	; (8003f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d004      	beq.n	8003ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a1b      	ldr	r2, [pc, #108]	; (8003f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d101      	bne.n	8003ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e000      	b.n	8003ef6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4b17      	ldr	r3, [pc, #92]	; (8003f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	461a      	mov	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a15      	ldr	r2, [pc, #84]	; (8003f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003f0c:	671a      	str	r2, [r3, #112]	; 0x70
 8003f0e:	e009      	b.n	8003f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	4b14      	ldr	r3, [pc, #80]	; (8003f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	461a      	mov	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a11      	ldr	r2, [pc, #68]	; (8003f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003f22:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	2201      	movs	r2, #1
 8003f2a:	409a      	lsls	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003f30:	bf00      	nop
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	58025408 	.word	0x58025408
 8003f40:	5802541c 	.word	0x5802541c
 8003f44:	58025430 	.word	0x58025430
 8003f48:	58025444 	.word	0x58025444
 8003f4c:	58025458 	.word	0x58025458
 8003f50:	5802546c 	.word	0x5802546c
 8003f54:	58025480 	.word	0x58025480
 8003f58:	58025494 	.word	0x58025494
 8003f5c:	1600963f 	.word	0x1600963f
 8003f60:	58025940 	.word	0x58025940
 8003f64:	1000823f 	.word	0x1000823f
 8003f68:	40020940 	.word	0x40020940

08003f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b089      	sub	sp, #36	; 0x24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003f7a:	4b89      	ldr	r3, [pc, #548]	; (80041a0 <HAL_GPIO_Init+0x234>)
 8003f7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f7e:	e194      	b.n	80042aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	2101      	movs	r1, #1
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 8186 	beq.w	80042a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d00b      	beq.n	8003fb8 <HAL_GPIO_Init+0x4c>
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d007      	beq.n	8003fb8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fac:	2b11      	cmp	r3, #17
 8003fae:	d003      	beq.n	8003fb8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	2b12      	cmp	r3, #18
 8003fb6:	d130      	bne.n	800401a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	68da      	ldr	r2, [r3, #12]
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fee:	2201      	movs	r2, #1
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	43db      	mvns	r3, r3
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	091b      	lsrs	r3, r3, #4
 8004004:	f003 0201 	and.w	r2, r3, #1
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	4313      	orrs	r3, r2
 8004012:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	2203      	movs	r2, #3
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	43db      	mvns	r3, r3
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	4013      	ands	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	4313      	orrs	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d003      	beq.n	800405a <HAL_GPIO_Init+0xee>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b12      	cmp	r3, #18
 8004058:	d123      	bne.n	80040a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	08da      	lsrs	r2, r3, #3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3208      	adds	r2, #8
 8004062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004066:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	220f      	movs	r2, #15
 8004072:	fa02 f303 	lsl.w	r3, r2, r3
 8004076:	43db      	mvns	r3, r3
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	4013      	ands	r3, r2
 800407c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	691a      	ldr	r2, [r3, #16]
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4313      	orrs	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	08da      	lsrs	r2, r3, #3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3208      	adds	r2, #8
 800409c:	69b9      	ldr	r1, [r7, #24]
 800409e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	2203      	movs	r2, #3
 80040ae:	fa02 f303 	lsl.w	r3, r2, r3
 80040b2:	43db      	mvns	r3, r3
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	4013      	ands	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f003 0203 	and.w	r2, r3, #3
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 80e0 	beq.w	80042a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040e4:	4b2f      	ldr	r3, [pc, #188]	; (80041a4 <HAL_GPIO_Init+0x238>)
 80040e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040ea:	4a2e      	ldr	r2, [pc, #184]	; (80041a4 <HAL_GPIO_Init+0x238>)
 80040ec:	f043 0302 	orr.w	r3, r3, #2
 80040f0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80040f4:	4b2b      	ldr	r3, [pc, #172]	; (80041a4 <HAL_GPIO_Init+0x238>)
 80040f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004102:	4a29      	ldr	r2, [pc, #164]	; (80041a8 <HAL_GPIO_Init+0x23c>)
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	089b      	lsrs	r3, r3, #2
 8004108:	3302      	adds	r3, #2
 800410a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800410e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	220f      	movs	r2, #15
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	43db      	mvns	r3, r3
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4013      	ands	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a20      	ldr	r2, [pc, #128]	; (80041ac <HAL_GPIO_Init+0x240>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d052      	beq.n	80041d4 <HAL_GPIO_Init+0x268>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a1f      	ldr	r2, [pc, #124]	; (80041b0 <HAL_GPIO_Init+0x244>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d031      	beq.n	800419a <HAL_GPIO_Init+0x22e>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a1e      	ldr	r2, [pc, #120]	; (80041b4 <HAL_GPIO_Init+0x248>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d02b      	beq.n	8004196 <HAL_GPIO_Init+0x22a>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a1d      	ldr	r2, [pc, #116]	; (80041b8 <HAL_GPIO_Init+0x24c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d025      	beq.n	8004192 <HAL_GPIO_Init+0x226>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a1c      	ldr	r2, [pc, #112]	; (80041bc <HAL_GPIO_Init+0x250>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d01f      	beq.n	800418e <HAL_GPIO_Init+0x222>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a1b      	ldr	r2, [pc, #108]	; (80041c0 <HAL_GPIO_Init+0x254>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d019      	beq.n	800418a <HAL_GPIO_Init+0x21e>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a1a      	ldr	r2, [pc, #104]	; (80041c4 <HAL_GPIO_Init+0x258>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d013      	beq.n	8004186 <HAL_GPIO_Init+0x21a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a19      	ldr	r2, [pc, #100]	; (80041c8 <HAL_GPIO_Init+0x25c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d00d      	beq.n	8004182 <HAL_GPIO_Init+0x216>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a18      	ldr	r2, [pc, #96]	; (80041cc <HAL_GPIO_Init+0x260>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d007      	beq.n	800417e <HAL_GPIO_Init+0x212>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a17      	ldr	r2, [pc, #92]	; (80041d0 <HAL_GPIO_Init+0x264>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d101      	bne.n	800417a <HAL_GPIO_Init+0x20e>
 8004176:	2309      	movs	r3, #9
 8004178:	e02d      	b.n	80041d6 <HAL_GPIO_Init+0x26a>
 800417a:	230a      	movs	r3, #10
 800417c:	e02b      	b.n	80041d6 <HAL_GPIO_Init+0x26a>
 800417e:	2308      	movs	r3, #8
 8004180:	e029      	b.n	80041d6 <HAL_GPIO_Init+0x26a>
 8004182:	2307      	movs	r3, #7
 8004184:	e027      	b.n	80041d6 <HAL_GPIO_Init+0x26a>
 8004186:	2306      	movs	r3, #6
 8004188:	e025      	b.n	80041d6 <HAL_GPIO_Init+0x26a>
 800418a:	2305      	movs	r3, #5
 800418c:	e023      	b.n	80041d6 <HAL_GPIO_Init+0x26a>
 800418e:	2304      	movs	r3, #4
 8004190:	e021      	b.n	80041d6 <HAL_GPIO_Init+0x26a>
 8004192:	2303      	movs	r3, #3
 8004194:	e01f      	b.n	80041d6 <HAL_GPIO_Init+0x26a>
 8004196:	2302      	movs	r3, #2
 8004198:	e01d      	b.n	80041d6 <HAL_GPIO_Init+0x26a>
 800419a:	2301      	movs	r3, #1
 800419c:	e01b      	b.n	80041d6 <HAL_GPIO_Init+0x26a>
 800419e:	bf00      	nop
 80041a0:	58000080 	.word	0x58000080
 80041a4:	58024400 	.word	0x58024400
 80041a8:	58000400 	.word	0x58000400
 80041ac:	58020000 	.word	0x58020000
 80041b0:	58020400 	.word	0x58020400
 80041b4:	58020800 	.word	0x58020800
 80041b8:	58020c00 	.word	0x58020c00
 80041bc:	58021000 	.word	0x58021000
 80041c0:	58021400 	.word	0x58021400
 80041c4:	58021800 	.word	0x58021800
 80041c8:	58021c00 	.word	0x58021c00
 80041cc:	58022000 	.word	0x58022000
 80041d0:	58022400 	.word	0x58022400
 80041d4:	2300      	movs	r3, #0
 80041d6:	69fa      	ldr	r2, [r7, #28]
 80041d8:	f002 0203 	and.w	r2, r2, #3
 80041dc:	0092      	lsls	r2, r2, #2
 80041de:	4093      	lsls	r3, r2
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041e6:	4938      	ldr	r1, [pc, #224]	; (80042c8 <HAL_GPIO_Init+0x35c>)
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	089b      	lsrs	r3, r3, #2
 80041ec:	3302      	adds	r3, #2
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	43db      	mvns	r3, r3
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	4013      	ands	r3, r2
 8004202:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	4313      	orrs	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	43db      	mvns	r3, r3
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4013      	ands	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	43db      	mvns	r3, r3
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	4013      	ands	r3, r2
 8004258:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	4313      	orrs	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800426e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	43db      	mvns	r3, r3
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	4013      	ands	r3, r2
 8004286:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800429c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	3301      	adds	r3, #1
 80042a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	fa22 f303 	lsr.w	r3, r2, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f47f ae63 	bne.w	8003f80 <HAL_GPIO_Init+0x14>
  }
}
 80042ba:	bf00      	nop
 80042bc:	3724      	adds	r7, #36	; 0x24
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	58000400 	.word	0x58000400

080042cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	460b      	mov	r3, r1
 80042d6:	807b      	strh	r3, [r7, #2]
 80042d8:	4613      	mov	r3, r2
 80042da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042dc:	787b      	ldrb	r3, [r7, #1]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042e2:	887a      	ldrh	r2, [r7, #2]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80042e8:	e003      	b.n	80042f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80042ea:	887b      	ldrh	r3, [r7, #2]
 80042ec:	041a      	lsls	r2, r3, #16
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	619a      	str	r2, [r3, #24]
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
	...

08004300 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004308:	4b19      	ldr	r3, [pc, #100]	; (8004370 <HAL_PWREx_ConfigSupply+0x70>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b04      	cmp	r3, #4
 8004312:	d00a      	beq.n	800432a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004314:	4b16      	ldr	r3, [pc, #88]	; (8004370 <HAL_PWREx_ConfigSupply+0x70>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	429a      	cmp	r2, r3
 8004320:	d001      	beq.n	8004326 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e01f      	b.n	8004366 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	e01d      	b.n	8004366 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800432a:	4b11      	ldr	r3, [pc, #68]	; (8004370 <HAL_PWREx_ConfigSupply+0x70>)
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f023 0207 	bic.w	r2, r3, #7
 8004332:	490f      	ldr	r1, [pc, #60]	; (8004370 <HAL_PWREx_ConfigSupply+0x70>)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4313      	orrs	r3, r2
 8004338:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800433a:	f7fd f9a5 	bl	8001688 <HAL_GetTick>
 800433e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004340:	e009      	b.n	8004356 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004342:	f7fd f9a1 	bl	8001688 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004350:	d901      	bls.n	8004356 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e007      	b.n	8004366 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004356:	4b06      	ldr	r3, [pc, #24]	; (8004370 <HAL_PWREx_ConfigSupply+0x70>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800435e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004362:	d1ee      	bne.n	8004342 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	58024800 	.word	0x58024800

08004374 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08c      	sub	sp, #48	; 0x30
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e3ff      	b.n	8004b86 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 8087 	beq.w	80044a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004394:	4b99      	ldr	r3, [pc, #612]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800439c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800439e:	4b97      	ldr	r3, [pc, #604]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80043a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80043a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a6:	2b10      	cmp	r3, #16
 80043a8:	d007      	beq.n	80043ba <HAL_RCC_OscConfig+0x46>
 80043aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ac:	2b18      	cmp	r3, #24
 80043ae:	d110      	bne.n	80043d2 <HAL_RCC_OscConfig+0x5e>
 80043b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d10b      	bne.n	80043d2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ba:	4b90      	ldr	r3, [pc, #576]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d06c      	beq.n	80044a0 <HAL_RCC_OscConfig+0x12c>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d168      	bne.n	80044a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e3d9      	b.n	8004b86 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043da:	d106      	bne.n	80043ea <HAL_RCC_OscConfig+0x76>
 80043dc:	4b87      	ldr	r3, [pc, #540]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a86      	ldr	r2, [pc, #536]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80043e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e6:	6013      	str	r3, [r2, #0]
 80043e8:	e02e      	b.n	8004448 <HAL_RCC_OscConfig+0xd4>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10c      	bne.n	800440c <HAL_RCC_OscConfig+0x98>
 80043f2:	4b82      	ldr	r3, [pc, #520]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a81      	ldr	r2, [pc, #516]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80043f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	4b7f      	ldr	r3, [pc, #508]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a7e      	ldr	r2, [pc, #504]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004404:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	e01d      	b.n	8004448 <HAL_RCC_OscConfig+0xd4>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004414:	d10c      	bne.n	8004430 <HAL_RCC_OscConfig+0xbc>
 8004416:	4b79      	ldr	r3, [pc, #484]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a78      	ldr	r2, [pc, #480]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 800441c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	4b76      	ldr	r3, [pc, #472]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a75      	ldr	r2, [pc, #468]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	e00b      	b.n	8004448 <HAL_RCC_OscConfig+0xd4>
 8004430:	4b72      	ldr	r3, [pc, #456]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a71      	ldr	r2, [pc, #452]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	4b6f      	ldr	r3, [pc, #444]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a6e      	ldr	r2, [pc, #440]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d013      	beq.n	8004478 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004450:	f7fd f91a 	bl	8001688 <HAL_GetTick>
 8004454:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004458:	f7fd f916 	bl	8001688 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b64      	cmp	r3, #100	; 0x64
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e38d      	b.n	8004b86 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800446a:	4b64      	ldr	r3, [pc, #400]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0f0      	beq.n	8004458 <HAL_RCC_OscConfig+0xe4>
 8004476:	e014      	b.n	80044a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fd f906 	bl	8001688 <HAL_GetTick>
 800447c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004480:	f7fd f902 	bl	8001688 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b64      	cmp	r3, #100	; 0x64
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e379      	b.n	8004b86 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004492:	4b5a      	ldr	r3, [pc, #360]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x10c>
 800449e:	e000      	b.n	80044a2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 80ae 	beq.w	800460c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044b0:	4b52      	ldr	r3, [pc, #328]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044b8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044ba:	4b50      	ldr	r3, [pc, #320]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80044bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044be:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d007      	beq.n	80044d6 <HAL_RCC_OscConfig+0x162>
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	2b18      	cmp	r3, #24
 80044ca:	d13a      	bne.n	8004542 <HAL_RCC_OscConfig+0x1ce>
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d135      	bne.n	8004542 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044d6:	4b49      	ldr	r3, [pc, #292]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0304 	and.w	r3, r3, #4
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d005      	beq.n	80044ee <HAL_RCC_OscConfig+0x17a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e34b      	b.n	8004b86 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ee:	f7fd f8f9 	bl	80016e4 <HAL_GetREVID>
 80044f2:	4602      	mov	r2, r0
 80044f4:	f241 0303 	movw	r3, #4099	; 0x1003
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d817      	bhi.n	800452c <HAL_RCC_OscConfig+0x1b8>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	2b40      	cmp	r3, #64	; 0x40
 8004502:	d108      	bne.n	8004516 <HAL_RCC_OscConfig+0x1a2>
 8004504:	4b3d      	ldr	r3, [pc, #244]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800450c:	4a3b      	ldr	r2, [pc, #236]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 800450e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004512:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004514:	e07a      	b.n	800460c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004516:	4b39      	ldr	r3, [pc, #228]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	031b      	lsls	r3, r3, #12
 8004524:	4935      	ldr	r1, [pc, #212]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004526:	4313      	orrs	r3, r2
 8004528:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800452a:	e06f      	b.n	800460c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800452c:	4b33      	ldr	r3, [pc, #204]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	061b      	lsls	r3, r3, #24
 800453a:	4930      	ldr	r1, [pc, #192]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 800453c:	4313      	orrs	r3, r2
 800453e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004540:	e064      	b.n	800460c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d045      	beq.n	80045d6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800454a:	4b2c      	ldr	r3, [pc, #176]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f023 0219 	bic.w	r2, r3, #25
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	4929      	ldr	r1, [pc, #164]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004558:	4313      	orrs	r3, r2
 800455a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455c:	f7fd f894 	bl	8001688 <HAL_GetTick>
 8004560:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004564:	f7fd f890 	bl	8001688 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e307      	b.n	8004b86 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004576:	4b21      	ldr	r3, [pc, #132]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0f0      	beq.n	8004564 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004582:	f7fd f8af 	bl	80016e4 <HAL_GetREVID>
 8004586:	4602      	mov	r2, r0
 8004588:	f241 0303 	movw	r3, #4099	; 0x1003
 800458c:	429a      	cmp	r2, r3
 800458e:	d817      	bhi.n	80045c0 <HAL_RCC_OscConfig+0x24c>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	2b40      	cmp	r3, #64	; 0x40
 8004596:	d108      	bne.n	80045aa <HAL_RCC_OscConfig+0x236>
 8004598:	4b18      	ldr	r3, [pc, #96]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80045a0:	4a16      	ldr	r2, [pc, #88]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80045a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045a6:	6053      	str	r3, [r2, #4]
 80045a8:	e030      	b.n	800460c <HAL_RCC_OscConfig+0x298>
 80045aa:	4b14      	ldr	r3, [pc, #80]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	031b      	lsls	r3, r3, #12
 80045b8:	4910      	ldr	r1, [pc, #64]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	604b      	str	r3, [r1, #4]
 80045be:	e025      	b.n	800460c <HAL_RCC_OscConfig+0x298>
 80045c0:	4b0e      	ldr	r3, [pc, #56]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	061b      	lsls	r3, r3, #24
 80045ce:	490b      	ldr	r1, [pc, #44]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	604b      	str	r3, [r1, #4]
 80045d4:	e01a      	b.n	800460c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045d6:	4b09      	ldr	r3, [pc, #36]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a08      	ldr	r2, [pc, #32]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80045dc:	f023 0301 	bic.w	r3, r3, #1
 80045e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e2:	f7fd f851 	bl	8001688 <HAL_GetTick>
 80045e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045e8:	e00a      	b.n	8004600 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ea:	f7fd f84d 	bl	8001688 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d903      	bls.n	8004600 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e2c4      	b.n	8004b86 <HAL_RCC_OscConfig+0x812>
 80045fc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004600:	4ba4      	ldr	r3, [pc, #656]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1ee      	bne.n	80045ea <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0310 	and.w	r3, r3, #16
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 80a9 	beq.w	800476c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800461a:	4b9e      	ldr	r3, [pc, #632]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004622:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004624:	4b9b      	ldr	r3, [pc, #620]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 8004626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004628:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	2b08      	cmp	r3, #8
 800462e:	d007      	beq.n	8004640 <HAL_RCC_OscConfig+0x2cc>
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	2b18      	cmp	r3, #24
 8004634:	d13a      	bne.n	80046ac <HAL_RCC_OscConfig+0x338>
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f003 0303 	and.w	r3, r3, #3
 800463c:	2b01      	cmp	r3, #1
 800463e:	d135      	bne.n	80046ac <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004640:	4b94      	ldr	r3, [pc, #592]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004648:	2b00      	cmp	r3, #0
 800464a:	d005      	beq.n	8004658 <HAL_RCC_OscConfig+0x2e4>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	2b80      	cmp	r3, #128	; 0x80
 8004652:	d001      	beq.n	8004658 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e296      	b.n	8004b86 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004658:	f7fd f844 	bl	80016e4 <HAL_GetREVID>
 800465c:	4602      	mov	r2, r0
 800465e:	f241 0303 	movw	r3, #4099	; 0x1003
 8004662:	429a      	cmp	r2, r3
 8004664:	d817      	bhi.n	8004696 <HAL_RCC_OscConfig+0x322>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	2b20      	cmp	r3, #32
 800466c:	d108      	bne.n	8004680 <HAL_RCC_OscConfig+0x30c>
 800466e:	4b89      	ldr	r3, [pc, #548]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004676:	4a87      	ldr	r2, [pc, #540]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 8004678:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800467c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800467e:	e075      	b.n	800476c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004680:	4b84      	ldr	r3, [pc, #528]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	069b      	lsls	r3, r3, #26
 800468e:	4981      	ldr	r1, [pc, #516]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 8004690:	4313      	orrs	r3, r2
 8004692:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004694:	e06a      	b.n	800476c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004696:	4b7f      	ldr	r3, [pc, #508]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	061b      	lsls	r3, r3, #24
 80046a4:	497b      	ldr	r1, [pc, #492]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046aa:	e05f      	b.n	800476c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d042      	beq.n	800473a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80046b4:	4b77      	ldr	r3, [pc, #476]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a76      	ldr	r2, [pc, #472]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 80046ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c0:	f7fc ffe2 	bl	8001688 <HAL_GetTick>
 80046c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80046c8:	f7fc ffde 	bl	8001688 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e255      	b.n	8004b86 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046da:	4b6e      	ldr	r3, [pc, #440]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0f0      	beq.n	80046c8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046e6:	f7fc fffd 	bl	80016e4 <HAL_GetREVID>
 80046ea:	4602      	mov	r2, r0
 80046ec:	f241 0303 	movw	r3, #4099	; 0x1003
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d817      	bhi.n	8004724 <HAL_RCC_OscConfig+0x3b0>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	d108      	bne.n	800470e <HAL_RCC_OscConfig+0x39a>
 80046fc:	4b65      	ldr	r3, [pc, #404]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004704:	4a63      	ldr	r2, [pc, #396]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 8004706:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800470a:	6053      	str	r3, [r2, #4]
 800470c:	e02e      	b.n	800476c <HAL_RCC_OscConfig+0x3f8>
 800470e:	4b61      	ldr	r3, [pc, #388]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	069b      	lsls	r3, r3, #26
 800471c:	495d      	ldr	r1, [pc, #372]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 800471e:	4313      	orrs	r3, r2
 8004720:	604b      	str	r3, [r1, #4]
 8004722:	e023      	b.n	800476c <HAL_RCC_OscConfig+0x3f8>
 8004724:	4b5b      	ldr	r3, [pc, #364]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	061b      	lsls	r3, r3, #24
 8004732:	4958      	ldr	r1, [pc, #352]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 8004734:	4313      	orrs	r3, r2
 8004736:	60cb      	str	r3, [r1, #12]
 8004738:	e018      	b.n	800476c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800473a:	4b56      	ldr	r3, [pc, #344]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a55      	ldr	r2, [pc, #340]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 8004740:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004746:	f7fc ff9f 	bl	8001688 <HAL_GetTick>
 800474a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800474e:	f7fc ff9b 	bl	8001688 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e212      	b.n	8004b86 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004760:	4b4c      	ldr	r3, [pc, #304]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1f0      	bne.n	800474e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0308 	and.w	r3, r3, #8
 8004774:	2b00      	cmp	r3, #0
 8004776:	d036      	beq.n	80047e6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d019      	beq.n	80047b4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004780:	4b44      	ldr	r3, [pc, #272]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 8004782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004784:	4a43      	ldr	r2, [pc, #268]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 8004786:	f043 0301 	orr.w	r3, r3, #1
 800478a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478c:	f7fc ff7c 	bl	8001688 <HAL_GetTick>
 8004790:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004794:	f7fc ff78 	bl	8001688 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e1ef      	b.n	8004b86 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047a6:	4b3b      	ldr	r3, [pc, #236]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 80047a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0f0      	beq.n	8004794 <HAL_RCC_OscConfig+0x420>
 80047b2:	e018      	b.n	80047e6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047b4:	4b37      	ldr	r3, [pc, #220]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 80047b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b8:	4a36      	ldr	r2, [pc, #216]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 80047ba:	f023 0301 	bic.w	r3, r3, #1
 80047be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c0:	f7fc ff62 	bl	8001688 <HAL_GetTick>
 80047c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047c8:	f7fc ff5e 	bl	8001688 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e1d5      	b.n	8004b86 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047da:	4b2e      	ldr	r3, [pc, #184]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 80047dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1f0      	bne.n	80047c8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0320 	and.w	r3, r3, #32
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d036      	beq.n	8004860 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d019      	beq.n	800482e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047fa:	4b26      	ldr	r3, [pc, #152]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a25      	ldr	r2, [pc, #148]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 8004800:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004804:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004806:	f7fc ff3f 	bl	8001688 <HAL_GetTick>
 800480a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800480c:	e008      	b.n	8004820 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800480e:	f7fc ff3b 	bl	8001688 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e1b2      	b.n	8004b86 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004820:	4b1c      	ldr	r3, [pc, #112]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0f0      	beq.n	800480e <HAL_RCC_OscConfig+0x49a>
 800482c:	e018      	b.n	8004860 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800482e:	4b19      	ldr	r3, [pc, #100]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a18      	ldr	r2, [pc, #96]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 8004834:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004838:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800483a:	f7fc ff25 	bl	8001688 <HAL_GetTick>
 800483e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004842:	f7fc ff21 	bl	8001688 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e198      	b.n	8004b86 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004854:	4b0f      	ldr	r3, [pc, #60]	; (8004894 <HAL_RCC_OscConfig+0x520>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1f0      	bne.n	8004842 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 8085 	beq.w	8004978 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800486e:	4b0a      	ldr	r3, [pc, #40]	; (8004898 <HAL_RCC_OscConfig+0x524>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a09      	ldr	r2, [pc, #36]	; (8004898 <HAL_RCC_OscConfig+0x524>)
 8004874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004878:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800487a:	f7fc ff05 	bl	8001688 <HAL_GetTick>
 800487e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004880:	e00c      	b.n	800489c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004882:	f7fc ff01 	bl	8001688 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b64      	cmp	r3, #100	; 0x64
 800488e:	d905      	bls.n	800489c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e178      	b.n	8004b86 <HAL_RCC_OscConfig+0x812>
 8004894:	58024400 	.word	0x58024400
 8004898:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800489c:	4b96      	ldr	r3, [pc, #600]	; (8004af8 <HAL_RCC_OscConfig+0x784>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0ec      	beq.n	8004882 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d106      	bne.n	80048be <HAL_RCC_OscConfig+0x54a>
 80048b0:	4b92      	ldr	r3, [pc, #584]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 80048b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b4:	4a91      	ldr	r2, [pc, #580]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	6713      	str	r3, [r2, #112]	; 0x70
 80048bc:	e02d      	b.n	800491a <HAL_RCC_OscConfig+0x5a6>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10c      	bne.n	80048e0 <HAL_RCC_OscConfig+0x56c>
 80048c6:	4b8d      	ldr	r3, [pc, #564]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 80048c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ca:	4a8c      	ldr	r2, [pc, #560]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 80048cc:	f023 0301 	bic.w	r3, r3, #1
 80048d0:	6713      	str	r3, [r2, #112]	; 0x70
 80048d2:	4b8a      	ldr	r3, [pc, #552]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 80048d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d6:	4a89      	ldr	r2, [pc, #548]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 80048d8:	f023 0304 	bic.w	r3, r3, #4
 80048dc:	6713      	str	r3, [r2, #112]	; 0x70
 80048de:	e01c      	b.n	800491a <HAL_RCC_OscConfig+0x5a6>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	2b05      	cmp	r3, #5
 80048e6:	d10c      	bne.n	8004902 <HAL_RCC_OscConfig+0x58e>
 80048e8:	4b84      	ldr	r3, [pc, #528]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 80048ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ec:	4a83      	ldr	r2, [pc, #524]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 80048ee:	f043 0304 	orr.w	r3, r3, #4
 80048f2:	6713      	str	r3, [r2, #112]	; 0x70
 80048f4:	4b81      	ldr	r3, [pc, #516]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 80048f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f8:	4a80      	ldr	r2, [pc, #512]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 80048fa:	f043 0301 	orr.w	r3, r3, #1
 80048fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004900:	e00b      	b.n	800491a <HAL_RCC_OscConfig+0x5a6>
 8004902:	4b7e      	ldr	r3, [pc, #504]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 8004904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004906:	4a7d      	ldr	r2, [pc, #500]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 8004908:	f023 0301 	bic.w	r3, r3, #1
 800490c:	6713      	str	r3, [r2, #112]	; 0x70
 800490e:	4b7b      	ldr	r3, [pc, #492]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 8004910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004912:	4a7a      	ldr	r2, [pc, #488]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 8004914:	f023 0304 	bic.w	r3, r3, #4
 8004918:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d015      	beq.n	800494e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004922:	f7fc feb1 	bl	8001688 <HAL_GetTick>
 8004926:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004928:	e00a      	b.n	8004940 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800492a:	f7fc fead 	bl	8001688 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	f241 3288 	movw	r2, #5000	; 0x1388
 8004938:	4293      	cmp	r3, r2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e122      	b.n	8004b86 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004940:	4b6e      	ldr	r3, [pc, #440]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 8004942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0ee      	beq.n	800492a <HAL_RCC_OscConfig+0x5b6>
 800494c:	e014      	b.n	8004978 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800494e:	f7fc fe9b 	bl	8001688 <HAL_GetTick>
 8004952:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004954:	e00a      	b.n	800496c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004956:	f7fc fe97 	bl	8001688 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	f241 3288 	movw	r2, #5000	; 0x1388
 8004964:	4293      	cmp	r3, r2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e10c      	b.n	8004b86 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800496c:	4b63      	ldr	r3, [pc, #396]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 800496e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1ee      	bne.n	8004956 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 8101 	beq.w	8004b84 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004982:	4b5e      	ldr	r3, [pc, #376]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800498a:	2b18      	cmp	r3, #24
 800498c:	f000 80bc 	beq.w	8004b08 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	2b02      	cmp	r3, #2
 8004996:	f040 8095 	bne.w	8004ac4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800499a:	4b58      	ldr	r3, [pc, #352]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a57      	ldr	r2, [pc, #348]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 80049a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a6:	f7fc fe6f 	bl	8001688 <HAL_GetTick>
 80049aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ae:	f7fc fe6b 	bl	8001688 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e0e2      	b.n	8004b86 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049c0:	4b4e      	ldr	r3, [pc, #312]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1f0      	bne.n	80049ae <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049cc:	4b4b      	ldr	r3, [pc, #300]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 80049ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049d0:	4b4b      	ldr	r3, [pc, #300]	; (8004b00 <HAL_RCC_OscConfig+0x78c>)
 80049d2:	4013      	ands	r3, r2
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80049dc:	0112      	lsls	r2, r2, #4
 80049de:	430a      	orrs	r2, r1
 80049e0:	4946      	ldr	r1, [pc, #280]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	628b      	str	r3, [r1, #40]	; 0x28
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	3b01      	subs	r3, #1
 80049ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f4:	3b01      	subs	r3, #1
 80049f6:	025b      	lsls	r3, r3, #9
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a00:	3b01      	subs	r3, #1
 8004a02:	041b      	lsls	r3, r3, #16
 8004a04:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	061b      	lsls	r3, r3, #24
 8004a12:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a16:	4939      	ldr	r1, [pc, #228]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004a1c:	4b37      	ldr	r3, [pc, #220]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	4a36      	ldr	r2, [pc, #216]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 8004a22:	f023 0301 	bic.w	r3, r3, #1
 8004a26:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a28:	4b34      	ldr	r3, [pc, #208]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 8004a2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a2c:	4b35      	ldr	r3, [pc, #212]	; (8004b04 <HAL_RCC_OscConfig+0x790>)
 8004a2e:	4013      	ands	r3, r2
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a34:	00d2      	lsls	r2, r2, #3
 8004a36:	4931      	ldr	r1, [pc, #196]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004a3c:	4b2f      	ldr	r3, [pc, #188]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	f023 020c 	bic.w	r2, r3, #12
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a48:	492c      	ldr	r1, [pc, #176]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004a4e:	4b2b      	ldr	r3, [pc, #172]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 8004a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a52:	f023 0202 	bic.w	r2, r3, #2
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5a:	4928      	ldr	r1, [pc, #160]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a60:	4b26      	ldr	r3, [pc, #152]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	4a25      	ldr	r2, [pc, #148]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 8004a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a6c:	4b23      	ldr	r3, [pc, #140]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 8004a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a70:	4a22      	ldr	r2, [pc, #136]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 8004a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004a78:	4b20      	ldr	r3, [pc, #128]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 8004a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7c:	4a1f      	ldr	r2, [pc, #124]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 8004a7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004a84:	4b1d      	ldr	r3, [pc, #116]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 8004a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a88:	4a1c      	ldr	r2, [pc, #112]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 8004a8a:	f043 0301 	orr.w	r3, r3, #1
 8004a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a90:	4b1a      	ldr	r3, [pc, #104]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a19      	ldr	r2, [pc, #100]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 8004a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9c:	f7fc fdf4 	bl	8001688 <HAL_GetTick>
 8004aa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aa4:	f7fc fdf0 	bl	8001688 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e067      	b.n	8004b86 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ab6:	4b11      	ldr	r3, [pc, #68]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d0f0      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x730>
 8004ac2:	e05f      	b.n	8004b84 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac4:	4b0d      	ldr	r3, [pc, #52]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a0c      	ldr	r2, [pc, #48]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 8004aca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad0:	f7fc fdda 	bl	8001688 <HAL_GetTick>
 8004ad4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ad8:	f7fc fdd6 	bl	8001688 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e04d      	b.n	8004b86 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004aea:	4b04      	ldr	r3, [pc, #16]	; (8004afc <HAL_RCC_OscConfig+0x788>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f0      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x764>
 8004af6:	e045      	b.n	8004b84 <HAL_RCC_OscConfig+0x810>
 8004af8:	58024800 	.word	0x58024800
 8004afc:	58024400 	.word	0x58024400
 8004b00:	fffffc0c 	.word	0xfffffc0c
 8004b04:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004b08:	4b21      	ldr	r3, [pc, #132]	; (8004b90 <HAL_RCC_OscConfig+0x81c>)
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004b0e:	4b20      	ldr	r3, [pc, #128]	; (8004b90 <HAL_RCC_OscConfig+0x81c>)
 8004b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b12:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d031      	beq.n	8004b80 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f003 0203 	and.w	r2, r3, #3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d12a      	bne.n	8004b80 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	091b      	lsrs	r3, r3, #4
 8004b2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d122      	bne.n	8004b80 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b44:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d11a      	bne.n	8004b80 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	0a5b      	lsrs	r3, r3, #9
 8004b4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b56:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d111      	bne.n	8004b80 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	0c1b      	lsrs	r3, r3, #16
 8004b60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b68:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d108      	bne.n	8004b80 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	0e1b      	lsrs	r3, r3, #24
 8004b72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d001      	beq.n	8004b84 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e000      	b.n	8004b86 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3730      	adds	r7, #48	; 0x30
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	58024400 	.word	0x58024400

08004b94 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e19c      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba8:	4b8a      	ldr	r3, [pc, #552]	; (8004dd4 <HAL_RCC_ClockConfig+0x240>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 030f 	and.w	r3, r3, #15
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d910      	bls.n	8004bd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb6:	4b87      	ldr	r3, [pc, #540]	; (8004dd4 <HAL_RCC_ClockConfig+0x240>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f023 020f 	bic.w	r2, r3, #15
 8004bbe:	4985      	ldr	r1, [pc, #532]	; (8004dd4 <HAL_RCC_ClockConfig+0x240>)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bc6:	4b83      	ldr	r3, [pc, #524]	; (8004dd4 <HAL_RCC_ClockConfig+0x240>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 030f 	and.w	r3, r3, #15
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d001      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e184      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d010      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691a      	ldr	r2, [r3, #16]
 8004be8:	4b7b      	ldr	r3, [pc, #492]	; (8004dd8 <HAL_RCC_ClockConfig+0x244>)
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d908      	bls.n	8004c06 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004bf4:	4b78      	ldr	r3, [pc, #480]	; (8004dd8 <HAL_RCC_ClockConfig+0x244>)
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	4975      	ldr	r1, [pc, #468]	; (8004dd8 <HAL_RCC_ClockConfig+0x244>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d010      	beq.n	8004c34 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	695a      	ldr	r2, [r3, #20]
 8004c16:	4b70      	ldr	r3, [pc, #448]	; (8004dd8 <HAL_RCC_ClockConfig+0x244>)
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d908      	bls.n	8004c34 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c22:	4b6d      	ldr	r3, [pc, #436]	; (8004dd8 <HAL_RCC_ClockConfig+0x244>)
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	496a      	ldr	r1, [pc, #424]	; (8004dd8 <HAL_RCC_ClockConfig+0x244>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0310 	and.w	r3, r3, #16
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d010      	beq.n	8004c62 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	699a      	ldr	r2, [r3, #24]
 8004c44:	4b64      	ldr	r3, [pc, #400]	; (8004dd8 <HAL_RCC_ClockConfig+0x244>)
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d908      	bls.n	8004c62 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c50:	4b61      	ldr	r3, [pc, #388]	; (8004dd8 <HAL_RCC_ClockConfig+0x244>)
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	495e      	ldr	r1, [pc, #376]	; (8004dd8 <HAL_RCC_ClockConfig+0x244>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0320 	and.w	r3, r3, #32
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d010      	beq.n	8004c90 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	69da      	ldr	r2, [r3, #28]
 8004c72:	4b59      	ldr	r3, [pc, #356]	; (8004dd8 <HAL_RCC_ClockConfig+0x244>)
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d908      	bls.n	8004c90 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004c7e:	4b56      	ldr	r3, [pc, #344]	; (8004dd8 <HAL_RCC_ClockConfig+0x244>)
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	4953      	ldr	r1, [pc, #332]	; (8004dd8 <HAL_RCC_ClockConfig+0x244>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d010      	beq.n	8004cbe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68da      	ldr	r2, [r3, #12]
 8004ca0:	4b4d      	ldr	r3, [pc, #308]	; (8004dd8 <HAL_RCC_ClockConfig+0x244>)
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	f003 030f 	and.w	r3, r3, #15
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d908      	bls.n	8004cbe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cac:	4b4a      	ldr	r3, [pc, #296]	; (8004dd8 <HAL_RCC_ClockConfig+0x244>)
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	f023 020f 	bic.w	r2, r3, #15
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	4947      	ldr	r1, [pc, #284]	; (8004dd8 <HAL_RCC_ClockConfig+0x244>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d055      	beq.n	8004d76 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004cca:	4b43      	ldr	r3, [pc, #268]	; (8004dd8 <HAL_RCC_ClockConfig+0x244>)
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	4940      	ldr	r1, [pc, #256]	; (8004dd8 <HAL_RCC_ClockConfig+0x244>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d107      	bne.n	8004cf4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ce4:	4b3c      	ldr	r3, [pc, #240]	; (8004dd8 <HAL_RCC_ClockConfig+0x244>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d121      	bne.n	8004d34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e0f6      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b03      	cmp	r3, #3
 8004cfa:	d107      	bne.n	8004d0c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cfc:	4b36      	ldr	r3, [pc, #216]	; (8004dd8 <HAL_RCC_ClockConfig+0x244>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d115      	bne.n	8004d34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e0ea      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d107      	bne.n	8004d24 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d14:	4b30      	ldr	r3, [pc, #192]	; (8004dd8 <HAL_RCC_ClockConfig+0x244>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d109      	bne.n	8004d34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e0de      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d24:	4b2c      	ldr	r3, [pc, #176]	; (8004dd8 <HAL_RCC_ClockConfig+0x244>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e0d6      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d34:	4b28      	ldr	r3, [pc, #160]	; (8004dd8 <HAL_RCC_ClockConfig+0x244>)
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	f023 0207 	bic.w	r2, r3, #7
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	4925      	ldr	r1, [pc, #148]	; (8004dd8 <HAL_RCC_ClockConfig+0x244>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d46:	f7fc fc9f 	bl	8001688 <HAL_GetTick>
 8004d4a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d4c:	e00a      	b.n	8004d64 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d4e:	f7fc fc9b 	bl	8001688 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e0be      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d64:	4b1c      	ldr	r3, [pc, #112]	; (8004dd8 <HAL_RCC_ClockConfig+0x244>)
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	00db      	lsls	r3, r3, #3
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d1eb      	bne.n	8004d4e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d010      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	4b14      	ldr	r3, [pc, #80]	; (8004dd8 <HAL_RCC_ClockConfig+0x244>)
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	f003 030f 	and.w	r3, r3, #15
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d208      	bcs.n	8004da4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d92:	4b11      	ldr	r3, [pc, #68]	; (8004dd8 <HAL_RCC_ClockConfig+0x244>)
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	f023 020f 	bic.w	r2, r3, #15
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	490e      	ldr	r1, [pc, #56]	; (8004dd8 <HAL_RCC_ClockConfig+0x244>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004da4:	4b0b      	ldr	r3, [pc, #44]	; (8004dd4 <HAL_RCC_ClockConfig+0x240>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 030f 	and.w	r3, r3, #15
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d214      	bcs.n	8004ddc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004db2:	4b08      	ldr	r3, [pc, #32]	; (8004dd4 <HAL_RCC_ClockConfig+0x240>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f023 020f 	bic.w	r2, r3, #15
 8004dba:	4906      	ldr	r1, [pc, #24]	; (8004dd4 <HAL_RCC_ClockConfig+0x240>)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc2:	4b04      	ldr	r3, [pc, #16]	; (8004dd4 <HAL_RCC_ClockConfig+0x240>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 030f 	and.w	r3, r3, #15
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d005      	beq.n	8004ddc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e086      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x34e>
 8004dd4:	52002000 	.word	0x52002000
 8004dd8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d010      	beq.n	8004e0a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691a      	ldr	r2, [r3, #16]
 8004dec:	4b3f      	ldr	r3, [pc, #252]	; (8004eec <HAL_RCC_ClockConfig+0x358>)
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d208      	bcs.n	8004e0a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004df8:	4b3c      	ldr	r3, [pc, #240]	; (8004eec <HAL_RCC_ClockConfig+0x358>)
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	4939      	ldr	r1, [pc, #228]	; (8004eec <HAL_RCC_ClockConfig+0x358>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d010      	beq.n	8004e38 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695a      	ldr	r2, [r3, #20]
 8004e1a:	4b34      	ldr	r3, [pc, #208]	; (8004eec <HAL_RCC_ClockConfig+0x358>)
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d208      	bcs.n	8004e38 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e26:	4b31      	ldr	r3, [pc, #196]	; (8004eec <HAL_RCC_ClockConfig+0x358>)
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	492e      	ldr	r1, [pc, #184]	; (8004eec <HAL_RCC_ClockConfig+0x358>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0310 	and.w	r3, r3, #16
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d010      	beq.n	8004e66 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	699a      	ldr	r2, [r3, #24]
 8004e48:	4b28      	ldr	r3, [pc, #160]	; (8004eec <HAL_RCC_ClockConfig+0x358>)
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d208      	bcs.n	8004e66 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e54:	4b25      	ldr	r3, [pc, #148]	; (8004eec <HAL_RCC_ClockConfig+0x358>)
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	4922      	ldr	r1, [pc, #136]	; (8004eec <HAL_RCC_ClockConfig+0x358>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0320 	and.w	r3, r3, #32
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d010      	beq.n	8004e94 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69da      	ldr	r2, [r3, #28]
 8004e76:	4b1d      	ldr	r3, [pc, #116]	; (8004eec <HAL_RCC_ClockConfig+0x358>)
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d208      	bcs.n	8004e94 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004e82:	4b1a      	ldr	r3, [pc, #104]	; (8004eec <HAL_RCC_ClockConfig+0x358>)
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	4917      	ldr	r1, [pc, #92]	; (8004eec <HAL_RCC_ClockConfig+0x358>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e94:	f000 f834 	bl	8004f00 <HAL_RCC_GetSysClockFreq>
 8004e98:	4601      	mov	r1, r0
 8004e9a:	4b14      	ldr	r3, [pc, #80]	; (8004eec <HAL_RCC_ClockConfig+0x358>)
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	0a1b      	lsrs	r3, r3, #8
 8004ea0:	f003 030f 	and.w	r3, r3, #15
 8004ea4:	4a12      	ldr	r2, [pc, #72]	; (8004ef0 <HAL_RCC_ClockConfig+0x35c>)
 8004ea6:	5cd3      	ldrb	r3, [r2, r3]
 8004ea8:	f003 031f 	and.w	r3, r3, #31
 8004eac:	fa21 f303 	lsr.w	r3, r1, r3
 8004eb0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004eb2:	4b0e      	ldr	r3, [pc, #56]	; (8004eec <HAL_RCC_ClockConfig+0x358>)
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	f003 030f 	and.w	r3, r3, #15
 8004eba:	4a0d      	ldr	r2, [pc, #52]	; (8004ef0 <HAL_RCC_ClockConfig+0x35c>)
 8004ebc:	5cd3      	ldrb	r3, [r2, r3]
 8004ebe:	f003 031f 	and.w	r3, r3, #31
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec8:	4a0a      	ldr	r2, [pc, #40]	; (8004ef4 <HAL_RCC_ClockConfig+0x360>)
 8004eca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ecc:	4a0a      	ldr	r2, [pc, #40]	; (8004ef8 <HAL_RCC_ClockConfig+0x364>)
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004ed2:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <HAL_RCC_ClockConfig+0x368>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fc fb8c 	bl	80015f4 <HAL_InitTick>
 8004edc:	4603      	mov	r3, r0
 8004ede:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3718      	adds	r7, #24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	58024400 	.word	0x58024400
 8004ef0:	0800cf5c 	.word	0x0800cf5c
 8004ef4:	24000008 	.word	0x24000008
 8004ef8:	24000004 	.word	0x24000004
 8004efc:	2400000c 	.word	0x2400000c

08004f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b089      	sub	sp, #36	; 0x24
 8004f04:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f06:	4baf      	ldr	r3, [pc, #700]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f0e:	2b18      	cmp	r3, #24
 8004f10:	f200 814e 	bhi.w	80051b0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8004f14:	a201      	add	r2, pc, #4	; (adr r2, 8004f1c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1a:	bf00      	nop
 8004f1c:	08004f81 	.word	0x08004f81
 8004f20:	080051b1 	.word	0x080051b1
 8004f24:	080051b1 	.word	0x080051b1
 8004f28:	080051b1 	.word	0x080051b1
 8004f2c:	080051b1 	.word	0x080051b1
 8004f30:	080051b1 	.word	0x080051b1
 8004f34:	080051b1 	.word	0x080051b1
 8004f38:	080051b1 	.word	0x080051b1
 8004f3c:	08004fa7 	.word	0x08004fa7
 8004f40:	080051b1 	.word	0x080051b1
 8004f44:	080051b1 	.word	0x080051b1
 8004f48:	080051b1 	.word	0x080051b1
 8004f4c:	080051b1 	.word	0x080051b1
 8004f50:	080051b1 	.word	0x080051b1
 8004f54:	080051b1 	.word	0x080051b1
 8004f58:	080051b1 	.word	0x080051b1
 8004f5c:	08004fad 	.word	0x08004fad
 8004f60:	080051b1 	.word	0x080051b1
 8004f64:	080051b1 	.word	0x080051b1
 8004f68:	080051b1 	.word	0x080051b1
 8004f6c:	080051b1 	.word	0x080051b1
 8004f70:	080051b1 	.word	0x080051b1
 8004f74:	080051b1 	.word	0x080051b1
 8004f78:	080051b1 	.word	0x080051b1
 8004f7c:	08004fb3 	.word	0x08004fb3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f80:	4b90      	ldr	r3, [pc, #576]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0320 	and.w	r3, r3, #32
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d009      	beq.n	8004fa0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f8c:	4b8d      	ldr	r3, [pc, #564]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	08db      	lsrs	r3, r3, #3
 8004f92:	f003 0303 	and.w	r3, r3, #3
 8004f96:	4a8c      	ldr	r2, [pc, #560]	; (80051c8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004f98:	fa22 f303 	lsr.w	r3, r2, r3
 8004f9c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004f9e:	e10a      	b.n	80051b6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004fa0:	4b89      	ldr	r3, [pc, #548]	; (80051c8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004fa2:	61bb      	str	r3, [r7, #24]
    break;
 8004fa4:	e107      	b.n	80051b6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004fa6:	4b89      	ldr	r3, [pc, #548]	; (80051cc <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004fa8:	61bb      	str	r3, [r7, #24]
    break;
 8004faa:	e104      	b.n	80051b6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004fac:	4b88      	ldr	r3, [pc, #544]	; (80051d0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004fae:	61bb      	str	r3, [r7, #24]
    break;
 8004fb0:	e101      	b.n	80051b6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fb2:	4b84      	ldr	r3, [pc, #528]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004fbc:	4b81      	ldr	r3, [pc, #516]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc0:	091b      	lsrs	r3, r3, #4
 8004fc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fc6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004fc8:	4b7e      	ldr	r3, [pc, #504]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004fd2:	4b7c      	ldr	r3, [pc, #496]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd6:	08db      	lsrs	r3, r3, #3
 8004fd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	fb02 f303 	mul.w	r3, r2, r3
 8004fe2:	ee07 3a90 	vmov	s15, r3
 8004fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fea:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 80da 	beq.w	80051aa <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d05a      	beq.n	80050b2 <HAL_RCC_GetSysClockFreq+0x1b2>
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d302      	bcc.n	8005006 <HAL_RCC_GetSysClockFreq+0x106>
 8005000:	2b02      	cmp	r3, #2
 8005002:	d078      	beq.n	80050f6 <HAL_RCC_GetSysClockFreq+0x1f6>
 8005004:	e099      	b.n	800513a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005006:	4b6f      	ldr	r3, [pc, #444]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0320 	and.w	r3, r3, #32
 800500e:	2b00      	cmp	r3, #0
 8005010:	d02d      	beq.n	800506e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005012:	4b6c      	ldr	r3, [pc, #432]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	08db      	lsrs	r3, r3, #3
 8005018:	f003 0303 	and.w	r3, r3, #3
 800501c:	4a6a      	ldr	r2, [pc, #424]	; (80051c8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800501e:	fa22 f303 	lsr.w	r3, r2, r3
 8005022:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	ee07 3a90 	vmov	s15, r3
 800502a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	ee07 3a90 	vmov	s15, r3
 8005034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005038:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800503c:	4b61      	ldr	r3, [pc, #388]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800503e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005044:	ee07 3a90 	vmov	s15, r3
 8005048:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800504c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005050:	eddf 5a60 	vldr	s11, [pc, #384]	; 80051d4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005054:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005058:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800505c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005060:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005068:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800506c:	e087      	b.n	800517e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	ee07 3a90 	vmov	s15, r3
 8005074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005078:	eddf 6a57 	vldr	s13, [pc, #348]	; 80051d8 <HAL_RCC_GetSysClockFreq+0x2d8>
 800507c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005080:	4b50      	ldr	r3, [pc, #320]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005088:	ee07 3a90 	vmov	s15, r3
 800508c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005090:	ed97 6a02 	vldr	s12, [r7, #8]
 8005094:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80051d4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005098:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800509c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050b0:	e065      	b.n	800517e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	ee07 3a90 	vmov	s15, r3
 80050b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050bc:	eddf 6a47 	vldr	s13, [pc, #284]	; 80051dc <HAL_RCC_GetSysClockFreq+0x2dc>
 80050c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050c4:	4b3f      	ldr	r3, [pc, #252]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80050c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050cc:	ee07 3a90 	vmov	s15, r3
 80050d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80050d8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80051d4 <HAL_RCC_GetSysClockFreq+0x2d4>
 80050dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050f4:	e043      	b.n	800517e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	ee07 3a90 	vmov	s15, r3
 80050fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005100:	eddf 6a37 	vldr	s13, [pc, #220]	; 80051e0 <HAL_RCC_GetSysClockFreq+0x2e0>
 8005104:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005108:	4b2e      	ldr	r3, [pc, #184]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800510a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005110:	ee07 3a90 	vmov	s15, r3
 8005114:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005118:	ed97 6a02 	vldr	s12, [r7, #8]
 800511c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80051d4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005120:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005124:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005128:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800512c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005130:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005134:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005138:	e021      	b.n	800517e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	ee07 3a90 	vmov	s15, r3
 8005140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005144:	eddf 6a25 	vldr	s13, [pc, #148]	; 80051dc <HAL_RCC_GetSysClockFreq+0x2dc>
 8005148:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800514c:	4b1d      	ldr	r3, [pc, #116]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800514e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005154:	ee07 3a90 	vmov	s15, r3
 8005158:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800515c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005160:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80051d4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005164:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005168:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800516c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005170:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005178:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800517c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800517e:	4b11      	ldr	r3, [pc, #68]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005182:	0a5b      	lsrs	r3, r3, #9
 8005184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005188:	3301      	adds	r3, #1
 800518a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	ee07 3a90 	vmov	s15, r3
 8005192:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005196:	edd7 6a07 	vldr	s13, [r7, #28]
 800519a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800519e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051a2:	ee17 3a90 	vmov	r3, s15
 80051a6:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80051a8:	e005      	b.n	80051b6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	61bb      	str	r3, [r7, #24]
    break;
 80051ae:	e002      	b.n	80051b6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80051b0:	4b06      	ldr	r3, [pc, #24]	; (80051cc <HAL_RCC_GetSysClockFreq+0x2cc>)
 80051b2:	61bb      	str	r3, [r7, #24]
    break;
 80051b4:	bf00      	nop
  }

  return sysclockfreq;
 80051b6:	69bb      	ldr	r3, [r7, #24]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3724      	adds	r7, #36	; 0x24
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	58024400 	.word	0x58024400
 80051c8:	03d09000 	.word	0x03d09000
 80051cc:	003d0900 	.word	0x003d0900
 80051d0:	007a1200 	.word	0x007a1200
 80051d4:	46000000 	.word	0x46000000
 80051d8:	4c742400 	.word	0x4c742400
 80051dc:	4a742400 	.word	0x4a742400
 80051e0:	4af42400 	.word	0x4af42400

080051e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80051ea:	f7ff fe89 	bl	8004f00 <HAL_RCC_GetSysClockFreq>
 80051ee:	4601      	mov	r1, r0
 80051f0:	4b10      	ldr	r3, [pc, #64]	; (8005234 <HAL_RCC_GetHCLKFreq+0x50>)
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	0a1b      	lsrs	r3, r3, #8
 80051f6:	f003 030f 	and.w	r3, r3, #15
 80051fa:	4a0f      	ldr	r2, [pc, #60]	; (8005238 <HAL_RCC_GetHCLKFreq+0x54>)
 80051fc:	5cd3      	ldrb	r3, [r2, r3]
 80051fe:	f003 031f 	and.w	r3, r3, #31
 8005202:	fa21 f303 	lsr.w	r3, r1, r3
 8005206:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005208:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <HAL_RCC_GetHCLKFreq+0x50>)
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	f003 030f 	and.w	r3, r3, #15
 8005210:	4a09      	ldr	r2, [pc, #36]	; (8005238 <HAL_RCC_GetHCLKFreq+0x54>)
 8005212:	5cd3      	ldrb	r3, [r2, r3]
 8005214:	f003 031f 	and.w	r3, r3, #31
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	fa22 f303 	lsr.w	r3, r2, r3
 800521e:	4a07      	ldr	r2, [pc, #28]	; (800523c <HAL_RCC_GetHCLKFreq+0x58>)
 8005220:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005222:	4a07      	ldr	r2, [pc, #28]	; (8005240 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005228:	4b04      	ldr	r3, [pc, #16]	; (800523c <HAL_RCC_GetHCLKFreq+0x58>)
 800522a:	681b      	ldr	r3, [r3, #0]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	58024400 	.word	0x58024400
 8005238:	0800cf5c 	.word	0x0800cf5c
 800523c:	24000008 	.word	0x24000008
 8005240:	24000004 	.word	0x24000004

08005244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005248:	f7ff ffcc 	bl	80051e4 <HAL_RCC_GetHCLKFreq>
 800524c:	4601      	mov	r1, r0
 800524e:	4b06      	ldr	r3, [pc, #24]	; (8005268 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	091b      	lsrs	r3, r3, #4
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	4a04      	ldr	r2, [pc, #16]	; (800526c <HAL_RCC_GetPCLK1Freq+0x28>)
 800525a:	5cd3      	ldrb	r3, [r2, r3]
 800525c:	f003 031f 	and.w	r3, r3, #31
 8005260:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005264:	4618      	mov	r0, r3
 8005266:	bd80      	pop	{r7, pc}
 8005268:	58024400 	.word	0x58024400
 800526c:	0800cf5c 	.word	0x0800cf5c

08005270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005274:	f7ff ffb6 	bl	80051e4 <HAL_RCC_GetHCLKFreq>
 8005278:	4601      	mov	r1, r0
 800527a:	4b06      	ldr	r3, [pc, #24]	; (8005294 <HAL_RCC_GetPCLK2Freq+0x24>)
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	0a1b      	lsrs	r3, r3, #8
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	4a04      	ldr	r2, [pc, #16]	; (8005298 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005286:	5cd3      	ldrb	r3, [r2, r3]
 8005288:	f003 031f 	and.w	r3, r3, #31
 800528c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005290:	4618      	mov	r0, r3
 8005292:	bd80      	pop	{r7, pc}
 8005294:	58024400 	.word	0x58024400
 8005298:	0800cf5c 	.word	0x0800cf5c

0800529c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052a4:	2300      	movs	r3, #0
 80052a6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052a8:	2300      	movs	r3, #0
 80052aa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d03d      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052c0:	d013      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80052c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052c6:	d802      	bhi.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x32>
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d007      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80052cc:	e01f      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x72>
 80052ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052d2:	d013      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x60>
 80052d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80052d8:	d01c      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80052da:	e018      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052dc:	4baf      	ldr	r3, [pc, #700]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e0:	4aae      	ldr	r2, [pc, #696]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80052e8:	e015      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	3304      	adds	r3, #4
 80052ee:	2102      	movs	r1, #2
 80052f0:	4618      	mov	r0, r3
 80052f2:	f001 f96f 	bl	80065d4 <RCCEx_PLL2_Config>
 80052f6:	4603      	mov	r3, r0
 80052f8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80052fa:	e00c      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3324      	adds	r3, #36	; 0x24
 8005300:	2102      	movs	r1, #2
 8005302:	4618      	mov	r0, r3
 8005304:	f001 fa18 	bl	8006738 <RCCEx_PLL3_Config>
 8005308:	4603      	mov	r3, r0
 800530a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800530c:	e003      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	75fb      	strb	r3, [r7, #23]
      break;
 8005312:	e000      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005316:	7dfb      	ldrb	r3, [r7, #23]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d109      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800531c:	4b9f      	ldr	r3, [pc, #636]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800531e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005320:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005328:	499c      	ldr	r1, [pc, #624]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800532a:	4313      	orrs	r3, r2
 800532c:	650b      	str	r3, [r1, #80]	; 0x50
 800532e:	e001      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005330:	7dfb      	ldrb	r3, [r7, #23]
 8005332:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533c:	2b00      	cmp	r3, #0
 800533e:	d03d      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005344:	2b04      	cmp	r3, #4
 8005346:	d826      	bhi.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8005348:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800534a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534e:	bf00      	nop
 8005350:	08005365 	.word	0x08005365
 8005354:	08005373 	.word	0x08005373
 8005358:	08005385 	.word	0x08005385
 800535c:	0800539d 	.word	0x0800539d
 8005360:	0800539d 	.word	0x0800539d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005364:	4b8d      	ldr	r3, [pc, #564]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005368:	4a8c      	ldr	r2, [pc, #560]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800536a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800536e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005370:	e015      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	3304      	adds	r3, #4
 8005376:	2100      	movs	r1, #0
 8005378:	4618      	mov	r0, r3
 800537a:	f001 f92b 	bl	80065d4 <RCCEx_PLL2_Config>
 800537e:	4603      	mov	r3, r0
 8005380:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005382:	e00c      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3324      	adds	r3, #36	; 0x24
 8005388:	2100      	movs	r1, #0
 800538a:	4618      	mov	r0, r3
 800538c:	f001 f9d4 	bl	8006738 <RCCEx_PLL3_Config>
 8005390:	4603      	mov	r3, r0
 8005392:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005394:	e003      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	75fb      	strb	r3, [r7, #23]
      break;
 800539a:	e000      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800539c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800539e:	7dfb      	ldrb	r3, [r7, #23]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d109      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053a4:	4b7d      	ldr	r3, [pc, #500]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80053a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053a8:	f023 0207 	bic.w	r2, r3, #7
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b0:	497a      	ldr	r1, [pc, #488]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	650b      	str	r3, [r1, #80]	; 0x50
 80053b6:	e001      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b8:	7dfb      	ldrb	r3, [r7, #23]
 80053ba:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d03e      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053cc:	2b80      	cmp	r3, #128	; 0x80
 80053ce:	d01c      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80053d0:	2b80      	cmp	r3, #128	; 0x80
 80053d2:	d804      	bhi.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x142>
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d008      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80053d8:	2b40      	cmp	r3, #64	; 0x40
 80053da:	d00d      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80053dc:	e01e      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x180>
 80053de:	2bc0      	cmp	r3, #192	; 0xc0
 80053e0:	d01f      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80053e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053e6:	d01e      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80053e8:	e018      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053ea:	4b6c      	ldr	r3, [pc, #432]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80053ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ee:	4a6b      	ldr	r2, [pc, #428]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80053f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80053f6:	e017      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	3304      	adds	r3, #4
 80053fc:	2100      	movs	r1, #0
 80053fe:	4618      	mov	r0, r3
 8005400:	f001 f8e8 	bl	80065d4 <RCCEx_PLL2_Config>
 8005404:	4603      	mov	r3, r0
 8005406:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005408:	e00e      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	3324      	adds	r3, #36	; 0x24
 800540e:	2100      	movs	r1, #0
 8005410:	4618      	mov	r0, r3
 8005412:	f001 f991 	bl	8006738 <RCCEx_PLL3_Config>
 8005416:	4603      	mov	r3, r0
 8005418:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800541a:	e005      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	75fb      	strb	r3, [r7, #23]
      break;
 8005420:	e002      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005422:	bf00      	nop
 8005424:	e000      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005426:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005428:	7dfb      	ldrb	r3, [r7, #23]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d109      	bne.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800542e:	4b5b      	ldr	r3, [pc, #364]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005432:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543a:	4958      	ldr	r1, [pc, #352]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800543c:	4313      	orrs	r3, r2
 800543e:	650b      	str	r3, [r1, #80]	; 0x50
 8005440:	e001      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005442:	7dfb      	ldrb	r3, [r7, #23]
 8005444:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800544e:	2b00      	cmp	r3, #0
 8005450:	d044      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005458:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800545c:	d01f      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800545e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005462:	d805      	bhi.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00a      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005468:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800546c:	d00e      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800546e:	e01f      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8005470:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005474:	d01f      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8005476:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800547a:	d01e      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800547c:	e018      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800547e:	4b47      	ldr	r3, [pc, #284]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005482:	4a46      	ldr	r2, [pc, #280]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005488:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800548a:	e017      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3304      	adds	r3, #4
 8005490:	2100      	movs	r1, #0
 8005492:	4618      	mov	r0, r3
 8005494:	f001 f89e 	bl	80065d4 <RCCEx_PLL2_Config>
 8005498:	4603      	mov	r3, r0
 800549a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800549c:	e00e      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	3324      	adds	r3, #36	; 0x24
 80054a2:	2100      	movs	r1, #0
 80054a4:	4618      	mov	r0, r3
 80054a6:	f001 f947 	bl	8006738 <RCCEx_PLL3_Config>
 80054aa:	4603      	mov	r3, r0
 80054ac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80054ae:	e005      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	75fb      	strb	r3, [r7, #23]
      break;
 80054b4:	e002      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80054b6:	bf00      	nop
 80054b8:	e000      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80054ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054bc:	7dfb      	ldrb	r3, [r7, #23]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10a      	bne.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80054c2:	4b36      	ldr	r3, [pc, #216]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80054c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80054d0:	4932      	ldr	r1, [pc, #200]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	658b      	str	r3, [r1, #88]	; 0x58
 80054d6:	e001      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d8:	7dfb      	ldrb	r3, [r7, #23]
 80054da:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d044      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80054ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054f2:	d01f      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80054f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054f8:	d805      	bhi.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80054fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005502:	d00e      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005504:	e01f      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8005506:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800550a:	d01f      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800550c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005510:	d01e      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005512:	e018      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005514:	4b21      	ldr	r3, [pc, #132]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005518:	4a20      	ldr	r2, [pc, #128]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800551a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800551e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005520:	e017      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	3304      	adds	r3, #4
 8005526:	2100      	movs	r1, #0
 8005528:	4618      	mov	r0, r3
 800552a:	f001 f853 	bl	80065d4 <RCCEx_PLL2_Config>
 800552e:	4603      	mov	r3, r0
 8005530:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005532:	e00e      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	3324      	adds	r3, #36	; 0x24
 8005538:	2100      	movs	r1, #0
 800553a:	4618      	mov	r0, r3
 800553c:	f001 f8fc 	bl	8006738 <RCCEx_PLL3_Config>
 8005540:	4603      	mov	r3, r0
 8005542:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005544:	e005      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	75fb      	strb	r3, [r7, #23]
      break;
 800554a:	e002      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800554c:	bf00      	nop
 800554e:	e000      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005550:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005552:	7dfb      	ldrb	r3, [r7, #23]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10a      	bne.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005558:	4b10      	ldr	r3, [pc, #64]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800555a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800555c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005566:	490d      	ldr	r1, [pc, #52]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005568:	4313      	orrs	r3, r2
 800556a:	658b      	str	r3, [r1, #88]	; 0x58
 800556c:	e001      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800556e:	7dfb      	ldrb	r3, [r7, #23]
 8005570:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d035      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005582:	2b10      	cmp	r3, #16
 8005584:	d00c      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8005586:	2b10      	cmp	r3, #16
 8005588:	d802      	bhi.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800558a:	2b00      	cmp	r3, #0
 800558c:	d01b      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800558e:	e017      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005590:	2b20      	cmp	r3, #32
 8005592:	d00c      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005594:	2b30      	cmp	r3, #48	; 0x30
 8005596:	d018      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005598:	e012      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800559a:	bf00      	nop
 800559c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055a0:	4baf      	ldr	r3, [pc, #700]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a4:	4aae      	ldr	r2, [pc, #696]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80055ac:	e00e      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3304      	adds	r3, #4
 80055b2:	2102      	movs	r1, #2
 80055b4:	4618      	mov	r0, r3
 80055b6:	f001 f80d 	bl	80065d4 <RCCEx_PLL2_Config>
 80055ba:	4603      	mov	r3, r0
 80055bc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80055be:	e005      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	75fb      	strb	r3, [r7, #23]
      break;
 80055c4:	e002      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80055c6:	bf00      	nop
 80055c8:	e000      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80055ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055cc:	7dfb      	ldrb	r3, [r7, #23]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d109      	bne.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80055d2:	4ba3      	ldr	r3, [pc, #652]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055de:	49a0      	ldr	r1, [pc, #640]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80055e4:	e001      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e6:	7dfb      	ldrb	r3, [r7, #23]
 80055e8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d042      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055fe:	d01f      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005604:	d805      	bhi.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800560a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800560e:	d00e      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005610:	e01f      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8005612:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005616:	d01f      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005618:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800561c:	d01e      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800561e:	e018      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005620:	4b8f      	ldr	r3, [pc, #572]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005624:	4a8e      	ldr	r2, [pc, #568]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800562a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800562c:	e017      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3304      	adds	r3, #4
 8005632:	2100      	movs	r1, #0
 8005634:	4618      	mov	r0, r3
 8005636:	f000 ffcd 	bl	80065d4 <RCCEx_PLL2_Config>
 800563a:	4603      	mov	r3, r0
 800563c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800563e:	e00e      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	3324      	adds	r3, #36	; 0x24
 8005644:	2100      	movs	r1, #0
 8005646:	4618      	mov	r0, r3
 8005648:	f001 f876 	bl	8006738 <RCCEx_PLL3_Config>
 800564c:	4603      	mov	r3, r0
 800564e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005650:	e005      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	75fb      	strb	r3, [r7, #23]
      break;
 8005656:	e002      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005658:	bf00      	nop
 800565a:	e000      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800565c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800565e:	7dfb      	ldrb	r3, [r7, #23]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d109      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005664:	4b7e      	ldr	r3, [pc, #504]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005668:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005670:	497b      	ldr	r1, [pc, #492]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005672:	4313      	orrs	r3, r2
 8005674:	650b      	str	r3, [r1, #80]	; 0x50
 8005676:	e001      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005678:	7dfb      	ldrb	r3, [r7, #23]
 800567a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d042      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800568c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005690:	d01b      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005692:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005696:	d805      	bhi.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005698:	2b00      	cmp	r3, #0
 800569a:	d022      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800569c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a0:	d00a      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80056a2:	e01b      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x440>
 80056a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056a8:	d01d      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80056aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056ae:	d01c      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80056b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056b4:	d01b      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x452>
 80056b6:	e011      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	3304      	adds	r3, #4
 80056bc:	2101      	movs	r1, #1
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 ff88 	bl	80065d4 <RCCEx_PLL2_Config>
 80056c4:	4603      	mov	r3, r0
 80056c6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80056c8:	e012      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	3324      	adds	r3, #36	; 0x24
 80056ce:	2101      	movs	r1, #1
 80056d0:	4618      	mov	r0, r3
 80056d2:	f001 f831 	bl	8006738 <RCCEx_PLL3_Config>
 80056d6:	4603      	mov	r3, r0
 80056d8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80056da:	e009      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	75fb      	strb	r3, [r7, #23]
      break;
 80056e0:	e006      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80056e2:	bf00      	nop
 80056e4:	e004      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80056e6:	bf00      	nop
 80056e8:	e002      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80056ea:	bf00      	nop
 80056ec:	e000      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80056ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056f0:	7dfb      	ldrb	r3, [r7, #23]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d109      	bne.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80056f6:	4b5a      	ldr	r3, [pc, #360]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80056f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056fa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005702:	4957      	ldr	r1, [pc, #348]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005704:	4313      	orrs	r3, r2
 8005706:	650b      	str	r3, [r1, #80]	; 0x50
 8005708:	e001      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570a:	7dfb      	ldrb	r3, [r7, #23]
 800570c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d044      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005724:	d01b      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800572a:	d805      	bhi.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800572c:	2b00      	cmp	r3, #0
 800572e:	d022      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005730:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005734:	d00a      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005736:	e01b      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800573c:	d01d      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800573e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005742:	d01c      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8005744:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005748:	d01b      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800574a:	e011      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3304      	adds	r3, #4
 8005750:	2101      	movs	r1, #1
 8005752:	4618      	mov	r0, r3
 8005754:	f000 ff3e 	bl	80065d4 <RCCEx_PLL2_Config>
 8005758:	4603      	mov	r3, r0
 800575a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800575c:	e012      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	3324      	adds	r3, #36	; 0x24
 8005762:	2101      	movs	r1, #1
 8005764:	4618      	mov	r0, r3
 8005766:	f000 ffe7 	bl	8006738 <RCCEx_PLL3_Config>
 800576a:	4603      	mov	r3, r0
 800576c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800576e:	e009      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	75fb      	strb	r3, [r7, #23]
      break;
 8005774:	e006      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005776:	bf00      	nop
 8005778:	e004      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800577a:	bf00      	nop
 800577c:	e002      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800577e:	bf00      	nop
 8005780:	e000      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005782:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005784:	7dfb      	ldrb	r3, [r7, #23]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10a      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800578a:	4b35      	ldr	r3, [pc, #212]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800578c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800578e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005798:	4931      	ldr	r1, [pc, #196]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800579a:	4313      	orrs	r3, r2
 800579c:	658b      	str	r3, [r1, #88]	; 0x58
 800579e:	e001      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a0:	7dfb      	ldrb	r3, [r7, #23]
 80057a2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d02d      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057b8:	d005      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80057ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057be:	d009      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d013      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x550>
 80057c4:	e00f      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057c6:	4b26      	ldr	r3, [pc, #152]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80057c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ca:	4a25      	ldr	r2, [pc, #148]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80057cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80057d2:	e00c      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	3304      	adds	r3, #4
 80057d8:	2101      	movs	r1, #1
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fefa 	bl	80065d4 <RCCEx_PLL2_Config>
 80057e0:	4603      	mov	r3, r0
 80057e2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80057e4:	e003      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	75fb      	strb	r3, [r7, #23]
      break;
 80057ea:	e000      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80057ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057ee:	7dfb      	ldrb	r3, [r7, #23]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d109      	bne.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80057f4:	4b1a      	ldr	r3, [pc, #104]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80057f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005800:	4917      	ldr	r1, [pc, #92]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005802:	4313      	orrs	r3, r2
 8005804:	650b      	str	r3, [r1, #80]	; 0x50
 8005806:	e001      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005808:	7dfb      	ldrb	r3, [r7, #23]
 800580a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d035      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800581c:	2b03      	cmp	r3, #3
 800581e:	d81b      	bhi.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005820:	a201      	add	r2, pc, #4	; (adr r2, 8005828 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8005822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005826:	bf00      	nop
 8005828:	08005865 	.word	0x08005865
 800582c:	08005839 	.word	0x08005839
 8005830:	08005847 	.word	0x08005847
 8005834:	08005865 	.word	0x08005865
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005838:	4b09      	ldr	r3, [pc, #36]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800583a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583c:	4a08      	ldr	r2, [pc, #32]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800583e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005842:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005844:	e00f      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	3304      	adds	r3, #4
 800584a:	2102      	movs	r1, #2
 800584c:	4618      	mov	r0, r3
 800584e:	f000 fec1 	bl	80065d4 <RCCEx_PLL2_Config>
 8005852:	4603      	mov	r3, r0
 8005854:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005856:	e006      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	75fb      	strb	r3, [r7, #23]
      break;
 800585c:	e003      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800585e:	bf00      	nop
 8005860:	58024400 	.word	0x58024400
      break;
 8005864:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005866:	7dfb      	ldrb	r3, [r7, #23]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d109      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800586c:	4bba      	ldr	r3, [pc, #744]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800586e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005870:	f023 0203 	bic.w	r2, r3, #3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005878:	49b7      	ldr	r1, [pc, #732]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800587a:	4313      	orrs	r3, r2
 800587c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800587e:	e001      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005880:	7dfb      	ldrb	r3, [r7, #23]
 8005882:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 8086 	beq.w	800599e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005892:	4bb2      	ldr	r3, [pc, #712]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4ab1      	ldr	r2, [pc, #708]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800589c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800589e:	f7fb fef3 	bl	8001688 <HAL_GetTick>
 80058a2:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058a4:	e009      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058a6:	f7fb feef 	bl	8001688 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b64      	cmp	r3, #100	; 0x64
 80058b2:	d902      	bls.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	75fb      	strb	r3, [r7, #23]
        break;
 80058b8:	e005      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058ba:	4ba8      	ldr	r3, [pc, #672]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d0ef      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80058c6:	7dfb      	ldrb	r3, [r7, #23]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d166      	bne.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80058cc:	4ba2      	ldr	r3, [pc, #648]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80058ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058d6:	4053      	eors	r3, r2
 80058d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d013      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058e0:	4b9d      	ldr	r3, [pc, #628]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80058e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058e8:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058ea:	4b9b      	ldr	r3, [pc, #620]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80058ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ee:	4a9a      	ldr	r2, [pc, #616]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80058f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058f4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058f6:	4b98      	ldr	r3, [pc, #608]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80058f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fa:	4a97      	ldr	r2, [pc, #604]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80058fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005900:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005902:	4a95      	ldr	r2, [pc, #596]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800590e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005912:	d115      	bne.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005914:	f7fb feb8 	bl	8001688 <HAL_GetTick>
 8005918:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800591a:	e00b      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800591c:	f7fb feb4 	bl	8001688 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	f241 3288 	movw	r2, #5000	; 0x1388
 800592a:	4293      	cmp	r3, r2
 800592c:	d902      	bls.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	75fb      	strb	r3, [r7, #23]
            break;
 8005932:	e005      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005934:	4b88      	ldr	r3, [pc, #544]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0ed      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005940:	7dfb      	ldrb	r3, [r7, #23]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d126      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800594c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005950:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005954:	d10d      	bne.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005956:	4b80      	ldr	r3, [pc, #512]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005964:	0919      	lsrs	r1, r3, #4
 8005966:	4b7e      	ldr	r3, [pc, #504]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005968:	400b      	ands	r3, r1
 800596a:	497b      	ldr	r1, [pc, #492]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800596c:	4313      	orrs	r3, r2
 800596e:	610b      	str	r3, [r1, #16]
 8005970:	e005      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005972:	4b79      	ldr	r3, [pc, #484]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	4a78      	ldr	r2, [pc, #480]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005978:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800597c:	6113      	str	r3, [r2, #16]
 800597e:	4b76      	ldr	r3, [pc, #472]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005980:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800598c:	4972      	ldr	r1, [pc, #456]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800598e:	4313      	orrs	r3, r2
 8005990:	670b      	str	r3, [r1, #112]	; 0x70
 8005992:	e004      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005994:	7dfb      	ldrb	r3, [r7, #23]
 8005996:	75bb      	strb	r3, [r7, #22]
 8005998:	e001      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599a:	7dfb      	ldrb	r3, [r7, #23]
 800599c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d07d      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059ae:	2b28      	cmp	r3, #40	; 0x28
 80059b0:	d866      	bhi.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80059b2:	a201      	add	r2, pc, #4	; (adr r2, 80059b8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80059b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b8:	08005a87 	.word	0x08005a87
 80059bc:	08005a81 	.word	0x08005a81
 80059c0:	08005a81 	.word	0x08005a81
 80059c4:	08005a81 	.word	0x08005a81
 80059c8:	08005a81 	.word	0x08005a81
 80059cc:	08005a81 	.word	0x08005a81
 80059d0:	08005a81 	.word	0x08005a81
 80059d4:	08005a81 	.word	0x08005a81
 80059d8:	08005a5d 	.word	0x08005a5d
 80059dc:	08005a81 	.word	0x08005a81
 80059e0:	08005a81 	.word	0x08005a81
 80059e4:	08005a81 	.word	0x08005a81
 80059e8:	08005a81 	.word	0x08005a81
 80059ec:	08005a81 	.word	0x08005a81
 80059f0:	08005a81 	.word	0x08005a81
 80059f4:	08005a81 	.word	0x08005a81
 80059f8:	08005a6f 	.word	0x08005a6f
 80059fc:	08005a81 	.word	0x08005a81
 8005a00:	08005a81 	.word	0x08005a81
 8005a04:	08005a81 	.word	0x08005a81
 8005a08:	08005a81 	.word	0x08005a81
 8005a0c:	08005a81 	.word	0x08005a81
 8005a10:	08005a81 	.word	0x08005a81
 8005a14:	08005a81 	.word	0x08005a81
 8005a18:	08005a87 	.word	0x08005a87
 8005a1c:	08005a81 	.word	0x08005a81
 8005a20:	08005a81 	.word	0x08005a81
 8005a24:	08005a81 	.word	0x08005a81
 8005a28:	08005a81 	.word	0x08005a81
 8005a2c:	08005a81 	.word	0x08005a81
 8005a30:	08005a81 	.word	0x08005a81
 8005a34:	08005a81 	.word	0x08005a81
 8005a38:	08005a87 	.word	0x08005a87
 8005a3c:	08005a81 	.word	0x08005a81
 8005a40:	08005a81 	.word	0x08005a81
 8005a44:	08005a81 	.word	0x08005a81
 8005a48:	08005a81 	.word	0x08005a81
 8005a4c:	08005a81 	.word	0x08005a81
 8005a50:	08005a81 	.word	0x08005a81
 8005a54:	08005a81 	.word	0x08005a81
 8005a58:	08005a87 	.word	0x08005a87
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	3304      	adds	r3, #4
 8005a60:	2101      	movs	r1, #1
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fdb6 	bl	80065d4 <RCCEx_PLL2_Config>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005a6c:	e00c      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	3324      	adds	r3, #36	; 0x24
 8005a72:	2101      	movs	r1, #1
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 fe5f 	bl	8006738 <RCCEx_PLL3_Config>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005a7e:	e003      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	75fb      	strb	r3, [r7, #23]
      break;
 8005a84:	e000      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8005a86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a88:	7dfb      	ldrb	r3, [r7, #23]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d109      	bne.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005a8e:	4b32      	ldr	r3, [pc, #200]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a92:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a9a:	492f      	ldr	r1, [pc, #188]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	654b      	str	r3, [r1, #84]	; 0x54
 8005aa0:	e001      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa2:	7dfb      	ldrb	r3, [r7, #23]
 8005aa4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d037      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ab6:	2b05      	cmp	r3, #5
 8005ab8:	d820      	bhi.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x860>
 8005aba:	a201      	add	r2, pc, #4	; (adr r2, 8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac0:	08005b03 	.word	0x08005b03
 8005ac4:	08005ad9 	.word	0x08005ad9
 8005ac8:	08005aeb 	.word	0x08005aeb
 8005acc:	08005b03 	.word	0x08005b03
 8005ad0:	08005b03 	.word	0x08005b03
 8005ad4:	08005b03 	.word	0x08005b03
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3304      	adds	r3, #4
 8005adc:	2101      	movs	r1, #1
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 fd78 	bl	80065d4 <RCCEx_PLL2_Config>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005ae8:	e00c      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	3324      	adds	r3, #36	; 0x24
 8005aee:	2101      	movs	r1, #1
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 fe21 	bl	8006738 <RCCEx_PLL3_Config>
 8005af6:	4603      	mov	r3, r0
 8005af8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005afa:	e003      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	75fb      	strb	r3, [r7, #23]
      break;
 8005b00:	e000      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8005b02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b04:	7dfb      	ldrb	r3, [r7, #23]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d109      	bne.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005b0a:	4b13      	ldr	r3, [pc, #76]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0e:	f023 0207 	bic.w	r2, r3, #7
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b16:	4910      	ldr	r1, [pc, #64]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	654b      	str	r3, [r1, #84]	; 0x54
 8005b1c:	e001      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b1e:	7dfb      	ldrb	r3, [r7, #23]
 8005b20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0304 	and.w	r3, r3, #4
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d040      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b34:	2b05      	cmp	r3, #5
 8005b36:	d827      	bhi.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8005b38:	a201      	add	r2, pc, #4	; (adr r2, 8005b40 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8005b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3e:	bf00      	nop
 8005b40:	08005b8f 	.word	0x08005b8f
 8005b44:	08005b65 	.word	0x08005b65
 8005b48:	08005b77 	.word	0x08005b77
 8005b4c:	08005b8f 	.word	0x08005b8f
 8005b50:	08005b8f 	.word	0x08005b8f
 8005b54:	08005b8f 	.word	0x08005b8f
 8005b58:	58024400 	.word	0x58024400
 8005b5c:	58024800 	.word	0x58024800
 8005b60:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3304      	adds	r3, #4
 8005b68:	2101      	movs	r1, #1
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 fd32 	bl	80065d4 <RCCEx_PLL2_Config>
 8005b70:	4603      	mov	r3, r0
 8005b72:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005b74:	e00c      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	3324      	adds	r3, #36	; 0x24
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 fddb 	bl	8006738 <RCCEx_PLL3_Config>
 8005b82:	4603      	mov	r3, r0
 8005b84:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005b86:	e003      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b8c:	e000      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8005b8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b90:	7dfb      	ldrb	r3, [r7, #23]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10a      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b96:	4bb2      	ldr	r3, [pc, #712]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b9a:	f023 0207 	bic.w	r2, r3, #7
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba4:	49ae      	ldr	r1, [pc, #696]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	658b      	str	r3, [r1, #88]	; 0x58
 8005baa:	e001      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bac:	7dfb      	ldrb	r3, [r7, #23]
 8005bae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0320 	and.w	r3, r3, #32
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d044      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bc6:	d01b      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8005bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bcc:	d805      	bhi.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d022      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8005bd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bd6:	d00a      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005bd8:	e01b      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bde:	d01d      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8005be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005be4:	d01c      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005be6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005bea:	d01b      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005bec:	e011      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	3304      	adds	r3, #4
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 fced 	bl	80065d4 <RCCEx_PLL2_Config>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005bfe:	e012      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	3324      	adds	r3, #36	; 0x24
 8005c04:	2102      	movs	r1, #2
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 fd96 	bl	8006738 <RCCEx_PLL3_Config>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005c10:	e009      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	75fb      	strb	r3, [r7, #23]
      break;
 8005c16:	e006      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005c18:	bf00      	nop
 8005c1a:	e004      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005c1c:	bf00      	nop
 8005c1e:	e002      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005c20:	bf00      	nop
 8005c22:	e000      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005c24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c26:	7dfb      	ldrb	r3, [r7, #23]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10a      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c2c:	4b8c      	ldr	r3, [pc, #560]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c30:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c3a:	4989      	ldr	r1, [pc, #548]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	654b      	str	r3, [r1, #84]	; 0x54
 8005c40:	e001      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c42:	7dfb      	ldrb	r3, [r7, #23]
 8005c44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d044      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c5c:	d01b      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8005c5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c62:	d805      	bhi.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d022      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c6c:	d00a      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8005c6e:	e01b      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c74:	d01d      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005c76:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005c7a:	d01c      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8005c7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c80:	d01b      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8005c82:	e011      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	3304      	adds	r3, #4
 8005c88:	2100      	movs	r1, #0
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 fca2 	bl	80065d4 <RCCEx_PLL2_Config>
 8005c90:	4603      	mov	r3, r0
 8005c92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005c94:	e012      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	3324      	adds	r3, #36	; 0x24
 8005c9a:	2102      	movs	r1, #2
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 fd4b 	bl	8006738 <RCCEx_PLL3_Config>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005ca6:	e009      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	75fb      	strb	r3, [r7, #23]
      break;
 8005cac:	e006      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005cae:	bf00      	nop
 8005cb0:	e004      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005cb2:	bf00      	nop
 8005cb4:	e002      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005cb6:	bf00      	nop
 8005cb8:	e000      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005cba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cbc:	7dfb      	ldrb	r3, [r7, #23]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10a      	bne.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005cc2:	4b67      	ldr	r3, [pc, #412]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cd0:	4963      	ldr	r1, [pc, #396]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	658b      	str	r3, [r1, #88]	; 0x58
 8005cd6:	e001      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd8:	7dfb      	ldrb	r3, [r7, #23]
 8005cda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d044      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cf2:	d01b      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8005cf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cf8:	d805      	bhi.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d022      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d02:	d00a      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005d04:	e01b      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8005d06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d0a:	d01d      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005d0c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005d10:	d01c      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8005d12:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005d16:	d01b      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005d18:	e011      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	2100      	movs	r1, #0
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 fc57 	bl	80065d4 <RCCEx_PLL2_Config>
 8005d26:	4603      	mov	r3, r0
 8005d28:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005d2a:	e012      	b.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	3324      	adds	r3, #36	; 0x24
 8005d30:	2102      	movs	r1, #2
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 fd00 	bl	8006738 <RCCEx_PLL3_Config>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005d3c:	e009      	b.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	75fb      	strb	r3, [r7, #23]
      break;
 8005d42:	e006      	b.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005d44:	bf00      	nop
 8005d46:	e004      	b.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005d48:	bf00      	nop
 8005d4a:	e002      	b.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005d4c:	bf00      	nop
 8005d4e:	e000      	b.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005d50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d52:	7dfb      	ldrb	r3, [r7, #23]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10a      	bne.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005d58:	4b41      	ldr	r3, [pc, #260]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d66:	493e      	ldr	r1, [pc, #248]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	658b      	str	r3, [r1, #88]	; 0x58
 8005d6c:	e001      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d6e:	7dfb      	ldrb	r3, [r7, #23]
 8005d70:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0308 	and.w	r3, r3, #8
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d01a      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d88:	d10a      	bne.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	3324      	adds	r3, #36	; 0x24
 8005d8e:	2102      	movs	r1, #2
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 fcd1 	bl	8006738 <RCCEx_PLL3_Config>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005da0:	4b2f      	ldr	r3, [pc, #188]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dae:	492c      	ldr	r1, [pc, #176]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0310 	and.w	r3, r3, #16
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d01a      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dca:	d10a      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	3324      	adds	r3, #36	; 0x24
 8005dd0:	2102      	movs	r1, #2
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 fcb0 	bl	8006738 <RCCEx_PLL3_Config>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005de2:	4b1f      	ldr	r3, [pc, #124]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005df0:	491b      	ldr	r1, [pc, #108]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d032      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e0c:	d00d      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8005e0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e12:	d016      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d111      	bne.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 fbd8 	bl	80065d4 <RCCEx_PLL2_Config>
 8005e24:	4603      	mov	r3, r0
 8005e26:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005e28:	e00c      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	3324      	adds	r3, #36	; 0x24
 8005e2e:	2102      	movs	r1, #2
 8005e30:	4618      	mov	r0, r3
 8005e32:	f000 fc81 	bl	8006738 <RCCEx_PLL3_Config>
 8005e36:	4603      	mov	r3, r0
 8005e38:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005e3a:	e003      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e40:	e000      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8005e42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e44:	7dfb      	ldrb	r3, [r7, #23]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10c      	bne.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e4a:	4b05      	ldr	r3, [pc, #20]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e58:	4901      	ldr	r1, [pc, #4]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	658b      	str	r3, [r1, #88]	; 0x58
 8005e5e:	e003      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005e60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e64:	7dfb      	ldrb	r3, [r7, #23]
 8005e66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d02f      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e7e:	d00c      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005e80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e84:	d015      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8005e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e8a:	d10f      	bne.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e8c:	4b79      	ldr	r3, [pc, #484]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e90:	4a78      	ldr	r2, [pc, #480]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005e98:	e00c      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	3324      	adds	r3, #36	; 0x24
 8005e9e:	2101      	movs	r1, #1
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f000 fc49 	bl	8006738 <RCCEx_PLL3_Config>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005eaa:	e003      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	75fb      	strb	r3, [r7, #23]
      break;
 8005eb0:	e000      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8005eb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005eb4:	7dfb      	ldrb	r3, [r7, #23]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10a      	bne.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005eba:	4b6e      	ldr	r3, [pc, #440]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ebe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ec8:	496a      	ldr	r1, [pc, #424]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	654b      	str	r3, [r1, #84]	; 0x54
 8005ece:	e001      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed0:	7dfb      	ldrb	r3, [r7, #23]
 8005ed2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d029      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d003      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eec:	d007      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8005eee:	e00f      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ef0:	4b60      	ldr	r3, [pc, #384]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef4:	4a5f      	ldr	r2, [pc, #380]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005efa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005efc:	e00b      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	3304      	adds	r3, #4
 8005f02:	2102      	movs	r1, #2
 8005f04:	4618      	mov	r0, r3
 8005f06:	f000 fb65 	bl	80065d4 <RCCEx_PLL2_Config>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005f0e:	e002      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	75fb      	strb	r3, [r7, #23]
      break;
 8005f14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f16:	7dfb      	ldrb	r3, [r7, #23]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d109      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005f1c:	4b55      	ldr	r3, [pc, #340]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f28:	4952      	ldr	r1, [pc, #328]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005f2e:	e001      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f30:	7dfb      	ldrb	r3, [r7, #23]
 8005f32:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00a      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	3324      	adds	r3, #36	; 0x24
 8005f44:	2102      	movs	r1, #2
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 fbf6 	bl	8006738 <RCCEx_PLL3_Config>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d02f      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f6a:	d00c      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f70:	d802      	bhi.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d011      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8005f76:	e00d      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f7c:	d00f      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8005f7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f82:	d00e      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005f84:	e006      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f86:	4b3b      	ldr	r3, [pc, #236]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8a:	4a3a      	ldr	r2, [pc, #232]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005f92:	e007      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	75fb      	strb	r3, [r7, #23]
      break;
 8005f98:	e004      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005f9a:	bf00      	nop
 8005f9c:	e002      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005f9e:	bf00      	nop
 8005fa0:	e000      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005fa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fa4:	7dfb      	ldrb	r3, [r7, #23]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d109      	bne.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005faa:	4b32      	ldr	r3, [pc, #200]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fb6:	492f      	ldr	r1, [pc, #188]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	654b      	str	r3, [r1, #84]	; 0x54
 8005fbc:	e001      	b.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fbe:	7dfb      	ldrb	r3, [r7, #23]
 8005fc0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d008      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005fce:	4b29      	ldr	r3, [pc, #164]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fda:	4926      	ldr	r1, [pc, #152]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d009      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005fec:	4b21      	ldr	r3, [pc, #132]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ffa:	491e      	ldr	r1, [pc, #120]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d008      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800600c:	4b19      	ldr	r3, [pc, #100]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800600e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006010:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006018:	4916      	ldr	r1, [pc, #88]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800601a:	4313      	orrs	r3, r2
 800601c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00d      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800602a:	4b12      	ldr	r3, [pc, #72]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	4a11      	ldr	r2, [pc, #68]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006030:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006034:	6113      	str	r3, [r2, #16]
 8006036:	4b0f      	ldr	r3, [pc, #60]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006038:	691a      	ldr	r2, [r3, #16]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006040:	490c      	ldr	r1, [pc, #48]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006042:	4313      	orrs	r3, r2
 8006044:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	da08      	bge.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800604e:	4b09      	ldr	r3, [pc, #36]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006052:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800605a:	4906      	ldr	r1, [pc, #24]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800605c:	4313      	orrs	r3, r2
 800605e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8006060:	7dbb      	ldrb	r3, [r7, #22]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	e000      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
}
 800606c:	4618      	mov	r0, r3
 800606e:	3718      	adds	r7, #24
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	58024400 	.word	0x58024400

08006078 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800607c:	f7ff f8b2 	bl	80051e4 <HAL_RCC_GetHCLKFreq>
 8006080:	4601      	mov	r1, r0
 8006082:	4b06      	ldr	r3, [pc, #24]	; (800609c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	091b      	lsrs	r3, r3, #4
 8006088:	f003 0307 	and.w	r3, r3, #7
 800608c:	4a04      	ldr	r2, [pc, #16]	; (80060a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800608e:	5cd3      	ldrb	r3, [r2, r3]
 8006090:	f003 031f 	and.w	r3, r3, #31
 8006094:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006098:	4618      	mov	r0, r3
 800609a:	bd80      	pop	{r7, pc}
 800609c:	58024400 	.word	0x58024400
 80060a0:	0800cf5c 	.word	0x0800cf5c

080060a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b089      	sub	sp, #36	; 0x24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80060ac:	4b9d      	ldr	r3, [pc, #628]	; (8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80060ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b0:	f003 0303 	and.w	r3, r3, #3
 80060b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80060b6:	4b9b      	ldr	r3, [pc, #620]	; (8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80060b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ba:	0b1b      	lsrs	r3, r3, #12
 80060bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80060c2:	4b98      	ldr	r3, [pc, #608]	; (8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80060c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c6:	091b      	lsrs	r3, r3, #4
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80060ce:	4b95      	ldr	r3, [pc, #596]	; (8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80060d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d2:	08db      	lsrs	r3, r3, #3
 80060d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	fb02 f303 	mul.w	r3, r2, r3
 80060de:	ee07 3a90 	vmov	s15, r3
 80060e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 810a 	beq.w	8006306 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d05a      	beq.n	80061ae <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d302      	bcc.n	8006102 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d078      	beq.n	80061f2 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8006100:	e099      	b.n	8006236 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006102:	4b88      	ldr	r3, [pc, #544]	; (8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0320 	and.w	r3, r3, #32
 800610a:	2b00      	cmp	r3, #0
 800610c:	d02d      	beq.n	800616a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800610e:	4b85      	ldr	r3, [pc, #532]	; (8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	08db      	lsrs	r3, r3, #3
 8006114:	f003 0303 	and.w	r3, r3, #3
 8006118:	4a83      	ldr	r2, [pc, #524]	; (8006328 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800611a:	fa22 f303 	lsr.w	r3, r2, r3
 800611e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	ee07 3a90 	vmov	s15, r3
 8006126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	ee07 3a90 	vmov	s15, r3
 8006130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006134:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006138:	4b7a      	ldr	r3, [pc, #488]	; (8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800613a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006140:	ee07 3a90 	vmov	s15, r3
 8006144:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006148:	ed97 6a03 	vldr	s12, [r7, #12]
 800614c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800632c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006150:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006154:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006158:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800615c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006164:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006168:	e087      	b.n	800627a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	ee07 3a90 	vmov	s15, r3
 8006170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006174:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8006178:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800617c:	4b69      	ldr	r3, [pc, #420]	; (8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800617e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006184:	ee07 3a90 	vmov	s15, r3
 8006188:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800618c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006190:	eddf 5a66 	vldr	s11, [pc, #408]	; 800632c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006194:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006198:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800619c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061ac:	e065      	b.n	800627a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	ee07 3a90 	vmov	s15, r3
 80061b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80061bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061c0:	4b58      	ldr	r3, [pc, #352]	; (8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80061c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c8:	ee07 3a90 	vmov	s15, r3
 80061cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80061d4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800632c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80061d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061f0:	e043      	b.n	800627a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	ee07 3a90 	vmov	s15, r3
 80061f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061fc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8006200:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006204:	4b47      	ldr	r3, [pc, #284]	; (8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800620c:	ee07 3a90 	vmov	s15, r3
 8006210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006214:	ed97 6a03 	vldr	s12, [r7, #12]
 8006218:	eddf 5a44 	vldr	s11, [pc, #272]	; 800632c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800621c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006220:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006224:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006228:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800622c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006230:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006234:	e021      	b.n	800627a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	ee07 3a90 	vmov	s15, r3
 800623c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006240:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006244:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006248:	4b36      	ldr	r3, [pc, #216]	; (8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800624a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006250:	ee07 3a90 	vmov	s15, r3
 8006254:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006258:	ed97 6a03 	vldr	s12, [r7, #12]
 800625c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800632c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006260:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006264:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006268:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800626c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006274:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006278:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800627a:	4b2a      	ldr	r3, [pc, #168]	; (8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800627c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627e:	0a5b      	lsrs	r3, r3, #9
 8006280:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006284:	ee07 3a90 	vmov	s15, r3
 8006288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800628c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006290:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006294:	edd7 6a07 	vldr	s13, [r7, #28]
 8006298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800629c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062a0:	ee17 2a90 	vmov	r2, s15
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80062a8:	4b1e      	ldr	r3, [pc, #120]	; (8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80062aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ac:	0c1b      	lsrs	r3, r3, #16
 80062ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062b2:	ee07 3a90 	vmov	s15, r3
 80062b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80062c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062ce:	ee17 2a90 	vmov	r2, s15
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80062d6:	4b13      	ldr	r3, [pc, #76]	; (8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80062d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062da:	0e1b      	lsrs	r3, r3, #24
 80062dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062e0:	ee07 3a90 	vmov	s15, r3
 80062e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80062f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062fc:	ee17 2a90 	vmov	r2, s15
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006304:	e008      	b.n	8006318 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	609a      	str	r2, [r3, #8]
}
 8006318:	bf00      	nop
 800631a:	3724      	adds	r7, #36	; 0x24
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	58024400 	.word	0x58024400
 8006328:	03d09000 	.word	0x03d09000
 800632c:	46000000 	.word	0x46000000
 8006330:	4c742400 	.word	0x4c742400
 8006334:	4a742400 	.word	0x4a742400
 8006338:	4af42400 	.word	0x4af42400

0800633c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800633c:	b480      	push	{r7}
 800633e:	b089      	sub	sp, #36	; 0x24
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006344:	4b9d      	ldr	r3, [pc, #628]	; (80065bc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006348:	f003 0303 	and.w	r3, r3, #3
 800634c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800634e:	4b9b      	ldr	r3, [pc, #620]	; (80065bc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006352:	0d1b      	lsrs	r3, r3, #20
 8006354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006358:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800635a:	4b98      	ldr	r3, [pc, #608]	; (80065bc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800635c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635e:	0a1b      	lsrs	r3, r3, #8
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006366:	4b95      	ldr	r3, [pc, #596]	; (80065bc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800636a:	08db      	lsrs	r3, r3, #3
 800636c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	fb02 f303 	mul.w	r3, r2, r3
 8006376:	ee07 3a90 	vmov	s15, r3
 800637a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800637e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 810a 	beq.w	800659e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d05a      	beq.n	8006446 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8006390:	2b01      	cmp	r3, #1
 8006392:	d302      	bcc.n	800639a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8006394:	2b02      	cmp	r3, #2
 8006396:	d078      	beq.n	800648a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8006398:	e099      	b.n	80064ce <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800639a:	4b88      	ldr	r3, [pc, #544]	; (80065bc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0320 	and.w	r3, r3, #32
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d02d      	beq.n	8006402 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80063a6:	4b85      	ldr	r3, [pc, #532]	; (80065bc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	08db      	lsrs	r3, r3, #3
 80063ac:	f003 0303 	and.w	r3, r3, #3
 80063b0:	4a83      	ldr	r2, [pc, #524]	; (80065c0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80063b2:	fa22 f303 	lsr.w	r3, r2, r3
 80063b6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	ee07 3a90 	vmov	s15, r3
 80063be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	ee07 3a90 	vmov	s15, r3
 80063c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063d0:	4b7a      	ldr	r3, [pc, #488]	; (80065bc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80063d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063d8:	ee07 3a90 	vmov	s15, r3
 80063dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80063e4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80065c4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80063e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063fc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006400:	e087      	b.n	8006512 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	ee07 3a90 	vmov	s15, r3
 8006408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800640c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80065c8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8006410:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006414:	4b69      	ldr	r3, [pc, #420]	; (80065bc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800641c:	ee07 3a90 	vmov	s15, r3
 8006420:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006424:	ed97 6a03 	vldr	s12, [r7, #12]
 8006428:	eddf 5a66 	vldr	s11, [pc, #408]	; 80065c4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800642c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006430:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006434:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006438:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800643c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006440:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006444:	e065      	b.n	8006512 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	ee07 3a90 	vmov	s15, r3
 800644c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006450:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80065cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006454:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006458:	4b58      	ldr	r3, [pc, #352]	; (80065bc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800645a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006460:	ee07 3a90 	vmov	s15, r3
 8006464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006468:	ed97 6a03 	vldr	s12, [r7, #12]
 800646c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80065c4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006470:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006474:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006478:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800647c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006484:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006488:	e043      	b.n	8006512 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	ee07 3a90 	vmov	s15, r3
 8006490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006494:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80065d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8006498:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800649c:	4b47      	ldr	r3, [pc, #284]	; (80065bc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800649e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064a4:	ee07 3a90 	vmov	s15, r3
 80064a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80064b0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80065c4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80064b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064cc:	e021      	b.n	8006512 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	ee07 3a90 	vmov	s15, r3
 80064d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064d8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80065cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80064dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064e0:	4b36      	ldr	r3, [pc, #216]	; (80065bc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80064e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064e8:	ee07 3a90 	vmov	s15, r3
 80064ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80064f4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80065c4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80064f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006500:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006504:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800650c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006510:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006512:	4b2a      	ldr	r3, [pc, #168]	; (80065bc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006516:	0a5b      	lsrs	r3, r3, #9
 8006518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800651c:	ee07 3a90 	vmov	s15, r3
 8006520:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006524:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006528:	ee37 7a87 	vadd.f32	s14, s15, s14
 800652c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006530:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006534:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006538:	ee17 2a90 	vmov	r2, s15
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006540:	4b1e      	ldr	r3, [pc, #120]	; (80065bc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006544:	0c1b      	lsrs	r3, r3, #16
 8006546:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800654a:	ee07 3a90 	vmov	s15, r3
 800654e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006552:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006556:	ee37 7a87 	vadd.f32	s14, s15, s14
 800655a:	edd7 6a07 	vldr	s13, [r7, #28]
 800655e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006562:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006566:	ee17 2a90 	vmov	r2, s15
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800656e:	4b13      	ldr	r3, [pc, #76]	; (80065bc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006572:	0e1b      	lsrs	r3, r3, #24
 8006574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006578:	ee07 3a90 	vmov	s15, r3
 800657c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006580:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006584:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006588:	edd7 6a07 	vldr	s13, [r7, #28]
 800658c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006590:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006594:	ee17 2a90 	vmov	r2, s15
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800659c:	e008      	b.n	80065b0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	609a      	str	r2, [r3, #8]
}
 80065b0:	bf00      	nop
 80065b2:	3724      	adds	r7, #36	; 0x24
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	58024400 	.word	0x58024400
 80065c0:	03d09000 	.word	0x03d09000
 80065c4:	46000000 	.word	0x46000000
 80065c8:	4c742400 	.word	0x4c742400
 80065cc:	4a742400 	.word	0x4a742400
 80065d0:	4af42400 	.word	0x4af42400

080065d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80065e2:	4b53      	ldr	r3, [pc, #332]	; (8006730 <RCCEx_PLL2_Config+0x15c>)
 80065e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e6:	f003 0303 	and.w	r3, r3, #3
 80065ea:	2b03      	cmp	r3, #3
 80065ec:	d101      	bne.n	80065f2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e099      	b.n	8006726 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80065f2:	4b4f      	ldr	r3, [pc, #316]	; (8006730 <RCCEx_PLL2_Config+0x15c>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a4e      	ldr	r2, [pc, #312]	; (8006730 <RCCEx_PLL2_Config+0x15c>)
 80065f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80065fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065fe:	f7fb f843 	bl	8001688 <HAL_GetTick>
 8006602:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006604:	e008      	b.n	8006618 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006606:	f7fb f83f 	bl	8001688 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2b02      	cmp	r3, #2
 8006612:	d901      	bls.n	8006618 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e086      	b.n	8006726 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006618:	4b45      	ldr	r3, [pc, #276]	; (8006730 <RCCEx_PLL2_Config+0x15c>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1f0      	bne.n	8006606 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006624:	4b42      	ldr	r3, [pc, #264]	; (8006730 <RCCEx_PLL2_Config+0x15c>)
 8006626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006628:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	031b      	lsls	r3, r3, #12
 8006632:	493f      	ldr	r1, [pc, #252]	; (8006730 <RCCEx_PLL2_Config+0x15c>)
 8006634:	4313      	orrs	r3, r2
 8006636:	628b      	str	r3, [r1, #40]	; 0x28
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	3b01      	subs	r3, #1
 800663e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	3b01      	subs	r3, #1
 8006648:	025b      	lsls	r3, r3, #9
 800664a:	b29b      	uxth	r3, r3
 800664c:	431a      	orrs	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	3b01      	subs	r3, #1
 8006654:	041b      	lsls	r3, r3, #16
 8006656:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800665a:	431a      	orrs	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	3b01      	subs	r3, #1
 8006662:	061b      	lsls	r3, r3, #24
 8006664:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006668:	4931      	ldr	r1, [pc, #196]	; (8006730 <RCCEx_PLL2_Config+0x15c>)
 800666a:	4313      	orrs	r3, r2
 800666c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800666e:	4b30      	ldr	r3, [pc, #192]	; (8006730 <RCCEx_PLL2_Config+0x15c>)
 8006670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006672:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	492d      	ldr	r1, [pc, #180]	; (8006730 <RCCEx_PLL2_Config+0x15c>)
 800667c:	4313      	orrs	r3, r2
 800667e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006680:	4b2b      	ldr	r3, [pc, #172]	; (8006730 <RCCEx_PLL2_Config+0x15c>)
 8006682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006684:	f023 0220 	bic.w	r2, r3, #32
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	4928      	ldr	r1, [pc, #160]	; (8006730 <RCCEx_PLL2_Config+0x15c>)
 800668e:	4313      	orrs	r3, r2
 8006690:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006692:	4b27      	ldr	r3, [pc, #156]	; (8006730 <RCCEx_PLL2_Config+0x15c>)
 8006694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006696:	4a26      	ldr	r2, [pc, #152]	; (8006730 <RCCEx_PLL2_Config+0x15c>)
 8006698:	f023 0310 	bic.w	r3, r3, #16
 800669c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800669e:	4b24      	ldr	r3, [pc, #144]	; (8006730 <RCCEx_PLL2_Config+0x15c>)
 80066a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066a2:	4b24      	ldr	r3, [pc, #144]	; (8006734 <RCCEx_PLL2_Config+0x160>)
 80066a4:	4013      	ands	r3, r2
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	69d2      	ldr	r2, [r2, #28]
 80066aa:	00d2      	lsls	r2, r2, #3
 80066ac:	4920      	ldr	r1, [pc, #128]	; (8006730 <RCCEx_PLL2_Config+0x15c>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80066b2:	4b1f      	ldr	r3, [pc, #124]	; (8006730 <RCCEx_PLL2_Config+0x15c>)
 80066b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b6:	4a1e      	ldr	r2, [pc, #120]	; (8006730 <RCCEx_PLL2_Config+0x15c>)
 80066b8:	f043 0310 	orr.w	r3, r3, #16
 80066bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d106      	bne.n	80066d2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80066c4:	4b1a      	ldr	r3, [pc, #104]	; (8006730 <RCCEx_PLL2_Config+0x15c>)
 80066c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c8:	4a19      	ldr	r2, [pc, #100]	; (8006730 <RCCEx_PLL2_Config+0x15c>)
 80066ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80066d0:	e00f      	b.n	80066f2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d106      	bne.n	80066e6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80066d8:	4b15      	ldr	r3, [pc, #84]	; (8006730 <RCCEx_PLL2_Config+0x15c>)
 80066da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066dc:	4a14      	ldr	r2, [pc, #80]	; (8006730 <RCCEx_PLL2_Config+0x15c>)
 80066de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80066e4:	e005      	b.n	80066f2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80066e6:	4b12      	ldr	r3, [pc, #72]	; (8006730 <RCCEx_PLL2_Config+0x15c>)
 80066e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ea:	4a11      	ldr	r2, [pc, #68]	; (8006730 <RCCEx_PLL2_Config+0x15c>)
 80066ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80066f2:	4b0f      	ldr	r3, [pc, #60]	; (8006730 <RCCEx_PLL2_Config+0x15c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a0e      	ldr	r2, [pc, #56]	; (8006730 <RCCEx_PLL2_Config+0x15c>)
 80066f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066fe:	f7fa ffc3 	bl	8001688 <HAL_GetTick>
 8006702:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006704:	e008      	b.n	8006718 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006706:	f7fa ffbf 	bl	8001688 <HAL_GetTick>
 800670a:	4602      	mov	r2, r0
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	2b02      	cmp	r3, #2
 8006712:	d901      	bls.n	8006718 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e006      	b.n	8006726 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006718:	4b05      	ldr	r3, [pc, #20]	; (8006730 <RCCEx_PLL2_Config+0x15c>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006720:	2b00      	cmp	r3, #0
 8006722:	d0f0      	beq.n	8006706 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006724:	7bfb      	ldrb	r3, [r7, #15]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	58024400 	.word	0x58024400
 8006734:	ffff0007 	.word	0xffff0007

08006738 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006746:	4b53      	ldr	r3, [pc, #332]	; (8006894 <RCCEx_PLL3_Config+0x15c>)
 8006748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674a:	f003 0303 	and.w	r3, r3, #3
 800674e:	2b03      	cmp	r3, #3
 8006750:	d101      	bne.n	8006756 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e099      	b.n	800688a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006756:	4b4f      	ldr	r3, [pc, #316]	; (8006894 <RCCEx_PLL3_Config+0x15c>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a4e      	ldr	r2, [pc, #312]	; (8006894 <RCCEx_PLL3_Config+0x15c>)
 800675c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006760:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006762:	f7fa ff91 	bl	8001688 <HAL_GetTick>
 8006766:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006768:	e008      	b.n	800677c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800676a:	f7fa ff8d 	bl	8001688 <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	2b02      	cmp	r3, #2
 8006776:	d901      	bls.n	800677c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e086      	b.n	800688a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800677c:	4b45      	ldr	r3, [pc, #276]	; (8006894 <RCCEx_PLL3_Config+0x15c>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1f0      	bne.n	800676a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006788:	4b42      	ldr	r3, [pc, #264]	; (8006894 <RCCEx_PLL3_Config+0x15c>)
 800678a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	051b      	lsls	r3, r3, #20
 8006796:	493f      	ldr	r1, [pc, #252]	; (8006894 <RCCEx_PLL3_Config+0x15c>)
 8006798:	4313      	orrs	r3, r2
 800679a:	628b      	str	r3, [r1, #40]	; 0x28
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	3b01      	subs	r3, #1
 80067a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	3b01      	subs	r3, #1
 80067ac:	025b      	lsls	r3, r3, #9
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	431a      	orrs	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	3b01      	subs	r3, #1
 80067b8:	041b      	lsls	r3, r3, #16
 80067ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80067be:	431a      	orrs	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	3b01      	subs	r3, #1
 80067c6:	061b      	lsls	r3, r3, #24
 80067c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80067cc:	4931      	ldr	r1, [pc, #196]	; (8006894 <RCCEx_PLL3_Config+0x15c>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80067d2:	4b30      	ldr	r3, [pc, #192]	; (8006894 <RCCEx_PLL3_Config+0x15c>)
 80067d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	492d      	ldr	r1, [pc, #180]	; (8006894 <RCCEx_PLL3_Config+0x15c>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80067e4:	4b2b      	ldr	r3, [pc, #172]	; (8006894 <RCCEx_PLL3_Config+0x15c>)
 80067e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	4928      	ldr	r1, [pc, #160]	; (8006894 <RCCEx_PLL3_Config+0x15c>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80067f6:	4b27      	ldr	r3, [pc, #156]	; (8006894 <RCCEx_PLL3_Config+0x15c>)
 80067f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fa:	4a26      	ldr	r2, [pc, #152]	; (8006894 <RCCEx_PLL3_Config+0x15c>)
 80067fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006800:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006802:	4b24      	ldr	r3, [pc, #144]	; (8006894 <RCCEx_PLL3_Config+0x15c>)
 8006804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006806:	4b24      	ldr	r3, [pc, #144]	; (8006898 <RCCEx_PLL3_Config+0x160>)
 8006808:	4013      	ands	r3, r2
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	69d2      	ldr	r2, [r2, #28]
 800680e:	00d2      	lsls	r2, r2, #3
 8006810:	4920      	ldr	r1, [pc, #128]	; (8006894 <RCCEx_PLL3_Config+0x15c>)
 8006812:	4313      	orrs	r3, r2
 8006814:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006816:	4b1f      	ldr	r3, [pc, #124]	; (8006894 <RCCEx_PLL3_Config+0x15c>)
 8006818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681a:	4a1e      	ldr	r2, [pc, #120]	; (8006894 <RCCEx_PLL3_Config+0x15c>)
 800681c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006820:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d106      	bne.n	8006836 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006828:	4b1a      	ldr	r3, [pc, #104]	; (8006894 <RCCEx_PLL3_Config+0x15c>)
 800682a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682c:	4a19      	ldr	r2, [pc, #100]	; (8006894 <RCCEx_PLL3_Config+0x15c>)
 800682e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006832:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006834:	e00f      	b.n	8006856 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d106      	bne.n	800684a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800683c:	4b15      	ldr	r3, [pc, #84]	; (8006894 <RCCEx_PLL3_Config+0x15c>)
 800683e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006840:	4a14      	ldr	r2, [pc, #80]	; (8006894 <RCCEx_PLL3_Config+0x15c>)
 8006842:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006846:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006848:	e005      	b.n	8006856 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800684a:	4b12      	ldr	r3, [pc, #72]	; (8006894 <RCCEx_PLL3_Config+0x15c>)
 800684c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684e:	4a11      	ldr	r2, [pc, #68]	; (8006894 <RCCEx_PLL3_Config+0x15c>)
 8006850:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006854:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006856:	4b0f      	ldr	r3, [pc, #60]	; (8006894 <RCCEx_PLL3_Config+0x15c>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a0e      	ldr	r2, [pc, #56]	; (8006894 <RCCEx_PLL3_Config+0x15c>)
 800685c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006860:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006862:	f7fa ff11 	bl	8001688 <HAL_GetTick>
 8006866:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006868:	e008      	b.n	800687c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800686a:	f7fa ff0d 	bl	8001688 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	2b02      	cmp	r3, #2
 8006876:	d901      	bls.n	800687c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e006      	b.n	800688a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800687c:	4b05      	ldr	r3, [pc, #20]	; (8006894 <RCCEx_PLL3_Config+0x15c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d0f0      	beq.n	800686a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006888:	7bfb      	ldrb	r3, [r7, #15]
}
 800688a:	4618      	mov	r0, r3
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	58024400 	.word	0x58024400
 8006898:	ffff0007 	.word	0xffff0007

0800689c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 80068a4:	2300      	movs	r3, #0
 80068a6:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e0e2      	b.n	8006a78 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a70      	ldr	r2, [pc, #448]	; (8006a80 <HAL_SPI_Init+0x1e4>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d00f      	beq.n	80068e2 <HAL_SPI_Init+0x46>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a6f      	ldr	r2, [pc, #444]	; (8006a84 <HAL_SPI_Init+0x1e8>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d00a      	beq.n	80068e2 <HAL_SPI_Init+0x46>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a6d      	ldr	r2, [pc, #436]	; (8006a88 <HAL_SPI_Init+0x1ec>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d005      	beq.n	80068e2 <HAL_SPI_Init+0x46>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	2b0f      	cmp	r3, #15
 80068dc:	d901      	bls.n	80068e2 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e0ca      	b.n	8006a78 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f001 f84a 	bl	800797c <SPI_GetPacketSize>
 80068e8:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a64      	ldr	r2, [pc, #400]	; (8006a80 <HAL_SPI_Init+0x1e4>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d00c      	beq.n	800690e <HAL_SPI_Init+0x72>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a62      	ldr	r2, [pc, #392]	; (8006a84 <HAL_SPI_Init+0x1e8>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d007      	beq.n	800690e <HAL_SPI_Init+0x72>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a61      	ldr	r2, [pc, #388]	; (8006a88 <HAL_SPI_Init+0x1ec>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d002      	beq.n	800690e <HAL_SPI_Init+0x72>
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2b08      	cmp	r3, #8
 800690c:	d811      	bhi.n	8006932 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006912:	4a5b      	ldr	r2, [pc, #364]	; (8006a80 <HAL_SPI_Init+0x1e4>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d009      	beq.n	800692c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a59      	ldr	r2, [pc, #356]	; (8006a84 <HAL_SPI_Init+0x1e8>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d004      	beq.n	800692c <HAL_SPI_Init+0x90>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a58      	ldr	r2, [pc, #352]	; (8006a88 <HAL_SPI_Init+0x1ec>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d104      	bne.n	8006936 <HAL_SPI_Init+0x9a>
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	2b10      	cmp	r3, #16
 8006930:	d901      	bls.n	8006936 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e0a0      	b.n	8006a78 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d106      	bne.n	8006950 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7fa fc1a 	bl	8001184 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 0201 	bic.w	r2, r2, #1
 8006966:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006970:	d110      	bne.n	8006994 <HAL_SPI_Init+0xf8>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800697a:	d10b      	bne.n	8006994 <HAL_SPI_Init+0xf8>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006980:	2b00      	cmp	r3, #0
 8006982:	d107      	bne.n	8006994 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006992:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	69da      	ldr	r2, [r3, #28]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800699c:	431a      	orrs	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	431a      	orrs	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a6:	ea42 0103 	orr.w	r1, r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68da      	ldr	r2, [r3, #12]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069be:	431a      	orrs	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c4:	431a      	orrs	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	431a      	orrs	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	431a      	orrs	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	431a      	orrs	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a1b      	ldr	r3, [r3, #32]
 80069dc:	431a      	orrs	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069e8:	431a      	orrs	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	431a      	orrs	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069f4:	ea42 0103 	orr.w	r1, r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	430a      	orrs	r2, r1
 8006a02:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d113      	bne.n	8006a34 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a1e:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a32:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f022 0201 	bic.w	r2, r2, #1
 8006a42:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00a      	beq.n	8006a66 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	40013000 	.word	0x40013000
 8006a84:	40003800 	.word	0x40003800
 8006a88:	40003c00 	.word	0x40003c00

08006a8c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b08e      	sub	sp, #56	; 0x38
 8006a90:	af02      	add	r7, sp, #8
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
 8006a98:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3320      	adds	r3, #32
 8006aa6:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3330      	adds	r3, #48	; 0x30
 8006aae:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d101      	bne.n	8006abe <HAL_SPI_TransmitReceive+0x32>
 8006aba:	2302      	movs	r3, #2
 8006abc:	e2ce      	b.n	800705c <HAL_SPI_TransmitReceive+0x5d0>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ac6:	f7fa fddf 	bl	8001688 <HAL_GetTick>
 8006aca:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8006acc:	887b      	ldrh	r3, [r7, #2]
 8006ace:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8006ad0:	887b      	ldrh	r3, [r7, #2]
 8006ad2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006ada:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ae2:	7efb      	ldrb	r3, [r7, #27]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d014      	beq.n	8006b12 <HAL_SPI_TransmitReceive+0x86>
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006aee:	d106      	bne.n	8006afe <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d102      	bne.n	8006afe <HAL_SPI_TransmitReceive+0x72>
 8006af8:	7efb      	ldrb	r3, [r7, #27]
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d009      	beq.n	8006b12 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8006afe:	2302      	movs	r3, #2
 8006b00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006b0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b10:	e2a4      	b.n	800705c <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d005      	beq.n	8006b24 <HAL_SPI_TransmitReceive+0x98>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d002      	beq.n	8006b24 <HAL_SPI_TransmitReceive+0x98>
 8006b1e:	887b      	ldrh	r3, [r7, #2]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d109      	bne.n	8006b38 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006b32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b36:	e291      	b.n	800705c <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b04      	cmp	r3, #4
 8006b42:	d003      	beq.n	8006b4c <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2205      	movs	r2, #5
 8006b48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	887a      	ldrh	r2, [r7, #2]
 8006b5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	887a      	ldrh	r2, [r7, #2]
 8006b66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	887a      	ldrh	r2, [r7, #2]
 8006b74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	887a      	ldrh	r2, [r7, #2]
 8006b7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	685a      	ldr	r2, [r3, #4]
 8006b92:	4b9f      	ldr	r3, [pc, #636]	; (8006e10 <HAL_SPI_TransmitReceive+0x384>)
 8006b94:	4013      	ands	r3, r2
 8006b96:	8879      	ldrh	r1, [r7, #2]
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	6812      	ldr	r2, [r2, #0]
 8006b9c:	430b      	orrs	r3, r1
 8006b9e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f042 0201 	orr.w	r2, r2, #1
 8006bae:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bb8:	d107      	bne.n	8006bca <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bc8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	2b0f      	cmp	r3, #15
 8006bd0:	d970      	bls.n	8006cb4 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006bd2:	e068      	b.n	8006ca6 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d11a      	bne.n	8006c18 <HAL_SPI_TransmitReceive+0x18c>
 8006be2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d017      	beq.n	8006c18 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6812      	ldr	r2, [r2, #0]
 8006bf2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf8:	1d1a      	adds	r2, r3, #4
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	3b01      	subs	r3, #1
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006c16:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	695a      	ldr	r2, [r3, #20]
 8006c1e:	f248 0308 	movw	r3, #32776	; 0x8008
 8006c22:	4013      	ands	r3, r2
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d01a      	beq.n	8006c5e <HAL_SPI_TransmitReceive+0x1d2>
 8006c28:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d017      	beq.n	8006c5e <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006c38:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c3e:	1d1a      	adds	r2, r3, #4
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006c5c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c5e:	f7fa fd13 	bl	8001688 <HAL_GetTick>
 8006c62:	4602      	mov	r2, r0
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d803      	bhi.n	8006c76 <HAL_SPI_TransmitReceive+0x1ea>
 8006c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c74:	d102      	bne.n	8006c7c <HAL_SPI_TransmitReceive+0x1f0>
 8006c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d114      	bne.n	8006ca6 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f000 fdaf 	bl	80077e0 <SPI_CloseTransfer>
      
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e1da      	b.n	800705c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006ca6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d193      	bne.n	8006bd4 <HAL_SPI_TransmitReceive+0x148>
 8006cac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d190      	bne.n	8006bd4 <HAL_SPI_TransmitReceive+0x148>
 8006cb2:	e1ac      	b.n	800700e <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	2b07      	cmp	r3, #7
 8006cba:	f240 81a0 	bls.w	8006ffe <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006cbe:	e0a9      	b.n	8006e14 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	f003 0302 	and.w	r3, r3, #2
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d139      	bne.n	8006d42 <HAL_SPI_TransmitReceive+0x2b6>
 8006cce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d036      	beq.n	8006d42 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006cd4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d91c      	bls.n	8006d14 <HAL_SPI_TransmitReceive+0x288>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d018      	beq.n	8006d14 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6812      	ldr	r2, [r2, #0]
 8006cec:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cf2:	1d1a      	adds	r2, r3, #4
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	3b02      	subs	r3, #2
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006d10:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006d12:	e016      	b.n	8006d42 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d18:	881a      	ldrh	r2, [r3, #0]
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d22:	1c9a      	adds	r2, r3, #2
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	3b01      	subs	r3, #1
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006d40:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d03a      	beq.n	8006dc6 <HAL_SPI_TransmitReceive+0x33a>
 8006d50:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d037      	beq.n	8006dc6 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d018      	beq.n	8006d96 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006d6e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d74:	1d1a      	adds	r2, r3, #4
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	3b02      	subs	r3, #2
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d92:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006d94:	e017      	b.n	8006dc6 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d9a:	6a3a      	ldr	r2, [r7, #32]
 8006d9c:	8812      	ldrh	r2, [r2, #0]
 8006d9e:	b292      	uxth	r2, r2
 8006da0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006da6:	1c9a      	adds	r2, r3, #2
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	3b01      	subs	r3, #1
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006dc4:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dc6:	f7fa fc5f 	bl	8001688 <HAL_GetTick>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d803      	bhi.n	8006dde <HAL_SPI_TransmitReceive+0x352>
 8006dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ddc:	d102      	bne.n	8006de4 <HAL_SPI_TransmitReceive+0x358>
 8006dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d117      	bne.n	8006e14 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f000 fcfb 	bl	80077e0 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006df8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e126      	b.n	800705c <HAL_SPI_TransmitReceive+0x5d0>
 8006e0e:	bf00      	nop
 8006e10:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006e14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f47f af52 	bne.w	8006cc0 <HAL_SPI_TransmitReceive+0x234>
 8006e1c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f47f af4e 	bne.w	8006cc0 <HAL_SPI_TransmitReceive+0x234>
 8006e24:	e0f3      	b.n	800700e <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	f003 0302 	and.w	r3, r3, #2
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d15a      	bne.n	8006eea <HAL_SPI_TransmitReceive+0x45e>
 8006e34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d057      	beq.n	8006eea <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006e3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e3c:	2b03      	cmp	r3, #3
 8006e3e:	d91c      	bls.n	8006e7a <HAL_SPI_TransmitReceive+0x3ee>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e44:	2b40      	cmp	r3, #64	; 0x40
 8006e46:	d918      	bls.n	8006e7a <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6812      	ldr	r2, [r2, #0]
 8006e52:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e58:	1d1a      	adds	r2, r3, #4
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	3b04      	subs	r3, #4
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006e76:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006e78:	e037      	b.n	8006eea <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006e7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d91b      	bls.n	8006eb8 <HAL_SPI_TransmitReceive+0x42c>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d017      	beq.n	8006eb8 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e8c:	881a      	ldrh	r2, [r3, #0]
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e90:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e96:	1c9a      	adds	r2, r3, #2
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	3b02      	subs	r3, #2
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006eb4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006eb6:	e018      	b.n	8006eea <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3320      	adds	r3, #32
 8006ec2:	7812      	ldrb	r2, [r2, #0]
 8006ec4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eca:	1c5a      	adds	r2, r3, #1
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006ee8:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d05e      	beq.n	8006fb6 <HAL_SPI_TransmitReceive+0x52a>
 8006ef8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d05b      	beq.n	8006fb6 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d018      	beq.n	8006f3e <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006f16:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f1c:	1d1a      	adds	r2, r3, #4
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	3b04      	subs	r3, #4
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006f3a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006f3c:	e03b      	b.n	8006fb6 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	695b      	ldr	r3, [r3, #20]
 8006f44:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8006f48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f4c:	d918      	bls.n	8006f80 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f52:	6a3a      	ldr	r2, [r7, #32]
 8006f54:	8812      	ldrh	r2, [r2, #0]
 8006f56:	b292      	uxth	r2, r2
 8006f58:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f5e:	1c9a      	adds	r2, r3, #2
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	3b02      	subs	r3, #2
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006f7c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006f7e:	e01a      	b.n	8006fb6 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f8c:	7812      	ldrb	r2, [r2, #0]
 8006f8e:	b2d2      	uxtb	r2, r2
 8006f90:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006fb4:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fb6:	f7fa fb67 	bl	8001688 <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d803      	bhi.n	8006fce <HAL_SPI_TransmitReceive+0x542>
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fcc:	d102      	bne.n	8006fd4 <HAL_SPI_TransmitReceive+0x548>
 8006fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d114      	bne.n	8006ffe <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f000 fc03 	bl	80077e0 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fe8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e02e      	b.n	800705c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006ffe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007000:	2b00      	cmp	r3, #0
 8007002:	f47f af10 	bne.w	8006e26 <HAL_SPI_TransmitReceive+0x39a>
 8007006:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007008:	2b00      	cmp	r3, #0
 800700a:	f47f af0c 	bne.w	8006e26 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800700e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	2200      	movs	r2, #0
 8007016:	2108      	movs	r1, #8
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 fc81 	bl	8007920 <SPI_WaitOnFlagUntilTimeout>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d007      	beq.n	8007034 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800702a:	f043 0220 	orr.w	r2, r3, #32
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f000 fbd3 	bl	80077e0 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007050:	2b00      	cmp	r3, #0
 8007052:	d001      	beq.n	8007058 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e001      	b.n	800705c <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8007058:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800705c:	4618      	mov	r0, r3
 800705e:	3730      	adds	r7, #48	; 0x30
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	4613      	mov	r3, r2
 8007070:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800707c:	2b01      	cmp	r3, #1
 800707e:	d101      	bne.n	8007084 <HAL_SPI_Transmit_DMA+0x20>
 8007080:	2302      	movs	r3, #2
 8007082:	e128      	b.n	80072d6 <HAL_SPI_Transmit_DMA+0x272>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007092:	b2db      	uxtb	r3, r3
 8007094:	2b01      	cmp	r3, #1
 8007096:	d007      	beq.n	80070a8 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8007098:	2302      	movs	r3, #2
 800709a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80070a4:	7dfb      	ldrb	r3, [r7, #23]
 80070a6:	e116      	b.n	80072d6 <HAL_SPI_Transmit_DMA+0x272>
  }

  if ((pData == NULL) || (Size == 0UL))
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d002      	beq.n	80070b4 <HAL_SPI_Transmit_DMA+0x50>
 80070ae:	88fb      	ldrh	r3, [r7, #6]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d107      	bne.n	80070c4 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80070c0:	7dfb      	ldrb	r3, [r7, #23]
 80070c2:	e108      	b.n	80072d6 <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2203      	movs	r2, #3
 80070c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	88fa      	ldrh	r2, [r7, #6]
 80070de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	88fa      	ldrh	r2, [r7, #6]
 80070e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007114:	d107      	bne.n	8007126 <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007124:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	2b0f      	cmp	r3, #15
 800712c:	d905      	bls.n	800713a <HAL_SPI_Transmit_DMA+0xd6>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007138:	d10f      	bne.n	800715a <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800713e:	2b07      	cmp	r3, #7
 8007140:	d913      	bls.n	800716a <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800714c:	d00d      	beq.n	800716a <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007152:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007154:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007158:	d007      	beq.n	800716a <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007166:	7dfb      	ldrb	r3, [r7, #23]
 8007168:	e0b5      	b.n	80072d6 <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	2b07      	cmp	r3, #7
 8007170:	d820      	bhi.n	80071b4 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800717c:	d109      	bne.n	8007192 <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007184:	b29b      	uxth	r3, r3
 8007186:	3301      	adds	r3, #1
 8007188:	105b      	asrs	r3, r3, #1
 800718a:	b29a      	uxth	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800719c:	d11e      	bne.n	80071dc <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	3303      	adds	r3, #3
 80071a8:	109b      	asrs	r3, r3, #2
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80071b2:	e013      	b.n	80071dc <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	2b0f      	cmp	r3, #15
 80071ba:	d80f      	bhi.n	80071dc <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071c6:	d109      	bne.n	80071dc <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	3301      	adds	r3, #1
 80071d2:	105b      	asrs	r3, r3, #1
 80071d4:	b29a      	uxth	r2, r3
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071e0:	4a3f      	ldr	r2, [pc, #252]	; (80072e0 <HAL_SPI_Transmit_DMA+0x27c>)
 80071e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071e8:	4a3e      	ldr	r2, [pc, #248]	; (80072e4 <HAL_SPI_Transmit_DMA+0x280>)
 80071ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071f0:	4a3d      	ldr	r2, [pc, #244]	; (80072e8 <HAL_SPI_Transmit_DMA+0x284>)
 80071f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071f8:	2200      	movs	r2, #0
 80071fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689a      	ldr	r2, [r3, #8]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800720a:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007214:	4619      	mov	r1, r3
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	3320      	adds	r3, #32
 800721c:	461a      	mov	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007224:	b29b      	uxth	r3, r3
 8007226:	f7fa fed5 	bl	8001fd4 <HAL_DMA_Start_IT>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00f      	beq.n	8007250 <HAL_SPI_Transmit_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007236:	f043 0210 	orr.w	r2, r3, #16
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 800724c:	7dfb      	ldrb	r3, [r7, #23]
 800724e:	e042      	b.n	80072d6 <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007254:	69db      	ldr	r3, [r3, #28]
 8007256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800725a:	d108      	bne.n	800726e <HAL_SPI_Transmit_DMA+0x20a>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6859      	ldr	r1, [r3, #4]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	4b21      	ldr	r3, [pc, #132]	; (80072ec <HAL_SPI_Transmit_DMA+0x288>)
 8007268:	400b      	ands	r3, r1
 800726a:	6053      	str	r3, [r2, #4]
 800726c:	e009      	b.n	8007282 <HAL_SPI_Transmit_DMA+0x21e>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	4b1d      	ldr	r3, [pc, #116]	; (80072ec <HAL_SPI_Transmit_DMA+0x288>)
 8007276:	4013      	ands	r3, r2
 8007278:	88f9      	ldrh	r1, [r7, #6]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	6812      	ldr	r2, [r2, #0]
 800727e:	430b      	orrs	r3, r1
 8007280:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	689a      	ldr	r2, [r3, #8]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007290:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	691a      	ldr	r2, [r3, #16]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 80072a0:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f042 0201 	orr.w	r2, r2, #1
 80072b0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072ba:	d107      	bne.n	80072cc <HAL_SPI_Transmit_DMA+0x268>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072ca:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 80072d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3718      	adds	r7, #24
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	0800774b 	.word	0x0800774b
 80072e4:	08007705 	.word	0x08007705
 80072e8:	08007767 	.word	0x08007767
 80072ec:	ffff0000 	.word	0xffff0000

080072f0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b08a      	sub	sp, #40	; 0x28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007308:	6a3a      	ldr	r2, [r7, #32]
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	4013      	ands	r3, r2
 800730e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007318:	2300      	movs	r3, #0
 800731a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007322:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	3330      	adds	r3, #48	; 0x30
 800732a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007332:	2b00      	cmp	r3, #0
 8007334:	d113      	bne.n	800735e <HAL_SPI_IRQHandler+0x6e>
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	f003 0320 	and.w	r3, r3, #32
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10e      	bne.n	800735e <HAL_SPI_IRQHandler+0x6e>
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	f003 0304 	and.w	r3, r3, #4
 8007346:	2b00      	cmp	r3, #0
 8007348:	d009      	beq.n	800735e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	4798      	blx	r3
    handled = 1UL;
 800735a:	2301      	movs	r3, #1
 800735c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10f      	bne.n	8007388 <HAL_SPI_IRQHandler+0x98>
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00a      	beq.n	8007388 <HAL_SPI_IRQHandler+0x98>
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	f003 0304 	and.w	r3, r3, #4
 8007378:	2b00      	cmp	r3, #0
 800737a:	d105      	bne.n	8007388 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	4798      	blx	r3
    handled = 1UL;
 8007384:	2301      	movs	r3, #1
 8007386:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	f003 0320 	and.w	r3, r3, #32
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10f      	bne.n	80073b2 <HAL_SPI_IRQHandler+0xc2>
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	f003 0302 	and.w	r3, r3, #2
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00a      	beq.n	80073b2 <HAL_SPI_IRQHandler+0xc2>
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	f003 0304 	and.w	r3, r3, #4
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d105      	bne.n	80073b2 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	4798      	blx	r3
    handled = 1UL;
 80073ae:	2301      	movs	r3, #1
 80073b0:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80073b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f040 8170 	bne.w	800769a <HAL_SPI_IRQHandler+0x3aa>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	f003 0308 	and.w	r3, r3, #8
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f000 80a0 	beq.w	8007506 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	699a      	ldr	r2, [r3, #24]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f042 0208 	orr.w	r2, r2, #8
 80073d4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	699a      	ldr	r2, [r3, #24]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f042 0210 	orr.w	r2, r2, #16
 80073e4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	699a      	ldr	r2, [r3, #24]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073f4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	691a      	ldr	r2, [r3, #16]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 0208 	bic.w	r2, r2, #8
 8007404:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00f      	beq.n	8007430 <HAL_SPI_IRQHandler+0x140>
 8007410:	7cfb      	ldrb	r3, [r7, #19]
 8007412:	2b04      	cmp	r3, #4
 8007414:	d004      	beq.n	8007420 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800741a:	69db      	ldr	r3, [r3, #28]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d007      	beq.n	8007430 <HAL_SPI_IRQHandler+0x140>
 8007420:	7cfb      	ldrb	r3, [r7, #19]
 8007422:	2b03      	cmp	r3, #3
 8007424:	d059      	beq.n	80074da <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d154      	bne.n	80074da <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800743a:	2b00      	cmp	r3, #0
 800743c:	d13d      	bne.n	80074ba <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800743e:	e036      	b.n	80074ae <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	2b0f      	cmp	r3, #15
 8007446:	d90b      	bls.n	8007460 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007450:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007452:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007458:	1d1a      	adds	r2, r3, #4
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	665a      	str	r2, [r3, #100]	; 0x64
 800745e:	e01d      	b.n	800749c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	2b07      	cmp	r3, #7
 8007466:	d90b      	bls.n	8007480 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	8812      	ldrh	r2, [r2, #0]
 8007470:	b292      	uxth	r2, r2
 8007472:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007478:	1c9a      	adds	r2, r3, #2
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	665a      	str	r2, [r3, #100]	; 0x64
 800747e:	e00d      	b.n	800749c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800748c:	7812      	ldrb	r2, [r2, #0]
 800748e:	b2d2      	uxtb	r2, r2
 8007490:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007496:	1c5a      	adds	r2, r3, #1
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	3b01      	subs	r3, #1
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1c2      	bne.n	8007440 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f990 	bl	80077e0 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d003      	beq.n	80074da <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f90c 	bl	80076f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 80074d8:	e0e4      	b.n	80076a4 <HAL_SPI_IRQHandler+0x3b4>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80074da:	7cfb      	ldrb	r3, [r7, #19]
 80074dc:	2b05      	cmp	r3, #5
 80074de:	d103      	bne.n	80074e8 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 f8f1 	bl	80076c8 <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 80074e6:	e0da      	b.n	800769e <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80074e8:	7cfb      	ldrb	r3, [r7, #19]
 80074ea:	2b04      	cmp	r3, #4
 80074ec:	d103      	bne.n	80074f6 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f8e0 	bl	80076b4 <HAL_SPI_RxCpltCallback>
    return;
 80074f4:	e0d3      	b.n	800769e <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80074f6:	7cfb      	ldrb	r3, [r7, #19]
 80074f8:	2b03      	cmp	r3, #3
 80074fa:	f040 80d0 	bne.w	800769e <HAL_SPI_IRQHandler+0x3ae>
      HAL_SPI_TxCpltCallback(hspi);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f7f9 fb0c 	bl	8000b1c <HAL_SPI_TxCpltCallback>
    return;
 8007504:	e0cb      	b.n	800769e <HAL_SPI_IRQHandler+0x3ae>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00d      	beq.n	800752c <HAL_SPI_IRQHandler+0x23c>
 8007510:	6a3b      	ldr	r3, [r7, #32]
 8007512:	f003 0308 	and.w	r3, r3, #8
 8007516:	2b00      	cmp	r3, #0
 8007518:	d008      	beq.n	800752c <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	699a      	ldr	r2, [r3, #24]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007528:	619a      	str	r2, [r3, #24]

    return;
 800752a:	e0bb      	b.n	80076a4 <HAL_SPI_IRQHandler+0x3b4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8007532:	2b00      	cmp	r3, #0
 8007534:	f000 80b6 	beq.w	80076a4 <HAL_SPI_IRQHandler+0x3b4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00f      	beq.n	8007562 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007548:	f043 0204 	orr.w	r2, r3, #4
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	699a      	ldr	r2, [r3, #24]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007560:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00f      	beq.n	800758c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007572:	f043 0201 	orr.w	r2, r3, #1
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	699a      	ldr	r2, [r3, #24]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800758a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00f      	beq.n	80075b6 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800759c:	f043 0208 	orr.w	r2, r3, #8
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	699a      	ldr	r2, [r3, #24]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075b4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	f003 0320 	and.w	r3, r3, #32
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00f      	beq.n	80075e0 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075c6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	699a      	ldr	r2, [r3, #24]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f042 0220 	orr.w	r2, r2, #32
 80075de:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d05b      	beq.n	80076a2 <HAL_SPI_IRQHandler+0x3b2>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 0201 	bic.w	r2, r2, #1
 80075f8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6919      	ldr	r1, [r3, #16]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	4b29      	ldr	r3, [pc, #164]	; (80076ac <HAL_SPI_IRQHandler+0x3bc>)
 8007606:	400b      	ands	r3, r1
 8007608:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007610:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007614:	d138      	bne.n	8007688 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689a      	ldr	r2, [r3, #8]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007624:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800762a:	2b00      	cmp	r3, #0
 800762c:	d013      	beq.n	8007656 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007632:	4a1f      	ldr	r2, [pc, #124]	; (80076b0 <HAL_SPI_IRQHandler+0x3c0>)
 8007634:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800763a:	4618      	mov	r0, r3
 800763c:	f7fa ff34 	bl	80024a8 <HAL_DMA_Abort_IT>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d007      	beq.n	8007656 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800764c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800765a:	2b00      	cmp	r3, #0
 800765c:	d021      	beq.n	80076a2 <HAL_SPI_IRQHandler+0x3b2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007662:	4a13      	ldr	r2, [pc, #76]	; (80076b0 <HAL_SPI_IRQHandler+0x3c0>)
 8007664:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800766a:	4618      	mov	r0, r3
 800766c:	f7fa ff1c 	bl	80024a8 <HAL_DMA_Abort_IT>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d015      	beq.n	80076a2 <HAL_SPI_IRQHandler+0x3b2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800767c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007686:	e00c      	b.n	80076a2 <HAL_SPI_IRQHandler+0x3b2>
        hspi->State = HAL_SPI_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 f82d 	bl	80076f0 <HAL_SPI_ErrorCallback>
    return;
 8007696:	bf00      	nop
 8007698:	e003      	b.n	80076a2 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800769a:	bf00      	nop
 800769c:	e002      	b.n	80076a4 <HAL_SPI_IRQHandler+0x3b4>
    return;
 800769e:	bf00      	nop
 80076a0:	e000      	b.n	80076a4 <HAL_SPI_IRQHandler+0x3b4>
    return;
 80076a2:	bf00      	nop
  }
}
 80076a4:	3728      	adds	r7, #40	; 0x28
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	fffffc94 	.word	0xfffffc94
 80076b0:	080077ad 	.word	0x080077ad

080076b4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80076f8:	bf00      	nop
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007710:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b07      	cmp	r3, #7
 800771c:	d011      	beq.n	8007742 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007722:	69db      	ldr	r3, [r3, #28]
 8007724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007728:	d103      	bne.n	8007732 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f7f9 f9f6 	bl	8000b1c <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8007730:	e007      	b.n	8007742 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	691a      	ldr	r2, [r3, #16]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f042 0208 	orr.w	r2, r2, #8
 8007740:	611a      	str	r2, [r3, #16]
}
 8007742:	bf00      	nop
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b084      	sub	sp, #16
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007756:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f7ff ffbf 	bl	80076dc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800775e:	bf00      	nop
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b084      	sub	sp, #16
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007772:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f7fc f805 	bl	8003784 <HAL_DMA_GetError>
 800777a:	4603      	mov	r3, r0
 800777c:	2b02      	cmp	r3, #2
 800777e:	d011      	beq.n	80077a4 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f000 f82d 	bl	80077e0 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800778c:	f043 0210 	orr.w	r2, r3, #16
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f7ff ffa6 	bl	80076f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80077a4:	bf00      	nop
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f7ff ff8c 	bl	80076f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80077d8:	bf00      	nop
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	695b      	ldr	r3, [r3, #20]
 80077ee:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	699a      	ldr	r2, [r3, #24]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f042 0208 	orr.w	r2, r2, #8
 80077fe:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	699a      	ldr	r2, [r3, #24]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f042 0210 	orr.w	r2, r2, #16
 800780e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f022 0201 	bic.w	r2, r2, #1
 800781e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	6919      	ldr	r1, [r3, #16]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	4b3c      	ldr	r3, [pc, #240]	; (800791c <SPI_CloseTransfer+0x13c>)
 800782c:	400b      	ands	r3, r1
 800782e:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689a      	ldr	r2, [r3, #8]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800783e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007846:	b2db      	uxtb	r3, r3
 8007848:	2b04      	cmp	r3, #4
 800784a:	d014      	beq.n	8007876 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f003 0320 	and.w	r3, r3, #32
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00f      	beq.n	8007876 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800785c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	699a      	ldr	r2, [r3, #24]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f042 0220 	orr.w	r2, r2, #32
 8007874:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800787c:	b2db      	uxtb	r3, r3
 800787e:	2b03      	cmp	r3, #3
 8007880:	d014      	beq.n	80078ac <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00f      	beq.n	80078ac <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007892:	f043 0204 	orr.w	r2, r3, #4
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	699a      	ldr	r2, [r3, #24]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078aa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00f      	beq.n	80078d6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078bc:	f043 0201 	orr.w	r2, r3, #1
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	699a      	ldr	r2, [r3, #24]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078d4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00f      	beq.n	8007900 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078e6:	f043 0208 	orr.w	r2, r3, #8
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	699a      	ldr	r2, [r3, #24]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078fe:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007910:	bf00      	nop
 8007912:	3714      	adds	r7, #20
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr
 800791c:	fffffc90 	.word	0xfffffc90

08007920 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	603b      	str	r3, [r7, #0]
 800792c:	4613      	mov	r3, r2
 800792e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007930:	e010      	b.n	8007954 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007932:	f7f9 fea9 	bl	8001688 <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	69ba      	ldr	r2, [r7, #24]
 800793e:	429a      	cmp	r2, r3
 8007940:	d803      	bhi.n	800794a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007948:	d102      	bne.n	8007950 <SPI_WaitOnFlagUntilTimeout+0x30>
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d101      	bne.n	8007954 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e00f      	b.n	8007974 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	695a      	ldr	r2, [r3, #20]
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	4013      	ands	r3, r2
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	429a      	cmp	r2, r3
 8007962:	bf0c      	ite	eq
 8007964:	2301      	moveq	r3, #1
 8007966:	2300      	movne	r3, #0
 8007968:	b2db      	uxtb	r3, r3
 800796a:	461a      	mov	r2, r3
 800796c:	79fb      	ldrb	r3, [r7, #7]
 800796e:	429a      	cmp	r2, r3
 8007970:	d0df      	beq.n	8007932 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007988:	095b      	lsrs	r3, r3, #5
 800798a:	3301      	adds	r3, #1
 800798c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	3301      	adds	r3, #1
 8007994:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	3307      	adds	r3, #7
 800799a:	08db      	lsrs	r3, r3, #3
 800799c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	fb02 f303 	mul.w	r3, r2, r3
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3714      	adds	r7, #20
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr

080079b2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b082      	sub	sp, #8
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e042      	b.n	8007a4a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d106      	bne.n	80079dc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f7f9 fc58 	bl	800128c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2224      	movs	r2, #36	; 0x24
 80079e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f022 0201 	bic.w	r2, r2, #1
 80079f2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 f8c3 	bl	8007b80 <UART_SetConfig>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d101      	bne.n	8007a04 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e022      	b.n	8007a4a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d002      	beq.n	8007a12 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fe67 	bl	80086e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	685a      	ldr	r2, [r3, #4]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a20:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	689a      	ldr	r2, [r3, #8]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a30:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f042 0201 	orr.w	r2, r2, #1
 8007a40:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 feee 	bl	8008824 <UART_CheckIdleState>
 8007a48:	4603      	mov	r3, r0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b08a      	sub	sp, #40	; 0x28
 8007a56:	af02      	add	r7, sp, #8
 8007a58:	60f8      	str	r0, [r7, #12]
 8007a5a:	60b9      	str	r1, [r7, #8]
 8007a5c:	603b      	str	r3, [r7, #0]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a68:	2b20      	cmp	r3, #32
 8007a6a:	f040 8083 	bne.w	8007b74 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <HAL_UART_Transmit+0x28>
 8007a74:	88fb      	ldrh	r3, [r7, #6]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d101      	bne.n	8007a7e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e07b      	b.n	8007b76 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d101      	bne.n	8007a8c <HAL_UART_Transmit+0x3a>
 8007a88:	2302      	movs	r3, #2
 8007a8a:	e074      	b.n	8007b76 <HAL_UART_Transmit+0x124>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2221      	movs	r2, #33	; 0x21
 8007aa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007aa4:	f7f9 fdf0 	bl	8001688 <HAL_GetTick>
 8007aa8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	88fa      	ldrh	r2, [r7, #6]
 8007aae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	88fa      	ldrh	r2, [r7, #6]
 8007ab6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ac2:	d108      	bne.n	8007ad6 <HAL_UART_Transmit+0x84>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d104      	bne.n	8007ad6 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007acc:	2300      	movs	r3, #0
 8007ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	61bb      	str	r3, [r7, #24]
 8007ad4:	e003      	b.n	8007ade <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ada:	2300      	movs	r3, #0
 8007adc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8007ae6:	e02c      	b.n	8007b42 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	2200      	movs	r2, #0
 8007af0:	2180      	movs	r1, #128	; 0x80
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f000 fede 	bl	80088b4 <UART_WaitOnFlagUntilTimeout>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d001      	beq.n	8007b02 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e039      	b.n	8007b76 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10b      	bne.n	8007b20 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	881b      	ldrh	r3, [r3, #0]
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b16:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	3302      	adds	r3, #2
 8007b1c:	61bb      	str	r3, [r7, #24]
 8007b1e:	e007      	b.n	8007b30 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	781a      	ldrb	r2, [r3, #0]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1cc      	bne.n	8007ae8 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	2200      	movs	r2, #0
 8007b56:	2140      	movs	r1, #64	; 0x40
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 feab 	bl	80088b4 <UART_WaitOnFlagUntilTimeout>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e006      	b.n	8007b76 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2220      	movs	r2, #32
 8007b6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8007b70:	2300      	movs	r3, #0
 8007b72:	e000      	b.n	8007b76 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007b74:	2302      	movs	r3, #2
  }
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3720      	adds	r7, #32
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
	...

08007b80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b80:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007b84:	b08e      	sub	sp, #56	; 0x38
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	689a      	ldr	r2, [r3, #8]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	431a      	orrs	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	431a      	orrs	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	69db      	ldr	r3, [r3, #28]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	4bc1      	ldr	r3, [pc, #772]	; (8007ec0 <UART_SetConfig+0x340>)
 8007bba:	4013      	ands	r3, r2
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	6812      	ldr	r2, [r2, #0]
 8007bc0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007bc2:	430b      	orrs	r3, r1
 8007bc4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	68da      	ldr	r2, [r3, #12]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4ab7      	ldr	r2, [pc, #732]	; (8007ec4 <UART_SetConfig+0x344>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d004      	beq.n	8007bf6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a1b      	ldr	r3, [r3, #32]
 8007bf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	689a      	ldr	r2, [r3, #8]
 8007bfc:	4bb2      	ldr	r3, [pc, #712]	; (8007ec8 <UART_SetConfig+0x348>)
 8007bfe:	4013      	ands	r3, r2
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	6812      	ldr	r2, [r2, #0]
 8007c04:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007c06:	430b      	orrs	r3, r1
 8007c08:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c10:	f023 010f 	bic.w	r1, r3, #15
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	430a      	orrs	r2, r1
 8007c1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4aa9      	ldr	r2, [pc, #676]	; (8007ecc <UART_SetConfig+0x34c>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d177      	bne.n	8007d1a <UART_SetConfig+0x19a>
 8007c2a:	4ba9      	ldr	r3, [pc, #676]	; (8007ed0 <UART_SetConfig+0x350>)
 8007c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c32:	2b28      	cmp	r3, #40	; 0x28
 8007c34:	d86c      	bhi.n	8007d10 <UART_SetConfig+0x190>
 8007c36:	a201      	add	r2, pc, #4	; (adr r2, 8007c3c <UART_SetConfig+0xbc>)
 8007c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3c:	08007ce1 	.word	0x08007ce1
 8007c40:	08007d11 	.word	0x08007d11
 8007c44:	08007d11 	.word	0x08007d11
 8007c48:	08007d11 	.word	0x08007d11
 8007c4c:	08007d11 	.word	0x08007d11
 8007c50:	08007d11 	.word	0x08007d11
 8007c54:	08007d11 	.word	0x08007d11
 8007c58:	08007d11 	.word	0x08007d11
 8007c5c:	08007ce9 	.word	0x08007ce9
 8007c60:	08007d11 	.word	0x08007d11
 8007c64:	08007d11 	.word	0x08007d11
 8007c68:	08007d11 	.word	0x08007d11
 8007c6c:	08007d11 	.word	0x08007d11
 8007c70:	08007d11 	.word	0x08007d11
 8007c74:	08007d11 	.word	0x08007d11
 8007c78:	08007d11 	.word	0x08007d11
 8007c7c:	08007cf1 	.word	0x08007cf1
 8007c80:	08007d11 	.word	0x08007d11
 8007c84:	08007d11 	.word	0x08007d11
 8007c88:	08007d11 	.word	0x08007d11
 8007c8c:	08007d11 	.word	0x08007d11
 8007c90:	08007d11 	.word	0x08007d11
 8007c94:	08007d11 	.word	0x08007d11
 8007c98:	08007d11 	.word	0x08007d11
 8007c9c:	08007cf9 	.word	0x08007cf9
 8007ca0:	08007d11 	.word	0x08007d11
 8007ca4:	08007d11 	.word	0x08007d11
 8007ca8:	08007d11 	.word	0x08007d11
 8007cac:	08007d11 	.word	0x08007d11
 8007cb0:	08007d11 	.word	0x08007d11
 8007cb4:	08007d11 	.word	0x08007d11
 8007cb8:	08007d11 	.word	0x08007d11
 8007cbc:	08007d01 	.word	0x08007d01
 8007cc0:	08007d11 	.word	0x08007d11
 8007cc4:	08007d11 	.word	0x08007d11
 8007cc8:	08007d11 	.word	0x08007d11
 8007ccc:	08007d11 	.word	0x08007d11
 8007cd0:	08007d11 	.word	0x08007d11
 8007cd4:	08007d11 	.word	0x08007d11
 8007cd8:	08007d11 	.word	0x08007d11
 8007cdc:	08007d09 	.word	0x08007d09
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ce6:	e233      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007ce8:	2304      	movs	r3, #4
 8007cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cee:	e22f      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007cf0:	2308      	movs	r3, #8
 8007cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cf6:	e22b      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007cf8:	2310      	movs	r3, #16
 8007cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cfe:	e227      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007d00:	2320      	movs	r3, #32
 8007d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d06:	e223      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007d08:	2340      	movs	r3, #64	; 0x40
 8007d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d0e:	e21f      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007d10:	2380      	movs	r3, #128	; 0x80
 8007d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d16:	bf00      	nop
 8007d18:	e21a      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a6d      	ldr	r2, [pc, #436]	; (8007ed4 <UART_SetConfig+0x354>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d132      	bne.n	8007d8a <UART_SetConfig+0x20a>
 8007d24:	4b6a      	ldr	r3, [pc, #424]	; (8007ed0 <UART_SetConfig+0x350>)
 8007d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d28:	f003 0307 	and.w	r3, r3, #7
 8007d2c:	2b05      	cmp	r3, #5
 8007d2e:	d827      	bhi.n	8007d80 <UART_SetConfig+0x200>
 8007d30:	a201      	add	r2, pc, #4	; (adr r2, 8007d38 <UART_SetConfig+0x1b8>)
 8007d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d36:	bf00      	nop
 8007d38:	08007d51 	.word	0x08007d51
 8007d3c:	08007d59 	.word	0x08007d59
 8007d40:	08007d61 	.word	0x08007d61
 8007d44:	08007d69 	.word	0x08007d69
 8007d48:	08007d71 	.word	0x08007d71
 8007d4c:	08007d79 	.word	0x08007d79
 8007d50:	2300      	movs	r3, #0
 8007d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d56:	e1fb      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007d58:	2304      	movs	r3, #4
 8007d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d5e:	e1f7      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007d60:	2308      	movs	r3, #8
 8007d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d66:	e1f3      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007d68:	2310      	movs	r3, #16
 8007d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d6e:	e1ef      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007d70:	2320      	movs	r3, #32
 8007d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d76:	e1eb      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007d78:	2340      	movs	r3, #64	; 0x40
 8007d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d7e:	e1e7      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007d80:	2380      	movs	r3, #128	; 0x80
 8007d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d86:	bf00      	nop
 8007d88:	e1e2      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a52      	ldr	r2, [pc, #328]	; (8007ed8 <UART_SetConfig+0x358>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d132      	bne.n	8007dfa <UART_SetConfig+0x27a>
 8007d94:	4b4e      	ldr	r3, [pc, #312]	; (8007ed0 <UART_SetConfig+0x350>)
 8007d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d98:	f003 0307 	and.w	r3, r3, #7
 8007d9c:	2b05      	cmp	r3, #5
 8007d9e:	d827      	bhi.n	8007df0 <UART_SetConfig+0x270>
 8007da0:	a201      	add	r2, pc, #4	; (adr r2, 8007da8 <UART_SetConfig+0x228>)
 8007da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da6:	bf00      	nop
 8007da8:	08007dc1 	.word	0x08007dc1
 8007dac:	08007dc9 	.word	0x08007dc9
 8007db0:	08007dd1 	.word	0x08007dd1
 8007db4:	08007dd9 	.word	0x08007dd9
 8007db8:	08007de1 	.word	0x08007de1
 8007dbc:	08007de9 	.word	0x08007de9
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dc6:	e1c3      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007dc8:	2304      	movs	r3, #4
 8007dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dce:	e1bf      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007dd0:	2308      	movs	r3, #8
 8007dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dd6:	e1bb      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007dd8:	2310      	movs	r3, #16
 8007dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dde:	e1b7      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007de0:	2320      	movs	r3, #32
 8007de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007de6:	e1b3      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007de8:	2340      	movs	r3, #64	; 0x40
 8007dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dee:	e1af      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007df0:	2380      	movs	r3, #128	; 0x80
 8007df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007df6:	bf00      	nop
 8007df8:	e1aa      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a37      	ldr	r2, [pc, #220]	; (8007edc <UART_SetConfig+0x35c>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d132      	bne.n	8007e6a <UART_SetConfig+0x2ea>
 8007e04:	4b32      	ldr	r3, [pc, #200]	; (8007ed0 <UART_SetConfig+0x350>)
 8007e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e08:	f003 0307 	and.w	r3, r3, #7
 8007e0c:	2b05      	cmp	r3, #5
 8007e0e:	d827      	bhi.n	8007e60 <UART_SetConfig+0x2e0>
 8007e10:	a201      	add	r2, pc, #4	; (adr r2, 8007e18 <UART_SetConfig+0x298>)
 8007e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e16:	bf00      	nop
 8007e18:	08007e31 	.word	0x08007e31
 8007e1c:	08007e39 	.word	0x08007e39
 8007e20:	08007e41 	.word	0x08007e41
 8007e24:	08007e49 	.word	0x08007e49
 8007e28:	08007e51 	.word	0x08007e51
 8007e2c:	08007e59 	.word	0x08007e59
 8007e30:	2300      	movs	r3, #0
 8007e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e36:	e18b      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007e38:	2304      	movs	r3, #4
 8007e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e3e:	e187      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007e40:	2308      	movs	r3, #8
 8007e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e46:	e183      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007e48:	2310      	movs	r3, #16
 8007e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e4e:	e17f      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007e50:	2320      	movs	r3, #32
 8007e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e56:	e17b      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007e58:	2340      	movs	r3, #64	; 0x40
 8007e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e5e:	e177      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007e60:	2380      	movs	r3, #128	; 0x80
 8007e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e66:	bf00      	nop
 8007e68:	e172      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a1c      	ldr	r2, [pc, #112]	; (8007ee0 <UART_SetConfig+0x360>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d144      	bne.n	8007efe <UART_SetConfig+0x37e>
 8007e74:	4b16      	ldr	r3, [pc, #88]	; (8007ed0 <UART_SetConfig+0x350>)
 8007e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e78:	f003 0307 	and.w	r3, r3, #7
 8007e7c:	2b05      	cmp	r3, #5
 8007e7e:	d839      	bhi.n	8007ef4 <UART_SetConfig+0x374>
 8007e80:	a201      	add	r2, pc, #4	; (adr r2, 8007e88 <UART_SetConfig+0x308>)
 8007e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e86:	bf00      	nop
 8007e88:	08007ea1 	.word	0x08007ea1
 8007e8c:	08007ea9 	.word	0x08007ea9
 8007e90:	08007eb1 	.word	0x08007eb1
 8007e94:	08007eb9 	.word	0x08007eb9
 8007e98:	08007ee5 	.word	0x08007ee5
 8007e9c:	08007eed 	.word	0x08007eed
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ea6:	e153      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007ea8:	2304      	movs	r3, #4
 8007eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eae:	e14f      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007eb0:	2308      	movs	r3, #8
 8007eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eb6:	e14b      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007eb8:	2310      	movs	r3, #16
 8007eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ebe:	e147      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007ec0:	cfff69f3 	.word	0xcfff69f3
 8007ec4:	58000c00 	.word	0x58000c00
 8007ec8:	11fff4ff 	.word	0x11fff4ff
 8007ecc:	40011000 	.word	0x40011000
 8007ed0:	58024400 	.word	0x58024400
 8007ed4:	40004400 	.word	0x40004400
 8007ed8:	40004800 	.word	0x40004800
 8007edc:	40004c00 	.word	0x40004c00
 8007ee0:	40005000 	.word	0x40005000
 8007ee4:	2320      	movs	r3, #32
 8007ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eea:	e131      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007eec:	2340      	movs	r3, #64	; 0x40
 8007eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ef2:	e12d      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007ef4:	2380      	movs	r3, #128	; 0x80
 8007ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007efa:	bf00      	nop
 8007efc:	e128      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4ab6      	ldr	r2, [pc, #728]	; (80081dc <UART_SetConfig+0x65c>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d178      	bne.n	8007ffa <UART_SetConfig+0x47a>
 8007f08:	4bb5      	ldr	r3, [pc, #724]	; (80081e0 <UART_SetConfig+0x660>)
 8007f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f10:	2b28      	cmp	r3, #40	; 0x28
 8007f12:	d86d      	bhi.n	8007ff0 <UART_SetConfig+0x470>
 8007f14:	a201      	add	r2, pc, #4	; (adr r2, 8007f1c <UART_SetConfig+0x39c>)
 8007f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1a:	bf00      	nop
 8007f1c:	08007fc1 	.word	0x08007fc1
 8007f20:	08007ff1 	.word	0x08007ff1
 8007f24:	08007ff1 	.word	0x08007ff1
 8007f28:	08007ff1 	.word	0x08007ff1
 8007f2c:	08007ff1 	.word	0x08007ff1
 8007f30:	08007ff1 	.word	0x08007ff1
 8007f34:	08007ff1 	.word	0x08007ff1
 8007f38:	08007ff1 	.word	0x08007ff1
 8007f3c:	08007fc9 	.word	0x08007fc9
 8007f40:	08007ff1 	.word	0x08007ff1
 8007f44:	08007ff1 	.word	0x08007ff1
 8007f48:	08007ff1 	.word	0x08007ff1
 8007f4c:	08007ff1 	.word	0x08007ff1
 8007f50:	08007ff1 	.word	0x08007ff1
 8007f54:	08007ff1 	.word	0x08007ff1
 8007f58:	08007ff1 	.word	0x08007ff1
 8007f5c:	08007fd1 	.word	0x08007fd1
 8007f60:	08007ff1 	.word	0x08007ff1
 8007f64:	08007ff1 	.word	0x08007ff1
 8007f68:	08007ff1 	.word	0x08007ff1
 8007f6c:	08007ff1 	.word	0x08007ff1
 8007f70:	08007ff1 	.word	0x08007ff1
 8007f74:	08007ff1 	.word	0x08007ff1
 8007f78:	08007ff1 	.word	0x08007ff1
 8007f7c:	08007fd9 	.word	0x08007fd9
 8007f80:	08007ff1 	.word	0x08007ff1
 8007f84:	08007ff1 	.word	0x08007ff1
 8007f88:	08007ff1 	.word	0x08007ff1
 8007f8c:	08007ff1 	.word	0x08007ff1
 8007f90:	08007ff1 	.word	0x08007ff1
 8007f94:	08007ff1 	.word	0x08007ff1
 8007f98:	08007ff1 	.word	0x08007ff1
 8007f9c:	08007fe1 	.word	0x08007fe1
 8007fa0:	08007ff1 	.word	0x08007ff1
 8007fa4:	08007ff1 	.word	0x08007ff1
 8007fa8:	08007ff1 	.word	0x08007ff1
 8007fac:	08007ff1 	.word	0x08007ff1
 8007fb0:	08007ff1 	.word	0x08007ff1
 8007fb4:	08007ff1 	.word	0x08007ff1
 8007fb8:	08007ff1 	.word	0x08007ff1
 8007fbc:	08007fe9 	.word	0x08007fe9
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fc6:	e0c3      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007fc8:	2304      	movs	r3, #4
 8007fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fce:	e0bf      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007fd0:	2308      	movs	r3, #8
 8007fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fd6:	e0bb      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007fd8:	2310      	movs	r3, #16
 8007fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fde:	e0b7      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007fe0:	2320      	movs	r3, #32
 8007fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fe6:	e0b3      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007fe8:	2340      	movs	r3, #64	; 0x40
 8007fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fee:	e0af      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007ff0:	2380      	movs	r3, #128	; 0x80
 8007ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ff6:	bf00      	nop
 8007ff8:	e0aa      	b.n	8008150 <UART_SetConfig+0x5d0>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a79      	ldr	r2, [pc, #484]	; (80081e4 <UART_SetConfig+0x664>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d132      	bne.n	800806a <UART_SetConfig+0x4ea>
 8008004:	4b76      	ldr	r3, [pc, #472]	; (80081e0 <UART_SetConfig+0x660>)
 8008006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008008:	f003 0307 	and.w	r3, r3, #7
 800800c:	2b05      	cmp	r3, #5
 800800e:	d827      	bhi.n	8008060 <UART_SetConfig+0x4e0>
 8008010:	a201      	add	r2, pc, #4	; (adr r2, 8008018 <UART_SetConfig+0x498>)
 8008012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008016:	bf00      	nop
 8008018:	08008031 	.word	0x08008031
 800801c:	08008039 	.word	0x08008039
 8008020:	08008041 	.word	0x08008041
 8008024:	08008049 	.word	0x08008049
 8008028:	08008051 	.word	0x08008051
 800802c:	08008059 	.word	0x08008059
 8008030:	2300      	movs	r3, #0
 8008032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008036:	e08b      	b.n	8008150 <UART_SetConfig+0x5d0>
 8008038:	2304      	movs	r3, #4
 800803a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800803e:	e087      	b.n	8008150 <UART_SetConfig+0x5d0>
 8008040:	2308      	movs	r3, #8
 8008042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008046:	e083      	b.n	8008150 <UART_SetConfig+0x5d0>
 8008048:	2310      	movs	r3, #16
 800804a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800804e:	e07f      	b.n	8008150 <UART_SetConfig+0x5d0>
 8008050:	2320      	movs	r3, #32
 8008052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008056:	e07b      	b.n	8008150 <UART_SetConfig+0x5d0>
 8008058:	2340      	movs	r3, #64	; 0x40
 800805a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800805e:	e077      	b.n	8008150 <UART_SetConfig+0x5d0>
 8008060:	2380      	movs	r3, #128	; 0x80
 8008062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008066:	bf00      	nop
 8008068:	e072      	b.n	8008150 <UART_SetConfig+0x5d0>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a5e      	ldr	r2, [pc, #376]	; (80081e8 <UART_SetConfig+0x668>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d132      	bne.n	80080da <UART_SetConfig+0x55a>
 8008074:	4b5a      	ldr	r3, [pc, #360]	; (80081e0 <UART_SetConfig+0x660>)
 8008076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008078:	f003 0307 	and.w	r3, r3, #7
 800807c:	2b05      	cmp	r3, #5
 800807e:	d827      	bhi.n	80080d0 <UART_SetConfig+0x550>
 8008080:	a201      	add	r2, pc, #4	; (adr r2, 8008088 <UART_SetConfig+0x508>)
 8008082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008086:	bf00      	nop
 8008088:	080080a1 	.word	0x080080a1
 800808c:	080080a9 	.word	0x080080a9
 8008090:	080080b1 	.word	0x080080b1
 8008094:	080080b9 	.word	0x080080b9
 8008098:	080080c1 	.word	0x080080c1
 800809c:	080080c9 	.word	0x080080c9
 80080a0:	2300      	movs	r3, #0
 80080a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080a6:	e053      	b.n	8008150 <UART_SetConfig+0x5d0>
 80080a8:	2304      	movs	r3, #4
 80080aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080ae:	e04f      	b.n	8008150 <UART_SetConfig+0x5d0>
 80080b0:	2308      	movs	r3, #8
 80080b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080b6:	e04b      	b.n	8008150 <UART_SetConfig+0x5d0>
 80080b8:	2310      	movs	r3, #16
 80080ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080be:	e047      	b.n	8008150 <UART_SetConfig+0x5d0>
 80080c0:	2320      	movs	r3, #32
 80080c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080c6:	e043      	b.n	8008150 <UART_SetConfig+0x5d0>
 80080c8:	2340      	movs	r3, #64	; 0x40
 80080ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080ce:	e03f      	b.n	8008150 <UART_SetConfig+0x5d0>
 80080d0:	2380      	movs	r3, #128	; 0x80
 80080d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080d6:	bf00      	nop
 80080d8:	e03a      	b.n	8008150 <UART_SetConfig+0x5d0>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a43      	ldr	r2, [pc, #268]	; (80081ec <UART_SetConfig+0x66c>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d132      	bne.n	800814a <UART_SetConfig+0x5ca>
 80080e4:	4b3e      	ldr	r3, [pc, #248]	; (80081e0 <UART_SetConfig+0x660>)
 80080e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080e8:	f003 0307 	and.w	r3, r3, #7
 80080ec:	2b05      	cmp	r3, #5
 80080ee:	d827      	bhi.n	8008140 <UART_SetConfig+0x5c0>
 80080f0:	a201      	add	r2, pc, #4	; (adr r2, 80080f8 <UART_SetConfig+0x578>)
 80080f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f6:	bf00      	nop
 80080f8:	08008111 	.word	0x08008111
 80080fc:	08008119 	.word	0x08008119
 8008100:	08008121 	.word	0x08008121
 8008104:	08008129 	.word	0x08008129
 8008108:	08008131 	.word	0x08008131
 800810c:	08008139 	.word	0x08008139
 8008110:	2302      	movs	r3, #2
 8008112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008116:	e01b      	b.n	8008150 <UART_SetConfig+0x5d0>
 8008118:	2304      	movs	r3, #4
 800811a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800811e:	e017      	b.n	8008150 <UART_SetConfig+0x5d0>
 8008120:	2308      	movs	r3, #8
 8008122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008126:	e013      	b.n	8008150 <UART_SetConfig+0x5d0>
 8008128:	2310      	movs	r3, #16
 800812a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800812e:	e00f      	b.n	8008150 <UART_SetConfig+0x5d0>
 8008130:	2320      	movs	r3, #32
 8008132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008136:	e00b      	b.n	8008150 <UART_SetConfig+0x5d0>
 8008138:	2340      	movs	r3, #64	; 0x40
 800813a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800813e:	e007      	b.n	8008150 <UART_SetConfig+0x5d0>
 8008140:	2380      	movs	r3, #128	; 0x80
 8008142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008146:	bf00      	nop
 8008148:	e002      	b.n	8008150 <UART_SetConfig+0x5d0>
 800814a:	2380      	movs	r3, #128	; 0x80
 800814c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a25      	ldr	r2, [pc, #148]	; (80081ec <UART_SetConfig+0x66c>)
 8008156:	4293      	cmp	r3, r2
 8008158:	f040 80b8 	bne.w	80082cc <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800815c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008160:	2b08      	cmp	r3, #8
 8008162:	d019      	beq.n	8008198 <UART_SetConfig+0x618>
 8008164:	2b08      	cmp	r3, #8
 8008166:	dc04      	bgt.n	8008172 <UART_SetConfig+0x5f2>
 8008168:	2b02      	cmp	r3, #2
 800816a:	d009      	beq.n	8008180 <UART_SetConfig+0x600>
 800816c:	2b04      	cmp	r3, #4
 800816e:	d00b      	beq.n	8008188 <UART_SetConfig+0x608>
 8008170:	e042      	b.n	80081f8 <UART_SetConfig+0x678>
 8008172:	2b20      	cmp	r3, #32
 8008174:	d02b      	beq.n	80081ce <UART_SetConfig+0x64e>
 8008176:	2b40      	cmp	r3, #64	; 0x40
 8008178:	d02c      	beq.n	80081d4 <UART_SetConfig+0x654>
 800817a:	2b10      	cmp	r3, #16
 800817c:	d014      	beq.n	80081a8 <UART_SetConfig+0x628>
 800817e:	e03b      	b.n	80081f8 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008180:	f7fd ff7a 	bl	8006078 <HAL_RCCEx_GetD3PCLK1Freq>
 8008184:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008186:	e03d      	b.n	8008204 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008188:	f107 0314 	add.w	r3, r7, #20
 800818c:	4618      	mov	r0, r3
 800818e:	f7fd ff89 	bl	80060a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008196:	e035      	b.n	8008204 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008198:	f107 0308 	add.w	r3, r7, #8
 800819c:	4618      	mov	r0, r3
 800819e:	f7fe f8cd 	bl	800633c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081a6:	e02d      	b.n	8008204 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081a8:	4b0d      	ldr	r3, [pc, #52]	; (80081e0 <UART_SetConfig+0x660>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 0320 	and.w	r3, r3, #32
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d009      	beq.n	80081c8 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80081b4:	4b0a      	ldr	r3, [pc, #40]	; (80081e0 <UART_SetConfig+0x660>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	08db      	lsrs	r3, r3, #3
 80081ba:	f003 0303 	and.w	r3, r3, #3
 80081be:	4a0c      	ldr	r2, [pc, #48]	; (80081f0 <UART_SetConfig+0x670>)
 80081c0:	fa22 f303 	lsr.w	r3, r2, r3
 80081c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80081c6:	e01d      	b.n	8008204 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 80081c8:	4b09      	ldr	r3, [pc, #36]	; (80081f0 <UART_SetConfig+0x670>)
 80081ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081cc:	e01a      	b.n	8008204 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80081ce:	4b09      	ldr	r3, [pc, #36]	; (80081f4 <UART_SetConfig+0x674>)
 80081d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081d2:	e017      	b.n	8008204 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081da:	e013      	b.n	8008204 <UART_SetConfig+0x684>
 80081dc:	40011400 	.word	0x40011400
 80081e0:	58024400 	.word	0x58024400
 80081e4:	40007800 	.word	0x40007800
 80081e8:	40007c00 	.word	0x40007c00
 80081ec:	58000c00 	.word	0x58000c00
 80081f0:	03d09000 	.word	0x03d09000
 80081f4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80081f8:	2300      	movs	r3, #0
 80081fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008202:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008206:	2b00      	cmp	r3, #0
 8008208:	f000 824d 	beq.w	80086a6 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008210:	4aad      	ldr	r2, [pc, #692]	; (80084c8 <UART_SetConfig+0x948>)
 8008212:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008216:	461a      	mov	r2, r3
 8008218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821a:	fbb3 f3f2 	udiv	r3, r3, r2
 800821e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	685a      	ldr	r2, [r3, #4]
 8008224:	4613      	mov	r3, r2
 8008226:	005b      	lsls	r3, r3, #1
 8008228:	4413      	add	r3, r2
 800822a:	6a3a      	ldr	r2, [r7, #32]
 800822c:	429a      	cmp	r2, r3
 800822e:	d305      	bcc.n	800823c <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008236:	6a3a      	ldr	r2, [r7, #32]
 8008238:	429a      	cmp	r2, r3
 800823a:	d903      	bls.n	8008244 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008242:	e230      	b.n	80086a6 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008246:	4618      	mov	r0, r3
 8008248:	f04f 0100 	mov.w	r1, #0
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008250:	4a9d      	ldr	r2, [pc, #628]	; (80084c8 <UART_SetConfig+0x948>)
 8008252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008256:	b29b      	uxth	r3, r3
 8008258:	f04f 0400 	mov.w	r4, #0
 800825c:	461a      	mov	r2, r3
 800825e:	4623      	mov	r3, r4
 8008260:	f7f8 f896 	bl	8000390 <__aeabi_uldivmod>
 8008264:	4603      	mov	r3, r0
 8008266:	460c      	mov	r4, r1
 8008268:	4619      	mov	r1, r3
 800826a:	4622      	mov	r2, r4
 800826c:	f04f 0300 	mov.w	r3, #0
 8008270:	f04f 0400 	mov.w	r4, #0
 8008274:	0214      	lsls	r4, r2, #8
 8008276:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800827a:	020b      	lsls	r3, r1, #8
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	6852      	ldr	r2, [r2, #4]
 8008280:	0852      	lsrs	r2, r2, #1
 8008282:	4611      	mov	r1, r2
 8008284:	f04f 0200 	mov.w	r2, #0
 8008288:	eb13 0b01 	adds.w	fp, r3, r1
 800828c:	eb44 0c02 	adc.w	ip, r4, r2
 8008290:	4658      	mov	r0, fp
 8008292:	4661      	mov	r1, ip
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	f04f 0400 	mov.w	r4, #0
 800829c:	461a      	mov	r2, r3
 800829e:	4623      	mov	r3, r4
 80082a0:	f7f8 f876 	bl	8000390 <__aeabi_uldivmod>
 80082a4:	4603      	mov	r3, r0
 80082a6:	460c      	mov	r4, r1
 80082a8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80082aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082b0:	d308      	bcc.n	80082c4 <UART_SetConfig+0x744>
 80082b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082b8:	d204      	bcs.n	80082c4 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082c0:	60da      	str	r2, [r3, #12]
 80082c2:	e1f0      	b.n	80086a6 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80082ca:	e1ec      	b.n	80086a6 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	69db      	ldr	r3, [r3, #28]
 80082d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082d4:	f040 8100 	bne.w	80084d8 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 80082d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80082dc:	2b40      	cmp	r3, #64	; 0x40
 80082de:	f200 80b7 	bhi.w	8008450 <UART_SetConfig+0x8d0>
 80082e2:	a201      	add	r2, pc, #4	; (adr r2, 80082e8 <UART_SetConfig+0x768>)
 80082e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e8:	080083ed 	.word	0x080083ed
 80082ec:	080083f5 	.word	0x080083f5
 80082f0:	08008451 	.word	0x08008451
 80082f4:	08008451 	.word	0x08008451
 80082f8:	080083fd 	.word	0x080083fd
 80082fc:	08008451 	.word	0x08008451
 8008300:	08008451 	.word	0x08008451
 8008304:	08008451 	.word	0x08008451
 8008308:	0800840d 	.word	0x0800840d
 800830c:	08008451 	.word	0x08008451
 8008310:	08008451 	.word	0x08008451
 8008314:	08008451 	.word	0x08008451
 8008318:	08008451 	.word	0x08008451
 800831c:	08008451 	.word	0x08008451
 8008320:	08008451 	.word	0x08008451
 8008324:	08008451 	.word	0x08008451
 8008328:	0800841d 	.word	0x0800841d
 800832c:	08008451 	.word	0x08008451
 8008330:	08008451 	.word	0x08008451
 8008334:	08008451 	.word	0x08008451
 8008338:	08008451 	.word	0x08008451
 800833c:	08008451 	.word	0x08008451
 8008340:	08008451 	.word	0x08008451
 8008344:	08008451 	.word	0x08008451
 8008348:	08008451 	.word	0x08008451
 800834c:	08008451 	.word	0x08008451
 8008350:	08008451 	.word	0x08008451
 8008354:	08008451 	.word	0x08008451
 8008358:	08008451 	.word	0x08008451
 800835c:	08008451 	.word	0x08008451
 8008360:	08008451 	.word	0x08008451
 8008364:	08008451 	.word	0x08008451
 8008368:	08008443 	.word	0x08008443
 800836c:	08008451 	.word	0x08008451
 8008370:	08008451 	.word	0x08008451
 8008374:	08008451 	.word	0x08008451
 8008378:	08008451 	.word	0x08008451
 800837c:	08008451 	.word	0x08008451
 8008380:	08008451 	.word	0x08008451
 8008384:	08008451 	.word	0x08008451
 8008388:	08008451 	.word	0x08008451
 800838c:	08008451 	.word	0x08008451
 8008390:	08008451 	.word	0x08008451
 8008394:	08008451 	.word	0x08008451
 8008398:	08008451 	.word	0x08008451
 800839c:	08008451 	.word	0x08008451
 80083a0:	08008451 	.word	0x08008451
 80083a4:	08008451 	.word	0x08008451
 80083a8:	08008451 	.word	0x08008451
 80083ac:	08008451 	.word	0x08008451
 80083b0:	08008451 	.word	0x08008451
 80083b4:	08008451 	.word	0x08008451
 80083b8:	08008451 	.word	0x08008451
 80083bc:	08008451 	.word	0x08008451
 80083c0:	08008451 	.word	0x08008451
 80083c4:	08008451 	.word	0x08008451
 80083c8:	08008451 	.word	0x08008451
 80083cc:	08008451 	.word	0x08008451
 80083d0:	08008451 	.word	0x08008451
 80083d4:	08008451 	.word	0x08008451
 80083d8:	08008451 	.word	0x08008451
 80083dc:	08008451 	.word	0x08008451
 80083e0:	08008451 	.word	0x08008451
 80083e4:	08008451 	.word	0x08008451
 80083e8:	08008449 	.word	0x08008449
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083ec:	f7fc ff2a 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 80083f0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80083f2:	e033      	b.n	800845c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083f4:	f7fc ff3c 	bl	8005270 <HAL_RCC_GetPCLK2Freq>
 80083f8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80083fa:	e02f      	b.n	800845c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083fc:	f107 0314 	add.w	r3, r7, #20
 8008400:	4618      	mov	r0, r3
 8008402:	f7fd fe4f 	bl	80060a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800840a:	e027      	b.n	800845c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800840c:	f107 0308 	add.w	r3, r7, #8
 8008410:	4618      	mov	r0, r3
 8008412:	f7fd ff93 	bl	800633c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800841a:	e01f      	b.n	800845c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800841c:	4b2b      	ldr	r3, [pc, #172]	; (80084cc <UART_SetConfig+0x94c>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 0320 	and.w	r3, r3, #32
 8008424:	2b00      	cmp	r3, #0
 8008426:	d009      	beq.n	800843c <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008428:	4b28      	ldr	r3, [pc, #160]	; (80084cc <UART_SetConfig+0x94c>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	08db      	lsrs	r3, r3, #3
 800842e:	f003 0303 	and.w	r3, r3, #3
 8008432:	4a27      	ldr	r2, [pc, #156]	; (80084d0 <UART_SetConfig+0x950>)
 8008434:	fa22 f303 	lsr.w	r3, r2, r3
 8008438:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800843a:	e00f      	b.n	800845c <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800843c:	4b24      	ldr	r3, [pc, #144]	; (80084d0 <UART_SetConfig+0x950>)
 800843e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008440:	e00c      	b.n	800845c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008442:	4b24      	ldr	r3, [pc, #144]	; (80084d4 <UART_SetConfig+0x954>)
 8008444:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008446:	e009      	b.n	800845c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008448:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800844c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800844e:	e005      	b.n	800845c <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8008450:	2300      	movs	r3, #0
 8008452:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800845a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800845c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845e:	2b00      	cmp	r3, #0
 8008460:	f000 8121 	beq.w	80086a6 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008468:	4a17      	ldr	r2, [pc, #92]	; (80084c8 <UART_SetConfig+0x948>)
 800846a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800846e:	461a      	mov	r2, r3
 8008470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008472:	fbb3 f3f2 	udiv	r3, r3, r2
 8008476:	005a      	lsls	r2, r3, #1
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	085b      	lsrs	r3, r3, #1
 800847e:	441a      	add	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	fbb2 f3f3 	udiv	r3, r2, r3
 8008488:	b29b      	uxth	r3, r3
 800848a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800848c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848e:	2b0f      	cmp	r3, #15
 8008490:	d916      	bls.n	80084c0 <UART_SetConfig+0x940>
 8008492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008498:	d212      	bcs.n	80084c0 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800849a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849c:	b29b      	uxth	r3, r3
 800849e:	f023 030f 	bic.w	r3, r3, #15
 80084a2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a6:	085b      	lsrs	r3, r3, #1
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	f003 0307 	and.w	r3, r3, #7
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084b2:	4313      	orrs	r3, r2
 80084b4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80084bc:	60da      	str	r2, [r3, #12]
 80084be:	e0f2      	b.n	80086a6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80084c6:	e0ee      	b.n	80086a6 <UART_SetConfig+0xb26>
 80084c8:	0800cf74 	.word	0x0800cf74
 80084cc:	58024400 	.word	0x58024400
 80084d0:	03d09000 	.word	0x03d09000
 80084d4:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 80084d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80084dc:	2b40      	cmp	r3, #64	; 0x40
 80084de:	f200 80b7 	bhi.w	8008650 <UART_SetConfig+0xad0>
 80084e2:	a201      	add	r2, pc, #4	; (adr r2, 80084e8 <UART_SetConfig+0x968>)
 80084e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e8:	080085ed 	.word	0x080085ed
 80084ec:	080085f5 	.word	0x080085f5
 80084f0:	08008651 	.word	0x08008651
 80084f4:	08008651 	.word	0x08008651
 80084f8:	080085fd 	.word	0x080085fd
 80084fc:	08008651 	.word	0x08008651
 8008500:	08008651 	.word	0x08008651
 8008504:	08008651 	.word	0x08008651
 8008508:	0800860d 	.word	0x0800860d
 800850c:	08008651 	.word	0x08008651
 8008510:	08008651 	.word	0x08008651
 8008514:	08008651 	.word	0x08008651
 8008518:	08008651 	.word	0x08008651
 800851c:	08008651 	.word	0x08008651
 8008520:	08008651 	.word	0x08008651
 8008524:	08008651 	.word	0x08008651
 8008528:	0800861d 	.word	0x0800861d
 800852c:	08008651 	.word	0x08008651
 8008530:	08008651 	.word	0x08008651
 8008534:	08008651 	.word	0x08008651
 8008538:	08008651 	.word	0x08008651
 800853c:	08008651 	.word	0x08008651
 8008540:	08008651 	.word	0x08008651
 8008544:	08008651 	.word	0x08008651
 8008548:	08008651 	.word	0x08008651
 800854c:	08008651 	.word	0x08008651
 8008550:	08008651 	.word	0x08008651
 8008554:	08008651 	.word	0x08008651
 8008558:	08008651 	.word	0x08008651
 800855c:	08008651 	.word	0x08008651
 8008560:	08008651 	.word	0x08008651
 8008564:	08008651 	.word	0x08008651
 8008568:	08008643 	.word	0x08008643
 800856c:	08008651 	.word	0x08008651
 8008570:	08008651 	.word	0x08008651
 8008574:	08008651 	.word	0x08008651
 8008578:	08008651 	.word	0x08008651
 800857c:	08008651 	.word	0x08008651
 8008580:	08008651 	.word	0x08008651
 8008584:	08008651 	.word	0x08008651
 8008588:	08008651 	.word	0x08008651
 800858c:	08008651 	.word	0x08008651
 8008590:	08008651 	.word	0x08008651
 8008594:	08008651 	.word	0x08008651
 8008598:	08008651 	.word	0x08008651
 800859c:	08008651 	.word	0x08008651
 80085a0:	08008651 	.word	0x08008651
 80085a4:	08008651 	.word	0x08008651
 80085a8:	08008651 	.word	0x08008651
 80085ac:	08008651 	.word	0x08008651
 80085b0:	08008651 	.word	0x08008651
 80085b4:	08008651 	.word	0x08008651
 80085b8:	08008651 	.word	0x08008651
 80085bc:	08008651 	.word	0x08008651
 80085c0:	08008651 	.word	0x08008651
 80085c4:	08008651 	.word	0x08008651
 80085c8:	08008651 	.word	0x08008651
 80085cc:	08008651 	.word	0x08008651
 80085d0:	08008651 	.word	0x08008651
 80085d4:	08008651 	.word	0x08008651
 80085d8:	08008651 	.word	0x08008651
 80085dc:	08008651 	.word	0x08008651
 80085e0:	08008651 	.word	0x08008651
 80085e4:	08008651 	.word	0x08008651
 80085e8:	08008649 	.word	0x08008649
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085ec:	f7fc fe2a 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 80085f0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80085f2:	e033      	b.n	800865c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085f4:	f7fc fe3c 	bl	8005270 <HAL_RCC_GetPCLK2Freq>
 80085f8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80085fa:	e02f      	b.n	800865c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085fc:	f107 0314 	add.w	r3, r7, #20
 8008600:	4618      	mov	r0, r3
 8008602:	f7fd fd4f 	bl	80060a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800860a:	e027      	b.n	800865c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800860c:	f107 0308 	add.w	r3, r7, #8
 8008610:	4618      	mov	r0, r3
 8008612:	f7fd fe93 	bl	800633c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800861a:	e01f      	b.n	800865c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800861c:	4b2c      	ldr	r3, [pc, #176]	; (80086d0 <UART_SetConfig+0xb50>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 0320 	and.w	r3, r3, #32
 8008624:	2b00      	cmp	r3, #0
 8008626:	d009      	beq.n	800863c <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008628:	4b29      	ldr	r3, [pc, #164]	; (80086d0 <UART_SetConfig+0xb50>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	08db      	lsrs	r3, r3, #3
 800862e:	f003 0303 	and.w	r3, r3, #3
 8008632:	4a28      	ldr	r2, [pc, #160]	; (80086d4 <UART_SetConfig+0xb54>)
 8008634:	fa22 f303 	lsr.w	r3, r2, r3
 8008638:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800863a:	e00f      	b.n	800865c <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800863c:	4b25      	ldr	r3, [pc, #148]	; (80086d4 <UART_SetConfig+0xb54>)
 800863e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008640:	e00c      	b.n	800865c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008642:	4b25      	ldr	r3, [pc, #148]	; (80086d8 <UART_SetConfig+0xb58>)
 8008644:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008646:	e009      	b.n	800865c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008648:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800864c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800864e:	e005      	b.n	800865c <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8008650:	2300      	movs	r3, #0
 8008652:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800865a:	bf00      	nop
    }

    if (pclk != 0U)
 800865c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865e:	2b00      	cmp	r3, #0
 8008660:	d021      	beq.n	80086a6 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008666:	4a1d      	ldr	r2, [pc, #116]	; (80086dc <UART_SetConfig+0xb5c>)
 8008668:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800866c:	461a      	mov	r2, r3
 800866e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008670:	fbb3 f2f2 	udiv	r2, r3, r2
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	085b      	lsrs	r3, r3, #1
 800867a:	441a      	add	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	fbb2 f3f3 	udiv	r3, r2, r3
 8008684:	b29b      	uxth	r3, r3
 8008686:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868a:	2b0f      	cmp	r3, #15
 800868c:	d908      	bls.n	80086a0 <UART_SetConfig+0xb20>
 800868e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008694:	d204      	bcs.n	80086a0 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800869c:	60da      	str	r2, [r3, #12]
 800869e:	e002      	b.n	80086a6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2201      	movs	r2, #1
 80086aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80086c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3738      	adds	r7, #56	; 0x38
 80086ca:	46bd      	mov	sp, r7
 80086cc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80086d0:	58024400 	.word	0x58024400
 80086d4:	03d09000 	.word	0x03d09000
 80086d8:	003d0900 	.word	0x003d0900
 80086dc:	0800cf74 	.word	0x0800cf74

080086e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ec:	f003 0301 	and.w	r3, r3, #1
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00a      	beq.n	800870a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	430a      	orrs	r2, r1
 8008708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870e:	f003 0302 	and.w	r3, r3, #2
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00a      	beq.n	800872c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	430a      	orrs	r2, r1
 800872a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008730:	f003 0304 	and.w	r3, r3, #4
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00a      	beq.n	800874e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	430a      	orrs	r2, r1
 800874c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008752:	f003 0308 	and.w	r3, r3, #8
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00a      	beq.n	8008770 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	430a      	orrs	r2, r1
 800876e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008774:	f003 0310 	and.w	r3, r3, #16
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00a      	beq.n	8008792 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	430a      	orrs	r2, r1
 8008790:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008796:	f003 0320 	and.w	r3, r3, #32
 800879a:	2b00      	cmp	r3, #0
 800879c:	d00a      	beq.n	80087b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	430a      	orrs	r2, r1
 80087b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d01a      	beq.n	80087f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	430a      	orrs	r2, r1
 80087d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087de:	d10a      	bne.n	80087f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	430a      	orrs	r2, r1
 80087f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00a      	beq.n	8008818 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	430a      	orrs	r2, r1
 8008816:	605a      	str	r2, [r3, #4]
  }
}
 8008818:	bf00      	nop
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b086      	sub	sp, #24
 8008828:	af02      	add	r7, sp, #8
 800882a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008834:	f7f8 ff28 	bl	8001688 <HAL_GetTick>
 8008838:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 0308 	and.w	r3, r3, #8
 8008844:	2b08      	cmp	r3, #8
 8008846:	d10e      	bne.n	8008866 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008848:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800884c:	9300      	str	r3, [sp, #0]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2200      	movs	r2, #0
 8008852:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 f82c 	bl	80088b4 <UART_WaitOnFlagUntilTimeout>
 800885c:	4603      	mov	r3, r0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d001      	beq.n	8008866 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008862:	2303      	movs	r3, #3
 8008864:	e022      	b.n	80088ac <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 0304 	and.w	r3, r3, #4
 8008870:	2b04      	cmp	r3, #4
 8008872:	d10e      	bne.n	8008892 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008874:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 f816 	bl	80088b4 <UART_WaitOnFlagUntilTimeout>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800888e:	2303      	movs	r3, #3
 8008890:	e00c      	b.n	80088ac <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2220      	movs	r2, #32
 8008896:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2220      	movs	r2, #32
 800889e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	603b      	str	r3, [r7, #0]
 80088c0:	4613      	mov	r3, r2
 80088c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088c4:	e062      	b.n	800898c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088cc:	d05e      	beq.n	800898c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088ce:	f7f8 fedb 	bl	8001688 <HAL_GetTick>
 80088d2:	4602      	mov	r2, r0
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	69ba      	ldr	r2, [r7, #24]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d302      	bcc.n	80088e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d11d      	bne.n	8008920 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80088f2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	689a      	ldr	r2, [r3, #8]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f022 0201 	bic.w	r2, r2, #1
 8008902:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2220      	movs	r2, #32
 8008908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2220      	movs	r2, #32
 8008910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800891c:	2303      	movs	r3, #3
 800891e:	e045      	b.n	80089ac <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 0304 	and.w	r3, r3, #4
 800892a:	2b00      	cmp	r3, #0
 800892c:	d02e      	beq.n	800898c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	69db      	ldr	r3, [r3, #28]
 8008934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800893c:	d126      	bne.n	800898c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008946:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008956:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	689a      	ldr	r2, [r3, #8]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f022 0201 	bic.w	r2, r2, #1
 8008966:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2220      	movs	r2, #32
 800896c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2220      	movs	r2, #32
 8008974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2220      	movs	r2, #32
 800897c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8008988:	2303      	movs	r3, #3
 800898a:	e00f      	b.n	80089ac <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	69da      	ldr	r2, [r3, #28]
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	4013      	ands	r3, r2
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	429a      	cmp	r2, r3
 800899a:	bf0c      	ite	eq
 800899c:	2301      	moveq	r3, #1
 800899e:	2300      	movne	r3, #0
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	461a      	mov	r2, r3
 80089a4:	79fb      	ldrb	r3, [r7, #7]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d08d      	beq.n	80088c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d101      	bne.n	80089ca <HAL_UARTEx_DisableFifoMode+0x16>
 80089c6:	2302      	movs	r3, #2
 80089c8:	e027      	b.n	8008a1a <HAL_UARTEx_DisableFifoMode+0x66>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2224      	movs	r2, #36	; 0x24
 80089d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f022 0201 	bic.w	r2, r2, #1
 80089f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80089f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2220      	movs	r2, #32
 8008a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3714      	adds	r7, #20
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr

08008a26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b084      	sub	sp, #16
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
 8008a2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d101      	bne.n	8008a3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a3a:	2302      	movs	r3, #2
 8008a3c:	e02d      	b.n	8008a9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2201      	movs	r2, #1
 8008a42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2224      	movs	r2, #36	; 0x24
 8008a4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f022 0201 	bic.w	r2, r2, #1
 8008a64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	683a      	ldr	r2, [r7, #0]
 8008a76:	430a      	orrs	r2, r1
 8008a78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 f850 	bl	8008b20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2220      	movs	r2, #32
 8008a8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b084      	sub	sp, #16
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
 8008aaa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d101      	bne.n	8008aba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008ab6:	2302      	movs	r3, #2
 8008ab8:	e02d      	b.n	8008b16 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2201      	movs	r2, #1
 8008abe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2224      	movs	r2, #36	; 0x24
 8008ac6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f022 0201 	bic.w	r2, r2, #1
 8008ae0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	683a      	ldr	r2, [r7, #0]
 8008af2:	430a      	orrs	r2, r1
 8008af4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f812 	bl	8008b20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2220      	movs	r2, #32
 8008b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
	...

08008b20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b089      	sub	sp, #36	; 0x24
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008b28:	4a2f      	ldr	r2, [pc, #188]	; (8008be8 <UARTEx_SetNbDataToProcess+0xc8>)
 8008b2a:	f107 0314 	add.w	r3, r7, #20
 8008b2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008b32:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008b36:	4a2d      	ldr	r2, [pc, #180]	; (8008bec <UARTEx_SetNbDataToProcess+0xcc>)
 8008b38:	f107 030c 	add.w	r3, r7, #12
 8008b3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008b40:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d108      	bne.n	8008b5e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b5c:	e03d      	b.n	8008bda <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b5e:	2310      	movs	r3, #16
 8008b60:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b62:	2310      	movs	r3, #16
 8008b64:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	0e5b      	lsrs	r3, r3, #25
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	f003 0307 	and.w	r3, r3, #7
 8008b74:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	0f5b      	lsrs	r3, r3, #29
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	f003 0307 	and.w	r3, r3, #7
 8008b84:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008b86:	7fbb      	ldrb	r3, [r7, #30]
 8008b88:	7f3a      	ldrb	r2, [r7, #28]
 8008b8a:	f107 0120 	add.w	r1, r7, #32
 8008b8e:	440a      	add	r2, r1
 8008b90:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008b94:	fb02 f303 	mul.w	r3, r2, r3
 8008b98:	7f3a      	ldrb	r2, [r7, #28]
 8008b9a:	f107 0120 	add.w	r1, r7, #32
 8008b9e:	440a      	add	r2, r1
 8008ba0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008ba4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008bb0:	7ffb      	ldrb	r3, [r7, #31]
 8008bb2:	7f7a      	ldrb	r2, [r7, #29]
 8008bb4:	f107 0120 	add.w	r1, r7, #32
 8008bb8:	440a      	add	r2, r1
 8008bba:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008bbe:	fb02 f303 	mul.w	r3, r2, r3
 8008bc2:	7f7a      	ldrb	r2, [r7, #29]
 8008bc4:	f107 0120 	add.w	r1, r7, #32
 8008bc8:	440a      	add	r2, r1
 8008bca:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008bce:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008bda:	bf00      	nop
 8008bdc:	3724      	adds	r7, #36	; 0x24
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	0800cf08 	.word	0x0800cf08
 8008bec:	0800cf10 	.word	0x0800cf10

08008bf0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008bf4:	4904      	ldr	r1, [pc, #16]	; (8008c08 <MX_FATFS_Init+0x18>)
 8008bf6:	4805      	ldr	r0, [pc, #20]	; (8008c0c <MX_FATFS_Init+0x1c>)
 8008bf8:	f003 fc74 	bl	800c4e4 <FATFS_LinkDriver>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	461a      	mov	r2, r3
 8008c00:	4b03      	ldr	r3, [pc, #12]	; (8008c10 <MX_FATFS_Init+0x20>)
 8008c02:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008c04:	bf00      	nop
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	24000aac 	.word	0x24000aac
 8008c0c:	24000014 	.word	0x24000014
 8008c10:	24000ab0 	.word	0x24000ab0

08008c14 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008c14:	b480      	push	{r7}
 8008c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008c18:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <_Z15USER_initializeh>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
    return USER_SPI_initialize(pdrv);
 8008c2e:	79fb      	ldrb	r3, [r7, #7]
 8008c30:	4618      	mov	r0, r3
 8008c32:	f000 fa9d 	bl	8009170 <_Z19USER_SPI_initializeh>
 8008c36:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3708      	adds	r7, #8
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <_Z11USER_statush>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	4603      	mov	r3, r0
 8008c48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
    return USER_SPI_status(pdrv);
 8008c4a:	79fb      	ldrb	r3, [r7, #7]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 fb97 	bl	8009380 <_Z15USER_SPI_statush>
 8008c52:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3708      	adds	r7, #8
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <_Z9USER_readhPhmj>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60b9      	str	r1, [r7, #8]
 8008c64:	607a      	str	r2, [r7, #4]
 8008c66:	603b      	str	r3, [r7, #0]
 8008c68:	4603      	mov	r3, r0
 8008c6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
    return USER_SPI_read(pdrv, buff, sector, count);
 8008c6c:	7bf8      	ldrb	r0, [r7, #15]
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	68b9      	ldr	r1, [r7, #8]
 8008c74:	f000 fb9a 	bl	80093ac <_Z13USER_SPI_readhPhmj>
 8008c78:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <_Z10USER_writehPKhmj>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b084      	sub	sp, #16
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
 8008c8c:	603b      	str	r3, [r7, #0]
 8008c8e:	4603      	mov	r3, r0
 8008c90:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
    return USER_SPI_write(pdrv, buff, sector, count);
 8008c92:	7bf8      	ldrb	r0, [r7, #15]
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	68b9      	ldr	r1, [r7, #8]
 8008c9a:	f000 fc07 	bl	80094ac <_Z14USER_SPI_writehPKhmj>
 8008c9e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <_Z14USER_write_dmahPKhmj>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60b9      	str	r1, [r7, #8]
 8008cb0:	607a      	str	r2, [r7, #4]
 8008cb2:	603b      	str	r3, [r7, #0]
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
    return USER_SPI_write_dma(pdrv, buff, sector, count);
 8008cb8:	7bf8      	ldrb	r0, [r7, #15]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	68b9      	ldr	r1, [r7, #8]
 8008cc0:	f000 fc94 	bl	80095ec <_Z18USER_SPI_write_dmahPKhmj>
 8008cc4:	4603      	mov	r3, r0
//    return USER_SPI_write_dma(pdrv, buff, sector, count);
  /* USER CODE END WRITE */
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <_Z10USER_ioctlhhPv>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b082      	sub	sp, #8
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	603a      	str	r2, [r7, #0]
 8008cd8:	71fb      	strb	r3, [r7, #7]
 8008cda:	460b      	mov	r3, r1
 8008cdc:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8008cde:	79b9      	ldrb	r1, [r7, #6]
 8008ce0:	79fb      	ldrb	r3, [r7, #7]
 8008ce2:	683a      	ldr	r2, [r7, #0]
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f000 fdcf 	bl	8009888 <_Z14USER_SPI_ioctlhhPv>
 8008cea:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3708      	adds	r7, #8
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <_Z12SPI_Timer_Onm>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8008cfc:	f7f8 fcc4 	bl	8001688 <HAL_GetTick>
 8008d00:	4602      	mov	r2, r0
 8008d02:	4b04      	ldr	r3, [pc, #16]	; (8008d14 <_Z12SPI_Timer_Onm+0x20>)
 8008d04:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8008d06:	4a04      	ldr	r2, [pc, #16]	; (8008d18 <_Z12SPI_Timer_Onm+0x24>)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6013      	str	r3, [r2, #0]
}
 8008d0c:	bf00      	nop
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	24000a64 	.word	0x24000a64
 8008d18:	24000a68 	.word	0x24000a68

08008d1c <_Z16SPI_Timer_Statusv>:

uint8_t SPI_Timer_Status() {
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8008d20:	f7f8 fcb2 	bl	8001688 <HAL_GetTick>
 8008d24:	4602      	mov	r2, r0
 8008d26:	4b06      	ldr	r3, [pc, #24]	; (8008d40 <_Z16SPI_Timer_Statusv+0x24>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	1ad2      	subs	r2, r2, r3
 8008d2c:	4b05      	ldr	r3, [pc, #20]	; (8008d44 <_Z16SPI_Timer_Statusv+0x28>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	bf34      	ite	cc
 8008d34:	2301      	movcc	r3, #1
 8008d36:	2300      	movcs	r3, #0
 8008d38:	b2db      	uxtb	r3, r3
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	24000a64 	.word	0x24000a64
 8008d44:	24000a68 	.word	0x24000a68

08008d48 <_ZL8xchg_spih>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b086      	sub	sp, #24
 8008d4c:	af02      	add	r7, sp, #8
 8008d4e:	4603      	mov	r3, r0
 8008d50:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8008d52:	f107 020f 	add.w	r2, r7, #15
 8008d56:	1df9      	adds	r1, r7, #7
 8008d58:	2332      	movs	r3, #50	; 0x32
 8008d5a:	9300      	str	r3, [sp, #0]
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	4804      	ldr	r0, [pc, #16]	; (8008d70 <_ZL8xchg_spih+0x28>)
 8008d60:	f7fd fe94 	bl	8006a8c <HAL_SPI_TransmitReceive>
    return rxDat;
 8008d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	240000b0 	.word	0x240000b0

08008d74 <_ZL14rcvr_spi_multiPhj>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8008d74:	b590      	push	{r4, r7, lr}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8008d7e:	2300      	movs	r3, #0
 8008d80:	60fb      	str	r3, [r7, #12]
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d20b      	bcs.n	8008da2 <_ZL14rcvr_spi_multiPhj+0x2e>
		*(buff+i) = xchg_spi(0xFF);
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	18d4      	adds	r4, r2, r3
 8008d90:	20ff      	movs	r0, #255	; 0xff
 8008d92:	f7ff ffd9 	bl	8008d48 <_ZL8xchg_spih>
 8008d96:	4603      	mov	r3, r0
 8008d98:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	60fb      	str	r3, [r7, #12]
 8008da0:	e7ef      	b.n	8008d82 <_ZL14rcvr_spi_multiPhj+0xe>
	}
}
 8008da2:	bf00      	nop
 8008da4:	3714      	adds	r7, #20
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd90      	pop	{r4, r7, pc}

08008daa <_ZL14xmit_spi_multiPKhj>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b084      	sub	sp, #16
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8008db4:	2300      	movs	r3, #0
 8008db6:	60fb      	str	r3, [r7, #12]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d20a      	bcs.n	8008dd6 <_ZL14xmit_spi_multiPKhj+0x2c>
		xchg_spi(*(buff+i));
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7ff ffbd 	bl	8008d48 <_ZL8xchg_spih>
	for(UINT i=0; i<btx; i++) {
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	60fb      	str	r3, [r7, #12]
 8008dd4:	e7f0      	b.n	8008db8 <_ZL14xmit_spi_multiPKhj+0xe>
	}
}
 8008dd6:	bf00      	nop
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <_ZL10wait_readyj>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b086      	sub	sp, #24
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8008de6:	f7f8 fc4f 	bl	8001688 <HAL_GetTick>
 8008dea:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8008df0:	20ff      	movs	r0, #255	; 0xff
 8008df2:	f7ff ffa9 	bl	8008d48 <_ZL8xchg_spih>
 8008df6:	4603      	mov	r3, r0
 8008df8:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8008dfa:	7bfb      	ldrb	r3, [r7, #15]
 8008dfc:	2bff      	cmp	r3, #255	; 0xff
 8008dfe:	d009      	beq.n	8008e14 <_ZL10wait_readyj+0x36>
 8008e00:	f7f8 fc42 	bl	8001688 <HAL_GetTick>
 8008e04:	4602      	mov	r2, r0
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	693a      	ldr	r2, [r7, #16]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d901      	bls.n	8008e14 <_ZL10wait_readyj+0x36>
 8008e10:	2301      	movs	r3, #1
 8008e12:	e000      	b.n	8008e16 <_ZL10wait_readyj+0x38>
 8008e14:	2300      	movs	r3, #0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d000      	beq.n	8008e1c <_ZL10wait_readyj+0x3e>
	do {
 8008e1a:	e7e9      	b.n	8008df0 <_ZL10wait_readyj+0x12>

	return (d == 0xFF) ? 1 : 0;
 8008e1c:	7bfb      	ldrb	r3, [r7, #15]
 8008e1e:	2bff      	cmp	r3, #255	; 0xff
 8008e20:	d101      	bne.n	8008e26 <_ZL10wait_readyj+0x48>
 8008e22:	2301      	movs	r3, #1
 8008e24:	e000      	b.n	8008e28 <_ZL10wait_readyj+0x4a>
 8008e26:	2300      	movs	r3, #0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3718      	adds	r7, #24
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <_ZL11despiselectv>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8008e34:	2201      	movs	r2, #1
 8008e36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e3a:	4804      	ldr	r0, [pc, #16]	; (8008e4c <_ZL11despiselectv+0x1c>)
 8008e3c:	f7fb fa46 	bl	80042cc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8008e40:	20ff      	movs	r0, #255	; 0xff
 8008e42:	f7ff ff81 	bl	8008d48 <_ZL8xchg_spih>

}
 8008e46:	bf00      	nop
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	58020800 	.word	0x58020800

08008e50 <_ZL9spiselectv>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8008e54:	2200      	movs	r2, #0
 8008e56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e5a:	480c      	ldr	r0, [pc, #48]	; (8008e8c <_ZL9spiselectv+0x3c>)
 8008e5c:	f7fb fa36 	bl	80042cc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8008e60:	20ff      	movs	r0, #255	; 0xff
 8008e62:	f7ff ff71 	bl	8008d48 <_ZL8xchg_spih>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8008e66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008e6a:	f7ff ffb8 	bl	8008dde <_ZL10wait_readyj>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	bf14      	ite	ne
 8008e74:	2301      	movne	r3, #1
 8008e76:	2300      	moveq	r3, #0
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d001      	beq.n	8008e82 <_ZL9spiselectv+0x32>
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e002      	b.n	8008e88 <_ZL9spiselectv+0x38>

	despiselect();
 8008e82:	f7ff ffd5 	bl	8008e30 <_ZL11despiselectv>
	return 0;	/* Timeout */
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	58020800 	.word	0x58020800

08008e90 <_ZL14rcvr_datablockPhj>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8008e9a:	20c8      	movs	r0, #200	; 0xc8
 8008e9c:	f7ff ff2a 	bl	8008cf4 <_Z12SPI_Timer_Onm>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8008ea0:	20ff      	movs	r0, #255	; 0xff
 8008ea2:	f7ff ff51 	bl	8008d48 <_ZL8xchg_spih>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8008eaa:	7bfb      	ldrb	r3, [r7, #15]
 8008eac:	2bff      	cmp	r3, #255	; 0xff
 8008eae:	d106      	bne.n	8008ebe <_ZL14rcvr_datablockPhj+0x2e>
 8008eb0:	f7ff ff34 	bl	8008d1c <_Z16SPI_Timer_Statusv>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d001      	beq.n	8008ebe <_ZL14rcvr_datablockPhj+0x2e>
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e000      	b.n	8008ec0 <_ZL14rcvr_datablockPhj+0x30>
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d000      	beq.n	8008ec6 <_ZL14rcvr_datablockPhj+0x36>
	do {							/* Wait for DataStart token in timeout of 200ms */
 8008ec4:	e7ec      	b.n	8008ea0 <_ZL14rcvr_datablockPhj+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8008ec6:	7bfb      	ldrb	r3, [r7, #15]
 8008ec8:	2bfe      	cmp	r3, #254	; 0xfe
 8008eca:	d001      	beq.n	8008ed0 <_ZL14rcvr_datablockPhj+0x40>
 8008ecc:	2300      	movs	r3, #0
 8008ece:	e00a      	b.n	8008ee6 <_ZL14rcvr_datablockPhj+0x56>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8008ed0:	6839      	ldr	r1, [r7, #0]
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f7ff ff4e 	bl	8008d74 <_ZL14rcvr_spi_multiPhj>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8008ed8:	20ff      	movs	r0, #255	; 0xff
 8008eda:	f7ff ff35 	bl	8008d48 <_ZL8xchg_spih>
 8008ede:	20ff      	movs	r0, #255	; 0xff
 8008ee0:	f7ff ff32 	bl	8008d48 <_ZL8xchg_spih>

	return 1;						/* Function succeeded */
 8008ee4:	2301      	movs	r3, #1
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <_ZL14xmit_datablockPKhh>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b084      	sub	sp, #16
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008efa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008efe:	f7ff ff6e 	bl	8008dde <_ZL10wait_readyj>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	bf0c      	ite	eq
 8008f08:	2301      	moveq	r3, #1
 8008f0a:	2300      	movne	r3, #0
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d001      	beq.n	8008f16 <_ZL14xmit_datablockPKhh+0x28>
 8008f12:	2300      	movs	r3, #0
 8008f14:	e01e      	b.n	8008f54 <_ZL14xmit_datablockPKhh+0x66>

	xchg_spi(token);					/* Send token */
 8008f16:	78fb      	ldrb	r3, [r7, #3]
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7ff ff15 	bl	8008d48 <_ZL8xchg_spih>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008f1e:	78fb      	ldrb	r3, [r7, #3]
 8008f20:	2bfd      	cmp	r3, #253	; 0xfd
 8008f22:	d016      	beq.n	8008f52 <_ZL14xmit_datablockPKhh+0x64>
		xmit_spi_multi(buff, 512);		/* Data */
 8008f24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f7ff ff3e 	bl	8008daa <_ZL14xmit_spi_multiPKhj>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008f2e:	20ff      	movs	r0, #255	; 0xff
 8008f30:	f7ff ff0a 	bl	8008d48 <_ZL8xchg_spih>
 8008f34:	20ff      	movs	r0, #255	; 0xff
 8008f36:	f7ff ff07 	bl	8008d48 <_ZL8xchg_spih>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8008f3a:	20ff      	movs	r0, #255	; 0xff
 8008f3c:	f7ff ff04 	bl	8008d48 <_ZL8xchg_spih>
 8008f40:	4603      	mov	r3, r0
 8008f42:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8008f44:	7bfb      	ldrb	r3, [r7, #15]
 8008f46:	f003 031f 	and.w	r3, r3, #31
 8008f4a:	2b05      	cmp	r3, #5
 8008f4c:	d001      	beq.n	8008f52 <_ZL14xmit_datablockPKhh+0x64>
 8008f4e:	2300      	movs	r3, #0
 8008f50:	e000      	b.n	8008f54 <_ZL14xmit_datablockPKhh+0x66>
	}
	return 1;
 8008f52:	2301      	movs	r3, #1
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <_ZL18xmit_datablock_dmaPKhh>:
static
int xmit_datablock_dma (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	460b      	mov	r3, r1
 8008f66:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008f68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008f6c:	f7ff ff37 	bl	8008dde <_ZL10wait_readyj>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	bf0c      	ite	eq
 8008f76:	2301      	moveq	r3, #1
 8008f78:	2300      	movne	r3, #0
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d001      	beq.n	8008f84 <_ZL18xmit_datablock_dmaPKhh+0x28>
 8008f80:	2300      	movs	r3, #0
 8008f82:	e022      	b.n	8008fca <_ZL18xmit_datablock_dmaPKhh+0x6e>

	xchg_spi(token);					/* Send token */
 8008f84:	78fb      	ldrb	r3, [r7, #3]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7ff fede 	bl	8008d48 <_ZL8xchg_spih>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008f8c:	78fb      	ldrb	r3, [r7, #3]
 8008f8e:	2bfd      	cmp	r3, #253	; 0xfd
 8008f90:	d01a      	beq.n	8008fc8 <_ZL18xmit_datablock_dmaPKhh+0x6c>
		HAL_SPI_Transmit_DMA(&SD_SPI_HANDLE, (uint8_t*)buff, 512);
 8008f92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f96:	6879      	ldr	r1, [r7, #4]
 8008f98:	480e      	ldr	r0, [pc, #56]	; (8008fd4 <_ZL18xmit_datablock_dmaPKhh+0x78>)
 8008f9a:	f7fe f863 	bl	8007064 <HAL_SPI_Transmit_DMA>
		HAL_Delay(15);//15
 8008f9e:	200f      	movs	r0, #15
 8008fa0:	f7f8 fb7e 	bl	80016a0 <HAL_Delay>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008fa4:	20ff      	movs	r0, #255	; 0xff
 8008fa6:	f7ff fecf 	bl	8008d48 <_ZL8xchg_spih>
 8008faa:	20ff      	movs	r0, #255	; 0xff
 8008fac:	f7ff fecc 	bl	8008d48 <_ZL8xchg_spih>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8008fb0:	20ff      	movs	r0, #255	; 0xff
 8008fb2:	f7ff fec9 	bl	8008d48 <_ZL8xchg_spih>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8008fba:	7bfb      	ldrb	r3, [r7, #15]
 8008fbc:	f003 031f 	and.w	r3, r3, #31
 8008fc0:	2b05      	cmp	r3, #5
 8008fc2:	d001      	beq.n	8008fc8 <_ZL18xmit_datablock_dmaPKhh+0x6c>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	e000      	b.n	8008fca <_ZL18xmit_datablock_dmaPKhh+0x6e>
	}
	return 1;
 8008fc8:	2301      	movs	r3, #1
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	240000b0 	.word	0x240000b0

08008fd8 <_ZN6FatDMA14xmit_datablockEPKhh>:
// Correct class based implementation: Start the DMA and exit
int FatDMA::xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b086      	sub	sp, #24
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	71fb      	strb	r3, [r7, #7]
	BYTE resp;
	HAL_StatusTypeDef ret;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008fe6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008fea:	f7ff fef8 	bl	8008dde <_ZL10wait_readyj>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	bf0c      	ite	eq
 8008ff4:	2301      	moveq	r3, #1
 8008ff6:	2300      	movne	r3, #0
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d001      	beq.n	8009002 <_ZN6FatDMA14xmit_datablockEPKhh+0x2a>
 8008ffe:	2300      	movs	r3, #0
 8009000:	e01b      	b.n	800903a <_ZN6FatDMA14xmit_datablockEPKhh+0x62>

	xchg_spi(token);					/* Send token */
 8009002:	79fb      	ldrb	r3, [r7, #7]
 8009004:	4618      	mov	r0, r3
 8009006:	f7ff fe9f 	bl	8008d48 <_ZL8xchg_spih>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800900a:	79fb      	ldrb	r3, [r7, #7]
 800900c:	2bfd      	cmp	r3, #253	; 0xfd
 800900e:	d00d      	beq.n	800902c <_ZN6FatDMA14xmit_datablockEPKhh+0x54>
	  nextBuff = buff + 512;
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	  ret = HAL_SPI_Transmit_DMA(&SD_SPI_HANDLE, (uint8_t*)buff, 512);
 800901c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009020:	68b9      	ldr	r1, [r7, #8]
 8009022:	4808      	ldr	r0, [pc, #32]	; (8009044 <_ZN6FatDMA14xmit_datablockEPKhh+0x6c>)
 8009024:	f7fe f81e 	bl	8007064 <HAL_SPI_Transmit_DMA>
 8009028:	4603      	mov	r3, r0
 800902a:	75fb      	strb	r3, [r7, #23]
	}
	return ret == HAL_OK ? 1 : 0;
 800902c:	7dfb      	ldrb	r3, [r7, #23]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d101      	bne.n	8009036 <_ZN6FatDMA14xmit_datablockEPKhh+0x5e>
 8009032:	2301      	movs	r3, #1
 8009034:	e000      	b.n	8009038 <_ZN6FatDMA14xmit_datablockEPKhh+0x60>
 8009036:	2300      	movs	r3, #0
 8009038:	bf00      	nop
}
 800903a:	4618      	mov	r0, r3
 800903c:	3718      	adds	r7, #24
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	240000b0 	.word	0x240000b0

08009048 <_ZN6FatDMA19xmit_datablock_cpltEv>:

// To be called upon completion of the datablock transfer (by callback)
int FatDMA::xmit_datablock_cplt (	/* 1:OK, 0:Failed */
)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
	BYTE resp;

	xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800904e:	20ff      	movs	r0, #255	; 0xff
 8009050:	f7ff fe7a 	bl	8008d48 <_ZL8xchg_spih>
 8009054:	20ff      	movs	r0, #255	; 0xff
 8009056:	f7ff fe77 	bl	8008d48 <_ZL8xchg_spih>
	resp = xchg_spi(0xFF);				/* Receive data resp */
 800905a:	20ff      	movs	r0, #255	; 0xff
 800905c:	f7ff fe74 	bl	8008d48 <_ZL8xchg_spih>
 8009060:	4603      	mov	r3, r0
 8009062:	71fb      	strb	r3, [r7, #7]
	if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8009064:	79fb      	ldrb	r3, [r7, #7]
 8009066:	f003 031f 	and.w	r3, r3, #31
 800906a:	2b05      	cmp	r3, #5
 800906c:	d001      	beq.n	8009072 <_ZN6FatDMA19xmit_datablock_cpltEv+0x2a>
 800906e:	2300      	movs	r3, #0
 8009070:	e000      	b.n	8009074 <_ZN6FatDMA19xmit_datablock_cpltEv+0x2c>
	return 1;
 8009072:	2301      	movs	r3, #1
}
 8009074:	4618      	mov	r0, r3
 8009076:	3708      	adds	r7, #8
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <_ZL8send_cmdhm>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	4603      	mov	r3, r0
 8009084:	6039      	str	r1, [r7, #0]
 8009086:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8009088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800908c:	2b00      	cmp	r3, #0
 800908e:	da0e      	bge.n	80090ae <_ZL8send_cmdhm+0x32>
		cmd &= 0x7F;
 8009090:	79fb      	ldrb	r3, [r7, #7]
 8009092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009096:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8009098:	2100      	movs	r1, #0
 800909a:	2037      	movs	r0, #55	; 0x37
 800909c:	f7ff ffee 	bl	800907c <_ZL8send_cmdhm>
 80090a0:	4603      	mov	r3, r0
 80090a2:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80090a4:	7bbb      	ldrb	r3, [r7, #14]
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d901      	bls.n	80090ae <_ZL8send_cmdhm+0x32>
 80090aa:	7bbb      	ldrb	r3, [r7, #14]
 80090ac:	e05c      	b.n	8009168 <_ZL8send_cmdhm+0xec>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80090ae:	79fb      	ldrb	r3, [r7, #7]
 80090b0:	2b0c      	cmp	r3, #12
 80090b2:	d00d      	beq.n	80090d0 <_ZL8send_cmdhm+0x54>
		despiselect();
 80090b4:	f7ff febc 	bl	8008e30 <_ZL11despiselectv>
		if (!spiselect()) return 0xFF;
 80090b8:	f7ff feca 	bl	8008e50 <_ZL9spiselectv>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	bf0c      	ite	eq
 80090c2:	2301      	moveq	r3, #1
 80090c4:	2300      	movne	r3, #0
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d001      	beq.n	80090d0 <_ZL8send_cmdhm+0x54>
 80090cc:	23ff      	movs	r3, #255	; 0xff
 80090ce:	e04b      	b.n	8009168 <_ZL8send_cmdhm+0xec>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80090d0:	79fb      	ldrb	r3, [r7, #7]
 80090d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	4618      	mov	r0, r3
 80090da:	f7ff fe35 	bl	8008d48 <_ZL8xchg_spih>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	0e1b      	lsrs	r3, r3, #24
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7ff fe2f 	bl	8008d48 <_ZL8xchg_spih>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	0c1b      	lsrs	r3, r3, #16
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7ff fe29 	bl	8008d48 <_ZL8xchg_spih>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	0a1b      	lsrs	r3, r3, #8
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7ff fe23 	bl	8008d48 <_ZL8xchg_spih>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	b2db      	uxtb	r3, r3
 8009106:	4618      	mov	r0, r3
 8009108:	f7ff fe1e 	bl	8008d48 <_ZL8xchg_spih>
	n = 0x01;							/* Dummy CRC + Stop */
 800910c:	2301      	movs	r3, #1
 800910e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8009110:	79fb      	ldrb	r3, [r7, #7]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d101      	bne.n	800911a <_ZL8send_cmdhm+0x9e>
 8009116:	2395      	movs	r3, #149	; 0x95
 8009118:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800911a:	79fb      	ldrb	r3, [r7, #7]
 800911c:	2b08      	cmp	r3, #8
 800911e:	d101      	bne.n	8009124 <_ZL8send_cmdhm+0xa8>
 8009120:	2387      	movs	r3, #135	; 0x87
 8009122:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8009124:	7bfb      	ldrb	r3, [r7, #15]
 8009126:	4618      	mov	r0, r3
 8009128:	f7ff fe0e 	bl	8008d48 <_ZL8xchg_spih>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800912c:	79fb      	ldrb	r3, [r7, #7]
 800912e:	2b0c      	cmp	r3, #12
 8009130:	d102      	bne.n	8009138 <_ZL8send_cmdhm+0xbc>
 8009132:	20ff      	movs	r0, #255	; 0xff
 8009134:	f7ff fe08 	bl	8008d48 <_ZL8xchg_spih>
	n = 10;								/* Wait for response (10 bytes max) */
 8009138:	230a      	movs	r3, #10
 800913a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800913c:	20ff      	movs	r0, #255	; 0xff
 800913e:	f7ff fe03 	bl	8008d48 <_ZL8xchg_spih>
 8009142:	4603      	mov	r3, r0
 8009144:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8009146:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800914a:	2b00      	cmp	r3, #0
 800914c:	da07      	bge.n	800915e <_ZL8send_cmdhm+0xe2>
 800914e:	7bfb      	ldrb	r3, [r7, #15]
 8009150:	3b01      	subs	r3, #1
 8009152:	73fb      	strb	r3, [r7, #15]
 8009154:	7bfb      	ldrb	r3, [r7, #15]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d001      	beq.n	800915e <_ZL8send_cmdhm+0xe2>
 800915a:	2301      	movs	r3, #1
 800915c:	e000      	b.n	8009160 <_ZL8send_cmdhm+0xe4>
 800915e:	2300      	movs	r3, #0
 8009160:	2b00      	cmp	r3, #0
 8009162:	d000      	beq.n	8009166 <_ZL8send_cmdhm+0xea>
	do {
 8009164:	e7ea      	b.n	800913c <_ZL8send_cmdhm+0xc0>

	return res;							/* Return received response */
 8009166:	7bbb      	ldrb	r3, [r7, #14]
}
 8009168:	4618      	mov	r0, r3
 800916a:	3710      	adds	r7, #16
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <_Z19USER_SPI_initializeh>:
/*-----------------------------------------------------------------------*/

 DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009170:	b590      	push	{r4, r7, lr}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	4603      	mov	r3, r0
 8009178:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800917a:	79fb      	ldrb	r3, [r7, #7]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d001      	beq.n	8009184 <_Z19USER_SPI_initializeh+0x14>
 8009180:	2301      	movs	r3, #1
 8009182:	e0f3      	b.n	800936c <_Z19USER_SPI_initializeh+0x1fc>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8009184:	4b7b      	ldr	r3, [pc, #492]	; (8009374 <_Z19USER_SPI_initializeh+0x204>)
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	b2db      	uxtb	r3, r3
 800918a:	f003 0302 	and.w	r3, r3, #2
 800918e:	2b00      	cmp	r3, #0
 8009190:	bf14      	ite	ne
 8009192:	2301      	movne	r3, #1
 8009194:	2300      	moveq	r3, #0
 8009196:	b2db      	uxtb	r3, r3
 8009198:	2b00      	cmp	r3, #0
 800919a:	d003      	beq.n	80091a4 <_Z19USER_SPI_initializeh+0x34>
 800919c:	4b75      	ldr	r3, [pc, #468]	; (8009374 <_Z19USER_SPI_initializeh+0x204>)
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	e0e3      	b.n	800936c <_Z19USER_SPI_initializeh+0x1fc>

	FCLK_SLOW();
 80091a4:	4b74      	ldr	r3, [pc, #464]	; (8009378 <_Z19USER_SPI_initializeh+0x208>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	22aa      	movs	r2, #170	; 0xaa
 80091aa:	651a      	str	r2, [r3, #80]	; 0x50
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80091ac:	230a      	movs	r3, #10
 80091ae:	73fb      	strb	r3, [r7, #15]
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d006      	beq.n	80091c4 <_Z19USER_SPI_initializeh+0x54>
 80091b6:	20ff      	movs	r0, #255	; 0xff
 80091b8:	f7ff fdc6 	bl	8008d48 <_ZL8xchg_spih>
 80091bc:	7bfb      	ldrb	r3, [r7, #15]
 80091be:	3b01      	subs	r3, #1
 80091c0:	73fb      	strb	r3, [r7, #15]
 80091c2:	e7f5      	b.n	80091b0 <_Z19USER_SPI_initializeh+0x40>

	ty = 0;
 80091c4:	2300      	movs	r3, #0
 80091c6:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80091c8:	2100      	movs	r1, #0
 80091ca:	2000      	movs	r0, #0
 80091cc:	f7ff ff56 	bl	800907c <_ZL8send_cmdhm>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	bf0c      	ite	eq
 80091d6:	2301      	moveq	r3, #1
 80091d8:	2300      	movne	r3, #0
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f000 80aa 	beq.w	8009336 <_Z19USER_SPI_initializeh+0x1c6>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80091e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80091e6:	f7ff fd85 	bl	8008cf4 <_Z12SPI_Timer_Onm>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80091ea:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80091ee:	2008      	movs	r0, #8
 80091f0:	f7ff ff44 	bl	800907c <_ZL8send_cmdhm>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	bf0c      	ite	eq
 80091fa:	2301      	moveq	r3, #1
 80091fc:	2300      	movne	r3, #0
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	2b00      	cmp	r3, #0
 8009202:	d05c      	beq.n	80092be <_Z19USER_SPI_initializeh+0x14e>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8009204:	2300      	movs	r3, #0
 8009206:	73fb      	strb	r3, [r7, #15]
 8009208:	7bfb      	ldrb	r3, [r7, #15]
 800920a:	2b03      	cmp	r3, #3
 800920c:	d80e      	bhi.n	800922c <_Z19USER_SPI_initializeh+0xbc>
 800920e:	7bfc      	ldrb	r4, [r7, #15]
 8009210:	20ff      	movs	r0, #255	; 0xff
 8009212:	f7ff fd99 	bl	8008d48 <_ZL8xchg_spih>
 8009216:	4603      	mov	r3, r0
 8009218:	461a      	mov	r2, r3
 800921a:	f107 0310 	add.w	r3, r7, #16
 800921e:	4423      	add	r3, r4
 8009220:	f803 2c08 	strb.w	r2, [r3, #-8]
 8009224:	7bfb      	ldrb	r3, [r7, #15]
 8009226:	3301      	adds	r3, #1
 8009228:	73fb      	strb	r3, [r7, #15]
 800922a:	e7ed      	b.n	8009208 <_Z19USER_SPI_initializeh+0x98>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800922c:	7abb      	ldrb	r3, [r7, #10]
 800922e:	2b01      	cmp	r3, #1
 8009230:	f040 8081 	bne.w	8009336 <_Z19USER_SPI_initializeh+0x1c6>
 8009234:	7afb      	ldrb	r3, [r7, #11]
 8009236:	2baa      	cmp	r3, #170	; 0xaa
 8009238:	d17d      	bne.n	8009336 <_Z19USER_SPI_initializeh+0x1c6>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800923a:	f7ff fd6f 	bl	8008d1c <_Z16SPI_Timer_Statusv>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d009      	beq.n	8009258 <_Z19USER_SPI_initializeh+0xe8>
 8009244:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009248:	20a9      	movs	r0, #169	; 0xa9
 800924a:	f7ff ff17 	bl	800907c <_ZL8send_cmdhm>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d001      	beq.n	8009258 <_Z19USER_SPI_initializeh+0xe8>
 8009254:	2301      	movs	r3, #1
 8009256:	e000      	b.n	800925a <_Z19USER_SPI_initializeh+0xea>
 8009258:	2300      	movs	r3, #0
 800925a:	2b00      	cmp	r3, #0
 800925c:	d000      	beq.n	8009260 <_Z19USER_SPI_initializeh+0xf0>
 800925e:	e7ec      	b.n	800923a <_Z19USER_SPI_initializeh+0xca>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8009260:	f7ff fd5c 	bl	8008d1c <_Z16SPI_Timer_Statusv>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d008      	beq.n	800927c <_Z19USER_SPI_initializeh+0x10c>
 800926a:	2100      	movs	r1, #0
 800926c:	203a      	movs	r0, #58	; 0x3a
 800926e:	f7ff ff05 	bl	800907c <_ZL8send_cmdhm>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d101      	bne.n	800927c <_Z19USER_SPI_initializeh+0x10c>
 8009278:	2301      	movs	r3, #1
 800927a:	e000      	b.n	800927e <_Z19USER_SPI_initializeh+0x10e>
 800927c:	2300      	movs	r3, #0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d059      	beq.n	8009336 <_Z19USER_SPI_initializeh+0x1c6>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8009282:	2300      	movs	r3, #0
 8009284:	73fb      	strb	r3, [r7, #15]
 8009286:	7bfb      	ldrb	r3, [r7, #15]
 8009288:	2b03      	cmp	r3, #3
 800928a:	d80e      	bhi.n	80092aa <_Z19USER_SPI_initializeh+0x13a>
 800928c:	7bfc      	ldrb	r4, [r7, #15]
 800928e:	20ff      	movs	r0, #255	; 0xff
 8009290:	f7ff fd5a 	bl	8008d48 <_ZL8xchg_spih>
 8009294:	4603      	mov	r3, r0
 8009296:	461a      	mov	r2, r3
 8009298:	f107 0310 	add.w	r3, r7, #16
 800929c:	4423      	add	r3, r4
 800929e:	f803 2c08 	strb.w	r2, [r3, #-8]
 80092a2:	7bfb      	ldrb	r3, [r7, #15]
 80092a4:	3301      	adds	r3, #1
 80092a6:	73fb      	strb	r3, [r7, #15]
 80092a8:	e7ed      	b.n	8009286 <_Z19USER_SPI_initializeh+0x116>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80092aa:	7a3b      	ldrb	r3, [r7, #8]
 80092ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d001      	beq.n	80092b8 <_Z19USER_SPI_initializeh+0x148>
 80092b4:	230c      	movs	r3, #12
 80092b6:	e000      	b.n	80092ba <_Z19USER_SPI_initializeh+0x14a>
 80092b8:	2304      	movs	r3, #4
 80092ba:	737b      	strb	r3, [r7, #13]
 80092bc:	e03b      	b.n	8009336 <_Z19USER_SPI_initializeh+0x1c6>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80092be:	2100      	movs	r1, #0
 80092c0:	20a9      	movs	r0, #169	; 0xa9
 80092c2:	f7ff fedb 	bl	800907c <_ZL8send_cmdhm>
 80092c6:	4603      	mov	r3, r0
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	bf94      	ite	ls
 80092cc:	2301      	movls	r3, #1
 80092ce:	2300      	movhi	r3, #0
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d004      	beq.n	80092e0 <_Z19USER_SPI_initializeh+0x170>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80092d6:	2302      	movs	r3, #2
 80092d8:	737b      	strb	r3, [r7, #13]
 80092da:	23a9      	movs	r3, #169	; 0xa9
 80092dc:	73bb      	strb	r3, [r7, #14]
 80092de:	e003      	b.n	80092e8 <_Z19USER_SPI_initializeh+0x178>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80092e0:	2301      	movs	r3, #1
 80092e2:	737b      	strb	r3, [r7, #13]
 80092e4:	2301      	movs	r3, #1
 80092e6:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80092e8:	f7ff fd18 	bl	8008d1c <_Z16SPI_Timer_Statusv>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d009      	beq.n	8009306 <_Z19USER_SPI_initializeh+0x196>
 80092f2:	7bbb      	ldrb	r3, [r7, #14]
 80092f4:	2100      	movs	r1, #0
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7ff fec0 	bl	800907c <_ZL8send_cmdhm>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d001      	beq.n	8009306 <_Z19USER_SPI_initializeh+0x196>
 8009302:	2301      	movs	r3, #1
 8009304:	e000      	b.n	8009308 <_Z19USER_SPI_initializeh+0x198>
 8009306:	2300      	movs	r3, #0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d000      	beq.n	800930e <_Z19USER_SPI_initializeh+0x19e>
 800930c:	e7ec      	b.n	80092e8 <_Z19USER_SPI_initializeh+0x178>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800930e:	f7ff fd05 	bl	8008d1c <_Z16SPI_Timer_Statusv>
 8009312:	4603      	mov	r3, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d007      	beq.n	8009328 <_Z19USER_SPI_initializeh+0x1b8>
 8009318:	f44f 7100 	mov.w	r1, #512	; 0x200
 800931c:	2010      	movs	r0, #16
 800931e:	f7ff fead 	bl	800907c <_ZL8send_cmdhm>
 8009322:	4603      	mov	r3, r0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d001      	beq.n	800932c <_Z19USER_SPI_initializeh+0x1bc>
 8009328:	2301      	movs	r3, #1
 800932a:	e000      	b.n	800932e <_Z19USER_SPI_initializeh+0x1be>
 800932c:	2300      	movs	r3, #0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d001      	beq.n	8009336 <_Z19USER_SPI_initializeh+0x1c6>
				ty = 0;
 8009332:	2300      	movs	r3, #0
 8009334:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8009336:	4a11      	ldr	r2, [pc, #68]	; (800937c <_Z19USER_SPI_initializeh+0x20c>)
 8009338:	7b7b      	ldrb	r3, [r7, #13]
 800933a:	7013      	strb	r3, [r2, #0]
	despiselect();
 800933c:	f7ff fd78 	bl	8008e30 <_ZL11despiselectv>

	if (ty) {			/* OK */
 8009340:	7b7b      	ldrb	r3, [r7, #13]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00c      	beq.n	8009360 <_Z19USER_SPI_initializeh+0x1f0>
		FCLK_FAST();			/* Set fast clock */
 8009346:	4b0c      	ldr	r3, [pc, #48]	; (8009378 <_Z19USER_SPI_initializeh+0x208>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	220c      	movs	r2, #12
 800934c:	651a      	str	r2, [r3, #80]	; 0x50
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800934e:	4b09      	ldr	r3, [pc, #36]	; (8009374 <_Z19USER_SPI_initializeh+0x204>)
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	b2db      	uxtb	r3, r3
 8009354:	f023 0301 	bic.w	r3, r3, #1
 8009358:	b2da      	uxtb	r2, r3
 800935a:	4b06      	ldr	r3, [pc, #24]	; (8009374 <_Z19USER_SPI_initializeh+0x204>)
 800935c:	701a      	strb	r2, [r3, #0]
 800935e:	e002      	b.n	8009366 <_Z19USER_SPI_initializeh+0x1f6>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8009360:	4b04      	ldr	r3, [pc, #16]	; (8009374 <_Z19USER_SPI_initializeh+0x204>)
 8009362:	2201      	movs	r2, #1
 8009364:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8009366:	4b03      	ldr	r3, [pc, #12]	; (8009374 <_Z19USER_SPI_initializeh+0x204>)
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	b2db      	uxtb	r3, r3
}
 800936c:	4618      	mov	r0, r3
 800936e:	3714      	adds	r7, #20
 8009370:	46bd      	mov	sp, r7
 8009372:	bd90      	pop	{r4, r7, pc}
 8009374:	2400002c 	.word	0x2400002c
 8009378:	240000b0 	.word	0x240000b0
 800937c:	24000a60 	.word	0x24000a60

08009380 <_Z15USER_SPI_statush>:
/*-----------------------------------------------------------------------*/

DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	4603      	mov	r3, r0
 8009388:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800938a:	79fb      	ldrb	r3, [r7, #7]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d001      	beq.n	8009394 <_Z15USER_SPI_statush+0x14>
 8009390:	2301      	movs	r3, #1
 8009392:	e002      	b.n	800939a <_Z15USER_SPI_statush+0x1a>

	return Stat;	/* Return disk status */
 8009394:	4b04      	ldr	r3, [pc, #16]	; (80093a8 <_Z15USER_SPI_statush+0x28>)
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	b2db      	uxtb	r3, r3
}
 800939a:	4618      	mov	r0, r3
 800939c:	370c      	adds	r7, #12
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	2400002c 	.word	0x2400002c

080093ac <_Z13USER_SPI_readhPhmj>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60b9      	str	r1, [r7, #8]
 80093b4:	607a      	str	r2, [r7, #4]
 80093b6:	603b      	str	r3, [r7, #0]
 80093b8:	4603      	mov	r3, r0
 80093ba:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80093bc:	7bfb      	ldrb	r3, [r7, #15]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d102      	bne.n	80093c8 <_Z13USER_SPI_readhPhmj+0x1c>
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d101      	bne.n	80093cc <_Z13USER_SPI_readhPhmj+0x20>
 80093c8:	2304      	movs	r3, #4
 80093ca:	e067      	b.n	800949c <_Z13USER_SPI_readhPhmj+0xf0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80093cc:	4b35      	ldr	r3, [pc, #212]	; (80094a4 <_Z13USER_SPI_readhPhmj+0xf8>)
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	f003 0301 	and.w	r3, r3, #1
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	bf14      	ite	ne
 80093da:	2301      	movne	r3, #1
 80093dc:	2300      	moveq	r3, #0
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d001      	beq.n	80093e8 <_Z13USER_SPI_readhPhmj+0x3c>
 80093e4:	2303      	movs	r3, #3
 80093e6:	e059      	b.n	800949c <_Z13USER_SPI_readhPhmj+0xf0>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80093e8:	4b2f      	ldr	r3, [pc, #188]	; (80094a8 <_Z13USER_SPI_readhPhmj+0xfc>)
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	f003 0308 	and.w	r3, r3, #8
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d102      	bne.n	80093fa <_Z13USER_SPI_readhPhmj+0x4e>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	025b      	lsls	r3, r3, #9
 80093f8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d116      	bne.n	800942e <_Z13USER_SPI_readhPhmj+0x82>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8009400:	6879      	ldr	r1, [r7, #4]
 8009402:	2011      	movs	r0, #17
 8009404:	f7ff fe3a 	bl	800907c <_ZL8send_cmdhm>
 8009408:	4603      	mov	r3, r0
			&& rcvr_datablock(buff, 512)) {
 800940a:	2b00      	cmp	r3, #0
 800940c:	d109      	bne.n	8009422 <_Z13USER_SPI_readhPhmj+0x76>
 800940e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009412:	68b8      	ldr	r0, [r7, #8]
 8009414:	f7ff fd3c 	bl	8008e90 <_ZL14rcvr_datablockPhj>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d001      	beq.n	8009422 <_Z13USER_SPI_readhPhmj+0x76>
 800941e:	2301      	movs	r3, #1
 8009420:	e000      	b.n	8009424 <_Z13USER_SPI_readhPhmj+0x78>
 8009422:	2300      	movs	r3, #0
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8009424:	2b00      	cmp	r3, #0
 8009426:	d030      	beq.n	800948a <_Z13USER_SPI_readhPhmj+0xde>
			count = 0;
 8009428:	2300      	movs	r3, #0
 800942a:	603b      	str	r3, [r7, #0]
 800942c:	e02d      	b.n	800948a <_Z13USER_SPI_readhPhmj+0xde>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800942e:	6879      	ldr	r1, [r7, #4]
 8009430:	2012      	movs	r0, #18
 8009432:	f7ff fe23 	bl	800907c <_ZL8send_cmdhm>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	bf0c      	ite	eq
 800943c:	2301      	moveq	r3, #1
 800943e:	2300      	movne	r3, #0
 8009440:	b2db      	uxtb	r3, r3
 8009442:	2b00      	cmp	r3, #0
 8009444:	d021      	beq.n	800948a <_Z13USER_SPI_readhPhmj+0xde>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8009446:	f44f 7100 	mov.w	r1, #512	; 0x200
 800944a:	68b8      	ldr	r0, [r7, #8]
 800944c:	f7ff fd20 	bl	8008e90 <_ZL14rcvr_datablockPhj>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	bf0c      	ite	eq
 8009456:	2301      	moveq	r3, #1
 8009458:	2300      	movne	r3, #0
 800945a:	b2db      	uxtb	r3, r3
 800945c:	2b00      	cmp	r3, #0
 800945e:	d10f      	bne.n	8009480 <_Z13USER_SPI_readhPhmj+0xd4>
				buff += 512;
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009466:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	3b01      	subs	r3, #1
 800946c:	603b      	str	r3, [r7, #0]
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	bf14      	ite	ne
 8009474:	2301      	movne	r3, #1
 8009476:	2300      	moveq	r3, #0
 8009478:	b2db      	uxtb	r3, r3
 800947a:	2b00      	cmp	r3, #0
 800947c:	d001      	beq.n	8009482 <_Z13USER_SPI_readhPhmj+0xd6>
			do {
 800947e:	e7e2      	b.n	8009446 <_Z13USER_SPI_readhPhmj+0x9a>
				if (!rcvr_datablock(buff, 512)) break;
 8009480:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8009482:	2100      	movs	r1, #0
 8009484:	200c      	movs	r0, #12
 8009486:	f7ff fdf9 	bl	800907c <_ZL8send_cmdhm>
		}
	}
	despiselect();
 800948a:	f7ff fcd1 	bl	8008e30 <_ZL11despiselectv>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d001      	beq.n	8009498 <_Z13USER_SPI_readhPhmj+0xec>
 8009494:	2301      	movs	r3, #1
 8009496:	e000      	b.n	800949a <_Z13USER_SPI_readhPhmj+0xee>
 8009498:	2300      	movs	r3, #0
 800949a:	bf00      	nop
}
 800949c:	4618      	mov	r0, r3
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}
 80094a4:	2400002c 	.word	0x2400002c
 80094a8:	24000a60 	.word	0x24000a60

080094ac <_Z14USER_SPI_writehPKhmj>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60b9      	str	r1, [r7, #8]
 80094b4:	607a      	str	r2, [r7, #4]
 80094b6:	603b      	str	r3, [r7, #0]
 80094b8:	4603      	mov	r3, r0
 80094ba:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80094bc:	7bfb      	ldrb	r3, [r7, #15]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d102      	bne.n	80094c8 <_Z14USER_SPI_writehPKhmj+0x1c>
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d101      	bne.n	80094cc <_Z14USER_SPI_writehPKhmj+0x20>
 80094c8:	2304      	movs	r3, #4
 80094ca:	e087      	b.n	80095dc <_Z14USER_SPI_writehPKhmj+0x130>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80094cc:	4b45      	ldr	r3, [pc, #276]	; (80095e4 <_Z14USER_SPI_writehPKhmj+0x138>)
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	f003 0301 	and.w	r3, r3, #1
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	bf14      	ite	ne
 80094da:	2301      	movne	r3, #1
 80094dc:	2300      	moveq	r3, #0
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d001      	beq.n	80094e8 <_Z14USER_SPI_writehPKhmj+0x3c>
 80094e4:	2303      	movs	r3, #3
 80094e6:	e079      	b.n	80095dc <_Z14USER_SPI_writehPKhmj+0x130>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80094e8:	4b3e      	ldr	r3, [pc, #248]	; (80095e4 <_Z14USER_SPI_writehPKhmj+0x138>)
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	f003 0304 	and.w	r3, r3, #4
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	bf14      	ite	ne
 80094f6:	2301      	movne	r3, #1
 80094f8:	2300      	moveq	r3, #0
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d001      	beq.n	8009504 <_Z14USER_SPI_writehPKhmj+0x58>
 8009500:	2302      	movs	r3, #2
 8009502:	e06b      	b.n	80095dc <_Z14USER_SPI_writehPKhmj+0x130>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8009504:	4b38      	ldr	r3, [pc, #224]	; (80095e8 <_Z14USER_SPI_writehPKhmj+0x13c>)
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	f003 0308 	and.w	r3, r3, #8
 800950c:	2b00      	cmp	r3, #0
 800950e:	d102      	bne.n	8009516 <_Z14USER_SPI_writehPKhmj+0x6a>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	025b      	lsls	r3, r3, #9
 8009514:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	2b01      	cmp	r3, #1
 800951a:	d115      	bne.n	8009548 <_Z14USER_SPI_writehPKhmj+0x9c>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800951c:	6879      	ldr	r1, [r7, #4]
 800951e:	2018      	movs	r0, #24
 8009520:	f7ff fdac 	bl	800907c <_ZL8send_cmdhm>
 8009524:	4603      	mov	r3, r0
			&& xmit_datablock(buff, 0xFE)) {
 8009526:	2b00      	cmp	r3, #0
 8009528:	d108      	bne.n	800953c <_Z14USER_SPI_writehPKhmj+0x90>
 800952a:	21fe      	movs	r1, #254	; 0xfe
 800952c:	68b8      	ldr	r0, [r7, #8]
 800952e:	f7ff fcde 	bl	8008eee <_ZL14xmit_datablockPKhh>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d001      	beq.n	800953c <_Z14USER_SPI_writehPKhmj+0x90>
 8009538:	2301      	movs	r3, #1
 800953a:	e000      	b.n	800953e <_Z14USER_SPI_writehPKhmj+0x92>
 800953c:	2300      	movs	r3, #0
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800953e:	2b00      	cmp	r3, #0
 8009540:	d043      	beq.n	80095ca <_Z14USER_SPI_writehPKhmj+0x11e>
			count = 0;
 8009542:	2300      	movs	r3, #0
 8009544:	603b      	str	r3, [r7, #0]
 8009546:	e040      	b.n	80095ca <_Z14USER_SPI_writehPKhmj+0x11e>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8009548:	4b27      	ldr	r3, [pc, #156]	; (80095e8 <_Z14USER_SPI_writehPKhmj+0x13c>)
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	f003 0306 	and.w	r3, r3, #6
 8009550:	2b00      	cmp	r3, #0
 8009552:	d003      	beq.n	800955c <_Z14USER_SPI_writehPKhmj+0xb0>
 8009554:	6839      	ldr	r1, [r7, #0]
 8009556:	2097      	movs	r0, #151	; 0x97
 8009558:	f7ff fd90 	bl	800907c <_ZL8send_cmdhm>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800955c:	6879      	ldr	r1, [r7, #4]
 800955e:	2019      	movs	r0, #25
 8009560:	f7ff fd8c 	bl	800907c <_ZL8send_cmdhm>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	bf0c      	ite	eq
 800956a:	2301      	moveq	r3, #1
 800956c:	2300      	movne	r3, #0
 800956e:	b2db      	uxtb	r3, r3
 8009570:	2b00      	cmp	r3, #0
 8009572:	d02a      	beq.n	80095ca <_Z14USER_SPI_writehPKhmj+0x11e>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8009574:	21fc      	movs	r1, #252	; 0xfc
 8009576:	68b8      	ldr	r0, [r7, #8]
 8009578:	f7ff fcb9 	bl	8008eee <_ZL14xmit_datablockPKhh>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	bf0c      	ite	eq
 8009582:	2301      	moveq	r3, #1
 8009584:	2300      	movne	r3, #0
 8009586:	b2db      	uxtb	r3, r3
 8009588:	2b00      	cmp	r3, #0
 800958a:	d10f      	bne.n	80095ac <_Z14USER_SPI_writehPKhmj+0x100>
				buff += 512;
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009592:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	3b01      	subs	r3, #1
 8009598:	603b      	str	r3, [r7, #0]
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	bf14      	ite	ne
 80095a0:	2301      	movne	r3, #1
 80095a2:	2300      	moveq	r3, #0
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <_Z14USER_SPI_writehPKhmj+0x102>
			do {
 80095aa:	e7e3      	b.n	8009574 <_Z14USER_SPI_writehPKhmj+0xc8>
				if (!xmit_datablock(buff, 0xFC)) break;
 80095ac:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80095ae:	21fd      	movs	r1, #253	; 0xfd
 80095b0:	2000      	movs	r0, #0
 80095b2:	f7ff fc9c 	bl	8008eee <_ZL14xmit_datablockPKhh>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	bf0c      	ite	eq
 80095bc:	2301      	moveq	r3, #1
 80095be:	2300      	movne	r3, #0
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d001      	beq.n	80095ca <_Z14USER_SPI_writehPKhmj+0x11e>
 80095c6:	2301      	movs	r3, #1
 80095c8:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80095ca:	f7ff fc31 	bl	8008e30 <_ZL11despiselectv>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <_Z14USER_SPI_writehPKhmj+0x12c>
 80095d4:	2301      	movs	r3, #1
 80095d6:	e000      	b.n	80095da <_Z14USER_SPI_writehPKhmj+0x12e>
 80095d8:	2300      	movs	r3, #0
 80095da:	bf00      	nop
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3710      	adds	r7, #16
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	2400002c 	.word	0x2400002c
 80095e8:	24000a60 	.word	0x24000a60

080095ec <_Z18USER_SPI_write_dmahPKhmj>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60b9      	str	r1, [r7, #8]
 80095f4:	607a      	str	r2, [r7, #4]
 80095f6:	603b      	str	r3, [r7, #0]
 80095f8:	4603      	mov	r3, r0
 80095fa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80095fc:	7bfb      	ldrb	r3, [r7, #15]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d102      	bne.n	8009608 <_Z18USER_SPI_write_dmahPKhmj+0x1c>
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d101      	bne.n	800960c <_Z18USER_SPI_write_dmahPKhmj+0x20>
 8009608:	2304      	movs	r3, #4
 800960a:	e087      	b.n	800971c <_Z18USER_SPI_write_dmahPKhmj+0x130>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800960c:	4b45      	ldr	r3, [pc, #276]	; (8009724 <_Z18USER_SPI_write_dmahPKhmj+0x138>)
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	b2db      	uxtb	r3, r3
 8009612:	f003 0301 	and.w	r3, r3, #1
 8009616:	2b00      	cmp	r3, #0
 8009618:	bf14      	ite	ne
 800961a:	2301      	movne	r3, #1
 800961c:	2300      	moveq	r3, #0
 800961e:	b2db      	uxtb	r3, r3
 8009620:	2b00      	cmp	r3, #0
 8009622:	d001      	beq.n	8009628 <_Z18USER_SPI_write_dmahPKhmj+0x3c>
 8009624:	2303      	movs	r3, #3
 8009626:	e079      	b.n	800971c <_Z18USER_SPI_write_dmahPKhmj+0x130>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8009628:	4b3e      	ldr	r3, [pc, #248]	; (8009724 <_Z18USER_SPI_write_dmahPKhmj+0x138>)
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	b2db      	uxtb	r3, r3
 800962e:	f003 0304 	and.w	r3, r3, #4
 8009632:	2b00      	cmp	r3, #0
 8009634:	bf14      	ite	ne
 8009636:	2301      	movne	r3, #1
 8009638:	2300      	moveq	r3, #0
 800963a:	b2db      	uxtb	r3, r3
 800963c:	2b00      	cmp	r3, #0
 800963e:	d001      	beq.n	8009644 <_Z18USER_SPI_write_dmahPKhmj+0x58>
 8009640:	2302      	movs	r3, #2
 8009642:	e06b      	b.n	800971c <_Z18USER_SPI_write_dmahPKhmj+0x130>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8009644:	4b38      	ldr	r3, [pc, #224]	; (8009728 <_Z18USER_SPI_write_dmahPKhmj+0x13c>)
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	f003 0308 	and.w	r3, r3, #8
 800964c:	2b00      	cmp	r3, #0
 800964e:	d102      	bne.n	8009656 <_Z18USER_SPI_write_dmahPKhmj+0x6a>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	025b      	lsls	r3, r3, #9
 8009654:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d115      	bne.n	8009688 <_Z18USER_SPI_write_dmahPKhmj+0x9c>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800965c:	6879      	ldr	r1, [r7, #4]
 800965e:	2018      	movs	r0, #24
 8009660:	f7ff fd0c 	bl	800907c <_ZL8send_cmdhm>
 8009664:	4603      	mov	r3, r0
			&& xmit_datablock_dma(buff, 0xFE)) {
 8009666:	2b00      	cmp	r3, #0
 8009668:	d108      	bne.n	800967c <_Z18USER_SPI_write_dmahPKhmj+0x90>
 800966a:	21fe      	movs	r1, #254	; 0xfe
 800966c:	68b8      	ldr	r0, [r7, #8]
 800966e:	f7ff fc75 	bl	8008f5c <_ZL18xmit_datablock_dmaPKhh>
 8009672:	4603      	mov	r3, r0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d001      	beq.n	800967c <_Z18USER_SPI_write_dmahPKhmj+0x90>
 8009678:	2301      	movs	r3, #1
 800967a:	e000      	b.n	800967e <_Z18USER_SPI_write_dmahPKhmj+0x92>
 800967c:	2300      	movs	r3, #0
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800967e:	2b00      	cmp	r3, #0
 8009680:	d043      	beq.n	800970a <_Z18USER_SPI_write_dmahPKhmj+0x11e>
			count = 0;
 8009682:	2300      	movs	r3, #0
 8009684:	603b      	str	r3, [r7, #0]
 8009686:	e040      	b.n	800970a <_Z18USER_SPI_write_dmahPKhmj+0x11e>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8009688:	4b27      	ldr	r3, [pc, #156]	; (8009728 <_Z18USER_SPI_write_dmahPKhmj+0x13c>)
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	f003 0306 	and.w	r3, r3, #6
 8009690:	2b00      	cmp	r3, #0
 8009692:	d003      	beq.n	800969c <_Z18USER_SPI_write_dmahPKhmj+0xb0>
 8009694:	6839      	ldr	r1, [r7, #0]
 8009696:	2097      	movs	r0, #151	; 0x97
 8009698:	f7ff fcf0 	bl	800907c <_ZL8send_cmdhm>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800969c:	6879      	ldr	r1, [r7, #4]
 800969e:	2019      	movs	r0, #25
 80096a0:	f7ff fcec 	bl	800907c <_ZL8send_cmdhm>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	bf0c      	ite	eq
 80096aa:	2301      	moveq	r3, #1
 80096ac:	2300      	movne	r3, #0
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d02a      	beq.n	800970a <_Z18USER_SPI_write_dmahPKhmj+0x11e>
			do {
				if (!xmit_datablock_dma(buff, 0xFC)) break;
 80096b4:	21fc      	movs	r1, #252	; 0xfc
 80096b6:	68b8      	ldr	r0, [r7, #8]
 80096b8:	f7ff fc50 	bl	8008f5c <_ZL18xmit_datablock_dmaPKhh>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	bf0c      	ite	eq
 80096c2:	2301      	moveq	r3, #1
 80096c4:	2300      	movne	r3, #0
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d10f      	bne.n	80096ec <_Z18USER_SPI_write_dmahPKhmj+0x100>
				buff += 512;
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80096d2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	3b01      	subs	r3, #1
 80096d8:	603b      	str	r3, [r7, #0]
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	bf14      	ite	ne
 80096e0:	2301      	movne	r3, #1
 80096e2:	2300      	moveq	r3, #0
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d001      	beq.n	80096ee <_Z18USER_SPI_write_dmahPKhmj+0x102>
			do {
 80096ea:	e7e3      	b.n	80096b4 <_Z18USER_SPI_write_dmahPKhmj+0xc8>
				if (!xmit_datablock_dma(buff, 0xFC)) break;
 80096ec:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80096ee:	21fd      	movs	r1, #253	; 0xfd
 80096f0:	2000      	movs	r0, #0
 80096f2:	f7ff fbfc 	bl	8008eee <_ZL14xmit_datablockPKhh>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	bf0c      	ite	eq
 80096fc:	2301      	moveq	r3, #1
 80096fe:	2300      	movne	r3, #0
 8009700:	b2db      	uxtb	r3, r3
 8009702:	2b00      	cmp	r3, #0
 8009704:	d001      	beq.n	800970a <_Z18USER_SPI_write_dmahPKhmj+0x11e>
 8009706:	2301      	movs	r3, #1
 8009708:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800970a:	f7ff fb91 	bl	8008e30 <_ZL11despiselectv>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d001      	beq.n	8009718 <_Z18USER_SPI_write_dmahPKhmj+0x12c>
 8009714:	2301      	movs	r3, #1
 8009716:	e000      	b.n	800971a <_Z18USER_SPI_write_dmahPKhmj+0x12e>
 8009718:	2300      	movs	r3, #0
 800971a:	bf00      	nop
}
 800971c:	4618      	mov	r0, r3
 800971e:	3710      	adds	r7, #16
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	2400002c 	.word	0x2400002c
 8009728:	24000a60 	.word	0x24000a60

0800972c <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b086      	sub	sp, #24
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	607a      	str	r2, [r7, #4]
 8009736:	603b      	str	r3, [r7, #0]
 8009738:	460b      	mov	r3, r1
 800973a:	72fb      	strb	r3, [r7, #11]
	int result = 1;
 800973c:	2301      	movs	r3, #1
 800973e:	617b      	str	r3, [r7, #20]

	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009740:	7afb      	ldrb	r3, [r7, #11]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d102      	bne.n	800974c <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x20>
 8009746:	6a3b      	ldr	r3, [r7, #32]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d101      	bne.n	8009750 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x24>
 800974c:	2304      	movs	r3, #4
 800974e:	e074      	b.n	800983a <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x10e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8009750:	4b3c      	ldr	r3, [pc, #240]	; (8009844 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x118>)
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	b2db      	uxtb	r3, r3
 8009756:	f003 0301 	and.w	r3, r3, #1
 800975a:	2b00      	cmp	r3, #0
 800975c:	bf14      	ite	ne
 800975e:	2301      	movne	r3, #1
 8009760:	2300      	moveq	r3, #0
 8009762:	b2db      	uxtb	r3, r3
 8009764:	2b00      	cmp	r3, #0
 8009766:	d001      	beq.n	800976c <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x40>
 8009768:	2303      	movs	r3, #3
 800976a:	e066      	b.n	800983a <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x10e>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800976c:	4b35      	ldr	r3, [pc, #212]	; (8009844 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x118>)
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	b2db      	uxtb	r3, r3
 8009772:	f003 0304 	and.w	r3, r3, #4
 8009776:	2b00      	cmp	r3, #0
 8009778:	bf14      	ite	ne
 800977a:	2301      	movne	r3, #1
 800977c:	2300      	moveq	r3, #0
 800977e:	b2db      	uxtb	r3, r3
 8009780:	2b00      	cmp	r3, #0
 8009782:	d001      	beq.n	8009788 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x5c>
 8009784:	2302      	movs	r3, #2
 8009786:	e058      	b.n	800983a <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x10e>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8009788:	4b2f      	ldr	r3, [pc, #188]	; (8009848 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x11c>)
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	f003 0308 	and.w	r3, r3, #8
 8009790:	2b00      	cmp	r3, #0
 8009792:	d102      	bne.n	800979a <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x6e>
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	025b      	lsls	r3, r3, #9
 8009798:	603b      	str	r3, [r7, #0]

	if (count == 1) {	/* Single sector write */
 800979a:	6a3b      	ldr	r3, [r7, #32]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d11e      	bne.n	80097de <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0xb2>
		blocksLeft = 1;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		multi = false;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		if ((send_cmd(CMD24, sector) == 0) 	/* WRITE_BLOCK */
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	2018      	movs	r0, #24
 80097b4:	f7ff fc62 	bl	800907c <_ZL8send_cmdhm>
 80097b8:	4603      	mov	r3, r0
		    && xmit_datablock(buff, 0xFE)) { // HAL_OK on the transmit start
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d109      	bne.n	80097d2 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0xa6>
 80097be:	22fe      	movs	r2, #254	; 0xfe
 80097c0:	6879      	ldr	r1, [r7, #4]
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f7ff fc08 	bl	8008fd8 <_ZN6FatDMA14xmit_datablockEPKhh>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d001      	beq.n	80097d2 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0xa6>
 80097ce:	2301      	movs	r3, #1
 80097d0:	e000      	b.n	80097d4 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0xa8>
 80097d2:	2300      	movs	r3, #0
		if ((send_cmd(CMD24, sector) == 0) 	/* WRITE_BLOCK */
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d02f      	beq.n	8009838 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x10c>
			result = 0;
 80097d8:	2300      	movs	r3, #0
 80097da:	617b      	str	r3, [r7, #20]
 80097dc:	e02c      	b.n	8009838 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x10c>
		}

	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80097de:	4b1a      	ldr	r3, [pc, #104]	; (8009848 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x11c>)
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	f003 0306 	and.w	r3, r3, #6
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d003      	beq.n	80097f2 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0xc6>
 80097ea:	6a39      	ldr	r1, [r7, #32]
 80097ec:	2097      	movs	r0, #151	; 0x97
 80097ee:	f7ff fc45 	bl	800907c <_ZL8send_cmdhm>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80097f2:	6839      	ldr	r1, [r7, #0]
 80097f4:	2019      	movs	r0, #25
 80097f6:	f7ff fc41 	bl	800907c <_ZL8send_cmdhm>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	bf0c      	ite	eq
 8009800:	2301      	moveq	r3, #1
 8009802:	2300      	movne	r3, #0
 8009804:	b2db      	uxtb	r3, r3
 8009806:	2b00      	cmp	r3, #0
 8009808:	d016      	beq.n	8009838 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x10c>
			blocksLeft = count;
 800980a:	6a3a      	ldr	r2, [r7, #32]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			multi = true;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2201      	movs	r2, #1
 8009816:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			if (xmit_datablock(buff, 0xFC)) return 0;
 800981a:	22fc      	movs	r2, #252	; 0xfc
 800981c:	6879      	ldr	r1, [r7, #4]
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f7ff fbda 	bl	8008fd8 <_ZN6FatDMA14xmit_datablockEPKhh>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	bf14      	ite	ne
 800982a:	2301      	movne	r3, #1
 800982c:	2300      	moveq	r3, #0
 800982e:	b2db      	uxtb	r3, r3
 8009830:	2b00      	cmp	r3, #0
 8009832:	d001      	beq.n	8009838 <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x10c>
 8009834:	2300      	movs	r3, #0
 8009836:	e000      	b.n	800983a <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj+0x10e>

		}
	}

	return result;	/* Return result */
 8009838:	697b      	ldr	r3, [r7, #20]
}
 800983a:	4618      	mov	r0, r3
 800983c:	3718      	adds	r7, #24
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	2400002c 	.word	0x2400002c
 8009848:	24000a60 	.word	0x24000a60

0800984c <_ZN6FatDMA23USER_SPI_write_dma_cpltEv>:


DRESULT FatDMA::USER_SPI_write_dma_cplt ()
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
	int success = xmit_datablock_cplt(); // post-block handshake
 8009854:	f7ff fbf8 	bl	8009048 <_ZN6FatDMA19xmit_datablock_cpltEv>
 8009858:	60f8      	str	r0, [r7, #12]
	if (multi) {
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8009860:	2b00      	cmp	r3, #0
 8009862:	d004      	beq.n	800986e <_ZN6FatDMA23USER_SPI_write_dma_cpltEv+0x22>
		xmit_datablock(0, 0xFD);	// STOP_TRAN token
 8009864:	22fd      	movs	r2, #253	; 0xfd
 8009866:	2100      	movs	r1, #0
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f7ff fbb5 	bl	8008fd8 <_ZN6FatDMA14xmit_datablockEPKhh>
	}
	despiselect();
 800986e:	f7ff fadf 	bl	8008e30 <_ZL11despiselectv>

	return success ? RES_OK : RES_ERROR;	/* Return result */
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d001      	beq.n	800987c <_ZN6FatDMA23USER_SPI_write_dma_cpltEv+0x30>
 8009878:	2300      	movs	r3, #0
 800987a:	e000      	b.n	800987e <_ZN6FatDMA23USER_SPI_write_dma_cpltEv+0x32>
 800987c:	2301      	movs	r3, #1
}
 800987e:	4618      	mov	r0, r3
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
	...

08009888 <_Z14USER_SPI_ioctlhhPv>:
DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b08c      	sub	sp, #48	; 0x30
 800988c:	af00      	add	r7, sp, #0
 800988e:	4603      	mov	r3, r0
 8009890:	603a      	str	r2, [r7, #0]
 8009892:	71fb      	strb	r3, [r7, #7]
 8009894:	460b      	mov	r3, r1
 8009896:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8009898:	79fb      	ldrb	r3, [r7, #7]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d001      	beq.n	80098a2 <_Z14USER_SPI_ioctlhhPv+0x1a>
 800989e:	2304      	movs	r3, #4
 80098a0:	e17d      	b.n	8009b9e <_Z14USER_SPI_ioctlhhPv+0x316>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80098a2:	4bba      	ldr	r3, [pc, #744]	; (8009b8c <_Z14USER_SPI_ioctlhhPv+0x304>)
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	f003 0301 	and.w	r3, r3, #1
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	bf14      	ite	ne
 80098b0:	2301      	movne	r3, #1
 80098b2:	2300      	moveq	r3, #0
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d001      	beq.n	80098be <_Z14USER_SPI_ioctlhhPv+0x36>
 80098ba:	2303      	movs	r3, #3
 80098bc:	e16f      	b.n	8009b9e <_Z14USER_SPI_ioctlhhPv+0x316>

	res = RES_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80098c4:	79bb      	ldrb	r3, [r7, #6]
 80098c6:	2b04      	cmp	r3, #4
 80098c8:	f200 8150 	bhi.w	8009b6c <_Z14USER_SPI_ioctlhhPv+0x2e4>
 80098cc:	a201      	add	r2, pc, #4	; (adr r2, 80098d4 <_Z14USER_SPI_ioctlhhPv+0x4c>)
 80098ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d2:	bf00      	nop
 80098d4:	080098e9 	.word	0x080098e9
 80098d8:	08009907 	.word	0x08009907
 80098dc:	08009b6d 	.word	0x08009b6d
 80098e0:	080099b5 	.word	0x080099b5
 80098e4:	08009abf 	.word	0x08009abf
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80098e8:	f7ff fab2 	bl	8008e50 <_ZL9spiselectv>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	bf14      	ite	ne
 80098f2:	2301      	movne	r3, #1
 80098f4:	2300      	moveq	r3, #0
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f000 813b 	beq.w	8009b74 <_Z14USER_SPI_ioctlhhPv+0x2ec>
 80098fe:	2300      	movs	r3, #0
 8009900:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8009904:	e136      	b.n	8009b74 <_Z14USER_SPI_ioctlhhPv+0x2ec>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8009906:	2100      	movs	r1, #0
 8009908:	2009      	movs	r0, #9
 800990a:	f7ff fbb7 	bl	800907c <_ZL8send_cmdhm>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d10a      	bne.n	800992a <_Z14USER_SPI_ioctlhhPv+0xa2>
 8009914:	f107 030c 	add.w	r3, r7, #12
 8009918:	2110      	movs	r1, #16
 800991a:	4618      	mov	r0, r3
 800991c:	f7ff fab8 	bl	8008e90 <_ZL14rcvr_datablockPhj>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d001      	beq.n	800992a <_Z14USER_SPI_ioctlhhPv+0xa2>
 8009926:	2301      	movs	r3, #1
 8009928:	e000      	b.n	800992c <_Z14USER_SPI_ioctlhhPv+0xa4>
 800992a:	2300      	movs	r3, #0
 800992c:	2b00      	cmp	r3, #0
 800992e:	f000 8123 	beq.w	8009b78 <_Z14USER_SPI_ioctlhhPv+0x2f0>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8009932:	7b3b      	ldrb	r3, [r7, #12]
 8009934:	119b      	asrs	r3, r3, #6
 8009936:	2b01      	cmp	r3, #1
 8009938:	d111      	bne.n	800995e <_Z14USER_SPI_ioctlhhPv+0xd6>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800993a:	7d7b      	ldrb	r3, [r7, #21]
 800993c:	461a      	mov	r2, r3
 800993e:	7d3b      	ldrb	r3, [r7, #20]
 8009940:	021b      	lsls	r3, r3, #8
 8009942:	4413      	add	r3, r2
 8009944:	461a      	mov	r2, r3
 8009946:	7cfb      	ldrb	r3, [r7, #19]
 8009948:	041b      	lsls	r3, r3, #16
 800994a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800994e:	4413      	add	r3, r2
 8009950:	3301      	adds	r3, #1
 8009952:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	029a      	lsls	r2, r3, #10
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	601a      	str	r2, [r3, #0]
 800995c:	e026      	b.n	80099ac <_Z14USER_SPI_ioctlhhPv+0x124>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800995e:	7c7b      	ldrb	r3, [r7, #17]
 8009960:	f003 030f 	and.w	r3, r3, #15
 8009964:	b2da      	uxtb	r2, r3
 8009966:	7dbb      	ldrb	r3, [r7, #22]
 8009968:	09db      	lsrs	r3, r3, #7
 800996a:	b2db      	uxtb	r3, r3
 800996c:	4413      	add	r3, r2
 800996e:	b2da      	uxtb	r2, r3
 8009970:	7d7b      	ldrb	r3, [r7, #21]
 8009972:	005b      	lsls	r3, r3, #1
 8009974:	b2db      	uxtb	r3, r3
 8009976:	f003 0306 	and.w	r3, r3, #6
 800997a:	b2db      	uxtb	r3, r3
 800997c:	4413      	add	r3, r2
 800997e:	b2db      	uxtb	r3, r3
 8009980:	3302      	adds	r3, #2
 8009982:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8009986:	7d3b      	ldrb	r3, [r7, #20]
 8009988:	119a      	asrs	r2, r3, #6
 800998a:	7cfb      	ldrb	r3, [r7, #19]
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	441a      	add	r2, r3
 8009990:	7cbb      	ldrb	r3, [r7, #18]
 8009992:	029b      	lsls	r3, r3, #10
 8009994:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009998:	4413      	add	r3, r2
 800999a:	3301      	adds	r3, #1
 800999c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800999e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80099a2:	3b09      	subs	r3, #9
 80099a4:	69fa      	ldr	r2, [r7, #28]
 80099a6:	409a      	lsls	r2, r3
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80099ac:	2300      	movs	r3, #0
 80099ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80099b2:	e0e1      	b.n	8009b78 <_Z14USER_SPI_ioctlhhPv+0x2f0>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80099b4:	4b76      	ldr	r3, [pc, #472]	; (8009b90 <_Z14USER_SPI_ioctlhhPv+0x308>)
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	f003 0304 	and.w	r3, r3, #4
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d038      	beq.n	8009a32 <_Z14USER_SPI_ioctlhhPv+0x1aa>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80099c0:	2100      	movs	r1, #0
 80099c2:	208d      	movs	r0, #141	; 0x8d
 80099c4:	f7ff fb5a 	bl	800907c <_ZL8send_cmdhm>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	bf0c      	ite	eq
 80099ce:	2301      	moveq	r3, #1
 80099d0:	2300      	movne	r3, #0
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	f000 80d1 	beq.w	8009b7c <_Z14USER_SPI_ioctlhhPv+0x2f4>
				xchg_spi(0xFF);
 80099da:	20ff      	movs	r0, #255	; 0xff
 80099dc:	f7ff f9b4 	bl	8008d48 <_ZL8xchg_spih>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80099e0:	f107 030c 	add.w	r3, r7, #12
 80099e4:	2110      	movs	r1, #16
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7ff fa52 	bl	8008e90 <_ZL14rcvr_datablockPhj>
 80099ec:	4603      	mov	r3, r0
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	bf14      	ite	ne
 80099f2:	2301      	movne	r3, #1
 80099f4:	2300      	moveq	r3, #0
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	f000 80bf 	beq.w	8009b7c <_Z14USER_SPI_ioctlhhPv+0x2f4>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80099fe:	2330      	movs	r3, #48	; 0x30
 8009a00:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009a04:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d008      	beq.n	8009a1e <_Z14USER_SPI_ioctlhhPv+0x196>
 8009a0c:	20ff      	movs	r0, #255	; 0xff
 8009a0e:	f7ff f99b 	bl	8008d48 <_ZL8xchg_spih>
 8009a12:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009a16:	3b01      	subs	r3, #1
 8009a18:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009a1c:	e7f2      	b.n	8009a04 <_Z14USER_SPI_ioctlhhPv+0x17c>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8009a1e:	7dbb      	ldrb	r3, [r7, #22]
 8009a20:	111b      	asrs	r3, r3, #4
 8009a22:	2210      	movs	r2, #16
 8009a24:	409a      	lsls	r2, r3
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8009a30:	e0a4      	b.n	8009b7c <_Z14USER_SPI_ioctlhhPv+0x2f4>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8009a32:	2100      	movs	r1, #0
 8009a34:	2009      	movs	r0, #9
 8009a36:	f7ff fb21 	bl	800907c <_ZL8send_cmdhm>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d10a      	bne.n	8009a56 <_Z14USER_SPI_ioctlhhPv+0x1ce>
 8009a40:	f107 030c 	add.w	r3, r7, #12
 8009a44:	2110      	movs	r1, #16
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7ff fa22 	bl	8008e90 <_ZL14rcvr_datablockPhj>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d001      	beq.n	8009a56 <_Z14USER_SPI_ioctlhhPv+0x1ce>
 8009a52:	2301      	movs	r3, #1
 8009a54:	e000      	b.n	8009a58 <_Z14USER_SPI_ioctlhhPv+0x1d0>
 8009a56:	2300      	movs	r3, #0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f000 808f 	beq.w	8009b7c <_Z14USER_SPI_ioctlhhPv+0x2f4>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8009a5e:	4b4c      	ldr	r3, [pc, #304]	; (8009b90 <_Z14USER_SPI_ioctlhhPv+0x308>)
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	f003 0302 	and.w	r3, r3, #2
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d011      	beq.n	8009a8e <_Z14USER_SPI_ioctlhhPv+0x206>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8009a6a:	7dbb      	ldrb	r3, [r7, #22]
 8009a6c:	005b      	lsls	r3, r3, #1
 8009a6e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8009a72:	7dfa      	ldrb	r2, [r7, #23]
 8009a74:	09d2      	lsrs	r2, r2, #7
 8009a76:	b2d2      	uxtb	r2, r2
 8009a78:	4413      	add	r3, r2
 8009a7a:	1c5a      	adds	r2, r3, #1
 8009a7c:	7e7b      	ldrb	r3, [r7, #25]
 8009a7e:	119b      	asrs	r3, r3, #6
 8009a80:	3b01      	subs	r3, #1
 8009a82:	fa02 f303 	lsl.w	r3, r2, r3
 8009a86:	461a      	mov	r2, r3
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	601a      	str	r2, [r3, #0]
 8009a8c:	e013      	b.n	8009ab6 <_Z14USER_SPI_ioctlhhPv+0x22e>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8009a8e:	7dbb      	ldrb	r3, [r7, #22]
 8009a90:	109b      	asrs	r3, r3, #2
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	f003 031f 	and.w	r3, r3, #31
 8009a98:	3301      	adds	r3, #1
 8009a9a:	7dfa      	ldrb	r2, [r7, #23]
 8009a9c:	00d2      	lsls	r2, r2, #3
 8009a9e:	f002 0218 	and.w	r2, r2, #24
 8009aa2:	7df9      	ldrb	r1, [r7, #23]
 8009aa4:	0949      	lsrs	r1, r1, #5
 8009aa6:	b2c9      	uxtb	r1, r1
 8009aa8:	440a      	add	r2, r1
 8009aaa:	3201      	adds	r2, #1
 8009aac:	fb02 f303 	mul.w	r3, r2, r3
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8009abc:	e05e      	b.n	8009b7c <_Z14USER_SPI_ioctlhhPv+0x2f4>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009abe:	4b34      	ldr	r3, [pc, #208]	; (8009b90 <_Z14USER_SPI_ioctlhhPv+0x308>)
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	f003 0306 	and.w	r3, r3, #6
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d05a      	beq.n	8009b80 <_Z14USER_SPI_ioctlhhPv+0x2f8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009aca:	f107 020c 	add.w	r2, r7, #12
 8009ace:	79fb      	ldrb	r3, [r7, #7]
 8009ad0:	210b      	movs	r1, #11
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7ff fed8 	bl	8009888 <_Z14USER_SPI_ioctlhhPv>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	bf14      	ite	ne
 8009ade:	2301      	movne	r3, #1
 8009ae0:	2300      	moveq	r3, #0
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d14d      	bne.n	8009b84 <_Z14USER_SPI_ioctlhhPv+0x2fc>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009ae8:	7b3b      	ldrb	r3, [r7, #12]
 8009aea:	119b      	asrs	r3, r3, #6
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d104      	bne.n	8009afa <_Z14USER_SPI_ioctlhhPv+0x272>
 8009af0:	7dbb      	ldrb	r3, [r7, #22]
 8009af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d046      	beq.n	8009b88 <_Z14USER_SPI_ioctlhhPv+0x300>
		dp = (DWORD*)buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	623b      	str	r3, [r7, #32]
 8009afe:	6a3b      	ldr	r3, [r7, #32]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b04:	6a3b      	ldr	r3, [r7, #32]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8009b0a:	4b21      	ldr	r3, [pc, #132]	; (8009b90 <_Z14USER_SPI_ioctlhhPv+0x308>)
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	f003 0308 	and.w	r3, r3, #8
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d105      	bne.n	8009b22 <_Z14USER_SPI_ioctlhhPv+0x29a>
			st *= 512; ed *= 512;
 8009b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b18:	025b      	lsls	r3, r3, #9
 8009b1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1e:	025b      	lsls	r3, r3, #9
 8009b20:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8009b22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b24:	2020      	movs	r0, #32
 8009b26:	f7ff faa9 	bl	800907c <_ZL8send_cmdhm>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d116      	bne.n	8009b5e <_Z14USER_SPI_ioctlhhPv+0x2d6>
 8009b30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b32:	2021      	movs	r0, #33	; 0x21
 8009b34:	f7ff faa2 	bl	800907c <_ZL8send_cmdhm>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d10f      	bne.n	8009b5e <_Z14USER_SPI_ioctlhhPv+0x2d6>
 8009b3e:	2100      	movs	r1, #0
 8009b40:	2026      	movs	r0, #38	; 0x26
 8009b42:	f7ff fa9b 	bl	800907c <_ZL8send_cmdhm>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d108      	bne.n	8009b5e <_Z14USER_SPI_ioctlhhPv+0x2d6>
 8009b4c:	f247 5030 	movw	r0, #30000	; 0x7530
 8009b50:	f7ff f945 	bl	8008dde <_ZL10wait_readyj>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d001      	beq.n	8009b5e <_Z14USER_SPI_ioctlhhPv+0x2d6>
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e000      	b.n	8009b60 <_Z14USER_SPI_ioctlhhPv+0x2d8>
 8009b5e:	2300      	movs	r3, #0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d017      	beq.n	8009b94 <_Z14USER_SPI_ioctlhhPv+0x30c>
			res = RES_OK;	/* FatFs does not check result of this command */
 8009b64:	2300      	movs	r3, #0
 8009b66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8009b6a:	e013      	b.n	8009b94 <_Z14USER_SPI_ioctlhhPv+0x30c>

	default:
		res = RES_PARERR;
 8009b6c:	2304      	movs	r3, #4
 8009b6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009b72:	e010      	b.n	8009b96 <_Z14USER_SPI_ioctlhhPv+0x30e>
		break;
 8009b74:	bf00      	nop
 8009b76:	e00e      	b.n	8009b96 <_Z14USER_SPI_ioctlhhPv+0x30e>
		break;
 8009b78:	bf00      	nop
 8009b7a:	e00c      	b.n	8009b96 <_Z14USER_SPI_ioctlhhPv+0x30e>
		break;
 8009b7c:	bf00      	nop
 8009b7e:	e00a      	b.n	8009b96 <_Z14USER_SPI_ioctlhhPv+0x30e>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009b80:	bf00      	nop
 8009b82:	e008      	b.n	8009b96 <_Z14USER_SPI_ioctlhhPv+0x30e>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009b84:	bf00      	nop
 8009b86:	e006      	b.n	8009b96 <_Z14USER_SPI_ioctlhhPv+0x30e>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009b88:	bf00      	nop
 8009b8a:	e004      	b.n	8009b96 <_Z14USER_SPI_ioctlhhPv+0x30e>
 8009b8c:	2400002c 	.word	0x2400002c
 8009b90:	24000a60 	.word	0x24000a60
		break;
 8009b94:	bf00      	nop
	}

	despiselect();
 8009b96:	f7ff f94b 	bl	8008e30 <_ZL11despiselectv>

	return res;
 8009b9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3730      	adds	r7, #48	; 0x30
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop

08009ba8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	4603      	mov	r3, r0
 8009bb0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009bb2:	79fb      	ldrb	r3, [r7, #7]
 8009bb4:	4a08      	ldr	r2, [pc, #32]	; (8009bd8 <disk_status+0x30>)
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	4413      	add	r3, r2
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	79fa      	ldrb	r2, [r7, #7]
 8009bc0:	4905      	ldr	r1, [pc, #20]	; (8009bd8 <disk_status+0x30>)
 8009bc2:	440a      	add	r2, r1
 8009bc4:	7a12      	ldrb	r2, [r2, #8]
 8009bc6:	4610      	mov	r0, r2
 8009bc8:	4798      	blx	r3
 8009bca:	4603      	mov	r3, r0
 8009bcc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3710      	adds	r7, #16
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	24000a94 	.word	0x24000a94

08009bdc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	4603      	mov	r3, r0
 8009be4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009be6:	2300      	movs	r3, #0
 8009be8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009bea:	79fb      	ldrb	r3, [r7, #7]
 8009bec:	4a0d      	ldr	r2, [pc, #52]	; (8009c24 <disk_initialize+0x48>)
 8009bee:	5cd3      	ldrb	r3, [r2, r3]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d111      	bne.n	8009c18 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009bf4:	79fb      	ldrb	r3, [r7, #7]
 8009bf6:	4a0b      	ldr	r2, [pc, #44]	; (8009c24 <disk_initialize+0x48>)
 8009bf8:	2101      	movs	r1, #1
 8009bfa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009bfc:	79fb      	ldrb	r3, [r7, #7]
 8009bfe:	4a09      	ldr	r2, [pc, #36]	; (8009c24 <disk_initialize+0x48>)
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	4413      	add	r3, r2
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	79fa      	ldrb	r2, [r7, #7]
 8009c0a:	4906      	ldr	r1, [pc, #24]	; (8009c24 <disk_initialize+0x48>)
 8009c0c:	440a      	add	r2, r1
 8009c0e:	7a12      	ldrb	r2, [r2, #8]
 8009c10:	4610      	mov	r0, r2
 8009c12:	4798      	blx	r3
 8009c14:	4603      	mov	r3, r0
 8009c16:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	24000a94 	.word	0x24000a94

08009c28 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009c28:	b590      	push	{r4, r7, lr}
 8009c2a:	b087      	sub	sp, #28
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60b9      	str	r1, [r7, #8]
 8009c30:	607a      	str	r2, [r7, #4]
 8009c32:	603b      	str	r3, [r7, #0]
 8009c34:	4603      	mov	r3, r0
 8009c36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009c38:	7bfb      	ldrb	r3, [r7, #15]
 8009c3a:	4a0a      	ldr	r2, [pc, #40]	; (8009c64 <disk_read+0x3c>)
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	4413      	add	r3, r2
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	689c      	ldr	r4, [r3, #8]
 8009c44:	7bfb      	ldrb	r3, [r7, #15]
 8009c46:	4a07      	ldr	r2, [pc, #28]	; (8009c64 <disk_read+0x3c>)
 8009c48:	4413      	add	r3, r2
 8009c4a:	7a18      	ldrb	r0, [r3, #8]
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	68b9      	ldr	r1, [r7, #8]
 8009c52:	47a0      	blx	r4
 8009c54:	4603      	mov	r3, r0
 8009c56:	75fb      	strb	r3, [r7, #23]
  return res;
 8009c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	371c      	adds	r7, #28
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd90      	pop	{r4, r7, pc}
 8009c62:	bf00      	nop
 8009c64:	24000a94 	.word	0x24000a94

08009c68 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009c68:	b590      	push	{r4, r7, lr}
 8009c6a:	b087      	sub	sp, #28
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60b9      	str	r1, [r7, #8]
 8009c70:	607a      	str	r2, [r7, #4]
 8009c72:	603b      	str	r3, [r7, #0]
 8009c74:	4603      	mov	r3, r0
 8009c76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009c78:	7bfb      	ldrb	r3, [r7, #15]
 8009c7a:	4a0a      	ldr	r2, [pc, #40]	; (8009ca4 <disk_write+0x3c>)
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	4413      	add	r3, r2
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	68dc      	ldr	r4, [r3, #12]
 8009c84:	7bfb      	ldrb	r3, [r7, #15]
 8009c86:	4a07      	ldr	r2, [pc, #28]	; (8009ca4 <disk_write+0x3c>)
 8009c88:	4413      	add	r3, r2
 8009c8a:	7a18      	ldrb	r0, [r3, #8]
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	68b9      	ldr	r1, [r7, #8]
 8009c92:	47a0      	blx	r4
 8009c94:	4603      	mov	r3, r0
 8009c96:	75fb      	strb	r3, [r7, #23]
  return res;
 8009c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	371c      	adds	r7, #28
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd90      	pop	{r4, r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	24000a94 	.word	0x24000a94

08009ca8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	4603      	mov	r3, r0
 8009cb0:	603a      	str	r2, [r7, #0]
 8009cb2:	71fb      	strb	r3, [r7, #7]
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009cb8:	79fb      	ldrb	r3, [r7, #7]
 8009cba:	4a09      	ldr	r2, [pc, #36]	; (8009ce0 <disk_ioctl+0x38>)
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	4413      	add	r3, r2
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	695b      	ldr	r3, [r3, #20]
 8009cc4:	79fa      	ldrb	r2, [r7, #7]
 8009cc6:	4906      	ldr	r1, [pc, #24]	; (8009ce0 <disk_ioctl+0x38>)
 8009cc8:	440a      	add	r2, r1
 8009cca:	7a10      	ldrb	r0, [r2, #8]
 8009ccc:	79b9      	ldrb	r1, [r7, #6]
 8009cce:	683a      	ldr	r2, [r7, #0]
 8009cd0:	4798      	blx	r3
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	73fb      	strb	r3, [r7, #15]
  return res;
 8009cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3710      	adds	r7, #16
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}
 8009ce0:	24000a94 	.word	0x24000a94

08009ce4 <_ZL7ld_wordPKh>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b085      	sub	sp, #20
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	3301      	adds	r3, #1
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009cf4:	89fb      	ldrh	r3, [r7, #14]
 8009cf6:	021b      	lsls	r3, r3, #8
 8009cf8:	b21a      	sxth	r2, r3
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	b21b      	sxth	r3, r3
 8009d00:	4313      	orrs	r3, r2
 8009d02:	b21b      	sxth	r3, r3
 8009d04:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009d06:	89fb      	ldrh	r3, [r7, #14]
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3714      	adds	r7, #20
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <_ZL8ld_dwordPKh>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	3303      	adds	r3, #3
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	021b      	lsls	r3, r3, #8
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	3202      	adds	r2, #2
 8009d2c:	7812      	ldrb	r2, [r2, #0]
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	021b      	lsls	r3, r3, #8
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	3201      	adds	r2, #1
 8009d3a:	7812      	ldrb	r2, [r2, #0]
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	021b      	lsls	r3, r3, #8
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	7812      	ldrb	r2, [r2, #0]
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	60fb      	str	r3, [r7, #12]
	return rv;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3714      	adds	r7, #20
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr

08009d5a <_ZL7st_wordPht>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009d5a:	b480      	push	{r7}
 8009d5c:	b083      	sub	sp, #12
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
 8009d62:	460b      	mov	r3, r1
 8009d64:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	1c5a      	adds	r2, r3, #1
 8009d6a:	607a      	str	r2, [r7, #4]
 8009d6c:	887a      	ldrh	r2, [r7, #2]
 8009d6e:	b2d2      	uxtb	r2, r2
 8009d70:	701a      	strb	r2, [r3, #0]
 8009d72:	887b      	ldrh	r3, [r7, #2]
 8009d74:	121b      	asrs	r3, r3, #8
 8009d76:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	1c5a      	adds	r2, r3, #1
 8009d7c:	607a      	str	r2, [r7, #4]
 8009d7e:	887a      	ldrh	r2, [r7, #2]
 8009d80:	b2d2      	uxtb	r2, r2
 8009d82:	701a      	strb	r2, [r3, #0]
}
 8009d84:	bf00      	nop
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <_ZL8st_dwordPhm>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	1c5a      	adds	r2, r3, #1
 8009d9e:	607a      	str	r2, [r7, #4]
 8009da0:	683a      	ldr	r2, [r7, #0]
 8009da2:	b2d2      	uxtb	r2, r2
 8009da4:	701a      	strb	r2, [r3, #0]
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	0a1b      	lsrs	r3, r3, #8
 8009daa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	1c5a      	adds	r2, r3, #1
 8009db0:	607a      	str	r2, [r7, #4]
 8009db2:	683a      	ldr	r2, [r7, #0]
 8009db4:	b2d2      	uxtb	r2, r2
 8009db6:	701a      	strb	r2, [r3, #0]
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	0a1b      	lsrs	r3, r3, #8
 8009dbc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	1c5a      	adds	r2, r3, #1
 8009dc2:	607a      	str	r2, [r7, #4]
 8009dc4:	683a      	ldr	r2, [r7, #0]
 8009dc6:	b2d2      	uxtb	r2, r2
 8009dc8:	701a      	strb	r2, [r3, #0]
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	0a1b      	lsrs	r3, r3, #8
 8009dce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	1c5a      	adds	r2, r3, #1
 8009dd4:	607a      	str	r2, [r7, #4]
 8009dd6:	683a      	ldr	r2, [r7, #0]
 8009dd8:	b2d2      	uxtb	r2, r2
 8009dda:	701a      	strb	r2, [r3, #0]
}
 8009ddc:	bf00      	nop
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <_ZL7mem_cpyPvPKvj>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009de8:	b480      	push	{r7}
 8009dea:	b087      	sub	sp, #28
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d013      	beq.n	8009e2a <_ZL7mem_cpyPvPKvj+0x42>
		do {
			*d++ = *s++;
 8009e02:	693a      	ldr	r2, [r7, #16]
 8009e04:	1c53      	adds	r3, r2, #1
 8009e06:	613b      	str	r3, [r7, #16]
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	1c59      	adds	r1, r3, #1
 8009e0c:	6179      	str	r1, [r7, #20]
 8009e0e:	7812      	ldrb	r2, [r2, #0]
 8009e10:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	3b01      	subs	r3, #1
 8009e16:	607b      	str	r3, [r7, #4]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	bf14      	ite	ne
 8009e1e:	2301      	movne	r3, #1
 8009e20:	2300      	moveq	r3, #0
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d000      	beq.n	8009e2a <_ZL7mem_cpyPvPKvj+0x42>
		do {
 8009e28:	e7eb      	b.n	8009e02 <_ZL7mem_cpyPvPKvj+0x1a>
	}
}
 8009e2a:	bf00      	nop
 8009e2c:	371c      	adds	r7, #28
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr

08009e36 <_ZL7mem_setPvij>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009e36:	b480      	push	{r7}
 8009e38:	b087      	sub	sp, #28
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	60f8      	str	r0, [r7, #12]
 8009e3e:	60b9      	str	r1, [r7, #8]
 8009e40:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	1c5a      	adds	r2, r3, #1
 8009e4a:	617a      	str	r2, [r7, #20]
 8009e4c:	68ba      	ldr	r2, [r7, #8]
 8009e4e:	b2d2      	uxtb	r2, r2
 8009e50:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	3b01      	subs	r3, #1
 8009e56:	607b      	str	r3, [r7, #4]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	bf14      	ite	ne
 8009e5e:	2301      	movne	r3, #1
 8009e60:	2300      	moveq	r3, #0
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d000      	beq.n	8009e6a <_ZL7mem_setPvij+0x34>
	do {
 8009e68:	e7ed      	b.n	8009e46 <_ZL7mem_setPvij+0x10>
}
 8009e6a:	bf00      	nop
 8009e6c:	371c      	adds	r7, #28
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr

08009e76 <_ZL7mem_cmpPKvS0_j>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009e76:	b480      	push	{r7}
 8009e78:	b089      	sub	sp, #36	; 0x24
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	60f8      	str	r0, [r7, #12]
 8009e7e:	60b9      	str	r1, [r7, #8]
 8009e80:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	61fb      	str	r3, [r7, #28]
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009e8e:	69fb      	ldr	r3, [r7, #28]
 8009e90:	1c5a      	adds	r2, r3, #1
 8009e92:	61fa      	str	r2, [r7, #28]
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	4619      	mov	r1, r3
 8009e98:	69bb      	ldr	r3, [r7, #24]
 8009e9a:	1c5a      	adds	r2, r3, #1
 8009e9c:	61ba      	str	r2, [r7, #24]
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	1acb      	subs	r3, r1, r3
 8009ea2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	607b      	str	r3, [r7, #4]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d004      	beq.n	8009eba <_ZL7mem_cmpPKvS0_j+0x44>
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d101      	bne.n	8009eba <_ZL7mem_cmpPKvS0_j+0x44>
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e000      	b.n	8009ebc <_ZL7mem_cmpPKvS0_j+0x46>
 8009eba:	2300      	movs	r3, #0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d000      	beq.n	8009ec2 <_ZL7mem_cmpPKvS0_j+0x4c>
	do {
 8009ec0:	e7e5      	b.n	8009e8e <_ZL7mem_cmpPKvS0_j+0x18>

	return r;
 8009ec2:	697b      	ldr	r3, [r7, #20]
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3724      	adds	r7, #36	; 0x24
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <_ZL7chk_chrPKci>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d009      	beq.n	8009ef6 <_ZL7chk_chrPKci+0x26>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d003      	beq.n	8009ef6 <_ZL7chk_chrPKci+0x26>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	607b      	str	r3, [r7, #4]
 8009ef4:	e7f1      	b.n	8009eda <_ZL7chk_chrPKci+0xa>
	return *str;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	781b      	ldrb	r3, [r3, #0]
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	370c      	adds	r7, #12
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr
	...

08009f08 <_ZL8chk_lockP3DIRi>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009f12:	2300      	movs	r3, #0
 8009f14:	60bb      	str	r3, [r7, #8]
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	60fb      	str	r3, [r7, #12]
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d82a      	bhi.n	8009f76 <_ZL8chk_lockP3DIRi+0x6e>
		if (Files[i].fs) {	/* Existing entry */
 8009f20:	4a26      	ldr	r2, [pc, #152]	; (8009fbc <_ZL8chk_lockP3DIRi+0xb4>)
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	011b      	lsls	r3, r3, #4
 8009f26:	4413      	add	r3, r2
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d01d      	beq.n	8009f6a <_ZL8chk_lockP3DIRi+0x62>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009f2e:	4a23      	ldr	r2, [pc, #140]	; (8009fbc <_ZL8chk_lockP3DIRi+0xb4>)
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	011b      	lsls	r3, r3, #4
 8009f34:	4413      	add	r3, r2
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d116      	bne.n	8009f6e <_ZL8chk_lockP3DIRi+0x66>
				Files[i].clu == dp->obj.sclust &&
 8009f40:	4a1e      	ldr	r2, [pc, #120]	; (8009fbc <_ZL8chk_lockP3DIRi+0xb4>)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	011b      	lsls	r3, r3, #4
 8009f46:	4413      	add	r3, r2
 8009f48:	3304      	adds	r3, #4
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d10c      	bne.n	8009f6e <_ZL8chk_lockP3DIRi+0x66>
				Files[i].ofs == dp->dptr) break;
 8009f54:	4a19      	ldr	r2, [pc, #100]	; (8009fbc <_ZL8chk_lockP3DIRi+0xb4>)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	011b      	lsls	r3, r3, #4
 8009f5a:	4413      	add	r3, r2
 8009f5c:	3308      	adds	r3, #8
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d102      	bne.n	8009f6e <_ZL8chk_lockP3DIRi+0x66>
				Files[i].ofs == dp->dptr) break;
 8009f68:	e005      	b.n	8009f76 <_ZL8chk_lockP3DIRi+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	3301      	adds	r3, #1
 8009f72:	60fb      	str	r3, [r7, #12]
 8009f74:	e7d1      	b.n	8009f1a <_ZL8chk_lockP3DIRi+0x12>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	d109      	bne.n	8009f90 <_ZL8chk_lockP3DIRi+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d102      	bne.n	8009f88 <_ZL8chk_lockP3DIRi+0x80>
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	2b02      	cmp	r3, #2
 8009f86:	d101      	bne.n	8009f8c <_ZL8chk_lockP3DIRi+0x84>
 8009f88:	2300      	movs	r3, #0
 8009f8a:	e011      	b.n	8009fb0 <_ZL8chk_lockP3DIRi+0xa8>
 8009f8c:	2312      	movs	r3, #18
 8009f8e:	e00f      	b.n	8009fb0 <_ZL8chk_lockP3DIRi+0xa8>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d108      	bne.n	8009fa8 <_ZL8chk_lockP3DIRi+0xa0>
 8009f96:	4a09      	ldr	r2, [pc, #36]	; (8009fbc <_ZL8chk_lockP3DIRi+0xb4>)
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	011b      	lsls	r3, r3, #4
 8009f9c:	4413      	add	r3, r2
 8009f9e:	330c      	adds	r3, #12
 8009fa0:	881b      	ldrh	r3, [r3, #0]
 8009fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fa6:	d101      	bne.n	8009fac <_ZL8chk_lockP3DIRi+0xa4>
 8009fa8:	2310      	movs	r3, #16
 8009faa:	e000      	b.n	8009fae <_ZL8chk_lockP3DIRi+0xa6>
 8009fac:	2300      	movs	r3, #0
 8009fae:	bf00      	nop
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3714      	adds	r7, #20
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr
 8009fbc:	24000a74 	.word	0x24000a74

08009fc0 <_ZL8enq_lockv>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	607b      	str	r3, [r7, #4]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d80a      	bhi.n	8009fe6 <_ZL8enq_lockv+0x26>
 8009fd0:	4a0b      	ldr	r2, [pc, #44]	; (800a000 <_ZL8enq_lockv+0x40>)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	011b      	lsls	r3, r3, #4
 8009fd6:	4413      	add	r3, r2
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d003      	beq.n	8009fe6 <_ZL8enq_lockv+0x26>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	607b      	str	r3, [r7, #4]
 8009fe4:	e7f1      	b.n	8009fca <_ZL8enq_lockv+0xa>
	return (i == _FS_LOCK) ? 0 : 1;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2b02      	cmp	r3, #2
 8009fea:	bf14      	ite	ne
 8009fec:	2301      	movne	r3, #1
 8009fee:	2300      	moveq	r3, #0
 8009ff0:	b2db      	uxtb	r3, r3
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	370c      	adds	r7, #12
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	24000a74 	.word	0x24000a74

0800a004 <_ZL8inc_lockP3DIRi>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a004:	b480      	push	{r7}
 800a006:	b085      	sub	sp, #20
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a00e:	2300      	movs	r3, #0
 800a010:	60fb      	str	r3, [r7, #12]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2b01      	cmp	r3, #1
 800a016:	d821      	bhi.n	800a05c <_ZL8inc_lockP3DIRi+0x58>
		if (Files[i].fs == dp->obj.fs &&
 800a018:	4a40      	ldr	r2, [pc, #256]	; (800a11c <_ZL8inc_lockP3DIRi+0x118>)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	011b      	lsls	r3, r3, #4
 800a01e:	4413      	add	r3, r2
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	429a      	cmp	r2, r3
 800a028:	d113      	bne.n	800a052 <_ZL8inc_lockP3DIRi+0x4e>
			Files[i].clu == dp->obj.sclust &&
 800a02a:	4a3c      	ldr	r2, [pc, #240]	; (800a11c <_ZL8inc_lockP3DIRi+0x118>)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	011b      	lsls	r3, r3, #4
 800a030:	4413      	add	r3, r2
 800a032:	3304      	adds	r3, #4
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d109      	bne.n	800a052 <_ZL8inc_lockP3DIRi+0x4e>
			Files[i].ofs == dp->dptr) break;
 800a03e:	4a37      	ldr	r2, [pc, #220]	; (800a11c <_ZL8inc_lockP3DIRi+0x118>)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	011b      	lsls	r3, r3, #4
 800a044:	4413      	add	r3, r2
 800a046:	3308      	adds	r3, #8
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a04e:	429a      	cmp	r2, r3
 800a050:	d003      	beq.n	800a05a <_ZL8inc_lockP3DIRi+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	3301      	adds	r3, #1
 800a056:	60fb      	str	r3, [r7, #12]
 800a058:	e7db      	b.n	800a012 <_ZL8inc_lockP3DIRi+0xe>
			Files[i].ofs == dp->dptr) break;
 800a05a:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2b02      	cmp	r3, #2
 800a060:	d132      	bne.n	800a0c8 <_ZL8inc_lockP3DIRi+0xc4>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a062:	2300      	movs	r3, #0
 800a064:	60fb      	str	r3, [r7, #12]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d80a      	bhi.n	800a082 <_ZL8inc_lockP3DIRi+0x7e>
 800a06c:	4a2b      	ldr	r2, [pc, #172]	; (800a11c <_ZL8inc_lockP3DIRi+0x118>)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	011b      	lsls	r3, r3, #4
 800a072:	4413      	add	r3, r2
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d003      	beq.n	800a082 <_ZL8inc_lockP3DIRi+0x7e>
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	3301      	adds	r3, #1
 800a07e:	60fb      	str	r3, [r7, #12]
 800a080:	e7f1      	b.n	800a066 <_ZL8inc_lockP3DIRi+0x62>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2b02      	cmp	r3, #2
 800a086:	d101      	bne.n	800a08c <_ZL8inc_lockP3DIRi+0x88>
 800a088:	2300      	movs	r3, #0
 800a08a:	e040      	b.n	800a10e <_ZL8inc_lockP3DIRi+0x10a>
		Files[i].fs = dp->obj.fs;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	4922      	ldr	r1, [pc, #136]	; (800a11c <_ZL8inc_lockP3DIRi+0x118>)
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	011b      	lsls	r3, r3, #4
 800a096:	440b      	add	r3, r1
 800a098:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	689a      	ldr	r2, [r3, #8]
 800a09e:	491f      	ldr	r1, [pc, #124]	; (800a11c <_ZL8inc_lockP3DIRi+0x118>)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	011b      	lsls	r3, r3, #4
 800a0a4:	440b      	add	r3, r1
 800a0a6:	3304      	adds	r3, #4
 800a0a8:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	695a      	ldr	r2, [r3, #20]
 800a0ae:	491b      	ldr	r1, [pc, #108]	; (800a11c <_ZL8inc_lockP3DIRi+0x118>)
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	011b      	lsls	r3, r3, #4
 800a0b4:	440b      	add	r3, r1
 800a0b6:	3308      	adds	r3, #8
 800a0b8:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a0ba:	4a18      	ldr	r2, [pc, #96]	; (800a11c <_ZL8inc_lockP3DIRi+0x118>)
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	011b      	lsls	r3, r3, #4
 800a0c0:	4413      	add	r3, r2
 800a0c2:	330c      	adds	r3, #12
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d009      	beq.n	800a0e2 <_ZL8inc_lockP3DIRi+0xde>
 800a0ce:	4a13      	ldr	r2, [pc, #76]	; (800a11c <_ZL8inc_lockP3DIRi+0x118>)
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	011b      	lsls	r3, r3, #4
 800a0d4:	4413      	add	r3, r2
 800a0d6:	330c      	adds	r3, #12
 800a0d8:	881b      	ldrh	r3, [r3, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d001      	beq.n	800a0e2 <_ZL8inc_lockP3DIRi+0xde>
 800a0de:	2300      	movs	r3, #0
 800a0e0:	e015      	b.n	800a10e <_ZL8inc_lockP3DIRi+0x10a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d108      	bne.n	800a0fa <_ZL8inc_lockP3DIRi+0xf6>
 800a0e8:	4a0c      	ldr	r2, [pc, #48]	; (800a11c <_ZL8inc_lockP3DIRi+0x118>)
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	011b      	lsls	r3, r3, #4
 800a0ee:	4413      	add	r3, r2
 800a0f0:	330c      	adds	r3, #12
 800a0f2:	881b      	ldrh	r3, [r3, #0]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	b29a      	uxth	r2, r3
 800a0f8:	e001      	b.n	800a0fe <_ZL8inc_lockP3DIRi+0xfa>
 800a0fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a0fe:	4907      	ldr	r1, [pc, #28]	; (800a11c <_ZL8inc_lockP3DIRi+0x118>)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	011b      	lsls	r3, r3, #4
 800a104:	440b      	add	r3, r1
 800a106:	330c      	adds	r3, #12
 800a108:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	3301      	adds	r3, #1
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3714      	adds	r7, #20
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	24000a74 	.word	0x24000a74

0800a120 <_ZL8dec_lockj>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a120:	b480      	push	{r7}
 800a122:	b085      	sub	sp, #20
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	3b01      	subs	r3, #1
 800a12c:	607b      	str	r3, [r7, #4]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2b01      	cmp	r3, #1
 800a132:	bf94      	ite	ls
 800a134:	2301      	movls	r3, #1
 800a136:	2300      	movhi	r3, #0
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d025      	beq.n	800a18a <_ZL8dec_lockj+0x6a>
		n = Files[i].ctr;
 800a13e:	4a17      	ldr	r2, [pc, #92]	; (800a19c <_ZL8dec_lockj+0x7c>)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	011b      	lsls	r3, r3, #4
 800a144:	4413      	add	r3, r2
 800a146:	330c      	adds	r3, #12
 800a148:	881b      	ldrh	r3, [r3, #0]
 800a14a:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a14c:	89fb      	ldrh	r3, [r7, #14]
 800a14e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a152:	d101      	bne.n	800a158 <_ZL8dec_lockj+0x38>
 800a154:	2300      	movs	r3, #0
 800a156:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a158:	89fb      	ldrh	r3, [r7, #14]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d002      	beq.n	800a164 <_ZL8dec_lockj+0x44>
 800a15e:	89fb      	ldrh	r3, [r7, #14]
 800a160:	3b01      	subs	r3, #1
 800a162:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a164:	4a0d      	ldr	r2, [pc, #52]	; (800a19c <_ZL8dec_lockj+0x7c>)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	011b      	lsls	r3, r3, #4
 800a16a:	4413      	add	r3, r2
 800a16c:	330c      	adds	r3, #12
 800a16e:	89fa      	ldrh	r2, [r7, #14]
 800a170:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a172:	89fb      	ldrh	r3, [r7, #14]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d105      	bne.n	800a184 <_ZL8dec_lockj+0x64>
 800a178:	4a08      	ldr	r2, [pc, #32]	; (800a19c <_ZL8dec_lockj+0x7c>)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	011b      	lsls	r3, r3, #4
 800a17e:	4413      	add	r3, r2
 800a180:	2200      	movs	r2, #0
 800a182:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a184:	2300      	movs	r3, #0
 800a186:	737b      	strb	r3, [r7, #13]
 800a188:	e001      	b.n	800a18e <_ZL8dec_lockj+0x6e>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a18a:	2302      	movs	r3, #2
 800a18c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a18e:	7b7b      	ldrb	r3, [r7, #13]
}
 800a190:	4618      	mov	r0, r3
 800a192:	3714      	adds	r7, #20
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr
 800a19c:	24000a74 	.word	0x24000a74

0800a1a0 <_ZL10clear_lockP5FATFS>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	60fb      	str	r3, [r7, #12]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d811      	bhi.n	800a1d6 <_ZL10clear_lockP5FATFS+0x36>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a1b2:	4a0c      	ldr	r2, [pc, #48]	; (800a1e4 <_ZL10clear_lockP5FATFS+0x44>)
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	011b      	lsls	r3, r3, #4
 800a1b8:	4413      	add	r3, r2
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d105      	bne.n	800a1ce <_ZL10clear_lockP5FATFS+0x2e>
 800a1c2:	4a08      	ldr	r2, [pc, #32]	; (800a1e4 <_ZL10clear_lockP5FATFS+0x44>)
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	011b      	lsls	r3, r3, #4
 800a1c8:	4413      	add	r3, r2
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	60fb      	str	r3, [r7, #12]
 800a1d4:	e7ea      	b.n	800a1ac <_ZL10clear_lockP5FATFS+0xc>
	}
}
 800a1d6:	bf00      	nop
 800a1d8:	3714      	adds	r7, #20
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop
 800a1e4:	24000a74 	.word	0x24000a74

0800a1e8 <_ZL11sync_windowP5FATFS>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b086      	sub	sp, #24
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	78db      	ldrb	r3, [r3, #3]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d039      	beq.n	800a270 <_ZL11sync_windowP5FATFS+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a200:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	7858      	ldrb	r0, [r3, #1]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a20c:	2301      	movs	r3, #1
 800a20e:	697a      	ldr	r2, [r7, #20]
 800a210:	f7ff fd2a 	bl	8009c68 <disk_write>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	bf14      	ite	ne
 800a21a:	2301      	movne	r3, #1
 800a21c:	2300      	moveq	r3, #0
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	2b00      	cmp	r3, #0
 800a222:	d002      	beq.n	800a22a <_ZL11sync_windowP5FATFS+0x42>
			res = FR_DISK_ERR;
 800a224:	2301      	movs	r3, #1
 800a226:	73fb      	strb	r3, [r7, #15]
 800a228:	e022      	b.n	800a270 <_ZL11sync_windowP5FATFS+0x88>
		} else {
			fs->wflag = 0;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6a1b      	ldr	r3, [r3, #32]
 800a234:	697a      	ldr	r2, [r7, #20]
 800a236:	1ad2      	subs	r2, r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	699b      	ldr	r3, [r3, #24]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d217      	bcs.n	800a270 <_ZL11sync_windowP5FATFS+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	789b      	ldrb	r3, [r3, #2]
 800a244:	613b      	str	r3, [r7, #16]
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d911      	bls.n	800a270 <_ZL11sync_windowP5FATFS+0x88>
					wsect += fs->fsize;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	699b      	ldr	r3, [r3, #24]
 800a250:	697a      	ldr	r2, [r7, #20]
 800a252:	4413      	add	r3, r2
 800a254:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	7858      	ldrb	r0, [r3, #1]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a260:	2301      	movs	r3, #1
 800a262:	697a      	ldr	r2, [r7, #20]
 800a264:	f7ff fd00 	bl	8009c68 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	3b01      	subs	r3, #1
 800a26c:	613b      	str	r3, [r7, #16]
 800a26e:	e7ea      	b.n	800a246 <_ZL11sync_windowP5FATFS+0x5e>
				}
			}
		}
	}
	return res;
 800a270:	7bfb      	ldrb	r3, [r7, #15]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3718      	adds	r7, #24
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <_ZL11move_windowP5FATFSm>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b084      	sub	sp, #16
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
 800a282:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a284:	2300      	movs	r3, #0
 800a286:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a28c:	683a      	ldr	r2, [r7, #0]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d020      	beq.n	800a2d4 <_ZL11move_windowP5FATFSm+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f7ff ffa8 	bl	800a1e8 <_ZL11sync_windowP5FATFS>
 800a298:	4603      	mov	r3, r0
 800a29a:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a29c:	7bfb      	ldrb	r3, [r7, #15]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d118      	bne.n	800a2d4 <_ZL11move_windowP5FATFSm+0x5a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	7858      	ldrb	r0, [r3, #1]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	683a      	ldr	r2, [r7, #0]
 800a2b0:	f7ff fcba 	bl	8009c28 <disk_read>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	bf14      	ite	ne
 800a2ba:	2301      	movne	r3, #1
 800a2bc:	2300      	moveq	r3, #0
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d004      	beq.n	800a2ce <_ZL11move_windowP5FATFSm+0x54>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a2c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a2c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	683a      	ldr	r2, [r7, #0]
 800a2d2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800a2d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3710      	adds	r7, #16
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
	...

0800a2e0 <_ZL7sync_fsP5FATFS>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f7ff ff7d 	bl	800a1e8 <_ZL11sync_windowP5FATFS>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a2f2:	7bfb      	ldrb	r3, [r7, #15]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d15d      	bne.n	800a3b4 <_ZL7sync_fsP5FATFS+0xd4>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	2b03      	cmp	r3, #3
 800a2fe:	d148      	bne.n	800a392 <_ZL7sync_fsP5FATFS+0xb2>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	791b      	ldrb	r3, [r3, #4]
 800a304:	2b01      	cmp	r3, #1
 800a306:	d144      	bne.n	800a392 <_ZL7sync_fsP5FATFS+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	3330      	adds	r3, #48	; 0x30
 800a30c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a310:	2100      	movs	r1, #0
 800a312:	4618      	mov	r0, r3
 800a314:	f7ff fd8f 	bl	8009e36 <_ZL7mem_setPvij>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	3330      	adds	r3, #48	; 0x30
 800a31c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a320:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a324:	4618      	mov	r0, r3
 800a326:	f7ff fd18 	bl	8009d5a <_ZL7st_wordPht>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	3330      	adds	r3, #48	; 0x30
 800a32e:	4924      	ldr	r1, [pc, #144]	; (800a3c0 <_ZL7sync_fsP5FATFS+0xe0>)
 800a330:	4618      	mov	r0, r3
 800a332:	f7ff fd2d 	bl	8009d90 <_ZL8st_dwordPhm>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	3330      	adds	r3, #48	; 0x30
 800a33a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a33e:	4921      	ldr	r1, [pc, #132]	; (800a3c4 <_ZL7sync_fsP5FATFS+0xe4>)
 800a340:	4618      	mov	r0, r3
 800a342:	f7ff fd25 	bl	8009d90 <_ZL8st_dwordPhm>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	3330      	adds	r3, #48	; 0x30
 800a34a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	4619      	mov	r1, r3
 800a354:	4610      	mov	r0, r2
 800a356:	f7ff fd1b 	bl	8009d90 <_ZL8st_dwordPhm>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	3330      	adds	r3, #48	; 0x30
 800a35e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	4619      	mov	r1, r3
 800a368:	4610      	mov	r0, r2
 800a36a:	f7ff fd11 	bl	8009d90 <_ZL8st_dwordPhm>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	69db      	ldr	r3, [r3, #28]
 800a372:	1c5a      	adds	r2, r3, #1
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	7858      	ldrb	r0, [r3, #1]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a386:	2301      	movs	r3, #1
 800a388:	f7ff fc6e 	bl	8009c68 <disk_write>
			fs->fsi_flag = 0;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2200      	movs	r2, #0
 800a390:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	785b      	ldrb	r3, [r3, #1]
 800a396:	2200      	movs	r2, #0
 800a398:	2100      	movs	r1, #0
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7ff fc84 	bl	8009ca8 <disk_ioctl>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	bf14      	ite	ne
 800a3a6:	2301      	movne	r3, #1
 800a3a8:	2300      	moveq	r3, #0
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d001      	beq.n	800a3b4 <_ZL7sync_fsP5FATFS+0xd4>
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3710      	adds	r7, #16
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	41615252 	.word	0x41615252
 800a3c4:	61417272 	.word	0x61417272

0800a3c8 <_ZL10clust2sectP5FATFSm>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	3b02      	subs	r3, #2
 800a3d6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	695b      	ldr	r3, [r3, #20]
 800a3dc:	3b02      	subs	r3, #2
 800a3de:	683a      	ldr	r2, [r7, #0]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d301      	bcc.n	800a3e8 <_ZL10clust2sectP5FATFSm+0x20>
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	e008      	b.n	800a3fa <_ZL10clust2sectP5FATFSm+0x32>
	return clst * fs->csize + fs->database;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	895b      	ldrh	r3, [r3, #10]
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	fb03 f202 	mul.w	r2, r3, r2
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f8:	4413      	add	r3, r2
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	370c      	adds	r7, #12
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr

0800a406 <_ZL7get_fatP5_FDIDm>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b086      	sub	sp, #24
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d904      	bls.n	800a426 <_ZL7get_fatP5_FDIDm+0x20>
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	695b      	ldr	r3, [r3, #20]
 800a420:	683a      	ldr	r2, [r7, #0]
 800a422:	429a      	cmp	r2, r3
 800a424:	d302      	bcc.n	800a42c <_ZL7get_fatP5_FDIDm+0x26>
		val = 1;	/* Internal error */
 800a426:	2301      	movs	r3, #1
 800a428:	617b      	str	r3, [r7, #20]
 800a42a:	e0a1      	b.n	800a570 <_ZL7get_fatP5_FDIDm+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a42c:	f04f 33ff 	mov.w	r3, #4294967295
 800a430:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	2b02      	cmp	r3, #2
 800a438:	d050      	beq.n	800a4dc <_ZL7get_fatP5_FDIDm+0xd6>
 800a43a:	2b03      	cmp	r3, #3
 800a43c:	d06d      	beq.n	800a51a <_ZL7get_fatP5_FDIDm+0x114>
 800a43e:	2b01      	cmp	r3, #1
 800a440:	f040 808c 	bne.w	800a55c <_ZL7get_fatP5_FDIDm+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	60fb      	str	r3, [r7, #12]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	085b      	lsrs	r3, r3, #1
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	4413      	add	r3, r2
 800a450:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	6a1a      	ldr	r2, [r3, #32]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	0a5b      	lsrs	r3, r3, #9
 800a45a:	4413      	add	r3, r2
 800a45c:	4619      	mov	r1, r3
 800a45e:	6938      	ldr	r0, [r7, #16]
 800a460:	f7ff ff0b 	bl	800a27a <_ZL11move_windowP5FATFSm>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	bf14      	ite	ne
 800a46a:	2301      	movne	r3, #1
 800a46c:	2300      	moveq	r3, #0
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	2b00      	cmp	r3, #0
 800a472:	d176      	bne.n	800a562 <_ZL7get_fatP5_FDIDm+0x15c>
			wc = fs->win[bc++ % SS(fs)];
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	1c5a      	adds	r2, r3, #1
 800a478:	60fa      	str	r2, [r7, #12]
 800a47a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a47e:	693a      	ldr	r2, [r7, #16]
 800a480:	4413      	add	r3, r2
 800a482:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a486:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	6a1a      	ldr	r2, [r3, #32]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	0a5b      	lsrs	r3, r3, #9
 800a490:	4413      	add	r3, r2
 800a492:	4619      	mov	r1, r3
 800a494:	6938      	ldr	r0, [r7, #16]
 800a496:	f7ff fef0 	bl	800a27a <_ZL11move_windowP5FATFSm>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	bf14      	ite	ne
 800a4a0:	2301      	movne	r3, #1
 800a4a2:	2300      	moveq	r3, #0
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d15d      	bne.n	800a566 <_ZL7get_fatP5_FDIDm+0x160>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4b0:	693a      	ldr	r2, [r7, #16]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a4b8:	021b      	lsls	r3, r3, #8
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	f003 0301 	and.w	r3, r3, #1
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d002      	beq.n	800a4d2 <_ZL7get_fatP5_FDIDm+0xcc>
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	091b      	lsrs	r3, r3, #4
 800a4d0:	e002      	b.n	800a4d8 <_ZL7get_fatP5_FDIDm+0xd2>
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4d8:	617b      	str	r3, [r7, #20]
			break;
 800a4da:	e049      	b.n	800a570 <_ZL7get_fatP5_FDIDm+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	6a1a      	ldr	r2, [r3, #32]
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	0a1b      	lsrs	r3, r3, #8
 800a4e4:	4413      	add	r3, r2
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	6938      	ldr	r0, [r7, #16]
 800a4ea:	f7ff fec6 	bl	800a27a <_ZL11move_windowP5FATFSm>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	bf14      	ite	ne
 800a4f4:	2301      	movne	r3, #1
 800a4f6:	2300      	moveq	r3, #0
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d135      	bne.n	800a56a <_ZL7get_fatP5_FDIDm+0x164>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	005b      	lsls	r3, r3, #1
 800a508:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a50c:	4413      	add	r3, r2
 800a50e:	4618      	mov	r0, r3
 800a510:	f7ff fbe8 	bl	8009ce4 <_ZL7ld_wordPKh>
 800a514:	4603      	mov	r3, r0
 800a516:	617b      	str	r3, [r7, #20]
			break;
 800a518:	e02a      	b.n	800a570 <_ZL7get_fatP5_FDIDm+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	6a1a      	ldr	r2, [r3, #32]
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	09db      	lsrs	r3, r3, #7
 800a522:	4413      	add	r3, r2
 800a524:	4619      	mov	r1, r3
 800a526:	6938      	ldr	r0, [r7, #16]
 800a528:	f7ff fea7 	bl	800a27a <_ZL11move_windowP5FATFSm>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	bf14      	ite	ne
 800a532:	2301      	movne	r3, #1
 800a534:	2300      	moveq	r3, #0
 800a536:	b2db      	uxtb	r3, r3
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d118      	bne.n	800a56e <_ZL7get_fatP5_FDIDm+0x168>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a54a:	4413      	add	r3, r2
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7ff fbe1 	bl	8009d14 <_ZL8ld_dwordPKh>
 800a552:	4603      	mov	r3, r0
 800a554:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a558:	617b      	str	r3, [r7, #20]
			break;
 800a55a:	e009      	b.n	800a570 <_ZL7get_fatP5_FDIDm+0x16a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a55c:	2301      	movs	r3, #1
 800a55e:	617b      	str	r3, [r7, #20]
 800a560:	e006      	b.n	800a570 <_ZL7get_fatP5_FDIDm+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a562:	bf00      	nop
 800a564:	e004      	b.n	800a570 <_ZL7get_fatP5_FDIDm+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a566:	bf00      	nop
 800a568:	e002      	b.n	800a570 <_ZL7get_fatP5_FDIDm+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a56a:	bf00      	nop
 800a56c:	e000      	b.n	800a570 <_ZL7get_fatP5_FDIDm+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a56e:	bf00      	nop
		}
	}

	return val;
 800a570:	697b      	ldr	r3, [r7, #20]
}
 800a572:	4618      	mov	r0, r3
 800a574:	3718      	adds	r7, #24
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}

0800a57a <_ZL7put_fatP5FATFSmm>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a57a:	b590      	push	{r4, r7, lr}
 800a57c:	b089      	sub	sp, #36	; 0x24
 800a57e:	af00      	add	r7, sp, #0
 800a580:	60f8      	str	r0, [r7, #12]
 800a582:	60b9      	str	r1, [r7, #8]
 800a584:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a586:	2302      	movs	r3, #2
 800a588:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	f240 80d5 	bls.w	800a73c <_ZL7put_fatP5FATFSmm+0x1c2>
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	695b      	ldr	r3, [r3, #20]
 800a596:	68ba      	ldr	r2, [r7, #8]
 800a598:	429a      	cmp	r2, r3
 800a59a:	f080 80cf 	bcs.w	800a73c <_ZL7put_fatP5FATFSmm+0x1c2>
		switch (fs->fs_type) {
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	2b02      	cmp	r3, #2
 800a5a4:	d071      	beq.n	800a68a <_ZL7put_fatP5FATFSmm+0x110>
 800a5a6:	2b03      	cmp	r3, #3
 800a5a8:	f000 808f 	beq.w	800a6ca <_ZL7put_fatP5FATFSmm+0x150>
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	f040 80c5 	bne.w	800a73c <_ZL7put_fatP5FATFSmm+0x1c2>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	61bb      	str	r3, [r7, #24]
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	085b      	lsrs	r3, r3, #1
 800a5ba:	69ba      	ldr	r2, [r7, #24]
 800a5bc:	4413      	add	r3, r2
 800a5be:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	6a1a      	ldr	r2, [r3, #32]
 800a5c4:	69bb      	ldr	r3, [r7, #24]
 800a5c6:	0a5b      	lsrs	r3, r3, #9
 800a5c8:	4413      	add	r3, r2
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	f7ff fe54 	bl	800a27a <_ZL11move_windowP5FATFSm>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a5d6:	7ffb      	ldrb	r3, [r7, #31]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	f040 80a8 	bne.w	800a72e <_ZL7put_fatP5FATFSmm+0x1b4>
			p = fs->win + bc++ % SS(fs);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	1c59      	adds	r1, r3, #1
 800a5e8:	61b9      	str	r1, [r7, #24]
 800a5ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ee:	4413      	add	r3, r2
 800a5f0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	f003 0301 	and.w	r3, r3, #1
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00d      	beq.n	800a618 <_ZL7put_fatP5FATFSmm+0x9e>
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	b25b      	sxtb	r3, r3
 800a602:	f003 030f 	and.w	r3, r3, #15
 800a606:	b25a      	sxtb	r2, r3
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	011b      	lsls	r3, r3, #4
 800a60e:	b25b      	sxtb	r3, r3
 800a610:	4313      	orrs	r3, r2
 800a612:	b25b      	sxtb	r3, r3
 800a614:	b2db      	uxtb	r3, r3
 800a616:	e001      	b.n	800a61c <_ZL7put_fatP5FATFSmm+0xa2>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	697a      	ldr	r2, [r7, #20]
 800a61e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2201      	movs	r2, #1
 800a624:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	6a1a      	ldr	r2, [r3, #32]
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	0a5b      	lsrs	r3, r3, #9
 800a62e:	4413      	add	r3, r2
 800a630:	4619      	mov	r1, r3
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	f7ff fe21 	bl	800a27a <_ZL11move_windowP5FATFSm>
 800a638:	4603      	mov	r3, r0
 800a63a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a63c:	7ffb      	ldrb	r3, [r7, #31]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d177      	bne.n	800a732 <_ZL7put_fatP5FATFSmm+0x1b8>
			p = fs->win + bc % SS(fs);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a648:	69bb      	ldr	r3, [r7, #24]
 800a64a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a64e:	4413      	add	r3, r2
 800a650:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	f003 0301 	and.w	r3, r3, #1
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d003      	beq.n	800a664 <_ZL7put_fatP5FATFSmm+0xea>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	091b      	lsrs	r3, r3, #4
 800a660:	b2db      	uxtb	r3, r3
 800a662:	e00c      	b.n	800a67e <_ZL7put_fatP5FATFSmm+0x104>
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	f023 030f 	bic.w	r3, r3, #15
 800a66c:	b2da      	uxtb	r2, r3
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	0a1b      	lsrs	r3, r3, #8
 800a672:	b2db      	uxtb	r3, r3
 800a674:	f003 030f 	and.w	r3, r3, #15
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	4313      	orrs	r3, r2
 800a67c:	b2db      	uxtb	r3, r3
 800a67e:	697a      	ldr	r2, [r7, #20]
 800a680:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2201      	movs	r2, #1
 800a686:	70da      	strb	r2, [r3, #3]
			break;
 800a688:	e058      	b.n	800a73c <_ZL7put_fatP5FATFSmm+0x1c2>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	6a1a      	ldr	r2, [r3, #32]
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	0a1b      	lsrs	r3, r3, #8
 800a692:	4413      	add	r3, r2
 800a694:	4619      	mov	r1, r3
 800a696:	68f8      	ldr	r0, [r7, #12]
 800a698:	f7ff fdef 	bl	800a27a <_ZL11move_windowP5FATFSm>
 800a69c:	4603      	mov	r3, r0
 800a69e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a6a0:	7ffb      	ldrb	r3, [r7, #31]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d147      	bne.n	800a736 <_ZL7put_fatP5FATFSmm+0x1bc>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	005b      	lsls	r3, r3, #1
 800a6b0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a6b4:	4413      	add	r3, r2
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	b292      	uxth	r2, r2
 800a6ba:	4611      	mov	r1, r2
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7ff fb4c 	bl	8009d5a <_ZL7st_wordPht>
			fs->wflag = 1;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	70da      	strb	r2, [r3, #3]
			break;
 800a6c8:	e038      	b.n	800a73c <_ZL7put_fatP5FATFSmm+0x1c2>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6a1a      	ldr	r2, [r3, #32]
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	09db      	lsrs	r3, r3, #7
 800a6d2:	4413      	add	r3, r2
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f7ff fdcf 	bl	800a27a <_ZL11move_windowP5FATFSm>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a6e0:	7ffb      	ldrb	r3, [r7, #31]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d129      	bne.n	800a73a <_ZL7put_fatP5FATFSmm+0x1c0>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a6fa:	4413      	add	r3, r2
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7ff fb09 	bl	8009d14 <_ZL8ld_dwordPKh>
 800a702:	4603      	mov	r3, r0
 800a704:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a708:	4323      	orrs	r3, r4
 800a70a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a71a:	4413      	add	r3, r2
 800a71c:	6879      	ldr	r1, [r7, #4]
 800a71e:	4618      	mov	r0, r3
 800a720:	f7ff fb36 	bl	8009d90 <_ZL8st_dwordPhm>
			fs->wflag = 1;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2201      	movs	r2, #1
 800a728:	70da      	strb	r2, [r3, #3]
			break;
 800a72a:	bf00      	nop
 800a72c:	e006      	b.n	800a73c <_ZL7put_fatP5FATFSmm+0x1c2>
			if (res != FR_OK) break;
 800a72e:	bf00      	nop
 800a730:	e004      	b.n	800a73c <_ZL7put_fatP5FATFSmm+0x1c2>
			if (res != FR_OK) break;
 800a732:	bf00      	nop
 800a734:	e002      	b.n	800a73c <_ZL7put_fatP5FATFSmm+0x1c2>
			if (res != FR_OK) break;
 800a736:	bf00      	nop
 800a738:	e000      	b.n	800a73c <_ZL7put_fatP5FATFSmm+0x1c2>
			if (res != FR_OK) break;
 800a73a:	bf00      	nop
		}
	}
	return res;
 800a73c:	7ffb      	ldrb	r3, [r7, #31]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3724      	adds	r7, #36	; 0x24
 800a742:	46bd      	mov	sp, r7
 800a744:	bd90      	pop	{r4, r7, pc}

0800a746 <_ZL12remove_chainP5_FDIDmm>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a746:	b580      	push	{r7, lr}
 800a748:	b088      	sub	sp, #32
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	60f8      	str	r0, [r7, #12]
 800a74e:	60b9      	str	r1, [r7, #8]
 800a750:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a752:	2300      	movs	r3, #0
 800a754:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d904      	bls.n	800a76c <_ZL12remove_chainP5_FDIDmm+0x26>
 800a762:	69bb      	ldr	r3, [r7, #24]
 800a764:	695b      	ldr	r3, [r3, #20]
 800a766:	68ba      	ldr	r2, [r7, #8]
 800a768:	429a      	cmp	r2, r3
 800a76a:	d301      	bcc.n	800a770 <_ZL12remove_chainP5_FDIDmm+0x2a>
 800a76c:	2302      	movs	r3, #2
 800a76e:	e04b      	b.n	800a808 <_ZL12remove_chainP5_FDIDmm+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d00c      	beq.n	800a790 <_ZL12remove_chainP5_FDIDmm+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a776:	f04f 32ff 	mov.w	r2, #4294967295
 800a77a:	6879      	ldr	r1, [r7, #4]
 800a77c:	69b8      	ldr	r0, [r7, #24]
 800a77e:	f7ff fefc 	bl	800a57a <_ZL7put_fatP5FATFSmm>
 800a782:	4603      	mov	r3, r0
 800a784:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a786:	7ffb      	ldrb	r3, [r7, #31]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d001      	beq.n	800a790 <_ZL12remove_chainP5_FDIDmm+0x4a>
 800a78c:	7ffb      	ldrb	r3, [r7, #31]
 800a78e:	e03b      	b.n	800a808 <_ZL12remove_chainP5_FDIDmm+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a790:	68b9      	ldr	r1, [r7, #8]
 800a792:	68f8      	ldr	r0, [r7, #12]
 800a794:	f7ff fe37 	bl	800a406 <_ZL7get_fatP5_FDIDm>
 800a798:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d031      	beq.n	800a804 <_ZL12remove_chainP5_FDIDmm+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d101      	bne.n	800a7aa <_ZL12remove_chainP5_FDIDmm+0x64>
 800a7a6:	2302      	movs	r3, #2
 800a7a8:	e02e      	b.n	800a808 <_ZL12remove_chainP5_FDIDmm+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7b0:	d101      	bne.n	800a7b6 <_ZL12remove_chainP5_FDIDmm+0x70>
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e028      	b.n	800a808 <_ZL12remove_chainP5_FDIDmm+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	68b9      	ldr	r1, [r7, #8]
 800a7ba:	69b8      	ldr	r0, [r7, #24]
 800a7bc:	f7ff fedd 	bl	800a57a <_ZL7put_fatP5FATFSmm>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a7c4:	7ffb      	ldrb	r3, [r7, #31]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d001      	beq.n	800a7ce <_ZL12remove_chainP5_FDIDmm+0x88>
 800a7ca:	7ffb      	ldrb	r3, [r7, #31]
 800a7cc:	e01c      	b.n	800a808 <_ZL12remove_chainP5_FDIDmm+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	691a      	ldr	r2, [r3, #16]
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	695b      	ldr	r3, [r3, #20]
 800a7d6:	3b02      	subs	r3, #2
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d20b      	bcs.n	800a7f4 <_ZL12remove_chainP5_FDIDmm+0xae>
			fs->free_clst++;
 800a7dc:	69bb      	ldr	r3, [r7, #24]
 800a7de:	691b      	ldr	r3, [r3, #16]
 800a7e0:	1c5a      	adds	r2, r3, #1
 800a7e2:	69bb      	ldr	r3, [r7, #24]
 800a7e4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a7e6:	69bb      	ldr	r3, [r7, #24]
 800a7e8:	791b      	ldrb	r3, [r3, #4]
 800a7ea:	f043 0301 	orr.w	r3, r3, #1
 800a7ee:	b2da      	uxtb	r2, r3
 800a7f0:	69bb      	ldr	r3, [r7, #24]
 800a7f2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a7f8:	69bb      	ldr	r3, [r7, #24]
 800a7fa:	695b      	ldr	r3, [r3, #20]
 800a7fc:	68ba      	ldr	r2, [r7, #8]
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d201      	bcs.n	800a806 <_ZL12remove_chainP5_FDIDmm+0xc0>
	do {
 800a802:	e7c5      	b.n	800a790 <_ZL12remove_chainP5_FDIDmm+0x4a>
		if (nxt == 0) break;				/* Empty cluster? */
 800a804:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a806:	2300      	movs	r3, #0
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3720      	adds	r7, #32
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <_ZL12create_chainP5_FDIDm>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b088      	sub	sp, #32
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d10d      	bne.n	800a842 <_ZL12create_chainP5_FDIDm+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a82c:	69bb      	ldr	r3, [r7, #24]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d004      	beq.n	800a83c <_ZL12create_chainP5_FDIDm+0x2c>
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	695b      	ldr	r3, [r3, #20]
 800a836:	69ba      	ldr	r2, [r7, #24]
 800a838:	429a      	cmp	r2, r3
 800a83a:	d31b      	bcc.n	800a874 <_ZL12create_chainP5_FDIDm+0x64>
 800a83c:	2301      	movs	r3, #1
 800a83e:	61bb      	str	r3, [r7, #24]
 800a840:	e018      	b.n	800a874 <_ZL12create_chainP5_FDIDm+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a842:	6839      	ldr	r1, [r7, #0]
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f7ff fdde 	bl	800a406 <_ZL7get_fatP5_FDIDm>
 800a84a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d801      	bhi.n	800a856 <_ZL12create_chainP5_FDIDm+0x46>
 800a852:	2301      	movs	r3, #1
 800a854:	e070      	b.n	800a938 <_ZL12create_chainP5_FDIDm+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a85c:	d101      	bne.n	800a862 <_ZL12create_chainP5_FDIDm+0x52>
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	e06a      	b.n	800a938 <_ZL12create_chainP5_FDIDm+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	695b      	ldr	r3, [r3, #20]
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d201      	bcs.n	800a870 <_ZL12create_chainP5_FDIDm+0x60>
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	e063      	b.n	800a938 <_ZL12create_chainP5_FDIDm+0x128>
		scl = clst;
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a874:	69bb      	ldr	r3, [r7, #24]
 800a876:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	3301      	adds	r3, #1
 800a87c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	695b      	ldr	r3, [r3, #20]
 800a882:	69fa      	ldr	r2, [r7, #28]
 800a884:	429a      	cmp	r2, r3
 800a886:	d307      	bcc.n	800a898 <_ZL12create_chainP5_FDIDm+0x88>
				ncl = 2;
 800a888:	2302      	movs	r3, #2
 800a88a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a88c:	69fa      	ldr	r2, [r7, #28]
 800a88e:	69bb      	ldr	r3, [r7, #24]
 800a890:	429a      	cmp	r2, r3
 800a892:	d901      	bls.n	800a898 <_ZL12create_chainP5_FDIDm+0x88>
 800a894:	2300      	movs	r3, #0
 800a896:	e04f      	b.n	800a938 <_ZL12create_chainP5_FDIDm+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a898:	69f9      	ldr	r1, [r7, #28]
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f7ff fdb3 	bl	800a406 <_ZL7get_fatP5_FDIDm>
 800a8a0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d00e      	beq.n	800a8c6 <_ZL12create_chainP5_FDIDm+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d003      	beq.n	800a8b6 <_ZL12create_chainP5_FDIDm+0xa6>
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b4:	d101      	bne.n	800a8ba <_ZL12create_chainP5_FDIDm+0xaa>
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	e03e      	b.n	800a938 <_ZL12create_chainP5_FDIDm+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a8ba:	69fa      	ldr	r2, [r7, #28]
 800a8bc:	69bb      	ldr	r3, [r7, #24]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d1da      	bne.n	800a878 <_ZL12create_chainP5_FDIDm+0x68>
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	e038      	b.n	800a938 <_ZL12create_chainP5_FDIDm+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a8c6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a8c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a8cc:	69f9      	ldr	r1, [r7, #28]
 800a8ce:	6938      	ldr	r0, [r7, #16]
 800a8d0:	f7ff fe53 	bl	800a57a <_ZL7put_fatP5FATFSmm>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a8d8:	7dfb      	ldrb	r3, [r7, #23]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d109      	bne.n	800a8f2 <_ZL12create_chainP5_FDIDm+0xe2>
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d006      	beq.n	800a8f2 <_ZL12create_chainP5_FDIDm+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a8e4:	69fa      	ldr	r2, [r7, #28]
 800a8e6:	6839      	ldr	r1, [r7, #0]
 800a8e8:	6938      	ldr	r0, [r7, #16]
 800a8ea:	f7ff fe46 	bl	800a57a <_ZL7put_fatP5FATFSmm>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a8f2:	7dfb      	ldrb	r3, [r7, #23]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d116      	bne.n	800a926 <_ZL12create_chainP5_FDIDm+0x116>
		fs->last_clst = ncl;
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	69fa      	ldr	r2, [r7, #28]
 800a8fc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	691a      	ldr	r2, [r3, #16]
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	695b      	ldr	r3, [r3, #20]
 800a906:	3b02      	subs	r3, #2
 800a908:	429a      	cmp	r2, r3
 800a90a:	d804      	bhi.n	800a916 <_ZL12create_chainP5_FDIDm+0x106>
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	1e5a      	subs	r2, r3, #1
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	791b      	ldrb	r3, [r3, #4]
 800a91a:	f043 0301 	orr.w	r3, r3, #1
 800a91e:	b2da      	uxtb	r2, r3
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	711a      	strb	r2, [r3, #4]
 800a924:	e007      	b.n	800a936 <_ZL12create_chainP5_FDIDm+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a926:	7dfb      	ldrb	r3, [r7, #23]
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d102      	bne.n	800a932 <_ZL12create_chainP5_FDIDm+0x122>
 800a92c:	f04f 33ff 	mov.w	r3, #4294967295
 800a930:	e000      	b.n	800a934 <_ZL12create_chainP5_FDIDm+0x124>
 800a932:	2301      	movs	r3, #1
 800a934:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a936:	69fb      	ldr	r3, [r7, #28]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3720      	adds	r7, #32
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <_ZL10clmt_clustP3FILm>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a940:	b480      	push	{r7}
 800a942:	b087      	sub	sp, #28
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a954:	3304      	adds	r3, #4
 800a956:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	0a5b      	lsrs	r3, r3, #9
 800a95c:	68fa      	ldr	r2, [r7, #12]
 800a95e:	8952      	ldrh	r2, [r2, #10]
 800a960:	fbb3 f3f2 	udiv	r3, r3, r2
 800a964:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	1d1a      	adds	r2, r3, #4
 800a96a:	613a      	str	r2, [r7, #16]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d101      	bne.n	800a97a <_ZL10clmt_clustP3FILm+0x3a>
 800a976:	2300      	movs	r3, #0
 800a978:	e010      	b.n	800a99c <_ZL10clmt_clustP3FILm+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a97a:	697a      	ldr	r2, [r7, #20]
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	429a      	cmp	r2, r3
 800a980:	d307      	bcc.n	800a992 <_ZL10clmt_clustP3FILm+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a982:	697a      	ldr	r2, [r7, #20]
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	1ad3      	subs	r3, r2, r3
 800a988:	617b      	str	r3, [r7, #20]
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	3304      	adds	r3, #4
 800a98e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a990:	e7e9      	b.n	800a966 <_ZL10clmt_clustP3FILm+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a992:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	4413      	add	r3, r2
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	371c      	adds	r7, #28
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <_ZL7dir_sdiP3DIRm>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b086      	sub	sp, #24
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9be:	d204      	bcs.n	800a9ca <_ZL7dir_sdiP3DIRm+0x22>
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	f003 031f 	and.w	r3, r3, #31
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d001      	beq.n	800a9ce <_ZL7dir_sdiP3DIRm+0x26>
		return FR_INT_ERR;
 800a9ca:	2302      	movs	r3, #2
 800a9cc:	e063      	b.n	800aa96 <_ZL7dir_sdiP3DIRm+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	683a      	ldr	r2, [r7, #0]
 800a9d2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	689b      	ldr	r3, [r3, #8]
 800a9d8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d106      	bne.n	800a9ee <_ZL7dir_sdiP3DIRm+0x46>
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	2b02      	cmp	r3, #2
 800a9e6:	d902      	bls.n	800a9ee <_ZL7dir_sdiP3DIRm+0x46>
		clst = fs->dirbase;
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ec:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d10c      	bne.n	800aa0e <_ZL7dir_sdiP3DIRm+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	095b      	lsrs	r3, r3, #5
 800a9f8:	693a      	ldr	r2, [r7, #16]
 800a9fa:	8912      	ldrh	r2, [r2, #8]
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d301      	bcc.n	800aa04 <_ZL7dir_sdiP3DIRm+0x5c>
 800aa00:	2302      	movs	r3, #2
 800aa02:	e048      	b.n	800aa96 <_ZL7dir_sdiP3DIRm+0xee>
		dp->sect = fs->dirbase;
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	61da      	str	r2, [r3, #28]
 800aa0c:	e029      	b.n	800aa62 <_ZL7dir_sdiP3DIRm+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	895b      	ldrh	r3, [r3, #10]
 800aa12:	025b      	lsls	r3, r3, #9
 800aa14:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800aa16:	683a      	ldr	r2, [r7, #0]
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d31a      	bcc.n	800aa54 <_ZL7dir_sdiP3DIRm+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6979      	ldr	r1, [r7, #20]
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7ff fcef 	bl	800a406 <_ZL7get_fatP5_FDIDm>
 800aa28:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa30:	d101      	bne.n	800aa36 <_ZL7dir_sdiP3DIRm+0x8e>
 800aa32:	2301      	movs	r3, #1
 800aa34:	e02f      	b.n	800aa96 <_ZL7dir_sdiP3DIRm+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	d904      	bls.n	800aa46 <_ZL7dir_sdiP3DIRm+0x9e>
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	695b      	ldr	r3, [r3, #20]
 800aa40:	697a      	ldr	r2, [r7, #20]
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d301      	bcc.n	800aa4a <_ZL7dir_sdiP3DIRm+0xa2>
 800aa46:	2302      	movs	r3, #2
 800aa48:	e025      	b.n	800aa96 <_ZL7dir_sdiP3DIRm+0xee>
			ofs -= csz;
 800aa4a:	683a      	ldr	r2, [r7, #0]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	1ad3      	subs	r3, r2, r3
 800aa50:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800aa52:	e7e0      	b.n	800aa16 <_ZL7dir_sdiP3DIRm+0x6e>
		}
		dp->sect = clust2sect(fs, clst);
 800aa54:	6979      	ldr	r1, [r7, #20]
 800aa56:	6938      	ldr	r0, [r7, #16]
 800aa58:	f7ff fcb6 	bl	800a3c8 <_ZL10clust2sectP5FATFSm>
 800aa5c:	4602      	mov	r2, r0
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	697a      	ldr	r2, [r7, #20]
 800aa66:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	69db      	ldr	r3, [r3, #28]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d101      	bne.n	800aa74 <_ZL7dir_sdiP3DIRm+0xcc>
 800aa70:	2302      	movs	r3, #2
 800aa72:	e010      	b.n	800aa96 <_ZL7dir_sdiP3DIRm+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	69da      	ldr	r2, [r3, #28]
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	0a5b      	lsrs	r3, r3, #9
 800aa7c:	441a      	add	r2, r3
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa8e:	441a      	add	r2, r3
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3718      	adds	r7, #24
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <_ZL8dir_nextP3DIRi>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b086      	sub	sp, #24
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
 800aaa6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	695b      	ldr	r3, [r3, #20]
 800aab2:	3320      	adds	r3, #32
 800aab4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	69db      	ldr	r3, [r3, #28]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d003      	beq.n	800aac6 <_ZL8dir_nextP3DIRi+0x28>
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aac4:	d301      	bcc.n	800aaca <_ZL8dir_nextP3DIRi+0x2c>
 800aac6:	2304      	movs	r3, #4
 800aac8:	e0b5      	b.n	800ac36 <_ZL8dir_nextP3DIRi+0x198>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	f040 80a3 	bne.w	800ac1c <_ZL8dir_nextP3DIRi+0x17e>
		dp->sect++;				/* Next sector */
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	69db      	ldr	r3, [r3, #28]
 800aada:	1c5a      	adds	r2, r3, #1
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	699b      	ldr	r3, [r3, #24]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10b      	bne.n	800ab00 <_ZL8dir_nextP3DIRi+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	095b      	lsrs	r3, r3, #5
 800aaec:	68fa      	ldr	r2, [r7, #12]
 800aaee:	8912      	ldrh	r2, [r2, #8]
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	f0c0 8093 	bcc.w	800ac1c <_ZL8dir_nextP3DIRi+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	61da      	str	r2, [r3, #28]
 800aafc:	2304      	movs	r3, #4
 800aafe:	e09a      	b.n	800ac36 <_ZL8dir_nextP3DIRi+0x198>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	0a5b      	lsrs	r3, r3, #9
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	8952      	ldrh	r2, [r2, #10]
 800ab08:	3a01      	subs	r2, #1
 800ab0a:	4013      	ands	r3, r2
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f040 8085 	bne.w	800ac1c <_ZL8dir_nextP3DIRi+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ab12:	687a      	ldr	r2, [r7, #4]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	699b      	ldr	r3, [r3, #24]
 800ab18:	4619      	mov	r1, r3
 800ab1a:	4610      	mov	r0, r2
 800ab1c:	f7ff fc73 	bl	800a406 <_ZL7get_fatP5_FDIDm>
 800ab20:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d801      	bhi.n	800ab2c <_ZL8dir_nextP3DIRi+0x8e>
 800ab28:	2302      	movs	r3, #2
 800ab2a:	e084      	b.n	800ac36 <_ZL8dir_nextP3DIRi+0x198>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab32:	d101      	bne.n	800ab38 <_ZL8dir_nextP3DIRi+0x9a>
 800ab34:	2301      	movs	r3, #1
 800ab36:	e07e      	b.n	800ac36 <_ZL8dir_nextP3DIRi+0x198>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	695b      	ldr	r3, [r3, #20]
 800ab3c:	697a      	ldr	r2, [r7, #20]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d362      	bcc.n	800ac08 <_ZL8dir_nextP3DIRi+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d104      	bne.n	800ab52 <_ZL8dir_nextP3DIRi+0xb4>
						dp->sect = 0; return FR_NO_FILE;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	61da      	str	r2, [r3, #28]
 800ab4e:	2304      	movs	r3, #4
 800ab50:	e071      	b.n	800ac36 <_ZL8dir_nextP3DIRi+0x198>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	699b      	ldr	r3, [r3, #24]
 800ab58:	4619      	mov	r1, r3
 800ab5a:	4610      	mov	r0, r2
 800ab5c:	f7ff fe58 	bl	800a810 <_ZL12create_chainP5_FDIDm>
 800ab60:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d101      	bne.n	800ab6c <_ZL8dir_nextP3DIRi+0xce>
 800ab68:	2307      	movs	r3, #7
 800ab6a:	e064      	b.n	800ac36 <_ZL8dir_nextP3DIRi+0x198>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d101      	bne.n	800ab76 <_ZL8dir_nextP3DIRi+0xd8>
 800ab72:	2302      	movs	r3, #2
 800ab74:	e05f      	b.n	800ac36 <_ZL8dir_nextP3DIRi+0x198>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab7c:	d101      	bne.n	800ab82 <_ZL8dir_nextP3DIRi+0xe4>
 800ab7e:	2301      	movs	r3, #1
 800ab80:	e059      	b.n	800ac36 <_ZL8dir_nextP3DIRi+0x198>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ab82:	68f8      	ldr	r0, [r7, #12]
 800ab84:	f7ff fb30 	bl	800a1e8 <_ZL11sync_windowP5FATFS>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	bf14      	ite	ne
 800ab8e:	2301      	movne	r3, #1
 800ab90:	2300      	moveq	r3, #0
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d001      	beq.n	800ab9c <_ZL8dir_nextP3DIRi+0xfe>
 800ab98:	2301      	movs	r3, #1
 800ab9a:	e04c      	b.n	800ac36 <_ZL8dir_nextP3DIRi+0x198>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	3330      	adds	r3, #48	; 0x30
 800aba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aba4:	2100      	movs	r1, #0
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7ff f945 	bl	8009e36 <_ZL7mem_setPvij>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800abac:	2300      	movs	r3, #0
 800abae:	613b      	str	r3, [r7, #16]
 800abb0:	6979      	ldr	r1, [r7, #20]
 800abb2:	68f8      	ldr	r0, [r7, #12]
 800abb4:	f7ff fc08 	bl	800a3c8 <_ZL10clust2sectP5FATFSm>
 800abb8:	4602      	mov	r2, r0
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	62da      	str	r2, [r3, #44]	; 0x2c
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	895b      	ldrh	r3, [r3, #10]
 800abc2:	461a      	mov	r2, r3
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d218      	bcs.n	800abfc <_ZL8dir_nextP3DIRi+0x15e>
						fs->wflag = 1;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2201      	movs	r2, #1
 800abce:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	f7ff fb09 	bl	800a1e8 <_ZL11sync_windowP5FATFS>
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	bf14      	ite	ne
 800abdc:	2301      	movne	r3, #1
 800abde:	2300      	moveq	r3, #0
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d001      	beq.n	800abea <_ZL8dir_nextP3DIRi+0x14c>
 800abe6:	2301      	movs	r3, #1
 800abe8:	e025      	b.n	800ac36 <_ZL8dir_nextP3DIRi+0x198>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	3301      	adds	r3, #1
 800abee:	613b      	str	r3, [r7, #16]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf4:	1c5a      	adds	r2, r3, #1
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	62da      	str	r2, [r3, #44]	; 0x2c
 800abfa:	e7e0      	b.n	800abbe <_ZL8dir_nextP3DIRi+0x120>
					}
					fs->winsect -= n;							/* Restore window offset */
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	1ad2      	subs	r2, r2, r3
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	697a      	ldr	r2, [r7, #20]
 800ac0c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ac0e:	6979      	ldr	r1, [r7, #20]
 800ac10:	68f8      	ldr	r0, [r7, #12]
 800ac12:	f7ff fbd9 	bl	800a3c8 <_ZL10clust2sectP5FATFSm>
 800ac16:	4602      	mov	r2, r0
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	68ba      	ldr	r2, [r7, #8]
 800ac20:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac2e:	441a      	add	r2, r3
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ac34:	2300      	movs	r3, #0
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3718      	adds	r7, #24
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <_ZL9dir_allocP3DIRj>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b086      	sub	sp, #24
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
 800ac46:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ac4e:	2100      	movs	r1, #0
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f7ff fea9 	bl	800a9a8 <_ZL7dir_sdiP3DIRm>
 800ac56:	4603      	mov	r3, r0
 800ac58:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ac5a:	7dfb      	ldrb	r3, [r7, #23]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d130      	bne.n	800acc2 <_ZL9dir_allocP3DIRj+0x84>
		n = 0;
 800ac60:	2300      	movs	r3, #0
 800ac62:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	69db      	ldr	r3, [r3, #28]
 800ac68:	4619      	mov	r1, r3
 800ac6a:	68f8      	ldr	r0, [r7, #12]
 800ac6c:	f7ff fb05 	bl	800a27a <_ZL11move_windowP5FATFSm>
 800ac70:	4603      	mov	r3, r0
 800ac72:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ac74:	7dfb      	ldrb	r3, [r7, #23]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d122      	bne.n	800acc0 <_ZL9dir_allocP3DIRj+0x82>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6a1b      	ldr	r3, [r3, #32]
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	2be5      	cmp	r3, #229	; 0xe5
 800ac82:	d004      	beq.n	800ac8e <_ZL9dir_allocP3DIRj+0x50>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6a1b      	ldr	r3, [r3, #32]
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d10c      	bne.n	800aca8 <_ZL9dir_allocP3DIRj+0x6a>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	3301      	adds	r3, #1
 800ac92:	613b      	str	r3, [r7, #16]
 800ac94:	693a      	ldr	r2, [r7, #16]
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	bf0c      	ite	eq
 800ac9c:	2301      	moveq	r3, #1
 800ac9e:	2300      	movne	r3, #0
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d002      	beq.n	800acac <_ZL9dir_allocP3DIRj+0x6e>
 800aca6:	e00c      	b.n	800acc2 <_ZL9dir_allocP3DIRj+0x84>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800aca8:	2300      	movs	r3, #0
 800acaa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800acac:	2101      	movs	r1, #1
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f7ff fef5 	bl	800aa9e <_ZL8dir_nextP3DIRi>
 800acb4:	4603      	mov	r3, r0
 800acb6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800acb8:	7dfb      	ldrb	r3, [r7, #23]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d101      	bne.n	800acc2 <_ZL9dir_allocP3DIRj+0x84>
		do {
 800acbe:	e7d1      	b.n	800ac64 <_ZL9dir_allocP3DIRj+0x26>
			if (res != FR_OK) break;
 800acc0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800acc2:	7dfb      	ldrb	r3, [r7, #23]
 800acc4:	2b04      	cmp	r3, #4
 800acc6:	d101      	bne.n	800accc <_ZL9dir_allocP3DIRj+0x8e>
 800acc8:	2307      	movs	r3, #7
 800acca:	75fb      	strb	r3, [r7, #23]
	return res;
 800accc:	7dfb      	ldrb	r3, [r7, #23]
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3718      	adds	r7, #24
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}

0800acd6 <_ZL8ld_clustP5FATFSPKh>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800acd6:	b580      	push	{r7, lr}
 800acd8:	b084      	sub	sp, #16
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
 800acde:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	331a      	adds	r3, #26
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7fe fffd 	bl	8009ce4 <_ZL7ld_wordPKh>
 800acea:	4603      	mov	r3, r0
 800acec:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	2b03      	cmp	r3, #3
 800acf4:	d109      	bne.n	800ad0a <_ZL8ld_clustP5FATFSPKh+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	3314      	adds	r3, #20
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7fe fff2 	bl	8009ce4 <_ZL7ld_wordPKh>
 800ad00:	4603      	mov	r3, r0
 800ad02:	041b      	lsls	r3, r3, #16
 800ad04:	68fa      	ldr	r2, [r7, #12]
 800ad06:	4313      	orrs	r3, r2
 800ad08:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3710      	adds	r7, #16
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <_ZL8st_clustP5FATFSPhm>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	331a      	adds	r3, #26
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	b292      	uxth	r2, r2
 800ad28:	4611      	mov	r1, r2
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7ff f815 	bl	8009d5a <_ZL7st_wordPht>
	if (fs->fs_type == FS_FAT32) {
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	2b03      	cmp	r3, #3
 800ad36:	d109      	bne.n	800ad4c <_ZL8st_clustP5FATFSPhm+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	f103 0214 	add.w	r2, r3, #20
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	0c1b      	lsrs	r3, r3, #16
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	4619      	mov	r1, r3
 800ad46:	4610      	mov	r0, r2
 800ad48:	f7ff f807 	bl	8009d5a <_ZL7st_wordPht>
	}
}
 800ad4c:	bf00      	nop
 800ad4e:	3710      	adds	r7, #16
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <_ZL8dir_findP3DIR>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b086      	sub	sp, #24
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ad62:	2100      	movs	r1, #0
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f7ff fe1f 	bl	800a9a8 <_ZL7dir_sdiP3DIRm>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ad6e:	7dfb      	ldrb	r3, [r7, #23]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d001      	beq.n	800ad78 <_ZL8dir_findP3DIR+0x24>
 800ad74:	7dfb      	ldrb	r3, [r7, #23]
 800ad76:	e043      	b.n	800ae00 <_ZL8dir_findP3DIR+0xac>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	69db      	ldr	r3, [r3, #28]
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	6938      	ldr	r0, [r7, #16]
 800ad80:	f7ff fa7b 	bl	800a27a <_ZL11move_windowP5FATFSm>
 800ad84:	4603      	mov	r3, r0
 800ad86:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ad88:	7dfb      	ldrb	r3, [r7, #23]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d134      	bne.n	800adf8 <_ZL8dir_findP3DIR+0xa4>
		c = dp->dir[DIR_Name];
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6a1b      	ldr	r3, [r3, #32]
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ad96:	7bfb      	ldrb	r3, [r7, #15]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d102      	bne.n	800ada2 <_ZL8dir_findP3DIR+0x4e>
 800ad9c:	2304      	movs	r3, #4
 800ad9e:	75fb      	strb	r3, [r7, #23]
 800ada0:	e02d      	b.n	800adfe <_ZL8dir_findP3DIR+0xaa>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6a1b      	ldr	r3, [r3, #32]
 800ada6:	330b      	adds	r3, #11
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800adae:	b2da      	uxtb	r2, r3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a1b      	ldr	r3, [r3, #32]
 800adb8:	330b      	adds	r3, #11
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	f003 0308 	and.w	r3, r3, #8
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d10c      	bne.n	800adde <_ZL8dir_findP3DIR+0x8a>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6a18      	ldr	r0, [r3, #32]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	3324      	adds	r3, #36	; 0x24
 800adcc:	220b      	movs	r2, #11
 800adce:	4619      	mov	r1, r3
 800add0:	f7ff f851 	bl	8009e76 <_ZL7mem_cmpPKvS0_j>
 800add4:	4603      	mov	r3, r0
 800add6:	2b00      	cmp	r3, #0
 800add8:	d101      	bne.n	800adde <_ZL8dir_findP3DIR+0x8a>
 800adda:	2301      	movs	r3, #1
 800addc:	e000      	b.n	800ade0 <_ZL8dir_findP3DIR+0x8c>
 800adde:	2300      	movs	r3, #0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10b      	bne.n	800adfc <_ZL8dir_findP3DIR+0xa8>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ade4:	2100      	movs	r1, #0
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f7ff fe59 	bl	800aa9e <_ZL8dir_nextP3DIRi>
 800adec:	4603      	mov	r3, r0
 800adee:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800adf0:	7dfb      	ldrb	r3, [r7, #23]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d103      	bne.n	800adfe <_ZL8dir_findP3DIR+0xaa>
	do {
 800adf6:	e7bf      	b.n	800ad78 <_ZL8dir_findP3DIR+0x24>
		if (res != FR_OK) break;
 800adf8:	bf00      	nop
 800adfa:	e000      	b.n	800adfe <_ZL8dir_findP3DIR+0xaa>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800adfc:	bf00      	nop

	return res;
 800adfe:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3718      	adds	r7, #24
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <_ZL12dir_registerP3DIR>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ae16:	2101      	movs	r1, #1
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f7ff ff10 	bl	800ac3e <_ZL9dir_allocP3DIRj>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ae22:	7bfb      	ldrb	r3, [r7, #15]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d11c      	bne.n	800ae62 <_ZL12dir_registerP3DIR+0x5a>
		res = move_window(fs, dp->sect);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	69db      	ldr	r3, [r3, #28]
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	68b8      	ldr	r0, [r7, #8]
 800ae30:	f7ff fa23 	bl	800a27a <_ZL11move_windowP5FATFSm>
 800ae34:	4603      	mov	r3, r0
 800ae36:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ae38:	7bfb      	ldrb	r3, [r7, #15]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d111      	bne.n	800ae62 <_ZL12dir_registerP3DIR+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6a1b      	ldr	r3, [r3, #32]
 800ae42:	2220      	movs	r2, #32
 800ae44:	2100      	movs	r1, #0
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7fe fff5 	bl	8009e36 <_ZL7mem_setPvij>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6a18      	ldr	r0, [r3, #32]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	3324      	adds	r3, #36	; 0x24
 800ae54:	220b      	movs	r2, #11
 800ae56:	4619      	mov	r1, r3
 800ae58:	f7fe ffc6 	bl	8009de8 <_ZL7mem_cpyPvPKvj>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	2201      	movs	r2, #1
 800ae60:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ae62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3710      	adds	r7, #16
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <_ZL11create_nameP3DIRPPKc>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b088      	sub	sp, #32
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	613b      	str	r3, [r7, #16]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	3324      	adds	r3, #36	; 0x24
 800ae80:	60fb      	str	r3, [r7, #12]
	mem_set(sfn, ' ', 11);
 800ae82:	220b      	movs	r2, #11
 800ae84:	2120      	movs	r1, #32
 800ae86:	68f8      	ldr	r0, [r7, #12]
 800ae88:	f7fe ffd5 	bl	8009e36 <_ZL7mem_setPvij>
	si = i = 0; ni = 8;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	617b      	str	r3, [r7, #20]
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	61bb      	str	r3, [r7, #24]
 800ae94:	2308      	movs	r3, #8
 800ae96:	61fb      	str	r3, [r7, #28]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ae98:	69bb      	ldr	r3, [r7, #24]
 800ae9a:	1c5a      	adds	r2, r3, #1
 800ae9c:	61ba      	str	r2, [r7, #24]
 800ae9e:	693a      	ldr	r2, [r7, #16]
 800aea0:	4413      	add	r3, r2
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	72fb      	strb	r3, [r7, #11]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800aea6:	7afb      	ldrb	r3, [r7, #11]
 800aea8:	2b20      	cmp	r3, #32
 800aeaa:	d953      	bls.n	800af54 <_ZL11create_nameP3DIRPPKc+0xe8>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800aeac:	7afb      	ldrb	r3, [r7, #11]
 800aeae:	2b2f      	cmp	r3, #47	; 0x2f
 800aeb0:	d002      	beq.n	800aeb8 <_ZL11create_nameP3DIRPPKc+0x4c>
 800aeb2:	7afb      	ldrb	r3, [r7, #11]
 800aeb4:	2b5c      	cmp	r3, #92	; 0x5c
 800aeb6:	d10f      	bne.n	800aed8 <_ZL11create_nameP3DIRPPKc+0x6c>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800aeb8:	693a      	ldr	r2, [r7, #16]
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	4413      	add	r3, r2
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	2b2f      	cmp	r3, #47	; 0x2f
 800aec2:	d005      	beq.n	800aed0 <_ZL11create_nameP3DIRPPKc+0x64>
 800aec4:	693a      	ldr	r2, [r7, #16]
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	4413      	add	r3, r2
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	2b5c      	cmp	r3, #92	; 0x5c
 800aece:	d143      	bne.n	800af58 <_ZL11create_nameP3DIRPPKc+0xec>
 800aed0:	69bb      	ldr	r3, [r7, #24]
 800aed2:	3301      	adds	r3, #1
 800aed4:	61bb      	str	r3, [r7, #24]
 800aed6:	e7ef      	b.n	800aeb8 <_ZL11create_nameP3DIRPPKc+0x4c>
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800aed8:	7afb      	ldrb	r3, [r7, #11]
 800aeda:	2b2e      	cmp	r3, #46	; 0x2e
 800aedc:	d003      	beq.n	800aee6 <_ZL11create_nameP3DIRPPKc+0x7a>
 800aede:	697a      	ldr	r2, [r7, #20]
 800aee0:	69fb      	ldr	r3, [r7, #28]
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d30c      	bcc.n	800af00 <_ZL11create_nameP3DIRPPKc+0x94>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800aee6:	69fb      	ldr	r3, [r7, #28]
 800aee8:	2b0b      	cmp	r3, #11
 800aeea:	d002      	beq.n	800aef2 <_ZL11create_nameP3DIRPPKc+0x86>
 800aeec:	7afb      	ldrb	r3, [r7, #11]
 800aeee:	2b2e      	cmp	r3, #46	; 0x2e
 800aef0:	d001      	beq.n	800aef6 <_ZL11create_nameP3DIRPPKc+0x8a>
 800aef2:	2306      	movs	r3, #6
 800aef4:	e04c      	b.n	800af90 <_ZL11create_nameP3DIRPPKc+0x124>
			i = 8; ni = 11;				/* Goto extension */
 800aef6:	2308      	movs	r3, #8
 800aef8:	617b      	str	r3, [r7, #20]
 800aefa:	230b      	movs	r3, #11
 800aefc:	61fb      	str	r3, [r7, #28]
			continue;
 800aefe:	e028      	b.n	800af52 <_ZL11create_nameP3DIRPPKc+0xe6>
		}
		if (c >= 0x80) {				/* Extended character? */
 800af00:	7afb      	ldrb	r3, [r7, #11]
 800af02:	b25b      	sxtb	r3, r3
 800af04:	2b00      	cmp	r3, #0
 800af06:	da04      	bge.n	800af12 <_ZL11create_nameP3DIRPPKc+0xa6>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800af08:	7afb      	ldrb	r3, [r7, #11]
 800af0a:	3b80      	subs	r3, #128	; 0x80
 800af0c:	4a22      	ldr	r2, [pc, #136]	; (800af98 <_ZL11create_nameP3DIRPPKc+0x12c>)
 800af0e:	5cd3      	ldrb	r3, [r2, r3]
 800af10:	72fb      	strb	r3, [r7, #11]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800af12:	7afb      	ldrb	r3, [r7, #11]
 800af14:	4619      	mov	r1, r3
 800af16:	4821      	ldr	r0, [pc, #132]	; (800af9c <_ZL11create_nameP3DIRPPKc+0x130>)
 800af18:	f7fe ffda 	bl	8009ed0 <_ZL7chk_chrPKci>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	bf14      	ite	ne
 800af22:	2301      	movne	r3, #1
 800af24:	2300      	moveq	r3, #0
 800af26:	b2db      	uxtb	r3, r3
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d001      	beq.n	800af30 <_ZL11create_nameP3DIRPPKc+0xc4>
 800af2c:	2306      	movs	r3, #6
 800af2e:	e02f      	b.n	800af90 <_ZL11create_nameP3DIRPPKc+0x124>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800af30:	7afb      	ldrb	r3, [r7, #11]
 800af32:	2b60      	cmp	r3, #96	; 0x60
 800af34:	d906      	bls.n	800af44 <_ZL11create_nameP3DIRPPKc+0xd8>
 800af36:	7afb      	ldrb	r3, [r7, #11]
 800af38:	2b7a      	cmp	r3, #122	; 0x7a
 800af3a:	d803      	bhi.n	800af44 <_ZL11create_nameP3DIRPPKc+0xd8>
 800af3c:	7afb      	ldrb	r3, [r7, #11]
 800af3e:	3b20      	subs	r3, #32
 800af40:	b2db      	uxtb	r3, r3
 800af42:	72fb      	strb	r3, [r7, #11]
			sfn[i++] = c;
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	1c5a      	adds	r2, r3, #1
 800af48:	617a      	str	r2, [r7, #20]
 800af4a:	68fa      	ldr	r2, [r7, #12]
 800af4c:	4413      	add	r3, r2
 800af4e:	7afa      	ldrb	r2, [r7, #11]
 800af50:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800af52:	e7a1      	b.n	800ae98 <_ZL11create_nameP3DIRPPKc+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800af54:	bf00      	nop
 800af56:	e000      	b.n	800af5a <_ZL11create_nameP3DIRPPKc+0xee>
			break;
 800af58:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800af5a:	693a      	ldr	r2, [r7, #16]
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	441a      	add	r2, r3
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d101      	bne.n	800af6e <_ZL11create_nameP3DIRPPKc+0x102>
 800af6a:	2306      	movs	r3, #6
 800af6c:	e010      	b.n	800af90 <_ZL11create_nameP3DIRPPKc+0x124>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	2be5      	cmp	r3, #229	; 0xe5
 800af74:	d102      	bne.n	800af7c <_ZL11create_nameP3DIRPPKc+0x110>
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2205      	movs	r2, #5
 800af7a:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800af7c:	7afb      	ldrb	r3, [r7, #11]
 800af7e:	2b20      	cmp	r3, #32
 800af80:	d801      	bhi.n	800af86 <_ZL11create_nameP3DIRPPKc+0x11a>
 800af82:	2204      	movs	r2, #4
 800af84:	e000      	b.n	800af88 <_ZL11create_nameP3DIRPPKc+0x11c>
 800af86:	2200      	movs	r2, #0
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	330b      	adds	r3, #11
 800af8c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800af8e:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800af90:	4618      	mov	r0, r3
 800af92:	3720      	adds	r7, #32
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}
 800af98:	0800cf8c 	.word	0x0800cf8c
 800af9c:	0800cf18 	.word	0x0800cf18

0800afa0 <_ZL11follow_pathP3DIRPKc>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b086      	sub	sp, #24
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	2b2f      	cmp	r3, #47	; 0x2f
 800afba:	d003      	beq.n	800afc4 <_ZL11follow_pathP3DIRPKc+0x24>
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	2b5c      	cmp	r3, #92	; 0x5c
 800afc2:	d103      	bne.n	800afcc <_ZL11follow_pathP3DIRPKc+0x2c>
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	3301      	adds	r3, #1
 800afc8:	603b      	str	r3, [r7, #0]
 800afca:	e7f3      	b.n	800afb4 <_ZL11follow_pathP3DIRPKc+0x14>
		obj->sclust = 0;					/* Start from root directory */
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	2200      	movs	r2, #0
 800afd0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	2b1f      	cmp	r3, #31
 800afd8:	d80a      	bhi.n	800aff0 <_ZL11follow_pathP3DIRPKc+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2280      	movs	r2, #128	; 0x80
 800afde:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800afe2:	2100      	movs	r1, #0
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f7ff fcdf 	bl	800a9a8 <_ZL7dir_sdiP3DIRm>
 800afea:	4603      	mov	r3, r0
 800afec:	75fb      	strb	r3, [r7, #23]
 800afee:	e043      	b.n	800b078 <_ZL11follow_pathP3DIRPKc+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aff0:	463b      	mov	r3, r7
 800aff2:	4619      	mov	r1, r3
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f7ff ff39 	bl	800ae6c <_ZL11create_nameP3DIRPPKc>
 800affa:	4603      	mov	r3, r0
 800affc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800affe:	7dfb      	ldrb	r3, [r7, #23]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d134      	bne.n	800b06e <_ZL11follow_pathP3DIRPKc+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f7ff fea5 	bl	800ad54 <_ZL8dir_findP3DIR>
 800b00a:	4603      	mov	r3, r0
 800b00c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b014:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b016:	7dfb      	ldrb	r3, [r7, #23]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00a      	beq.n	800b032 <_ZL11follow_pathP3DIRPKc+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b01c:	7dfb      	ldrb	r3, [r7, #23]
 800b01e:	2b04      	cmp	r3, #4
 800b020:	d127      	bne.n	800b072 <_ZL11follow_pathP3DIRPKc+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b022:	7afb      	ldrb	r3, [r7, #11]
 800b024:	f003 0304 	and.w	r3, r3, #4
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d122      	bne.n	800b072 <_ZL11follow_pathP3DIRPKc+0xd2>
 800b02c:	2305      	movs	r3, #5
 800b02e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b030:	e01f      	b.n	800b072 <_ZL11follow_pathP3DIRPKc+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b032:	7afb      	ldrb	r3, [r7, #11]
 800b034:	f003 0304 	and.w	r3, r3, #4
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d11c      	bne.n	800b076 <_ZL11follow_pathP3DIRPKc+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	799b      	ldrb	r3, [r3, #6]
 800b040:	f003 0310 	and.w	r3, r3, #16
 800b044:	2b00      	cmp	r3, #0
 800b046:	d102      	bne.n	800b04e <_ZL11follow_pathP3DIRPKc+0xae>
				res = FR_NO_PATH; break;
 800b048:	2305      	movs	r3, #5
 800b04a:	75fb      	strb	r3, [r7, #23]
 800b04c:	e014      	b.n	800b078 <_ZL11follow_pathP3DIRPKc+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	695b      	ldr	r3, [r3, #20]
 800b058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b05c:	4413      	add	r3, r2
 800b05e:	4619      	mov	r1, r3
 800b060:	68f8      	ldr	r0, [r7, #12]
 800b062:	f7ff fe38 	bl	800acd6 <_ZL8ld_clustP5FATFSPKh>
 800b066:	4602      	mov	r2, r0
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b06c:	e7c0      	b.n	800aff0 <_ZL11follow_pathP3DIRPKc+0x50>
			if (res != FR_OK) break;
 800b06e:	bf00      	nop
 800b070:	e002      	b.n	800b078 <_ZL11follow_pathP3DIRPKc+0xd8>
				break;
 800b072:	bf00      	nop
 800b074:	e000      	b.n	800b078 <_ZL11follow_pathP3DIRPKc+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b076:	bf00      	nop
			}
		}
	}

	return res;
 800b078:	7dfb      	ldrb	r3, [r7, #23]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3718      	adds	r7, #24
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}

0800b082 <_ZL12get_ldnumberPPKc>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b082:	b480      	push	{r7}
 800b084:	b087      	sub	sp, #28
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b08a:	f04f 33ff 	mov.w	r3, #4294967295
 800b08e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d031      	beq.n	800b0fc <_ZL12get_ldnumberPPKc+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	617b      	str	r3, [r7, #20]
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	2b20      	cmp	r3, #32
 800b0a4:	d907      	bls.n	800b0b6 <_ZL12get_ldnumberPPKc+0x34>
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	2b3a      	cmp	r3, #58	; 0x3a
 800b0ac:	d003      	beq.n	800b0b6 <_ZL12get_ldnumberPPKc+0x34>
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	617b      	str	r3, [r7, #20]
 800b0b4:	e7f3      	b.n	800b09e <_ZL12get_ldnumberPPKc+0x1c>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	2b3a      	cmp	r3, #58	; 0x3a
 800b0bc:	d11c      	bne.n	800b0f8 <_ZL12get_ldnumberPPKc+0x76>
			tp = *path;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	1c5a      	adds	r2, r3, #1
 800b0c8:	60fa      	str	r2, [r7, #12]
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	3b30      	subs	r3, #48	; 0x30
 800b0ce:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	2b09      	cmp	r3, #9
 800b0d4:	d80e      	bhi.n	800b0f4 <_ZL12get_ldnumberPPKc+0x72>
 800b0d6:	68fa      	ldr	r2, [r7, #12]
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d10a      	bne.n	800b0f4 <_ZL12get_ldnumberPPKc+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d107      	bne.n	800b0f4 <_ZL12get_ldnumberPPKc+0x72>
					vol = (int)i;
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	617b      	str	r3, [r7, #20]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	697a      	ldr	r2, [r7, #20]
 800b0f2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	e002      	b.n	800b0fe <_ZL12get_ldnumberPPKc+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b0fc:	693b      	ldr	r3, [r7, #16]
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	371c      	adds	r7, #28
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr
	...

0800b10c <_ZL8check_fsP5FATFSm>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2200      	movs	r2, #0
 800b11a:	70da      	strb	r2, [r3, #3]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f04f 32ff 	mov.w	r2, #4294967295
 800b122:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b124:	6839      	ldr	r1, [r7, #0]
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f7ff f8a7 	bl	800a27a <_ZL11move_windowP5FATFSm>
 800b12c:	4603      	mov	r3, r0
 800b12e:	2b00      	cmp	r3, #0
 800b130:	bf14      	ite	ne
 800b132:	2301      	movne	r3, #1
 800b134:	2300      	moveq	r3, #0
 800b136:	b2db      	uxtb	r3, r3
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d001      	beq.n	800b140 <_ZL8check_fsP5FATFSm+0x34>
 800b13c:	2304      	movs	r3, #4
 800b13e:	e047      	b.n	800b1d0 <_ZL8check_fsP5FATFSm+0xc4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	3330      	adds	r3, #48	; 0x30
 800b144:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b148:	4618      	mov	r0, r3
 800b14a:	f7fe fdcb 	bl	8009ce4 <_ZL7ld_wordPKh>
 800b14e:	4603      	mov	r3, r0
 800b150:	461a      	mov	r2, r3
 800b152:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b156:	429a      	cmp	r2, r3
 800b158:	bf14      	ite	ne
 800b15a:	2301      	movne	r3, #1
 800b15c:	2300      	moveq	r3, #0
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	2b00      	cmp	r3, #0
 800b162:	d001      	beq.n	800b168 <_ZL8check_fsP5FATFSm+0x5c>
 800b164:	2303      	movs	r3, #3
 800b166:	e033      	b.n	800b1d0 <_ZL8check_fsP5FATFSm+0xc4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b16e:	2be9      	cmp	r3, #233	; 0xe9
 800b170:	d009      	beq.n	800b186 <_ZL8check_fsP5FATFSm+0x7a>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b178:	2beb      	cmp	r3, #235	; 0xeb
 800b17a:	d128      	bne.n	800b1ce <_ZL8check_fsP5FATFSm+0xc2>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b182:	2b90      	cmp	r3, #144	; 0x90
 800b184:	d123      	bne.n	800b1ce <_ZL8check_fsP5FATFSm+0xc2>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	3330      	adds	r3, #48	; 0x30
 800b18a:	3336      	adds	r3, #54	; 0x36
 800b18c:	4618      	mov	r0, r3
 800b18e:	f7fe fdc1 	bl	8009d14 <_ZL8ld_dwordPKh>
 800b192:	4603      	mov	r3, r0
 800b194:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b198:	4a0f      	ldr	r2, [pc, #60]	; (800b1d8 <_ZL8check_fsP5FATFSm+0xcc>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	bf0c      	ite	eq
 800b19e:	2301      	moveq	r3, #1
 800b1a0:	2300      	movne	r3, #0
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d001      	beq.n	800b1ac <_ZL8check_fsP5FATFSm+0xa0>
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	e011      	b.n	800b1d0 <_ZL8check_fsP5FATFSm+0xc4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	3330      	adds	r3, #48	; 0x30
 800b1b0:	3352      	adds	r3, #82	; 0x52
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7fe fdae 	bl	8009d14 <_ZL8ld_dwordPKh>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	4b08      	ldr	r3, [pc, #32]	; (800b1dc <_ZL8check_fsP5FATFSm+0xd0>)
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	bf0c      	ite	eq
 800b1c0:	2301      	moveq	r3, #1
 800b1c2:	2300      	movne	r3, #0
 800b1c4:	b2db      	uxtb	r3, r3
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d001      	beq.n	800b1ce <_ZL8check_fsP5FATFSm+0xc2>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	e000      	b.n	800b1d0 <_ZL8check_fsP5FATFSm+0xc4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b1ce:	2302      	movs	r3, #2
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3708      	adds	r7, #8
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	00544146 	.word	0x00544146
 800b1dc:	33544146 	.word	0x33544146

0800b1e0 <_ZL11find_volumePPKcPP5FATFSh>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b096      	sub	sp, #88	; 0x58
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	60b9      	str	r1, [r7, #8]
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b1f4:	68f8      	ldr	r0, [r7, #12]
 800b1f6:	f7ff ff44 	bl	800b082 <_ZL12get_ldnumberPPKc>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	627b      	str	r3, [r7, #36]	; 0x24
	if (vol < 0) return FR_INVALID_DRIVE;
 800b1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b200:	2b00      	cmp	r3, #0
 800b202:	da01      	bge.n	800b208 <_ZL11find_volumePPKcPP5FATFSh+0x28>
 800b204:	230b      	movs	r3, #11
 800b206:	e246      	b.n	800b696 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20a:	4aac      	ldr	r2, [pc, #688]	; (800b4bc <_ZL11find_volumePPKcPP5FATFSh+0x2dc>)
 800b20c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b210:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b214:	2b00      	cmp	r3, #0
 800b216:	d101      	bne.n	800b21c <_ZL11find_volumePPKcPP5FATFSh+0x3c>
 800b218:	230c      	movs	r3, #12
 800b21a:	e23c      	b.n	800b696 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b220:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b222:	79fb      	ldrb	r3, [r7, #7]
 800b224:	f023 0301 	bic.w	r3, r3, #1
 800b228:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b22a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d01a      	beq.n	800b268 <_ZL11find_volumePPKcPP5FATFSh+0x88>
		stat = disk_status(fs->drv);
 800b232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b234:	785b      	ldrb	r3, [r3, #1]
 800b236:	4618      	mov	r0, r3
 800b238:	f7fe fcb6 	bl	8009ba8 <disk_status>
 800b23c:	4603      	mov	r3, r0
 800b23e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b242:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b246:	f003 0301 	and.w	r3, r3, #1
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d10c      	bne.n	800b268 <_ZL11find_volumePPKcPP5FATFSh+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b24e:	79fb      	ldrb	r3, [r7, #7]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d007      	beq.n	800b264 <_ZL11find_volumePPKcPP5FATFSh+0x84>
 800b254:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b258:	f003 0304 	and.w	r3, r3, #4
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d001      	beq.n	800b264 <_ZL11find_volumePPKcPP5FATFSh+0x84>
				return FR_WRITE_PROTECTED;
 800b260:	230a      	movs	r3, #10
 800b262:	e218      	b.n	800b696 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
			}
			return FR_OK;				/* The file system object is valid */
 800b264:	2300      	movs	r3, #0
 800b266:	e216      	b.n	800b696 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b26a:	2200      	movs	r2, #0
 800b26c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b270:	b2da      	uxtb	r2, r3
 800b272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b274:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b278:	785b      	ldrb	r3, [r3, #1]
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7fe fcae 	bl	8009bdc <disk_initialize>
 800b280:	4603      	mov	r3, r0
 800b282:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b286:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b28a:	f003 0301 	and.w	r3, r3, #1
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d001      	beq.n	800b296 <_ZL11find_volumePPKcPP5FATFSh+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b292:	2303      	movs	r3, #3
 800b294:	e1ff      	b.n	800b696 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b296:	79fb      	ldrb	r3, [r7, #7]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d007      	beq.n	800b2ac <_ZL11find_volumePPKcPP5FATFSh+0xcc>
 800b29c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b2a0:	f003 0304 	and.w	r3, r3, #4
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d001      	beq.n	800b2ac <_ZL11find_volumePPKcPP5FATFSh+0xcc>
		return FR_WRITE_PROTECTED;
 800b2a8:	230a      	movs	r3, #10
 800b2aa:	e1f4      	b.n	800b696 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b2b0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b2b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b2b4:	f7ff ff2a 	bl	800b10c <_ZL8check_fsP5FATFSm>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b2be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2c2:	2b02      	cmp	r3, #2
 800b2c4:	d151      	bne.n	800b36a <_ZL11find_volumePPKcPP5FATFSh+0x18a>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	643b      	str	r3, [r7, #64]	; 0x40
 800b2ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2cc:	2b03      	cmp	r3, #3
 800b2ce:	d820      	bhi.n	800b312 <_ZL11find_volumePPKcPP5FATFSh+0x132>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b2d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b2d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2d8:	011b      	lsls	r3, r3, #4
 800b2da:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b2de:	4413      	add	r3, r2
 800b2e0:	637b      	str	r3, [r7, #52]	; 0x34
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b2e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2e4:	3304      	adds	r3, #4
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d006      	beq.n	800b2fa <_ZL11find_volumePPKcPP5FATFSh+0x11a>
 800b2ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ee:	3308      	adds	r3, #8
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f7fe fd0f 	bl	8009d14 <_ZL8ld_dwordPKh>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	e000      	b.n	800b2fc <_ZL11find_volumePPKcPP5FATFSh+0x11c>
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b304:	440b      	add	r3, r1
 800b306:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b30a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b30c:	3301      	adds	r3, #1
 800b30e:	643b      	str	r3, [r7, #64]	; 0x40
 800b310:	e7db      	b.n	800b2ca <_ZL11find_volumePPKcPP5FATFSh+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b312:	2300      	movs	r3, #0
 800b314:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d002      	beq.n	800b322 <_ZL11find_volumePPKcPP5FATFSh+0x142>
 800b31c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b31e:	3b01      	subs	r3, #1
 800b320:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b32a:	4413      	add	r3, r2
 800b32c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b330:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b334:	2b00      	cmp	r3, #0
 800b336:	d005      	beq.n	800b344 <_ZL11find_volumePPKcPP5FATFSh+0x164>
 800b338:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b33a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b33c:	f7ff fee6 	bl	800b10c <_ZL8check_fsP5FATFSm>
 800b340:	4603      	mov	r3, r0
 800b342:	e000      	b.n	800b346 <_ZL11find_volumePPKcPP5FATFSh+0x166>
 800b344:	2303      	movs	r3, #3
 800b346:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b34a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b34e:	2b01      	cmp	r3, #1
 800b350:	d907      	bls.n	800b362 <_ZL11find_volumePPKcPP5FATFSh+0x182>
 800b352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b354:	3301      	adds	r3, #1
 800b356:	643b      	str	r3, [r7, #64]	; 0x40
 800b358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b35a:	2b03      	cmp	r3, #3
 800b35c:	d801      	bhi.n	800b362 <_ZL11find_volumePPKcPP5FATFSh+0x182>
 800b35e:	2301      	movs	r3, #1
 800b360:	e000      	b.n	800b364 <_ZL11find_volumePPKcPP5FATFSh+0x184>
 800b362:	2300      	movs	r3, #0
 800b364:	2b00      	cmp	r3, #0
 800b366:	d000      	beq.n	800b36a <_ZL11find_volumePPKcPP5FATFSh+0x18a>
		do {							/* Find an FAT volume */
 800b368:	e7db      	b.n	800b322 <_ZL11find_volumePPKcPP5FATFSh+0x142>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b36a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b36e:	2b04      	cmp	r3, #4
 800b370:	d101      	bne.n	800b376 <_ZL11find_volumePPKcPP5FATFSh+0x196>
 800b372:	2301      	movs	r3, #1
 800b374:	e18f      	b.n	800b696 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b376:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d901      	bls.n	800b382 <_ZL11find_volumePPKcPP5FATFSh+0x1a2>
 800b37e:	230d      	movs	r3, #13
 800b380:	e189      	b.n	800b696 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b384:	3330      	adds	r3, #48	; 0x30
 800b386:	330b      	adds	r3, #11
 800b388:	4618      	mov	r0, r3
 800b38a:	f7fe fcab 	bl	8009ce4 <_ZL7ld_wordPKh>
 800b38e:	4603      	mov	r3, r0
 800b390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b394:	bf14      	ite	ne
 800b396:	2301      	movne	r3, #1
 800b398:	2300      	moveq	r3, #0
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d001      	beq.n	800b3a4 <_ZL11find_volumePPKcPP5FATFSh+0x1c4>
 800b3a0:	230d      	movs	r3, #13
 800b3a2:	e178      	b.n	800b696 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b3a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3a6:	3330      	adds	r3, #48	; 0x30
 800b3a8:	3316      	adds	r3, #22
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7fe fc9a 	bl	8009ce4 <_ZL7ld_wordPKh>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b3b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d106      	bne.n	800b3c8 <_ZL11find_volumePPKcPP5FATFSh+0x1e8>
 800b3ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3bc:	3330      	adds	r3, #48	; 0x30
 800b3be:	3324      	adds	r3, #36	; 0x24
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7fe fca7 	bl	8009d14 <_ZL8ld_dwordPKh>
 800b3c6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b3c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b3cc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b3ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3d0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b3d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3d6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b3d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3da:	789b      	ldrb	r3, [r3, #2]
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d005      	beq.n	800b3ec <_ZL11find_volumePPKcPP5FATFSh+0x20c>
 800b3e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3e2:	789b      	ldrb	r3, [r3, #2]
 800b3e4:	2b02      	cmp	r3, #2
 800b3e6:	d001      	beq.n	800b3ec <_ZL11find_volumePPKcPP5FATFSh+0x20c>
 800b3e8:	230d      	movs	r3, #13
 800b3ea:	e154      	b.n	800b696 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b3ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3ee:	789b      	ldrb	r3, [r3, #2]
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3f4:	fb02 f303 	mul.w	r3, r2, r3
 800b3f8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b3fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b400:	b29a      	uxth	r2, r3
 800b402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b404:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b408:	895b      	ldrh	r3, [r3, #10]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d008      	beq.n	800b420 <_ZL11find_volumePPKcPP5FATFSh+0x240>
 800b40e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b410:	895b      	ldrh	r3, [r3, #10]
 800b412:	461a      	mov	r2, r3
 800b414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b416:	895b      	ldrh	r3, [r3, #10]
 800b418:	3b01      	subs	r3, #1
 800b41a:	4013      	ands	r3, r2
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d001      	beq.n	800b424 <_ZL11find_volumePPKcPP5FATFSh+0x244>
 800b420:	230d      	movs	r3, #13
 800b422:	e138      	b.n	800b696 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b426:	3330      	adds	r3, #48	; 0x30
 800b428:	3311      	adds	r3, #17
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7fe fc5a 	bl	8009ce4 <_ZL7ld_wordPKh>
 800b430:	4603      	mov	r3, r0
 800b432:	461a      	mov	r2, r3
 800b434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b436:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b43a:	891b      	ldrh	r3, [r3, #8]
 800b43c:	f003 030f 	and.w	r3, r3, #15
 800b440:	2b00      	cmp	r3, #0
 800b442:	d001      	beq.n	800b448 <_ZL11find_volumePPKcPP5FATFSh+0x268>
 800b444:	230d      	movs	r3, #13
 800b446:	e126      	b.n	800b696 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b44a:	3330      	adds	r3, #48	; 0x30
 800b44c:	3313      	adds	r3, #19
 800b44e:	4618      	mov	r0, r3
 800b450:	f7fe fc48 	bl	8009ce4 <_ZL7ld_wordPKh>
 800b454:	4603      	mov	r3, r0
 800b456:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d106      	bne.n	800b46c <_ZL11find_volumePPKcPP5FATFSh+0x28c>
 800b45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b460:	3330      	adds	r3, #48	; 0x30
 800b462:	3320      	adds	r3, #32
 800b464:	4618      	mov	r0, r3
 800b466:	f7fe fc55 	bl	8009d14 <_ZL8ld_dwordPKh>
 800b46a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b46e:	3330      	adds	r3, #48	; 0x30
 800b470:	330e      	adds	r3, #14
 800b472:	4618      	mov	r0, r3
 800b474:	f7fe fc36 	bl	8009ce4 <_ZL7ld_wordPKh>
 800b478:	4603      	mov	r3, r0
 800b47a:	867b      	strh	r3, [r7, #50]	; 0x32
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b47c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d101      	bne.n	800b486 <_ZL11find_volumePPKcPP5FATFSh+0x2a6>
 800b482:	230d      	movs	r3, #13
 800b484:	e107      	b.n	800b696 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b486:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800b488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b48a:	441a      	add	r2, r3
 800b48c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b48e:	891b      	ldrh	r3, [r3, #8]
 800b490:	091b      	lsrs	r3, r3, #4
 800b492:	4413      	add	r3, r2
 800b494:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b496:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d201      	bcs.n	800b4a2 <_ZL11find_volumePPKcPP5FATFSh+0x2c2>
 800b49e:	230d      	movs	r3, #13
 800b4a0:	e0f9      	b.n	800b696 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b4a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a6:	1ad3      	subs	r3, r2, r3
 800b4a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b4aa:	8952      	ldrh	r2, [r2, #10]
 800b4ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4b0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d103      	bne.n	800b4c0 <_ZL11find_volumePPKcPP5FATFSh+0x2e0>
 800b4b8:	230d      	movs	r3, #13
 800b4ba:	e0ec      	b.n	800b696 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
 800b4bc:	24000a6c 	.word	0x24000a6c
		fmt = FS_FAT32;
 800b4c0:	2303      	movs	r3, #3
 800b4c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d802      	bhi.n	800b4d6 <_ZL11find_volumePPKcPP5FATFSh+0x2f6>
 800b4d0:	2302      	movs	r3, #2
 800b4d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d802      	bhi.n	800b4e6 <_ZL11find_volumePPKcPP5FATFSh+0x306>
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e8:	1c9a      	adds	r2, r3, #2
 800b4ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4ec:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b4ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b4f2:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b4f4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800b4f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4f8:	441a      	add	r2, r3
 800b4fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4fc:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b4fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b502:	441a      	add	r2, r3
 800b504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b506:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800b508:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b50c:	2b03      	cmp	r3, #3
 800b50e:	d123      	bne.n	800b558 <_ZL11find_volumePPKcPP5FATFSh+0x378>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b512:	3330      	adds	r3, #48	; 0x30
 800b514:	332a      	adds	r3, #42	; 0x2a
 800b516:	4618      	mov	r0, r3
 800b518:	f7fe fbe4 	bl	8009ce4 <_ZL7ld_wordPKh>
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b00      	cmp	r3, #0
 800b520:	bf14      	ite	ne
 800b522:	2301      	movne	r3, #1
 800b524:	2300      	moveq	r3, #0
 800b526:	b2db      	uxtb	r3, r3
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d001      	beq.n	800b530 <_ZL11find_volumePPKcPP5FATFSh+0x350>
 800b52c:	230d      	movs	r3, #13
 800b52e:	e0b2      	b.n	800b696 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b532:	891b      	ldrh	r3, [r3, #8]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d001      	beq.n	800b53c <_ZL11find_volumePPKcPP5FATFSh+0x35c>
 800b538:	230d      	movs	r3, #13
 800b53a:	e0ac      	b.n	800b696 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b53c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b53e:	3330      	adds	r3, #48	; 0x30
 800b540:	332c      	adds	r3, #44	; 0x2c
 800b542:	4618      	mov	r0, r3
 800b544:	f7fe fbe6 	bl	8009d14 <_ZL8ld_dwordPKh>
 800b548:	4602      	mov	r2, r0
 800b54a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b54c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b54e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b550:	695b      	ldr	r3, [r3, #20]
 800b552:	009b      	lsls	r3, r3, #2
 800b554:	647b      	str	r3, [r7, #68]	; 0x44
 800b556:	e01f      	b.n	800b598 <_ZL11find_volumePPKcPP5FATFSh+0x3b8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b55a:	891b      	ldrh	r3, [r3, #8]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d101      	bne.n	800b564 <_ZL11find_volumePPKcPP5FATFSh+0x384>
 800b560:	230d      	movs	r3, #13
 800b562:	e098      	b.n	800b696 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b566:	6a1a      	ldr	r2, [r3, #32]
 800b568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b56a:	441a      	add	r2, r3
 800b56c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b56e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b570:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b574:	2b02      	cmp	r3, #2
 800b576:	d103      	bne.n	800b580 <_ZL11find_volumePPKcPP5FATFSh+0x3a0>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b57a:	695b      	ldr	r3, [r3, #20]
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b57c:	005b      	lsls	r3, r3, #1
 800b57e:	e00a      	b.n	800b596 <_ZL11find_volumePPKcPP5FATFSh+0x3b6>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b582:	695a      	ldr	r2, [r3, #20]
 800b584:	4613      	mov	r3, r2
 800b586:	005b      	lsls	r3, r3, #1
 800b588:	4413      	add	r3, r2
 800b58a:	085a      	lsrs	r2, r3, #1
 800b58c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b58e:	695b      	ldr	r3, [r3, #20]
 800b590:	f003 0301 	and.w	r3, r3, #1
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b594:	4413      	add	r3, r2
 800b596:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b59a:	699a      	ldr	r2, [r3, #24]
 800b59c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b59e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b5a2:	0a5b      	lsrs	r3, r3, #9
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d201      	bcs.n	800b5ac <_ZL11find_volumePPKcPP5FATFSh+0x3cc>
 800b5a8:	230d      	movs	r3, #13
 800b5aa:	e074      	b.n	800b696 <_ZL11find_volumePPKcPP5FATFSh+0x4b6>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b5ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b5b2:	611a      	str	r2, [r3, #16]
 800b5b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5b6:	691a      	ldr	r2, [r3, #16]
 800b5b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5ba:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b5bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5be:	2280      	movs	r2, #128	; 0x80
 800b5c0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
			&& ld_word(fs->win + BPB_FSInfo32) == 1
			&& move_window(fs, bsect + 1) == FR_OK)
 800b5c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b5c6:	2b03      	cmp	r3, #3
 800b5c8:	d113      	bne.n	800b5f2 <_ZL11find_volumePPKcPP5FATFSh+0x412>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b5ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5cc:	3330      	adds	r3, #48	; 0x30
 800b5ce:	3330      	adds	r3, #48	; 0x30
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7fe fb87 	bl	8009ce4 <_ZL7ld_wordPKh>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	d10a      	bne.n	800b5f2 <_ZL11find_volumePPKcPP5FATFSh+0x412>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b5dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5de:	3301      	adds	r3, #1
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b5e4:	f7fe fe49 	bl	800a27a <_ZL11move_windowP5FATFSm>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d101      	bne.n	800b5f2 <_ZL11find_volumePPKcPP5FATFSh+0x412>
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	e000      	b.n	800b5f4 <_ZL11find_volumePPKcPP5FATFSh+0x414>
 800b5f2:	2300      	movs	r3, #0
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d03c      	beq.n	800b672 <_ZL11find_volumePPKcPP5FATFSh+0x492>
		{
			fs->fsi_flag = 0;
 800b5f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b5fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b600:	3330      	adds	r3, #48	; 0x30
 800b602:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b606:	4618      	mov	r0, r3
 800b608:	f7fe fb6c 	bl	8009ce4 <_ZL7ld_wordPKh>
 800b60c:	4603      	mov	r3, r0
 800b60e:	461a      	mov	r2, r3
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b610:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b614:	429a      	cmp	r2, r3
 800b616:	d115      	bne.n	800b644 <_ZL11find_volumePPKcPP5FATFSh+0x464>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b61a:	3330      	adds	r3, #48	; 0x30
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7fe fb79 	bl	8009d14 <_ZL8ld_dwordPKh>
 800b622:	4602      	mov	r2, r0
 800b624:	4b1e      	ldr	r3, [pc, #120]	; (800b6a0 <_ZL11find_volumePPKcPP5FATFSh+0x4c0>)
 800b626:	429a      	cmp	r2, r3
 800b628:	d10c      	bne.n	800b644 <_ZL11find_volumePPKcPP5FATFSh+0x464>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b62a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b62c:	3330      	adds	r3, #48	; 0x30
 800b62e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b632:	4618      	mov	r0, r3
 800b634:	f7fe fb6e 	bl	8009d14 <_ZL8ld_dwordPKh>
 800b638:	4602      	mov	r2, r0
 800b63a:	4b1a      	ldr	r3, [pc, #104]	; (800b6a4 <_ZL11find_volumePPKcPP5FATFSh+0x4c4>)
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d101      	bne.n	800b644 <_ZL11find_volumePPKcPP5FATFSh+0x464>
 800b640:	2301      	movs	r3, #1
 800b642:	e000      	b.n	800b646 <_ZL11find_volumePPKcPP5FATFSh+0x466>
 800b644:	2300      	movs	r3, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b646:	2b00      	cmp	r3, #0
 800b648:	d013      	beq.n	800b672 <_ZL11find_volumePPKcPP5FATFSh+0x492>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b64a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b64c:	3330      	adds	r3, #48	; 0x30
 800b64e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b652:	4618      	mov	r0, r3
 800b654:	f7fe fb5e 	bl	8009d14 <_ZL8ld_dwordPKh>
 800b658:	4602      	mov	r2, r0
 800b65a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b65c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b65e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b660:	3330      	adds	r3, #48	; 0x30
 800b662:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b666:	4618      	mov	r0, r3
 800b668:	f7fe fb54 	bl	8009d14 <_ZL8ld_dwordPKh>
 800b66c:	4602      	mov	r2, r0
 800b66e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b670:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b674:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b678:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b67a:	4b0b      	ldr	r3, [pc, #44]	; (800b6a8 <_ZL11find_volumePPKcPP5FATFSh+0x4c8>)
 800b67c:	881b      	ldrh	r3, [r3, #0]
 800b67e:	3301      	adds	r3, #1
 800b680:	b29a      	uxth	r2, r3
 800b682:	4b09      	ldr	r3, [pc, #36]	; (800b6a8 <_ZL11find_volumePPKcPP5FATFSh+0x4c8>)
 800b684:	801a      	strh	r2, [r3, #0]
 800b686:	4b08      	ldr	r3, [pc, #32]	; (800b6a8 <_ZL11find_volumePPKcPP5FATFSh+0x4c8>)
 800b688:	881a      	ldrh	r2, [r3, #0]
 800b68a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b68c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b68e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b690:	f7fe fd86 	bl	800a1a0 <_ZL10clear_lockP5FATFS>
#endif
	return FR_OK;
 800b694:	2300      	movs	r3, #0
}
 800b696:	4618      	mov	r0, r3
 800b698:	3758      	adds	r7, #88	; 0x58
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	41615252 	.word	0x41615252
 800b6a4:	61417272 	.word	0x61417272
 800b6a8:	24000a70 	.word	0x24000a70

0800b6ac <_ZL8validateP5_FDIDPP5FATFS>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b6b6:	2309      	movs	r3, #9
 800b6b8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d021      	beq.n	800b704 <_ZL8validateP5_FDIDPP5FATFS+0x58>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d01d      	beq.n	800b704 <_ZL8validateP5_FDIDPP5FATFS+0x58>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d018      	beq.n	800b704 <_ZL8validateP5_FDIDPP5FATFS+0x58>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	889a      	ldrh	r2, [r3, #4]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	88db      	ldrh	r3, [r3, #6]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d111      	bne.n	800b704 <_ZL8validateP5_FDIDPP5FATFS+0x58>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	785b      	ldrb	r3, [r3, #1]
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7fe fa5e 	bl	8009ba8 <disk_status>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	f003 0301 	and.w	r3, r3, #1
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	bf0c      	ite	eq
 800b6f6:	2301      	moveq	r3, #1
 800b6f8:	2300      	movne	r3, #0
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d001      	beq.n	800b704 <_ZL8validateP5_FDIDPP5FATFS+0x58>
			res = FR_OK;
 800b700:	2300      	movs	r3, #0
 800b702:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b704:	7bfb      	ldrb	r3, [r7, #15]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d102      	bne.n	800b710 <_ZL8validateP5_FDIDPP5FATFS+0x64>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	e000      	b.n	800b712 <_ZL8validateP5_FDIDPP5FATFS+0x66>
 800b710:	2300      	movs	r3, #0
 800b712:	683a      	ldr	r2, [r7, #0]
 800b714:	6013      	str	r3, [r2, #0]
	return res;
 800b716:	7bfb      	ldrb	r3, [r7, #15]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3710      	adds	r7, #16
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b088      	sub	sp, #32
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	4613      	mov	r3, r2
 800b72c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b732:	f107 0310 	add.w	r3, r7, #16
 800b736:	4618      	mov	r0, r3
 800b738:	f7ff fca3 	bl	800b082 <_ZL12get_ldnumberPPKc>
 800b73c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b73e:	69fb      	ldr	r3, [r7, #28]
 800b740:	2b00      	cmp	r3, #0
 800b742:	da01      	bge.n	800b748 <f_mount+0x28>
 800b744:	230b      	movs	r3, #11
 800b746:	e02b      	b.n	800b7a0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b748:	4a17      	ldr	r2, [pc, #92]	; (800b7a8 <f_mount+0x88>)
 800b74a:	69fb      	ldr	r3, [r7, #28]
 800b74c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b750:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b752:	69bb      	ldr	r3, [r7, #24]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d005      	beq.n	800b764 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b758:	69b8      	ldr	r0, [r7, #24]
 800b75a:	f7fe fd21 	bl	800a1a0 <_ZL10clear_lockP5FATFS>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b75e:	69bb      	ldr	r3, [r7, #24]
 800b760:	2200      	movs	r2, #0
 800b762:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d002      	beq.n	800b770 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	2200      	movs	r2, #0
 800b76e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b770:	68fa      	ldr	r2, [r7, #12]
 800b772:	490d      	ldr	r1, [pc, #52]	; (800b7a8 <f_mount+0x88>)
 800b774:	69fb      	ldr	r3, [r7, #28]
 800b776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d002      	beq.n	800b786 <f_mount+0x66>
 800b780:	79fb      	ldrb	r3, [r7, #7]
 800b782:	2b01      	cmp	r3, #1
 800b784:	d001      	beq.n	800b78a <f_mount+0x6a>
 800b786:	2300      	movs	r3, #0
 800b788:	e00a      	b.n	800b7a0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b78a:	f107 010c 	add.w	r1, r7, #12
 800b78e:	f107 0308 	add.w	r3, r7, #8
 800b792:	2200      	movs	r2, #0
 800b794:	4618      	mov	r0, r3
 800b796:	f7ff fd23 	bl	800b1e0 <_ZL11find_volumePPKcPP5FATFSh>
 800b79a:	4603      	mov	r3, r0
 800b79c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b79e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3720      	adds	r7, #32
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	24000a6c 	.word	0x24000a6c

0800b7ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b098      	sub	sp, #96	; 0x60
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	4613      	mov	r3, r2
 800b7b8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d101      	bne.n	800b7c4 <f_open+0x18>
 800b7c0:	2309      	movs	r3, #9
 800b7c2:	e1b5      	b.n	800bb30 <f_open+0x384>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b7c4:	79fb      	ldrb	r3, [r7, #7]
 800b7c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b7ca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b7cc:	79fa      	ldrb	r2, [r7, #7]
 800b7ce:	f107 0110 	add.w	r1, r7, #16
 800b7d2:	f107 0308 	add.w	r3, r7, #8
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7ff fd02 	bl	800b1e0 <_ZL11find_volumePPKcPP5FATFSh>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b7e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	f040 8199 	bne.w	800bb1e <f_open+0x372>
		dj.obj.fs = fs;
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b7f0:	68ba      	ldr	r2, [r7, #8]
 800b7f2:	f107 0314 	add.w	r3, r7, #20
 800b7f6:	4611      	mov	r1, r2
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f7ff fbd1 	bl	800afa0 <_ZL11follow_pathP3DIRPKc>
 800b7fe:	4603      	mov	r3, r0
 800b800:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b804:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d119      	bne.n	800b840 <f_open+0x94>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b80c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b810:	b25b      	sxtb	r3, r3
 800b812:	2b00      	cmp	r3, #0
 800b814:	da03      	bge.n	800b81e <f_open+0x72>
				res = FR_INVALID_NAME;
 800b816:	2306      	movs	r3, #6
 800b818:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b81c:	e010      	b.n	800b840 <f_open+0x94>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b81e:	79fb      	ldrb	r3, [r7, #7]
 800b820:	f023 0301 	bic.w	r3, r3, #1
 800b824:	2b00      	cmp	r3, #0
 800b826:	d001      	beq.n	800b82c <f_open+0x80>
 800b828:	2201      	movs	r2, #1
 800b82a:	e000      	b.n	800b82e <f_open+0x82>
 800b82c:	2200      	movs	r2, #0
 800b82e:	f107 0314 	add.w	r3, r7, #20
 800b832:	4611      	mov	r1, r2
 800b834:	4618      	mov	r0, r3
 800b836:	f7fe fb67 	bl	8009f08 <_ZL8chk_lockP3DIRi>
 800b83a:	4603      	mov	r3, r0
 800b83c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b840:	79fb      	ldrb	r3, [r7, #7]
 800b842:	f003 031c 	and.w	r3, r3, #28
 800b846:	2b00      	cmp	r3, #0
 800b848:	d07f      	beq.n	800b94a <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 800b84a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d017      	beq.n	800b882 <f_open+0xd6>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b852:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b856:	2b04      	cmp	r3, #4
 800b858:	d10e      	bne.n	800b878 <f_open+0xcc>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b85a:	f7fe fbb1 	bl	8009fc0 <_ZL8enq_lockv>
 800b85e:	4603      	mov	r3, r0
 800b860:	2b00      	cmp	r3, #0
 800b862:	d006      	beq.n	800b872 <f_open+0xc6>
 800b864:	f107 0314 	add.w	r3, r7, #20
 800b868:	4618      	mov	r0, r3
 800b86a:	f7ff facd 	bl	800ae08 <_ZL12dir_registerP3DIR>
 800b86e:	4603      	mov	r3, r0
 800b870:	e000      	b.n	800b874 <f_open+0xc8>
 800b872:	2312      	movs	r3, #18
 800b874:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b878:	79fb      	ldrb	r3, [r7, #7]
 800b87a:	f043 0308 	orr.w	r3, r3, #8
 800b87e:	71fb      	strb	r3, [r7, #7]
 800b880:	e010      	b.n	800b8a4 <f_open+0xf8>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b882:	7ebb      	ldrb	r3, [r7, #26]
 800b884:	f003 0311 	and.w	r3, r3, #17
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d003      	beq.n	800b894 <f_open+0xe8>
					res = FR_DENIED;
 800b88c:	2307      	movs	r3, #7
 800b88e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b892:	e007      	b.n	800b8a4 <f_open+0xf8>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b894:	79fb      	ldrb	r3, [r7, #7]
 800b896:	f003 0304 	and.w	r3, r3, #4
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d002      	beq.n	800b8a4 <f_open+0xf8>
 800b89e:	2308      	movs	r3, #8
 800b8a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b8a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d168      	bne.n	800b97e <f_open+0x1d2>
 800b8ac:	79fb      	ldrb	r3, [r7, #7]
 800b8ae:	f003 0308 	and.w	r3, r3, #8
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d063      	beq.n	800b97e <f_open+0x1d2>
				dw = GET_FATTIME();
 800b8b6:	f7fd f9ad 	bl	8008c14 <get_fattime>
 800b8ba:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b8bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8be:	330e      	adds	r3, #14
 800b8c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f7fe fa64 	bl	8009d90 <_ZL8st_dwordPhm>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b8c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ca:	3316      	adds	r3, #22
 800b8cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7fe fa5e 	bl	8009d90 <_ZL8st_dwordPhm>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b8d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8d6:	330b      	adds	r3, #11
 800b8d8:	2220      	movs	r2, #32
 800b8da:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8e0:	4611      	mov	r1, r2
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7ff f9f7 	bl	800acd6 <_ZL8ld_clustP5FATFSPKh>
 800b8e8:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f7ff fa0f 	bl	800ad14 <_ZL8st_clustP5FATFSPhm>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b8f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8f8:	331c      	adds	r3, #28
 800b8fa:	2100      	movs	r1, #0
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7fe fa47 	bl	8009d90 <_ZL8st_dwordPhm>
					fs->wflag = 1;
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	2201      	movs	r2, #1
 800b906:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d037      	beq.n	800b97e <f_open+0x1d2>
						dw = fs->winsect;
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b912:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b914:	f107 0314 	add.w	r3, r7, #20
 800b918:	2200      	movs	r2, #0
 800b91a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7fe ff12 	bl	800a746 <_ZL12remove_chainP5_FDIDmm>
 800b922:	4603      	mov	r3, r0
 800b924:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b928:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d126      	bne.n	800b97e <f_open+0x1d2>
							res = move_window(fs, dw);
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b934:	4618      	mov	r0, r3
 800b936:	f7fe fca0 	bl	800a27a <_ZL11move_windowP5FATFSm>
 800b93a:	4603      	mov	r3, r0
 800b93c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b944:	3a01      	subs	r2, #1
 800b946:	60da      	str	r2, [r3, #12]
 800b948:	e019      	b.n	800b97e <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b94a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d115      	bne.n	800b97e <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b952:	7ebb      	ldrb	r3, [r7, #26]
 800b954:	f003 0310 	and.w	r3, r3, #16
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d003      	beq.n	800b964 <f_open+0x1b8>
					res = FR_NO_FILE;
 800b95c:	2304      	movs	r3, #4
 800b95e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b962:	e00c      	b.n	800b97e <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b964:	79fb      	ldrb	r3, [r7, #7]
 800b966:	f003 0302 	and.w	r3, r3, #2
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d007      	beq.n	800b97e <f_open+0x1d2>
 800b96e:	7ebb      	ldrb	r3, [r7, #26]
 800b970:	f003 0301 	and.w	r3, r3, #1
 800b974:	2b00      	cmp	r3, #0
 800b976:	d002      	beq.n	800b97e <f_open+0x1d2>
						res = FR_DENIED;
 800b978:	2307      	movs	r3, #7
 800b97a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b97e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b982:	2b00      	cmp	r3, #0
 800b984:	d127      	bne.n	800b9d6 <f_open+0x22a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b986:	79fb      	ldrb	r3, [r7, #7]
 800b988:	f003 0308 	and.w	r3, r3, #8
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d003      	beq.n	800b998 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 800b990:	79fb      	ldrb	r3, [r7, #7]
 800b992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b996:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b9a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b9a6:	79fb      	ldrb	r3, [r7, #7]
 800b9a8:	f023 0301 	bic.w	r3, r3, #1
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d001      	beq.n	800b9b4 <f_open+0x208>
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	e000      	b.n	800b9b6 <f_open+0x20a>
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	f107 0314 	add.w	r3, r7, #20
 800b9ba:	4611      	mov	r1, r2
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f7fe fb21 	bl	800a004 <_ZL8inc_lockP3DIRi>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	691b      	ldr	r3, [r3, #16]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d102      	bne.n	800b9d6 <f_open+0x22a>
 800b9d0:	2302      	movs	r3, #2
 800b9d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b9d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	f040 809f 	bne.w	800bb1e <f_open+0x372>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9e4:	4611      	mov	r1, r2
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7ff f975 	bl	800acd6 <_ZL8ld_clustP5FATFSPKh>
 800b9ec:	4602      	mov	r2, r0
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b9f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9f4:	331c      	adds	r3, #28
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7fe f98c 	bl	8009d14 <_ZL8ld_dwordPKh>
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2200      	movs	r2, #0
 800ba06:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ba08:	693a      	ldr	r2, [r7, #16]
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	88da      	ldrh	r2, [r3, #6]
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	79fa      	ldrb	r2, [r7, #7]
 800ba1a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2200      	movs	r2, #0
 800ba26:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	3330      	adds	r3, #48	; 0x30
 800ba32:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba36:	2100      	movs	r1, #0
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f7fe f9fc 	bl	8009e36 <_ZL7mem_setPvij>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ba3e:	79fb      	ldrb	r3, [r7, #7]
 800ba40:	f003 0320 	and.w	r3, r3, #32
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d06a      	beq.n	800bb1e <f_open+0x372>
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	68db      	ldr	r3, [r3, #12]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d066      	beq.n	800bb1e <f_open+0x372>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	68da      	ldr	r2, [r3, #12]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	895b      	ldrh	r3, [r3, #10]
 800ba5c:	025b      	lsls	r3, r3, #9
 800ba5e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	689b      	ldr	r3, [r3, #8]
 800ba64:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	68db      	ldr	r3, [r3, #12]
 800ba6a:	657b      	str	r3, [r7, #84]	; 0x54
 800ba6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d11b      	bne.n	800baac <f_open+0x300>
 800ba74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d917      	bls.n	800baac <f_open+0x300>
					clst = get_fat(&fp->obj, clst);
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7fe fcc0 	bl	800a406 <_ZL7get_fatP5_FDIDm>
 800ba86:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ba88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	d802      	bhi.n	800ba94 <f_open+0x2e8>
 800ba8e:	2302      	movs	r3, #2
 800ba90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ba94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba9a:	d102      	bne.n	800baa2 <f_open+0x2f6>
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800baa2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800baa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800baa6:	1ad3      	subs	r3, r2, r3
 800baa8:	657b      	str	r3, [r7, #84]	; 0x54
 800baaa:	e7df      	b.n	800ba6c <f_open+0x2c0>
				}
				fp->clust = clst;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bab0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bab2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d131      	bne.n	800bb1e <f_open+0x372>
 800baba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800babc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d02c      	beq.n	800bb1e <f_open+0x372>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bac8:	4618      	mov	r0, r3
 800baca:	f7fe fc7d 	bl	800a3c8 <_ZL10clust2sectP5FATFSm>
 800bace:	6478      	str	r0, [r7, #68]	; 0x44
 800bad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	bf0c      	ite	eq
 800bad6:	2301      	moveq	r3, #1
 800bad8:	2300      	movne	r3, #0
 800bada:	b2db      	uxtb	r3, r3
 800badc:	2b00      	cmp	r3, #0
 800bade:	d003      	beq.n	800bae8 <f_open+0x33c>
						res = FR_INT_ERR;
 800bae0:	2302      	movs	r3, #2
 800bae2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bae6:	e01a      	b.n	800bb1e <f_open+0x372>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800baea:	0a5a      	lsrs	r2, r3, #9
 800baec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baee:	441a      	add	r2, r3
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	7858      	ldrb	r0, [r3, #1]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	6a1a      	ldr	r2, [r3, #32]
 800bb02:	2301      	movs	r3, #1
 800bb04:	f7fe f890 	bl	8009c28 <disk_read>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	bf14      	ite	ne
 800bb0e:	2301      	movne	r3, #1
 800bb10:	2300      	moveq	r3, #0
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d002      	beq.n	800bb1e <f_open+0x372>
 800bb18:	2301      	movs	r3, #1
 800bb1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bb1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d002      	beq.n	800bb2c <f_open+0x380>
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bb2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3760      	adds	r7, #96	; 0x60
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b08e      	sub	sp, #56	; 0x38
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	607a      	str	r2, [r7, #4]
 800bb44:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f107 0214 	add.w	r2, r7, #20
 800bb56:	4611      	mov	r1, r2
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f7ff fda7 	bl	800b6ac <_ZL8validateP5_FDIDPP5FATFS>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bb64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d107      	bne.n	800bb7c <f_read+0x44>
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	7d5b      	ldrb	r3, [r3, #21]
 800bb70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bb74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d001      	beq.n	800bb80 <f_read+0x48>
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	e000      	b.n	800bb82 <f_read+0x4a>
 800bb80:	2300      	movs	r3, #0
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d002      	beq.n	800bb8c <f_read+0x54>
 800bb86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb8a:	e123      	b.n	800bdd4 <f_read+0x29c>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	7d1b      	ldrb	r3, [r3, #20]
 800bb90:	f003 0301 	and.w	r3, r3, #1
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d101      	bne.n	800bb9c <f_read+0x64>
 800bb98:	2307      	movs	r3, #7
 800bb9a:	e11b      	b.n	800bdd4 <f_read+0x29c>
	remain = fp->obj.objsize - fp->fptr;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	68da      	ldr	r2, [r3, #12]
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	699b      	ldr	r3, [r3, #24]
 800bba4:	1ad3      	subs	r3, r2, r3
 800bba6:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	6a3b      	ldr	r3, [r7, #32]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d901      	bls.n	800bbb4 <f_read+0x7c>
 800bbb0:	6a3b      	ldr	r3, [r7, #32]
 800bbb2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	f000 810b 	beq.w	800bdd2 <f_read+0x29a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	699b      	ldr	r3, [r3, #24]
 800bbc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	f040 80d5 	bne.w	800bd74 <f_read+0x23c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	699b      	ldr	r3, [r3, #24]
 800bbce:	0a5b      	lsrs	r3, r3, #9
 800bbd0:	697a      	ldr	r2, [r7, #20]
 800bbd2:	8952      	ldrh	r2, [r2, #10]
 800bbd4:	3a01      	subs	r2, #1
 800bbd6:	4013      	ands	r3, r2
 800bbd8:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800bbda:	69fb      	ldr	r3, [r7, #28]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d12f      	bne.n	800bc40 <f_read+0x108>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	699b      	ldr	r3, [r3, #24]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d103      	bne.n	800bbf0 <f_read+0xb8>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	689b      	ldr	r3, [r3, #8]
 800bbec:	633b      	str	r3, [r7, #48]	; 0x30
 800bbee:	e013      	b.n	800bc18 <f_read+0xe0>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d007      	beq.n	800bc08 <f_read+0xd0>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	699b      	ldr	r3, [r3, #24]
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	68f8      	ldr	r0, [r7, #12]
 800bc00:	f7fe fe9e 	bl	800a940 <_ZL10clmt_clustP3FILm>
 800bc04:	6338      	str	r0, [r7, #48]	; 0x30
 800bc06:	e007      	b.n	800bc18 <f_read+0xe0>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800bc08:	68fa      	ldr	r2, [r7, #12]
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	69db      	ldr	r3, [r3, #28]
 800bc0e:	4619      	mov	r1, r3
 800bc10:	4610      	mov	r0, r2
 800bc12:	f7fe fbf8 	bl	800a406 <_ZL7get_fatP5_FDIDm>
 800bc16:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800bc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d804      	bhi.n	800bc28 <f_read+0xf0>
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2202      	movs	r2, #2
 800bc22:	755a      	strb	r2, [r3, #21]
 800bc24:	2302      	movs	r3, #2
 800bc26:	e0d5      	b.n	800bdd4 <f_read+0x29c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc2e:	d104      	bne.n	800bc3a <f_read+0x102>
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2201      	movs	r2, #1
 800bc34:	755a      	strb	r2, [r3, #21]
 800bc36:	2301      	movs	r3, #1
 800bc38:	e0cc      	b.n	800bdd4 <f_read+0x29c>
				fp->clust = clst;				/* Update current cluster */
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc3e:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bc40:	697a      	ldr	r2, [r7, #20]
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	69db      	ldr	r3, [r3, #28]
 800bc46:	4619      	mov	r1, r3
 800bc48:	4610      	mov	r0, r2
 800bc4a:	f7fe fbbd 	bl	800a3c8 <_ZL10clust2sectP5FATFSm>
 800bc4e:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bc50:	69bb      	ldr	r3, [r7, #24]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d104      	bne.n	800bc60 <f_read+0x128>
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2202      	movs	r2, #2
 800bc5a:	755a      	strb	r2, [r3, #21]
 800bc5c:	2302      	movs	r3, #2
 800bc5e:	e0b9      	b.n	800bdd4 <f_read+0x29c>
			sect += csect;
 800bc60:	69ba      	ldr	r2, [r7, #24]
 800bc62:	69fb      	ldr	r3, [r7, #28]
 800bc64:	4413      	add	r3, r2
 800bc66:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	0a5b      	lsrs	r3, r3, #9
 800bc6c:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800bc6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d03e      	beq.n	800bcf2 <f_read+0x1ba>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bc74:	69fa      	ldr	r2, [r7, #28]
 800bc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc78:	4413      	add	r3, r2
 800bc7a:	697a      	ldr	r2, [r7, #20]
 800bc7c:	8952      	ldrh	r2, [r2, #10]
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d905      	bls.n	800bc8e <f_read+0x156>
					cc = fs->csize - csect;
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	895b      	ldrh	r3, [r3, #10]
 800bc86:	461a      	mov	r2, r3
 800bc88:	69fb      	ldr	r3, [r7, #28]
 800bc8a:	1ad3      	subs	r3, r2, r3
 800bc8c:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	7858      	ldrb	r0, [r3, #1]
 800bc92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc94:	69ba      	ldr	r2, [r7, #24]
 800bc96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc98:	f7fd ffc6 	bl	8009c28 <disk_read>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	bf14      	ite	ne
 800bca2:	2301      	movne	r3, #1
 800bca4:	2300      	moveq	r3, #0
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d004      	beq.n	800bcb6 <f_read+0x17e>
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2201      	movs	r2, #1
 800bcb0:	755a      	strb	r2, [r3, #21]
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	e08e      	b.n	800bdd4 <f_read+0x29c>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	7d1b      	ldrb	r3, [r3, #20]
 800bcba:	b25b      	sxtb	r3, r3
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	da14      	bge.n	800bcea <f_read+0x1b2>
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	6a1a      	ldr	r2, [r3, #32]
 800bcc4:	69bb      	ldr	r3, [r7, #24]
 800bcc6:	1ad3      	subs	r3, r2, r3
 800bcc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d90d      	bls.n	800bcea <f_read+0x1b2>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	6a1a      	ldr	r2, [r3, #32]
 800bcd2:	69bb      	ldr	r3, [r7, #24]
 800bcd4:	1ad3      	subs	r3, r2, r3
 800bcd6:	025b      	lsls	r3, r3, #9
 800bcd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcda:	18d0      	adds	r0, r2, r3
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	3330      	adds	r3, #48	; 0x30
 800bce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bce4:	4619      	mov	r1, r3
 800bce6:	f7fe f87f 	bl	8009de8 <_ZL7mem_cpyPvPKvj>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800bcea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcec:	025b      	lsls	r3, r3, #9
 800bcee:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800bcf0:	e05a      	b.n	800bda8 <f_read+0x270>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	6a1b      	ldr	r3, [r3, #32]
 800bcf6:	69ba      	ldr	r2, [r7, #24]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d038      	beq.n	800bd6e <f_read+0x236>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	7d1b      	ldrb	r3, [r3, #20]
 800bd00:	b25b      	sxtb	r3, r3
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	da1d      	bge.n	800bd42 <f_read+0x20a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	7858      	ldrb	r0, [r3, #1]
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	6a1a      	ldr	r2, [r3, #32]
 800bd14:	2301      	movs	r3, #1
 800bd16:	f7fd ffa7 	bl	8009c68 <disk_write>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	bf14      	ite	ne
 800bd20:	2301      	movne	r3, #1
 800bd22:	2300      	moveq	r3, #0
 800bd24:	b2db      	uxtb	r3, r3
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d004      	beq.n	800bd34 <f_read+0x1fc>
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	755a      	strb	r2, [r3, #21]
 800bd30:	2301      	movs	r3, #1
 800bd32:	e04f      	b.n	800bdd4 <f_read+0x29c>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	7d1b      	ldrb	r3, [r3, #20]
 800bd38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd3c:	b2da      	uxtb	r2, r3
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	7858      	ldrb	r0, [r3, #1]
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	69ba      	ldr	r2, [r7, #24]
 800bd50:	f7fd ff6a 	bl	8009c28 <disk_read>
 800bd54:	4603      	mov	r3, r0
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	bf14      	ite	ne
 800bd5a:	2301      	movne	r3, #1
 800bd5c:	2300      	moveq	r3, #0
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d004      	beq.n	800bd6e <f_read+0x236>
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2201      	movs	r2, #1
 800bd68:	755a      	strb	r2, [r3, #21]
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	e032      	b.n	800bdd4 <f_read+0x29c>
			}
#endif
			fp->sect = sect;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	69ba      	ldr	r2, [r7, #24]
 800bd72:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	699b      	ldr	r3, [r3, #24]
 800bd78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd7c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bd80:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800bd82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d901      	bls.n	800bd8e <f_read+0x256>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	699b      	ldr	r3, [r3, #24]
 800bd98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd9c:	4413      	add	r3, r2
 800bd9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bda0:	4619      	mov	r1, r3
 800bda2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bda4:	f7fe f820 	bl	8009de8 <_ZL7mem_cpyPvPKvj>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800bda8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdac:	4413      	add	r3, r2
 800bdae:	627b      	str	r3, [r7, #36]	; 0x24
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	699a      	ldr	r2, [r3, #24]
 800bdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb6:	441a      	add	r2, r3
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	619a      	str	r2, [r3, #24]
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	681a      	ldr	r2, [r3, #0]
 800bdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc2:	441a      	add	r2, r3
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	601a      	str	r2, [r3, #0]
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdcc:	1ad3      	subs	r3, r2, r3
 800bdce:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800bdd0:	e6f0      	b.n	800bbb4 <f_read+0x7c>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800bdd2:	2300      	movs	r3, #0
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3738      	adds	r7, #56	; 0x38
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <_ZN6FatDMA17f_write_dma_startEP3FILPKvj>:
FRESULT FatDMA::f_write_dma_start (
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw			/* Number of bytes to write */
)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	60b9      	str	r1, [r7, #8]
 800bde6:	607a      	str	r2, [r7, #4]
 800bde8:	603b      	str	r3, [r7, #0]
	wbuff = (const BYTE*)buff;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	this->fp = fp;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	68ba      	ldr	r2, [r7, #8]
 800bdf6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	this->btw = btw;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	683a      	ldr	r2, [r7, #0]
 800bdfe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	wcnt = 0; // clst = 0; sect = 0;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2200      	movs	r2, #0
 800be06:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	cc = 0; csect = 0;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	2200      	movs	r2, #0
 800be0e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2200      	movs	r2, #0
 800be16:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800be1a:	68ba      	ldr	r2, [r7, #8]
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	3388      	adds	r3, #136	; 0x88
 800be20:	4619      	mov	r1, r3
 800be22:	4610      	mov	r0, r2
 800be24:	f7ff fc42 	bl	800b6ac <_ZL8validateP5_FDIDPP5FATFS>
 800be28:	4603      	mov	r3, r0
 800be2a:	461a      	mov	r2, r3
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d109      	bne.n	800be50 <_ZN6FatDMA17f_write_dma_startEP3FILPKvj+0x74>
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	7d5a      	ldrb	r2, [r3, #21]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d001      	beq.n	800be54 <_ZN6FatDMA17f_write_dma_startEP3FILPKvj+0x78>
 800be50:	2301      	movs	r3, #1
 800be52:	e000      	b.n	800be56 <_ZN6FatDMA17f_write_dma_startEP3FILPKvj+0x7a>
 800be54:	2300      	movs	r3, #0
 800be56:	2b00      	cmp	r3, #0
 800be58:	d003      	beq.n	800be62 <_ZN6FatDMA17f_write_dma_startEP3FILPKvj+0x86>
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800be60:	e017      	b.n	800be92 <_ZN6FatDMA17f_write_dma_startEP3FILPKvj+0xb6>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	7d1b      	ldrb	r3, [r3, #20]
 800be66:	f003 0302 	and.w	r3, r3, #2
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d101      	bne.n	800be72 <_ZN6FatDMA17f_write_dma_startEP3FILPKvj+0x96>
 800be6e:	2307      	movs	r3, #7
 800be70:	e00f      	b.n	800be92 <_ZN6FatDMA17f_write_dma_startEP3FILPKvj+0xb6>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	699a      	ldr	r2, [r3, #24]
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	441a      	add	r2, r3
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	699b      	ldr	r3, [r3, #24]
 800be7e:	429a      	cmp	r2, r3
 800be80:	d203      	bcs.n	800be8a <_ZN6FatDMA17f_write_dma_startEP3FILPKvj+0xae>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	699b      	ldr	r3, [r3, #24]
 800be86:	43db      	mvns	r3, r3
 800be88:	603b      	str	r3, [r7, #0]
	}

	return f_write_dma_loop();
 800be8a:	68f8      	ldr	r0, [r7, #12]
 800be8c:	f000 f805 	bl	800be9a <_ZN6FatDMA16f_write_dma_loopEv>
 800be90:	4603      	mov	r3, r0

}
 800be92:	4618      	mov	r0, r3
 800be94:	3710      	adds	r7, #16
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}

0800be9a <_ZN6FatDMA16f_write_dma_loopEv>:

// Second part of the standard f_write, replacing standard transfer methods with DMA methods
FRESULT FatDMA::f_write_dma_loop() {
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b084      	sub	sp, #16
 800be9e:	af02      	add	r7, sp, #8
 800bea0:	6078      	str	r0, [r7, #4]

	if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bea8:	699b      	ldr	r3, [r3, #24]
 800beaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beae:	2b00      	cmp	r3, #0
 800beb0:	f040 8166 	bne.w	800c180 <_ZN6FatDMA16f_write_dma_loopEv+0x2e6>
		csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800beba:	699b      	ldr	r3, [r3, #24]
 800bebc:	0a5b      	lsrs	r3, r3, #9
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800bec4:	8952      	ldrh	r2, [r2, #10]
 800bec6:	3a01      	subs	r2, #1
 800bec8:	401a      	ands	r2, r3
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		if (csect == 0) {				/* On the cluster boundary? */
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d17c      	bne.n	800bfd4 <_ZN6FatDMA16f_write_dma_loopEv+0x13a>
			if (fp->fptr == 0) {		/* On the top of the file? */
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bee0:	699b      	ldr	r3, [r3, #24]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d117      	bne.n	800bf16 <_ZN6FatDMA16f_write_dma_loopEv+0x7c>
				clst = fp->obj.sclust;	/* Follow from the origin */
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800beec:	689a      	ldr	r2, [r3, #8]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if (clst == 0) {		/* If no cluster is allocated, */
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800befa:	2b00      	cmp	r3, #0
 800befc:	d131      	bne.n	800bf62 <_ZN6FatDMA16f_write_dma_loopEv+0xc8>
					clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf04:	2100      	movs	r1, #0
 800bf06:	4618      	mov	r0, r3
 800bf08:	f7fe fc82 	bl	800a810 <_ZL12create_chainP5_FDIDm>
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800bf14:	e025      	b.n	800bf62 <_ZN6FatDMA16f_write_dma_loopEv+0xc8>
				}
			} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
				if (fp->cltbl) {
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d00f      	beq.n	800bf42 <_ZN6FatDMA16f_write_dma_loopEv+0xa8>
					clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf2e:	699b      	ldr	r3, [r3, #24]
 800bf30:	4619      	mov	r1, r3
 800bf32:	4610      	mov	r0, r2
 800bf34:	f7fe fd04 	bl	800a940 <_ZL10clmt_clustP3FILm>
 800bf38:	4602      	mov	r2, r0
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800bf40:	e00f      	b.n	800bf62 <_ZN6FatDMA16f_write_dma_loopEv+0xc8>
				} else
#endif
				{
					clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf48:	461a      	mov	r2, r3
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf50:	69db      	ldr	r3, [r3, #28]
 800bf52:	4619      	mov	r1, r3
 800bf54:	4610      	mov	r0, r2
 800bf56:	f7fe fc5b 	bl	800a810 <_ZL12create_chainP5_FDIDm>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				}
			}
			if (clst == 0) ABORT(fs, FR_DISK_ERR);		/* Could not allocate a new cluster (disk full) */
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d106      	bne.n	800bf7a <_ZN6FatDMA16f_write_dma_loopEv+0xe0>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf72:	2201      	movs	r2, #1
 800bf74:	755a      	strb	r2, [r3, #21]
 800bf76:	2301      	movs	r3, #1
 800bf78:	e13c      	b.n	800c1f4 <_ZN6FatDMA16f_write_dma_loopEv+0x35a>
			if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d106      	bne.n	800bf92 <_ZN6FatDMA16f_write_dma_loopEv+0xf8>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf8a:	2202      	movs	r2, #2
 800bf8c:	755a      	strb	r2, [r3, #21]
 800bf8e:	2302      	movs	r3, #2
 800bf90:	e130      	b.n	800c1f4 <_ZN6FatDMA16f_write_dma_loopEv+0x35a>
			if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf9c:	d106      	bne.n	800bfac <_ZN6FatDMA16f_write_dma_loopEv+0x112>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bfa4:	2201      	movs	r2, #1
 800bfa6:	755a      	strb	r2, [r3, #21]
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	e123      	b.n	800c1f4 <_ZN6FatDMA16f_write_dma_loopEv+0x35a>
			fp->clust = clst;			/* Update current cluster */
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800bfb8:	61da      	str	r2, [r3, #28]
			if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bfc0:	689b      	ldr	r3, [r3, #8]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d106      	bne.n	800bfd4 <_ZN6FatDMA16f_write_dma_loopEv+0x13a>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800bfd2:	609a      	str	r2, [r3, #8]
		}
#if _FS_TINY
		if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
		if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bfda:	7d1b      	ldrb	r3, [r3, #20]
 800bfdc:	b25b      	sxtb	r3, r3
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	da29      	bge.n	800c036 <_ZN6FatDMA16f_write_dma_loopEv+0x19c>
			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfe8:	7858      	ldrb	r0, [r3, #1]
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bff0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bffa:	6a1a      	ldr	r2, [r3, #32]
 800bffc:	2301      	movs	r3, #1
 800bffe:	f7fd fe33 	bl	8009c68 <disk_write>
 800c002:	4603      	mov	r3, r0
 800c004:	2b00      	cmp	r3, #0
 800c006:	bf14      	ite	ne
 800c008:	2301      	movne	r3, #1
 800c00a:	2300      	moveq	r3, #0
 800c00c:	b2db      	uxtb	r3, r3
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d006      	beq.n	800c020 <_ZN6FatDMA16f_write_dma_loopEv+0x186>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c018:	2201      	movs	r2, #1
 800c01a:	755a      	strb	r2, [r3, #21]
 800c01c:	2301      	movs	r3, #1
 800c01e:	e0e9      	b.n	800c1f4 <_ZN6FatDMA16f_write_dma_loopEv+0x35a>
			fp->flag &= (BYTE)~FA_DIRTY;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c026:	7d1a      	ldrb	r2, [r3, #20]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c02e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c032:	b2d2      	uxtb	r2, r2
 800c034:	751a      	strb	r2, [r3, #20]
		}
#endif
		sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c042:	69db      	ldr	r3, [r3, #28]
 800c044:	4619      	mov	r1, r3
 800c046:	4610      	mov	r0, r2
 800c048:	f7fe f9be 	bl	800a3c8 <_ZL10clust2sectP5FATFSm>
 800c04c:	4602      	mov	r2, r0
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		if (!sect) ABORT(fs, FR_INT_ERR);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d106      	bne.n	800c06c <_ZN6FatDMA16f_write_dma_loopEv+0x1d2>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c064:	2202      	movs	r2, #2
 800c066:	755a      	strb	r2, [r3, #21]
 800c068:	2302      	movs	r3, #2
 800c06a:	e0c3      	b.n	800c1f4 <_ZN6FatDMA16f_write_dma_loopEv+0x35a>
		sect += csect;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c078:	441a      	add	r2, r3
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c086:	0a5a      	lsrs	r2, r3, #9
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		if (cc) {						/* Write maximum contiguous sectors directly */
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c094:	2b00      	cmp	r3, #0
 800c096:	d03b      	beq.n	800c110 <_ZN6FatDMA16f_write_dma_loopEv+0x276>
			if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c0a4:	4413      	add	r3, r2
 800c0a6:	687a      	ldr	r2, [r7, #4]
 800c0a8:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800c0ac:	8952      	ldrh	r2, [r2, #10]
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d90b      	bls.n	800c0ca <_ZN6FatDMA16f_write_dma_loopEv+0x230>
				cc = fs->csize - csect;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0b8:	895b      	ldrh	r3, [r3, #10]
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c0c2:	1ad2      	subs	r2, r2, r3
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
			}

			// DMA: non-blocking, so once it's started, quit the function stack
			if (USER_SPI_write_dma_start(fs->drv, wbuff, sect, cc) != 0) ABORT(fs, FR_DISK_ERR);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0d0:	7859      	ldrb	r1, [r3, #1]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c0e4:	9300      	str	r3, [sp, #0]
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f7fd fb1f 	bl	800972c <_ZN6FatDMA24USER_SPI_write_dma_startEhPKhmj>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	bf14      	ite	ne
 800c0f4:	2301      	movne	r3, #1
 800c0f6:	2300      	moveq	r3, #0
 800c0f8:	b2db      	uxtb	r3, r3
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d006      	beq.n	800c10c <_ZN6FatDMA16f_write_dma_loopEv+0x272>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c104:	2201      	movs	r2, #1
 800c106:	755a      	strb	r2, [r3, #21]
 800c108:	2301      	movs	r3, #1
 800c10a:	e073      	b.n	800c1f4 <_ZN6FatDMA16f_write_dma_loopEv+0x35a>
			LEAVE_FF(fs, FR_OK);
 800c10c:	2300      	movs	r3, #0
 800c10e:	e071      	b.n	800c1f4 <_ZN6FatDMA16f_write_dma_loopEv+0x35a>
		if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
			if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
			fs->winsect = sect;
		}
#else
		if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c116:	6a1a      	ldr	r2, [r3, #32]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
			fp->fptr < fp->obj.objsize &&
 800c11e:	429a      	cmp	r2, r3
 800c120:	d01d      	beq.n	800c15e <_ZN6FatDMA16f_write_dma_loopEv+0x2c4>
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c128:	699a      	ldr	r2, [r3, #24]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c130:	68db      	ldr	r3, [r3, #12]
		if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c132:	429a      	cmp	r2, r3
 800c134:	d213      	bcs.n	800c15e <_ZN6FatDMA16f_write_dma_loopEv+0x2c4>
			disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c13c:	7858      	ldrb	r0, [r3, #1]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c144:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800c14e:	2301      	movs	r3, #1
 800c150:	f7fd fd6a 	bl	8009c28 <disk_read>
 800c154:	4603      	mov	r3, r0
			fp->fptr < fp->obj.objsize &&
 800c156:	2b00      	cmp	r3, #0
 800c158:	d001      	beq.n	800c15e <_ZN6FatDMA16f_write_dma_loopEv+0x2c4>
 800c15a:	2301      	movs	r3, #1
 800c15c:	e000      	b.n	800c160 <_ZN6FatDMA16f_write_dma_loopEv+0x2c6>
 800c15e:	2300      	movs	r3, #0
		if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c160:	2b00      	cmp	r3, #0
 800c162:	d006      	beq.n	800c172 <_ZN6FatDMA16f_write_dma_loopEv+0x2d8>
				ABORT(fs, FR_DISK_ERR);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c16a:	2201      	movs	r2, #1
 800c16c:	755a      	strb	r2, [r3, #21]
 800c16e:	2301      	movs	r3, #1
 800c170:	e040      	b.n	800c1f4 <_ZN6FatDMA16f_write_dma_loopEv+0x35a>
		}
#endif
		fp->sect = sect;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800c17e:	621a      	str	r2, [r3, #32]
	}

	wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c186:	699b      	ldr	r3, [r3, #24]
 800c188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c18c:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d905      	bls.n	800c1b2 <_ZN6FatDMA16f_write_dma_loopEv+0x318>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#if _FS_TINY
	if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
	mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
	fs->wflag = 1;
#else
	mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c1b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c1c2:	699b      	ldr	r3, [r3, #24]
 800c1c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1c8:	18d0      	adds	r0, r2, r3
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	f7fd fe06 	bl	8009de8 <_ZL7mem_cpyPvPKvj>
	fp->flag |= FA_DIRTY;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c1e2:	7d1a      	ldrb	r2, [r3, #20]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c1ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c1ee:	b2d2      	uxtb	r2, r2
 800c1f0:	751a      	strb	r2, [r3, #20]
#endif

	LEAVE_FF(fs, FR_OK);
 800c1f2:	2300      	movs	r3, #0

}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3708      	adds	r7, #8
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <_ZN6FatDMA16f_write_dma_cpltEv>:

// Called from the callback at the completion of transfer of all blocks
FRESULT FatDMA::f_write_dma_cplt ()
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b082      	sub	sp, #8
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
	*bw = 0;	/* Clear write byte counter */
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	689b      	ldr	r3, [r3, #8]
 800c208:	2200      	movs	r2, #0
 800c20a:	601a      	str	r2, [r3, #0]
	if (USER_SPI_write_dma_cplt() != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f7fd fb1d 	bl	800984c <_ZN6FatDMA23USER_SPI_write_dma_cpltEv>
 800c212:	4603      	mov	r3, r0
 800c214:	2b00      	cmp	r3, #0
 800c216:	bf14      	ite	ne
 800c218:	2301      	movne	r3, #1
 800c21a:	2300      	moveq	r3, #0
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d006      	beq.n	800c230 <_ZN6FatDMA16f_write_dma_cpltEv+0x34>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c228:	2201      	movs	r2, #1
 800c22a:	755a      	strb	r2, [r3, #21]
 800c22c:	2301      	movs	r3, #1
 800c22e:	e05b      	b.n	800c2e8 <_ZN6FatDMA16f_write_dma_cpltEv+0xec>

	wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c236:	025a      	lsls	r2, r3, #9
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	wbuff += wcnt; fp->fptr += wcnt; fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt; btw -= wcnt;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c24a:	441a      	add	r2, r3
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c258:	6999      	ldr	r1, [r3, #24]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c266:	440a      	add	r2, r1
 800c268:	619a      	str	r2, [r3, #24]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c270:	699a      	ldr	r2, [r3, #24]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c278:	68db      	ldr	r3, [r3, #12]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d904      	bls.n	800c288 <_ZN6FatDMA16f_write_dma_cpltEv+0x8c>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c284:	699b      	ldr	r3, [r3, #24]
 800c286:	e003      	b.n	800c290 <_ZN6FatDMA16f_write_dma_cpltEv+0x94>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c28e:	68db      	ldr	r3, [r3, #12]
 800c290:	687a      	ldr	r2, [r7, #4]
 800c292:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 800c296:	60d3      	str	r3, [r2, #12]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	689b      	ldr	r3, [r3, #8]
 800c29c:	6819      	ldr	r1, [r3, #0]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	689b      	ldr	r3, [r3, #8]
 800c2a8:	440a      	add	r2, r1
 800c2aa:	601a      	str	r2, [r3, #0]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c2b8:	1ad2      	subs	r2, r2, r3
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	if(btw) f_write_dma_loop();
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d002      	beq.n	800c2d0 <_ZN6FatDMA16f_write_dma_cpltEv+0xd4>
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f7ff fde5 	bl	800be9a <_ZN6FatDMA16f_write_dma_loopEv>

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c2d6:	7d1a      	ldrb	r2, [r3, #20]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c2de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c2e2:	b2d2      	uxtb	r2, r2
 800c2e4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c2e6:	2300      	movs	r3, #0
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3708      	adds	r7, #8
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b086      	sub	sp, #24
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f107 0208 	add.w	r2, r7, #8
 800c2fe:	4611      	mov	r1, r2
 800c300:	4618      	mov	r0, r3
 800c302:	f7ff f9d3 	bl	800b6ac <_ZL8validateP5_FDIDPP5FATFS>
 800c306:	4603      	mov	r3, r0
 800c308:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c30a:	7dfb      	ldrb	r3, [r7, #23]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d16d      	bne.n	800c3ec <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	7d1b      	ldrb	r3, [r3, #20]
 800c314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d067      	beq.n	800c3ec <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	7d1b      	ldrb	r3, [r3, #20]
 800c320:	b25b      	sxtb	r3, r3
 800c322:	2b00      	cmp	r3, #0
 800c324:	da1a      	bge.n	800c35c <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	7858      	ldrb	r0, [r3, #1]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6a1a      	ldr	r2, [r3, #32]
 800c334:	2301      	movs	r3, #1
 800c336:	f7fd fc97 	bl	8009c68 <disk_write>
 800c33a:	4603      	mov	r3, r0
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	bf14      	ite	ne
 800c340:	2301      	movne	r3, #1
 800c342:	2300      	moveq	r3, #0
 800c344:	b2db      	uxtb	r3, r3
 800c346:	2b00      	cmp	r3, #0
 800c348:	d001      	beq.n	800c34e <f_sync+0x5e>
 800c34a:	2301      	movs	r3, #1
 800c34c:	e04f      	b.n	800c3ee <f_sync+0xfe>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	7d1b      	ldrb	r3, [r3, #20]
 800c352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c356:	b2da      	uxtb	r2, r3
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c35c:	f7fc fc5a 	bl	8008c14 <get_fattime>
 800c360:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c362:	68ba      	ldr	r2, [r7, #8]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c368:	4619      	mov	r1, r3
 800c36a:	4610      	mov	r0, r2
 800c36c:	f7fd ff85 	bl	800a27a <_ZL11move_windowP5FATFSm>
 800c370:	4603      	mov	r3, r0
 800c372:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c374:	7dfb      	ldrb	r3, [r7, #23]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d138      	bne.n	800c3ec <f_sync+0xfc>
					dir = fp->dir_ptr;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c37e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	330b      	adds	r3, #11
 800c384:	781a      	ldrb	r2, [r3, #0]
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	330b      	adds	r3, #11
 800c38a:	f042 0220 	orr.w	r2, r2, #32
 800c38e:	b2d2      	uxtb	r2, r2
 800c390:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6818      	ldr	r0, [r3, #0]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	689b      	ldr	r3, [r3, #8]
 800c39a:	461a      	mov	r2, r3
 800c39c:	68f9      	ldr	r1, [r7, #12]
 800c39e:	f7fe fcb9 	bl	800ad14 <_ZL8st_clustP5FATFSPhm>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	f103 021c 	add.w	r2, r3, #28
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	68db      	ldr	r3, [r3, #12]
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	4610      	mov	r0, r2
 800c3b0:	f7fd fcee 	bl	8009d90 <_ZL8st_dwordPhm>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	3316      	adds	r3, #22
 800c3b8:	6939      	ldr	r1, [r7, #16]
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7fd fce8 	bl	8009d90 <_ZL8st_dwordPhm>
					st_word(dir + DIR_LstAccDate, 0);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	3312      	adds	r3, #18
 800c3c4:	2100      	movs	r1, #0
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7fd fcc7 	bl	8009d5a <_ZL7st_wordPht>
					fs->wflag = 1;
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7fd ff83 	bl	800a2e0 <_ZL7sync_fsP5FATFS>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	7d1b      	ldrb	r3, [r3, #20]
 800c3e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3e6:	b2da      	uxtb	r2, r3
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c3ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3718      	adds	r7, #24
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}

0800c3f6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c3f6:	b580      	push	{r7, lr}
 800c3f8:	b084      	sub	sp, #16
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f7ff ff76 	bl	800c2f0 <f_sync>
 800c404:	4603      	mov	r3, r0
 800c406:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c408:	7bfb      	ldrb	r3, [r7, #15]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d118      	bne.n	800c440 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f107 0208 	add.w	r2, r7, #8
 800c414:	4611      	mov	r1, r2
 800c416:	4618      	mov	r0, r3
 800c418:	f7ff f948 	bl	800b6ac <_ZL8validateP5_FDIDPP5FATFS>
 800c41c:	4603      	mov	r3, r0
 800c41e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c420:	7bfb      	ldrb	r3, [r7, #15]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d10c      	bne.n	800c440 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	691b      	ldr	r3, [r3, #16]
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7fd fe78 	bl	800a120 <_ZL8dec_lockj>
 800c430:	4603      	mov	r3, r0
 800c432:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c434:	7bfb      	ldrb	r3, [r7, #15]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d102      	bne.n	800c440 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2200      	movs	r2, #0
 800c43e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c440:	7bfb      	ldrb	r3, [r7, #15]
}
 800c442:	4618      	mov	r0, r3
 800c444:	3710      	adds	r7, #16
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
	...

0800c44c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b087      	sub	sp, #28
 800c450:	af00      	add	r7, sp, #0
 800c452:	60f8      	str	r0, [r7, #12]
 800c454:	60b9      	str	r1, [r7, #8]
 800c456:	4613      	mov	r3, r2
 800c458:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c45a:	2301      	movs	r3, #1
 800c45c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c45e:	2300      	movs	r3, #0
 800c460:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c462:	4b1f      	ldr	r3, [pc, #124]	; (800c4e0 <FATFS_LinkDriverEx+0x94>)
 800c464:	7a5b      	ldrb	r3, [r3, #9]
 800c466:	b2db      	uxtb	r3, r3
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d131      	bne.n	800c4d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c46c:	4b1c      	ldr	r3, [pc, #112]	; (800c4e0 <FATFS_LinkDriverEx+0x94>)
 800c46e:	7a5b      	ldrb	r3, [r3, #9]
 800c470:	b2db      	uxtb	r3, r3
 800c472:	461a      	mov	r2, r3
 800c474:	4b1a      	ldr	r3, [pc, #104]	; (800c4e0 <FATFS_LinkDriverEx+0x94>)
 800c476:	2100      	movs	r1, #0
 800c478:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c47a:	4b19      	ldr	r3, [pc, #100]	; (800c4e0 <FATFS_LinkDriverEx+0x94>)
 800c47c:	7a5b      	ldrb	r3, [r3, #9]
 800c47e:	b2db      	uxtb	r3, r3
 800c480:	4a17      	ldr	r2, [pc, #92]	; (800c4e0 <FATFS_LinkDriverEx+0x94>)
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	4413      	add	r3, r2
 800c486:	68fa      	ldr	r2, [r7, #12]
 800c488:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c48a:	4b15      	ldr	r3, [pc, #84]	; (800c4e0 <FATFS_LinkDriverEx+0x94>)
 800c48c:	7a5b      	ldrb	r3, [r3, #9]
 800c48e:	b2db      	uxtb	r3, r3
 800c490:	461a      	mov	r2, r3
 800c492:	4b13      	ldr	r3, [pc, #76]	; (800c4e0 <FATFS_LinkDriverEx+0x94>)
 800c494:	4413      	add	r3, r2
 800c496:	79fa      	ldrb	r2, [r7, #7]
 800c498:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c49a:	4b11      	ldr	r3, [pc, #68]	; (800c4e0 <FATFS_LinkDriverEx+0x94>)
 800c49c:	7a5b      	ldrb	r3, [r3, #9]
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	1c5a      	adds	r2, r3, #1
 800c4a2:	b2d1      	uxtb	r1, r2
 800c4a4:	4a0e      	ldr	r2, [pc, #56]	; (800c4e0 <FATFS_LinkDriverEx+0x94>)
 800c4a6:	7251      	strb	r1, [r2, #9]
 800c4a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c4aa:	7dbb      	ldrb	r3, [r7, #22]
 800c4ac:	3330      	adds	r3, #48	; 0x30
 800c4ae:	b2da      	uxtb	r2, r3
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	223a      	movs	r2, #58	; 0x3a
 800c4ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	3302      	adds	r3, #2
 800c4c0:	222f      	movs	r2, #47	; 0x2f
 800c4c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	3303      	adds	r3, #3
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c4d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	371c      	adds	r7, #28
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4dc:	4770      	bx	lr
 800c4de:	bf00      	nop
 800c4e0:	24000a94 	.word	0x24000a94

0800c4e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b082      	sub	sp, #8
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	6839      	ldr	r1, [r7, #0]
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f7ff ffaa 	bl	800c44c <FATFS_LinkDriverEx>
 800c4f8:	4603      	mov	r3, r0
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3708      	adds	r7, #8
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
	...

0800c504 <__errno>:
 800c504:	4b01      	ldr	r3, [pc, #4]	; (800c50c <__errno+0x8>)
 800c506:	6818      	ldr	r0, [r3, #0]
 800c508:	4770      	bx	lr
 800c50a:	bf00      	nop
 800c50c:	24000030 	.word	0x24000030

0800c510 <__libc_init_array>:
 800c510:	b570      	push	{r4, r5, r6, lr}
 800c512:	4e0d      	ldr	r6, [pc, #52]	; (800c548 <__libc_init_array+0x38>)
 800c514:	4c0d      	ldr	r4, [pc, #52]	; (800c54c <__libc_init_array+0x3c>)
 800c516:	1ba4      	subs	r4, r4, r6
 800c518:	10a4      	asrs	r4, r4, #2
 800c51a:	2500      	movs	r5, #0
 800c51c:	42a5      	cmp	r5, r4
 800c51e:	d109      	bne.n	800c534 <__libc_init_array+0x24>
 800c520:	4e0b      	ldr	r6, [pc, #44]	; (800c550 <__libc_init_array+0x40>)
 800c522:	4c0c      	ldr	r4, [pc, #48]	; (800c554 <__libc_init_array+0x44>)
 800c524:	f000 fc42 	bl	800cdac <_init>
 800c528:	1ba4      	subs	r4, r4, r6
 800c52a:	10a4      	asrs	r4, r4, #2
 800c52c:	2500      	movs	r5, #0
 800c52e:	42a5      	cmp	r5, r4
 800c530:	d105      	bne.n	800c53e <__libc_init_array+0x2e>
 800c532:	bd70      	pop	{r4, r5, r6, pc}
 800c534:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c538:	4798      	blx	r3
 800c53a:	3501      	adds	r5, #1
 800c53c:	e7ee      	b.n	800c51c <__libc_init_array+0xc>
 800c53e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c542:	4798      	blx	r3
 800c544:	3501      	adds	r5, #1
 800c546:	e7f2      	b.n	800c52e <__libc_init_array+0x1e>
 800c548:	0800d048 	.word	0x0800d048
 800c54c:	0800d048 	.word	0x0800d048
 800c550:	0800d048 	.word	0x0800d048
 800c554:	0800d050 	.word	0x0800d050

0800c558 <memcpy>:
 800c558:	b510      	push	{r4, lr}
 800c55a:	1e43      	subs	r3, r0, #1
 800c55c:	440a      	add	r2, r1
 800c55e:	4291      	cmp	r1, r2
 800c560:	d100      	bne.n	800c564 <memcpy+0xc>
 800c562:	bd10      	pop	{r4, pc}
 800c564:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c568:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c56c:	e7f7      	b.n	800c55e <memcpy+0x6>

0800c56e <memset>:
 800c56e:	4402      	add	r2, r0
 800c570:	4603      	mov	r3, r0
 800c572:	4293      	cmp	r3, r2
 800c574:	d100      	bne.n	800c578 <memset+0xa>
 800c576:	4770      	bx	lr
 800c578:	f803 1b01 	strb.w	r1, [r3], #1
 800c57c:	e7f9      	b.n	800c572 <memset+0x4>

0800c57e <_vsniprintf_r>:
 800c57e:	b530      	push	{r4, r5, lr}
 800c580:	1e14      	subs	r4, r2, #0
 800c582:	4605      	mov	r5, r0
 800c584:	b09b      	sub	sp, #108	; 0x6c
 800c586:	4618      	mov	r0, r3
 800c588:	da05      	bge.n	800c596 <_vsniprintf_r+0x18>
 800c58a:	238b      	movs	r3, #139	; 0x8b
 800c58c:	602b      	str	r3, [r5, #0]
 800c58e:	f04f 30ff 	mov.w	r0, #4294967295
 800c592:	b01b      	add	sp, #108	; 0x6c
 800c594:	bd30      	pop	{r4, r5, pc}
 800c596:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c59a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c59e:	bf14      	ite	ne
 800c5a0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c5a4:	4623      	moveq	r3, r4
 800c5a6:	9302      	str	r3, [sp, #8]
 800c5a8:	9305      	str	r3, [sp, #20]
 800c5aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c5ae:	9100      	str	r1, [sp, #0]
 800c5b0:	9104      	str	r1, [sp, #16]
 800c5b2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c5b6:	4602      	mov	r2, r0
 800c5b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c5ba:	4669      	mov	r1, sp
 800c5bc:	4628      	mov	r0, r5
 800c5be:	f000 f873 	bl	800c6a8 <_svfiprintf_r>
 800c5c2:	1c43      	adds	r3, r0, #1
 800c5c4:	bfbc      	itt	lt
 800c5c6:	238b      	movlt	r3, #139	; 0x8b
 800c5c8:	602b      	strlt	r3, [r5, #0]
 800c5ca:	2c00      	cmp	r4, #0
 800c5cc:	d0e1      	beq.n	800c592 <_vsniprintf_r+0x14>
 800c5ce:	9b00      	ldr	r3, [sp, #0]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	701a      	strb	r2, [r3, #0]
 800c5d4:	e7dd      	b.n	800c592 <_vsniprintf_r+0x14>
	...

0800c5d8 <vsniprintf>:
 800c5d8:	b507      	push	{r0, r1, r2, lr}
 800c5da:	9300      	str	r3, [sp, #0]
 800c5dc:	4613      	mov	r3, r2
 800c5de:	460a      	mov	r2, r1
 800c5e0:	4601      	mov	r1, r0
 800c5e2:	4803      	ldr	r0, [pc, #12]	; (800c5f0 <vsniprintf+0x18>)
 800c5e4:	6800      	ldr	r0, [r0, #0]
 800c5e6:	f7ff ffca 	bl	800c57e <_vsniprintf_r>
 800c5ea:	b003      	add	sp, #12
 800c5ec:	f85d fb04 	ldr.w	pc, [sp], #4
 800c5f0:	24000030 	.word	0x24000030

0800c5f4 <__ssputs_r>:
 800c5f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5f8:	688e      	ldr	r6, [r1, #8]
 800c5fa:	429e      	cmp	r6, r3
 800c5fc:	4682      	mov	sl, r0
 800c5fe:	460c      	mov	r4, r1
 800c600:	4690      	mov	r8, r2
 800c602:	4699      	mov	r9, r3
 800c604:	d837      	bhi.n	800c676 <__ssputs_r+0x82>
 800c606:	898a      	ldrh	r2, [r1, #12]
 800c608:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c60c:	d031      	beq.n	800c672 <__ssputs_r+0x7e>
 800c60e:	6825      	ldr	r5, [r4, #0]
 800c610:	6909      	ldr	r1, [r1, #16]
 800c612:	1a6f      	subs	r7, r5, r1
 800c614:	6965      	ldr	r5, [r4, #20]
 800c616:	2302      	movs	r3, #2
 800c618:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c61c:	fb95 f5f3 	sdiv	r5, r5, r3
 800c620:	f109 0301 	add.w	r3, r9, #1
 800c624:	443b      	add	r3, r7
 800c626:	429d      	cmp	r5, r3
 800c628:	bf38      	it	cc
 800c62a:	461d      	movcc	r5, r3
 800c62c:	0553      	lsls	r3, r2, #21
 800c62e:	d530      	bpl.n	800c692 <__ssputs_r+0x9e>
 800c630:	4629      	mov	r1, r5
 800c632:	f000 fb21 	bl	800cc78 <_malloc_r>
 800c636:	4606      	mov	r6, r0
 800c638:	b950      	cbnz	r0, 800c650 <__ssputs_r+0x5c>
 800c63a:	230c      	movs	r3, #12
 800c63c:	f8ca 3000 	str.w	r3, [sl]
 800c640:	89a3      	ldrh	r3, [r4, #12]
 800c642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c646:	81a3      	strh	r3, [r4, #12]
 800c648:	f04f 30ff 	mov.w	r0, #4294967295
 800c64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c650:	463a      	mov	r2, r7
 800c652:	6921      	ldr	r1, [r4, #16]
 800c654:	f7ff ff80 	bl	800c558 <memcpy>
 800c658:	89a3      	ldrh	r3, [r4, #12]
 800c65a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c65e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c662:	81a3      	strh	r3, [r4, #12]
 800c664:	6126      	str	r6, [r4, #16]
 800c666:	6165      	str	r5, [r4, #20]
 800c668:	443e      	add	r6, r7
 800c66a:	1bed      	subs	r5, r5, r7
 800c66c:	6026      	str	r6, [r4, #0]
 800c66e:	60a5      	str	r5, [r4, #8]
 800c670:	464e      	mov	r6, r9
 800c672:	454e      	cmp	r6, r9
 800c674:	d900      	bls.n	800c678 <__ssputs_r+0x84>
 800c676:	464e      	mov	r6, r9
 800c678:	4632      	mov	r2, r6
 800c67a:	4641      	mov	r1, r8
 800c67c:	6820      	ldr	r0, [r4, #0]
 800c67e:	f000 fa93 	bl	800cba8 <memmove>
 800c682:	68a3      	ldr	r3, [r4, #8]
 800c684:	1b9b      	subs	r3, r3, r6
 800c686:	60a3      	str	r3, [r4, #8]
 800c688:	6823      	ldr	r3, [r4, #0]
 800c68a:	441e      	add	r6, r3
 800c68c:	6026      	str	r6, [r4, #0]
 800c68e:	2000      	movs	r0, #0
 800c690:	e7dc      	b.n	800c64c <__ssputs_r+0x58>
 800c692:	462a      	mov	r2, r5
 800c694:	f000 fb4a 	bl	800cd2c <_realloc_r>
 800c698:	4606      	mov	r6, r0
 800c69a:	2800      	cmp	r0, #0
 800c69c:	d1e2      	bne.n	800c664 <__ssputs_r+0x70>
 800c69e:	6921      	ldr	r1, [r4, #16]
 800c6a0:	4650      	mov	r0, sl
 800c6a2:	f000 fa9b 	bl	800cbdc <_free_r>
 800c6a6:	e7c8      	b.n	800c63a <__ssputs_r+0x46>

0800c6a8 <_svfiprintf_r>:
 800c6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ac:	461d      	mov	r5, r3
 800c6ae:	898b      	ldrh	r3, [r1, #12]
 800c6b0:	061f      	lsls	r7, r3, #24
 800c6b2:	b09d      	sub	sp, #116	; 0x74
 800c6b4:	4680      	mov	r8, r0
 800c6b6:	460c      	mov	r4, r1
 800c6b8:	4616      	mov	r6, r2
 800c6ba:	d50f      	bpl.n	800c6dc <_svfiprintf_r+0x34>
 800c6bc:	690b      	ldr	r3, [r1, #16]
 800c6be:	b96b      	cbnz	r3, 800c6dc <_svfiprintf_r+0x34>
 800c6c0:	2140      	movs	r1, #64	; 0x40
 800c6c2:	f000 fad9 	bl	800cc78 <_malloc_r>
 800c6c6:	6020      	str	r0, [r4, #0]
 800c6c8:	6120      	str	r0, [r4, #16]
 800c6ca:	b928      	cbnz	r0, 800c6d8 <_svfiprintf_r+0x30>
 800c6cc:	230c      	movs	r3, #12
 800c6ce:	f8c8 3000 	str.w	r3, [r8]
 800c6d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d6:	e0c8      	b.n	800c86a <_svfiprintf_r+0x1c2>
 800c6d8:	2340      	movs	r3, #64	; 0x40
 800c6da:	6163      	str	r3, [r4, #20]
 800c6dc:	2300      	movs	r3, #0
 800c6de:	9309      	str	r3, [sp, #36]	; 0x24
 800c6e0:	2320      	movs	r3, #32
 800c6e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6e6:	2330      	movs	r3, #48	; 0x30
 800c6e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6ec:	9503      	str	r5, [sp, #12]
 800c6ee:	f04f 0b01 	mov.w	fp, #1
 800c6f2:	4637      	mov	r7, r6
 800c6f4:	463d      	mov	r5, r7
 800c6f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c6fa:	b10b      	cbz	r3, 800c700 <_svfiprintf_r+0x58>
 800c6fc:	2b25      	cmp	r3, #37	; 0x25
 800c6fe:	d13e      	bne.n	800c77e <_svfiprintf_r+0xd6>
 800c700:	ebb7 0a06 	subs.w	sl, r7, r6
 800c704:	d00b      	beq.n	800c71e <_svfiprintf_r+0x76>
 800c706:	4653      	mov	r3, sl
 800c708:	4632      	mov	r2, r6
 800c70a:	4621      	mov	r1, r4
 800c70c:	4640      	mov	r0, r8
 800c70e:	f7ff ff71 	bl	800c5f4 <__ssputs_r>
 800c712:	3001      	adds	r0, #1
 800c714:	f000 80a4 	beq.w	800c860 <_svfiprintf_r+0x1b8>
 800c718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c71a:	4453      	add	r3, sl
 800c71c:	9309      	str	r3, [sp, #36]	; 0x24
 800c71e:	783b      	ldrb	r3, [r7, #0]
 800c720:	2b00      	cmp	r3, #0
 800c722:	f000 809d 	beq.w	800c860 <_svfiprintf_r+0x1b8>
 800c726:	2300      	movs	r3, #0
 800c728:	f04f 32ff 	mov.w	r2, #4294967295
 800c72c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c730:	9304      	str	r3, [sp, #16]
 800c732:	9307      	str	r3, [sp, #28]
 800c734:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c738:	931a      	str	r3, [sp, #104]	; 0x68
 800c73a:	462f      	mov	r7, r5
 800c73c:	2205      	movs	r2, #5
 800c73e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c742:	4850      	ldr	r0, [pc, #320]	; (800c884 <_svfiprintf_r+0x1dc>)
 800c744:	f7f3 fdd4 	bl	80002f0 <memchr>
 800c748:	9b04      	ldr	r3, [sp, #16]
 800c74a:	b9d0      	cbnz	r0, 800c782 <_svfiprintf_r+0xda>
 800c74c:	06d9      	lsls	r1, r3, #27
 800c74e:	bf44      	itt	mi
 800c750:	2220      	movmi	r2, #32
 800c752:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c756:	071a      	lsls	r2, r3, #28
 800c758:	bf44      	itt	mi
 800c75a:	222b      	movmi	r2, #43	; 0x2b
 800c75c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c760:	782a      	ldrb	r2, [r5, #0]
 800c762:	2a2a      	cmp	r2, #42	; 0x2a
 800c764:	d015      	beq.n	800c792 <_svfiprintf_r+0xea>
 800c766:	9a07      	ldr	r2, [sp, #28]
 800c768:	462f      	mov	r7, r5
 800c76a:	2000      	movs	r0, #0
 800c76c:	250a      	movs	r5, #10
 800c76e:	4639      	mov	r1, r7
 800c770:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c774:	3b30      	subs	r3, #48	; 0x30
 800c776:	2b09      	cmp	r3, #9
 800c778:	d94d      	bls.n	800c816 <_svfiprintf_r+0x16e>
 800c77a:	b1b8      	cbz	r0, 800c7ac <_svfiprintf_r+0x104>
 800c77c:	e00f      	b.n	800c79e <_svfiprintf_r+0xf6>
 800c77e:	462f      	mov	r7, r5
 800c780:	e7b8      	b.n	800c6f4 <_svfiprintf_r+0x4c>
 800c782:	4a40      	ldr	r2, [pc, #256]	; (800c884 <_svfiprintf_r+0x1dc>)
 800c784:	1a80      	subs	r0, r0, r2
 800c786:	fa0b f000 	lsl.w	r0, fp, r0
 800c78a:	4318      	orrs	r0, r3
 800c78c:	9004      	str	r0, [sp, #16]
 800c78e:	463d      	mov	r5, r7
 800c790:	e7d3      	b.n	800c73a <_svfiprintf_r+0x92>
 800c792:	9a03      	ldr	r2, [sp, #12]
 800c794:	1d11      	adds	r1, r2, #4
 800c796:	6812      	ldr	r2, [r2, #0]
 800c798:	9103      	str	r1, [sp, #12]
 800c79a:	2a00      	cmp	r2, #0
 800c79c:	db01      	blt.n	800c7a2 <_svfiprintf_r+0xfa>
 800c79e:	9207      	str	r2, [sp, #28]
 800c7a0:	e004      	b.n	800c7ac <_svfiprintf_r+0x104>
 800c7a2:	4252      	negs	r2, r2
 800c7a4:	f043 0302 	orr.w	r3, r3, #2
 800c7a8:	9207      	str	r2, [sp, #28]
 800c7aa:	9304      	str	r3, [sp, #16]
 800c7ac:	783b      	ldrb	r3, [r7, #0]
 800c7ae:	2b2e      	cmp	r3, #46	; 0x2e
 800c7b0:	d10c      	bne.n	800c7cc <_svfiprintf_r+0x124>
 800c7b2:	787b      	ldrb	r3, [r7, #1]
 800c7b4:	2b2a      	cmp	r3, #42	; 0x2a
 800c7b6:	d133      	bne.n	800c820 <_svfiprintf_r+0x178>
 800c7b8:	9b03      	ldr	r3, [sp, #12]
 800c7ba:	1d1a      	adds	r2, r3, #4
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	9203      	str	r2, [sp, #12]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	bfb8      	it	lt
 800c7c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7c8:	3702      	adds	r7, #2
 800c7ca:	9305      	str	r3, [sp, #20]
 800c7cc:	4d2e      	ldr	r5, [pc, #184]	; (800c888 <_svfiprintf_r+0x1e0>)
 800c7ce:	7839      	ldrb	r1, [r7, #0]
 800c7d0:	2203      	movs	r2, #3
 800c7d2:	4628      	mov	r0, r5
 800c7d4:	f7f3 fd8c 	bl	80002f0 <memchr>
 800c7d8:	b138      	cbz	r0, 800c7ea <_svfiprintf_r+0x142>
 800c7da:	2340      	movs	r3, #64	; 0x40
 800c7dc:	1b40      	subs	r0, r0, r5
 800c7de:	fa03 f000 	lsl.w	r0, r3, r0
 800c7e2:	9b04      	ldr	r3, [sp, #16]
 800c7e4:	4303      	orrs	r3, r0
 800c7e6:	3701      	adds	r7, #1
 800c7e8:	9304      	str	r3, [sp, #16]
 800c7ea:	7839      	ldrb	r1, [r7, #0]
 800c7ec:	4827      	ldr	r0, [pc, #156]	; (800c88c <_svfiprintf_r+0x1e4>)
 800c7ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7f2:	2206      	movs	r2, #6
 800c7f4:	1c7e      	adds	r6, r7, #1
 800c7f6:	f7f3 fd7b 	bl	80002f0 <memchr>
 800c7fa:	2800      	cmp	r0, #0
 800c7fc:	d038      	beq.n	800c870 <_svfiprintf_r+0x1c8>
 800c7fe:	4b24      	ldr	r3, [pc, #144]	; (800c890 <_svfiprintf_r+0x1e8>)
 800c800:	bb13      	cbnz	r3, 800c848 <_svfiprintf_r+0x1a0>
 800c802:	9b03      	ldr	r3, [sp, #12]
 800c804:	3307      	adds	r3, #7
 800c806:	f023 0307 	bic.w	r3, r3, #7
 800c80a:	3308      	adds	r3, #8
 800c80c:	9303      	str	r3, [sp, #12]
 800c80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c810:	444b      	add	r3, r9
 800c812:	9309      	str	r3, [sp, #36]	; 0x24
 800c814:	e76d      	b.n	800c6f2 <_svfiprintf_r+0x4a>
 800c816:	fb05 3202 	mla	r2, r5, r2, r3
 800c81a:	2001      	movs	r0, #1
 800c81c:	460f      	mov	r7, r1
 800c81e:	e7a6      	b.n	800c76e <_svfiprintf_r+0xc6>
 800c820:	2300      	movs	r3, #0
 800c822:	3701      	adds	r7, #1
 800c824:	9305      	str	r3, [sp, #20]
 800c826:	4619      	mov	r1, r3
 800c828:	250a      	movs	r5, #10
 800c82a:	4638      	mov	r0, r7
 800c82c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c830:	3a30      	subs	r2, #48	; 0x30
 800c832:	2a09      	cmp	r2, #9
 800c834:	d903      	bls.n	800c83e <_svfiprintf_r+0x196>
 800c836:	2b00      	cmp	r3, #0
 800c838:	d0c8      	beq.n	800c7cc <_svfiprintf_r+0x124>
 800c83a:	9105      	str	r1, [sp, #20]
 800c83c:	e7c6      	b.n	800c7cc <_svfiprintf_r+0x124>
 800c83e:	fb05 2101 	mla	r1, r5, r1, r2
 800c842:	2301      	movs	r3, #1
 800c844:	4607      	mov	r7, r0
 800c846:	e7f0      	b.n	800c82a <_svfiprintf_r+0x182>
 800c848:	ab03      	add	r3, sp, #12
 800c84a:	9300      	str	r3, [sp, #0]
 800c84c:	4622      	mov	r2, r4
 800c84e:	4b11      	ldr	r3, [pc, #68]	; (800c894 <_svfiprintf_r+0x1ec>)
 800c850:	a904      	add	r1, sp, #16
 800c852:	4640      	mov	r0, r8
 800c854:	f3af 8000 	nop.w
 800c858:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c85c:	4681      	mov	r9, r0
 800c85e:	d1d6      	bne.n	800c80e <_svfiprintf_r+0x166>
 800c860:	89a3      	ldrh	r3, [r4, #12]
 800c862:	065b      	lsls	r3, r3, #25
 800c864:	f53f af35 	bmi.w	800c6d2 <_svfiprintf_r+0x2a>
 800c868:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c86a:	b01d      	add	sp, #116	; 0x74
 800c86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c870:	ab03      	add	r3, sp, #12
 800c872:	9300      	str	r3, [sp, #0]
 800c874:	4622      	mov	r2, r4
 800c876:	4b07      	ldr	r3, [pc, #28]	; (800c894 <_svfiprintf_r+0x1ec>)
 800c878:	a904      	add	r1, sp, #16
 800c87a:	4640      	mov	r0, r8
 800c87c:	f000 f882 	bl	800c984 <_printf_i>
 800c880:	e7ea      	b.n	800c858 <_svfiprintf_r+0x1b0>
 800c882:	bf00      	nop
 800c884:	0800d00c 	.word	0x0800d00c
 800c888:	0800d012 	.word	0x0800d012
 800c88c:	0800d016 	.word	0x0800d016
 800c890:	00000000 	.word	0x00000000
 800c894:	0800c5f5 	.word	0x0800c5f5

0800c898 <_printf_common>:
 800c898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c89c:	4691      	mov	r9, r2
 800c89e:	461f      	mov	r7, r3
 800c8a0:	688a      	ldr	r2, [r1, #8]
 800c8a2:	690b      	ldr	r3, [r1, #16]
 800c8a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	bfb8      	it	lt
 800c8ac:	4613      	movlt	r3, r2
 800c8ae:	f8c9 3000 	str.w	r3, [r9]
 800c8b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c8b6:	4606      	mov	r6, r0
 800c8b8:	460c      	mov	r4, r1
 800c8ba:	b112      	cbz	r2, 800c8c2 <_printf_common+0x2a>
 800c8bc:	3301      	adds	r3, #1
 800c8be:	f8c9 3000 	str.w	r3, [r9]
 800c8c2:	6823      	ldr	r3, [r4, #0]
 800c8c4:	0699      	lsls	r1, r3, #26
 800c8c6:	bf42      	ittt	mi
 800c8c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c8cc:	3302      	addmi	r3, #2
 800c8ce:	f8c9 3000 	strmi.w	r3, [r9]
 800c8d2:	6825      	ldr	r5, [r4, #0]
 800c8d4:	f015 0506 	ands.w	r5, r5, #6
 800c8d8:	d107      	bne.n	800c8ea <_printf_common+0x52>
 800c8da:	f104 0a19 	add.w	sl, r4, #25
 800c8de:	68e3      	ldr	r3, [r4, #12]
 800c8e0:	f8d9 2000 	ldr.w	r2, [r9]
 800c8e4:	1a9b      	subs	r3, r3, r2
 800c8e6:	42ab      	cmp	r3, r5
 800c8e8:	dc28      	bgt.n	800c93c <_printf_common+0xa4>
 800c8ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c8ee:	6822      	ldr	r2, [r4, #0]
 800c8f0:	3300      	adds	r3, #0
 800c8f2:	bf18      	it	ne
 800c8f4:	2301      	movne	r3, #1
 800c8f6:	0692      	lsls	r2, r2, #26
 800c8f8:	d42d      	bmi.n	800c956 <_printf_common+0xbe>
 800c8fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c8fe:	4639      	mov	r1, r7
 800c900:	4630      	mov	r0, r6
 800c902:	47c0      	blx	r8
 800c904:	3001      	adds	r0, #1
 800c906:	d020      	beq.n	800c94a <_printf_common+0xb2>
 800c908:	6823      	ldr	r3, [r4, #0]
 800c90a:	68e5      	ldr	r5, [r4, #12]
 800c90c:	f8d9 2000 	ldr.w	r2, [r9]
 800c910:	f003 0306 	and.w	r3, r3, #6
 800c914:	2b04      	cmp	r3, #4
 800c916:	bf08      	it	eq
 800c918:	1aad      	subeq	r5, r5, r2
 800c91a:	68a3      	ldr	r3, [r4, #8]
 800c91c:	6922      	ldr	r2, [r4, #16]
 800c91e:	bf0c      	ite	eq
 800c920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c924:	2500      	movne	r5, #0
 800c926:	4293      	cmp	r3, r2
 800c928:	bfc4      	itt	gt
 800c92a:	1a9b      	subgt	r3, r3, r2
 800c92c:	18ed      	addgt	r5, r5, r3
 800c92e:	f04f 0900 	mov.w	r9, #0
 800c932:	341a      	adds	r4, #26
 800c934:	454d      	cmp	r5, r9
 800c936:	d11a      	bne.n	800c96e <_printf_common+0xd6>
 800c938:	2000      	movs	r0, #0
 800c93a:	e008      	b.n	800c94e <_printf_common+0xb6>
 800c93c:	2301      	movs	r3, #1
 800c93e:	4652      	mov	r2, sl
 800c940:	4639      	mov	r1, r7
 800c942:	4630      	mov	r0, r6
 800c944:	47c0      	blx	r8
 800c946:	3001      	adds	r0, #1
 800c948:	d103      	bne.n	800c952 <_printf_common+0xba>
 800c94a:	f04f 30ff 	mov.w	r0, #4294967295
 800c94e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c952:	3501      	adds	r5, #1
 800c954:	e7c3      	b.n	800c8de <_printf_common+0x46>
 800c956:	18e1      	adds	r1, r4, r3
 800c958:	1c5a      	adds	r2, r3, #1
 800c95a:	2030      	movs	r0, #48	; 0x30
 800c95c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c960:	4422      	add	r2, r4
 800c962:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c966:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c96a:	3302      	adds	r3, #2
 800c96c:	e7c5      	b.n	800c8fa <_printf_common+0x62>
 800c96e:	2301      	movs	r3, #1
 800c970:	4622      	mov	r2, r4
 800c972:	4639      	mov	r1, r7
 800c974:	4630      	mov	r0, r6
 800c976:	47c0      	blx	r8
 800c978:	3001      	adds	r0, #1
 800c97a:	d0e6      	beq.n	800c94a <_printf_common+0xb2>
 800c97c:	f109 0901 	add.w	r9, r9, #1
 800c980:	e7d8      	b.n	800c934 <_printf_common+0x9c>
	...

0800c984 <_printf_i>:
 800c984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c988:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c98c:	460c      	mov	r4, r1
 800c98e:	7e09      	ldrb	r1, [r1, #24]
 800c990:	b085      	sub	sp, #20
 800c992:	296e      	cmp	r1, #110	; 0x6e
 800c994:	4617      	mov	r7, r2
 800c996:	4606      	mov	r6, r0
 800c998:	4698      	mov	r8, r3
 800c99a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c99c:	f000 80b3 	beq.w	800cb06 <_printf_i+0x182>
 800c9a0:	d822      	bhi.n	800c9e8 <_printf_i+0x64>
 800c9a2:	2963      	cmp	r1, #99	; 0x63
 800c9a4:	d036      	beq.n	800ca14 <_printf_i+0x90>
 800c9a6:	d80a      	bhi.n	800c9be <_printf_i+0x3a>
 800c9a8:	2900      	cmp	r1, #0
 800c9aa:	f000 80b9 	beq.w	800cb20 <_printf_i+0x19c>
 800c9ae:	2958      	cmp	r1, #88	; 0x58
 800c9b0:	f000 8083 	beq.w	800caba <_printf_i+0x136>
 800c9b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c9bc:	e032      	b.n	800ca24 <_printf_i+0xa0>
 800c9be:	2964      	cmp	r1, #100	; 0x64
 800c9c0:	d001      	beq.n	800c9c6 <_printf_i+0x42>
 800c9c2:	2969      	cmp	r1, #105	; 0x69
 800c9c4:	d1f6      	bne.n	800c9b4 <_printf_i+0x30>
 800c9c6:	6820      	ldr	r0, [r4, #0]
 800c9c8:	6813      	ldr	r3, [r2, #0]
 800c9ca:	0605      	lsls	r5, r0, #24
 800c9cc:	f103 0104 	add.w	r1, r3, #4
 800c9d0:	d52a      	bpl.n	800ca28 <_printf_i+0xa4>
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	6011      	str	r1, [r2, #0]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	da03      	bge.n	800c9e2 <_printf_i+0x5e>
 800c9da:	222d      	movs	r2, #45	; 0x2d
 800c9dc:	425b      	negs	r3, r3
 800c9de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c9e2:	486f      	ldr	r0, [pc, #444]	; (800cba0 <_printf_i+0x21c>)
 800c9e4:	220a      	movs	r2, #10
 800c9e6:	e039      	b.n	800ca5c <_printf_i+0xd8>
 800c9e8:	2973      	cmp	r1, #115	; 0x73
 800c9ea:	f000 809d 	beq.w	800cb28 <_printf_i+0x1a4>
 800c9ee:	d808      	bhi.n	800ca02 <_printf_i+0x7e>
 800c9f0:	296f      	cmp	r1, #111	; 0x6f
 800c9f2:	d020      	beq.n	800ca36 <_printf_i+0xb2>
 800c9f4:	2970      	cmp	r1, #112	; 0x70
 800c9f6:	d1dd      	bne.n	800c9b4 <_printf_i+0x30>
 800c9f8:	6823      	ldr	r3, [r4, #0]
 800c9fa:	f043 0320 	orr.w	r3, r3, #32
 800c9fe:	6023      	str	r3, [r4, #0]
 800ca00:	e003      	b.n	800ca0a <_printf_i+0x86>
 800ca02:	2975      	cmp	r1, #117	; 0x75
 800ca04:	d017      	beq.n	800ca36 <_printf_i+0xb2>
 800ca06:	2978      	cmp	r1, #120	; 0x78
 800ca08:	d1d4      	bne.n	800c9b4 <_printf_i+0x30>
 800ca0a:	2378      	movs	r3, #120	; 0x78
 800ca0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ca10:	4864      	ldr	r0, [pc, #400]	; (800cba4 <_printf_i+0x220>)
 800ca12:	e055      	b.n	800cac0 <_printf_i+0x13c>
 800ca14:	6813      	ldr	r3, [r2, #0]
 800ca16:	1d19      	adds	r1, r3, #4
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	6011      	str	r1, [r2, #0]
 800ca1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca24:	2301      	movs	r3, #1
 800ca26:	e08c      	b.n	800cb42 <_printf_i+0x1be>
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	6011      	str	r1, [r2, #0]
 800ca2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ca30:	bf18      	it	ne
 800ca32:	b21b      	sxthne	r3, r3
 800ca34:	e7cf      	b.n	800c9d6 <_printf_i+0x52>
 800ca36:	6813      	ldr	r3, [r2, #0]
 800ca38:	6825      	ldr	r5, [r4, #0]
 800ca3a:	1d18      	adds	r0, r3, #4
 800ca3c:	6010      	str	r0, [r2, #0]
 800ca3e:	0628      	lsls	r0, r5, #24
 800ca40:	d501      	bpl.n	800ca46 <_printf_i+0xc2>
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	e002      	b.n	800ca4c <_printf_i+0xc8>
 800ca46:	0668      	lsls	r0, r5, #25
 800ca48:	d5fb      	bpl.n	800ca42 <_printf_i+0xbe>
 800ca4a:	881b      	ldrh	r3, [r3, #0]
 800ca4c:	4854      	ldr	r0, [pc, #336]	; (800cba0 <_printf_i+0x21c>)
 800ca4e:	296f      	cmp	r1, #111	; 0x6f
 800ca50:	bf14      	ite	ne
 800ca52:	220a      	movne	r2, #10
 800ca54:	2208      	moveq	r2, #8
 800ca56:	2100      	movs	r1, #0
 800ca58:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca5c:	6865      	ldr	r5, [r4, #4]
 800ca5e:	60a5      	str	r5, [r4, #8]
 800ca60:	2d00      	cmp	r5, #0
 800ca62:	f2c0 8095 	blt.w	800cb90 <_printf_i+0x20c>
 800ca66:	6821      	ldr	r1, [r4, #0]
 800ca68:	f021 0104 	bic.w	r1, r1, #4
 800ca6c:	6021      	str	r1, [r4, #0]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d13d      	bne.n	800caee <_printf_i+0x16a>
 800ca72:	2d00      	cmp	r5, #0
 800ca74:	f040 808e 	bne.w	800cb94 <_printf_i+0x210>
 800ca78:	4665      	mov	r5, ip
 800ca7a:	2a08      	cmp	r2, #8
 800ca7c:	d10b      	bne.n	800ca96 <_printf_i+0x112>
 800ca7e:	6823      	ldr	r3, [r4, #0]
 800ca80:	07db      	lsls	r3, r3, #31
 800ca82:	d508      	bpl.n	800ca96 <_printf_i+0x112>
 800ca84:	6923      	ldr	r3, [r4, #16]
 800ca86:	6862      	ldr	r2, [r4, #4]
 800ca88:	429a      	cmp	r2, r3
 800ca8a:	bfde      	ittt	le
 800ca8c:	2330      	movle	r3, #48	; 0x30
 800ca8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca92:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ca96:	ebac 0305 	sub.w	r3, ip, r5
 800ca9a:	6123      	str	r3, [r4, #16]
 800ca9c:	f8cd 8000 	str.w	r8, [sp]
 800caa0:	463b      	mov	r3, r7
 800caa2:	aa03      	add	r2, sp, #12
 800caa4:	4621      	mov	r1, r4
 800caa6:	4630      	mov	r0, r6
 800caa8:	f7ff fef6 	bl	800c898 <_printf_common>
 800caac:	3001      	adds	r0, #1
 800caae:	d14d      	bne.n	800cb4c <_printf_i+0x1c8>
 800cab0:	f04f 30ff 	mov.w	r0, #4294967295
 800cab4:	b005      	add	sp, #20
 800cab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800caba:	4839      	ldr	r0, [pc, #228]	; (800cba0 <_printf_i+0x21c>)
 800cabc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800cac0:	6813      	ldr	r3, [r2, #0]
 800cac2:	6821      	ldr	r1, [r4, #0]
 800cac4:	1d1d      	adds	r5, r3, #4
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	6015      	str	r5, [r2, #0]
 800caca:	060a      	lsls	r2, r1, #24
 800cacc:	d50b      	bpl.n	800cae6 <_printf_i+0x162>
 800cace:	07ca      	lsls	r2, r1, #31
 800cad0:	bf44      	itt	mi
 800cad2:	f041 0120 	orrmi.w	r1, r1, #32
 800cad6:	6021      	strmi	r1, [r4, #0]
 800cad8:	b91b      	cbnz	r3, 800cae2 <_printf_i+0x15e>
 800cada:	6822      	ldr	r2, [r4, #0]
 800cadc:	f022 0220 	bic.w	r2, r2, #32
 800cae0:	6022      	str	r2, [r4, #0]
 800cae2:	2210      	movs	r2, #16
 800cae4:	e7b7      	b.n	800ca56 <_printf_i+0xd2>
 800cae6:	064d      	lsls	r5, r1, #25
 800cae8:	bf48      	it	mi
 800caea:	b29b      	uxthmi	r3, r3
 800caec:	e7ef      	b.n	800cace <_printf_i+0x14a>
 800caee:	4665      	mov	r5, ip
 800caf0:	fbb3 f1f2 	udiv	r1, r3, r2
 800caf4:	fb02 3311 	mls	r3, r2, r1, r3
 800caf8:	5cc3      	ldrb	r3, [r0, r3]
 800cafa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cafe:	460b      	mov	r3, r1
 800cb00:	2900      	cmp	r1, #0
 800cb02:	d1f5      	bne.n	800caf0 <_printf_i+0x16c>
 800cb04:	e7b9      	b.n	800ca7a <_printf_i+0xf6>
 800cb06:	6813      	ldr	r3, [r2, #0]
 800cb08:	6825      	ldr	r5, [r4, #0]
 800cb0a:	6961      	ldr	r1, [r4, #20]
 800cb0c:	1d18      	adds	r0, r3, #4
 800cb0e:	6010      	str	r0, [r2, #0]
 800cb10:	0628      	lsls	r0, r5, #24
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	d501      	bpl.n	800cb1a <_printf_i+0x196>
 800cb16:	6019      	str	r1, [r3, #0]
 800cb18:	e002      	b.n	800cb20 <_printf_i+0x19c>
 800cb1a:	066a      	lsls	r2, r5, #25
 800cb1c:	d5fb      	bpl.n	800cb16 <_printf_i+0x192>
 800cb1e:	8019      	strh	r1, [r3, #0]
 800cb20:	2300      	movs	r3, #0
 800cb22:	6123      	str	r3, [r4, #16]
 800cb24:	4665      	mov	r5, ip
 800cb26:	e7b9      	b.n	800ca9c <_printf_i+0x118>
 800cb28:	6813      	ldr	r3, [r2, #0]
 800cb2a:	1d19      	adds	r1, r3, #4
 800cb2c:	6011      	str	r1, [r2, #0]
 800cb2e:	681d      	ldr	r5, [r3, #0]
 800cb30:	6862      	ldr	r2, [r4, #4]
 800cb32:	2100      	movs	r1, #0
 800cb34:	4628      	mov	r0, r5
 800cb36:	f7f3 fbdb 	bl	80002f0 <memchr>
 800cb3a:	b108      	cbz	r0, 800cb40 <_printf_i+0x1bc>
 800cb3c:	1b40      	subs	r0, r0, r5
 800cb3e:	6060      	str	r0, [r4, #4]
 800cb40:	6863      	ldr	r3, [r4, #4]
 800cb42:	6123      	str	r3, [r4, #16]
 800cb44:	2300      	movs	r3, #0
 800cb46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb4a:	e7a7      	b.n	800ca9c <_printf_i+0x118>
 800cb4c:	6923      	ldr	r3, [r4, #16]
 800cb4e:	462a      	mov	r2, r5
 800cb50:	4639      	mov	r1, r7
 800cb52:	4630      	mov	r0, r6
 800cb54:	47c0      	blx	r8
 800cb56:	3001      	adds	r0, #1
 800cb58:	d0aa      	beq.n	800cab0 <_printf_i+0x12c>
 800cb5a:	6823      	ldr	r3, [r4, #0]
 800cb5c:	079b      	lsls	r3, r3, #30
 800cb5e:	d413      	bmi.n	800cb88 <_printf_i+0x204>
 800cb60:	68e0      	ldr	r0, [r4, #12]
 800cb62:	9b03      	ldr	r3, [sp, #12]
 800cb64:	4298      	cmp	r0, r3
 800cb66:	bfb8      	it	lt
 800cb68:	4618      	movlt	r0, r3
 800cb6a:	e7a3      	b.n	800cab4 <_printf_i+0x130>
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	464a      	mov	r2, r9
 800cb70:	4639      	mov	r1, r7
 800cb72:	4630      	mov	r0, r6
 800cb74:	47c0      	blx	r8
 800cb76:	3001      	adds	r0, #1
 800cb78:	d09a      	beq.n	800cab0 <_printf_i+0x12c>
 800cb7a:	3501      	adds	r5, #1
 800cb7c:	68e3      	ldr	r3, [r4, #12]
 800cb7e:	9a03      	ldr	r2, [sp, #12]
 800cb80:	1a9b      	subs	r3, r3, r2
 800cb82:	42ab      	cmp	r3, r5
 800cb84:	dcf2      	bgt.n	800cb6c <_printf_i+0x1e8>
 800cb86:	e7eb      	b.n	800cb60 <_printf_i+0x1dc>
 800cb88:	2500      	movs	r5, #0
 800cb8a:	f104 0919 	add.w	r9, r4, #25
 800cb8e:	e7f5      	b.n	800cb7c <_printf_i+0x1f8>
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d1ac      	bne.n	800caee <_printf_i+0x16a>
 800cb94:	7803      	ldrb	r3, [r0, #0]
 800cb96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb9e:	e76c      	b.n	800ca7a <_printf_i+0xf6>
 800cba0:	0800d01d 	.word	0x0800d01d
 800cba4:	0800d02e 	.word	0x0800d02e

0800cba8 <memmove>:
 800cba8:	4288      	cmp	r0, r1
 800cbaa:	b510      	push	{r4, lr}
 800cbac:	eb01 0302 	add.w	r3, r1, r2
 800cbb0:	d807      	bhi.n	800cbc2 <memmove+0x1a>
 800cbb2:	1e42      	subs	r2, r0, #1
 800cbb4:	4299      	cmp	r1, r3
 800cbb6:	d00a      	beq.n	800cbce <memmove+0x26>
 800cbb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbbc:	f802 4f01 	strb.w	r4, [r2, #1]!
 800cbc0:	e7f8      	b.n	800cbb4 <memmove+0xc>
 800cbc2:	4283      	cmp	r3, r0
 800cbc4:	d9f5      	bls.n	800cbb2 <memmove+0xa>
 800cbc6:	1881      	adds	r1, r0, r2
 800cbc8:	1ad2      	subs	r2, r2, r3
 800cbca:	42d3      	cmn	r3, r2
 800cbcc:	d100      	bne.n	800cbd0 <memmove+0x28>
 800cbce:	bd10      	pop	{r4, pc}
 800cbd0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cbd4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800cbd8:	e7f7      	b.n	800cbca <memmove+0x22>
	...

0800cbdc <_free_r>:
 800cbdc:	b538      	push	{r3, r4, r5, lr}
 800cbde:	4605      	mov	r5, r0
 800cbe0:	2900      	cmp	r1, #0
 800cbe2:	d045      	beq.n	800cc70 <_free_r+0x94>
 800cbe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbe8:	1f0c      	subs	r4, r1, #4
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	bfb8      	it	lt
 800cbee:	18e4      	addlt	r4, r4, r3
 800cbf0:	f000 f8d2 	bl	800cd98 <__malloc_lock>
 800cbf4:	4a1f      	ldr	r2, [pc, #124]	; (800cc74 <_free_r+0x98>)
 800cbf6:	6813      	ldr	r3, [r2, #0]
 800cbf8:	4610      	mov	r0, r2
 800cbfa:	b933      	cbnz	r3, 800cc0a <_free_r+0x2e>
 800cbfc:	6063      	str	r3, [r4, #4]
 800cbfe:	6014      	str	r4, [r2, #0]
 800cc00:	4628      	mov	r0, r5
 800cc02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc06:	f000 b8c8 	b.w	800cd9a <__malloc_unlock>
 800cc0a:	42a3      	cmp	r3, r4
 800cc0c:	d90c      	bls.n	800cc28 <_free_r+0x4c>
 800cc0e:	6821      	ldr	r1, [r4, #0]
 800cc10:	1862      	adds	r2, r4, r1
 800cc12:	4293      	cmp	r3, r2
 800cc14:	bf04      	itt	eq
 800cc16:	681a      	ldreq	r2, [r3, #0]
 800cc18:	685b      	ldreq	r3, [r3, #4]
 800cc1a:	6063      	str	r3, [r4, #4]
 800cc1c:	bf04      	itt	eq
 800cc1e:	1852      	addeq	r2, r2, r1
 800cc20:	6022      	streq	r2, [r4, #0]
 800cc22:	6004      	str	r4, [r0, #0]
 800cc24:	e7ec      	b.n	800cc00 <_free_r+0x24>
 800cc26:	4613      	mov	r3, r2
 800cc28:	685a      	ldr	r2, [r3, #4]
 800cc2a:	b10a      	cbz	r2, 800cc30 <_free_r+0x54>
 800cc2c:	42a2      	cmp	r2, r4
 800cc2e:	d9fa      	bls.n	800cc26 <_free_r+0x4a>
 800cc30:	6819      	ldr	r1, [r3, #0]
 800cc32:	1858      	adds	r0, r3, r1
 800cc34:	42a0      	cmp	r0, r4
 800cc36:	d10b      	bne.n	800cc50 <_free_r+0x74>
 800cc38:	6820      	ldr	r0, [r4, #0]
 800cc3a:	4401      	add	r1, r0
 800cc3c:	1858      	adds	r0, r3, r1
 800cc3e:	4282      	cmp	r2, r0
 800cc40:	6019      	str	r1, [r3, #0]
 800cc42:	d1dd      	bne.n	800cc00 <_free_r+0x24>
 800cc44:	6810      	ldr	r0, [r2, #0]
 800cc46:	6852      	ldr	r2, [r2, #4]
 800cc48:	605a      	str	r2, [r3, #4]
 800cc4a:	4401      	add	r1, r0
 800cc4c:	6019      	str	r1, [r3, #0]
 800cc4e:	e7d7      	b.n	800cc00 <_free_r+0x24>
 800cc50:	d902      	bls.n	800cc58 <_free_r+0x7c>
 800cc52:	230c      	movs	r3, #12
 800cc54:	602b      	str	r3, [r5, #0]
 800cc56:	e7d3      	b.n	800cc00 <_free_r+0x24>
 800cc58:	6820      	ldr	r0, [r4, #0]
 800cc5a:	1821      	adds	r1, r4, r0
 800cc5c:	428a      	cmp	r2, r1
 800cc5e:	bf04      	itt	eq
 800cc60:	6811      	ldreq	r1, [r2, #0]
 800cc62:	6852      	ldreq	r2, [r2, #4]
 800cc64:	6062      	str	r2, [r4, #4]
 800cc66:	bf04      	itt	eq
 800cc68:	1809      	addeq	r1, r1, r0
 800cc6a:	6021      	streq	r1, [r4, #0]
 800cc6c:	605c      	str	r4, [r3, #4]
 800cc6e:	e7c7      	b.n	800cc00 <_free_r+0x24>
 800cc70:	bd38      	pop	{r3, r4, r5, pc}
 800cc72:	bf00      	nop
 800cc74:	24000aa0 	.word	0x24000aa0

0800cc78 <_malloc_r>:
 800cc78:	b570      	push	{r4, r5, r6, lr}
 800cc7a:	1ccd      	adds	r5, r1, #3
 800cc7c:	f025 0503 	bic.w	r5, r5, #3
 800cc80:	3508      	adds	r5, #8
 800cc82:	2d0c      	cmp	r5, #12
 800cc84:	bf38      	it	cc
 800cc86:	250c      	movcc	r5, #12
 800cc88:	2d00      	cmp	r5, #0
 800cc8a:	4606      	mov	r6, r0
 800cc8c:	db01      	blt.n	800cc92 <_malloc_r+0x1a>
 800cc8e:	42a9      	cmp	r1, r5
 800cc90:	d903      	bls.n	800cc9a <_malloc_r+0x22>
 800cc92:	230c      	movs	r3, #12
 800cc94:	6033      	str	r3, [r6, #0]
 800cc96:	2000      	movs	r0, #0
 800cc98:	bd70      	pop	{r4, r5, r6, pc}
 800cc9a:	f000 f87d 	bl	800cd98 <__malloc_lock>
 800cc9e:	4a21      	ldr	r2, [pc, #132]	; (800cd24 <_malloc_r+0xac>)
 800cca0:	6814      	ldr	r4, [r2, #0]
 800cca2:	4621      	mov	r1, r4
 800cca4:	b991      	cbnz	r1, 800cccc <_malloc_r+0x54>
 800cca6:	4c20      	ldr	r4, [pc, #128]	; (800cd28 <_malloc_r+0xb0>)
 800cca8:	6823      	ldr	r3, [r4, #0]
 800ccaa:	b91b      	cbnz	r3, 800ccb4 <_malloc_r+0x3c>
 800ccac:	4630      	mov	r0, r6
 800ccae:	f000 f863 	bl	800cd78 <_sbrk_r>
 800ccb2:	6020      	str	r0, [r4, #0]
 800ccb4:	4629      	mov	r1, r5
 800ccb6:	4630      	mov	r0, r6
 800ccb8:	f000 f85e 	bl	800cd78 <_sbrk_r>
 800ccbc:	1c43      	adds	r3, r0, #1
 800ccbe:	d124      	bne.n	800cd0a <_malloc_r+0x92>
 800ccc0:	230c      	movs	r3, #12
 800ccc2:	6033      	str	r3, [r6, #0]
 800ccc4:	4630      	mov	r0, r6
 800ccc6:	f000 f868 	bl	800cd9a <__malloc_unlock>
 800ccca:	e7e4      	b.n	800cc96 <_malloc_r+0x1e>
 800cccc:	680b      	ldr	r3, [r1, #0]
 800ccce:	1b5b      	subs	r3, r3, r5
 800ccd0:	d418      	bmi.n	800cd04 <_malloc_r+0x8c>
 800ccd2:	2b0b      	cmp	r3, #11
 800ccd4:	d90f      	bls.n	800ccf6 <_malloc_r+0x7e>
 800ccd6:	600b      	str	r3, [r1, #0]
 800ccd8:	50cd      	str	r5, [r1, r3]
 800ccda:	18cc      	adds	r4, r1, r3
 800ccdc:	4630      	mov	r0, r6
 800ccde:	f000 f85c 	bl	800cd9a <__malloc_unlock>
 800cce2:	f104 000b 	add.w	r0, r4, #11
 800cce6:	1d23      	adds	r3, r4, #4
 800cce8:	f020 0007 	bic.w	r0, r0, #7
 800ccec:	1ac3      	subs	r3, r0, r3
 800ccee:	d0d3      	beq.n	800cc98 <_malloc_r+0x20>
 800ccf0:	425a      	negs	r2, r3
 800ccf2:	50e2      	str	r2, [r4, r3]
 800ccf4:	e7d0      	b.n	800cc98 <_malloc_r+0x20>
 800ccf6:	428c      	cmp	r4, r1
 800ccf8:	684b      	ldr	r3, [r1, #4]
 800ccfa:	bf16      	itet	ne
 800ccfc:	6063      	strne	r3, [r4, #4]
 800ccfe:	6013      	streq	r3, [r2, #0]
 800cd00:	460c      	movne	r4, r1
 800cd02:	e7eb      	b.n	800ccdc <_malloc_r+0x64>
 800cd04:	460c      	mov	r4, r1
 800cd06:	6849      	ldr	r1, [r1, #4]
 800cd08:	e7cc      	b.n	800cca4 <_malloc_r+0x2c>
 800cd0a:	1cc4      	adds	r4, r0, #3
 800cd0c:	f024 0403 	bic.w	r4, r4, #3
 800cd10:	42a0      	cmp	r0, r4
 800cd12:	d005      	beq.n	800cd20 <_malloc_r+0xa8>
 800cd14:	1a21      	subs	r1, r4, r0
 800cd16:	4630      	mov	r0, r6
 800cd18:	f000 f82e 	bl	800cd78 <_sbrk_r>
 800cd1c:	3001      	adds	r0, #1
 800cd1e:	d0cf      	beq.n	800ccc0 <_malloc_r+0x48>
 800cd20:	6025      	str	r5, [r4, #0]
 800cd22:	e7db      	b.n	800ccdc <_malloc_r+0x64>
 800cd24:	24000aa0 	.word	0x24000aa0
 800cd28:	24000aa4 	.word	0x24000aa4

0800cd2c <_realloc_r>:
 800cd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd2e:	4607      	mov	r7, r0
 800cd30:	4614      	mov	r4, r2
 800cd32:	460e      	mov	r6, r1
 800cd34:	b921      	cbnz	r1, 800cd40 <_realloc_r+0x14>
 800cd36:	4611      	mov	r1, r2
 800cd38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cd3c:	f7ff bf9c 	b.w	800cc78 <_malloc_r>
 800cd40:	b922      	cbnz	r2, 800cd4c <_realloc_r+0x20>
 800cd42:	f7ff ff4b 	bl	800cbdc <_free_r>
 800cd46:	4625      	mov	r5, r4
 800cd48:	4628      	mov	r0, r5
 800cd4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd4c:	f000 f826 	bl	800cd9c <_malloc_usable_size_r>
 800cd50:	42a0      	cmp	r0, r4
 800cd52:	d20f      	bcs.n	800cd74 <_realloc_r+0x48>
 800cd54:	4621      	mov	r1, r4
 800cd56:	4638      	mov	r0, r7
 800cd58:	f7ff ff8e 	bl	800cc78 <_malloc_r>
 800cd5c:	4605      	mov	r5, r0
 800cd5e:	2800      	cmp	r0, #0
 800cd60:	d0f2      	beq.n	800cd48 <_realloc_r+0x1c>
 800cd62:	4631      	mov	r1, r6
 800cd64:	4622      	mov	r2, r4
 800cd66:	f7ff fbf7 	bl	800c558 <memcpy>
 800cd6a:	4631      	mov	r1, r6
 800cd6c:	4638      	mov	r0, r7
 800cd6e:	f7ff ff35 	bl	800cbdc <_free_r>
 800cd72:	e7e9      	b.n	800cd48 <_realloc_r+0x1c>
 800cd74:	4635      	mov	r5, r6
 800cd76:	e7e7      	b.n	800cd48 <_realloc_r+0x1c>

0800cd78 <_sbrk_r>:
 800cd78:	b538      	push	{r3, r4, r5, lr}
 800cd7a:	4c06      	ldr	r4, [pc, #24]	; (800cd94 <_sbrk_r+0x1c>)
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	4605      	mov	r5, r0
 800cd80:	4608      	mov	r0, r1
 800cd82:	6023      	str	r3, [r4, #0]
 800cd84:	f7f4 fb0e 	bl	80013a4 <_sbrk>
 800cd88:	1c43      	adds	r3, r0, #1
 800cd8a:	d102      	bne.n	800cd92 <_sbrk_r+0x1a>
 800cd8c:	6823      	ldr	r3, [r4, #0]
 800cd8e:	b103      	cbz	r3, 800cd92 <_sbrk_r+0x1a>
 800cd90:	602b      	str	r3, [r5, #0]
 800cd92:	bd38      	pop	{r3, r4, r5, pc}
 800cd94:	24000f14 	.word	0x24000f14

0800cd98 <__malloc_lock>:
 800cd98:	4770      	bx	lr

0800cd9a <__malloc_unlock>:
 800cd9a:	4770      	bx	lr

0800cd9c <_malloc_usable_size_r>:
 800cd9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cda0:	1f18      	subs	r0, r3, #4
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	bfbc      	itt	lt
 800cda6:	580b      	ldrlt	r3, [r1, r0]
 800cda8:	18c0      	addlt	r0, r0, r3
 800cdaa:	4770      	bx	lr

0800cdac <_init>:
 800cdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdae:	bf00      	nop
 800cdb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdb2:	bc08      	pop	{r3}
 800cdb4:	469e      	mov	lr, r3
 800cdb6:	4770      	bx	lr

0800cdb8 <_fini>:
 800cdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdba:	bf00      	nop
 800cdbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdbe:	bc08      	pop	{r3}
 800cdc0:	469e      	mov	lr, r3
 800cdc2:	4770      	bx	lr
