
SD_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1d8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  0800c478  0800c478  0001c478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6d4  0800c6d4  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800c6d4  0800c6d4  0001c6d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6dc  0800c6dc  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6dc  0800c6dc  0001c6dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6e0  0800c6e0  0001c6e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  24000000  0800c6e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fc8  24000098  0800c77c  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001060  0800c77c  00021060  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000213f1  00000000  00000000  000200c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003798  00000000  00000000  000414b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001088  00000000  00000000  00044c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f30  00000000  00000000  00045cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003afe7  00000000  00000000  00046c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011806  00000000  00000000  00081bef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0015d312  00000000  00000000  000933f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f0707  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004724  00000000  00000000  001f0784  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000098 	.word	0x24000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c460 	.word	0x0800c460

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400009c 	.word	0x2400009c
 80002dc:	0800c460 	.word	0x0800c460

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <_Z8myprintfPKcz>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8000690:	b40f      	push	{r0, r1, r2, r3}
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	693a      	ldr	r2, [r7, #16]
 80006a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a6:	480b      	ldr	r0, [pc, #44]	; (80006d4 <_Z8myprintfPKcz+0x44>)
 80006a8:	f00b fae6 	bl	800bc78 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80006ac:	4809      	ldr	r0, [pc, #36]	; (80006d4 <_Z8myprintfPKcz+0x44>)
 80006ae:	f7ff fe17 	bl	80002e0 <strlen>
 80006b2:	4603      	mov	r3, r0
 80006b4:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, len, -1);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	4905      	ldr	r1, [pc, #20]	; (80006d4 <_Z8myprintfPKcz+0x44>)
 80006c0:	4805      	ldr	r0, [pc, #20]	; (80006d8 <_Z8myprintfPKcz+0x48>)
 80006c2:	f007 f862 	bl	800778a <HAL_UART_Transmit>

}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006d0:	b004      	add	sp, #16
 80006d2:	4770      	bx	lr
 80006d4:	240008a4 	.word	0x240008a4
 80006d8:	240001b4 	.word	0x240001b4

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b08f      	sub	sp, #60	; 0x3c
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e2:	f000 fde7 	bl	80012b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e6:	f000 f8d5 	bl	8000894 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ea:	f000 fa7f 	bl	8000bec <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80006ee:	f000 fa5d 	bl	8000bac <_ZL11MX_DMA_Initv>
  MX_USART3_UART_Init();
 80006f2:	f000 f9fb 	bl	8000aec <_ZL19MX_USART3_UART_Initv>
  MX_SPI3_Init();
 80006f6:	f000 f99d 	bl	8000a34 <_ZL12MX_SPI3_Initv>
  MX_FATFS_Init();
 80006fa:	f008 f915 	bl	8008928 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 80006fe:	4840      	ldr	r0, [pc, #256]	; (8000800 <main+0x124>)
 8000700:	f7ff ffc6 	bl	8000690 <_Z8myprintfPKcz>

  HAL_Delay(1000); //a short delay is important to let the SD card settle
 8000704:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000708:	f000 fe66 	bl	80013d8 <HAL_Delay>
//  FATFS FatFs; 	//Fatfs handle
//  FIL fil; 		//File handle
//  FRESULT fres; //Result after operations

  //Open the file system
  fres = f_mount(&FatFs, "", 1); //1=mount now
 800070c:	2201      	movs	r2, #1
 800070e:	493d      	ldr	r1, [pc, #244]	; (8000804 <main+0x128>)
 8000710:	483d      	ldr	r0, [pc, #244]	; (8000808 <main+0x12c>)
 8000712:	f00a fd15 	bl	800b140 <f_mount>
 8000716:	4603      	mov	r3, r0
 8000718:	461a      	mov	r2, r3
 800071a:	4b3c      	ldr	r3, [pc, #240]	; (800080c <main+0x130>)
 800071c:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 800071e:	4b3b      	ldr	r3, [pc, #236]	; (800080c <main+0x130>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d006      	beq.n	8000734 <main+0x58>
    myprintf("f_mount error (%i)\r\n", fres);
 8000726:	4b39      	ldr	r3, [pc, #228]	; (800080c <main+0x130>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	4619      	mov	r1, r3
 800072c:	4838      	ldr	r0, [pc, #224]	; (8000810 <main+0x134>)
 800072e:	f7ff ffaf 	bl	8000690 <_Z8myprintfPKcz>
  while(1);
 8000732:	e7fe      	b.n	8000732 <main+0x56>
  }

  //Now let's try and write a file "write.txt"
  char filename[50] = "newwrite.bin";
 8000734:	4b37      	ldr	r3, [pc, #220]	; (8000814 <main+0x138>)
 8000736:	463c      	mov	r4, r7
 8000738:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800073a:	c407      	stmia	r4!, {r0, r1, r2}
 800073c:	7023      	strb	r3, [r4, #0]
 800073e:	f107 030d 	add.w	r3, r7, #13
 8000742:	2225      	movs	r2, #37	; 0x25
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f00b fa62 	bl	800bc10 <memset>
//  fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
  fres = f_open(&fil, filename, FA_WRITE | FA_CREATE_ALWAYS);
 800074c:	463b      	mov	r3, r7
 800074e:	220a      	movs	r2, #10
 8000750:	4619      	mov	r1, r3
 8000752:	4831      	ldr	r0, [pc, #196]	; (8000818 <main+0x13c>)
 8000754:	f00a fd3a 	bl	800b1cc <f_open>
 8000758:	4603      	mov	r3, r0
 800075a:	461a      	mov	r2, r3
 800075c:	4b2b      	ldr	r3, [pc, #172]	; (800080c <main+0x130>)
 800075e:	701a      	strb	r2, [r3, #0]
  if(fres == FR_OK) {
 8000760:	4b2a      	ldr	r3, [pc, #168]	; (800080c <main+0x130>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d103      	bne.n	8000770 <main+0x94>
    myprintf("file opened\r\n");
 8000768:	482c      	ldr	r0, [pc, #176]	; (800081c <main+0x140>)
 800076a:	f7ff ff91 	bl	8000690 <_Z8myprintfPKcz>
 800076e:	e005      	b.n	800077c <main+0xa0>
  }
  else {
    myprintf("f_open error (%i)\r\n", fres);
 8000770:	4b26      	ldr	r3, [pc, #152]	; (800080c <main+0x130>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	4619      	mov	r1, r3
 8000776:	482a      	ldr	r0, [pc, #168]	; (8000820 <main+0x144>)
 8000778:	f7ff ff8a 	bl	8000690 <_Z8myprintfPKcz>
  }

  //Copy in a string

  UINT bytesWrote;
  readBuf[0] = 'a';
 800077c:	4b29      	ldr	r3, [pc, #164]	; (8000824 <main+0x148>)
 800077e:	2261      	movs	r2, #97	; 0x61
 8000780:	701a      	strb	r2, [r3, #0]
  for (int i(0); i < 511; i++) {
 8000782:	2300      	movs	r3, #0
 8000784:	637b      	str	r3, [r7, #52]	; 0x34
 8000786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000788:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800078c:	dc11      	bgt.n	80007b2 <main+0xd6>
	  char prev = readBuf[i];
 800078e:	4a25      	ldr	r2, [pc, #148]	; (8000824 <main+0x148>)
 8000790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000792:	4413      	add	r3, r2
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	  readBuf[i+1] = prev + 1;
 800079a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800079c:	3301      	adds	r3, #1
 800079e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80007a2:	3201      	adds	r2, #1
 80007a4:	b2d1      	uxtb	r1, r2
 80007a6:	4a1f      	ldr	r2, [pc, #124]	; (8000824 <main+0x148>)
 80007a8:	54d1      	strb	r1, [r2, r3]
  for (int i(0); i < 511; i++) {
 80007aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ac:	3301      	adds	r3, #1
 80007ae:	637b      	str	r3, [r7, #52]	; 0x34
 80007b0:	e7e9      	b.n	8000786 <main+0xaa>
  }
  block.data[0].imuData[0] = 124;
 80007b2:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <main+0x14c>)
 80007b4:	227c      	movs	r2, #124	; 0x7c
 80007b6:	805a      	strh	r2, [r3, #2]

  fres = f_write_dma_start(&fil, &block, 512);
 80007b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007bc:	491a      	ldr	r1, [pc, #104]	; (8000828 <main+0x14c>)
 80007be:	4816      	ldr	r0, [pc, #88]	; (8000818 <main+0x13c>)
 80007c0:	f00a fec2 	bl	800b548 <f_write_dma_start>
 80007c4:	4603      	mov	r3, r0
 80007c6:	461a      	mov	r2, r3
 80007c8:	4b10      	ldr	r3, [pc, #64]	; (800080c <main+0x130>)
 80007ca:	701a      	strb	r2, [r3, #0]
//  	  else {
//  	  	myprintf("f_write error (%i)\r\n");
//  	  }
//  fres = f_write_dma(&fil, readBuf, 512, &bytesWrote);

  if(fres == FR_OK) {
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <main+0x130>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d103      	bne.n	80007dc <main+0x100>
//  	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
  	myprintf("Commenced DMA transfer\r\n");
 80007d4:	4815      	ldr	r0, [pc, #84]	; (800082c <main+0x150>)
 80007d6:	f7ff ff5b 	bl	8000690 <_Z8myprintfPKcz>
 80007da:	e002      	b.n	80007e2 <main+0x106>
  }
  else {
  	myprintf("DMA start error\r\n");
 80007dc:	4814      	ldr	r0, [pc, #80]	; (8000830 <main+0x154>)
 80007de:	f7ff ff57 	bl	8000690 <_Z8myprintfPKcz>
  }

  HAL_Delay(100);
 80007e2:	2064      	movs	r0, #100	; 0x64
 80007e4:	f000 fdf8 	bl	80013d8 <HAL_Delay>

  f_close(&fil);
 80007e8:	480b      	ldr	r0, [pc, #44]	; (8000818 <main+0x13c>)
 80007ea:	f00b f960 	bl	800baae <f_close>

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	4904      	ldr	r1, [pc, #16]	; (8000804 <main+0x128>)
 80007f2:	2000      	movs	r0, #0
 80007f4:	f00a fca4 	bl	800b140 <f_mount>

  myprintf("done\r\n");
 80007f8:	480e      	ldr	r0, [pc, #56]	; (8000834 <main+0x158>)
 80007fa:	f7ff ff49 	bl	8000690 <_Z8myprintfPKcz>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <main+0x122>
 8000800:	0800c478 	.word	0x0800c478
 8000804:	0800c498 	.word	0x0800c498
 8000808:	24000240 	.word	0x24000240
 800080c:	240006a0 	.word	0x240006a0
 8000810:	0800c49c 	.word	0x0800c49c
 8000814:	0800c510 	.word	0x0800c510
 8000818:	24000470 	.word	0x24000470
 800081c:	0800c4b4 	.word	0x0800c4b4
 8000820:	0800c4c4 	.word	0x0800c4c4
 8000824:	240006a4 	.word	0x240006a4
 8000828:	240009a4 	.word	0x240009a4
 800082c:	0800c4d8 	.word	0x0800c4d8
 8000830:	0800c4f4 	.word	0x0800c4f4
 8000834:	0800c508 	.word	0x0800c508

08000838 <HAL_SPI_TxCpltCallback>:
  }
  /* USER CODE END 3 */
}


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef* hspi) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	UINT bytesWrote;
	fres = f_write_dma_cplt(&fil, &block, 512, &bytesWrote);
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000848:	490c      	ldr	r1, [pc, #48]	; (800087c <HAL_SPI_TxCpltCallback+0x44>)
 800084a:	480d      	ldr	r0, [pc, #52]	; (8000880 <HAL_SPI_TxCpltCallback+0x48>)
 800084c:	f00a ffc6 	bl	800b7dc <f_write_dma_cplt>
 8000850:	4603      	mov	r3, r0
 8000852:	461a      	mov	r2, r3
 8000854:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <HAL_SPI_TxCpltCallback+0x4c>)
 8000856:	701a      	strb	r2, [r3, #0]
//	fres = f_write_dma_cplt(&fil, &block, 512, &bytesWrote);
	myprintf("dma transfer complete \r\n");
 8000858:	480b      	ldr	r0, [pc, #44]	; (8000888 <HAL_SPI_TxCpltCallback+0x50>)
 800085a:	f7ff ff19 	bl	8000690 <_Z8myprintfPKcz>

	if(fres == FR_OK) {
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <HAL_SPI_TxCpltCallback+0x4c>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d103      	bne.n	800086e <HAL_SPI_TxCpltCallback+0x36>
	  	myprintf("Wrote 512 bytes to 'write.txt'!\r\n");
 8000866:	4809      	ldr	r0, [pc, #36]	; (800088c <HAL_SPI_TxCpltCallback+0x54>)
 8000868:	f7ff ff12 	bl	8000690 <_Z8myprintfPKcz>
	  }
	  else {
	  	myprintf( "f_write error (%i)\r\n");
	  }

}
 800086c:	e002      	b.n	8000874 <HAL_SPI_TxCpltCallback+0x3c>
	  	myprintf( "f_write error (%i)\r\n");
 800086e:	4808      	ldr	r0, [pc, #32]	; (8000890 <HAL_SPI_TxCpltCallback+0x58>)
 8000870:	f7ff ff0e 	bl	8000690 <_Z8myprintfPKcz>
}
 8000874:	bf00      	nop
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	240009a4 	.word	0x240009a4
 8000880:	24000470 	.word	0x24000470
 8000884:	240006a0 	.word	0x240006a0
 8000888:	0800c544 	.word	0x0800c544
 800088c:	0800c560 	.word	0x0800c560
 8000890:	0800c584 	.word	0x0800c584

08000894 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b0cc      	sub	sp, #304	; 0x130
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800089e:	224c      	movs	r2, #76	; 0x4c
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f00b f9b4 	bl	800bc10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80008ac:	2220      	movs	r2, #32
 80008ae:	2100      	movs	r1, #0
 80008b0:	4618      	mov	r0, r3
 80008b2:	f00b f9ad 	bl	800bc10 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008b6:	f107 0308 	add.w	r3, r7, #8
 80008ba:	4618      	mov	r0, r3
 80008bc:	23bc      	movs	r3, #188	; 0xbc
 80008be:	461a      	mov	r2, r3
 80008c0:	2100      	movs	r1, #0
 80008c2:	f00b f9a5 	bl	800bc10 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008c6:	2002      	movs	r0, #2
 80008c8:	f003 fbb6 	bl	8004038 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	4b56      	ldr	r3, [pc, #344]	; (8000a2c <_Z18SystemClock_Configv+0x198>)
 80008d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d6:	4a55      	ldr	r2, [pc, #340]	; (8000a2c <_Z18SystemClock_Configv+0x198>)
 80008d8:	f023 0301 	bic.w	r3, r3, #1
 80008dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008de:	4b53      	ldr	r3, [pc, #332]	; (8000a2c <_Z18SystemClock_Configv+0x198>)
 80008e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e2:	f003 0201 	and.w	r2, r3, #1
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	4b51      	ldr	r3, [pc, #324]	; (8000a30 <_Z18SystemClock_Configv+0x19c>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008f2:	4a4f      	ldr	r2, [pc, #316]	; (8000a30 <_Z18SystemClock_Configv+0x19c>)
 80008f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f8:	6193      	str	r3, [r2, #24]
 80008fa:	4b4d      	ldr	r3, [pc, #308]	; (8000a30 <_Z18SystemClock_Configv+0x19c>)
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800090a:	4b49      	ldr	r3, [pc, #292]	; (8000a30 <_Z18SystemClock_Configv+0x19c>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000916:	bf14      	ite	ne
 8000918:	2301      	movne	r3, #1
 800091a:	2300      	moveq	r3, #0
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	d000      	beq.n	8000924 <_Z18SystemClock_Configv+0x90>
 8000922:	e7f2      	b.n	800090a <_Z18SystemClock_Configv+0x76>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000924:	2303      	movs	r3, #3
 8000926:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800092a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800092e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000932:	2301      	movs	r3, #1
 8000934:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000938:	2340      	movs	r3, #64	; 0x40
 800093a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093e:	2302      	movs	r3, #2
 8000940:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000944:	2302      	movs	r3, #2
 8000946:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800094a:	2301      	movs	r3, #1
 800094c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000950:	2318      	movs	r3, #24
 8000952:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000956:	2302      	movs	r3, #2
 8000958:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800095c:	2304      	movs	r3, #4
 800095e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000962:	2302      	movs	r3, #2
 8000964:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000968:	230c      	movs	r3, #12
 800096a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800096e:	2300      	movs	r3, #0
 8000970:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800097e:	4618      	mov	r0, r3
 8000980:	f003 fb94 	bl	80040ac <HAL_RCC_OscConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	bf14      	ite	ne
 800098a:	2301      	movne	r3, #1
 800098c:	2300      	moveq	r3, #0
 800098e:	b2db      	uxtb	r3, r3
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8000994:	f000 fa70 	bl	8000e78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000998:	233f      	movs	r3, #63	; 0x3f
 800099a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800099e:	2300      	movs	r3, #0
 80009a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009bc:	2300      	movs	r3, #0
 80009be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f003 ff7c 	bl	80048cc <HAL_RCC_ClockConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	bf14      	ite	ne
 80009da:	2301      	movne	r3, #1
 80009dc:	2300      	moveq	r3, #0
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <_Z18SystemClock_Configv+0x154>
  {
    Error_Handler();
 80009e4:	f000 fa48 	bl	8000e78 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SPI3;
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	f241 0202 	movw	r2, #4098	; 0x1002
 80009f0:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	2200      	movs	r2, #0
 80009f8:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	2200      	movs	r2, #0
 8000a00:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a02:	f107 0308 	add.w	r3, r7, #8
 8000a06:	4618      	mov	r0, r3
 8000a08:	f004 fae4 	bl	8004fd4 <HAL_RCCEx_PeriphCLKConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	bf14      	ite	ne
 8000a12:	2301      	movne	r3, #1
 8000a14:	2300      	moveq	r3, #0
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <_Z18SystemClock_Configv+0x18c>
  {
    Error_Handler();
 8000a1c:	f000 fa2c 	bl	8000e78 <Error_Handler>
  }
}
 8000a20:	bf00      	nop
 8000a22:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	58000400 	.word	0x58000400
 8000a30:	58024800 	.word	0x58024800

08000a34 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a38:	4b2a      	ldr	r3, [pc, #168]	; (8000ae4 <_ZL12MX_SPI3_Initv+0xb0>)
 8000a3a:	4a2b      	ldr	r2, [pc, #172]	; (8000ae8 <_ZL12MX_SPI3_Initv+0xb4>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a3e:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <_ZL12MX_SPI3_Initv+0xb0>)
 8000a40:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a44:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a46:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <_ZL12MX_SPI3_Initv+0xb0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a4c:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <_ZL12MX_SPI3_Initv+0xb0>)
 8000a4e:	2207      	movs	r2, #7
 8000a50:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a52:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <_ZL12MX_SPI3_Initv+0xb0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a58:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <_ZL12MX_SPI3_Initv+0xb0>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a5e:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <_ZL12MX_SPI3_Initv+0xb0>)
 8000a60:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a64:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000a66:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <_ZL12MX_SPI3_Initv+0xb0>)
 8000a68:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000a6c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <_ZL12MX_SPI3_Initv+0xb0>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <_ZL12MX_SPI3_Initv+0xb0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <_ZL12MX_SPI3_Initv+0xb0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <_ZL12MX_SPI3_Initv+0xb0>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <_ZL12MX_SPI3_Initv+0xb0>)
 8000a88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a8c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <_ZL12MX_SPI3_Initv+0xb0>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a94:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <_ZL12MX_SPI3_Initv+0xb0>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <_ZL12MX_SPI3_Initv+0xb0>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <_ZL12MX_SPI3_Initv+0xb0>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <_ZL12MX_SPI3_Initv+0xb0>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000aac:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <_ZL12MX_SPI3_Initv+0xb0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <_ZL12MX_SPI3_Initv+0xb0>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <_ZL12MX_SPI3_Initv+0xb0>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <_ZL12MX_SPI3_Initv+0xb0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ac4:	4807      	ldr	r0, [pc, #28]	; (8000ae4 <_ZL12MX_SPI3_Initv+0xb0>)
 8000ac6:	f005 fd85 	bl	80065d4 <HAL_SPI_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	bf14      	ite	ne
 8000ad0:	2301      	movne	r3, #1
 8000ad2:	2300      	moveq	r3, #0
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <_ZL12MX_SPI3_Initv+0xaa>
  {
    Error_Handler();
 8000ada:	f000 f9cd 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	240000b4 	.word	0x240000b4
 8000ae8:	40003c00 	.word	0x40003c00

08000aec <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000af0:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000af2:	4a2d      	ldr	r2, [pc, #180]	; (8000ba8 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000af4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000af6:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000af8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000afc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000afe:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b04:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b0a:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b10:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b12:	220c      	movs	r2, #12
 8000b14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b16:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b1c:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b22:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b28:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b34:	481b      	ldr	r0, [pc, #108]	; (8000ba4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b36:	f006 fdd8 	bl	80076ea <HAL_UART_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	bf14      	ite	ne
 8000b40:	2301      	movne	r3, #1
 8000b42:	2300      	moveq	r3, #0
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8000b4a:	f000 f995 	bl	8000e78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4814      	ldr	r0, [pc, #80]	; (8000ba4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b52:	f007 fe04 	bl	800875e <HAL_UARTEx_SetTxFifoThreshold>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	bf14      	ite	ne
 8000b5c:	2301      	movne	r3, #1
 8000b5e:	2300      	moveq	r3, #0
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8000b66:	f000 f987 	bl	8000e78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b6e:	f007 fe34 	bl	80087da <HAL_UARTEx_SetRxFifoThreshold>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	bf14      	ite	ne
 8000b78:	2301      	movne	r3, #1
 8000b7a:	2300      	moveq	r3, #0
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8000b82:	f000 f979 	bl	8000e78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b86:	4807      	ldr	r0, [pc, #28]	; (8000ba4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b88:	f007 fdb0 	bl	80086ec <HAL_UARTEx_DisableFifoMode>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	bf14      	ite	ne
 8000b92:	2301      	movne	r3, #1
 8000b94:	2300      	moveq	r3, #0
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8000b9c:	f000 f96c 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	240001b4 	.word	0x240001b4
 8000ba8:	40004800 	.word	0x40004800

08000bac <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <_ZL11MX_DMA_Initv+0x3c>)
 8000bb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bb8:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <_ZL11MX_DMA_Initv+0x3c>)
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <_ZL11MX_DMA_Initv+0x3c>)
 8000bc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	200b      	movs	r0, #11
 8000bd6:	f000 fd08 	bl	80015ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bda:	200b      	movs	r0, #11
 8000bdc:	f000 fd1f 	bl	800161e <HAL_NVIC_EnableIRQ>

}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	58024400 	.word	0x58024400

08000bec <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08c      	sub	sp, #48	; 0x30
 8000bf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
 8000c00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c02:	4b95      	ldr	r3, [pc, #596]	; (8000e58 <_ZL12MX_GPIO_Initv+0x26c>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c08:	4a93      	ldr	r2, [pc, #588]	; (8000e58 <_ZL12MX_GPIO_Initv+0x26c>)
 8000c0a:	f043 0304 	orr.w	r3, r3, #4
 8000c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c12:	4b91      	ldr	r3, [pc, #580]	; (8000e58 <_ZL12MX_GPIO_Initv+0x26c>)
 8000c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	61bb      	str	r3, [r7, #24]
 8000c1e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c20:	4b8d      	ldr	r3, [pc, #564]	; (8000e58 <_ZL12MX_GPIO_Initv+0x26c>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c26:	4a8c      	ldr	r2, [pc, #560]	; (8000e58 <_ZL12MX_GPIO_Initv+0x26c>)
 8000c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c30:	4b89      	ldr	r3, [pc, #548]	; (8000e58 <_ZL12MX_GPIO_Initv+0x26c>)
 8000c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	4b86      	ldr	r3, [pc, #536]	; (8000e58 <_ZL12MX_GPIO_Initv+0x26c>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	4a84      	ldr	r2, [pc, #528]	; (8000e58 <_ZL12MX_GPIO_Initv+0x26c>)
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4e:	4b82      	ldr	r3, [pc, #520]	; (8000e58 <_ZL12MX_GPIO_Initv+0x26c>)
 8000c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5c:	4b7e      	ldr	r3, [pc, #504]	; (8000e58 <_ZL12MX_GPIO_Initv+0x26c>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c62:	4a7d      	ldr	r2, [pc, #500]	; (8000e58 <_ZL12MX_GPIO_Initv+0x26c>)
 8000c64:	f043 0302 	orr.w	r3, r3, #2
 8000c68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6c:	4b7a      	ldr	r3, [pc, #488]	; (8000e58 <_ZL12MX_GPIO_Initv+0x26c>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c7a:	4b77      	ldr	r3, [pc, #476]	; (8000e58 <_ZL12MX_GPIO_Initv+0x26c>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c80:	4a75      	ldr	r2, [pc, #468]	; (8000e58 <_ZL12MX_GPIO_Initv+0x26c>)
 8000c82:	f043 0308 	orr.w	r3, r3, #8
 8000c86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c8a:	4b73      	ldr	r3, [pc, #460]	; (8000e58 <_ZL12MX_GPIO_Initv+0x26c>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c90:	f003 0308 	and.w	r3, r3, #8
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c98:	4b6f      	ldr	r3, [pc, #444]	; (8000e58 <_ZL12MX_GPIO_Initv+0x26c>)
 8000c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9e:	4a6e      	ldr	r2, [pc, #440]	; (8000e58 <_ZL12MX_GPIO_Initv+0x26c>)
 8000ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca8:	4b6b      	ldr	r3, [pc, #428]	; (8000e58 <_ZL12MX_GPIO_Initv+0x26c>)
 8000caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cb6:	4b68      	ldr	r3, [pc, #416]	; (8000e58 <_ZL12MX_GPIO_Initv+0x26c>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbc:	4a66      	ldr	r2, [pc, #408]	; (8000e58 <_ZL12MX_GPIO_Initv+0x26c>)
 8000cbe:	f043 0310 	orr.w	r3, r3, #16
 8000cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc6:	4b64      	ldr	r3, [pc, #400]	; (8000e58 <_ZL12MX_GPIO_Initv+0x26c>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ccc:	f003 0310 	and.w	r3, r3, #16
 8000cd0:	603b      	str	r3, [r7, #0]
 8000cd2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f244 0101 	movw	r1, #16385	; 0x4001
 8000cda:	4860      	ldr	r0, [pc, #384]	; (8000e5c <_ZL12MX_GPIO_Initv+0x270>)
 8000cdc:	f003 f992 	bl	8004004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ce6:	485e      	ldr	r0, [pc, #376]	; (8000e60 <_ZL12MX_GPIO_Initv+0x274>)
 8000ce8:	f003 f98c 	bl	8004004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cf2:	485c      	ldr	r0, [pc, #368]	; (8000e64 <_ZL12MX_GPIO_Initv+0x278>)
 8000cf4:	f003 f986 	bl	8004004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2102      	movs	r1, #2
 8000cfc:	485a      	ldr	r0, [pc, #360]	; (8000e68 <_ZL12MX_GPIO_Initv+0x27c>)
 8000cfe:	f003 f981 	bl	8004004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4619      	mov	r1, r3
 8000d16:	4853      	ldr	r0, [pc, #332]	; (8000e64 <_ZL12MX_GPIO_Initv+0x278>)
 8000d18:	f002 ffc4 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000d1c:	2332      	movs	r3, #50	; 0x32
 8000d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d2c:	230b      	movs	r3, #11
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	4619      	mov	r1, r3
 8000d36:	484b      	ldr	r0, [pc, #300]	; (8000e64 <_ZL12MX_GPIO_Initv+0x278>)
 8000d38:	f002 ffb4 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000d3c:	2386      	movs	r3, #134	; 0x86
 8000d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d4c:	230b      	movs	r3, #11
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	4619      	mov	r1, r3
 8000d56:	4845      	ldr	r0, [pc, #276]	; (8000e6c <_ZL12MX_GPIO_Initv+0x280>)
 8000d58:	f002 ffa4 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000d5c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	4839      	ldr	r0, [pc, #228]	; (8000e5c <_ZL12MX_GPIO_Initv+0x270>)
 8000d76:	f002 ff95 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d8c:	230b      	movs	r3, #11
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	4619      	mov	r1, r3
 8000d96:	4831      	ldr	r0, [pc, #196]	; (8000e5c <_ZL12MX_GPIO_Initv+0x270>)
 8000d98:	f002 ff84 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000d9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	4619      	mov	r1, r3
 8000db4:	482a      	ldr	r0, [pc, #168]	; (8000e60 <_ZL12MX_GPIO_Initv+0x274>)
 8000db6:	f002 ff75 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000dba:	2380      	movs	r3, #128	; 0x80
 8000dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dbe:	4b2c      	ldr	r3, [pc, #176]	; (8000e70 <_ZL12MX_GPIO_Initv+0x284>)
 8000dc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4829      	ldr	r0, [pc, #164]	; (8000e74 <_ZL12MX_GPIO_Initv+0x288>)
 8000dce:	f002 ff69 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	4619      	mov	r1, r3
 8000dea:	481e      	ldr	r0, [pc, #120]	; (8000e64 <_ZL12MX_GPIO_Initv+0x278>)
 8000dec:	f002 ff5a 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000df0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000e02:	230a      	movs	r3, #10
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4817      	ldr	r0, [pc, #92]	; (8000e6c <_ZL12MX_GPIO_Initv+0x280>)
 8000e0e:	f002 ff49 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e12:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e24:	230b      	movs	r3, #11
 8000e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4811      	ldr	r0, [pc, #68]	; (8000e74 <_ZL12MX_GPIO_Initv+0x288>)
 8000e30:	f002 ff38 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e34:	2302      	movs	r3, #2
 8000e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4807      	ldr	r0, [pc, #28]	; (8000e68 <_ZL12MX_GPIO_Initv+0x27c>)
 8000e4c:	f002 ff2a 	bl	8003ca4 <HAL_GPIO_Init>

}
 8000e50:	bf00      	nop
 8000e52:	3730      	adds	r7, #48	; 0x30
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	58024400 	.word	0x58024400
 8000e5c:	58020400 	.word	0x58020400
 8000e60:	58020c00 	.word	0x58020c00
 8000e64:	58020800 	.word	0x58020800
 8000e68:	58021000 	.word	0x58021000
 8000e6c:	58020000 	.word	0x58020000
 8000e70:	11110000 	.word	0x11110000
 8000e74:	58021800 	.word	0x58021800

08000e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
	...

08000e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_MspInit+0x30>)
 8000e90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e94:	4a08      	ldr	r2, [pc, #32]	; (8000eb8 <HAL_MspInit+0x30>)
 8000e96:	f043 0302 	orr.w	r3, r3, #2
 8000e9a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_MspInit+0x30>)
 8000ea0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	58024400 	.word	0x58024400

08000ebc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a35      	ldr	r2, [pc, #212]	; (8000fb0 <HAL_SPI_MspInit+0xf4>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d163      	bne.n	8000fa6 <HAL_SPI_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ede:	4b35      	ldr	r3, [pc, #212]	; (8000fb4 <HAL_SPI_MspInit+0xf8>)
 8000ee0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ee4:	4a33      	ldr	r2, [pc, #204]	; (8000fb4 <HAL_SPI_MspInit+0xf8>)
 8000ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000eee:	4b31      	ldr	r3, [pc, #196]	; (8000fb4 <HAL_SPI_MspInit+0xf8>)
 8000ef0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ef4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efc:	4b2d      	ldr	r3, [pc, #180]	; (8000fb4 <HAL_SPI_MspInit+0xf8>)
 8000efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f02:	4a2c      	ldr	r2, [pc, #176]	; (8000fb4 <HAL_SPI_MspInit+0xf8>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f0c:	4b29      	ldr	r3, [pc, #164]	; (8000fb4 <HAL_SPI_MspInit+0xf8>)
 8000f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000f1a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f2c:	2306      	movs	r3, #6
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	4820      	ldr	r0, [pc, #128]	; (8000fb8 <HAL_SPI_MspInit+0xfc>)
 8000f38:	f002 feb4 	bl	8003ca4 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream0;
 8000f3c:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <HAL_SPI_MspInit+0x100>)
 8000f3e:	4a20      	ldr	r2, [pc, #128]	; (8000fc0 <HAL_SPI_MspInit+0x104>)
 8000f40:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8000f42:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <HAL_SPI_MspInit+0x100>)
 8000f44:	223e      	movs	r2, #62	; 0x3e
 8000f46:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f48:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <HAL_SPI_MspInit+0x100>)
 8000f4a:	2240      	movs	r2, #64	; 0x40
 8000f4c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f4e:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <HAL_SPI_MspInit+0x100>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f54:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_SPI_MspInit+0x100>)
 8000f56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f5a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_SPI_MspInit+0x100>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f62:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <HAL_SPI_MspInit+0x100>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <HAL_SPI_MspInit+0x100>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f6e:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <HAL_SPI_MspInit+0x100>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_SPI_MspInit+0x100>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000f7a:	4810      	ldr	r0, [pc, #64]	; (8000fbc <HAL_SPI_MspInit+0x100>)
 8000f7c:	f000 fb6a 	bl	8001654 <HAL_DMA_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8000f86:	f7ff ff77 	bl	8000e78 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <HAL_SPI_MspInit+0x100>)
 8000f8e:	679a      	str	r2, [r3, #120]	; 0x78
 8000f90:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <HAL_SPI_MspInit+0x100>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2033      	movs	r0, #51	; 0x33
 8000f9c:	f000 fb25 	bl	80015ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000fa0:	2033      	movs	r0, #51	; 0x33
 8000fa2:	f000 fb3c 	bl	800161e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fa6:	bf00      	nop
 8000fa8:	3728      	adds	r7, #40	; 0x28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40003c00 	.word	0x40003c00
 8000fb4:	58024400 	.word	0x58024400
 8000fb8:	58020800 	.word	0x58020800
 8000fbc:	2400013c 	.word	0x2400013c
 8000fc0:	40020010 	.word	0x40020010

08000fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a1a      	ldr	r2, [pc, #104]	; (800104c <HAL_UART_MspInit+0x88>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d12e      	bne.n	8001044 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <HAL_UART_MspInit+0x8c>)
 8000fe8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fec:	4a18      	ldr	r2, [pc, #96]	; (8001050 <HAL_UART_MspInit+0x8c>)
 8000fee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <HAL_UART_MspInit+0x8c>)
 8000ff8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ffc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_UART_MspInit+0x8c>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100a:	4a11      	ldr	r2, [pc, #68]	; (8001050 <HAL_UART_MspInit+0x8c>)
 800100c:	f043 0308 	orr.w	r3, r3, #8
 8001010:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001014:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <HAL_UART_MspInit+0x8c>)
 8001016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101a:	f003 0308 	and.w	r3, r3, #8
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001022:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001034:	2307      	movs	r3, #7
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <HAL_UART_MspInit+0x90>)
 8001040:	f002 fe30 	bl	8003ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001044:	bf00      	nop
 8001046:	3728      	adds	r7, #40	; 0x28
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40004800 	.word	0x40004800
 8001050:	58024400 	.word	0x58024400
 8001054:	58020c00 	.word	0x58020c00

08001058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <HardFault_Handler+0x4>

0800106c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <MemManage_Handler+0x4>

08001072 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <BusFault_Handler+0x4>

08001078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <UsageFault_Handler+0x4>

0800107e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ac:	f000 f974 	bl	8001398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <DMA1_Stream0_IRQHandler+0x10>)
 80010ba:	f001 fad5 	bl	8002668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	2400013c 	.word	0x2400013c

080010c8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80010cc:	4802      	ldr	r0, [pc, #8]	; (80010d8 <SPI3_IRQHandler+0x10>)
 80010ce:	f005 ffab 	bl	8007028 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	240000b4 	.word	0x240000b4

080010dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e4:	4a14      	ldr	r2, [pc, #80]	; (8001138 <_sbrk+0x5c>)
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <_sbrk+0x60>)
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f0:	4b13      	ldr	r3, [pc, #76]	; (8001140 <_sbrk+0x64>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d102      	bne.n	80010fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <_sbrk+0x64>)
 80010fa:	4a12      	ldr	r2, [pc, #72]	; (8001144 <_sbrk+0x68>)
 80010fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <_sbrk+0x64>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	429a      	cmp	r2, r3
 800110a:	d207      	bcs.n	800111c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800110c:	f00a fd56 	bl	800bbbc <__errno>
 8001110:	4602      	mov	r2, r0
 8001112:	230c      	movs	r3, #12
 8001114:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	e009      	b.n	8001130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <_sbrk+0x64>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <_sbrk+0x64>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	4a05      	ldr	r2, [pc, #20]	; (8001140 <_sbrk+0x64>)
 800112c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800112e:	68fb      	ldr	r3, [r7, #12]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	24080000 	.word	0x24080000
 800113c:	00000400 	.word	0x00000400
 8001140:	24000ba4 	.word	0x24000ba4
 8001144:	24001060 	.word	0x24001060

08001148 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800114c:	4b39      	ldr	r3, [pc, #228]	; (8001234 <SystemInit+0xec>)
 800114e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001152:	4a38      	ldr	r2, [pc, #224]	; (8001234 <SystemInit+0xec>)
 8001154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800115c:	4b36      	ldr	r3, [pc, #216]	; (8001238 <SystemInit+0xf0>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 030f 	and.w	r3, r3, #15
 8001164:	2b06      	cmp	r3, #6
 8001166:	d807      	bhi.n	8001178 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001168:	4b33      	ldr	r3, [pc, #204]	; (8001238 <SystemInit+0xf0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f023 030f 	bic.w	r3, r3, #15
 8001170:	4a31      	ldr	r2, [pc, #196]	; (8001238 <SystemInit+0xf0>)
 8001172:	f043 0307 	orr.w	r3, r3, #7
 8001176:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001178:	4b30      	ldr	r3, [pc, #192]	; (800123c <SystemInit+0xf4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a2f      	ldr	r2, [pc, #188]	; (800123c <SystemInit+0xf4>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001184:	4b2d      	ldr	r3, [pc, #180]	; (800123c <SystemInit+0xf4>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800118a:	4b2c      	ldr	r3, [pc, #176]	; (800123c <SystemInit+0xf4>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	492b      	ldr	r1, [pc, #172]	; (800123c <SystemInit+0xf4>)
 8001190:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <SystemInit+0xf8>)
 8001192:	4013      	ands	r3, r2
 8001194:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001196:	4b28      	ldr	r3, [pc, #160]	; (8001238 <SystemInit+0xf0>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	2b07      	cmp	r3, #7
 80011a0:	d907      	bls.n	80011b2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011a2:	4b25      	ldr	r3, [pc, #148]	; (8001238 <SystemInit+0xf0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f023 030f 	bic.w	r3, r3, #15
 80011aa:	4a23      	ldr	r2, [pc, #140]	; (8001238 <SystemInit+0xf0>)
 80011ac:	f043 0307 	orr.w	r3, r3, #7
 80011b0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011b2:	4b22      	ldr	r3, [pc, #136]	; (800123c <SystemInit+0xf4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011b8:	4b20      	ldr	r3, [pc, #128]	; (800123c <SystemInit+0xf4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011be:	4b1f      	ldr	r3, [pc, #124]	; (800123c <SystemInit+0xf4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011c4:	4b1d      	ldr	r3, [pc, #116]	; (800123c <SystemInit+0xf4>)
 80011c6:	4a1f      	ldr	r2, [pc, #124]	; (8001244 <SystemInit+0xfc>)
 80011c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <SystemInit+0xf4>)
 80011cc:	4a1e      	ldr	r2, [pc, #120]	; (8001248 <SystemInit+0x100>)
 80011ce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <SystemInit+0xf4>)
 80011d2:	4a1e      	ldr	r2, [pc, #120]	; (800124c <SystemInit+0x104>)
 80011d4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <SystemInit+0xf4>)
 80011d8:	2200      	movs	r2, #0
 80011da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <SystemInit+0xf4>)
 80011de:	4a1b      	ldr	r2, [pc, #108]	; (800124c <SystemInit+0x104>)
 80011e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <SystemInit+0xf4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <SystemInit+0xf4>)
 80011ea:	4a18      	ldr	r2, [pc, #96]	; (800124c <SystemInit+0x104>)
 80011ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <SystemInit+0xf4>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <SystemInit+0xf4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a10      	ldr	r2, [pc, #64]	; (800123c <SystemInit+0xf4>)
 80011fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001200:	4b0e      	ldr	r3, [pc, #56]	; (800123c <SystemInit+0xf4>)
 8001202:	2200      	movs	r2, #0
 8001204:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <SystemInit+0x108>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <SystemInit+0x10c>)
 800120c:	4013      	ands	r3, r2
 800120e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001212:	d202      	bcs.n	800121a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001214:	4b10      	ldr	r3, [pc, #64]	; (8001258 <SystemInit+0x110>)
 8001216:	2201      	movs	r2, #1
 8001218:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <SystemInit+0x114>)
 800121c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001220:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001222:	4b04      	ldr	r3, [pc, #16]	; (8001234 <SystemInit+0xec>)
 8001224:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001228:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00
 8001238:	52002000 	.word	0x52002000
 800123c:	58024400 	.word	0x58024400
 8001240:	eaf6ed7f 	.word	0xeaf6ed7f
 8001244:	02020200 	.word	0x02020200
 8001248:	01ff0000 	.word	0x01ff0000
 800124c:	01010280 	.word	0x01010280
 8001250:	5c001000 	.word	0x5c001000
 8001254:	ffff0000 	.word	0xffff0000
 8001258:	51008108 	.word	0x51008108
 800125c:	52004000 	.word	0x52004000

08001260 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001260:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001298 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001264:	f7ff ff70 	bl	8001148 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001268:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800126a:	e003      	b.n	8001274 <LoopCopyDataInit>

0800126c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800126e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001270:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001272:	3104      	adds	r1, #4

08001274 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001274:	480a      	ldr	r0, [pc, #40]	; (80012a0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001278:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800127a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800127c:	d3f6      	bcc.n	800126c <CopyDataInit>
  ldr  r2, =_sbss
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001280:	e002      	b.n	8001288 <LoopFillZerobss>

08001282 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001282:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001284:	f842 3b04 	str.w	r3, [r2], #4

08001288 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800128a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800128c:	d3f9      	bcc.n	8001282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800128e:	f00a fc9b 	bl	800bbc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001292:	f7ff fa23 	bl	80006dc <main>
  bx  lr    
 8001296:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001298:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800129c:	0800c6e4 	.word	0x0800c6e4
  ldr  r0, =_sdata
 80012a0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80012a4:	24000098 	.word	0x24000098
  ldr  r2, =_sbss
 80012a8:	24000098 	.word	0x24000098
  ldr  r3, = _ebss
 80012ac:	24001060 	.word	0x24001060

080012b0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b0:	e7fe      	b.n	80012b0 <ADC3_IRQHandler>
	...

080012b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ba:	2003      	movs	r0, #3
 80012bc:	f000 f98a 	bl	80015d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012c0:	f003 fcba 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 80012c4:	4601      	mov	r1, r0
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <HAL_Init+0x68>)
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	0a1b      	lsrs	r3, r3, #8
 80012cc:	f003 030f 	and.w	r3, r3, #15
 80012d0:	4a13      	ldr	r2, [pc, #76]	; (8001320 <HAL_Init+0x6c>)
 80012d2:	5cd3      	ldrb	r3, [r2, r3]
 80012d4:	f003 031f 	and.w	r3, r3, #31
 80012d8:	fa21 f303 	lsr.w	r3, r1, r3
 80012dc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012de:	4b0f      	ldr	r3, [pc, #60]	; (800131c <HAL_Init+0x68>)
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	4a0e      	ldr	r2, [pc, #56]	; (8001320 <HAL_Init+0x6c>)
 80012e8:	5cd3      	ldrb	r3, [r2, r3]
 80012ea:	f003 031f 	and.w	r3, r3, #31
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	fa22 f303 	lsr.w	r3, r2, r3
 80012f4:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <HAL_Init+0x70>)
 80012f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012f8:	4a0b      	ldr	r2, [pc, #44]	; (8001328 <HAL_Init+0x74>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012fe:	2000      	movs	r0, #0
 8001300:	f000 f814 	bl	800132c <HAL_InitTick>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e002      	b.n	8001314 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800130e:	f7ff fdbb 	bl	8000e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	58024400 	.word	0x58024400
 8001320:	0800c5f0 	.word	0x0800c5f0
 8001324:	24000004 	.word	0x24000004
 8001328:	24000000 	.word	0x24000000

0800132c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <HAL_InitTick+0x60>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e021      	b.n	8001384 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <HAL_InitTick+0x64>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <HAL_InitTick+0x60>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001352:	fbb2 f3f3 	udiv	r3, r2, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f96f 	bl	800163a <HAL_SYSTICK_Config>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e00e      	b.n	8001384 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b0f      	cmp	r3, #15
 800136a:	d80a      	bhi.n	8001382 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800136c:	2200      	movs	r2, #0
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	f000 f939 	bl	80015ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001378:	4a06      	ldr	r2, [pc, #24]	; (8001394 <HAL_InitTick+0x68>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	e000      	b.n	8001384 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	2400000c 	.word	0x2400000c
 8001390:	24000000 	.word	0x24000000
 8001394:	24000008 	.word	0x24000008

08001398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_IncTick+0x20>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_IncTick+0x24>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4413      	add	r3, r2
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <HAL_IncTick+0x24>)
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	2400000c 	.word	0x2400000c
 80013bc:	24000be8 	.word	0x24000be8

080013c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return uwTick;
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <HAL_GetTick+0x14>)
 80013c6:	681b      	ldr	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	24000be8 	.word	0x24000be8

080013d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013e0:	f7ff ffee 	bl	80013c0 <HAL_GetTick>
 80013e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f0:	d005      	beq.n	80013fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_Delay+0x40>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4413      	add	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013fe:	bf00      	nop
 8001400:	f7ff ffde 	bl	80013c0 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	429a      	cmp	r2, r3
 800140e:	d8f7      	bhi.n	8001400 <HAL_Delay+0x28>
  {
  }
}
 8001410:	bf00      	nop
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	2400000c 	.word	0x2400000c

0800141c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <HAL_GetREVID+0x14>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	0c1b      	lsrs	r3, r3, #16
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	5c001000 	.word	0x5c001000

08001434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <__NVIC_SetPriorityGrouping+0x40>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001450:	4013      	ands	r3, r2
 8001452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <__NVIC_SetPriorityGrouping+0x44>)
 800145e:	4313      	orrs	r3, r2
 8001460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001462:	4a04      	ldr	r2, [pc, #16]	; (8001474 <__NVIC_SetPriorityGrouping+0x40>)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	60d3      	str	r3, [r2, #12]
}
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed00 	.word	0xe000ed00
 8001478:	05fa0000 	.word	0x05fa0000

0800147c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <__NVIC_GetPriorityGrouping+0x18>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	0a1b      	lsrs	r3, r3, #8
 8001486:	f003 0307 	and.w	r3, r3, #7
}
 800148a:	4618      	mov	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	db0b      	blt.n	80014c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	f003 021f 	and.w	r2, r3, #31
 80014b0:	4907      	ldr	r1, [pc, #28]	; (80014d0 <__NVIC_EnableIRQ+0x38>)
 80014b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b6:	095b      	lsrs	r3, r3, #5
 80014b8:	2001      	movs	r0, #1
 80014ba:	fa00 f202 	lsl.w	r2, r0, r2
 80014be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000e100 	.word	0xe000e100

080014d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	6039      	str	r1, [r7, #0]
 80014de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	db0a      	blt.n	80014fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	490c      	ldr	r1, [pc, #48]	; (8001520 <__NVIC_SetPriority+0x4c>)
 80014ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f2:	0112      	lsls	r2, r2, #4
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	440b      	add	r3, r1
 80014f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014fc:	e00a      	b.n	8001514 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4908      	ldr	r1, [pc, #32]	; (8001524 <__NVIC_SetPriority+0x50>)
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	3b04      	subs	r3, #4
 800150c:	0112      	lsls	r2, r2, #4
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	440b      	add	r3, r1
 8001512:	761a      	strb	r2, [r3, #24]
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000e100 	.word	0xe000e100
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001528:	b480      	push	{r7}
 800152a:	b089      	sub	sp, #36	; 0x24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f1c3 0307 	rsb	r3, r3, #7
 8001542:	2b04      	cmp	r3, #4
 8001544:	bf28      	it	cs
 8001546:	2304      	movcs	r3, #4
 8001548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3304      	adds	r3, #4
 800154e:	2b06      	cmp	r3, #6
 8001550:	d902      	bls.n	8001558 <NVIC_EncodePriority+0x30>
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3b03      	subs	r3, #3
 8001556:	e000      	b.n	800155a <NVIC_EncodePriority+0x32>
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	f04f 32ff 	mov.w	r2, #4294967295
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43da      	mvns	r2, r3
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	401a      	ands	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001570:	f04f 31ff 	mov.w	r1, #4294967295
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	fa01 f303 	lsl.w	r3, r1, r3
 800157a:	43d9      	mvns	r1, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001580:	4313      	orrs	r3, r2
         );
}
 8001582:	4618      	mov	r0, r3
 8001584:	3724      	adds	r7, #36	; 0x24
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3b01      	subs	r3, #1
 800159c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015a0:	d301      	bcc.n	80015a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015a2:	2301      	movs	r3, #1
 80015a4:	e00f      	b.n	80015c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015a6:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <SysTick_Config+0x40>)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ae:	210f      	movs	r1, #15
 80015b0:	f04f 30ff 	mov.w	r0, #4294967295
 80015b4:	f7ff ff8e 	bl	80014d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <SysTick_Config+0x40>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015be:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <SysTick_Config+0x40>)
 80015c0:	2207      	movs	r2, #7
 80015c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	e000e010 	.word	0xe000e010

080015d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff ff29 	bl	8001434 <__NVIC_SetPriorityGrouping>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b086      	sub	sp, #24
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4603      	mov	r3, r0
 80015f2:	60b9      	str	r1, [r7, #8]
 80015f4:	607a      	str	r2, [r7, #4]
 80015f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015f8:	f7ff ff40 	bl	800147c <__NVIC_GetPriorityGrouping>
 80015fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	6978      	ldr	r0, [r7, #20]
 8001604:	f7ff ff90 	bl	8001528 <NVIC_EncodePriority>
 8001608:	4602      	mov	r2, r0
 800160a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800160e:	4611      	mov	r1, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff5f 	bl	80014d4 <__NVIC_SetPriority>
}
 8001616:	bf00      	nop
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001628:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff33 	bl	8001498 <__NVIC_EnableIRQ>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ffa4 	bl	8001590 <SysTick_Config>
 8001648:	4603      	mov	r3, r0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800165c:	f7ff feb0 	bl	80013c0 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e316      	b.n	8001c9a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a66      	ldr	r2, [pc, #408]	; (800180c <HAL_DMA_Init+0x1b8>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d04a      	beq.n	800170c <HAL_DMA_Init+0xb8>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a65      	ldr	r2, [pc, #404]	; (8001810 <HAL_DMA_Init+0x1bc>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d045      	beq.n	800170c <HAL_DMA_Init+0xb8>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a63      	ldr	r2, [pc, #396]	; (8001814 <HAL_DMA_Init+0x1c0>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d040      	beq.n	800170c <HAL_DMA_Init+0xb8>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a62      	ldr	r2, [pc, #392]	; (8001818 <HAL_DMA_Init+0x1c4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d03b      	beq.n	800170c <HAL_DMA_Init+0xb8>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a60      	ldr	r2, [pc, #384]	; (800181c <HAL_DMA_Init+0x1c8>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d036      	beq.n	800170c <HAL_DMA_Init+0xb8>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a5f      	ldr	r2, [pc, #380]	; (8001820 <HAL_DMA_Init+0x1cc>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d031      	beq.n	800170c <HAL_DMA_Init+0xb8>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a5d      	ldr	r2, [pc, #372]	; (8001824 <HAL_DMA_Init+0x1d0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d02c      	beq.n	800170c <HAL_DMA_Init+0xb8>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a5c      	ldr	r2, [pc, #368]	; (8001828 <HAL_DMA_Init+0x1d4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d027      	beq.n	800170c <HAL_DMA_Init+0xb8>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a5a      	ldr	r2, [pc, #360]	; (800182c <HAL_DMA_Init+0x1d8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d022      	beq.n	800170c <HAL_DMA_Init+0xb8>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a59      	ldr	r2, [pc, #356]	; (8001830 <HAL_DMA_Init+0x1dc>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d01d      	beq.n	800170c <HAL_DMA_Init+0xb8>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a57      	ldr	r2, [pc, #348]	; (8001834 <HAL_DMA_Init+0x1e0>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d018      	beq.n	800170c <HAL_DMA_Init+0xb8>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a56      	ldr	r2, [pc, #344]	; (8001838 <HAL_DMA_Init+0x1e4>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d013      	beq.n	800170c <HAL_DMA_Init+0xb8>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a54      	ldr	r2, [pc, #336]	; (800183c <HAL_DMA_Init+0x1e8>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d00e      	beq.n	800170c <HAL_DMA_Init+0xb8>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a53      	ldr	r2, [pc, #332]	; (8001840 <HAL_DMA_Init+0x1ec>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d009      	beq.n	800170c <HAL_DMA_Init+0xb8>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a51      	ldr	r2, [pc, #324]	; (8001844 <HAL_DMA_Init+0x1f0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d004      	beq.n	800170c <HAL_DMA_Init+0xb8>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a50      	ldr	r2, [pc, #320]	; (8001848 <HAL_DMA_Init+0x1f4>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d101      	bne.n	8001710 <HAL_DMA_Init+0xbc>
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <HAL_DMA_Init+0xbe>
 8001710:	2300      	movs	r3, #0
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 813b 	beq.w	800198e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2202      	movs	r2, #2
 8001724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a37      	ldr	r2, [pc, #220]	; (800180c <HAL_DMA_Init+0x1b8>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d04a      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a36      	ldr	r2, [pc, #216]	; (8001810 <HAL_DMA_Init+0x1bc>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d045      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a34      	ldr	r2, [pc, #208]	; (8001814 <HAL_DMA_Init+0x1c0>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d040      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a33      	ldr	r2, [pc, #204]	; (8001818 <HAL_DMA_Init+0x1c4>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d03b      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a31      	ldr	r2, [pc, #196]	; (800181c <HAL_DMA_Init+0x1c8>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d036      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a30      	ldr	r2, [pc, #192]	; (8001820 <HAL_DMA_Init+0x1cc>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d031      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a2e      	ldr	r2, [pc, #184]	; (8001824 <HAL_DMA_Init+0x1d0>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d02c      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a2d      	ldr	r2, [pc, #180]	; (8001828 <HAL_DMA_Init+0x1d4>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d027      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a2b      	ldr	r2, [pc, #172]	; (800182c <HAL_DMA_Init+0x1d8>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d022      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a2a      	ldr	r2, [pc, #168]	; (8001830 <HAL_DMA_Init+0x1dc>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d01d      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a28      	ldr	r2, [pc, #160]	; (8001834 <HAL_DMA_Init+0x1e0>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d018      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a27      	ldr	r2, [pc, #156]	; (8001838 <HAL_DMA_Init+0x1e4>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d013      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a25      	ldr	r2, [pc, #148]	; (800183c <HAL_DMA_Init+0x1e8>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d00e      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a24      	ldr	r2, [pc, #144]	; (8001840 <HAL_DMA_Init+0x1ec>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d009      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a22      	ldr	r2, [pc, #136]	; (8001844 <HAL_DMA_Init+0x1f0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d004      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a21      	ldr	r2, [pc, #132]	; (8001848 <HAL_DMA_Init+0x1f4>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d108      	bne.n	80017da <HAL_DMA_Init+0x186>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0201 	bic.w	r2, r2, #1
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	e007      	b.n	80017ea <HAL_DMA_Init+0x196>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 0201 	bic.w	r2, r2, #1
 80017e8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80017ea:	e02f      	b.n	800184c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017ec:	f7ff fde8 	bl	80013c0 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b05      	cmp	r3, #5
 80017f8:	d928      	bls.n	800184c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2220      	movs	r2, #32
 80017fe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2203      	movs	r2, #3
 8001804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e246      	b.n	8001c9a <HAL_DMA_Init+0x646>
 800180c:	40020010 	.word	0x40020010
 8001810:	40020028 	.word	0x40020028
 8001814:	40020040 	.word	0x40020040
 8001818:	40020058 	.word	0x40020058
 800181c:	40020070 	.word	0x40020070
 8001820:	40020088 	.word	0x40020088
 8001824:	400200a0 	.word	0x400200a0
 8001828:	400200b8 	.word	0x400200b8
 800182c:	40020410 	.word	0x40020410
 8001830:	40020428 	.word	0x40020428
 8001834:	40020440 	.word	0x40020440
 8001838:	40020458 	.word	0x40020458
 800183c:	40020470 	.word	0x40020470
 8001840:	40020488 	.word	0x40020488
 8001844:	400204a0 	.word	0x400204a0
 8001848:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1c8      	bne.n	80017ec <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	4b83      	ldr	r3, [pc, #524]	; (8001a74 <HAL_DMA_Init+0x420>)
 8001866:	4013      	ands	r3, r2
 8001868:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001872:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800187e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800188a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	4313      	orrs	r3, r2
 8001896:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	2b04      	cmp	r3, #4
 800189e:	d107      	bne.n	80018b0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a8:	4313      	orrs	r3, r2
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80018b0:	4b71      	ldr	r3, [pc, #452]	; (8001a78 <HAL_DMA_Init+0x424>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b71      	ldr	r3, [pc, #452]	; (8001a7c <HAL_DMA_Init+0x428>)
 80018b6:	4013      	ands	r3, r2
 80018b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018bc:	d328      	bcc.n	8001910 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b28      	cmp	r3, #40	; 0x28
 80018c4:	d903      	bls.n	80018ce <HAL_DMA_Init+0x27a>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b2e      	cmp	r3, #46	; 0x2e
 80018cc:	d917      	bls.n	80018fe <HAL_DMA_Init+0x2aa>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b3e      	cmp	r3, #62	; 0x3e
 80018d4:	d903      	bls.n	80018de <HAL_DMA_Init+0x28a>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b42      	cmp	r3, #66	; 0x42
 80018dc:	d90f      	bls.n	80018fe <HAL_DMA_Init+0x2aa>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b46      	cmp	r3, #70	; 0x46
 80018e4:	d903      	bls.n	80018ee <HAL_DMA_Init+0x29a>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b48      	cmp	r3, #72	; 0x48
 80018ec:	d907      	bls.n	80018fe <HAL_DMA_Init+0x2aa>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b4e      	cmp	r3, #78	; 0x4e
 80018f4:	d905      	bls.n	8001902 <HAL_DMA_Init+0x2ae>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b52      	cmp	r3, #82	; 0x52
 80018fc:	d801      	bhi.n	8001902 <HAL_DMA_Init+0x2ae>
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <HAL_DMA_Init+0x2b0>
 8001902:	2300      	movs	r3, #0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800190e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f023 0307 	bic.w	r3, r3, #7
 8001926:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	4313      	orrs	r3, r2
 8001930:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	2b04      	cmp	r3, #4
 8001938:	d117      	bne.n	800196a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	4313      	orrs	r3, r2
 8001942:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00e      	beq.n	800196a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f002 f81f 	bl	8003990 <DMA_CheckFifoParam>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d008      	beq.n	800196a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2240      	movs	r2, #64	; 0x40
 800195c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e197      	b.n	8001c9a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f001 ff5a 	bl	800382c <DMA_CalcBaseAndBitshift>
 8001978:	4603      	mov	r3, r0
 800197a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001980:	f003 031f 	and.w	r3, r3, #31
 8001984:	223f      	movs	r2, #63	; 0x3f
 8001986:	409a      	lsls	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	e0cd      	b.n	8001b2a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a3b      	ldr	r2, [pc, #236]	; (8001a80 <HAL_DMA_Init+0x42c>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d022      	beq.n	80019de <HAL_DMA_Init+0x38a>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a39      	ldr	r2, [pc, #228]	; (8001a84 <HAL_DMA_Init+0x430>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d01d      	beq.n	80019de <HAL_DMA_Init+0x38a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a38      	ldr	r2, [pc, #224]	; (8001a88 <HAL_DMA_Init+0x434>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d018      	beq.n	80019de <HAL_DMA_Init+0x38a>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a36      	ldr	r2, [pc, #216]	; (8001a8c <HAL_DMA_Init+0x438>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d013      	beq.n	80019de <HAL_DMA_Init+0x38a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a35      	ldr	r2, [pc, #212]	; (8001a90 <HAL_DMA_Init+0x43c>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d00e      	beq.n	80019de <HAL_DMA_Init+0x38a>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a33      	ldr	r2, [pc, #204]	; (8001a94 <HAL_DMA_Init+0x440>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d009      	beq.n	80019de <HAL_DMA_Init+0x38a>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a32      	ldr	r2, [pc, #200]	; (8001a98 <HAL_DMA_Init+0x444>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d004      	beq.n	80019de <HAL_DMA_Init+0x38a>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a30      	ldr	r2, [pc, #192]	; (8001a9c <HAL_DMA_Init+0x448>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d101      	bne.n	80019e2 <HAL_DMA_Init+0x38e>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <HAL_DMA_Init+0x390>
 80019e2:	2300      	movs	r3, #0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 8097 	beq.w	8001b18 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a24      	ldr	r2, [pc, #144]	; (8001a80 <HAL_DMA_Init+0x42c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d021      	beq.n	8001a38 <HAL_DMA_Init+0x3e4>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a22      	ldr	r2, [pc, #136]	; (8001a84 <HAL_DMA_Init+0x430>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d01c      	beq.n	8001a38 <HAL_DMA_Init+0x3e4>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a21      	ldr	r2, [pc, #132]	; (8001a88 <HAL_DMA_Init+0x434>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d017      	beq.n	8001a38 <HAL_DMA_Init+0x3e4>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a1f      	ldr	r2, [pc, #124]	; (8001a8c <HAL_DMA_Init+0x438>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d012      	beq.n	8001a38 <HAL_DMA_Init+0x3e4>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a1e      	ldr	r2, [pc, #120]	; (8001a90 <HAL_DMA_Init+0x43c>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d00d      	beq.n	8001a38 <HAL_DMA_Init+0x3e4>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a1c      	ldr	r2, [pc, #112]	; (8001a94 <HAL_DMA_Init+0x440>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d008      	beq.n	8001a38 <HAL_DMA_Init+0x3e4>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a1b      	ldr	r2, [pc, #108]	; (8001a98 <HAL_DMA_Init+0x444>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d003      	beq.n	8001a38 <HAL_DMA_Init+0x3e4>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a19      	ldr	r2, [pc, #100]	; (8001a9c <HAL_DMA_Init+0x448>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2202      	movs	r2, #2
 8001a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_DMA_Init+0x44c>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b40      	cmp	r3, #64	; 0x40
 8001a60:	d020      	beq.n	8001aa4 <HAL_DMA_Init+0x450>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2b80      	cmp	r3, #128	; 0x80
 8001a68:	d102      	bne.n	8001a70 <HAL_DMA_Init+0x41c>
 8001a6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a6e:	e01a      	b.n	8001aa6 <HAL_DMA_Init+0x452>
 8001a70:	2300      	movs	r3, #0
 8001a72:	e018      	b.n	8001aa6 <HAL_DMA_Init+0x452>
 8001a74:	fe10803f 	.word	0xfe10803f
 8001a78:	5c001000 	.word	0x5c001000
 8001a7c:	ffff0000 	.word	0xffff0000
 8001a80:	58025408 	.word	0x58025408
 8001a84:	5802541c 	.word	0x5802541c
 8001a88:	58025430 	.word	0x58025430
 8001a8c:	58025444 	.word	0x58025444
 8001a90:	58025458 	.word	0x58025458
 8001a94:	5802546c 	.word	0x5802546c
 8001a98:	58025480 	.word	0x58025480
 8001a9c:	58025494 	.word	0x58025494
 8001aa0:	fffe000f 	.word	0xfffe000f
 8001aa4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	68d2      	ldr	r2, [r2, #12]
 8001aaa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001aac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001ab4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001abc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001ac4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001acc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ad4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4b6e      	ldr	r3, [pc, #440]	; (8001ca4 <HAL_DMA_Init+0x650>)
 8001aec:	4413      	add	r3, r2
 8001aee:	4a6e      	ldr	r2, [pc, #440]	; (8001ca8 <HAL_DMA_Init+0x654>)
 8001af0:	fba2 2303 	umull	r2, r3, r2, r3
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	009a      	lsls	r2, r3, #2
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f001 fe95 	bl	800382c <DMA_CalcBaseAndBitshift>
 8001b02:	4603      	mov	r3, r0
 8001b04:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0a:	f003 031f 	and.w	r3, r3, #31
 8001b0e:	2201      	movs	r2, #1
 8001b10:	409a      	lsls	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	e008      	b.n	8001b2a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2240      	movs	r2, #64	; 0x40
 8001b1c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2203      	movs	r2, #3
 8001b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e0b7      	b.n	8001c9a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a5f      	ldr	r2, [pc, #380]	; (8001cac <HAL_DMA_Init+0x658>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d072      	beq.n	8001c1a <HAL_DMA_Init+0x5c6>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a5d      	ldr	r2, [pc, #372]	; (8001cb0 <HAL_DMA_Init+0x65c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d06d      	beq.n	8001c1a <HAL_DMA_Init+0x5c6>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a5c      	ldr	r2, [pc, #368]	; (8001cb4 <HAL_DMA_Init+0x660>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d068      	beq.n	8001c1a <HAL_DMA_Init+0x5c6>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a5a      	ldr	r2, [pc, #360]	; (8001cb8 <HAL_DMA_Init+0x664>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d063      	beq.n	8001c1a <HAL_DMA_Init+0x5c6>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a59      	ldr	r2, [pc, #356]	; (8001cbc <HAL_DMA_Init+0x668>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d05e      	beq.n	8001c1a <HAL_DMA_Init+0x5c6>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a57      	ldr	r2, [pc, #348]	; (8001cc0 <HAL_DMA_Init+0x66c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d059      	beq.n	8001c1a <HAL_DMA_Init+0x5c6>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a56      	ldr	r2, [pc, #344]	; (8001cc4 <HAL_DMA_Init+0x670>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d054      	beq.n	8001c1a <HAL_DMA_Init+0x5c6>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a54      	ldr	r2, [pc, #336]	; (8001cc8 <HAL_DMA_Init+0x674>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d04f      	beq.n	8001c1a <HAL_DMA_Init+0x5c6>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a53      	ldr	r2, [pc, #332]	; (8001ccc <HAL_DMA_Init+0x678>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d04a      	beq.n	8001c1a <HAL_DMA_Init+0x5c6>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a51      	ldr	r2, [pc, #324]	; (8001cd0 <HAL_DMA_Init+0x67c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d045      	beq.n	8001c1a <HAL_DMA_Init+0x5c6>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a50      	ldr	r2, [pc, #320]	; (8001cd4 <HAL_DMA_Init+0x680>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d040      	beq.n	8001c1a <HAL_DMA_Init+0x5c6>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a4e      	ldr	r2, [pc, #312]	; (8001cd8 <HAL_DMA_Init+0x684>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d03b      	beq.n	8001c1a <HAL_DMA_Init+0x5c6>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a4d      	ldr	r2, [pc, #308]	; (8001cdc <HAL_DMA_Init+0x688>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d036      	beq.n	8001c1a <HAL_DMA_Init+0x5c6>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a4b      	ldr	r2, [pc, #300]	; (8001ce0 <HAL_DMA_Init+0x68c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d031      	beq.n	8001c1a <HAL_DMA_Init+0x5c6>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a4a      	ldr	r2, [pc, #296]	; (8001ce4 <HAL_DMA_Init+0x690>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d02c      	beq.n	8001c1a <HAL_DMA_Init+0x5c6>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a48      	ldr	r2, [pc, #288]	; (8001ce8 <HAL_DMA_Init+0x694>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d027      	beq.n	8001c1a <HAL_DMA_Init+0x5c6>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a47      	ldr	r2, [pc, #284]	; (8001cec <HAL_DMA_Init+0x698>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d022      	beq.n	8001c1a <HAL_DMA_Init+0x5c6>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a45      	ldr	r2, [pc, #276]	; (8001cf0 <HAL_DMA_Init+0x69c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d01d      	beq.n	8001c1a <HAL_DMA_Init+0x5c6>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a44      	ldr	r2, [pc, #272]	; (8001cf4 <HAL_DMA_Init+0x6a0>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d018      	beq.n	8001c1a <HAL_DMA_Init+0x5c6>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a42      	ldr	r2, [pc, #264]	; (8001cf8 <HAL_DMA_Init+0x6a4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d013      	beq.n	8001c1a <HAL_DMA_Init+0x5c6>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a41      	ldr	r2, [pc, #260]	; (8001cfc <HAL_DMA_Init+0x6a8>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d00e      	beq.n	8001c1a <HAL_DMA_Init+0x5c6>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a3f      	ldr	r2, [pc, #252]	; (8001d00 <HAL_DMA_Init+0x6ac>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d009      	beq.n	8001c1a <HAL_DMA_Init+0x5c6>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a3e      	ldr	r2, [pc, #248]	; (8001d04 <HAL_DMA_Init+0x6b0>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d004      	beq.n	8001c1a <HAL_DMA_Init+0x5c6>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a3c      	ldr	r2, [pc, #240]	; (8001d08 <HAL_DMA_Init+0x6b4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d101      	bne.n	8001c1e <HAL_DMA_Init+0x5ca>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <HAL_DMA_Init+0x5cc>
 8001c1e:	2300      	movs	r3, #0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d032      	beq.n	8001c8a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f001 ff2f 	bl	8003a88 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b80      	cmp	r3, #128	; 0x80
 8001c30:	d102      	bne.n	8001c38 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001c4c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d010      	beq.n	8001c78 <HAL_DMA_Init+0x624>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d80c      	bhi.n	8001c78 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f001 ffac 	bl	8003bbc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	e008      	b.n	8001c8a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	a7fdabf8 	.word	0xa7fdabf8
 8001ca8:	cccccccd 	.word	0xcccccccd
 8001cac:	40020010 	.word	0x40020010
 8001cb0:	40020028 	.word	0x40020028
 8001cb4:	40020040 	.word	0x40020040
 8001cb8:	40020058 	.word	0x40020058
 8001cbc:	40020070 	.word	0x40020070
 8001cc0:	40020088 	.word	0x40020088
 8001cc4:	400200a0 	.word	0x400200a0
 8001cc8:	400200b8 	.word	0x400200b8
 8001ccc:	40020410 	.word	0x40020410
 8001cd0:	40020428 	.word	0x40020428
 8001cd4:	40020440 	.word	0x40020440
 8001cd8:	40020458 	.word	0x40020458
 8001cdc:	40020470 	.word	0x40020470
 8001ce0:	40020488 	.word	0x40020488
 8001ce4:	400204a0 	.word	0x400204a0
 8001ce8:	400204b8 	.word	0x400204b8
 8001cec:	58025408 	.word	0x58025408
 8001cf0:	5802541c 	.word	0x5802541c
 8001cf4:	58025430 	.word	0x58025430
 8001cf8:	58025444 	.word	0x58025444
 8001cfc:	58025458 	.word	0x58025458
 8001d00:	5802546c 	.word	0x5802546c
 8001d04:	58025480 	.word	0x58025480
 8001d08:	58025494 	.word	0x58025494

08001d0c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e226      	b.n	8002176 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_DMA_Start_IT+0x2a>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e21f      	b.n	8002176 <HAL_DMA_Start_IT+0x46a>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	f040 820a 	bne.w	8002160 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2202      	movs	r2, #2
 8001d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a68      	ldr	r2, [pc, #416]	; (8001f00 <HAL_DMA_Start_IT+0x1f4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d04a      	beq.n	8001dfa <HAL_DMA_Start_IT+0xee>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a66      	ldr	r2, [pc, #408]	; (8001f04 <HAL_DMA_Start_IT+0x1f8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d045      	beq.n	8001dfa <HAL_DMA_Start_IT+0xee>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a65      	ldr	r2, [pc, #404]	; (8001f08 <HAL_DMA_Start_IT+0x1fc>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d040      	beq.n	8001dfa <HAL_DMA_Start_IT+0xee>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a63      	ldr	r2, [pc, #396]	; (8001f0c <HAL_DMA_Start_IT+0x200>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d03b      	beq.n	8001dfa <HAL_DMA_Start_IT+0xee>
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a62      	ldr	r2, [pc, #392]	; (8001f10 <HAL_DMA_Start_IT+0x204>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d036      	beq.n	8001dfa <HAL_DMA_Start_IT+0xee>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a60      	ldr	r2, [pc, #384]	; (8001f14 <HAL_DMA_Start_IT+0x208>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d031      	beq.n	8001dfa <HAL_DMA_Start_IT+0xee>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a5f      	ldr	r2, [pc, #380]	; (8001f18 <HAL_DMA_Start_IT+0x20c>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d02c      	beq.n	8001dfa <HAL_DMA_Start_IT+0xee>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a5d      	ldr	r2, [pc, #372]	; (8001f1c <HAL_DMA_Start_IT+0x210>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d027      	beq.n	8001dfa <HAL_DMA_Start_IT+0xee>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a5c      	ldr	r2, [pc, #368]	; (8001f20 <HAL_DMA_Start_IT+0x214>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d022      	beq.n	8001dfa <HAL_DMA_Start_IT+0xee>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a5a      	ldr	r2, [pc, #360]	; (8001f24 <HAL_DMA_Start_IT+0x218>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d01d      	beq.n	8001dfa <HAL_DMA_Start_IT+0xee>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a59      	ldr	r2, [pc, #356]	; (8001f28 <HAL_DMA_Start_IT+0x21c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d018      	beq.n	8001dfa <HAL_DMA_Start_IT+0xee>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a57      	ldr	r2, [pc, #348]	; (8001f2c <HAL_DMA_Start_IT+0x220>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d013      	beq.n	8001dfa <HAL_DMA_Start_IT+0xee>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a56      	ldr	r2, [pc, #344]	; (8001f30 <HAL_DMA_Start_IT+0x224>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d00e      	beq.n	8001dfa <HAL_DMA_Start_IT+0xee>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a54      	ldr	r2, [pc, #336]	; (8001f34 <HAL_DMA_Start_IT+0x228>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d009      	beq.n	8001dfa <HAL_DMA_Start_IT+0xee>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a53      	ldr	r2, [pc, #332]	; (8001f38 <HAL_DMA_Start_IT+0x22c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d004      	beq.n	8001dfa <HAL_DMA_Start_IT+0xee>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a51      	ldr	r2, [pc, #324]	; (8001f3c <HAL_DMA_Start_IT+0x230>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d108      	bne.n	8001e0c <HAL_DMA_Start_IT+0x100>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0201 	bic.w	r2, r2, #1
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	e007      	b.n	8001e1c <HAL_DMA_Start_IT+0x110>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0201 	bic.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f001 fb56 	bl	80034d4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a34      	ldr	r2, [pc, #208]	; (8001f00 <HAL_DMA_Start_IT+0x1f4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d04a      	beq.n	8001ec8 <HAL_DMA_Start_IT+0x1bc>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a33      	ldr	r2, [pc, #204]	; (8001f04 <HAL_DMA_Start_IT+0x1f8>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d045      	beq.n	8001ec8 <HAL_DMA_Start_IT+0x1bc>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a31      	ldr	r2, [pc, #196]	; (8001f08 <HAL_DMA_Start_IT+0x1fc>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d040      	beq.n	8001ec8 <HAL_DMA_Start_IT+0x1bc>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a30      	ldr	r2, [pc, #192]	; (8001f0c <HAL_DMA_Start_IT+0x200>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d03b      	beq.n	8001ec8 <HAL_DMA_Start_IT+0x1bc>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a2e      	ldr	r2, [pc, #184]	; (8001f10 <HAL_DMA_Start_IT+0x204>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d036      	beq.n	8001ec8 <HAL_DMA_Start_IT+0x1bc>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a2d      	ldr	r2, [pc, #180]	; (8001f14 <HAL_DMA_Start_IT+0x208>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d031      	beq.n	8001ec8 <HAL_DMA_Start_IT+0x1bc>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a2b      	ldr	r2, [pc, #172]	; (8001f18 <HAL_DMA_Start_IT+0x20c>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d02c      	beq.n	8001ec8 <HAL_DMA_Start_IT+0x1bc>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a2a      	ldr	r2, [pc, #168]	; (8001f1c <HAL_DMA_Start_IT+0x210>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d027      	beq.n	8001ec8 <HAL_DMA_Start_IT+0x1bc>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a28      	ldr	r2, [pc, #160]	; (8001f20 <HAL_DMA_Start_IT+0x214>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d022      	beq.n	8001ec8 <HAL_DMA_Start_IT+0x1bc>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a27      	ldr	r2, [pc, #156]	; (8001f24 <HAL_DMA_Start_IT+0x218>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d01d      	beq.n	8001ec8 <HAL_DMA_Start_IT+0x1bc>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a25      	ldr	r2, [pc, #148]	; (8001f28 <HAL_DMA_Start_IT+0x21c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d018      	beq.n	8001ec8 <HAL_DMA_Start_IT+0x1bc>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a24      	ldr	r2, [pc, #144]	; (8001f2c <HAL_DMA_Start_IT+0x220>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d013      	beq.n	8001ec8 <HAL_DMA_Start_IT+0x1bc>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a22      	ldr	r2, [pc, #136]	; (8001f30 <HAL_DMA_Start_IT+0x224>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00e      	beq.n	8001ec8 <HAL_DMA_Start_IT+0x1bc>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a21      	ldr	r2, [pc, #132]	; (8001f34 <HAL_DMA_Start_IT+0x228>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d009      	beq.n	8001ec8 <HAL_DMA_Start_IT+0x1bc>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a1f      	ldr	r2, [pc, #124]	; (8001f38 <HAL_DMA_Start_IT+0x22c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d004      	beq.n	8001ec8 <HAL_DMA_Start_IT+0x1bc>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a1e      	ldr	r2, [pc, #120]	; (8001f3c <HAL_DMA_Start_IT+0x230>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d101      	bne.n	8001ecc <HAL_DMA_Start_IT+0x1c0>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e000      	b.n	8001ece <HAL_DMA_Start_IT+0x1c2>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d036      	beq.n	8001f40 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f023 021e 	bic.w	r2, r3, #30
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f042 0216 	orr.w	r2, r2, #22
 8001ee4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d03e      	beq.n	8001f6c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 0208 	orr.w	r2, r2, #8
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	e035      	b.n	8001f6c <HAL_DMA_Start_IT+0x260>
 8001f00:	40020010 	.word	0x40020010
 8001f04:	40020028 	.word	0x40020028
 8001f08:	40020040 	.word	0x40020040
 8001f0c:	40020058 	.word	0x40020058
 8001f10:	40020070 	.word	0x40020070
 8001f14:	40020088 	.word	0x40020088
 8001f18:	400200a0 	.word	0x400200a0
 8001f1c:	400200b8 	.word	0x400200b8
 8001f20:	40020410 	.word	0x40020410
 8001f24:	40020428 	.word	0x40020428
 8001f28:	40020440 	.word	0x40020440
 8001f2c:	40020458 	.word	0x40020458
 8001f30:	40020470 	.word	0x40020470
 8001f34:	40020488 	.word	0x40020488
 8001f38:	400204a0 	.word	0x400204a0
 8001f3c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 020e 	bic.w	r2, r3, #14
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 020a 	orr.w	r2, r2, #10
 8001f52:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d007      	beq.n	8001f6c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0204 	orr.w	r2, r2, #4
 8001f6a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a83      	ldr	r2, [pc, #524]	; (8002180 <HAL_DMA_Start_IT+0x474>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d072      	beq.n	800205c <HAL_DMA_Start_IT+0x350>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a82      	ldr	r2, [pc, #520]	; (8002184 <HAL_DMA_Start_IT+0x478>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d06d      	beq.n	800205c <HAL_DMA_Start_IT+0x350>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a80      	ldr	r2, [pc, #512]	; (8002188 <HAL_DMA_Start_IT+0x47c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d068      	beq.n	800205c <HAL_DMA_Start_IT+0x350>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a7f      	ldr	r2, [pc, #508]	; (800218c <HAL_DMA_Start_IT+0x480>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d063      	beq.n	800205c <HAL_DMA_Start_IT+0x350>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a7d      	ldr	r2, [pc, #500]	; (8002190 <HAL_DMA_Start_IT+0x484>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d05e      	beq.n	800205c <HAL_DMA_Start_IT+0x350>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a7c      	ldr	r2, [pc, #496]	; (8002194 <HAL_DMA_Start_IT+0x488>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d059      	beq.n	800205c <HAL_DMA_Start_IT+0x350>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a7a      	ldr	r2, [pc, #488]	; (8002198 <HAL_DMA_Start_IT+0x48c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d054      	beq.n	800205c <HAL_DMA_Start_IT+0x350>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a79      	ldr	r2, [pc, #484]	; (800219c <HAL_DMA_Start_IT+0x490>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d04f      	beq.n	800205c <HAL_DMA_Start_IT+0x350>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a77      	ldr	r2, [pc, #476]	; (80021a0 <HAL_DMA_Start_IT+0x494>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d04a      	beq.n	800205c <HAL_DMA_Start_IT+0x350>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a76      	ldr	r2, [pc, #472]	; (80021a4 <HAL_DMA_Start_IT+0x498>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d045      	beq.n	800205c <HAL_DMA_Start_IT+0x350>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a74      	ldr	r2, [pc, #464]	; (80021a8 <HAL_DMA_Start_IT+0x49c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d040      	beq.n	800205c <HAL_DMA_Start_IT+0x350>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a73      	ldr	r2, [pc, #460]	; (80021ac <HAL_DMA_Start_IT+0x4a0>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d03b      	beq.n	800205c <HAL_DMA_Start_IT+0x350>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a71      	ldr	r2, [pc, #452]	; (80021b0 <HAL_DMA_Start_IT+0x4a4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d036      	beq.n	800205c <HAL_DMA_Start_IT+0x350>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a70      	ldr	r2, [pc, #448]	; (80021b4 <HAL_DMA_Start_IT+0x4a8>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d031      	beq.n	800205c <HAL_DMA_Start_IT+0x350>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a6e      	ldr	r2, [pc, #440]	; (80021b8 <HAL_DMA_Start_IT+0x4ac>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d02c      	beq.n	800205c <HAL_DMA_Start_IT+0x350>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a6d      	ldr	r2, [pc, #436]	; (80021bc <HAL_DMA_Start_IT+0x4b0>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d027      	beq.n	800205c <HAL_DMA_Start_IT+0x350>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a6b      	ldr	r2, [pc, #428]	; (80021c0 <HAL_DMA_Start_IT+0x4b4>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d022      	beq.n	800205c <HAL_DMA_Start_IT+0x350>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a6a      	ldr	r2, [pc, #424]	; (80021c4 <HAL_DMA_Start_IT+0x4b8>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d01d      	beq.n	800205c <HAL_DMA_Start_IT+0x350>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a68      	ldr	r2, [pc, #416]	; (80021c8 <HAL_DMA_Start_IT+0x4bc>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d018      	beq.n	800205c <HAL_DMA_Start_IT+0x350>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a67      	ldr	r2, [pc, #412]	; (80021cc <HAL_DMA_Start_IT+0x4c0>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d013      	beq.n	800205c <HAL_DMA_Start_IT+0x350>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a65      	ldr	r2, [pc, #404]	; (80021d0 <HAL_DMA_Start_IT+0x4c4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00e      	beq.n	800205c <HAL_DMA_Start_IT+0x350>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a64      	ldr	r2, [pc, #400]	; (80021d4 <HAL_DMA_Start_IT+0x4c8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d009      	beq.n	800205c <HAL_DMA_Start_IT+0x350>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a62      	ldr	r2, [pc, #392]	; (80021d8 <HAL_DMA_Start_IT+0x4cc>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d004      	beq.n	800205c <HAL_DMA_Start_IT+0x350>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a61      	ldr	r2, [pc, #388]	; (80021dc <HAL_DMA_Start_IT+0x4d0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d101      	bne.n	8002060 <HAL_DMA_Start_IT+0x354>
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <HAL_DMA_Start_IT+0x356>
 8002060:	2300      	movs	r3, #0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d01a      	beq.n	800209c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800207e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002082:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002088:	2b00      	cmp	r3, #0
 800208a:	d007      	beq.n	800209c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002096:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800209a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a37      	ldr	r2, [pc, #220]	; (8002180 <HAL_DMA_Start_IT+0x474>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d04a      	beq.n	800213c <HAL_DMA_Start_IT+0x430>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a36      	ldr	r2, [pc, #216]	; (8002184 <HAL_DMA_Start_IT+0x478>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d045      	beq.n	800213c <HAL_DMA_Start_IT+0x430>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a34      	ldr	r2, [pc, #208]	; (8002188 <HAL_DMA_Start_IT+0x47c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d040      	beq.n	800213c <HAL_DMA_Start_IT+0x430>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a33      	ldr	r2, [pc, #204]	; (800218c <HAL_DMA_Start_IT+0x480>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d03b      	beq.n	800213c <HAL_DMA_Start_IT+0x430>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a31      	ldr	r2, [pc, #196]	; (8002190 <HAL_DMA_Start_IT+0x484>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d036      	beq.n	800213c <HAL_DMA_Start_IT+0x430>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a30      	ldr	r2, [pc, #192]	; (8002194 <HAL_DMA_Start_IT+0x488>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d031      	beq.n	800213c <HAL_DMA_Start_IT+0x430>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a2e      	ldr	r2, [pc, #184]	; (8002198 <HAL_DMA_Start_IT+0x48c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d02c      	beq.n	800213c <HAL_DMA_Start_IT+0x430>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a2d      	ldr	r2, [pc, #180]	; (800219c <HAL_DMA_Start_IT+0x490>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d027      	beq.n	800213c <HAL_DMA_Start_IT+0x430>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a2b      	ldr	r2, [pc, #172]	; (80021a0 <HAL_DMA_Start_IT+0x494>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d022      	beq.n	800213c <HAL_DMA_Start_IT+0x430>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a2a      	ldr	r2, [pc, #168]	; (80021a4 <HAL_DMA_Start_IT+0x498>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d01d      	beq.n	800213c <HAL_DMA_Start_IT+0x430>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a28      	ldr	r2, [pc, #160]	; (80021a8 <HAL_DMA_Start_IT+0x49c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d018      	beq.n	800213c <HAL_DMA_Start_IT+0x430>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a27      	ldr	r2, [pc, #156]	; (80021ac <HAL_DMA_Start_IT+0x4a0>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d013      	beq.n	800213c <HAL_DMA_Start_IT+0x430>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a25      	ldr	r2, [pc, #148]	; (80021b0 <HAL_DMA_Start_IT+0x4a4>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d00e      	beq.n	800213c <HAL_DMA_Start_IT+0x430>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a24      	ldr	r2, [pc, #144]	; (80021b4 <HAL_DMA_Start_IT+0x4a8>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d009      	beq.n	800213c <HAL_DMA_Start_IT+0x430>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a22      	ldr	r2, [pc, #136]	; (80021b8 <HAL_DMA_Start_IT+0x4ac>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d004      	beq.n	800213c <HAL_DMA_Start_IT+0x430>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a21      	ldr	r2, [pc, #132]	; (80021bc <HAL_DMA_Start_IT+0x4b0>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d108      	bne.n	800214e <HAL_DMA_Start_IT+0x442>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	e012      	b.n	8002174 <HAL_DMA_Start_IT+0x468>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0201 	orr.w	r2, r2, #1
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	e009      	b.n	8002174 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800216e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002174:	7dfb      	ldrb	r3, [r7, #23]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40020010 	.word	0x40020010
 8002184:	40020028 	.word	0x40020028
 8002188:	40020040 	.word	0x40020040
 800218c:	40020058 	.word	0x40020058
 8002190:	40020070 	.word	0x40020070
 8002194:	40020088 	.word	0x40020088
 8002198:	400200a0 	.word	0x400200a0
 800219c:	400200b8 	.word	0x400200b8
 80021a0:	40020410 	.word	0x40020410
 80021a4:	40020428 	.word	0x40020428
 80021a8:	40020440 	.word	0x40020440
 80021ac:	40020458 	.word	0x40020458
 80021b0:	40020470 	.word	0x40020470
 80021b4:	40020488 	.word	0x40020488
 80021b8:	400204a0 	.word	0x400204a0
 80021bc:	400204b8 	.word	0x400204b8
 80021c0:	58025408 	.word	0x58025408
 80021c4:	5802541c 	.word	0x5802541c
 80021c8:	58025430 	.word	0x58025430
 80021cc:	58025444 	.word	0x58025444
 80021d0:	58025458 	.word	0x58025458
 80021d4:	5802546c 	.word	0x5802546c
 80021d8:	58025480 	.word	0x58025480
 80021dc:	58025494 	.word	0x58025494

080021e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e205      	b.n	80025fe <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d004      	beq.n	8002208 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2280      	movs	r2, #128	; 0x80
 8002202:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e1fa      	b.n	80025fe <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a8c      	ldr	r2, [pc, #560]	; (8002440 <HAL_DMA_Abort_IT+0x260>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d04a      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a8b      	ldr	r2, [pc, #556]	; (8002444 <HAL_DMA_Abort_IT+0x264>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d045      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a89      	ldr	r2, [pc, #548]	; (8002448 <HAL_DMA_Abort_IT+0x268>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d040      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a88      	ldr	r2, [pc, #544]	; (800244c <HAL_DMA_Abort_IT+0x26c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d03b      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a86      	ldr	r2, [pc, #536]	; (8002450 <HAL_DMA_Abort_IT+0x270>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d036      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a85      	ldr	r2, [pc, #532]	; (8002454 <HAL_DMA_Abort_IT+0x274>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d031      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a83      	ldr	r2, [pc, #524]	; (8002458 <HAL_DMA_Abort_IT+0x278>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d02c      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a82      	ldr	r2, [pc, #520]	; (800245c <HAL_DMA_Abort_IT+0x27c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d027      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a80      	ldr	r2, [pc, #512]	; (8002460 <HAL_DMA_Abort_IT+0x280>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d022      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a7f      	ldr	r2, [pc, #508]	; (8002464 <HAL_DMA_Abort_IT+0x284>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d01d      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a7d      	ldr	r2, [pc, #500]	; (8002468 <HAL_DMA_Abort_IT+0x288>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d018      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a7c      	ldr	r2, [pc, #496]	; (800246c <HAL_DMA_Abort_IT+0x28c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d013      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a7a      	ldr	r2, [pc, #488]	; (8002470 <HAL_DMA_Abort_IT+0x290>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d00e      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a79      	ldr	r2, [pc, #484]	; (8002474 <HAL_DMA_Abort_IT+0x294>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d009      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a77      	ldr	r2, [pc, #476]	; (8002478 <HAL_DMA_Abort_IT+0x298>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d004      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a76      	ldr	r2, [pc, #472]	; (800247c <HAL_DMA_Abort_IT+0x29c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d101      	bne.n	80022ac <HAL_DMA_Abort_IT+0xcc>
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <HAL_DMA_Abort_IT+0xce>
 80022ac:	2300      	movs	r3, #0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d065      	beq.n	800237e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2204      	movs	r2, #4
 80022b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a60      	ldr	r2, [pc, #384]	; (8002440 <HAL_DMA_Abort_IT+0x260>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d04a      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a5e      	ldr	r2, [pc, #376]	; (8002444 <HAL_DMA_Abort_IT+0x264>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d045      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a5d      	ldr	r2, [pc, #372]	; (8002448 <HAL_DMA_Abort_IT+0x268>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d040      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a5b      	ldr	r2, [pc, #364]	; (800244c <HAL_DMA_Abort_IT+0x26c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d03b      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a5a      	ldr	r2, [pc, #360]	; (8002450 <HAL_DMA_Abort_IT+0x270>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d036      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a58      	ldr	r2, [pc, #352]	; (8002454 <HAL_DMA_Abort_IT+0x274>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d031      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a57      	ldr	r2, [pc, #348]	; (8002458 <HAL_DMA_Abort_IT+0x278>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d02c      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a55      	ldr	r2, [pc, #340]	; (800245c <HAL_DMA_Abort_IT+0x27c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d027      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a54      	ldr	r2, [pc, #336]	; (8002460 <HAL_DMA_Abort_IT+0x280>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d022      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a52      	ldr	r2, [pc, #328]	; (8002464 <HAL_DMA_Abort_IT+0x284>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d01d      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a51      	ldr	r2, [pc, #324]	; (8002468 <HAL_DMA_Abort_IT+0x288>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d018      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a4f      	ldr	r2, [pc, #316]	; (800246c <HAL_DMA_Abort_IT+0x28c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d013      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a4e      	ldr	r2, [pc, #312]	; (8002470 <HAL_DMA_Abort_IT+0x290>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d00e      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a4c      	ldr	r2, [pc, #304]	; (8002474 <HAL_DMA_Abort_IT+0x294>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d009      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a4b      	ldr	r2, [pc, #300]	; (8002478 <HAL_DMA_Abort_IT+0x298>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d004      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a49      	ldr	r2, [pc, #292]	; (800247c <HAL_DMA_Abort_IT+0x29c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d108      	bne.n	800236c <HAL_DMA_Abort_IT+0x18c>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0201 	bic.w	r2, r2, #1
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	e147      	b.n	80025fc <HAL_DMA_Abort_IT+0x41c>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0201 	bic.w	r2, r2, #1
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	e13e      	b.n	80025fc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 020e 	bic.w	r2, r2, #14
 800238c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a2b      	ldr	r2, [pc, #172]	; (8002440 <HAL_DMA_Abort_IT+0x260>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d04a      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a29      	ldr	r2, [pc, #164]	; (8002444 <HAL_DMA_Abort_IT+0x264>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d045      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a28      	ldr	r2, [pc, #160]	; (8002448 <HAL_DMA_Abort_IT+0x268>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d040      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a26      	ldr	r2, [pc, #152]	; (800244c <HAL_DMA_Abort_IT+0x26c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d03b      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a25      	ldr	r2, [pc, #148]	; (8002450 <HAL_DMA_Abort_IT+0x270>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d036      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a23      	ldr	r2, [pc, #140]	; (8002454 <HAL_DMA_Abort_IT+0x274>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d031      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a22      	ldr	r2, [pc, #136]	; (8002458 <HAL_DMA_Abort_IT+0x278>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d02c      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a20      	ldr	r2, [pc, #128]	; (800245c <HAL_DMA_Abort_IT+0x27c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d027      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a1f      	ldr	r2, [pc, #124]	; (8002460 <HAL_DMA_Abort_IT+0x280>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d022      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a1d      	ldr	r2, [pc, #116]	; (8002464 <HAL_DMA_Abort_IT+0x284>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d01d      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a1c      	ldr	r2, [pc, #112]	; (8002468 <HAL_DMA_Abort_IT+0x288>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d018      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a1a      	ldr	r2, [pc, #104]	; (800246c <HAL_DMA_Abort_IT+0x28c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d013      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a19      	ldr	r2, [pc, #100]	; (8002470 <HAL_DMA_Abort_IT+0x290>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d00e      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a17      	ldr	r2, [pc, #92]	; (8002474 <HAL_DMA_Abort_IT+0x294>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d009      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a16      	ldr	r2, [pc, #88]	; (8002478 <HAL_DMA_Abort_IT+0x298>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d004      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a14      	ldr	r2, [pc, #80]	; (800247c <HAL_DMA_Abort_IT+0x29c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d128      	bne.n	8002480 <HAL_DMA_Abort_IT+0x2a0>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0201 	bic.w	r2, r2, #1
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	e027      	b.n	8002490 <HAL_DMA_Abort_IT+0x2b0>
 8002440:	40020010 	.word	0x40020010
 8002444:	40020028 	.word	0x40020028
 8002448:	40020040 	.word	0x40020040
 800244c:	40020058 	.word	0x40020058
 8002450:	40020070 	.word	0x40020070
 8002454:	40020088 	.word	0x40020088
 8002458:	400200a0 	.word	0x400200a0
 800245c:	400200b8 	.word	0x400200b8
 8002460:	40020410 	.word	0x40020410
 8002464:	40020428 	.word	0x40020428
 8002468:	40020440 	.word	0x40020440
 800246c:	40020458 	.word	0x40020458
 8002470:	40020470 	.word	0x40020470
 8002474:	40020488 	.word	0x40020488
 8002478:	400204a0 	.word	0x400204a0
 800247c:	400204b8 	.word	0x400204b8
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0201 	bic.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a5c      	ldr	r2, [pc, #368]	; (8002608 <HAL_DMA_Abort_IT+0x428>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d072      	beq.n	8002580 <HAL_DMA_Abort_IT+0x3a0>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a5b      	ldr	r2, [pc, #364]	; (800260c <HAL_DMA_Abort_IT+0x42c>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d06d      	beq.n	8002580 <HAL_DMA_Abort_IT+0x3a0>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a59      	ldr	r2, [pc, #356]	; (8002610 <HAL_DMA_Abort_IT+0x430>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d068      	beq.n	8002580 <HAL_DMA_Abort_IT+0x3a0>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a58      	ldr	r2, [pc, #352]	; (8002614 <HAL_DMA_Abort_IT+0x434>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d063      	beq.n	8002580 <HAL_DMA_Abort_IT+0x3a0>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a56      	ldr	r2, [pc, #344]	; (8002618 <HAL_DMA_Abort_IT+0x438>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d05e      	beq.n	8002580 <HAL_DMA_Abort_IT+0x3a0>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a55      	ldr	r2, [pc, #340]	; (800261c <HAL_DMA_Abort_IT+0x43c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d059      	beq.n	8002580 <HAL_DMA_Abort_IT+0x3a0>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a53      	ldr	r2, [pc, #332]	; (8002620 <HAL_DMA_Abort_IT+0x440>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d054      	beq.n	8002580 <HAL_DMA_Abort_IT+0x3a0>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a52      	ldr	r2, [pc, #328]	; (8002624 <HAL_DMA_Abort_IT+0x444>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d04f      	beq.n	8002580 <HAL_DMA_Abort_IT+0x3a0>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a50      	ldr	r2, [pc, #320]	; (8002628 <HAL_DMA_Abort_IT+0x448>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d04a      	beq.n	8002580 <HAL_DMA_Abort_IT+0x3a0>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a4f      	ldr	r2, [pc, #316]	; (800262c <HAL_DMA_Abort_IT+0x44c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d045      	beq.n	8002580 <HAL_DMA_Abort_IT+0x3a0>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a4d      	ldr	r2, [pc, #308]	; (8002630 <HAL_DMA_Abort_IT+0x450>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d040      	beq.n	8002580 <HAL_DMA_Abort_IT+0x3a0>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a4c      	ldr	r2, [pc, #304]	; (8002634 <HAL_DMA_Abort_IT+0x454>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d03b      	beq.n	8002580 <HAL_DMA_Abort_IT+0x3a0>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a4a      	ldr	r2, [pc, #296]	; (8002638 <HAL_DMA_Abort_IT+0x458>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d036      	beq.n	8002580 <HAL_DMA_Abort_IT+0x3a0>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a49      	ldr	r2, [pc, #292]	; (800263c <HAL_DMA_Abort_IT+0x45c>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d031      	beq.n	8002580 <HAL_DMA_Abort_IT+0x3a0>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a47      	ldr	r2, [pc, #284]	; (8002640 <HAL_DMA_Abort_IT+0x460>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d02c      	beq.n	8002580 <HAL_DMA_Abort_IT+0x3a0>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a46      	ldr	r2, [pc, #280]	; (8002644 <HAL_DMA_Abort_IT+0x464>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d027      	beq.n	8002580 <HAL_DMA_Abort_IT+0x3a0>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a44      	ldr	r2, [pc, #272]	; (8002648 <HAL_DMA_Abort_IT+0x468>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d022      	beq.n	8002580 <HAL_DMA_Abort_IT+0x3a0>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a43      	ldr	r2, [pc, #268]	; (800264c <HAL_DMA_Abort_IT+0x46c>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d01d      	beq.n	8002580 <HAL_DMA_Abort_IT+0x3a0>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a41      	ldr	r2, [pc, #260]	; (8002650 <HAL_DMA_Abort_IT+0x470>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d018      	beq.n	8002580 <HAL_DMA_Abort_IT+0x3a0>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a40      	ldr	r2, [pc, #256]	; (8002654 <HAL_DMA_Abort_IT+0x474>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d013      	beq.n	8002580 <HAL_DMA_Abort_IT+0x3a0>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a3e      	ldr	r2, [pc, #248]	; (8002658 <HAL_DMA_Abort_IT+0x478>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d00e      	beq.n	8002580 <HAL_DMA_Abort_IT+0x3a0>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a3d      	ldr	r2, [pc, #244]	; (800265c <HAL_DMA_Abort_IT+0x47c>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d009      	beq.n	8002580 <HAL_DMA_Abort_IT+0x3a0>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a3b      	ldr	r2, [pc, #236]	; (8002660 <HAL_DMA_Abort_IT+0x480>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d004      	beq.n	8002580 <HAL_DMA_Abort_IT+0x3a0>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a3a      	ldr	r2, [pc, #232]	; (8002664 <HAL_DMA_Abort_IT+0x484>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d101      	bne.n	8002584 <HAL_DMA_Abort_IT+0x3a4>
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <HAL_DMA_Abort_IT+0x3a6>
 8002584:	2300      	movs	r3, #0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d028      	beq.n	80025dc <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002594:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002598:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a4:	f003 031f 	and.w	r3, r3, #31
 80025a8:	2201      	movs	r2, #1
 80025aa:	409a      	lsls	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80025b8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00c      	beq.n	80025dc <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025d0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80025da:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40020010 	.word	0x40020010
 800260c:	40020028 	.word	0x40020028
 8002610:	40020040 	.word	0x40020040
 8002614:	40020058 	.word	0x40020058
 8002618:	40020070 	.word	0x40020070
 800261c:	40020088 	.word	0x40020088
 8002620:	400200a0 	.word	0x400200a0
 8002624:	400200b8 	.word	0x400200b8
 8002628:	40020410 	.word	0x40020410
 800262c:	40020428 	.word	0x40020428
 8002630:	40020440 	.word	0x40020440
 8002634:	40020458 	.word	0x40020458
 8002638:	40020470 	.word	0x40020470
 800263c:	40020488 	.word	0x40020488
 8002640:	400204a0 	.word	0x400204a0
 8002644:	400204b8 	.word	0x400204b8
 8002648:	58025408 	.word	0x58025408
 800264c:	5802541c 	.word	0x5802541c
 8002650:	58025430 	.word	0x58025430
 8002654:	58025444 	.word	0x58025444
 8002658:	58025458 	.word	0x58025458
 800265c:	5802546c 	.word	0x5802546c
 8002660:	58025480 	.word	0x58025480
 8002664:	58025494 	.word	0x58025494

08002668 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08a      	sub	sp, #40	; 0x28
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002674:	4b67      	ldr	r3, [pc, #412]	; (8002814 <HAL_DMA_IRQHandler+0x1ac>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a67      	ldr	r2, [pc, #412]	; (8002818 <HAL_DMA_IRQHandler+0x1b0>)
 800267a:	fba2 2303 	umull	r2, r3, r2, r3
 800267e:	0a9b      	lsrs	r3, r3, #10
 8002680:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002686:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a5f      	ldr	r2, [pc, #380]	; (800281c <HAL_DMA_IRQHandler+0x1b4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d04a      	beq.n	800273a <HAL_DMA_IRQHandler+0xd2>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a5d      	ldr	r2, [pc, #372]	; (8002820 <HAL_DMA_IRQHandler+0x1b8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d045      	beq.n	800273a <HAL_DMA_IRQHandler+0xd2>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a5c      	ldr	r2, [pc, #368]	; (8002824 <HAL_DMA_IRQHandler+0x1bc>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d040      	beq.n	800273a <HAL_DMA_IRQHandler+0xd2>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a5a      	ldr	r2, [pc, #360]	; (8002828 <HAL_DMA_IRQHandler+0x1c0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d03b      	beq.n	800273a <HAL_DMA_IRQHandler+0xd2>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a59      	ldr	r2, [pc, #356]	; (800282c <HAL_DMA_IRQHandler+0x1c4>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d036      	beq.n	800273a <HAL_DMA_IRQHandler+0xd2>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a57      	ldr	r2, [pc, #348]	; (8002830 <HAL_DMA_IRQHandler+0x1c8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d031      	beq.n	800273a <HAL_DMA_IRQHandler+0xd2>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a56      	ldr	r2, [pc, #344]	; (8002834 <HAL_DMA_IRQHandler+0x1cc>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d02c      	beq.n	800273a <HAL_DMA_IRQHandler+0xd2>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a54      	ldr	r2, [pc, #336]	; (8002838 <HAL_DMA_IRQHandler+0x1d0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d027      	beq.n	800273a <HAL_DMA_IRQHandler+0xd2>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a53      	ldr	r2, [pc, #332]	; (800283c <HAL_DMA_IRQHandler+0x1d4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d022      	beq.n	800273a <HAL_DMA_IRQHandler+0xd2>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a51      	ldr	r2, [pc, #324]	; (8002840 <HAL_DMA_IRQHandler+0x1d8>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d01d      	beq.n	800273a <HAL_DMA_IRQHandler+0xd2>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a50      	ldr	r2, [pc, #320]	; (8002844 <HAL_DMA_IRQHandler+0x1dc>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d018      	beq.n	800273a <HAL_DMA_IRQHandler+0xd2>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a4e      	ldr	r2, [pc, #312]	; (8002848 <HAL_DMA_IRQHandler+0x1e0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d013      	beq.n	800273a <HAL_DMA_IRQHandler+0xd2>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a4d      	ldr	r2, [pc, #308]	; (800284c <HAL_DMA_IRQHandler+0x1e4>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d00e      	beq.n	800273a <HAL_DMA_IRQHandler+0xd2>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a4b      	ldr	r2, [pc, #300]	; (8002850 <HAL_DMA_IRQHandler+0x1e8>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d009      	beq.n	800273a <HAL_DMA_IRQHandler+0xd2>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a4a      	ldr	r2, [pc, #296]	; (8002854 <HAL_DMA_IRQHandler+0x1ec>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d004      	beq.n	800273a <HAL_DMA_IRQHandler+0xd2>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a48      	ldr	r2, [pc, #288]	; (8002858 <HAL_DMA_IRQHandler+0x1f0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d101      	bne.n	800273e <HAL_DMA_IRQHandler+0xd6>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <HAL_DMA_IRQHandler+0xd8>
 800273e:	2300      	movs	r3, #0
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 842b 	beq.w	8002f9c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274a:	f003 031f 	and.w	r3, r3, #31
 800274e:	2208      	movs	r2, #8
 8002750:	409a      	lsls	r2, r3
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	4013      	ands	r3, r2
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 80a2 	beq.w	80028a0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a2e      	ldr	r2, [pc, #184]	; (800281c <HAL_DMA_IRQHandler+0x1b4>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d04a      	beq.n	80027fc <HAL_DMA_IRQHandler+0x194>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a2d      	ldr	r2, [pc, #180]	; (8002820 <HAL_DMA_IRQHandler+0x1b8>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d045      	beq.n	80027fc <HAL_DMA_IRQHandler+0x194>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a2b      	ldr	r2, [pc, #172]	; (8002824 <HAL_DMA_IRQHandler+0x1bc>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d040      	beq.n	80027fc <HAL_DMA_IRQHandler+0x194>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a2a      	ldr	r2, [pc, #168]	; (8002828 <HAL_DMA_IRQHandler+0x1c0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d03b      	beq.n	80027fc <HAL_DMA_IRQHandler+0x194>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a28      	ldr	r2, [pc, #160]	; (800282c <HAL_DMA_IRQHandler+0x1c4>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d036      	beq.n	80027fc <HAL_DMA_IRQHandler+0x194>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a27      	ldr	r2, [pc, #156]	; (8002830 <HAL_DMA_IRQHandler+0x1c8>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d031      	beq.n	80027fc <HAL_DMA_IRQHandler+0x194>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a25      	ldr	r2, [pc, #148]	; (8002834 <HAL_DMA_IRQHandler+0x1cc>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d02c      	beq.n	80027fc <HAL_DMA_IRQHandler+0x194>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a24      	ldr	r2, [pc, #144]	; (8002838 <HAL_DMA_IRQHandler+0x1d0>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d027      	beq.n	80027fc <HAL_DMA_IRQHandler+0x194>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a22      	ldr	r2, [pc, #136]	; (800283c <HAL_DMA_IRQHandler+0x1d4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d022      	beq.n	80027fc <HAL_DMA_IRQHandler+0x194>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a21      	ldr	r2, [pc, #132]	; (8002840 <HAL_DMA_IRQHandler+0x1d8>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d01d      	beq.n	80027fc <HAL_DMA_IRQHandler+0x194>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a1f      	ldr	r2, [pc, #124]	; (8002844 <HAL_DMA_IRQHandler+0x1dc>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d018      	beq.n	80027fc <HAL_DMA_IRQHandler+0x194>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a1e      	ldr	r2, [pc, #120]	; (8002848 <HAL_DMA_IRQHandler+0x1e0>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d013      	beq.n	80027fc <HAL_DMA_IRQHandler+0x194>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a1c      	ldr	r2, [pc, #112]	; (800284c <HAL_DMA_IRQHandler+0x1e4>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d00e      	beq.n	80027fc <HAL_DMA_IRQHandler+0x194>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a1b      	ldr	r2, [pc, #108]	; (8002850 <HAL_DMA_IRQHandler+0x1e8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d009      	beq.n	80027fc <HAL_DMA_IRQHandler+0x194>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a19      	ldr	r2, [pc, #100]	; (8002854 <HAL_DMA_IRQHandler+0x1ec>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d004      	beq.n	80027fc <HAL_DMA_IRQHandler+0x194>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a18      	ldr	r2, [pc, #96]	; (8002858 <HAL_DMA_IRQHandler+0x1f0>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d12f      	bne.n	800285c <HAL_DMA_IRQHandler+0x1f4>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	2b00      	cmp	r3, #0
 8002808:	bf14      	ite	ne
 800280a:	2301      	movne	r3, #1
 800280c:	2300      	moveq	r3, #0
 800280e:	b2db      	uxtb	r3, r3
 8002810:	e02e      	b.n	8002870 <HAL_DMA_IRQHandler+0x208>
 8002812:	bf00      	nop
 8002814:	24000000 	.word	0x24000000
 8002818:	1b4e81b5 	.word	0x1b4e81b5
 800281c:	40020010 	.word	0x40020010
 8002820:	40020028 	.word	0x40020028
 8002824:	40020040 	.word	0x40020040
 8002828:	40020058 	.word	0x40020058
 800282c:	40020070 	.word	0x40020070
 8002830:	40020088 	.word	0x40020088
 8002834:	400200a0 	.word	0x400200a0
 8002838:	400200b8 	.word	0x400200b8
 800283c:	40020410 	.word	0x40020410
 8002840:	40020428 	.word	0x40020428
 8002844:	40020440 	.word	0x40020440
 8002848:	40020458 	.word	0x40020458
 800284c:	40020470 	.word	0x40020470
 8002850:	40020488 	.word	0x40020488
 8002854:	400204a0 	.word	0x400204a0
 8002858:	400204b8 	.word	0x400204b8
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	bf14      	ite	ne
 800286a:	2301      	movne	r3, #1
 800286c:	2300      	moveq	r3, #0
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d015      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0204 	bic.w	r2, r2, #4
 8002882:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002888:	f003 031f 	and.w	r3, r3, #31
 800288c:	2208      	movs	r2, #8
 800288e:	409a      	lsls	r2, r3
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002898:	f043 0201 	orr.w	r2, r3, #1
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	fa22 f303 	lsr.w	r3, r2, r3
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d06e      	beq.n	8002994 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a69      	ldr	r2, [pc, #420]	; (8002a60 <HAL_DMA_IRQHandler+0x3f8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d04a      	beq.n	8002956 <HAL_DMA_IRQHandler+0x2ee>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a67      	ldr	r2, [pc, #412]	; (8002a64 <HAL_DMA_IRQHandler+0x3fc>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d045      	beq.n	8002956 <HAL_DMA_IRQHandler+0x2ee>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a66      	ldr	r2, [pc, #408]	; (8002a68 <HAL_DMA_IRQHandler+0x400>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d040      	beq.n	8002956 <HAL_DMA_IRQHandler+0x2ee>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a64      	ldr	r2, [pc, #400]	; (8002a6c <HAL_DMA_IRQHandler+0x404>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d03b      	beq.n	8002956 <HAL_DMA_IRQHandler+0x2ee>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a63      	ldr	r2, [pc, #396]	; (8002a70 <HAL_DMA_IRQHandler+0x408>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d036      	beq.n	8002956 <HAL_DMA_IRQHandler+0x2ee>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a61      	ldr	r2, [pc, #388]	; (8002a74 <HAL_DMA_IRQHandler+0x40c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d031      	beq.n	8002956 <HAL_DMA_IRQHandler+0x2ee>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a60      	ldr	r2, [pc, #384]	; (8002a78 <HAL_DMA_IRQHandler+0x410>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d02c      	beq.n	8002956 <HAL_DMA_IRQHandler+0x2ee>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a5e      	ldr	r2, [pc, #376]	; (8002a7c <HAL_DMA_IRQHandler+0x414>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d027      	beq.n	8002956 <HAL_DMA_IRQHandler+0x2ee>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a5d      	ldr	r2, [pc, #372]	; (8002a80 <HAL_DMA_IRQHandler+0x418>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d022      	beq.n	8002956 <HAL_DMA_IRQHandler+0x2ee>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a5b      	ldr	r2, [pc, #364]	; (8002a84 <HAL_DMA_IRQHandler+0x41c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d01d      	beq.n	8002956 <HAL_DMA_IRQHandler+0x2ee>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a5a      	ldr	r2, [pc, #360]	; (8002a88 <HAL_DMA_IRQHandler+0x420>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d018      	beq.n	8002956 <HAL_DMA_IRQHandler+0x2ee>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a58      	ldr	r2, [pc, #352]	; (8002a8c <HAL_DMA_IRQHandler+0x424>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d013      	beq.n	8002956 <HAL_DMA_IRQHandler+0x2ee>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a57      	ldr	r2, [pc, #348]	; (8002a90 <HAL_DMA_IRQHandler+0x428>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d00e      	beq.n	8002956 <HAL_DMA_IRQHandler+0x2ee>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a55      	ldr	r2, [pc, #340]	; (8002a94 <HAL_DMA_IRQHandler+0x42c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d009      	beq.n	8002956 <HAL_DMA_IRQHandler+0x2ee>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a54      	ldr	r2, [pc, #336]	; (8002a98 <HAL_DMA_IRQHandler+0x430>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d004      	beq.n	8002956 <HAL_DMA_IRQHandler+0x2ee>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a52      	ldr	r2, [pc, #328]	; (8002a9c <HAL_DMA_IRQHandler+0x434>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d10a      	bne.n	800296c <HAL_DMA_IRQHandler+0x304>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002960:	2b00      	cmp	r3, #0
 8002962:	bf14      	ite	ne
 8002964:	2301      	movne	r3, #1
 8002966:	2300      	moveq	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	e003      	b.n	8002974 <HAL_DMA_IRQHandler+0x30c>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2300      	movs	r3, #0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00d      	beq.n	8002994 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297c:	f003 031f 	and.w	r3, r3, #31
 8002980:	2201      	movs	r2, #1
 8002982:	409a      	lsls	r2, r3
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298c:	f043 0202 	orr.w	r2, r3, #2
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002998:	f003 031f 	and.w	r3, r3, #31
 800299c:	2204      	movs	r2, #4
 800299e:	409a      	lsls	r2, r3
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 808f 	beq.w	8002ac8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a2c      	ldr	r2, [pc, #176]	; (8002a60 <HAL_DMA_IRQHandler+0x3f8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d04a      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x3e2>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a2a      	ldr	r2, [pc, #168]	; (8002a64 <HAL_DMA_IRQHandler+0x3fc>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d045      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x3e2>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a29      	ldr	r2, [pc, #164]	; (8002a68 <HAL_DMA_IRQHandler+0x400>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d040      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x3e2>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a27      	ldr	r2, [pc, #156]	; (8002a6c <HAL_DMA_IRQHandler+0x404>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d03b      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x3e2>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a26      	ldr	r2, [pc, #152]	; (8002a70 <HAL_DMA_IRQHandler+0x408>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d036      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x3e2>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a24      	ldr	r2, [pc, #144]	; (8002a74 <HAL_DMA_IRQHandler+0x40c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d031      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x3e2>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a23      	ldr	r2, [pc, #140]	; (8002a78 <HAL_DMA_IRQHandler+0x410>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d02c      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x3e2>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a21      	ldr	r2, [pc, #132]	; (8002a7c <HAL_DMA_IRQHandler+0x414>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d027      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x3e2>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a20      	ldr	r2, [pc, #128]	; (8002a80 <HAL_DMA_IRQHandler+0x418>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d022      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x3e2>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a1e      	ldr	r2, [pc, #120]	; (8002a84 <HAL_DMA_IRQHandler+0x41c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d01d      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x3e2>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a1d      	ldr	r2, [pc, #116]	; (8002a88 <HAL_DMA_IRQHandler+0x420>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d018      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x3e2>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a1b      	ldr	r2, [pc, #108]	; (8002a8c <HAL_DMA_IRQHandler+0x424>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d013      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x3e2>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a1a      	ldr	r2, [pc, #104]	; (8002a90 <HAL_DMA_IRQHandler+0x428>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d00e      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x3e2>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a18      	ldr	r2, [pc, #96]	; (8002a94 <HAL_DMA_IRQHandler+0x42c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d009      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x3e2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a17      	ldr	r2, [pc, #92]	; (8002a98 <HAL_DMA_IRQHandler+0x430>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d004      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x3e2>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a15      	ldr	r2, [pc, #84]	; (8002a9c <HAL_DMA_IRQHandler+0x434>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d12a      	bne.n	8002aa0 <HAL_DMA_IRQHandler+0x438>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	bf14      	ite	ne
 8002a58:	2301      	movne	r3, #1
 8002a5a:	2300      	moveq	r3, #0
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	e023      	b.n	8002aa8 <HAL_DMA_IRQHandler+0x440>
 8002a60:	40020010 	.word	0x40020010
 8002a64:	40020028 	.word	0x40020028
 8002a68:	40020040 	.word	0x40020040
 8002a6c:	40020058 	.word	0x40020058
 8002a70:	40020070 	.word	0x40020070
 8002a74:	40020088 	.word	0x40020088
 8002a78:	400200a0 	.word	0x400200a0
 8002a7c:	400200b8 	.word	0x400200b8
 8002a80:	40020410 	.word	0x40020410
 8002a84:	40020428 	.word	0x40020428
 8002a88:	40020440 	.word	0x40020440
 8002a8c:	40020458 	.word	0x40020458
 8002a90:	40020470 	.word	0x40020470
 8002a94:	40020488 	.word	0x40020488
 8002a98:	400204a0 	.word	0x400204a0
 8002a9c:	400204b8 	.word	0x400204b8
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00d      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	2204      	movs	r2, #4
 8002ab6:	409a      	lsls	r2, r3
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac0:	f043 0204 	orr.w	r2, r3, #4
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002acc:	f003 031f 	and.w	r3, r3, #31
 8002ad0:	2210      	movs	r2, #16
 8002ad2:	409a      	lsls	r2, r3
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80a6 	beq.w	8002c2a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a85      	ldr	r2, [pc, #532]	; (8002cf8 <HAL_DMA_IRQHandler+0x690>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d04a      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x516>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a83      	ldr	r2, [pc, #524]	; (8002cfc <HAL_DMA_IRQHandler+0x694>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d045      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x516>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a82      	ldr	r2, [pc, #520]	; (8002d00 <HAL_DMA_IRQHandler+0x698>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d040      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x516>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a80      	ldr	r2, [pc, #512]	; (8002d04 <HAL_DMA_IRQHandler+0x69c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d03b      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x516>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a7f      	ldr	r2, [pc, #508]	; (8002d08 <HAL_DMA_IRQHandler+0x6a0>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d036      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x516>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a7d      	ldr	r2, [pc, #500]	; (8002d0c <HAL_DMA_IRQHandler+0x6a4>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d031      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x516>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a7c      	ldr	r2, [pc, #496]	; (8002d10 <HAL_DMA_IRQHandler+0x6a8>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d02c      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x516>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a7a      	ldr	r2, [pc, #488]	; (8002d14 <HAL_DMA_IRQHandler+0x6ac>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d027      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x516>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a79      	ldr	r2, [pc, #484]	; (8002d18 <HAL_DMA_IRQHandler+0x6b0>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d022      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x516>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a77      	ldr	r2, [pc, #476]	; (8002d1c <HAL_DMA_IRQHandler+0x6b4>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d01d      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x516>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a76      	ldr	r2, [pc, #472]	; (8002d20 <HAL_DMA_IRQHandler+0x6b8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d018      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x516>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a74      	ldr	r2, [pc, #464]	; (8002d24 <HAL_DMA_IRQHandler+0x6bc>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d013      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x516>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a73      	ldr	r2, [pc, #460]	; (8002d28 <HAL_DMA_IRQHandler+0x6c0>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d00e      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x516>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a71      	ldr	r2, [pc, #452]	; (8002d2c <HAL_DMA_IRQHandler+0x6c4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d009      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x516>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a70      	ldr	r2, [pc, #448]	; (8002d30 <HAL_DMA_IRQHandler+0x6c8>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d004      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x516>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a6e      	ldr	r2, [pc, #440]	; (8002d34 <HAL_DMA_IRQHandler+0x6cc>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d10a      	bne.n	8002b94 <HAL_DMA_IRQHandler+0x52c>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0308 	and.w	r3, r3, #8
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	bf14      	ite	ne
 8002b8c:	2301      	movne	r3, #1
 8002b8e:	2300      	moveq	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	e009      	b.n	8002ba8 <HAL_DMA_IRQHandler+0x540>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	bf14      	ite	ne
 8002ba2:	2301      	movne	r3, #1
 8002ba4:	2300      	moveq	r3, #0
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d03e      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	2210      	movs	r2, #16
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d018      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d108      	bne.n	8002bea <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d024      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	4798      	blx	r3
 8002be8:	e01f      	b.n	8002c2a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d01b      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	4798      	blx	r3
 8002bfa:	e016      	b.n	8002c2a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d107      	bne.n	8002c1a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0208 	bic.w	r2, r2, #8
 8002c18:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2e:	f003 031f 	and.w	r3, r3, #31
 8002c32:	2220      	movs	r2, #32
 8002c34:	409a      	lsls	r2, r3
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8110 	beq.w	8002e60 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a2c      	ldr	r2, [pc, #176]	; (8002cf8 <HAL_DMA_IRQHandler+0x690>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d04a      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x678>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a2b      	ldr	r2, [pc, #172]	; (8002cfc <HAL_DMA_IRQHandler+0x694>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d045      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x678>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a29      	ldr	r2, [pc, #164]	; (8002d00 <HAL_DMA_IRQHandler+0x698>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d040      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x678>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a28      	ldr	r2, [pc, #160]	; (8002d04 <HAL_DMA_IRQHandler+0x69c>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d03b      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x678>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a26      	ldr	r2, [pc, #152]	; (8002d08 <HAL_DMA_IRQHandler+0x6a0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d036      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x678>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a25      	ldr	r2, [pc, #148]	; (8002d0c <HAL_DMA_IRQHandler+0x6a4>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d031      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x678>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a23      	ldr	r2, [pc, #140]	; (8002d10 <HAL_DMA_IRQHandler+0x6a8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d02c      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x678>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a22      	ldr	r2, [pc, #136]	; (8002d14 <HAL_DMA_IRQHandler+0x6ac>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d027      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x678>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a20      	ldr	r2, [pc, #128]	; (8002d18 <HAL_DMA_IRQHandler+0x6b0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d022      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x678>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a1f      	ldr	r2, [pc, #124]	; (8002d1c <HAL_DMA_IRQHandler+0x6b4>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d01d      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x678>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a1d      	ldr	r2, [pc, #116]	; (8002d20 <HAL_DMA_IRQHandler+0x6b8>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d018      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x678>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a1c      	ldr	r2, [pc, #112]	; (8002d24 <HAL_DMA_IRQHandler+0x6bc>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d013      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x678>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a1a      	ldr	r2, [pc, #104]	; (8002d28 <HAL_DMA_IRQHandler+0x6c0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00e      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x678>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a19      	ldr	r2, [pc, #100]	; (8002d2c <HAL_DMA_IRQHandler+0x6c4>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d009      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x678>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a17      	ldr	r2, [pc, #92]	; (8002d30 <HAL_DMA_IRQHandler+0x6c8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d004      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x678>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a16      	ldr	r2, [pc, #88]	; (8002d34 <HAL_DMA_IRQHandler+0x6cc>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d12b      	bne.n	8002d38 <HAL_DMA_IRQHandler+0x6d0>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0310 	and.w	r3, r3, #16
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	bf14      	ite	ne
 8002cee:	2301      	movne	r3, #1
 8002cf0:	2300      	moveq	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	e02a      	b.n	8002d4c <HAL_DMA_IRQHandler+0x6e4>
 8002cf6:	bf00      	nop
 8002cf8:	40020010 	.word	0x40020010
 8002cfc:	40020028 	.word	0x40020028
 8002d00:	40020040 	.word	0x40020040
 8002d04:	40020058 	.word	0x40020058
 8002d08:	40020070 	.word	0x40020070
 8002d0c:	40020088 	.word	0x40020088
 8002d10:	400200a0 	.word	0x400200a0
 8002d14:	400200b8 	.word	0x400200b8
 8002d18:	40020410 	.word	0x40020410
 8002d1c:	40020428 	.word	0x40020428
 8002d20:	40020440 	.word	0x40020440
 8002d24:	40020458 	.word	0x40020458
 8002d28:	40020470 	.word	0x40020470
 8002d2c:	40020488 	.word	0x40020488
 8002d30:	400204a0 	.word	0x400204a0
 8002d34:	400204b8 	.word	0x400204b8
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	bf14      	ite	ne
 8002d46:	2301      	movne	r3, #1
 8002d48:	2300      	moveq	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 8087 	beq.w	8002e60 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d56:	f003 031f 	and.w	r3, r3, #31
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	409a      	lsls	r2, r3
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d139      	bne.n	8002de2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0216 	bic.w	r2, r2, #22
 8002d7c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695a      	ldr	r2, [r3, #20]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d8c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d103      	bne.n	8002d9e <HAL_DMA_IRQHandler+0x736>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d007      	beq.n	8002dae <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0208 	bic.w	r2, r2, #8
 8002dac:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db2:	f003 031f 	and.w	r3, r3, #31
 8002db6:	223f      	movs	r2, #63	; 0x3f
 8002db8:	409a      	lsls	r2, r3
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 834a 	beq.w	800346c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	4798      	blx	r3
          }
          return;
 8002de0:	e344      	b.n	800346c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d018      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d108      	bne.n	8002e10 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d02c      	beq.n	8002e60 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	4798      	blx	r3
 8002e0e:	e027      	b.n	8002e60 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d023      	beq.n	8002e60 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	4798      	blx	r3
 8002e20:	e01e      	b.n	8002e60 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10f      	bne.n	8002e50 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0210 	bic.w	r2, r2, #16
 8002e3e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 8306 	beq.w	8003476 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 8088 	beq.w	8002f88 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a7a      	ldr	r2, [pc, #488]	; (8003070 <HAL_DMA_IRQHandler+0xa08>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d04a      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x8b8>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a79      	ldr	r2, [pc, #484]	; (8003074 <HAL_DMA_IRQHandler+0xa0c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d045      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x8b8>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a77      	ldr	r2, [pc, #476]	; (8003078 <HAL_DMA_IRQHandler+0xa10>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d040      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x8b8>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a76      	ldr	r2, [pc, #472]	; (800307c <HAL_DMA_IRQHandler+0xa14>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d03b      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x8b8>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a74      	ldr	r2, [pc, #464]	; (8003080 <HAL_DMA_IRQHandler+0xa18>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d036      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x8b8>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a73      	ldr	r2, [pc, #460]	; (8003084 <HAL_DMA_IRQHandler+0xa1c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d031      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x8b8>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a71      	ldr	r2, [pc, #452]	; (8003088 <HAL_DMA_IRQHandler+0xa20>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d02c      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x8b8>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a70      	ldr	r2, [pc, #448]	; (800308c <HAL_DMA_IRQHandler+0xa24>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d027      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x8b8>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a6e      	ldr	r2, [pc, #440]	; (8003090 <HAL_DMA_IRQHandler+0xa28>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d022      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x8b8>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a6d      	ldr	r2, [pc, #436]	; (8003094 <HAL_DMA_IRQHandler+0xa2c>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d01d      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x8b8>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a6b      	ldr	r2, [pc, #428]	; (8003098 <HAL_DMA_IRQHandler+0xa30>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d018      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x8b8>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a6a      	ldr	r2, [pc, #424]	; (800309c <HAL_DMA_IRQHandler+0xa34>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d013      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x8b8>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a68      	ldr	r2, [pc, #416]	; (80030a0 <HAL_DMA_IRQHandler+0xa38>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00e      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x8b8>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a67      	ldr	r2, [pc, #412]	; (80030a4 <HAL_DMA_IRQHandler+0xa3c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d009      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x8b8>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a65      	ldr	r2, [pc, #404]	; (80030a8 <HAL_DMA_IRQHandler+0xa40>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d004      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x8b8>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a64      	ldr	r2, [pc, #400]	; (80030ac <HAL_DMA_IRQHandler+0xa44>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d108      	bne.n	8002f32 <HAL_DMA_IRQHandler+0x8ca>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	e007      	b.n	8002f42 <HAL_DMA_IRQHandler+0x8da>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0201 	bic.w	r2, r2, #1
 8002f40:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3301      	adds	r3, #1
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d307      	bcc.n	8002f5e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1f2      	bne.n	8002f42 <HAL_DMA_IRQHandler+0x8da>
 8002f5c:	e000      	b.n	8002f60 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002f5e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d004      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2203      	movs	r2, #3
 8002f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002f7e:	e003      	b.n	8002f88 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 8272 	beq.w	8003476 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	4798      	blx	r3
 8002f9a:	e26c      	b.n	8003476 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a43      	ldr	r2, [pc, #268]	; (80030b0 <HAL_DMA_IRQHandler+0xa48>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d022      	beq.n	8002fec <HAL_DMA_IRQHandler+0x984>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a42      	ldr	r2, [pc, #264]	; (80030b4 <HAL_DMA_IRQHandler+0xa4c>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d01d      	beq.n	8002fec <HAL_DMA_IRQHandler+0x984>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a40      	ldr	r2, [pc, #256]	; (80030b8 <HAL_DMA_IRQHandler+0xa50>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d018      	beq.n	8002fec <HAL_DMA_IRQHandler+0x984>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a3f      	ldr	r2, [pc, #252]	; (80030bc <HAL_DMA_IRQHandler+0xa54>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d013      	beq.n	8002fec <HAL_DMA_IRQHandler+0x984>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a3d      	ldr	r2, [pc, #244]	; (80030c0 <HAL_DMA_IRQHandler+0xa58>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d00e      	beq.n	8002fec <HAL_DMA_IRQHandler+0x984>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a3c      	ldr	r2, [pc, #240]	; (80030c4 <HAL_DMA_IRQHandler+0xa5c>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d009      	beq.n	8002fec <HAL_DMA_IRQHandler+0x984>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a3a      	ldr	r2, [pc, #232]	; (80030c8 <HAL_DMA_IRQHandler+0xa60>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d004      	beq.n	8002fec <HAL_DMA_IRQHandler+0x984>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a39      	ldr	r2, [pc, #228]	; (80030cc <HAL_DMA_IRQHandler+0xa64>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d101      	bne.n	8002ff0 <HAL_DMA_IRQHandler+0x988>
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <HAL_DMA_IRQHandler+0x98a>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 823f 	beq.w	8003476 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003004:	f003 031f 	and.w	r3, r3, #31
 8003008:	2204      	movs	r2, #4
 800300a:	409a      	lsls	r2, r3
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	4013      	ands	r3, r2
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 80cd 	beq.w	80031b0 <HAL_DMA_IRQHandler+0xb48>
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 80c7 	beq.w	80031b0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003026:	f003 031f 	and.w	r3, r3, #31
 800302a:	2204      	movs	r2, #4
 800302c:	409a      	lsls	r2, r3
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d049      	beq.n	80030d0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d109      	bne.n	800305a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 8210 	beq.w	8003470 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003058:	e20a      	b.n	8003470 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 8206 	beq.w	8003470 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800306c:	e200      	b.n	8003470 <HAL_DMA_IRQHandler+0xe08>
 800306e:	bf00      	nop
 8003070:	40020010 	.word	0x40020010
 8003074:	40020028 	.word	0x40020028
 8003078:	40020040 	.word	0x40020040
 800307c:	40020058 	.word	0x40020058
 8003080:	40020070 	.word	0x40020070
 8003084:	40020088 	.word	0x40020088
 8003088:	400200a0 	.word	0x400200a0
 800308c:	400200b8 	.word	0x400200b8
 8003090:	40020410 	.word	0x40020410
 8003094:	40020428 	.word	0x40020428
 8003098:	40020440 	.word	0x40020440
 800309c:	40020458 	.word	0x40020458
 80030a0:	40020470 	.word	0x40020470
 80030a4:	40020488 	.word	0x40020488
 80030a8:	400204a0 	.word	0x400204a0
 80030ac:	400204b8 	.word	0x400204b8
 80030b0:	58025408 	.word	0x58025408
 80030b4:	5802541c 	.word	0x5802541c
 80030b8:	58025430 	.word	0x58025430
 80030bc:	58025444 	.word	0x58025444
 80030c0:	58025458 	.word	0x58025458
 80030c4:	5802546c 	.word	0x5802546c
 80030c8:	58025480 	.word	0x58025480
 80030cc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f003 0320 	and.w	r3, r3, #32
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d160      	bne.n	800319c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a8c      	ldr	r2, [pc, #560]	; (8003310 <HAL_DMA_IRQHandler+0xca8>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d04a      	beq.n	800317a <HAL_DMA_IRQHandler+0xb12>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a8a      	ldr	r2, [pc, #552]	; (8003314 <HAL_DMA_IRQHandler+0xcac>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d045      	beq.n	800317a <HAL_DMA_IRQHandler+0xb12>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a89      	ldr	r2, [pc, #548]	; (8003318 <HAL_DMA_IRQHandler+0xcb0>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d040      	beq.n	800317a <HAL_DMA_IRQHandler+0xb12>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a87      	ldr	r2, [pc, #540]	; (800331c <HAL_DMA_IRQHandler+0xcb4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d03b      	beq.n	800317a <HAL_DMA_IRQHandler+0xb12>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a86      	ldr	r2, [pc, #536]	; (8003320 <HAL_DMA_IRQHandler+0xcb8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d036      	beq.n	800317a <HAL_DMA_IRQHandler+0xb12>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a84      	ldr	r2, [pc, #528]	; (8003324 <HAL_DMA_IRQHandler+0xcbc>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d031      	beq.n	800317a <HAL_DMA_IRQHandler+0xb12>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a83      	ldr	r2, [pc, #524]	; (8003328 <HAL_DMA_IRQHandler+0xcc0>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d02c      	beq.n	800317a <HAL_DMA_IRQHandler+0xb12>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a81      	ldr	r2, [pc, #516]	; (800332c <HAL_DMA_IRQHandler+0xcc4>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d027      	beq.n	800317a <HAL_DMA_IRQHandler+0xb12>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a80      	ldr	r2, [pc, #512]	; (8003330 <HAL_DMA_IRQHandler+0xcc8>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d022      	beq.n	800317a <HAL_DMA_IRQHandler+0xb12>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a7e      	ldr	r2, [pc, #504]	; (8003334 <HAL_DMA_IRQHandler+0xccc>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d01d      	beq.n	800317a <HAL_DMA_IRQHandler+0xb12>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a7d      	ldr	r2, [pc, #500]	; (8003338 <HAL_DMA_IRQHandler+0xcd0>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d018      	beq.n	800317a <HAL_DMA_IRQHandler+0xb12>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a7b      	ldr	r2, [pc, #492]	; (800333c <HAL_DMA_IRQHandler+0xcd4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d013      	beq.n	800317a <HAL_DMA_IRQHandler+0xb12>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a7a      	ldr	r2, [pc, #488]	; (8003340 <HAL_DMA_IRQHandler+0xcd8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d00e      	beq.n	800317a <HAL_DMA_IRQHandler+0xb12>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a78      	ldr	r2, [pc, #480]	; (8003344 <HAL_DMA_IRQHandler+0xcdc>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d009      	beq.n	800317a <HAL_DMA_IRQHandler+0xb12>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a77      	ldr	r2, [pc, #476]	; (8003348 <HAL_DMA_IRQHandler+0xce0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d004      	beq.n	800317a <HAL_DMA_IRQHandler+0xb12>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a75      	ldr	r2, [pc, #468]	; (800334c <HAL_DMA_IRQHandler+0xce4>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d108      	bne.n	800318c <HAL_DMA_IRQHandler+0xb24>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0208 	bic.w	r2, r2, #8
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	e007      	b.n	800319c <HAL_DMA_IRQHandler+0xb34>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0204 	bic.w	r2, r2, #4
 800319a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 8165 	beq.w	8003470 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031ae:	e15f      	b.n	8003470 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	2202      	movs	r2, #2
 80031ba:	409a      	lsls	r2, r3
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 80c5 	beq.w	8003350 <HAL_DMA_IRQHandler+0xce8>
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 80bf 	beq.w	8003350 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d6:	f003 031f 	and.w	r3, r3, #31
 80031da:	2202      	movs	r2, #2
 80031dc:	409a      	lsls	r2, r3
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d018      	beq.n	800321e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d109      	bne.n	800320a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 813a 	beq.w	8003474 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003208:	e134      	b.n	8003474 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 8130 	beq.w	8003474 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800321c:	e12a      	b.n	8003474 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	f003 0320 	and.w	r3, r3, #32
 8003224:	2b00      	cmp	r3, #0
 8003226:	d168      	bne.n	80032fa <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a38      	ldr	r2, [pc, #224]	; (8003310 <HAL_DMA_IRQHandler+0xca8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d04a      	beq.n	80032c8 <HAL_DMA_IRQHandler+0xc60>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a37      	ldr	r2, [pc, #220]	; (8003314 <HAL_DMA_IRQHandler+0xcac>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d045      	beq.n	80032c8 <HAL_DMA_IRQHandler+0xc60>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a35      	ldr	r2, [pc, #212]	; (8003318 <HAL_DMA_IRQHandler+0xcb0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d040      	beq.n	80032c8 <HAL_DMA_IRQHandler+0xc60>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a34      	ldr	r2, [pc, #208]	; (800331c <HAL_DMA_IRQHandler+0xcb4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d03b      	beq.n	80032c8 <HAL_DMA_IRQHandler+0xc60>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a32      	ldr	r2, [pc, #200]	; (8003320 <HAL_DMA_IRQHandler+0xcb8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d036      	beq.n	80032c8 <HAL_DMA_IRQHandler+0xc60>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a31      	ldr	r2, [pc, #196]	; (8003324 <HAL_DMA_IRQHandler+0xcbc>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d031      	beq.n	80032c8 <HAL_DMA_IRQHandler+0xc60>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a2f      	ldr	r2, [pc, #188]	; (8003328 <HAL_DMA_IRQHandler+0xcc0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d02c      	beq.n	80032c8 <HAL_DMA_IRQHandler+0xc60>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a2e      	ldr	r2, [pc, #184]	; (800332c <HAL_DMA_IRQHandler+0xcc4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d027      	beq.n	80032c8 <HAL_DMA_IRQHandler+0xc60>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a2c      	ldr	r2, [pc, #176]	; (8003330 <HAL_DMA_IRQHandler+0xcc8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d022      	beq.n	80032c8 <HAL_DMA_IRQHandler+0xc60>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a2b      	ldr	r2, [pc, #172]	; (8003334 <HAL_DMA_IRQHandler+0xccc>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d01d      	beq.n	80032c8 <HAL_DMA_IRQHandler+0xc60>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a29      	ldr	r2, [pc, #164]	; (8003338 <HAL_DMA_IRQHandler+0xcd0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d018      	beq.n	80032c8 <HAL_DMA_IRQHandler+0xc60>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a28      	ldr	r2, [pc, #160]	; (800333c <HAL_DMA_IRQHandler+0xcd4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d013      	beq.n	80032c8 <HAL_DMA_IRQHandler+0xc60>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a26      	ldr	r2, [pc, #152]	; (8003340 <HAL_DMA_IRQHandler+0xcd8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00e      	beq.n	80032c8 <HAL_DMA_IRQHandler+0xc60>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a25      	ldr	r2, [pc, #148]	; (8003344 <HAL_DMA_IRQHandler+0xcdc>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d009      	beq.n	80032c8 <HAL_DMA_IRQHandler+0xc60>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a23      	ldr	r2, [pc, #140]	; (8003348 <HAL_DMA_IRQHandler+0xce0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d004      	beq.n	80032c8 <HAL_DMA_IRQHandler+0xc60>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a22      	ldr	r2, [pc, #136]	; (800334c <HAL_DMA_IRQHandler+0xce4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d108      	bne.n	80032da <HAL_DMA_IRQHandler+0xc72>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0214 	bic.w	r2, r2, #20
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	e007      	b.n	80032ea <HAL_DMA_IRQHandler+0xc82>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 020a 	bic.w	r2, r2, #10
 80032e8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 80b8 	beq.w	8003474 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800330c:	e0b2      	b.n	8003474 <HAL_DMA_IRQHandler+0xe0c>
 800330e:	bf00      	nop
 8003310:	40020010 	.word	0x40020010
 8003314:	40020028 	.word	0x40020028
 8003318:	40020040 	.word	0x40020040
 800331c:	40020058 	.word	0x40020058
 8003320:	40020070 	.word	0x40020070
 8003324:	40020088 	.word	0x40020088
 8003328:	400200a0 	.word	0x400200a0
 800332c:	400200b8 	.word	0x400200b8
 8003330:	40020410 	.word	0x40020410
 8003334:	40020428 	.word	0x40020428
 8003338:	40020440 	.word	0x40020440
 800333c:	40020458 	.word	0x40020458
 8003340:	40020470 	.word	0x40020470
 8003344:	40020488 	.word	0x40020488
 8003348:	400204a0 	.word	0x400204a0
 800334c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	2208      	movs	r2, #8
 800335a:	409a      	lsls	r2, r3
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	4013      	ands	r3, r2
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 8088 	beq.w	8003476 <HAL_DMA_IRQHandler+0xe0e>
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 8082 	beq.w	8003476 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a41      	ldr	r2, [pc, #260]	; (800347c <HAL_DMA_IRQHandler+0xe14>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d04a      	beq.n	8003412 <HAL_DMA_IRQHandler+0xdaa>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a3f      	ldr	r2, [pc, #252]	; (8003480 <HAL_DMA_IRQHandler+0xe18>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d045      	beq.n	8003412 <HAL_DMA_IRQHandler+0xdaa>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a3e      	ldr	r2, [pc, #248]	; (8003484 <HAL_DMA_IRQHandler+0xe1c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d040      	beq.n	8003412 <HAL_DMA_IRQHandler+0xdaa>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a3c      	ldr	r2, [pc, #240]	; (8003488 <HAL_DMA_IRQHandler+0xe20>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d03b      	beq.n	8003412 <HAL_DMA_IRQHandler+0xdaa>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a3b      	ldr	r2, [pc, #236]	; (800348c <HAL_DMA_IRQHandler+0xe24>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d036      	beq.n	8003412 <HAL_DMA_IRQHandler+0xdaa>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a39      	ldr	r2, [pc, #228]	; (8003490 <HAL_DMA_IRQHandler+0xe28>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d031      	beq.n	8003412 <HAL_DMA_IRQHandler+0xdaa>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a38      	ldr	r2, [pc, #224]	; (8003494 <HAL_DMA_IRQHandler+0xe2c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d02c      	beq.n	8003412 <HAL_DMA_IRQHandler+0xdaa>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a36      	ldr	r2, [pc, #216]	; (8003498 <HAL_DMA_IRQHandler+0xe30>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d027      	beq.n	8003412 <HAL_DMA_IRQHandler+0xdaa>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a35      	ldr	r2, [pc, #212]	; (800349c <HAL_DMA_IRQHandler+0xe34>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d022      	beq.n	8003412 <HAL_DMA_IRQHandler+0xdaa>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a33      	ldr	r2, [pc, #204]	; (80034a0 <HAL_DMA_IRQHandler+0xe38>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01d      	beq.n	8003412 <HAL_DMA_IRQHandler+0xdaa>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a32      	ldr	r2, [pc, #200]	; (80034a4 <HAL_DMA_IRQHandler+0xe3c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d018      	beq.n	8003412 <HAL_DMA_IRQHandler+0xdaa>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a30      	ldr	r2, [pc, #192]	; (80034a8 <HAL_DMA_IRQHandler+0xe40>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d013      	beq.n	8003412 <HAL_DMA_IRQHandler+0xdaa>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a2f      	ldr	r2, [pc, #188]	; (80034ac <HAL_DMA_IRQHandler+0xe44>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d00e      	beq.n	8003412 <HAL_DMA_IRQHandler+0xdaa>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a2d      	ldr	r2, [pc, #180]	; (80034b0 <HAL_DMA_IRQHandler+0xe48>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d009      	beq.n	8003412 <HAL_DMA_IRQHandler+0xdaa>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a2c      	ldr	r2, [pc, #176]	; (80034b4 <HAL_DMA_IRQHandler+0xe4c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d004      	beq.n	8003412 <HAL_DMA_IRQHandler+0xdaa>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a2a      	ldr	r2, [pc, #168]	; (80034b8 <HAL_DMA_IRQHandler+0xe50>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d108      	bne.n	8003424 <HAL_DMA_IRQHandler+0xdbc>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 021c 	bic.w	r2, r2, #28
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	e007      	b.n	8003434 <HAL_DMA_IRQHandler+0xdcc>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 020e 	bic.w	r2, r2, #14
 8003432:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003438:	f003 031f 	and.w	r3, r3, #31
 800343c:	2201      	movs	r2, #1
 800343e:	409a      	lsls	r2, r3
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800345e:	2b00      	cmp	r3, #0
 8003460:	d009      	beq.n	8003476 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	4798      	blx	r3
 800346a:	e004      	b.n	8003476 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800346c:	bf00      	nop
 800346e:	e002      	b.n	8003476 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003470:	bf00      	nop
 8003472:	e000      	b.n	8003476 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003474:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003476:	3728      	adds	r7, #40	; 0x28
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40020010 	.word	0x40020010
 8003480:	40020028 	.word	0x40020028
 8003484:	40020040 	.word	0x40020040
 8003488:	40020058 	.word	0x40020058
 800348c:	40020070 	.word	0x40020070
 8003490:	40020088 	.word	0x40020088
 8003494:	400200a0 	.word	0x400200a0
 8003498:	400200b8 	.word	0x400200b8
 800349c:	40020410 	.word	0x40020410
 80034a0:	40020428 	.word	0x40020428
 80034a4:	40020440 	.word	0x40020440
 80034a8:	40020458 	.word	0x40020458
 80034ac:	40020470 	.word	0x40020470
 80034b0:	40020488 	.word	0x40020488
 80034b4:	400204a0 	.word	0x400204a0
 80034b8:	400204b8 	.word	0x400204b8

080034bc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
 80034e0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ec:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a84      	ldr	r2, [pc, #528]	; (8003704 <DMA_SetConfig+0x230>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d072      	beq.n	80035de <DMA_SetConfig+0x10a>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a82      	ldr	r2, [pc, #520]	; (8003708 <DMA_SetConfig+0x234>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d06d      	beq.n	80035de <DMA_SetConfig+0x10a>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a81      	ldr	r2, [pc, #516]	; (800370c <DMA_SetConfig+0x238>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d068      	beq.n	80035de <DMA_SetConfig+0x10a>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a7f      	ldr	r2, [pc, #508]	; (8003710 <DMA_SetConfig+0x23c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d063      	beq.n	80035de <DMA_SetConfig+0x10a>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a7e      	ldr	r2, [pc, #504]	; (8003714 <DMA_SetConfig+0x240>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d05e      	beq.n	80035de <DMA_SetConfig+0x10a>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a7c      	ldr	r2, [pc, #496]	; (8003718 <DMA_SetConfig+0x244>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d059      	beq.n	80035de <DMA_SetConfig+0x10a>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a7b      	ldr	r2, [pc, #492]	; (800371c <DMA_SetConfig+0x248>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d054      	beq.n	80035de <DMA_SetConfig+0x10a>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a79      	ldr	r2, [pc, #484]	; (8003720 <DMA_SetConfig+0x24c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d04f      	beq.n	80035de <DMA_SetConfig+0x10a>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a78      	ldr	r2, [pc, #480]	; (8003724 <DMA_SetConfig+0x250>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d04a      	beq.n	80035de <DMA_SetConfig+0x10a>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a76      	ldr	r2, [pc, #472]	; (8003728 <DMA_SetConfig+0x254>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d045      	beq.n	80035de <DMA_SetConfig+0x10a>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a75      	ldr	r2, [pc, #468]	; (800372c <DMA_SetConfig+0x258>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d040      	beq.n	80035de <DMA_SetConfig+0x10a>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a73      	ldr	r2, [pc, #460]	; (8003730 <DMA_SetConfig+0x25c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d03b      	beq.n	80035de <DMA_SetConfig+0x10a>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a72      	ldr	r2, [pc, #456]	; (8003734 <DMA_SetConfig+0x260>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d036      	beq.n	80035de <DMA_SetConfig+0x10a>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a70      	ldr	r2, [pc, #448]	; (8003738 <DMA_SetConfig+0x264>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d031      	beq.n	80035de <DMA_SetConfig+0x10a>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a6f      	ldr	r2, [pc, #444]	; (800373c <DMA_SetConfig+0x268>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d02c      	beq.n	80035de <DMA_SetConfig+0x10a>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a6d      	ldr	r2, [pc, #436]	; (8003740 <DMA_SetConfig+0x26c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d027      	beq.n	80035de <DMA_SetConfig+0x10a>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a6c      	ldr	r2, [pc, #432]	; (8003744 <DMA_SetConfig+0x270>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d022      	beq.n	80035de <DMA_SetConfig+0x10a>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a6a      	ldr	r2, [pc, #424]	; (8003748 <DMA_SetConfig+0x274>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d01d      	beq.n	80035de <DMA_SetConfig+0x10a>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a69      	ldr	r2, [pc, #420]	; (800374c <DMA_SetConfig+0x278>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d018      	beq.n	80035de <DMA_SetConfig+0x10a>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a67      	ldr	r2, [pc, #412]	; (8003750 <DMA_SetConfig+0x27c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d013      	beq.n	80035de <DMA_SetConfig+0x10a>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a66      	ldr	r2, [pc, #408]	; (8003754 <DMA_SetConfig+0x280>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d00e      	beq.n	80035de <DMA_SetConfig+0x10a>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a64      	ldr	r2, [pc, #400]	; (8003758 <DMA_SetConfig+0x284>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d009      	beq.n	80035de <DMA_SetConfig+0x10a>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a63      	ldr	r2, [pc, #396]	; (800375c <DMA_SetConfig+0x288>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d004      	beq.n	80035de <DMA_SetConfig+0x10a>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a61      	ldr	r2, [pc, #388]	; (8003760 <DMA_SetConfig+0x28c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d101      	bne.n	80035e2 <DMA_SetConfig+0x10e>
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <DMA_SetConfig+0x110>
 80035e2:	2300      	movs	r3, #0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00d      	beq.n	8003604 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80035f0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d004      	beq.n	8003604 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003602:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a3e      	ldr	r2, [pc, #248]	; (8003704 <DMA_SetConfig+0x230>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d04a      	beq.n	80036a4 <DMA_SetConfig+0x1d0>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a3d      	ldr	r2, [pc, #244]	; (8003708 <DMA_SetConfig+0x234>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d045      	beq.n	80036a4 <DMA_SetConfig+0x1d0>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a3b      	ldr	r2, [pc, #236]	; (800370c <DMA_SetConfig+0x238>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d040      	beq.n	80036a4 <DMA_SetConfig+0x1d0>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a3a      	ldr	r2, [pc, #232]	; (8003710 <DMA_SetConfig+0x23c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d03b      	beq.n	80036a4 <DMA_SetConfig+0x1d0>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a38      	ldr	r2, [pc, #224]	; (8003714 <DMA_SetConfig+0x240>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d036      	beq.n	80036a4 <DMA_SetConfig+0x1d0>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a37      	ldr	r2, [pc, #220]	; (8003718 <DMA_SetConfig+0x244>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d031      	beq.n	80036a4 <DMA_SetConfig+0x1d0>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a35      	ldr	r2, [pc, #212]	; (800371c <DMA_SetConfig+0x248>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d02c      	beq.n	80036a4 <DMA_SetConfig+0x1d0>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a34      	ldr	r2, [pc, #208]	; (8003720 <DMA_SetConfig+0x24c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d027      	beq.n	80036a4 <DMA_SetConfig+0x1d0>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a32      	ldr	r2, [pc, #200]	; (8003724 <DMA_SetConfig+0x250>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d022      	beq.n	80036a4 <DMA_SetConfig+0x1d0>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a31      	ldr	r2, [pc, #196]	; (8003728 <DMA_SetConfig+0x254>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d01d      	beq.n	80036a4 <DMA_SetConfig+0x1d0>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a2f      	ldr	r2, [pc, #188]	; (800372c <DMA_SetConfig+0x258>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d018      	beq.n	80036a4 <DMA_SetConfig+0x1d0>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a2e      	ldr	r2, [pc, #184]	; (8003730 <DMA_SetConfig+0x25c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d013      	beq.n	80036a4 <DMA_SetConfig+0x1d0>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a2c      	ldr	r2, [pc, #176]	; (8003734 <DMA_SetConfig+0x260>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00e      	beq.n	80036a4 <DMA_SetConfig+0x1d0>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a2b      	ldr	r2, [pc, #172]	; (8003738 <DMA_SetConfig+0x264>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d009      	beq.n	80036a4 <DMA_SetConfig+0x1d0>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a29      	ldr	r2, [pc, #164]	; (800373c <DMA_SetConfig+0x268>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d004      	beq.n	80036a4 <DMA_SetConfig+0x1d0>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a28      	ldr	r2, [pc, #160]	; (8003740 <DMA_SetConfig+0x26c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d101      	bne.n	80036a8 <DMA_SetConfig+0x1d4>
 80036a4:	2301      	movs	r3, #1
 80036a6:	e000      	b.n	80036aa <DMA_SetConfig+0x1d6>
 80036a8:	2300      	movs	r3, #0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d05a      	beq.n	8003764 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b2:	f003 031f 	and.w	r3, r3, #31
 80036b6:	223f      	movs	r2, #63	; 0x3f
 80036b8:	409a      	lsls	r2, r3
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036cc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	2b40      	cmp	r3, #64	; 0x40
 80036dc:	d108      	bne.n	80036f0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80036ee:	e087      	b.n	8003800 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	60da      	str	r2, [r3, #12]
}
 8003700:	e07e      	b.n	8003800 <DMA_SetConfig+0x32c>
 8003702:	bf00      	nop
 8003704:	40020010 	.word	0x40020010
 8003708:	40020028 	.word	0x40020028
 800370c:	40020040 	.word	0x40020040
 8003710:	40020058 	.word	0x40020058
 8003714:	40020070 	.word	0x40020070
 8003718:	40020088 	.word	0x40020088
 800371c:	400200a0 	.word	0x400200a0
 8003720:	400200b8 	.word	0x400200b8
 8003724:	40020410 	.word	0x40020410
 8003728:	40020428 	.word	0x40020428
 800372c:	40020440 	.word	0x40020440
 8003730:	40020458 	.word	0x40020458
 8003734:	40020470 	.word	0x40020470
 8003738:	40020488 	.word	0x40020488
 800373c:	400204a0 	.word	0x400204a0
 8003740:	400204b8 	.word	0x400204b8
 8003744:	58025408 	.word	0x58025408
 8003748:	5802541c 	.word	0x5802541c
 800374c:	58025430 	.word	0x58025430
 8003750:	58025444 	.word	0x58025444
 8003754:	58025458 	.word	0x58025458
 8003758:	5802546c 	.word	0x5802546c
 800375c:	58025480 	.word	0x58025480
 8003760:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a28      	ldr	r2, [pc, #160]	; (800380c <DMA_SetConfig+0x338>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d022      	beq.n	80037b4 <DMA_SetConfig+0x2e0>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a27      	ldr	r2, [pc, #156]	; (8003810 <DMA_SetConfig+0x33c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d01d      	beq.n	80037b4 <DMA_SetConfig+0x2e0>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a25      	ldr	r2, [pc, #148]	; (8003814 <DMA_SetConfig+0x340>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d018      	beq.n	80037b4 <DMA_SetConfig+0x2e0>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a24      	ldr	r2, [pc, #144]	; (8003818 <DMA_SetConfig+0x344>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d013      	beq.n	80037b4 <DMA_SetConfig+0x2e0>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a22      	ldr	r2, [pc, #136]	; (800381c <DMA_SetConfig+0x348>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00e      	beq.n	80037b4 <DMA_SetConfig+0x2e0>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a21      	ldr	r2, [pc, #132]	; (8003820 <DMA_SetConfig+0x34c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d009      	beq.n	80037b4 <DMA_SetConfig+0x2e0>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a1f      	ldr	r2, [pc, #124]	; (8003824 <DMA_SetConfig+0x350>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d004      	beq.n	80037b4 <DMA_SetConfig+0x2e0>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a1e      	ldr	r2, [pc, #120]	; (8003828 <DMA_SetConfig+0x354>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d101      	bne.n	80037b8 <DMA_SetConfig+0x2e4>
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <DMA_SetConfig+0x2e6>
 80037b8:	2300      	movs	r3, #0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d020      	beq.n	8003800 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c2:	f003 031f 	and.w	r3, r3, #31
 80037c6:	2201      	movs	r2, #1
 80037c8:	409a      	lsls	r2, r3
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b40      	cmp	r3, #64	; 0x40
 80037dc:	d108      	bne.n	80037f0 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	60da      	str	r2, [r3, #12]
}
 80037ee:	e007      	b.n	8003800 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	60da      	str	r2, [r3, #12]
}
 8003800:	bf00      	nop
 8003802:	371c      	adds	r7, #28
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	58025408 	.word	0x58025408
 8003810:	5802541c 	.word	0x5802541c
 8003814:	58025430 	.word	0x58025430
 8003818:	58025444 	.word	0x58025444
 800381c:	58025458 	.word	0x58025458
 8003820:	5802546c 	.word	0x5802546c
 8003824:	58025480 	.word	0x58025480
 8003828:	58025494 	.word	0x58025494

0800382c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a42      	ldr	r2, [pc, #264]	; (8003944 <DMA_CalcBaseAndBitshift+0x118>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d04a      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a41      	ldr	r2, [pc, #260]	; (8003948 <DMA_CalcBaseAndBitshift+0x11c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d045      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a3f      	ldr	r2, [pc, #252]	; (800394c <DMA_CalcBaseAndBitshift+0x120>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d040      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a3e      	ldr	r2, [pc, #248]	; (8003950 <DMA_CalcBaseAndBitshift+0x124>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d03b      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a3c      	ldr	r2, [pc, #240]	; (8003954 <DMA_CalcBaseAndBitshift+0x128>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d036      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a3b      	ldr	r2, [pc, #236]	; (8003958 <DMA_CalcBaseAndBitshift+0x12c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d031      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a39      	ldr	r2, [pc, #228]	; (800395c <DMA_CalcBaseAndBitshift+0x130>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d02c      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a38      	ldr	r2, [pc, #224]	; (8003960 <DMA_CalcBaseAndBitshift+0x134>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d027      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a36      	ldr	r2, [pc, #216]	; (8003964 <DMA_CalcBaseAndBitshift+0x138>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d022      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a35      	ldr	r2, [pc, #212]	; (8003968 <DMA_CalcBaseAndBitshift+0x13c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d01d      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a33      	ldr	r2, [pc, #204]	; (800396c <DMA_CalcBaseAndBitshift+0x140>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d018      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a32      	ldr	r2, [pc, #200]	; (8003970 <DMA_CalcBaseAndBitshift+0x144>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d013      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a30      	ldr	r2, [pc, #192]	; (8003974 <DMA_CalcBaseAndBitshift+0x148>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00e      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a2f      	ldr	r2, [pc, #188]	; (8003978 <DMA_CalcBaseAndBitshift+0x14c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d009      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a2d      	ldr	r2, [pc, #180]	; (800397c <DMA_CalcBaseAndBitshift+0x150>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d004      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a2c      	ldr	r2, [pc, #176]	; (8003980 <DMA_CalcBaseAndBitshift+0x154>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d101      	bne.n	80038d8 <DMA_CalcBaseAndBitshift+0xac>
 80038d4:	2301      	movs	r3, #1
 80038d6:	e000      	b.n	80038da <DMA_CalcBaseAndBitshift+0xae>
 80038d8:	2300      	movs	r3, #0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d024      	beq.n	8003928 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	3b10      	subs	r3, #16
 80038e6:	4a27      	ldr	r2, [pc, #156]	; (8003984 <DMA_CalcBaseAndBitshift+0x158>)
 80038e8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ec:	091b      	lsrs	r3, r3, #4
 80038ee:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	4a24      	ldr	r2, [pc, #144]	; (8003988 <DMA_CalcBaseAndBitshift+0x15c>)
 80038f8:	5cd3      	ldrb	r3, [r2, r3]
 80038fa:	461a      	mov	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b03      	cmp	r3, #3
 8003904:	d908      	bls.n	8003918 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	4b1f      	ldr	r3, [pc, #124]	; (800398c <DMA_CalcBaseAndBitshift+0x160>)
 800390e:	4013      	ands	r3, r2
 8003910:	1d1a      	adds	r2, r3, #4
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	659a      	str	r2, [r3, #88]	; 0x58
 8003916:	e00d      	b.n	8003934 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	4b1b      	ldr	r3, [pc, #108]	; (800398c <DMA_CalcBaseAndBitshift+0x160>)
 8003920:	4013      	ands	r3, r2
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6593      	str	r3, [r2, #88]	; 0x58
 8003926:	e005      	b.n	8003934 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003938:	4618      	mov	r0, r3
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	40020010 	.word	0x40020010
 8003948:	40020028 	.word	0x40020028
 800394c:	40020040 	.word	0x40020040
 8003950:	40020058 	.word	0x40020058
 8003954:	40020070 	.word	0x40020070
 8003958:	40020088 	.word	0x40020088
 800395c:	400200a0 	.word	0x400200a0
 8003960:	400200b8 	.word	0x400200b8
 8003964:	40020410 	.word	0x40020410
 8003968:	40020428 	.word	0x40020428
 800396c:	40020440 	.word	0x40020440
 8003970:	40020458 	.word	0x40020458
 8003974:	40020470 	.word	0x40020470
 8003978:	40020488 	.word	0x40020488
 800397c:	400204a0 	.word	0x400204a0
 8003980:	400204b8 	.word	0x400204b8
 8003984:	aaaaaaab 	.word	0xaaaaaaab
 8003988:	0800c600 	.word	0x0800c600
 800398c:	fffffc00 	.word	0xfffffc00

08003990 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d120      	bne.n	80039e6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d858      	bhi.n	8003a5e <DMA_CheckFifoParam+0xce>
 80039ac:	a201      	add	r2, pc, #4	; (adr r2, 80039b4 <DMA_CheckFifoParam+0x24>)
 80039ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b2:	bf00      	nop
 80039b4:	080039c5 	.word	0x080039c5
 80039b8:	080039d7 	.word	0x080039d7
 80039bc:	080039c5 	.word	0x080039c5
 80039c0:	08003a5f 	.word	0x08003a5f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d048      	beq.n	8003a62 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80039d4:	e045      	b.n	8003a62 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039de:	d142      	bne.n	8003a66 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80039e4:	e03f      	b.n	8003a66 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ee:	d123      	bne.n	8003a38 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d838      	bhi.n	8003a6a <DMA_CheckFifoParam+0xda>
 80039f8:	a201      	add	r2, pc, #4	; (adr r2, 8003a00 <DMA_CheckFifoParam+0x70>)
 80039fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fe:	bf00      	nop
 8003a00:	08003a11 	.word	0x08003a11
 8003a04:	08003a17 	.word	0x08003a17
 8003a08:	08003a11 	.word	0x08003a11
 8003a0c:	08003a29 	.word	0x08003a29
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	73fb      	strb	r3, [r7, #15]
        break;
 8003a14:	e030      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d025      	beq.n	8003a6e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a26:	e022      	b.n	8003a6e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a30:	d11f      	bne.n	8003a72 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a36:	e01c      	b.n	8003a72 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d902      	bls.n	8003a46 <DMA_CheckFifoParam+0xb6>
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d003      	beq.n	8003a4c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003a44:	e018      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	73fb      	strb	r3, [r7, #15]
        break;
 8003a4a:	e015      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00e      	beq.n	8003a76 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
    break;
 8003a5c:	e00b      	b.n	8003a76 <DMA_CheckFifoParam+0xe6>
        break;
 8003a5e:	bf00      	nop
 8003a60:	e00a      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
        break;
 8003a62:	bf00      	nop
 8003a64:	e008      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
        break;
 8003a66:	bf00      	nop
 8003a68:	e006      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
        break;
 8003a6a:	bf00      	nop
 8003a6c:	e004      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
        break;
 8003a6e:	bf00      	nop
 8003a70:	e002      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
        break;
 8003a72:	bf00      	nop
 8003a74:	e000      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
    break;
 8003a76:	bf00      	nop
    }
  }

  return status;
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop

08003a88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a38      	ldr	r2, [pc, #224]	; (8003b7c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d022      	beq.n	8003ae6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a36      	ldr	r2, [pc, #216]	; (8003b80 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d01d      	beq.n	8003ae6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a35      	ldr	r2, [pc, #212]	; (8003b84 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d018      	beq.n	8003ae6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a33      	ldr	r2, [pc, #204]	; (8003b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d013      	beq.n	8003ae6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a32      	ldr	r2, [pc, #200]	; (8003b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00e      	beq.n	8003ae6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a30      	ldr	r2, [pc, #192]	; (8003b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d009      	beq.n	8003ae6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a2f      	ldr	r2, [pc, #188]	; (8003b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d004      	beq.n	8003ae6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a2d      	ldr	r2, [pc, #180]	; (8003b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d101      	bne.n	8003aea <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003aea:	2300      	movs	r3, #0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d01a      	beq.n	8003b26 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	3b08      	subs	r3, #8
 8003af8:	4a28      	ldr	r2, [pc, #160]	; (8003b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	091b      	lsrs	r3, r3, #4
 8003b00:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	4b26      	ldr	r3, [pc, #152]	; (8003ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003b06:	4413      	add	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a24      	ldr	r2, [pc, #144]	; (8003ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003b14:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f003 031f 	and.w	r3, r3, #31
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	409a      	lsls	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003b24:	e024      	b.n	8003b70 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	3b10      	subs	r3, #16
 8003b2e:	4a1e      	ldr	r2, [pc, #120]	; (8003ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003b30:	fba2 2303 	umull	r2, r3, r2, r3
 8003b34:	091b      	lsrs	r3, r3, #4
 8003b36:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	4a1c      	ldr	r2, [pc, #112]	; (8003bac <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d806      	bhi.n	8003b4e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4a1b      	ldr	r2, [pc, #108]	; (8003bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d902      	bls.n	8003b4e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	3308      	adds	r3, #8
 8003b4c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	4b18      	ldr	r3, [pc, #96]	; (8003bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	461a      	mov	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a16      	ldr	r2, [pc, #88]	; (8003bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003b60:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f003 031f 	and.w	r3, r3, #31
 8003b68:	2201      	movs	r2, #1
 8003b6a:	409a      	lsls	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003b70:	bf00      	nop
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	58025408 	.word	0x58025408
 8003b80:	5802541c 	.word	0x5802541c
 8003b84:	58025430 	.word	0x58025430
 8003b88:	58025444 	.word	0x58025444
 8003b8c:	58025458 	.word	0x58025458
 8003b90:	5802546c 	.word	0x5802546c
 8003b94:	58025480 	.word	0x58025480
 8003b98:	58025494 	.word	0x58025494
 8003b9c:	cccccccd 	.word	0xcccccccd
 8003ba0:	16009600 	.word	0x16009600
 8003ba4:	58025880 	.word	0x58025880
 8003ba8:	aaaaaaab 	.word	0xaaaaaaab
 8003bac:	400204b8 	.word	0x400204b8
 8003bb0:	4002040f 	.word	0x4002040f
 8003bb4:	10008200 	.word	0x10008200
 8003bb8:	40020880 	.word	0x40020880

08003bbc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d04a      	beq.n	8003c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d847      	bhi.n	8003c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a25      	ldr	r2, [pc, #148]	; (8003c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d022      	beq.n	8003c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a24      	ldr	r2, [pc, #144]	; (8003c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d01d      	beq.n	8003c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a22      	ldr	r2, [pc, #136]	; (8003c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d018      	beq.n	8003c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a21      	ldr	r2, [pc, #132]	; (8003c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d013      	beq.n	8003c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a1f      	ldr	r2, [pc, #124]	; (8003c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d00e      	beq.n	8003c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a1e      	ldr	r2, [pc, #120]	; (8003c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d009      	beq.n	8003c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a1c      	ldr	r2, [pc, #112]	; (8003c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d004      	beq.n	8003c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a1b      	ldr	r2, [pc, #108]	; (8003c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d101      	bne.n	8003c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4b17      	ldr	r3, [pc, #92]	; (8003c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003c36:	4413      	add	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a15      	ldr	r2, [pc, #84]	; (8003c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003c44:	671a      	str	r2, [r3, #112]	; 0x70
 8003c46:	e009      	b.n	8003c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4b14      	ldr	r3, [pc, #80]	; (8003c9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	461a      	mov	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a11      	ldr	r2, [pc, #68]	; (8003ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003c5a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	2201      	movs	r2, #1
 8003c62:	409a      	lsls	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003c68:	bf00      	nop
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	58025408 	.word	0x58025408
 8003c78:	5802541c 	.word	0x5802541c
 8003c7c:	58025430 	.word	0x58025430
 8003c80:	58025444 	.word	0x58025444
 8003c84:	58025458 	.word	0x58025458
 8003c88:	5802546c 	.word	0x5802546c
 8003c8c:	58025480 	.word	0x58025480
 8003c90:	58025494 	.word	0x58025494
 8003c94:	1600963f 	.word	0x1600963f
 8003c98:	58025940 	.word	0x58025940
 8003c9c:	1000823f 	.word	0x1000823f
 8003ca0:	40020940 	.word	0x40020940

08003ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b089      	sub	sp, #36	; 0x24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003cb2:	4b89      	ldr	r3, [pc, #548]	; (8003ed8 <HAL_GPIO_Init+0x234>)
 8003cb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003cb6:	e194      	b.n	8003fe2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 8186 	beq.w	8003fdc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d00b      	beq.n	8003cf0 <HAL_GPIO_Init+0x4c>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d007      	beq.n	8003cf0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ce4:	2b11      	cmp	r3, #17
 8003ce6:	d003      	beq.n	8003cf0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b12      	cmp	r3, #18
 8003cee:	d130      	bne.n	8003d52 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	2203      	movs	r2, #3
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	43db      	mvns	r3, r3
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	4013      	ands	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	68da      	ldr	r2, [r3, #12]
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d26:	2201      	movs	r2, #1
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4013      	ands	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	091b      	lsrs	r3, r3, #4
 8003d3c:	f003 0201 	and.w	r2, r3, #1
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	fa02 f303 	lsl.w	r3, r2, r3
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	2203      	movs	r2, #3
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	43db      	mvns	r3, r3
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	4013      	ands	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d003      	beq.n	8003d92 <HAL_GPIO_Init+0xee>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b12      	cmp	r3, #18
 8003d90:	d123      	bne.n	8003dda <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	08da      	lsrs	r2, r3, #3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	3208      	adds	r2, #8
 8003d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	220f      	movs	r2, #15
 8003daa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dae:	43db      	mvns	r3, r3
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	4013      	ands	r3, r2
 8003db4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	691a      	ldr	r2, [r3, #16]
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	08da      	lsrs	r2, r3, #3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3208      	adds	r2, #8
 8003dd4:	69b9      	ldr	r1, [r7, #24]
 8003dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	2203      	movs	r2, #3
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	43db      	mvns	r3, r3
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	4013      	ands	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f003 0203 	and.w	r2, r3, #3
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 80e0 	beq.w	8003fdc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e1c:	4b2f      	ldr	r3, [pc, #188]	; (8003edc <HAL_GPIO_Init+0x238>)
 8003e1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e22:	4a2e      	ldr	r2, [pc, #184]	; (8003edc <HAL_GPIO_Init+0x238>)
 8003e24:	f043 0302 	orr.w	r3, r3, #2
 8003e28:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003e2c:	4b2b      	ldr	r3, [pc, #172]	; (8003edc <HAL_GPIO_Init+0x238>)
 8003e2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e3a:	4a29      	ldr	r2, [pc, #164]	; (8003ee0 <HAL_GPIO_Init+0x23c>)
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	089b      	lsrs	r3, r3, #2
 8003e40:	3302      	adds	r3, #2
 8003e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	220f      	movs	r2, #15
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	43db      	mvns	r3, r3
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a20      	ldr	r2, [pc, #128]	; (8003ee4 <HAL_GPIO_Init+0x240>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d052      	beq.n	8003f0c <HAL_GPIO_Init+0x268>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a1f      	ldr	r2, [pc, #124]	; (8003ee8 <HAL_GPIO_Init+0x244>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d031      	beq.n	8003ed2 <HAL_GPIO_Init+0x22e>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a1e      	ldr	r2, [pc, #120]	; (8003eec <HAL_GPIO_Init+0x248>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d02b      	beq.n	8003ece <HAL_GPIO_Init+0x22a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a1d      	ldr	r2, [pc, #116]	; (8003ef0 <HAL_GPIO_Init+0x24c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d025      	beq.n	8003eca <HAL_GPIO_Init+0x226>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a1c      	ldr	r2, [pc, #112]	; (8003ef4 <HAL_GPIO_Init+0x250>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d01f      	beq.n	8003ec6 <HAL_GPIO_Init+0x222>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a1b      	ldr	r2, [pc, #108]	; (8003ef8 <HAL_GPIO_Init+0x254>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d019      	beq.n	8003ec2 <HAL_GPIO_Init+0x21e>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a1a      	ldr	r2, [pc, #104]	; (8003efc <HAL_GPIO_Init+0x258>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d013      	beq.n	8003ebe <HAL_GPIO_Init+0x21a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a19      	ldr	r2, [pc, #100]	; (8003f00 <HAL_GPIO_Init+0x25c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00d      	beq.n	8003eba <HAL_GPIO_Init+0x216>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a18      	ldr	r2, [pc, #96]	; (8003f04 <HAL_GPIO_Init+0x260>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d007      	beq.n	8003eb6 <HAL_GPIO_Init+0x212>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a17      	ldr	r2, [pc, #92]	; (8003f08 <HAL_GPIO_Init+0x264>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d101      	bne.n	8003eb2 <HAL_GPIO_Init+0x20e>
 8003eae:	2309      	movs	r3, #9
 8003eb0:	e02d      	b.n	8003f0e <HAL_GPIO_Init+0x26a>
 8003eb2:	230a      	movs	r3, #10
 8003eb4:	e02b      	b.n	8003f0e <HAL_GPIO_Init+0x26a>
 8003eb6:	2308      	movs	r3, #8
 8003eb8:	e029      	b.n	8003f0e <HAL_GPIO_Init+0x26a>
 8003eba:	2307      	movs	r3, #7
 8003ebc:	e027      	b.n	8003f0e <HAL_GPIO_Init+0x26a>
 8003ebe:	2306      	movs	r3, #6
 8003ec0:	e025      	b.n	8003f0e <HAL_GPIO_Init+0x26a>
 8003ec2:	2305      	movs	r3, #5
 8003ec4:	e023      	b.n	8003f0e <HAL_GPIO_Init+0x26a>
 8003ec6:	2304      	movs	r3, #4
 8003ec8:	e021      	b.n	8003f0e <HAL_GPIO_Init+0x26a>
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e01f      	b.n	8003f0e <HAL_GPIO_Init+0x26a>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e01d      	b.n	8003f0e <HAL_GPIO_Init+0x26a>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e01b      	b.n	8003f0e <HAL_GPIO_Init+0x26a>
 8003ed6:	bf00      	nop
 8003ed8:	58000080 	.word	0x58000080
 8003edc:	58024400 	.word	0x58024400
 8003ee0:	58000400 	.word	0x58000400
 8003ee4:	58020000 	.word	0x58020000
 8003ee8:	58020400 	.word	0x58020400
 8003eec:	58020800 	.word	0x58020800
 8003ef0:	58020c00 	.word	0x58020c00
 8003ef4:	58021000 	.word	0x58021000
 8003ef8:	58021400 	.word	0x58021400
 8003efc:	58021800 	.word	0x58021800
 8003f00:	58021c00 	.word	0x58021c00
 8003f04:	58022000 	.word	0x58022000
 8003f08:	58022400 	.word	0x58022400
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	69fa      	ldr	r2, [r7, #28]
 8003f10:	f002 0203 	and.w	r2, r2, #3
 8003f14:	0092      	lsls	r2, r2, #2
 8003f16:	4093      	lsls	r3, r2
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f1e:	4938      	ldr	r1, [pc, #224]	; (8004000 <HAL_GPIO_Init+0x35c>)
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	089b      	lsrs	r3, r3, #2
 8003f24:	3302      	adds	r3, #2
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	43db      	mvns	r3, r3
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4013      	ands	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003fa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003fd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f47f ae63 	bne.w	8003cb8 <HAL_GPIO_Init+0x14>
  }
}
 8003ff2:	bf00      	nop
 8003ff4:	3724      	adds	r7, #36	; 0x24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	58000400 	.word	0x58000400

08004004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	807b      	strh	r3, [r7, #2]
 8004010:	4613      	mov	r3, r2
 8004012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004014:	787b      	ldrb	r3, [r7, #1]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800401a:	887a      	ldrh	r2, [r7, #2]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004020:	e003      	b.n	800402a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004022:	887b      	ldrh	r3, [r7, #2]
 8004024:	041a      	lsls	r2, r3, #16
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	619a      	str	r2, [r3, #24]
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
	...

08004038 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004040:	4b19      	ldr	r3, [pc, #100]	; (80040a8 <HAL_PWREx_ConfigSupply+0x70>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b04      	cmp	r3, #4
 800404a:	d00a      	beq.n	8004062 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800404c:	4b16      	ldr	r3, [pc, #88]	; (80040a8 <HAL_PWREx_ConfigSupply+0x70>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	429a      	cmp	r2, r3
 8004058:	d001      	beq.n	800405e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e01f      	b.n	800409e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	e01d      	b.n	800409e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004062:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <HAL_PWREx_ConfigSupply+0x70>)
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f023 0207 	bic.w	r2, r3, #7
 800406a:	490f      	ldr	r1, [pc, #60]	; (80040a8 <HAL_PWREx_ConfigSupply+0x70>)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4313      	orrs	r3, r2
 8004070:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004072:	f7fd f9a5 	bl	80013c0 <HAL_GetTick>
 8004076:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004078:	e009      	b.n	800408e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800407a:	f7fd f9a1 	bl	80013c0 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004088:	d901      	bls.n	800408e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e007      	b.n	800409e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800408e:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <HAL_PWREx_ConfigSupply+0x70>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800409a:	d1ee      	bne.n	800407a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	58024800 	.word	0x58024800

080040ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b08c      	sub	sp, #48	; 0x30
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e3ff      	b.n	80048be <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 8087 	beq.w	80041da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040cc:	4b99      	ldr	r3, [pc, #612]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040d6:	4b97      	ldr	r3, [pc, #604]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 80040d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040da:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80040dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040de:	2b10      	cmp	r3, #16
 80040e0:	d007      	beq.n	80040f2 <HAL_RCC_OscConfig+0x46>
 80040e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e4:	2b18      	cmp	r3, #24
 80040e6:	d110      	bne.n	800410a <HAL_RCC_OscConfig+0x5e>
 80040e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d10b      	bne.n	800410a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f2:	4b90      	ldr	r3, [pc, #576]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d06c      	beq.n	80041d8 <HAL_RCC_OscConfig+0x12c>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d168      	bne.n	80041d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e3d9      	b.n	80048be <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004112:	d106      	bne.n	8004122 <HAL_RCC_OscConfig+0x76>
 8004114:	4b87      	ldr	r3, [pc, #540]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a86      	ldr	r2, [pc, #536]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 800411a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	e02e      	b.n	8004180 <HAL_RCC_OscConfig+0xd4>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10c      	bne.n	8004144 <HAL_RCC_OscConfig+0x98>
 800412a:	4b82      	ldr	r3, [pc, #520]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a81      	ldr	r2, [pc, #516]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 8004130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	4b7f      	ldr	r3, [pc, #508]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a7e      	ldr	r2, [pc, #504]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 800413c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	e01d      	b.n	8004180 <HAL_RCC_OscConfig+0xd4>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800414c:	d10c      	bne.n	8004168 <HAL_RCC_OscConfig+0xbc>
 800414e:	4b79      	ldr	r3, [pc, #484]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a78      	ldr	r2, [pc, #480]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 8004154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	4b76      	ldr	r3, [pc, #472]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a75      	ldr	r2, [pc, #468]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 8004160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	e00b      	b.n	8004180 <HAL_RCC_OscConfig+0xd4>
 8004168:	4b72      	ldr	r3, [pc, #456]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a71      	ldr	r2, [pc, #452]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 800416e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	4b6f      	ldr	r3, [pc, #444]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a6e      	ldr	r2, [pc, #440]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 800417a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800417e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d013      	beq.n	80041b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004188:	f7fd f91a 	bl	80013c0 <HAL_GetTick>
 800418c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004190:	f7fd f916 	bl	80013c0 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b64      	cmp	r3, #100	; 0x64
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e38d      	b.n	80048be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041a2:	4b64      	ldr	r3, [pc, #400]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0f0      	beq.n	8004190 <HAL_RCC_OscConfig+0xe4>
 80041ae:	e014      	b.n	80041da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b0:	f7fd f906 	bl	80013c0 <HAL_GetTick>
 80041b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041b8:	f7fd f902 	bl	80013c0 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b64      	cmp	r3, #100	; 0x64
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e379      	b.n	80048be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041ca:	4b5a      	ldr	r3, [pc, #360]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f0      	bne.n	80041b8 <HAL_RCC_OscConfig+0x10c>
 80041d6:	e000      	b.n	80041da <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 80ae 	beq.w	8004344 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041e8:	4b52      	ldr	r3, [pc, #328]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041f2:	4b50      	ldr	r3, [pc, #320]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 80041f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d007      	beq.n	800420e <HAL_RCC_OscConfig+0x162>
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	2b18      	cmp	r3, #24
 8004202:	d13a      	bne.n	800427a <HAL_RCC_OscConfig+0x1ce>
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d135      	bne.n	800427a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800420e:	4b49      	ldr	r3, [pc, #292]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	2b00      	cmp	r3, #0
 8004218:	d005      	beq.n	8004226 <HAL_RCC_OscConfig+0x17a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e34b      	b.n	80048be <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004226:	f7fd f8f9 	bl	800141c <HAL_GetREVID>
 800422a:	4602      	mov	r2, r0
 800422c:	f241 0303 	movw	r3, #4099	; 0x1003
 8004230:	429a      	cmp	r2, r3
 8004232:	d817      	bhi.n	8004264 <HAL_RCC_OscConfig+0x1b8>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	2b40      	cmp	r3, #64	; 0x40
 800423a:	d108      	bne.n	800424e <HAL_RCC_OscConfig+0x1a2>
 800423c:	4b3d      	ldr	r3, [pc, #244]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004244:	4a3b      	ldr	r2, [pc, #236]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 8004246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800424a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800424c:	e07a      	b.n	8004344 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800424e:	4b39      	ldr	r3, [pc, #228]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	031b      	lsls	r3, r3, #12
 800425c:	4935      	ldr	r1, [pc, #212]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 800425e:	4313      	orrs	r3, r2
 8004260:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004262:	e06f      	b.n	8004344 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004264:	4b33      	ldr	r3, [pc, #204]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	061b      	lsls	r3, r3, #24
 8004272:	4930      	ldr	r1, [pc, #192]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 8004274:	4313      	orrs	r3, r2
 8004276:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004278:	e064      	b.n	8004344 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d045      	beq.n	800430e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004282:	4b2c      	ldr	r3, [pc, #176]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f023 0219 	bic.w	r2, r3, #25
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	4929      	ldr	r1, [pc, #164]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 8004290:	4313      	orrs	r3, r2
 8004292:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004294:	f7fd f894 	bl	80013c0 <HAL_GetTick>
 8004298:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800429c:	f7fd f890 	bl	80013c0 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e307      	b.n	80048be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042ae:	4b21      	ldr	r3, [pc, #132]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0304 	and.w	r3, r3, #4
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0f0      	beq.n	800429c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ba:	f7fd f8af 	bl	800141c <HAL_GetREVID>
 80042be:	4602      	mov	r2, r0
 80042c0:	f241 0303 	movw	r3, #4099	; 0x1003
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d817      	bhi.n	80042f8 <HAL_RCC_OscConfig+0x24c>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	2b40      	cmp	r3, #64	; 0x40
 80042ce:	d108      	bne.n	80042e2 <HAL_RCC_OscConfig+0x236>
 80042d0:	4b18      	ldr	r3, [pc, #96]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80042d8:	4a16      	ldr	r2, [pc, #88]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 80042da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042de:	6053      	str	r3, [r2, #4]
 80042e0:	e030      	b.n	8004344 <HAL_RCC_OscConfig+0x298>
 80042e2:	4b14      	ldr	r3, [pc, #80]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	031b      	lsls	r3, r3, #12
 80042f0:	4910      	ldr	r1, [pc, #64]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	604b      	str	r3, [r1, #4]
 80042f6:	e025      	b.n	8004344 <HAL_RCC_OscConfig+0x298>
 80042f8:	4b0e      	ldr	r3, [pc, #56]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	061b      	lsls	r3, r3, #24
 8004306:	490b      	ldr	r1, [pc, #44]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 8004308:	4313      	orrs	r3, r2
 800430a:	604b      	str	r3, [r1, #4]
 800430c:	e01a      	b.n	8004344 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800430e:	4b09      	ldr	r3, [pc, #36]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a08      	ldr	r2, [pc, #32]	; (8004334 <HAL_RCC_OscConfig+0x288>)
 8004314:	f023 0301 	bic.w	r3, r3, #1
 8004318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431a:	f7fd f851 	bl	80013c0 <HAL_GetTick>
 800431e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004320:	e00a      	b.n	8004338 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004322:	f7fd f84d 	bl	80013c0 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d903      	bls.n	8004338 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e2c4      	b.n	80048be <HAL_RCC_OscConfig+0x812>
 8004334:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004338:	4ba4      	ldr	r3, [pc, #656]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1ee      	bne.n	8004322 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0310 	and.w	r3, r3, #16
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 80a9 	beq.w	80044a4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004352:	4b9e      	ldr	r3, [pc, #632]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800435a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800435c:	4b9b      	ldr	r3, [pc, #620]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 800435e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004360:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	2b08      	cmp	r3, #8
 8004366:	d007      	beq.n	8004378 <HAL_RCC_OscConfig+0x2cc>
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	2b18      	cmp	r3, #24
 800436c:	d13a      	bne.n	80043e4 <HAL_RCC_OscConfig+0x338>
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f003 0303 	and.w	r3, r3, #3
 8004374:	2b01      	cmp	r3, #1
 8004376:	d135      	bne.n	80043e4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004378:	4b94      	ldr	r3, [pc, #592]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004380:	2b00      	cmp	r3, #0
 8004382:	d005      	beq.n	8004390 <HAL_RCC_OscConfig+0x2e4>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	2b80      	cmp	r3, #128	; 0x80
 800438a:	d001      	beq.n	8004390 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e296      	b.n	80048be <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004390:	f7fd f844 	bl	800141c <HAL_GetREVID>
 8004394:	4602      	mov	r2, r0
 8004396:	f241 0303 	movw	r3, #4099	; 0x1003
 800439a:	429a      	cmp	r2, r3
 800439c:	d817      	bhi.n	80043ce <HAL_RCC_OscConfig+0x322>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	2b20      	cmp	r3, #32
 80043a4:	d108      	bne.n	80043b8 <HAL_RCC_OscConfig+0x30c>
 80043a6:	4b89      	ldr	r3, [pc, #548]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80043ae:	4a87      	ldr	r2, [pc, #540]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 80043b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043b4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043b6:	e075      	b.n	80044a4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043b8:	4b84      	ldr	r3, [pc, #528]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	069b      	lsls	r3, r3, #26
 80043c6:	4981      	ldr	r1, [pc, #516]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043cc:	e06a      	b.n	80044a4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043ce:	4b7f      	ldr	r3, [pc, #508]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	061b      	lsls	r3, r3, #24
 80043dc:	497b      	ldr	r1, [pc, #492]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043e2:	e05f      	b.n	80044a4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d042      	beq.n	8004472 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80043ec:	4b77      	ldr	r3, [pc, #476]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a76      	ldr	r2, [pc, #472]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 80043f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f8:	f7fc ffe2 	bl	80013c0 <HAL_GetTick>
 80043fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004400:	f7fc ffde 	bl	80013c0 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e255      	b.n	80048be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004412:	4b6e      	ldr	r3, [pc, #440]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0f0      	beq.n	8004400 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800441e:	f7fc fffd 	bl	800141c <HAL_GetREVID>
 8004422:	4602      	mov	r2, r0
 8004424:	f241 0303 	movw	r3, #4099	; 0x1003
 8004428:	429a      	cmp	r2, r3
 800442a:	d817      	bhi.n	800445c <HAL_RCC_OscConfig+0x3b0>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	2b20      	cmp	r3, #32
 8004432:	d108      	bne.n	8004446 <HAL_RCC_OscConfig+0x39a>
 8004434:	4b65      	ldr	r3, [pc, #404]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800443c:	4a63      	ldr	r2, [pc, #396]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 800443e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004442:	6053      	str	r3, [r2, #4]
 8004444:	e02e      	b.n	80044a4 <HAL_RCC_OscConfig+0x3f8>
 8004446:	4b61      	ldr	r3, [pc, #388]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	069b      	lsls	r3, r3, #26
 8004454:	495d      	ldr	r1, [pc, #372]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 8004456:	4313      	orrs	r3, r2
 8004458:	604b      	str	r3, [r1, #4]
 800445a:	e023      	b.n	80044a4 <HAL_RCC_OscConfig+0x3f8>
 800445c:	4b5b      	ldr	r3, [pc, #364]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	061b      	lsls	r3, r3, #24
 800446a:	4958      	ldr	r1, [pc, #352]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 800446c:	4313      	orrs	r3, r2
 800446e:	60cb      	str	r3, [r1, #12]
 8004470:	e018      	b.n	80044a4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004472:	4b56      	ldr	r3, [pc, #344]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a55      	ldr	r2, [pc, #340]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 8004478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800447c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447e:	f7fc ff9f 	bl	80013c0 <HAL_GetTick>
 8004482:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004486:	f7fc ff9b 	bl	80013c0 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e212      	b.n	80048be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004498:	4b4c      	ldr	r3, [pc, #304]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1f0      	bne.n	8004486 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0308 	and.w	r3, r3, #8
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d036      	beq.n	800451e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d019      	beq.n	80044ec <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044b8:	4b44      	ldr	r3, [pc, #272]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 80044ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044bc:	4a43      	ldr	r2, [pc, #268]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 80044be:	f043 0301 	orr.w	r3, r3, #1
 80044c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c4:	f7fc ff7c 	bl	80013c0 <HAL_GetTick>
 80044c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044cc:	f7fc ff78 	bl	80013c0 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e1ef      	b.n	80048be <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044de:	4b3b      	ldr	r3, [pc, #236]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 80044e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0f0      	beq.n	80044cc <HAL_RCC_OscConfig+0x420>
 80044ea:	e018      	b.n	800451e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ec:	4b37      	ldr	r3, [pc, #220]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 80044ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f0:	4a36      	ldr	r2, [pc, #216]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 80044f2:	f023 0301 	bic.w	r3, r3, #1
 80044f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f8:	f7fc ff62 	bl	80013c0 <HAL_GetTick>
 80044fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004500:	f7fc ff5e 	bl	80013c0 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e1d5      	b.n	80048be <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004512:	4b2e      	ldr	r3, [pc, #184]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 8004514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1f0      	bne.n	8004500 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0320 	and.w	r3, r3, #32
 8004526:	2b00      	cmp	r3, #0
 8004528:	d036      	beq.n	8004598 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d019      	beq.n	8004566 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004532:	4b26      	ldr	r3, [pc, #152]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a25      	ldr	r2, [pc, #148]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 8004538:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800453c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800453e:	f7fc ff3f 	bl	80013c0 <HAL_GetTick>
 8004542:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004546:	f7fc ff3b 	bl	80013c0 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e1b2      	b.n	80048be <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004558:	4b1c      	ldr	r3, [pc, #112]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0f0      	beq.n	8004546 <HAL_RCC_OscConfig+0x49a>
 8004564:	e018      	b.n	8004598 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004566:	4b19      	ldr	r3, [pc, #100]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a18      	ldr	r2, [pc, #96]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 800456c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004570:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004572:	f7fc ff25 	bl	80013c0 <HAL_GetTick>
 8004576:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004578:	e008      	b.n	800458c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800457a:	f7fc ff21 	bl	80013c0 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e198      	b.n	80048be <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800458c:	4b0f      	ldr	r3, [pc, #60]	; (80045cc <HAL_RCC_OscConfig+0x520>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1f0      	bne.n	800457a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 8085 	beq.w	80046b0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80045a6:	4b0a      	ldr	r3, [pc, #40]	; (80045d0 <HAL_RCC_OscConfig+0x524>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a09      	ldr	r2, [pc, #36]	; (80045d0 <HAL_RCC_OscConfig+0x524>)
 80045ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045b2:	f7fc ff05 	bl	80013c0 <HAL_GetTick>
 80045b6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045b8:	e00c      	b.n	80045d4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80045ba:	f7fc ff01 	bl	80013c0 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b64      	cmp	r3, #100	; 0x64
 80045c6:	d905      	bls.n	80045d4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e178      	b.n	80048be <HAL_RCC_OscConfig+0x812>
 80045cc:	58024400 	.word	0x58024400
 80045d0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045d4:	4b96      	ldr	r3, [pc, #600]	; (8004830 <HAL_RCC_OscConfig+0x784>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0ec      	beq.n	80045ba <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d106      	bne.n	80045f6 <HAL_RCC_OscConfig+0x54a>
 80045e8:	4b92      	ldr	r3, [pc, #584]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 80045ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ec:	4a91      	ldr	r2, [pc, #580]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 80045ee:	f043 0301 	orr.w	r3, r3, #1
 80045f2:	6713      	str	r3, [r2, #112]	; 0x70
 80045f4:	e02d      	b.n	8004652 <HAL_RCC_OscConfig+0x5a6>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10c      	bne.n	8004618 <HAL_RCC_OscConfig+0x56c>
 80045fe:	4b8d      	ldr	r3, [pc, #564]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 8004600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004602:	4a8c      	ldr	r2, [pc, #560]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 8004604:	f023 0301 	bic.w	r3, r3, #1
 8004608:	6713      	str	r3, [r2, #112]	; 0x70
 800460a:	4b8a      	ldr	r3, [pc, #552]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 800460c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460e:	4a89      	ldr	r2, [pc, #548]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 8004610:	f023 0304 	bic.w	r3, r3, #4
 8004614:	6713      	str	r3, [r2, #112]	; 0x70
 8004616:	e01c      	b.n	8004652 <HAL_RCC_OscConfig+0x5a6>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	2b05      	cmp	r3, #5
 800461e:	d10c      	bne.n	800463a <HAL_RCC_OscConfig+0x58e>
 8004620:	4b84      	ldr	r3, [pc, #528]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 8004622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004624:	4a83      	ldr	r2, [pc, #524]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 8004626:	f043 0304 	orr.w	r3, r3, #4
 800462a:	6713      	str	r3, [r2, #112]	; 0x70
 800462c:	4b81      	ldr	r3, [pc, #516]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 800462e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004630:	4a80      	ldr	r2, [pc, #512]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 8004632:	f043 0301 	orr.w	r3, r3, #1
 8004636:	6713      	str	r3, [r2, #112]	; 0x70
 8004638:	e00b      	b.n	8004652 <HAL_RCC_OscConfig+0x5a6>
 800463a:	4b7e      	ldr	r3, [pc, #504]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 800463c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463e:	4a7d      	ldr	r2, [pc, #500]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 8004640:	f023 0301 	bic.w	r3, r3, #1
 8004644:	6713      	str	r3, [r2, #112]	; 0x70
 8004646:	4b7b      	ldr	r3, [pc, #492]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 8004648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464a:	4a7a      	ldr	r2, [pc, #488]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 800464c:	f023 0304 	bic.w	r3, r3, #4
 8004650:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d015      	beq.n	8004686 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465a:	f7fc feb1 	bl	80013c0 <HAL_GetTick>
 800465e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004660:	e00a      	b.n	8004678 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004662:	f7fc fead 	bl	80013c0 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004670:	4293      	cmp	r3, r2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e122      	b.n	80048be <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004678:	4b6e      	ldr	r3, [pc, #440]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 800467a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0ee      	beq.n	8004662 <HAL_RCC_OscConfig+0x5b6>
 8004684:	e014      	b.n	80046b0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004686:	f7fc fe9b 	bl	80013c0 <HAL_GetTick>
 800468a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800468c:	e00a      	b.n	80046a4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800468e:	f7fc fe97 	bl	80013c0 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	f241 3288 	movw	r2, #5000	; 0x1388
 800469c:	4293      	cmp	r3, r2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e10c      	b.n	80048be <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80046a4:	4b63      	ldr	r3, [pc, #396]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 80046a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1ee      	bne.n	800468e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 8101 	beq.w	80048bc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80046ba:	4b5e      	ldr	r3, [pc, #376]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046c2:	2b18      	cmp	r3, #24
 80046c4:	f000 80bc 	beq.w	8004840 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	f040 8095 	bne.w	80047fc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d2:	4b58      	ldr	r3, [pc, #352]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a57      	ldr	r2, [pc, #348]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 80046d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046de:	f7fc fe6f 	bl	80013c0 <HAL_GetTick>
 80046e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e6:	f7fc fe6b 	bl	80013c0 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e0e2      	b.n	80048be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046f8:	4b4e      	ldr	r3, [pc, #312]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1f0      	bne.n	80046e6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004704:	4b4b      	ldr	r3, [pc, #300]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 8004706:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004708:	4b4b      	ldr	r3, [pc, #300]	; (8004838 <HAL_RCC_OscConfig+0x78c>)
 800470a:	4013      	ands	r3, r2
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004714:	0112      	lsls	r2, r2, #4
 8004716:	430a      	orrs	r2, r1
 8004718:	4946      	ldr	r1, [pc, #280]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 800471a:	4313      	orrs	r3, r2
 800471c:	628b      	str	r3, [r1, #40]	; 0x28
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004722:	3b01      	subs	r3, #1
 8004724:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800472c:	3b01      	subs	r3, #1
 800472e:	025b      	lsls	r3, r3, #9
 8004730:	b29b      	uxth	r3, r3
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	3b01      	subs	r3, #1
 800473a:	041b      	lsls	r3, r3, #16
 800473c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004740:	431a      	orrs	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004746:	3b01      	subs	r3, #1
 8004748:	061b      	lsls	r3, r3, #24
 800474a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800474e:	4939      	ldr	r1, [pc, #228]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 8004750:	4313      	orrs	r3, r2
 8004752:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004754:	4b37      	ldr	r3, [pc, #220]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	4a36      	ldr	r2, [pc, #216]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 800475a:	f023 0301 	bic.w	r3, r3, #1
 800475e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004760:	4b34      	ldr	r3, [pc, #208]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 8004762:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004764:	4b35      	ldr	r3, [pc, #212]	; (800483c <HAL_RCC_OscConfig+0x790>)
 8004766:	4013      	ands	r3, r2
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800476c:	00d2      	lsls	r2, r2, #3
 800476e:	4931      	ldr	r1, [pc, #196]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 8004770:	4313      	orrs	r3, r2
 8004772:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004774:	4b2f      	ldr	r3, [pc, #188]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 8004776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004778:	f023 020c 	bic.w	r2, r3, #12
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	492c      	ldr	r1, [pc, #176]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 8004782:	4313      	orrs	r3, r2
 8004784:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004786:	4b2b      	ldr	r3, [pc, #172]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 8004788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478a:	f023 0202 	bic.w	r2, r3, #2
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004792:	4928      	ldr	r1, [pc, #160]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 8004794:	4313      	orrs	r3, r2
 8004796:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004798:	4b26      	ldr	r3, [pc, #152]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	4a25      	ldr	r2, [pc, #148]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 800479e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047a4:	4b23      	ldr	r3, [pc, #140]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	4a22      	ldr	r2, [pc, #136]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 80047aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80047b0:	4b20      	ldr	r3, [pc, #128]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 80047b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b4:	4a1f      	ldr	r2, [pc, #124]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 80047b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80047bc:	4b1d      	ldr	r3, [pc, #116]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	4a1c      	ldr	r2, [pc, #112]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 80047c2:	f043 0301 	orr.w	r3, r3, #1
 80047c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047c8:	4b1a      	ldr	r3, [pc, #104]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a19      	ldr	r2, [pc, #100]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 80047ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d4:	f7fc fdf4 	bl	80013c0 <HAL_GetTick>
 80047d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047dc:	f7fc fdf0 	bl	80013c0 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e067      	b.n	80048be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047ee:	4b11      	ldr	r3, [pc, #68]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0f0      	beq.n	80047dc <HAL_RCC_OscConfig+0x730>
 80047fa:	e05f      	b.n	80048bc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047fc:	4b0d      	ldr	r3, [pc, #52]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a0c      	ldr	r2, [pc, #48]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 8004802:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004806:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004808:	f7fc fdda 	bl	80013c0 <HAL_GetTick>
 800480c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004810:	f7fc fdd6 	bl	80013c0 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e04d      	b.n	80048be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004822:	4b04      	ldr	r3, [pc, #16]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1f0      	bne.n	8004810 <HAL_RCC_OscConfig+0x764>
 800482e:	e045      	b.n	80048bc <HAL_RCC_OscConfig+0x810>
 8004830:	58024800 	.word	0x58024800
 8004834:	58024400 	.word	0x58024400
 8004838:	fffffc0c 	.word	0xfffffc0c
 800483c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004840:	4b21      	ldr	r3, [pc, #132]	; (80048c8 <HAL_RCC_OscConfig+0x81c>)
 8004842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004844:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004846:	4b20      	ldr	r3, [pc, #128]	; (80048c8 <HAL_RCC_OscConfig+0x81c>)
 8004848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	2b01      	cmp	r3, #1
 8004852:	d031      	beq.n	80048b8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f003 0203 	and.w	r2, r3, #3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800485e:	429a      	cmp	r2, r3
 8004860:	d12a      	bne.n	80048b8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	091b      	lsrs	r3, r3, #4
 8004866:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800486e:	429a      	cmp	r2, r3
 8004870:	d122      	bne.n	80048b8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800487e:	429a      	cmp	r2, r3
 8004880:	d11a      	bne.n	80048b8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	0a5b      	lsrs	r3, r3, #9
 8004886:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004890:	429a      	cmp	r2, r3
 8004892:	d111      	bne.n	80048b8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	0c1b      	lsrs	r3, r3, #16
 8004898:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d108      	bne.n	80048b8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	0e1b      	lsrs	r3, r3, #24
 80048aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d001      	beq.n	80048bc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e000      	b.n	80048be <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3730      	adds	r7, #48	; 0x30
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	58024400 	.word	0x58024400

080048cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e19c      	b.n	8004c1a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048e0:	4b8a      	ldr	r3, [pc, #552]	; (8004b0c <HAL_RCC_ClockConfig+0x240>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 030f 	and.w	r3, r3, #15
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d910      	bls.n	8004910 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ee:	4b87      	ldr	r3, [pc, #540]	; (8004b0c <HAL_RCC_ClockConfig+0x240>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f023 020f 	bic.w	r2, r3, #15
 80048f6:	4985      	ldr	r1, [pc, #532]	; (8004b0c <HAL_RCC_ClockConfig+0x240>)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fe:	4b83      	ldr	r3, [pc, #524]	; (8004b0c <HAL_RCC_ClockConfig+0x240>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	429a      	cmp	r2, r3
 800490a:	d001      	beq.n	8004910 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e184      	b.n	8004c1a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	d010      	beq.n	800493e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	691a      	ldr	r2, [r3, #16]
 8004920:	4b7b      	ldr	r3, [pc, #492]	; (8004b10 <HAL_RCC_ClockConfig+0x244>)
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004928:	429a      	cmp	r2, r3
 800492a:	d908      	bls.n	800493e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800492c:	4b78      	ldr	r3, [pc, #480]	; (8004b10 <HAL_RCC_ClockConfig+0x244>)
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	4975      	ldr	r1, [pc, #468]	; (8004b10 <HAL_RCC_ClockConfig+0x244>)
 800493a:	4313      	orrs	r3, r2
 800493c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d010      	beq.n	800496c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	695a      	ldr	r2, [r3, #20]
 800494e:	4b70      	ldr	r3, [pc, #448]	; (8004b10 <HAL_RCC_ClockConfig+0x244>)
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004956:	429a      	cmp	r2, r3
 8004958:	d908      	bls.n	800496c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800495a:	4b6d      	ldr	r3, [pc, #436]	; (8004b10 <HAL_RCC_ClockConfig+0x244>)
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	496a      	ldr	r1, [pc, #424]	; (8004b10 <HAL_RCC_ClockConfig+0x244>)
 8004968:	4313      	orrs	r3, r2
 800496a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0310 	and.w	r3, r3, #16
 8004974:	2b00      	cmp	r3, #0
 8004976:	d010      	beq.n	800499a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	699a      	ldr	r2, [r3, #24]
 800497c:	4b64      	ldr	r3, [pc, #400]	; (8004b10 <HAL_RCC_ClockConfig+0x244>)
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004984:	429a      	cmp	r2, r3
 8004986:	d908      	bls.n	800499a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004988:	4b61      	ldr	r3, [pc, #388]	; (8004b10 <HAL_RCC_ClockConfig+0x244>)
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	495e      	ldr	r1, [pc, #376]	; (8004b10 <HAL_RCC_ClockConfig+0x244>)
 8004996:	4313      	orrs	r3, r2
 8004998:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0320 	and.w	r3, r3, #32
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d010      	beq.n	80049c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69da      	ldr	r2, [r3, #28]
 80049aa:	4b59      	ldr	r3, [pc, #356]	; (8004b10 <HAL_RCC_ClockConfig+0x244>)
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d908      	bls.n	80049c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80049b6:	4b56      	ldr	r3, [pc, #344]	; (8004b10 <HAL_RCC_ClockConfig+0x244>)
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	4953      	ldr	r1, [pc, #332]	; (8004b10 <HAL_RCC_ClockConfig+0x244>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d010      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68da      	ldr	r2, [r3, #12]
 80049d8:	4b4d      	ldr	r3, [pc, #308]	; (8004b10 <HAL_RCC_ClockConfig+0x244>)
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	f003 030f 	and.w	r3, r3, #15
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d908      	bls.n	80049f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049e4:	4b4a      	ldr	r3, [pc, #296]	; (8004b10 <HAL_RCC_ClockConfig+0x244>)
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	f023 020f 	bic.w	r2, r3, #15
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	4947      	ldr	r1, [pc, #284]	; (8004b10 <HAL_RCC_ClockConfig+0x244>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d055      	beq.n	8004aae <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004a02:	4b43      	ldr	r3, [pc, #268]	; (8004b10 <HAL_RCC_ClockConfig+0x244>)
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	4940      	ldr	r1, [pc, #256]	; (8004b10 <HAL_RCC_ClockConfig+0x244>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d107      	bne.n	8004a2c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a1c:	4b3c      	ldr	r3, [pc, #240]	; (8004b10 <HAL_RCC_ClockConfig+0x244>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d121      	bne.n	8004a6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e0f6      	b.n	8004c1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	d107      	bne.n	8004a44 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a34:	4b36      	ldr	r3, [pc, #216]	; (8004b10 <HAL_RCC_ClockConfig+0x244>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d115      	bne.n	8004a6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e0ea      	b.n	8004c1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d107      	bne.n	8004a5c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a4c:	4b30      	ldr	r3, [pc, #192]	; (8004b10 <HAL_RCC_ClockConfig+0x244>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d109      	bne.n	8004a6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e0de      	b.n	8004c1a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a5c:	4b2c      	ldr	r3, [pc, #176]	; (8004b10 <HAL_RCC_ClockConfig+0x244>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e0d6      	b.n	8004c1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a6c:	4b28      	ldr	r3, [pc, #160]	; (8004b10 <HAL_RCC_ClockConfig+0x244>)
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	f023 0207 	bic.w	r2, r3, #7
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	4925      	ldr	r1, [pc, #148]	; (8004b10 <HAL_RCC_ClockConfig+0x244>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7e:	f7fc fc9f 	bl	80013c0 <HAL_GetTick>
 8004a82:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a84:	e00a      	b.n	8004a9c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a86:	f7fc fc9b 	bl	80013c0 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e0be      	b.n	8004c1a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a9c:	4b1c      	ldr	r3, [pc, #112]	; (8004b10 <HAL_RCC_ClockConfig+0x244>)
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d1eb      	bne.n	8004a86 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d010      	beq.n	8004adc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	4b14      	ldr	r3, [pc, #80]	; (8004b10 <HAL_RCC_ClockConfig+0x244>)
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d208      	bcs.n	8004adc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aca:	4b11      	ldr	r3, [pc, #68]	; (8004b10 <HAL_RCC_ClockConfig+0x244>)
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	f023 020f 	bic.w	r2, r3, #15
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	490e      	ldr	r1, [pc, #56]	; (8004b10 <HAL_RCC_ClockConfig+0x244>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004adc:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <HAL_RCC_ClockConfig+0x240>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 030f 	and.w	r3, r3, #15
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d214      	bcs.n	8004b14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aea:	4b08      	ldr	r3, [pc, #32]	; (8004b0c <HAL_RCC_ClockConfig+0x240>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f023 020f 	bic.w	r2, r3, #15
 8004af2:	4906      	ldr	r1, [pc, #24]	; (8004b0c <HAL_RCC_ClockConfig+0x240>)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afa:	4b04      	ldr	r3, [pc, #16]	; (8004b0c <HAL_RCC_ClockConfig+0x240>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d005      	beq.n	8004b14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e086      	b.n	8004c1a <HAL_RCC_ClockConfig+0x34e>
 8004b0c:	52002000 	.word	0x52002000
 8004b10:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0304 	and.w	r3, r3, #4
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d010      	beq.n	8004b42 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691a      	ldr	r2, [r3, #16]
 8004b24:	4b3f      	ldr	r3, [pc, #252]	; (8004c24 <HAL_RCC_ClockConfig+0x358>)
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d208      	bcs.n	8004b42 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b30:	4b3c      	ldr	r3, [pc, #240]	; (8004c24 <HAL_RCC_ClockConfig+0x358>)
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	4939      	ldr	r1, [pc, #228]	; (8004c24 <HAL_RCC_ClockConfig+0x358>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0308 	and.w	r3, r3, #8
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d010      	beq.n	8004b70 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695a      	ldr	r2, [r3, #20]
 8004b52:	4b34      	ldr	r3, [pc, #208]	; (8004c24 <HAL_RCC_ClockConfig+0x358>)
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d208      	bcs.n	8004b70 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b5e:	4b31      	ldr	r3, [pc, #196]	; (8004c24 <HAL_RCC_ClockConfig+0x358>)
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	492e      	ldr	r1, [pc, #184]	; (8004c24 <HAL_RCC_ClockConfig+0x358>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0310 	and.w	r3, r3, #16
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d010      	beq.n	8004b9e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699a      	ldr	r2, [r3, #24]
 8004b80:	4b28      	ldr	r3, [pc, #160]	; (8004c24 <HAL_RCC_ClockConfig+0x358>)
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d208      	bcs.n	8004b9e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b8c:	4b25      	ldr	r3, [pc, #148]	; (8004c24 <HAL_RCC_ClockConfig+0x358>)
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	4922      	ldr	r1, [pc, #136]	; (8004c24 <HAL_RCC_ClockConfig+0x358>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0320 	and.w	r3, r3, #32
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d010      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69da      	ldr	r2, [r3, #28]
 8004bae:	4b1d      	ldr	r3, [pc, #116]	; (8004c24 <HAL_RCC_ClockConfig+0x358>)
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d208      	bcs.n	8004bcc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004bba:	4b1a      	ldr	r3, [pc, #104]	; (8004c24 <HAL_RCC_ClockConfig+0x358>)
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	4917      	ldr	r1, [pc, #92]	; (8004c24 <HAL_RCC_ClockConfig+0x358>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004bcc:	f000 f834 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 8004bd0:	4601      	mov	r1, r0
 8004bd2:	4b14      	ldr	r3, [pc, #80]	; (8004c24 <HAL_RCC_ClockConfig+0x358>)
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	0a1b      	lsrs	r3, r3, #8
 8004bd8:	f003 030f 	and.w	r3, r3, #15
 8004bdc:	4a12      	ldr	r2, [pc, #72]	; (8004c28 <HAL_RCC_ClockConfig+0x35c>)
 8004bde:	5cd3      	ldrb	r3, [r2, r3]
 8004be0:	f003 031f 	and.w	r3, r3, #31
 8004be4:	fa21 f303 	lsr.w	r3, r1, r3
 8004be8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004bea:	4b0e      	ldr	r3, [pc, #56]	; (8004c24 <HAL_RCC_ClockConfig+0x358>)
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	4a0d      	ldr	r2, [pc, #52]	; (8004c28 <HAL_RCC_ClockConfig+0x35c>)
 8004bf4:	5cd3      	ldrb	r3, [r2, r3]
 8004bf6:	f003 031f 	and.w	r3, r3, #31
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004c00:	4a0a      	ldr	r2, [pc, #40]	; (8004c2c <HAL_RCC_ClockConfig+0x360>)
 8004c02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c04:	4a0a      	ldr	r2, [pc, #40]	; (8004c30 <HAL_RCC_ClockConfig+0x364>)
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004c0a:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <HAL_RCC_ClockConfig+0x368>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fc fb8c 	bl	800132c <HAL_InitTick>
 8004c14:	4603      	mov	r3, r0
 8004c16:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3718      	adds	r7, #24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	58024400 	.word	0x58024400
 8004c28:	0800c5f0 	.word	0x0800c5f0
 8004c2c:	24000004 	.word	0x24000004
 8004c30:	24000000 	.word	0x24000000
 8004c34:	24000008 	.word	0x24000008

08004c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b089      	sub	sp, #36	; 0x24
 8004c3c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c3e:	4baf      	ldr	r3, [pc, #700]	; (8004efc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c46:	2b18      	cmp	r3, #24
 8004c48:	f200 814e 	bhi.w	8004ee8 <HAL_RCC_GetSysClockFreq+0x2b0>
 8004c4c:	a201      	add	r2, pc, #4	; (adr r2, 8004c54 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c52:	bf00      	nop
 8004c54:	08004cb9 	.word	0x08004cb9
 8004c58:	08004ee9 	.word	0x08004ee9
 8004c5c:	08004ee9 	.word	0x08004ee9
 8004c60:	08004ee9 	.word	0x08004ee9
 8004c64:	08004ee9 	.word	0x08004ee9
 8004c68:	08004ee9 	.word	0x08004ee9
 8004c6c:	08004ee9 	.word	0x08004ee9
 8004c70:	08004ee9 	.word	0x08004ee9
 8004c74:	08004cdf 	.word	0x08004cdf
 8004c78:	08004ee9 	.word	0x08004ee9
 8004c7c:	08004ee9 	.word	0x08004ee9
 8004c80:	08004ee9 	.word	0x08004ee9
 8004c84:	08004ee9 	.word	0x08004ee9
 8004c88:	08004ee9 	.word	0x08004ee9
 8004c8c:	08004ee9 	.word	0x08004ee9
 8004c90:	08004ee9 	.word	0x08004ee9
 8004c94:	08004ce5 	.word	0x08004ce5
 8004c98:	08004ee9 	.word	0x08004ee9
 8004c9c:	08004ee9 	.word	0x08004ee9
 8004ca0:	08004ee9 	.word	0x08004ee9
 8004ca4:	08004ee9 	.word	0x08004ee9
 8004ca8:	08004ee9 	.word	0x08004ee9
 8004cac:	08004ee9 	.word	0x08004ee9
 8004cb0:	08004ee9 	.word	0x08004ee9
 8004cb4:	08004ceb 	.word	0x08004ceb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cb8:	4b90      	ldr	r3, [pc, #576]	; (8004efc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0320 	and.w	r3, r3, #32
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d009      	beq.n	8004cd8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004cc4:	4b8d      	ldr	r3, [pc, #564]	; (8004efc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	08db      	lsrs	r3, r3, #3
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	4a8c      	ldr	r2, [pc, #560]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004cd6:	e10a      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004cd8:	4b89      	ldr	r3, [pc, #548]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004cda:	61bb      	str	r3, [r7, #24]
    break;
 8004cdc:	e107      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004cde:	4b89      	ldr	r3, [pc, #548]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004ce0:	61bb      	str	r3, [r7, #24]
    break;
 8004ce2:	e104      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004ce4:	4b88      	ldr	r3, [pc, #544]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004ce6:	61bb      	str	r3, [r7, #24]
    break;
 8004ce8:	e101      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cea:	4b84      	ldr	r3, [pc, #528]	; (8004efc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004cf4:	4b81      	ldr	r3, [pc, #516]	; (8004efc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf8:	091b      	lsrs	r3, r3, #4
 8004cfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cfe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004d00:	4b7e      	ldr	r3, [pc, #504]	; (8004efc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004d0a:	4b7c      	ldr	r3, [pc, #496]	; (8004efc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0e:	08db      	lsrs	r3, r3, #3
 8004d10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	fb02 f303 	mul.w	r3, r2, r3
 8004d1a:	ee07 3a90 	vmov	s15, r3
 8004d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d22:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 80da 	beq.w	8004ee2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d05a      	beq.n	8004dea <HAL_RCC_GetSysClockFreq+0x1b2>
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d302      	bcc.n	8004d3e <HAL_RCC_GetSysClockFreq+0x106>
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d078      	beq.n	8004e2e <HAL_RCC_GetSysClockFreq+0x1f6>
 8004d3c:	e099      	b.n	8004e72 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d3e:	4b6f      	ldr	r3, [pc, #444]	; (8004efc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d02d      	beq.n	8004da6 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d4a:	4b6c      	ldr	r3, [pc, #432]	; (8004efc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	08db      	lsrs	r3, r3, #3
 8004d50:	f003 0303 	and.w	r3, r3, #3
 8004d54:	4a6a      	ldr	r2, [pc, #424]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004d56:	fa22 f303 	lsr.w	r3, r2, r3
 8004d5a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	ee07 3a90 	vmov	s15, r3
 8004d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	ee07 3a90 	vmov	s15, r3
 8004d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d74:	4b61      	ldr	r3, [pc, #388]	; (8004efc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d7c:	ee07 3a90 	vmov	s15, r3
 8004d80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d84:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d88:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004f0c <HAL_RCC_GetSysClockFreq+0x2d4>
 8004d8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004da4:	e087      	b.n	8004eb6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	ee07 3a90 	vmov	s15, r3
 8004dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004f10 <HAL_RCC_GetSysClockFreq+0x2d8>
 8004db4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004db8:	4b50      	ldr	r3, [pc, #320]	; (8004efc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc0:	ee07 3a90 	vmov	s15, r3
 8004dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dc8:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dcc:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004f0c <HAL_RCC_GetSysClockFreq+0x2d4>
 8004dd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ddc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004de4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004de8:	e065      	b.n	8004eb6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	ee07 3a90 	vmov	s15, r3
 8004df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df4:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004f14 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004df8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dfc:	4b3f      	ldr	r3, [pc, #252]	; (8004efc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e04:	ee07 3a90 	vmov	s15, r3
 8004e08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e10:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004f0c <HAL_RCC_GetSysClockFreq+0x2d4>
 8004e14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e2c:	e043      	b.n	8004eb6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	ee07 3a90 	vmov	s15, r3
 8004e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e38:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004f18 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004e3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e40:	4b2e      	ldr	r3, [pc, #184]	; (8004efc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e48:	ee07 3a90 	vmov	s15, r3
 8004e4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e50:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e54:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004f0c <HAL_RCC_GetSysClockFreq+0x2d4>
 8004e58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e70:	e021      	b.n	8004eb6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	ee07 3a90 	vmov	s15, r3
 8004e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e7c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004f14 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004e80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e84:	4b1d      	ldr	r3, [pc, #116]	; (8004efc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e8c:	ee07 3a90 	vmov	s15, r3
 8004e90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e94:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e98:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004f0c <HAL_RCC_GetSysClockFreq+0x2d4>
 8004e9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ea0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ea4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ea8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eb0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eb4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004eb6:	4b11      	ldr	r3, [pc, #68]	; (8004efc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eba:	0a5b      	lsrs	r3, r3, #9
 8004ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	ee07 3a90 	vmov	s15, r3
 8004eca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ece:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ed6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eda:	ee17 3a90 	vmov	r3, s15
 8004ede:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004ee0:	e005      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	61bb      	str	r3, [r7, #24]
    break;
 8004ee6:	e002      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004ee8:	4b06      	ldr	r3, [pc, #24]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004eea:	61bb      	str	r3, [r7, #24]
    break;
 8004eec:	bf00      	nop
  }

  return sysclockfreq;
 8004eee:	69bb      	ldr	r3, [r7, #24]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3724      	adds	r7, #36	; 0x24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	58024400 	.word	0x58024400
 8004f00:	03d09000 	.word	0x03d09000
 8004f04:	003d0900 	.word	0x003d0900
 8004f08:	007a1200 	.word	0x007a1200
 8004f0c:	46000000 	.word	0x46000000
 8004f10:	4c742400 	.word	0x4c742400
 8004f14:	4a742400 	.word	0x4a742400
 8004f18:	4af42400 	.word	0x4af42400

08004f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004f22:	f7ff fe89 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 8004f26:	4601      	mov	r1, r0
 8004f28:	4b10      	ldr	r3, [pc, #64]	; (8004f6c <HAL_RCC_GetHCLKFreq+0x50>)
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	0a1b      	lsrs	r3, r3, #8
 8004f2e:	f003 030f 	and.w	r3, r3, #15
 8004f32:	4a0f      	ldr	r2, [pc, #60]	; (8004f70 <HAL_RCC_GetHCLKFreq+0x54>)
 8004f34:	5cd3      	ldrb	r3, [r2, r3]
 8004f36:	f003 031f 	and.w	r3, r3, #31
 8004f3a:	fa21 f303 	lsr.w	r3, r1, r3
 8004f3e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f40:	4b0a      	ldr	r3, [pc, #40]	; (8004f6c <HAL_RCC_GetHCLKFreq+0x50>)
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	f003 030f 	and.w	r3, r3, #15
 8004f48:	4a09      	ldr	r2, [pc, #36]	; (8004f70 <HAL_RCC_GetHCLKFreq+0x54>)
 8004f4a:	5cd3      	ldrb	r3, [r2, r3]
 8004f4c:	f003 031f 	and.w	r3, r3, #31
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	fa22 f303 	lsr.w	r3, r2, r3
 8004f56:	4a07      	ldr	r2, [pc, #28]	; (8004f74 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f58:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f5a:	4a07      	ldr	r2, [pc, #28]	; (8004f78 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004f60:	4b04      	ldr	r3, [pc, #16]	; (8004f74 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f62:	681b      	ldr	r3, [r3, #0]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	58024400 	.word	0x58024400
 8004f70:	0800c5f0 	.word	0x0800c5f0
 8004f74:	24000004 	.word	0x24000004
 8004f78:	24000000 	.word	0x24000000

08004f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004f80:	f7ff ffcc 	bl	8004f1c <HAL_RCC_GetHCLKFreq>
 8004f84:	4601      	mov	r1, r0
 8004f86:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	091b      	lsrs	r3, r3, #4
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	4a04      	ldr	r2, [pc, #16]	; (8004fa4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f92:	5cd3      	ldrb	r3, [r2, r3]
 8004f94:	f003 031f 	and.w	r3, r3, #31
 8004f98:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	58024400 	.word	0x58024400
 8004fa4:	0800c5f0 	.word	0x0800c5f0

08004fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004fac:	f7ff ffb6 	bl	8004f1c <HAL_RCC_GetHCLKFreq>
 8004fb0:	4601      	mov	r1, r0
 8004fb2:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	0a1b      	lsrs	r3, r3, #8
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	4a04      	ldr	r2, [pc, #16]	; (8004fd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fbe:	5cd3      	ldrb	r3, [r2, r3]
 8004fc0:	f003 031f 	and.w	r3, r3, #31
 8004fc4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	58024400 	.word	0x58024400
 8004fd0:	0800c5f0 	.word	0x0800c5f0

08004fd4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fdc:	2300      	movs	r3, #0
 8004fde:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d03d      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ff4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ff8:	d013      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ffe:	d802      	bhi.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005000:	2b00      	cmp	r3, #0
 8005002:	d007      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005004:	e01f      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005006:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800500a:	d013      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800500c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005010:	d01c      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005012:	e018      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005014:	4baf      	ldr	r3, [pc, #700]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005018:	4aae      	ldr	r2, [pc, #696]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800501a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800501e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005020:	e015      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3304      	adds	r3, #4
 8005026:	2102      	movs	r1, #2
 8005028:	4618      	mov	r0, r3
 800502a:	f001 f96f 	bl	800630c <RCCEx_PLL2_Config>
 800502e:	4603      	mov	r3, r0
 8005030:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005032:	e00c      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3324      	adds	r3, #36	; 0x24
 8005038:	2102      	movs	r1, #2
 800503a:	4618      	mov	r0, r3
 800503c:	f001 fa18 	bl	8006470 <RCCEx_PLL3_Config>
 8005040:	4603      	mov	r3, r0
 8005042:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005044:	e003      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	75fb      	strb	r3, [r7, #23]
      break;
 800504a:	e000      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800504c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800504e:	7dfb      	ldrb	r3, [r7, #23]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d109      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005054:	4b9f      	ldr	r3, [pc, #636]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005058:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005060:	499c      	ldr	r1, [pc, #624]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005062:	4313      	orrs	r3, r2
 8005064:	650b      	str	r3, [r1, #80]	; 0x50
 8005066:	e001      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005068:	7dfb      	ldrb	r3, [r7, #23]
 800506a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005074:	2b00      	cmp	r3, #0
 8005076:	d03d      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800507c:	2b04      	cmp	r3, #4
 800507e:	d826      	bhi.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8005080:	a201      	add	r2, pc, #4	; (adr r2, 8005088 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8005082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005086:	bf00      	nop
 8005088:	0800509d 	.word	0x0800509d
 800508c:	080050ab 	.word	0x080050ab
 8005090:	080050bd 	.word	0x080050bd
 8005094:	080050d5 	.word	0x080050d5
 8005098:	080050d5 	.word	0x080050d5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800509c:	4b8d      	ldr	r3, [pc, #564]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a0:	4a8c      	ldr	r2, [pc, #560]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050a8:	e015      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3304      	adds	r3, #4
 80050ae:	2100      	movs	r1, #0
 80050b0:	4618      	mov	r0, r3
 80050b2:	f001 f92b 	bl	800630c <RCCEx_PLL2_Config>
 80050b6:	4603      	mov	r3, r0
 80050b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050ba:	e00c      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3324      	adds	r3, #36	; 0x24
 80050c0:	2100      	movs	r1, #0
 80050c2:	4618      	mov	r0, r3
 80050c4:	f001 f9d4 	bl	8006470 <RCCEx_PLL3_Config>
 80050c8:	4603      	mov	r3, r0
 80050ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050cc:	e003      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	75fb      	strb	r3, [r7, #23]
      break;
 80050d2:	e000      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80050d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050d6:	7dfb      	ldrb	r3, [r7, #23]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d109      	bne.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050dc:	4b7d      	ldr	r3, [pc, #500]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e0:	f023 0207 	bic.w	r2, r3, #7
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e8:	497a      	ldr	r1, [pc, #488]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	650b      	str	r3, [r1, #80]	; 0x50
 80050ee:	e001      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f0:	7dfb      	ldrb	r3, [r7, #23]
 80050f2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d03e      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005104:	2b80      	cmp	r3, #128	; 0x80
 8005106:	d01c      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005108:	2b80      	cmp	r3, #128	; 0x80
 800510a:	d804      	bhi.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800510c:	2b00      	cmp	r3, #0
 800510e:	d008      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005110:	2b40      	cmp	r3, #64	; 0x40
 8005112:	d00d      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005114:	e01e      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8005116:	2bc0      	cmp	r3, #192	; 0xc0
 8005118:	d01f      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800511a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800511e:	d01e      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005120:	e018      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005122:	4b6c      	ldr	r3, [pc, #432]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005126:	4a6b      	ldr	r2, [pc, #428]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800512c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800512e:	e017      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3304      	adds	r3, #4
 8005134:	2100      	movs	r1, #0
 8005136:	4618      	mov	r0, r3
 8005138:	f001 f8e8 	bl	800630c <RCCEx_PLL2_Config>
 800513c:	4603      	mov	r3, r0
 800513e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005140:	e00e      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3324      	adds	r3, #36	; 0x24
 8005146:	2100      	movs	r1, #0
 8005148:	4618      	mov	r0, r3
 800514a:	f001 f991 	bl	8006470 <RCCEx_PLL3_Config>
 800514e:	4603      	mov	r3, r0
 8005150:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005152:	e005      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	75fb      	strb	r3, [r7, #23]
      break;
 8005158:	e002      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800515a:	bf00      	nop
 800515c:	e000      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800515e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005160:	7dfb      	ldrb	r3, [r7, #23]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d109      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005166:	4b5b      	ldr	r3, [pc, #364]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800516a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005172:	4958      	ldr	r1, [pc, #352]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005174:	4313      	orrs	r3, r2
 8005176:	650b      	str	r3, [r1, #80]	; 0x50
 8005178:	e001      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800517a:	7dfb      	ldrb	r3, [r7, #23]
 800517c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005186:	2b00      	cmp	r3, #0
 8005188:	d044      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005190:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005194:	d01f      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800519a:	d805      	bhi.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00a      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80051a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051a4:	d00e      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80051a6:	e01f      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80051a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80051ac:	d01f      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80051ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051b2:	d01e      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80051b4:	e018      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051b6:	4b47      	ldr	r3, [pc, #284]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	4a46      	ldr	r2, [pc, #280]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051c2:	e017      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3304      	adds	r3, #4
 80051c8:	2100      	movs	r1, #0
 80051ca:	4618      	mov	r0, r3
 80051cc:	f001 f89e 	bl	800630c <RCCEx_PLL2_Config>
 80051d0:	4603      	mov	r3, r0
 80051d2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80051d4:	e00e      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	3324      	adds	r3, #36	; 0x24
 80051da:	2100      	movs	r1, #0
 80051dc:	4618      	mov	r0, r3
 80051de:	f001 f947 	bl	8006470 <RCCEx_PLL3_Config>
 80051e2:	4603      	mov	r3, r0
 80051e4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051e6:	e005      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	75fb      	strb	r3, [r7, #23]
      break;
 80051ec:	e002      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80051ee:	bf00      	nop
 80051f0:	e000      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80051f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051f4:	7dfb      	ldrb	r3, [r7, #23]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10a      	bne.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80051fa:	4b36      	ldr	r3, [pc, #216]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fe:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005208:	4932      	ldr	r1, [pc, #200]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800520a:	4313      	orrs	r3, r2
 800520c:	658b      	str	r3, [r1, #88]	; 0x58
 800520e:	e001      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005210:	7dfb      	ldrb	r3, [r7, #23]
 8005212:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800521c:	2b00      	cmp	r3, #0
 800521e:	d044      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005226:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800522a:	d01f      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800522c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005230:	d805      	bhi.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00a      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8005236:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800523a:	d00e      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800523c:	e01f      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800523e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005242:	d01f      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005244:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005248:	d01e      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800524a:	e018      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800524c:	4b21      	ldr	r3, [pc, #132]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	4a20      	ldr	r2, [pc, #128]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005256:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005258:	e017      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	3304      	adds	r3, #4
 800525e:	2100      	movs	r1, #0
 8005260:	4618      	mov	r0, r3
 8005262:	f001 f853 	bl	800630c <RCCEx_PLL2_Config>
 8005266:	4603      	mov	r3, r0
 8005268:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800526a:	e00e      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3324      	adds	r3, #36	; 0x24
 8005270:	2100      	movs	r1, #0
 8005272:	4618      	mov	r0, r3
 8005274:	f001 f8fc 	bl	8006470 <RCCEx_PLL3_Config>
 8005278:	4603      	mov	r3, r0
 800527a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800527c:	e005      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	75fb      	strb	r3, [r7, #23]
      break;
 8005282:	e002      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005284:	bf00      	nop
 8005286:	e000      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005288:	bf00      	nop
    }

    if(ret == HAL_OK)
 800528a:	7dfb      	ldrb	r3, [r7, #23]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10a      	bne.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005290:	4b10      	ldr	r3, [pc, #64]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005294:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800529e:	490d      	ldr	r1, [pc, #52]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	658b      	str	r3, [r1, #88]	; 0x58
 80052a4:	e001      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a6:	7dfb      	ldrb	r3, [r7, #23]
 80052a8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d035      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ba:	2b10      	cmp	r3, #16
 80052bc:	d00c      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80052be:	2b10      	cmp	r3, #16
 80052c0:	d802      	bhi.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d01b      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80052c6:	e017      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80052c8:	2b20      	cmp	r3, #32
 80052ca:	d00c      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80052cc:	2b30      	cmp	r3, #48	; 0x30
 80052ce:	d018      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80052d0:	e012      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80052d2:	bf00      	nop
 80052d4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052d8:	4baf      	ldr	r3, [pc, #700]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80052da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052dc:	4aae      	ldr	r2, [pc, #696]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80052de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80052e4:	e00e      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	3304      	adds	r3, #4
 80052ea:	2102      	movs	r1, #2
 80052ec:	4618      	mov	r0, r3
 80052ee:	f001 f80d 	bl	800630c <RCCEx_PLL2_Config>
 80052f2:	4603      	mov	r3, r0
 80052f4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80052f6:	e005      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	75fb      	strb	r3, [r7, #23]
      break;
 80052fc:	e002      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80052fe:	bf00      	nop
 8005300:	e000      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005302:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005304:	7dfb      	ldrb	r3, [r7, #23]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d109      	bne.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800530a:	4ba3      	ldr	r3, [pc, #652]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800530c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800530e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005316:	49a0      	ldr	r1, [pc, #640]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005318:	4313      	orrs	r3, r2
 800531a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800531c:	e001      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800531e:	7dfb      	ldrb	r3, [r7, #23]
 8005320:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d042      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005336:	d01f      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800533c:	d805      	bhi.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00a      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8005342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005346:	d00e      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005348:	e01f      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800534a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800534e:	d01f      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005350:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005354:	d01e      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005356:	e018      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005358:	4b8f      	ldr	r3, [pc, #572]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800535a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535c:	4a8e      	ldr	r2, [pc, #568]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800535e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005362:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005364:	e017      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	3304      	adds	r3, #4
 800536a:	2100      	movs	r1, #0
 800536c:	4618      	mov	r0, r3
 800536e:	f000 ffcd 	bl	800630c <RCCEx_PLL2_Config>
 8005372:	4603      	mov	r3, r0
 8005374:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005376:	e00e      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3324      	adds	r3, #36	; 0x24
 800537c:	2100      	movs	r1, #0
 800537e:	4618      	mov	r0, r3
 8005380:	f001 f876 	bl	8006470 <RCCEx_PLL3_Config>
 8005384:	4603      	mov	r3, r0
 8005386:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005388:	e005      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	75fb      	strb	r3, [r7, #23]
      break;
 800538e:	e002      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005390:	bf00      	nop
 8005392:	e000      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005394:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005396:	7dfb      	ldrb	r3, [r7, #23]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d109      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800539c:	4b7e      	ldr	r3, [pc, #504]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800539e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053a0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053a8:	497b      	ldr	r1, [pc, #492]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	650b      	str	r3, [r1, #80]	; 0x50
 80053ae:	e001      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b0:	7dfb      	ldrb	r3, [r7, #23]
 80053b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d042      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053c8:	d01b      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80053ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053ce:	d805      	bhi.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x408>
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d022      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x446>
 80053d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053d8:	d00a      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80053da:	e01b      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80053dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053e0:	d01d      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80053e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053e6:	d01c      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80053e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053ec:	d01b      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80053ee:	e011      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	3304      	adds	r3, #4
 80053f4:	2101      	movs	r1, #1
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 ff88 	bl	800630c <RCCEx_PLL2_Config>
 80053fc:	4603      	mov	r3, r0
 80053fe:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005400:	e012      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	3324      	adds	r3, #36	; 0x24
 8005406:	2101      	movs	r1, #1
 8005408:	4618      	mov	r0, r3
 800540a:	f001 f831 	bl	8006470 <RCCEx_PLL3_Config>
 800540e:	4603      	mov	r3, r0
 8005410:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005412:	e009      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	75fb      	strb	r3, [r7, #23]
      break;
 8005418:	e006      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800541a:	bf00      	nop
 800541c:	e004      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800541e:	bf00      	nop
 8005420:	e002      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005422:	bf00      	nop
 8005424:	e000      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005426:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005428:	7dfb      	ldrb	r3, [r7, #23]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d109      	bne.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800542e:	4b5a      	ldr	r3, [pc, #360]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005432:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800543a:	4957      	ldr	r1, [pc, #348]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800543c:	4313      	orrs	r3, r2
 800543e:	650b      	str	r3, [r1, #80]	; 0x50
 8005440:	e001      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005442:	7dfb      	ldrb	r3, [r7, #23]
 8005444:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d044      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800545c:	d01b      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800545e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005462:	d805      	bhi.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8005464:	2b00      	cmp	r3, #0
 8005466:	d022      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005468:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800546c:	d00a      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800546e:	e01b      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005474:	d01d      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005476:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800547a:	d01c      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800547c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005480:	d01b      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005482:	e011      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3304      	adds	r3, #4
 8005488:	2101      	movs	r1, #1
 800548a:	4618      	mov	r0, r3
 800548c:	f000 ff3e 	bl	800630c <RCCEx_PLL2_Config>
 8005490:	4603      	mov	r3, r0
 8005492:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005494:	e012      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	3324      	adds	r3, #36	; 0x24
 800549a:	2101      	movs	r1, #1
 800549c:	4618      	mov	r0, r3
 800549e:	f000 ffe7 	bl	8006470 <RCCEx_PLL3_Config>
 80054a2:	4603      	mov	r3, r0
 80054a4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80054a6:	e009      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	75fb      	strb	r3, [r7, #23]
      break;
 80054ac:	e006      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80054ae:	bf00      	nop
 80054b0:	e004      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80054b2:	bf00      	nop
 80054b4:	e002      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80054b6:	bf00      	nop
 80054b8:	e000      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80054ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054bc:	7dfb      	ldrb	r3, [r7, #23]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10a      	bne.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80054c2:	4b35      	ldr	r3, [pc, #212]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80054c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80054d0:	4931      	ldr	r1, [pc, #196]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	658b      	str	r3, [r1, #88]	; 0x58
 80054d6:	e001      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d8:	7dfb      	ldrb	r3, [r7, #23]
 80054da:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d02d      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054f0:	d005      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80054f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054f6:	d009      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x538>
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d013      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80054fc:	e00f      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054fe:	4b26      	ldr	r3, [pc, #152]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005502:	4a25      	ldr	r2, [pc, #148]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005508:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800550a:	e00c      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3304      	adds	r3, #4
 8005510:	2101      	movs	r1, #1
 8005512:	4618      	mov	r0, r3
 8005514:	f000 fefa 	bl	800630c <RCCEx_PLL2_Config>
 8005518:	4603      	mov	r3, r0
 800551a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800551c:	e003      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	75fb      	strb	r3, [r7, #23]
      break;
 8005522:	e000      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8005524:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005526:	7dfb      	ldrb	r3, [r7, #23]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d109      	bne.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800552c:	4b1a      	ldr	r3, [pc, #104]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800552e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005530:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005538:	4917      	ldr	r1, [pc, #92]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800553a:	4313      	orrs	r3, r2
 800553c:	650b      	str	r3, [r1, #80]	; 0x50
 800553e:	e001      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005540:	7dfb      	ldrb	r3, [r7, #23]
 8005542:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d035      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005554:	2b03      	cmp	r3, #3
 8005556:	d81b      	bhi.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005558:	a201      	add	r2, pc, #4	; (adr r2, 8005560 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800555a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555e:	bf00      	nop
 8005560:	0800559d 	.word	0x0800559d
 8005564:	08005571 	.word	0x08005571
 8005568:	0800557f 	.word	0x0800557f
 800556c:	0800559d 	.word	0x0800559d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005570:	4b09      	ldr	r3, [pc, #36]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005574:	4a08      	ldr	r2, [pc, #32]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800557a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800557c:	e00f      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	3304      	adds	r3, #4
 8005582:	2102      	movs	r1, #2
 8005584:	4618      	mov	r0, r3
 8005586:	f000 fec1 	bl	800630c <RCCEx_PLL2_Config>
 800558a:	4603      	mov	r3, r0
 800558c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800558e:	e006      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	75fb      	strb	r3, [r7, #23]
      break;
 8005594:	e003      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8005596:	bf00      	nop
 8005598:	58024400 	.word	0x58024400
      break;
 800559c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800559e:	7dfb      	ldrb	r3, [r7, #23]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d109      	bne.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80055a4:	4bba      	ldr	r3, [pc, #744]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80055a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055a8:	f023 0203 	bic.w	r2, r3, #3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b0:	49b7      	ldr	r1, [pc, #732]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80055b6:	e001      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b8:	7dfb      	ldrb	r3, [r7, #23]
 80055ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 8086 	beq.w	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055ca:	4bb2      	ldr	r3, [pc, #712]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4ab1      	ldr	r2, [pc, #708]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80055d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055d6:	f7fb fef3 	bl	80013c0 <HAL_GetTick>
 80055da:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055dc:	e009      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055de:	f7fb feef 	bl	80013c0 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	2b64      	cmp	r3, #100	; 0x64
 80055ea:	d902      	bls.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	75fb      	strb	r3, [r7, #23]
        break;
 80055f0:	e005      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055f2:	4ba8      	ldr	r3, [pc, #672]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0ef      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80055fe:	7dfb      	ldrb	r3, [r7, #23]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d166      	bne.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005604:	4ba2      	ldr	r3, [pc, #648]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005606:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800560e:	4053      	eors	r3, r2
 8005610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005614:	2b00      	cmp	r3, #0
 8005616:	d013      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005618:	4b9d      	ldr	r3, [pc, #628]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800561a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005620:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005622:	4b9b      	ldr	r3, [pc, #620]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005626:	4a9a      	ldr	r2, [pc, #616]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800562c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800562e:	4b98      	ldr	r3, [pc, #608]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005632:	4a97      	ldr	r2, [pc, #604]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005634:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005638:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800563a:	4a95      	ldr	r2, [pc, #596]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800564a:	d115      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800564c:	f7fb feb8 	bl	80013c0 <HAL_GetTick>
 8005650:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005652:	e00b      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005654:	f7fb feb4 	bl	80013c0 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005662:	4293      	cmp	r3, r2
 8005664:	d902      	bls.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	75fb      	strb	r3, [r7, #23]
            break;
 800566a:	e005      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800566c:	4b88      	ldr	r3, [pc, #544]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800566e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0ed      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005678:	7dfb      	ldrb	r3, [r7, #23]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d126      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005688:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800568c:	d10d      	bne.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800568e:	4b80      	ldr	r3, [pc, #512]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800569c:	0919      	lsrs	r1, r3, #4
 800569e:	4b7e      	ldr	r3, [pc, #504]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80056a0:	400b      	ands	r3, r1
 80056a2:	497b      	ldr	r1, [pc, #492]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	610b      	str	r3, [r1, #16]
 80056a8:	e005      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80056aa:	4b79      	ldr	r3, [pc, #484]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	4a78      	ldr	r2, [pc, #480]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80056b4:	6113      	str	r3, [r2, #16]
 80056b6:	4b76      	ldr	r3, [pc, #472]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056c4:	4972      	ldr	r1, [pc, #456]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	670b      	str	r3, [r1, #112]	; 0x70
 80056ca:	e004      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056cc:	7dfb      	ldrb	r3, [r7, #23]
 80056ce:	75bb      	strb	r3, [r7, #22]
 80056d0:	e001      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d2:	7dfb      	ldrb	r3, [r7, #23]
 80056d4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d07d      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056e6:	2b28      	cmp	r3, #40	; 0x28
 80056e8:	d866      	bhi.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80056ea:	a201      	add	r2, pc, #4	; (adr r2, 80056f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80056ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f0:	080057bf 	.word	0x080057bf
 80056f4:	080057b9 	.word	0x080057b9
 80056f8:	080057b9 	.word	0x080057b9
 80056fc:	080057b9 	.word	0x080057b9
 8005700:	080057b9 	.word	0x080057b9
 8005704:	080057b9 	.word	0x080057b9
 8005708:	080057b9 	.word	0x080057b9
 800570c:	080057b9 	.word	0x080057b9
 8005710:	08005795 	.word	0x08005795
 8005714:	080057b9 	.word	0x080057b9
 8005718:	080057b9 	.word	0x080057b9
 800571c:	080057b9 	.word	0x080057b9
 8005720:	080057b9 	.word	0x080057b9
 8005724:	080057b9 	.word	0x080057b9
 8005728:	080057b9 	.word	0x080057b9
 800572c:	080057b9 	.word	0x080057b9
 8005730:	080057a7 	.word	0x080057a7
 8005734:	080057b9 	.word	0x080057b9
 8005738:	080057b9 	.word	0x080057b9
 800573c:	080057b9 	.word	0x080057b9
 8005740:	080057b9 	.word	0x080057b9
 8005744:	080057b9 	.word	0x080057b9
 8005748:	080057b9 	.word	0x080057b9
 800574c:	080057b9 	.word	0x080057b9
 8005750:	080057bf 	.word	0x080057bf
 8005754:	080057b9 	.word	0x080057b9
 8005758:	080057b9 	.word	0x080057b9
 800575c:	080057b9 	.word	0x080057b9
 8005760:	080057b9 	.word	0x080057b9
 8005764:	080057b9 	.word	0x080057b9
 8005768:	080057b9 	.word	0x080057b9
 800576c:	080057b9 	.word	0x080057b9
 8005770:	080057bf 	.word	0x080057bf
 8005774:	080057b9 	.word	0x080057b9
 8005778:	080057b9 	.word	0x080057b9
 800577c:	080057b9 	.word	0x080057b9
 8005780:	080057b9 	.word	0x080057b9
 8005784:	080057b9 	.word	0x080057b9
 8005788:	080057b9 	.word	0x080057b9
 800578c:	080057b9 	.word	0x080057b9
 8005790:	080057bf 	.word	0x080057bf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	3304      	adds	r3, #4
 8005798:	2101      	movs	r1, #1
 800579a:	4618      	mov	r0, r3
 800579c:	f000 fdb6 	bl	800630c <RCCEx_PLL2_Config>
 80057a0:	4603      	mov	r3, r0
 80057a2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80057a4:	e00c      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	3324      	adds	r3, #36	; 0x24
 80057aa:	2101      	movs	r1, #1
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 fe5f 	bl	8006470 <RCCEx_PLL3_Config>
 80057b2:	4603      	mov	r3, r0
 80057b4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80057b6:	e003      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	75fb      	strb	r3, [r7, #23]
      break;
 80057bc:	e000      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80057be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057c0:	7dfb      	ldrb	r3, [r7, #23]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d109      	bne.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80057c6:	4b32      	ldr	r3, [pc, #200]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80057c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ca:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057d2:	492f      	ldr	r1, [pc, #188]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	654b      	str	r3, [r1, #84]	; 0x54
 80057d8:	e001      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057da:	7dfb      	ldrb	r3, [r7, #23]
 80057dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d037      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ee:	2b05      	cmp	r3, #5
 80057f0:	d820      	bhi.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80057f2:	a201      	add	r2, pc, #4	; (adr r2, 80057f8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80057f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f8:	0800583b 	.word	0x0800583b
 80057fc:	08005811 	.word	0x08005811
 8005800:	08005823 	.word	0x08005823
 8005804:	0800583b 	.word	0x0800583b
 8005808:	0800583b 	.word	0x0800583b
 800580c:	0800583b 	.word	0x0800583b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	3304      	adds	r3, #4
 8005814:	2101      	movs	r1, #1
 8005816:	4618      	mov	r0, r3
 8005818:	f000 fd78 	bl	800630c <RCCEx_PLL2_Config>
 800581c:	4603      	mov	r3, r0
 800581e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005820:	e00c      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	3324      	adds	r3, #36	; 0x24
 8005826:	2101      	movs	r1, #1
 8005828:	4618      	mov	r0, r3
 800582a:	f000 fe21 	bl	8006470 <RCCEx_PLL3_Config>
 800582e:	4603      	mov	r3, r0
 8005830:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005832:	e003      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	75fb      	strb	r3, [r7, #23]
      break;
 8005838:	e000      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800583a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800583c:	7dfb      	ldrb	r3, [r7, #23]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d109      	bne.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005842:	4b13      	ldr	r3, [pc, #76]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005846:	f023 0207 	bic.w	r2, r3, #7
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800584e:	4910      	ldr	r1, [pc, #64]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005850:	4313      	orrs	r3, r2
 8005852:	654b      	str	r3, [r1, #84]	; 0x54
 8005854:	e001      	b.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005856:	7dfb      	ldrb	r3, [r7, #23]
 8005858:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0304 	and.w	r3, r3, #4
 8005862:	2b00      	cmp	r3, #0
 8005864:	d040      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586c:	2b05      	cmp	r3, #5
 800586e:	d827      	bhi.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8005870:	a201      	add	r2, pc, #4	; (adr r2, 8005878 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8005872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005876:	bf00      	nop
 8005878:	080058c7 	.word	0x080058c7
 800587c:	0800589d 	.word	0x0800589d
 8005880:	080058af 	.word	0x080058af
 8005884:	080058c7 	.word	0x080058c7
 8005888:	080058c7 	.word	0x080058c7
 800588c:	080058c7 	.word	0x080058c7
 8005890:	58024400 	.word	0x58024400
 8005894:	58024800 	.word	0x58024800
 8005898:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3304      	adds	r3, #4
 80058a0:	2101      	movs	r1, #1
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 fd32 	bl	800630c <RCCEx_PLL2_Config>
 80058a8:	4603      	mov	r3, r0
 80058aa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80058ac:	e00c      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	3324      	adds	r3, #36	; 0x24
 80058b2:	2101      	movs	r1, #1
 80058b4:	4618      	mov	r0, r3
 80058b6:	f000 fddb 	bl	8006470 <RCCEx_PLL3_Config>
 80058ba:	4603      	mov	r3, r0
 80058bc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80058be:	e003      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	75fb      	strb	r3, [r7, #23]
      break;
 80058c4:	e000      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80058c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058c8:	7dfb      	ldrb	r3, [r7, #23]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10a      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058ce:	4bb2      	ldr	r3, [pc, #712]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80058d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d2:	f023 0207 	bic.w	r2, r3, #7
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058dc:	49ae      	ldr	r1, [pc, #696]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	658b      	str	r3, [r1, #88]	; 0x58
 80058e2:	e001      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e4:	7dfb      	ldrb	r3, [r7, #23]
 80058e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0320 	and.w	r3, r3, #32
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d044      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058fe:	d01b      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8005900:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005904:	d805      	bhi.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8005906:	2b00      	cmp	r3, #0
 8005908:	d022      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800590a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800590e:	d00a      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005910:	e01b      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005916:	d01d      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8005918:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800591c:	d01c      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800591e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005922:	d01b      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005924:	e011      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	3304      	adds	r3, #4
 800592a:	2100      	movs	r1, #0
 800592c:	4618      	mov	r0, r3
 800592e:	f000 fced 	bl	800630c <RCCEx_PLL2_Config>
 8005932:	4603      	mov	r3, r0
 8005934:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005936:	e012      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	3324      	adds	r3, #36	; 0x24
 800593c:	2102      	movs	r1, #2
 800593e:	4618      	mov	r0, r3
 8005940:	f000 fd96 	bl	8006470 <RCCEx_PLL3_Config>
 8005944:	4603      	mov	r3, r0
 8005946:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005948:	e009      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	75fb      	strb	r3, [r7, #23]
      break;
 800594e:	e006      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005950:	bf00      	nop
 8005952:	e004      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005954:	bf00      	nop
 8005956:	e002      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005958:	bf00      	nop
 800595a:	e000      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800595c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800595e:	7dfb      	ldrb	r3, [r7, #23]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10a      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005964:	4b8c      	ldr	r3, [pc, #560]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005968:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005972:	4989      	ldr	r1, [pc, #548]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005974:	4313      	orrs	r3, r2
 8005976:	654b      	str	r3, [r1, #84]	; 0x54
 8005978:	e001      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800597a:	7dfb      	ldrb	r3, [r7, #23]
 800597c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005986:	2b00      	cmp	r3, #0
 8005988:	d044      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005994:	d01b      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8005996:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800599a:	d805      	bhi.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800599c:	2b00      	cmp	r3, #0
 800599e:	d022      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80059a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059a4:	d00a      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80059a6:	e01b      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80059a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ac:	d01d      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80059ae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80059b2:	d01c      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80059b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059b8:	d01b      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80059ba:	e011      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3304      	adds	r3, #4
 80059c0:	2100      	movs	r1, #0
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 fca2 	bl	800630c <RCCEx_PLL2_Config>
 80059c8:	4603      	mov	r3, r0
 80059ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80059cc:	e012      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	3324      	adds	r3, #36	; 0x24
 80059d2:	2102      	movs	r1, #2
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 fd4b 	bl	8006470 <RCCEx_PLL3_Config>
 80059da:	4603      	mov	r3, r0
 80059dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80059de:	e009      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	75fb      	strb	r3, [r7, #23]
      break;
 80059e4:	e006      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80059e6:	bf00      	nop
 80059e8:	e004      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80059ea:	bf00      	nop
 80059ec:	e002      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80059ee:	bf00      	nop
 80059f0:	e000      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80059f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059f4:	7dfb      	ldrb	r3, [r7, #23]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10a      	bne.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059fa:	4b67      	ldr	r3, [pc, #412]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80059fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059fe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a08:	4963      	ldr	r1, [pc, #396]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	658b      	str	r3, [r1, #88]	; 0x58
 8005a0e:	e001      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a10:	7dfb      	ldrb	r3, [r7, #23]
 8005a12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d044      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a2a:	d01b      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8005a2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a30:	d805      	bhi.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d022      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a3a:	d00a      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005a3c:	e01b      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8005a3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a42:	d01d      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005a44:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005a48:	d01c      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8005a4a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005a4e:	d01b      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005a50:	e011      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	3304      	adds	r3, #4
 8005a56:	2100      	movs	r1, #0
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 fc57 	bl	800630c <RCCEx_PLL2_Config>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005a62:	e012      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	3324      	adds	r3, #36	; 0x24
 8005a68:	2102      	movs	r1, #2
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 fd00 	bl	8006470 <RCCEx_PLL3_Config>
 8005a70:	4603      	mov	r3, r0
 8005a72:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005a74:	e009      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	75fb      	strb	r3, [r7, #23]
      break;
 8005a7a:	e006      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005a7c:	bf00      	nop
 8005a7e:	e004      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005a80:	bf00      	nop
 8005a82:	e002      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005a84:	bf00      	nop
 8005a86:	e000      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005a88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a8a:	7dfb      	ldrb	r3, [r7, #23]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10a      	bne.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005a90:	4b41      	ldr	r3, [pc, #260]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a94:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a9e:	493e      	ldr	r1, [pc, #248]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	658b      	str	r3, [r1, #88]	; 0x58
 8005aa4:	e001      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa6:	7dfb      	ldrb	r3, [r7, #23]
 8005aa8:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0308 	and.w	r3, r3, #8
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d01a      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac0:	d10a      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	3324      	adds	r3, #36	; 0x24
 8005ac6:	2102      	movs	r1, #2
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f000 fcd1 	bl	8006470 <RCCEx_PLL3_Config>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005ad8:	4b2f      	ldr	r3, [pc, #188]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005adc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ae6:	492c      	ldr	r1, [pc, #176]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0310 	and.w	r3, r3, #16
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01a      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b02:	d10a      	bne.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	3324      	adds	r3, #36	; 0x24
 8005b08:	2102      	movs	r1, #2
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 fcb0 	bl	8006470 <RCCEx_PLL3_Config>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b1a:	4b1f      	ldr	r3, [pc, #124]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b28:	491b      	ldr	r1, [pc, #108]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d032      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b44:	d00d      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8005b46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b4a:	d016      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d111      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3304      	adds	r3, #4
 8005b54:	2100      	movs	r1, #0
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 fbd8 	bl	800630c <RCCEx_PLL2_Config>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005b60:	e00c      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	3324      	adds	r3, #36	; 0x24
 8005b66:	2102      	movs	r1, #2
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 fc81 	bl	8006470 <RCCEx_PLL3_Config>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005b72:	e003      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	75fb      	strb	r3, [r7, #23]
      break;
 8005b78:	e000      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8005b7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b7c:	7dfb      	ldrb	r3, [r7, #23]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10c      	bne.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b82:	4b05      	ldr	r3, [pc, #20]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005b90:	4901      	ldr	r1, [pc, #4]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	658b      	str	r3, [r1, #88]	; 0x58
 8005b96:	e003      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005b98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b9c:	7dfb      	ldrb	r3, [r7, #23]
 8005b9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d02f      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bb6:	d00c      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005bb8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bbc:	d015      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8005bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bc2:	d10f      	bne.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bc4:	4b79      	ldr	r3, [pc, #484]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc8:	4a78      	ldr	r2, [pc, #480]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005bd0:	e00c      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	3324      	adds	r3, #36	; 0x24
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f000 fc49 	bl	8006470 <RCCEx_PLL3_Config>
 8005bde:	4603      	mov	r3, r0
 8005be0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005be2:	e003      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	75fb      	strb	r3, [r7, #23]
      break;
 8005be8:	e000      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8005bea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bec:	7dfb      	ldrb	r3, [r7, #23]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10a      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005bf2:	4b6e      	ldr	r3, [pc, #440]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c00:	496a      	ldr	r1, [pc, #424]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	654b      	str	r3, [r1, #84]	; 0x54
 8005c06:	e001      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c08:	7dfb      	ldrb	r3, [r7, #23]
 8005c0a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d029      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d003      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c24:	d007      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8005c26:	e00f      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c28:	4b60      	ldr	r3, [pc, #384]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2c:	4a5f      	ldr	r2, [pc, #380]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005c34:	e00b      	b.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	3304      	adds	r3, #4
 8005c3a:	2102      	movs	r1, #2
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f000 fb65 	bl	800630c <RCCEx_PLL2_Config>
 8005c42:	4603      	mov	r3, r0
 8005c44:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005c46:	e002      	b.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c4e:	7dfb      	ldrb	r3, [r7, #23]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d109      	bne.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005c54:	4b55      	ldr	r3, [pc, #340]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c60:	4952      	ldr	r1, [pc, #328]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005c66:	e001      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c68:	7dfb      	ldrb	r3, [r7, #23]
 8005c6a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00a      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	3324      	adds	r3, #36	; 0x24
 8005c7c:	2102      	movs	r1, #2
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f000 fbf6 	bl	8006470 <RCCEx_PLL3_Config>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d02f      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca2:	d00c      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005ca4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca8:	d802      	bhi.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d011      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8005cae:	e00d      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cb4:	d00f      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8005cb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cba:	d00e      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005cbc:	e006      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cbe:	4b3b      	ldr	r3, [pc, #236]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc2:	4a3a      	ldr	r2, [pc, #232]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005cca:	e007      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	75fb      	strb	r3, [r7, #23]
      break;
 8005cd0:	e004      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005cd2:	bf00      	nop
 8005cd4:	e002      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005cd6:	bf00      	nop
 8005cd8:	e000      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005cda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cdc:	7dfb      	ldrb	r3, [r7, #23]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d109      	bne.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ce2:	4b32      	ldr	r3, [pc, #200]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cee:	492f      	ldr	r1, [pc, #188]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	654b      	str	r3, [r1, #84]	; 0x54
 8005cf4:	e001      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf6:	7dfb      	ldrb	r3, [r7, #23]
 8005cf8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d008      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005d06:	4b29      	ldr	r3, [pc, #164]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d12:	4926      	ldr	r1, [pc, #152]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d009      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005d24:	4b21      	ldr	r3, [pc, #132]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d32:	491e      	ldr	r1, [pc, #120]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d008      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d44:	4b19      	ldr	r3, [pc, #100]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d48:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d50:	4916      	ldr	r1, [pc, #88]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00d      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d62:	4b12      	ldr	r3, [pc, #72]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	4a11      	ldr	r2, [pc, #68]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005d68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d6c:	6113      	str	r3, [r2, #16]
 8005d6e:	4b0f      	ldr	r3, [pc, #60]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005d70:	691a      	ldr	r2, [r3, #16]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005d78:	490c      	ldr	r1, [pc, #48]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	da08      	bge.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005d86:	4b09      	ldr	r3, [pc, #36]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d92:	4906      	ldr	r1, [pc, #24]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005d98:	7dbb      	ldrb	r3, [r7, #22]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	e000      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3718      	adds	r7, #24
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	58024400 	.word	0x58024400

08005db0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005db4:	f7ff f8b2 	bl	8004f1c <HAL_RCC_GetHCLKFreq>
 8005db8:	4601      	mov	r1, r0
 8005dba:	4b06      	ldr	r3, [pc, #24]	; (8005dd4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	091b      	lsrs	r3, r3, #4
 8005dc0:	f003 0307 	and.w	r3, r3, #7
 8005dc4:	4a04      	ldr	r2, [pc, #16]	; (8005dd8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005dc6:	5cd3      	ldrb	r3, [r2, r3]
 8005dc8:	f003 031f 	and.w	r3, r3, #31
 8005dcc:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	58024400 	.word	0x58024400
 8005dd8:	0800c5f0 	.word	0x0800c5f0

08005ddc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b089      	sub	sp, #36	; 0x24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005de4:	4b9d      	ldr	r3, [pc, #628]	; (800605c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de8:	f003 0303 	and.w	r3, r3, #3
 8005dec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005dee:	4b9b      	ldr	r3, [pc, #620]	; (800605c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df2:	0b1b      	lsrs	r3, r3, #12
 8005df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005df8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005dfa:	4b98      	ldr	r3, [pc, #608]	; (800605c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfe:	091b      	lsrs	r3, r3, #4
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005e06:	4b95      	ldr	r3, [pc, #596]	; (800605c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e0a:	08db      	lsrs	r3, r3, #3
 8005e0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	fb02 f303 	mul.w	r3, r2, r3
 8005e16:	ee07 3a90 	vmov	s15, r3
 8005e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 810a 	beq.w	800603e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d05a      	beq.n	8005ee6 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d302      	bcc.n	8005e3a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d078      	beq.n	8005f2a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8005e38:	e099      	b.n	8005f6e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e3a:	4b88      	ldr	r3, [pc, #544]	; (800605c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0320 	and.w	r3, r3, #32
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d02d      	beq.n	8005ea2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e46:	4b85      	ldr	r3, [pc, #532]	; (800605c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	08db      	lsrs	r3, r3, #3
 8005e4c:	f003 0303 	and.w	r3, r3, #3
 8005e50:	4a83      	ldr	r2, [pc, #524]	; (8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005e52:	fa22 f303 	lsr.w	r3, r2, r3
 8005e56:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	ee07 3a90 	vmov	s15, r3
 8005e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	ee07 3a90 	vmov	s15, r3
 8005e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e70:	4b7a      	ldr	r3, [pc, #488]	; (800605c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e78:	ee07 3a90 	vmov	s15, r3
 8005e7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e80:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e84:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006064 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005e88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e9c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005ea0:	e087      	b.n	8005fb2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	ee07 3a90 	vmov	s15, r3
 8005ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eac:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006068 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005eb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eb4:	4b69      	ldr	r3, [pc, #420]	; (800605c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ebc:	ee07 3a90 	vmov	s15, r3
 8005ec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ec4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ec8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006064 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005ecc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ed0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ed4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ed8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ee0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ee4:	e065      	b.n	8005fb2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	ee07 3a90 	vmov	s15, r3
 8005eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800606c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005ef4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ef8:	4b58      	ldr	r3, [pc, #352]	; (800605c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f00:	ee07 3a90 	vmov	s15, r3
 8005f04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f08:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f0c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006064 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005f10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f24:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f28:	e043      	b.n	8005fb2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	ee07 3a90 	vmov	s15, r3
 8005f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f34:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006070 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005f38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f3c:	4b47      	ldr	r3, [pc, #284]	; (800605c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f44:	ee07 3a90 	vmov	s15, r3
 8005f48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f50:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006064 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005f54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f68:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f6c:	e021      	b.n	8005fb2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	ee07 3a90 	vmov	s15, r3
 8005f74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f78:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800606c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005f7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f80:	4b36      	ldr	r3, [pc, #216]	; (800605c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f88:	ee07 3a90 	vmov	s15, r3
 8005f8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f90:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f94:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006064 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005f98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fa0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fb0:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005fb2:	4b2a      	ldr	r3, [pc, #168]	; (800605c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb6:	0a5b      	lsrs	r3, r3, #9
 8005fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fbc:	ee07 3a90 	vmov	s15, r3
 8005fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fd8:	ee17 2a90 	vmov	r2, s15
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005fe0:	4b1e      	ldr	r3, [pc, #120]	; (800605c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe4:	0c1b      	lsrs	r3, r3, #16
 8005fe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ff6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ffa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006006:	ee17 2a90 	vmov	r2, s15
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800600e:	4b13      	ldr	r3, [pc, #76]	; (800605c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006012:	0e1b      	lsrs	r3, r3, #24
 8006014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006018:	ee07 3a90 	vmov	s15, r3
 800601c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006020:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006024:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006028:	edd7 6a07 	vldr	s13, [r7, #28]
 800602c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006034:	ee17 2a90 	vmov	r2, s15
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800603c:	e008      	b.n	8006050 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	609a      	str	r2, [r3, #8]
}
 8006050:	bf00      	nop
 8006052:	3724      	adds	r7, #36	; 0x24
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr
 800605c:	58024400 	.word	0x58024400
 8006060:	03d09000 	.word	0x03d09000
 8006064:	46000000 	.word	0x46000000
 8006068:	4c742400 	.word	0x4c742400
 800606c:	4a742400 	.word	0x4a742400
 8006070:	4af42400 	.word	0x4af42400

08006074 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006074:	b480      	push	{r7}
 8006076:	b089      	sub	sp, #36	; 0x24
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800607c:	4b9d      	ldr	r3, [pc, #628]	; (80062f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800607e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006080:	f003 0303 	and.w	r3, r3, #3
 8006084:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006086:	4b9b      	ldr	r3, [pc, #620]	; (80062f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608a:	0d1b      	lsrs	r3, r3, #20
 800608c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006090:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006092:	4b98      	ldr	r3, [pc, #608]	; (80062f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006096:	0a1b      	lsrs	r3, r3, #8
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800609e:	4b95      	ldr	r3, [pc, #596]	; (80062f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80060a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a2:	08db      	lsrs	r3, r3, #3
 80060a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	fb02 f303 	mul.w	r3, r2, r3
 80060ae:	ee07 3a90 	vmov	s15, r3
 80060b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 810a 	beq.w	80062d6 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d05a      	beq.n	800617e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d302      	bcc.n	80060d2 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d078      	beq.n	80061c2 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80060d0:	e099      	b.n	8006206 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060d2:	4b88      	ldr	r3, [pc, #544]	; (80062f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0320 	and.w	r3, r3, #32
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d02d      	beq.n	800613a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80060de:	4b85      	ldr	r3, [pc, #532]	; (80062f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	08db      	lsrs	r3, r3, #3
 80060e4:	f003 0303 	and.w	r3, r3, #3
 80060e8:	4a83      	ldr	r2, [pc, #524]	; (80062f8 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80060ea:	fa22 f303 	lsr.w	r3, r2, r3
 80060ee:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	ee07 3a90 	vmov	s15, r3
 80060f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	ee07 3a90 	vmov	s15, r3
 8006100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006104:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006108:	4b7a      	ldr	r3, [pc, #488]	; (80062f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800610a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006110:	ee07 3a90 	vmov	s15, r3
 8006114:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006118:	ed97 6a03 	vldr	s12, [r7, #12]
 800611c:	eddf 5a77 	vldr	s11, [pc, #476]	; 80062fc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006120:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006124:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006128:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800612c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006130:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006134:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006138:	e087      	b.n	800624a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	ee07 3a90 	vmov	s15, r3
 8006140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006144:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006300 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8006148:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800614c:	4b69      	ldr	r3, [pc, #420]	; (80062f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800614e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006154:	ee07 3a90 	vmov	s15, r3
 8006158:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800615c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006160:	eddf 5a66 	vldr	s11, [pc, #408]	; 80062fc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006164:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006168:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800616c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006170:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006178:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800617c:	e065      	b.n	800624a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	ee07 3a90 	vmov	s15, r3
 8006184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006188:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800618c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006190:	4b58      	ldr	r3, [pc, #352]	; (80062f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006198:	ee07 3a90 	vmov	s15, r3
 800619c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80061a4:	eddf 5a55 	vldr	s11, [pc, #340]	; 80062fc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80061a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061c0:	e043      	b.n	800624a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	ee07 3a90 	vmov	s15, r3
 80061c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061cc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006308 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80061d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061d4:	4b47      	ldr	r3, [pc, #284]	; (80062f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80061d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061dc:	ee07 3a90 	vmov	s15, r3
 80061e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80061e8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80062fc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80061ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006200:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006204:	e021      	b.n	800624a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	ee07 3a90 	vmov	s15, r3
 800620c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006210:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006214:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006218:	4b36      	ldr	r3, [pc, #216]	; (80062f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800621a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006220:	ee07 3a90 	vmov	s15, r3
 8006224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006228:	ed97 6a03 	vldr	s12, [r7, #12]
 800622c:	eddf 5a33 	vldr	s11, [pc, #204]	; 80062fc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006230:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006234:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006238:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800623c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006244:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006248:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800624a:	4b2a      	ldr	r3, [pc, #168]	; (80062f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800624c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624e:	0a5b      	lsrs	r3, r3, #9
 8006250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006254:	ee07 3a90 	vmov	s15, r3
 8006258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800625c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006260:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006264:	edd7 6a07 	vldr	s13, [r7, #28]
 8006268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800626c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006270:	ee17 2a90 	vmov	r2, s15
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006278:	4b1e      	ldr	r3, [pc, #120]	; (80062f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800627a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627c:	0c1b      	lsrs	r3, r3, #16
 800627e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006282:	ee07 3a90 	vmov	s15, r3
 8006286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800628a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800628e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006292:	edd7 6a07 	vldr	s13, [r7, #28]
 8006296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800629a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800629e:	ee17 2a90 	vmov	r2, s15
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80062a6:	4b13      	ldr	r3, [pc, #76]	; (80062f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80062a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062aa:	0e1b      	lsrs	r3, r3, #24
 80062ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062b0:	ee07 3a90 	vmov	s15, r3
 80062b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80062c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062cc:	ee17 2a90 	vmov	r2, s15
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80062d4:	e008      	b.n	80062e8 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	609a      	str	r2, [r3, #8]
}
 80062e8:	bf00      	nop
 80062ea:	3724      	adds	r7, #36	; 0x24
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	58024400 	.word	0x58024400
 80062f8:	03d09000 	.word	0x03d09000
 80062fc:	46000000 	.word	0x46000000
 8006300:	4c742400 	.word	0x4c742400
 8006304:	4a742400 	.word	0x4a742400
 8006308:	4af42400 	.word	0x4af42400

0800630c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800631a:	4b53      	ldr	r3, [pc, #332]	; (8006468 <RCCEx_PLL2_Config+0x15c>)
 800631c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631e:	f003 0303 	and.w	r3, r3, #3
 8006322:	2b03      	cmp	r3, #3
 8006324:	d101      	bne.n	800632a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e099      	b.n	800645e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800632a:	4b4f      	ldr	r3, [pc, #316]	; (8006468 <RCCEx_PLL2_Config+0x15c>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a4e      	ldr	r2, [pc, #312]	; (8006468 <RCCEx_PLL2_Config+0x15c>)
 8006330:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006334:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006336:	f7fb f843 	bl	80013c0 <HAL_GetTick>
 800633a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800633c:	e008      	b.n	8006350 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800633e:	f7fb f83f 	bl	80013c0 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	2b02      	cmp	r3, #2
 800634a:	d901      	bls.n	8006350 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e086      	b.n	800645e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006350:	4b45      	ldr	r3, [pc, #276]	; (8006468 <RCCEx_PLL2_Config+0x15c>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1f0      	bne.n	800633e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800635c:	4b42      	ldr	r3, [pc, #264]	; (8006468 <RCCEx_PLL2_Config+0x15c>)
 800635e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006360:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	031b      	lsls	r3, r3, #12
 800636a:	493f      	ldr	r1, [pc, #252]	; (8006468 <RCCEx_PLL2_Config+0x15c>)
 800636c:	4313      	orrs	r3, r2
 800636e:	628b      	str	r3, [r1, #40]	; 0x28
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	3b01      	subs	r3, #1
 8006376:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	3b01      	subs	r3, #1
 8006380:	025b      	lsls	r3, r3, #9
 8006382:	b29b      	uxth	r3, r3
 8006384:	431a      	orrs	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	3b01      	subs	r3, #1
 800638c:	041b      	lsls	r3, r3, #16
 800638e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006392:	431a      	orrs	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	3b01      	subs	r3, #1
 800639a:	061b      	lsls	r3, r3, #24
 800639c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063a0:	4931      	ldr	r1, [pc, #196]	; (8006468 <RCCEx_PLL2_Config+0x15c>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80063a6:	4b30      	ldr	r3, [pc, #192]	; (8006468 <RCCEx_PLL2_Config+0x15c>)
 80063a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	492d      	ldr	r1, [pc, #180]	; (8006468 <RCCEx_PLL2_Config+0x15c>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80063b8:	4b2b      	ldr	r3, [pc, #172]	; (8006468 <RCCEx_PLL2_Config+0x15c>)
 80063ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063bc:	f023 0220 	bic.w	r2, r3, #32
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	4928      	ldr	r1, [pc, #160]	; (8006468 <RCCEx_PLL2_Config+0x15c>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80063ca:	4b27      	ldr	r3, [pc, #156]	; (8006468 <RCCEx_PLL2_Config+0x15c>)
 80063cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ce:	4a26      	ldr	r2, [pc, #152]	; (8006468 <RCCEx_PLL2_Config+0x15c>)
 80063d0:	f023 0310 	bic.w	r3, r3, #16
 80063d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80063d6:	4b24      	ldr	r3, [pc, #144]	; (8006468 <RCCEx_PLL2_Config+0x15c>)
 80063d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063da:	4b24      	ldr	r3, [pc, #144]	; (800646c <RCCEx_PLL2_Config+0x160>)
 80063dc:	4013      	ands	r3, r2
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	69d2      	ldr	r2, [r2, #28]
 80063e2:	00d2      	lsls	r2, r2, #3
 80063e4:	4920      	ldr	r1, [pc, #128]	; (8006468 <RCCEx_PLL2_Config+0x15c>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80063ea:	4b1f      	ldr	r3, [pc, #124]	; (8006468 <RCCEx_PLL2_Config+0x15c>)
 80063ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ee:	4a1e      	ldr	r2, [pc, #120]	; (8006468 <RCCEx_PLL2_Config+0x15c>)
 80063f0:	f043 0310 	orr.w	r3, r3, #16
 80063f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d106      	bne.n	800640a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80063fc:	4b1a      	ldr	r3, [pc, #104]	; (8006468 <RCCEx_PLL2_Config+0x15c>)
 80063fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006400:	4a19      	ldr	r2, [pc, #100]	; (8006468 <RCCEx_PLL2_Config+0x15c>)
 8006402:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006406:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006408:	e00f      	b.n	800642a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d106      	bne.n	800641e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006410:	4b15      	ldr	r3, [pc, #84]	; (8006468 <RCCEx_PLL2_Config+0x15c>)
 8006412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006414:	4a14      	ldr	r2, [pc, #80]	; (8006468 <RCCEx_PLL2_Config+0x15c>)
 8006416:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800641a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800641c:	e005      	b.n	800642a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800641e:	4b12      	ldr	r3, [pc, #72]	; (8006468 <RCCEx_PLL2_Config+0x15c>)
 8006420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006422:	4a11      	ldr	r2, [pc, #68]	; (8006468 <RCCEx_PLL2_Config+0x15c>)
 8006424:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006428:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800642a:	4b0f      	ldr	r3, [pc, #60]	; (8006468 <RCCEx_PLL2_Config+0x15c>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a0e      	ldr	r2, [pc, #56]	; (8006468 <RCCEx_PLL2_Config+0x15c>)
 8006430:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006436:	f7fa ffc3 	bl	80013c0 <HAL_GetTick>
 800643a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800643c:	e008      	b.n	8006450 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800643e:	f7fa ffbf 	bl	80013c0 <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	2b02      	cmp	r3, #2
 800644a:	d901      	bls.n	8006450 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e006      	b.n	800645e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006450:	4b05      	ldr	r3, [pc, #20]	; (8006468 <RCCEx_PLL2_Config+0x15c>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d0f0      	beq.n	800643e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800645c:	7bfb      	ldrb	r3, [r7, #15]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	58024400 	.word	0x58024400
 800646c:	ffff0007 	.word	0xffff0007

08006470 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800647e:	4b53      	ldr	r3, [pc, #332]	; (80065cc <RCCEx_PLL3_Config+0x15c>)
 8006480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006482:	f003 0303 	and.w	r3, r3, #3
 8006486:	2b03      	cmp	r3, #3
 8006488:	d101      	bne.n	800648e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e099      	b.n	80065c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800648e:	4b4f      	ldr	r3, [pc, #316]	; (80065cc <RCCEx_PLL3_Config+0x15c>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a4e      	ldr	r2, [pc, #312]	; (80065cc <RCCEx_PLL3_Config+0x15c>)
 8006494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006498:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800649a:	f7fa ff91 	bl	80013c0 <HAL_GetTick>
 800649e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80064a0:	e008      	b.n	80064b4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80064a2:	f7fa ff8d 	bl	80013c0 <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d901      	bls.n	80064b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e086      	b.n	80065c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80064b4:	4b45      	ldr	r3, [pc, #276]	; (80065cc <RCCEx_PLL3_Config+0x15c>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1f0      	bne.n	80064a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80064c0:	4b42      	ldr	r3, [pc, #264]	; (80065cc <RCCEx_PLL3_Config+0x15c>)
 80064c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	051b      	lsls	r3, r3, #20
 80064ce:	493f      	ldr	r1, [pc, #252]	; (80065cc <RCCEx_PLL3_Config+0x15c>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	628b      	str	r3, [r1, #40]	; 0x28
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	3b01      	subs	r3, #1
 80064da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	3b01      	subs	r3, #1
 80064e4:	025b      	lsls	r3, r3, #9
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	431a      	orrs	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	3b01      	subs	r3, #1
 80064f0:	041b      	lsls	r3, r3, #16
 80064f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80064f6:	431a      	orrs	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	3b01      	subs	r3, #1
 80064fe:	061b      	lsls	r3, r3, #24
 8006500:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006504:	4931      	ldr	r1, [pc, #196]	; (80065cc <RCCEx_PLL3_Config+0x15c>)
 8006506:	4313      	orrs	r3, r2
 8006508:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800650a:	4b30      	ldr	r3, [pc, #192]	; (80065cc <RCCEx_PLL3_Config+0x15c>)
 800650c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	492d      	ldr	r1, [pc, #180]	; (80065cc <RCCEx_PLL3_Config+0x15c>)
 8006518:	4313      	orrs	r3, r2
 800651a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800651c:	4b2b      	ldr	r3, [pc, #172]	; (80065cc <RCCEx_PLL3_Config+0x15c>)
 800651e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006520:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	4928      	ldr	r1, [pc, #160]	; (80065cc <RCCEx_PLL3_Config+0x15c>)
 800652a:	4313      	orrs	r3, r2
 800652c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800652e:	4b27      	ldr	r3, [pc, #156]	; (80065cc <RCCEx_PLL3_Config+0x15c>)
 8006530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006532:	4a26      	ldr	r2, [pc, #152]	; (80065cc <RCCEx_PLL3_Config+0x15c>)
 8006534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006538:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800653a:	4b24      	ldr	r3, [pc, #144]	; (80065cc <RCCEx_PLL3_Config+0x15c>)
 800653c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800653e:	4b24      	ldr	r3, [pc, #144]	; (80065d0 <RCCEx_PLL3_Config+0x160>)
 8006540:	4013      	ands	r3, r2
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	69d2      	ldr	r2, [r2, #28]
 8006546:	00d2      	lsls	r2, r2, #3
 8006548:	4920      	ldr	r1, [pc, #128]	; (80065cc <RCCEx_PLL3_Config+0x15c>)
 800654a:	4313      	orrs	r3, r2
 800654c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800654e:	4b1f      	ldr	r3, [pc, #124]	; (80065cc <RCCEx_PLL3_Config+0x15c>)
 8006550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006552:	4a1e      	ldr	r2, [pc, #120]	; (80065cc <RCCEx_PLL3_Config+0x15c>)
 8006554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006558:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d106      	bne.n	800656e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006560:	4b1a      	ldr	r3, [pc, #104]	; (80065cc <RCCEx_PLL3_Config+0x15c>)
 8006562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006564:	4a19      	ldr	r2, [pc, #100]	; (80065cc <RCCEx_PLL3_Config+0x15c>)
 8006566:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800656a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800656c:	e00f      	b.n	800658e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d106      	bne.n	8006582 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006574:	4b15      	ldr	r3, [pc, #84]	; (80065cc <RCCEx_PLL3_Config+0x15c>)
 8006576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006578:	4a14      	ldr	r2, [pc, #80]	; (80065cc <RCCEx_PLL3_Config+0x15c>)
 800657a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800657e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006580:	e005      	b.n	800658e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006582:	4b12      	ldr	r3, [pc, #72]	; (80065cc <RCCEx_PLL3_Config+0x15c>)
 8006584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006586:	4a11      	ldr	r2, [pc, #68]	; (80065cc <RCCEx_PLL3_Config+0x15c>)
 8006588:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800658c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800658e:	4b0f      	ldr	r3, [pc, #60]	; (80065cc <RCCEx_PLL3_Config+0x15c>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a0e      	ldr	r2, [pc, #56]	; (80065cc <RCCEx_PLL3_Config+0x15c>)
 8006594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006598:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800659a:	f7fa ff11 	bl	80013c0 <HAL_GetTick>
 800659e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80065a0:	e008      	b.n	80065b4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80065a2:	f7fa ff0d 	bl	80013c0 <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d901      	bls.n	80065b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e006      	b.n	80065c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80065b4:	4b05      	ldr	r3, [pc, #20]	; (80065cc <RCCEx_PLL3_Config+0x15c>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d0f0      	beq.n	80065a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	58024400 	.word	0x58024400
 80065d0:	ffff0007 	.word	0xffff0007

080065d4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 80065dc:	2300      	movs	r3, #0
 80065de:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e0e2      	b.n	80067b0 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a70      	ldr	r2, [pc, #448]	; (80067b8 <HAL_SPI_Init+0x1e4>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d00f      	beq.n	800661a <HAL_SPI_Init+0x46>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a6f      	ldr	r2, [pc, #444]	; (80067bc <HAL_SPI_Init+0x1e8>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d00a      	beq.n	800661a <HAL_SPI_Init+0x46>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a6d      	ldr	r2, [pc, #436]	; (80067c0 <HAL_SPI_Init+0x1ec>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d005      	beq.n	800661a <HAL_SPI_Init+0x46>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	2b0f      	cmp	r3, #15
 8006614:	d901      	bls.n	800661a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e0ca      	b.n	80067b0 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f001 f84a 	bl	80076b4 <SPI_GetPacketSize>
 8006620:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a64      	ldr	r2, [pc, #400]	; (80067b8 <HAL_SPI_Init+0x1e4>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d00c      	beq.n	8006646 <HAL_SPI_Init+0x72>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a62      	ldr	r2, [pc, #392]	; (80067bc <HAL_SPI_Init+0x1e8>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d007      	beq.n	8006646 <HAL_SPI_Init+0x72>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a61      	ldr	r2, [pc, #388]	; (80067c0 <HAL_SPI_Init+0x1ec>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d002      	beq.n	8006646 <HAL_SPI_Init+0x72>
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2b08      	cmp	r3, #8
 8006644:	d811      	bhi.n	800666a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800664a:	4a5b      	ldr	r2, [pc, #364]	; (80067b8 <HAL_SPI_Init+0x1e4>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d009      	beq.n	8006664 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a59      	ldr	r2, [pc, #356]	; (80067bc <HAL_SPI_Init+0x1e8>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d004      	beq.n	8006664 <HAL_SPI_Init+0x90>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a58      	ldr	r2, [pc, #352]	; (80067c0 <HAL_SPI_Init+0x1ec>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d104      	bne.n	800666e <HAL_SPI_Init+0x9a>
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2b10      	cmp	r3, #16
 8006668:	d901      	bls.n	800666e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e0a0      	b.n	80067b0 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d106      	bne.n	8006688 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7fa fc1a 	bl	8000ebc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 0201 	bic.w	r2, r2, #1
 800669e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066a8:	d110      	bne.n	80066cc <HAL_SPI_Init+0xf8>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066b2:	d10b      	bne.n	80066cc <HAL_SPI_Init+0xf8>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d107      	bne.n	80066cc <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80066ca:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	69da      	ldr	r2, [r3, #28]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d4:	431a      	orrs	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	431a      	orrs	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066de:	ea42 0103 	orr.w	r1, r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68da      	ldr	r2, [r3, #12]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f6:	431a      	orrs	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fc:	431a      	orrs	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	431a      	orrs	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	431a      	orrs	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	431a      	orrs	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	431a      	orrs	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	431a      	orrs	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006720:	431a      	orrs	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	431a      	orrs	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800672c:	ea42 0103 	orr.w	r1, r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	430a      	orrs	r2, r1
 800673a:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d113      	bne.n	800676c <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006756:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800676a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f022 0201 	bic.w	r2, r2, #1
 800677a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00a      	beq.n	800679e <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	40013000 	.word	0x40013000
 80067bc:	40003800 	.word	0x40003800
 80067c0:	40003c00 	.word	0x40003c00

080067c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b08e      	sub	sp, #56	; 0x38
 80067c8:	af02      	add	r7, sp, #8
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
 80067d0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067d2:	2300      	movs	r3, #0
 80067d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3320      	adds	r3, #32
 80067de:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	3330      	adds	r3, #48	; 0x30
 80067e6:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d101      	bne.n	80067f6 <HAL_SPI_TransmitReceive+0x32>
 80067f2:	2302      	movs	r3, #2
 80067f4:	e2ce      	b.n	8006d94 <HAL_SPI_TransmitReceive+0x5d0>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067fe:	f7fa fddf 	bl	80013c0 <HAL_GetTick>
 8006802:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8006804:	887b      	ldrh	r3, [r7, #2]
 8006806:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8006808:	887b      	ldrh	r3, [r7, #2]
 800680a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006812:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800681a:	7efb      	ldrb	r3, [r7, #27]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d014      	beq.n	800684a <HAL_SPI_TransmitReceive+0x86>
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006826:	d106      	bne.n	8006836 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d102      	bne.n	8006836 <HAL_SPI_TransmitReceive+0x72>
 8006830:	7efb      	ldrb	r3, [r7, #27]
 8006832:	2b04      	cmp	r3, #4
 8006834:	d009      	beq.n	800684a <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8006836:	2302      	movs	r3, #2
 8006838:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006844:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006848:	e2a4      	b.n	8006d94 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d005      	beq.n	800685c <HAL_SPI_TransmitReceive+0x98>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d002      	beq.n	800685c <HAL_SPI_TransmitReceive+0x98>
 8006856:	887b      	ldrh	r3, [r7, #2]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d109      	bne.n	8006870 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800686a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800686e:	e291      	b.n	8006d94 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006876:	b2db      	uxtb	r3, r3
 8006878:	2b04      	cmp	r3, #4
 800687a:	d003      	beq.n	8006884 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2205      	movs	r2, #5
 8006880:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	887a      	ldrh	r2, [r7, #2]
 8006896:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	887a      	ldrh	r2, [r7, #2]
 800689e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	887a      	ldrh	r2, [r7, #2]
 80068ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	887a      	ldrh	r2, [r7, #2]
 80068b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685a      	ldr	r2, [r3, #4]
 80068ca:	4b9f      	ldr	r3, [pc, #636]	; (8006b48 <HAL_SPI_TransmitReceive+0x384>)
 80068cc:	4013      	ands	r3, r2
 80068ce:	8879      	ldrh	r1, [r7, #2]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	6812      	ldr	r2, [r2, #0]
 80068d4:	430b      	orrs	r3, r1
 80068d6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f042 0201 	orr.w	r2, r2, #1
 80068e6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068f0:	d107      	bne.n	8006902 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006900:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	2b0f      	cmp	r3, #15
 8006908:	d970      	bls.n	80069ec <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800690a:	e068      	b.n	80069de <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b02      	cmp	r3, #2
 8006918:	d11a      	bne.n	8006950 <HAL_SPI_TransmitReceive+0x18c>
 800691a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800691c:	2b00      	cmp	r3, #0
 800691e:	d017      	beq.n	8006950 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6812      	ldr	r2, [r2, #0]
 800692a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006930:	1d1a      	adds	r2, r3, #4
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800693c:	b29b      	uxth	r3, r3
 800693e:	3b01      	subs	r3, #1
 8006940:	b29a      	uxth	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800694e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	695a      	ldr	r2, [r3, #20]
 8006956:	f248 0308 	movw	r3, #32776	; 0x8008
 800695a:	4013      	ands	r3, r2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d01a      	beq.n	8006996 <HAL_SPI_TransmitReceive+0x1d2>
 8006960:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006962:	2b00      	cmp	r3, #0
 8006964:	d017      	beq.n	8006996 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800696e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006970:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006976:	1d1a      	adds	r2, r3, #4
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006982:	b29b      	uxth	r3, r3
 8006984:	3b01      	subs	r3, #1
 8006986:	b29a      	uxth	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006994:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006996:	f7fa fd13 	bl	80013c0 <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d803      	bhi.n	80069ae <HAL_SPI_TransmitReceive+0x1ea>
 80069a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ac:	d102      	bne.n	80069b4 <HAL_SPI_TransmitReceive+0x1f0>
 80069ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d114      	bne.n	80069de <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 fdaf 	bl	8007518 <SPI_CloseTransfer>
      
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e1da      	b.n	8006d94 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80069de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d193      	bne.n	800690c <HAL_SPI_TransmitReceive+0x148>
 80069e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d190      	bne.n	800690c <HAL_SPI_TransmitReceive+0x148>
 80069ea:	e1ac      	b.n	8006d46 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	2b07      	cmp	r3, #7
 80069f2:	f240 81a0 	bls.w	8006d36 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80069f6:	e0a9      	b.n	8006b4c <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d139      	bne.n	8006a7a <HAL_SPI_TransmitReceive+0x2b6>
 8006a06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d036      	beq.n	8006a7a <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006a0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d91c      	bls.n	8006a4c <HAL_SPI_TransmitReceive+0x288>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d018      	beq.n	8006a4c <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6812      	ldr	r2, [r2, #0]
 8006a24:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a2a:	1d1a      	adds	r2, r3, #4
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	3b02      	subs	r3, #2
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a48:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006a4a:	e016      	b.n	8006a7a <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a50:	881a      	ldrh	r2, [r3, #0]
 8006a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a54:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a5a:	1c9a      	adds	r2, r3, #2
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a78:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d03a      	beq.n	8006afe <HAL_SPI_TransmitReceive+0x33a>
 8006a88:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d037      	beq.n	8006afe <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	695b      	ldr	r3, [r3, #20]
 8006a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d018      	beq.n	8006ace <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aa4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006aa6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aac:	1d1a      	adds	r2, r3, #4
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	3b02      	subs	r3, #2
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006aca:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006acc:	e017      	b.n	8006afe <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ad2:	6a3a      	ldr	r2, [r7, #32]
 8006ad4:	8812      	ldrh	r2, [r2, #0]
 8006ad6:	b292      	uxth	r2, r2
 8006ad8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ade:	1c9a      	adds	r2, r3, #2
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	3b01      	subs	r3, #1
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006afc:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006afe:	f7fa fc5f 	bl	80013c0 <HAL_GetTick>
 8006b02:	4602      	mov	r2, r0
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d803      	bhi.n	8006b16 <HAL_SPI_TransmitReceive+0x352>
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b14:	d102      	bne.n	8006b1c <HAL_SPI_TransmitReceive+0x358>
 8006b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d117      	bne.n	8006b4c <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 fcfb 	bl	8007518 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e126      	b.n	8006d94 <HAL_SPI_TransmitReceive+0x5d0>
 8006b46:	bf00      	nop
 8006b48:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006b4c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f47f af52 	bne.w	80069f8 <HAL_SPI_TransmitReceive+0x234>
 8006b54:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f47f af4e 	bne.w	80069f8 <HAL_SPI_TransmitReceive+0x234>
 8006b5c:	e0f3      	b.n	8006d46 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	f003 0302 	and.w	r3, r3, #2
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d15a      	bne.n	8006c22 <HAL_SPI_TransmitReceive+0x45e>
 8006b6c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d057      	beq.n	8006c22 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006b72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b74:	2b03      	cmp	r3, #3
 8006b76:	d91c      	bls.n	8006bb2 <HAL_SPI_TransmitReceive+0x3ee>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b7c:	2b40      	cmp	r3, #64	; 0x40
 8006b7e:	d918      	bls.n	8006bb2 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6812      	ldr	r2, [r2, #0]
 8006b8a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b90:	1d1a      	adds	r2, r3, #4
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	3b04      	subs	r3, #4
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006bae:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006bb0:	e037      	b.n	8006c22 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006bb2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d91b      	bls.n	8006bf0 <HAL_SPI_TransmitReceive+0x42c>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d017      	beq.n	8006bf0 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bc4:	881a      	ldrh	r2, [r3, #0]
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bce:	1c9a      	adds	r2, r3, #2
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	3b02      	subs	r3, #2
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006bec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006bee:	e018      	b.n	8006c22 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	3320      	adds	r3, #32
 8006bfa:	7812      	ldrb	r2, [r2, #0]
 8006bfc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	3b01      	subs	r3, #1
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006c20:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	695b      	ldr	r3, [r3, #20]
 8006c28:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d05e      	beq.n	8006cee <HAL_SPI_TransmitReceive+0x52a>
 8006c30:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d05b      	beq.n	8006cee <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d018      	beq.n	8006c76 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006c4e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c54:	1d1a      	adds	r2, r3, #4
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	3b04      	subs	r3, #4
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006c72:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006c74:	e03b      	b.n	8006cee <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	695b      	ldr	r3, [r3, #20]
 8006c7c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8006c80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c84:	d918      	bls.n	8006cb8 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c8a:	6a3a      	ldr	r2, [r7, #32]
 8006c8c:	8812      	ldrh	r2, [r2, #0]
 8006c8e:	b292      	uxth	r2, r2
 8006c90:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c96:	1c9a      	adds	r2, r3, #2
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	3b02      	subs	r3, #2
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006cb4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006cb6:	e01a      	b.n	8006cee <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cc4:	7812      	ldrb	r2, [r2, #0]
 8006cc6:	b2d2      	uxtb	r2, r2
 8006cc8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cce:	1c5a      	adds	r2, r3, #1
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006cec:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cee:	f7fa fb67 	bl	80013c0 <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d803      	bhi.n	8006d06 <HAL_SPI_TransmitReceive+0x542>
 8006cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d04:	d102      	bne.n	8006d0c <HAL_SPI_TransmitReceive+0x548>
 8006d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d114      	bne.n	8006d36 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f000 fc03 	bl	8007518 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e02e      	b.n	8006d94 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006d36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f47f af10 	bne.w	8006b5e <HAL_SPI_TransmitReceive+0x39a>
 8006d3e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f47f af0c 	bne.w	8006b5e <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8006d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	2108      	movs	r1, #8
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f000 fc81 	bl	8007658 <SPI_WaitOnFlagUntilTimeout>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d007      	beq.n	8006d6c <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d62:	f043 0220 	orr.w	r2, r3, #32
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f000 fbd3 	bl	8007518 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d001      	beq.n	8006d90 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e001      	b.n	8006d94 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8006d90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3730      	adds	r7, #48	; 0x30
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b086      	sub	sp, #24
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	4613      	mov	r3, r2
 8006da8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006daa:	2300      	movs	r3, #0
 8006dac:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d101      	bne.n	8006dbc <HAL_SPI_Transmit_DMA+0x20>
 8006db8:	2302      	movs	r3, #2
 8006dba:	e128      	b.n	800700e <HAL_SPI_Transmit_DMA+0x272>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d007      	beq.n	8006de0 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006ddc:	7dfb      	ldrb	r3, [r7, #23]
 8006dde:	e116      	b.n	800700e <HAL_SPI_Transmit_DMA+0x272>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d002      	beq.n	8006dec <HAL_SPI_Transmit_DMA+0x50>
 8006de6:	88fb      	ldrh	r3, [r7, #6]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d107      	bne.n	8006dfc <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006df8:	7dfb      	ldrb	r3, [r7, #23]
 8006dfa:	e108      	b.n	800700e <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2203      	movs	r2, #3
 8006e00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	68ba      	ldr	r2, [r7, #8]
 8006e10:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	88fa      	ldrh	r2, [r7, #6]
 8006e16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	88fa      	ldrh	r2, [r7, #6]
 8006e1e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006e4c:	d107      	bne.n	8006e5e <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e5c:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	2b0f      	cmp	r3, #15
 8006e64:	d905      	bls.n	8006e72 <HAL_SPI_Transmit_DMA+0xd6>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e70:	d10f      	bne.n	8006e92 <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006e76:	2b07      	cmp	r3, #7
 8006e78:	d913      	bls.n	8006ea2 <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e84:	d00d      	beq.n	8006ea2 <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e8a:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8006e8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e90:	d007      	beq.n	8006ea2 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006e9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ea0:	e0b5      	b.n	800700e <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	2b07      	cmp	r3, #7
 8006ea8:	d820      	bhi.n	8006eec <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eb4:	d109      	bne.n	8006eca <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	105b      	asrs	r3, r3, #1
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ed4:	d11e      	bne.n	8006f14 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	3303      	adds	r3, #3
 8006ee0:	109b      	asrs	r3, r3, #2
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006eea:	e013      	b.n	8006f14 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	2b0f      	cmp	r3, #15
 8006ef2:	d80f      	bhi.n	8006f14 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006efe:	d109      	bne.n	8006f14 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	3301      	adds	r3, #1
 8006f0a:	105b      	asrs	r3, r3, #1
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f18:	4a3f      	ldr	r2, [pc, #252]	; (8007018 <HAL_SPI_Transmit_DMA+0x27c>)
 8006f1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f20:	4a3e      	ldr	r2, [pc, #248]	; (800701c <HAL_SPI_Transmit_DMA+0x280>)
 8006f22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f28:	4a3d      	ldr	r2, [pc, #244]	; (8007020 <HAL_SPI_Transmit_DMA+0x284>)
 8006f2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f30:	2200      	movs	r2, #0
 8006f32:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689a      	ldr	r2, [r3, #8]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f42:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	3320      	adds	r3, #32
 8006f54:	461a      	mov	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	f7fa fed5 	bl	8001d0c <HAL_DMA_Start_IT>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00f      	beq.n	8006f88 <HAL_SPI_Transmit_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f6e:	f043 0210 	orr.w	r2, r3, #16
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 8006f84:	7dfb      	ldrb	r3, [r7, #23]
 8006f86:	e042      	b.n	800700e <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f8c:	69db      	ldr	r3, [r3, #28]
 8006f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f92:	d108      	bne.n	8006fa6 <HAL_SPI_Transmit_DMA+0x20a>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6859      	ldr	r1, [r3, #4]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	4b21      	ldr	r3, [pc, #132]	; (8007024 <HAL_SPI_Transmit_DMA+0x288>)
 8006fa0:	400b      	ands	r3, r1
 8006fa2:	6053      	str	r3, [r2, #4]
 8006fa4:	e009      	b.n	8006fba <HAL_SPI_Transmit_DMA+0x21e>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	4b1d      	ldr	r3, [pc, #116]	; (8007024 <HAL_SPI_Transmit_DMA+0x288>)
 8006fae:	4013      	ands	r3, r2
 8006fb0:	88f9      	ldrh	r1, [r7, #6]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	6812      	ldr	r2, [r2, #0]
 8006fb6:	430b      	orrs	r3, r1
 8006fb8:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fc8:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	691a      	ldr	r2, [r3, #16]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 8006fd8:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f042 0201 	orr.w	r2, r2, #1
 8006fe8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ff2:	d107      	bne.n	8007004 <HAL_SPI_Transmit_DMA+0x268>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007002:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800700c:	7dfb      	ldrb	r3, [r7, #23]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	08007483 	.word	0x08007483
 800701c:	0800743d 	.word	0x0800743d
 8007020:	0800749f 	.word	0x0800749f
 8007024:	ffff0000 	.word	0xffff0000

08007028 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b08a      	sub	sp, #40	; 0x28
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007040:	6a3a      	ldr	r2, [r7, #32]
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	4013      	ands	r3, r2
 8007046:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007050:	2300      	movs	r3, #0
 8007052:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800705a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	3330      	adds	r3, #48	; 0x30
 8007062:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706a:	2b00      	cmp	r3, #0
 800706c:	d113      	bne.n	8007096 <HAL_SPI_IRQHandler+0x6e>
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	f003 0320 	and.w	r3, r3, #32
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10e      	bne.n	8007096 <HAL_SPI_IRQHandler+0x6e>
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	f003 0304 	and.w	r3, r3, #4
 800707e:	2b00      	cmp	r3, #0
 8007080:	d009      	beq.n	8007096 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	4798      	blx	r3
    hspi->RxISR(hspi);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	4798      	blx	r3
    handled = 1UL;
 8007092:	2301      	movs	r3, #1
 8007094:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10f      	bne.n	80070c0 <HAL_SPI_IRQHandler+0x98>
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00a      	beq.n	80070c0 <HAL_SPI_IRQHandler+0x98>
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	f003 0304 	and.w	r3, r3, #4
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d105      	bne.n	80070c0 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	4798      	blx	r3
    handled = 1UL;
 80070bc:	2301      	movs	r3, #1
 80070be:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	f003 0320 	and.w	r3, r3, #32
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10f      	bne.n	80070ea <HAL_SPI_IRQHandler+0xc2>
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	f003 0302 	and.w	r3, r3, #2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00a      	beq.n	80070ea <HAL_SPI_IRQHandler+0xc2>
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	f003 0304 	and.w	r3, r3, #4
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d105      	bne.n	80070ea <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	4798      	blx	r3
    handled = 1UL;
 80070e6:	2301      	movs	r3, #1
 80070e8:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80070ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f040 8170 	bne.w	80073d2 <HAL_SPI_IRQHandler+0x3aa>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	f003 0308 	and.w	r3, r3, #8
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 80a0 	beq.w	800723e <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	699a      	ldr	r2, [r3, #24]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f042 0208 	orr.w	r2, r2, #8
 800710c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	699a      	ldr	r2, [r3, #24]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f042 0210 	orr.w	r2, r2, #16
 800711c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	699a      	ldr	r2, [r3, #24]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800712c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	691a      	ldr	r2, [r3, #16]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f022 0208 	bic.w	r2, r2, #8
 800713c:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00f      	beq.n	8007168 <HAL_SPI_IRQHandler+0x140>
 8007148:	7cfb      	ldrb	r3, [r7, #19]
 800714a:	2b04      	cmp	r3, #4
 800714c:	d004      	beq.n	8007158 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007152:	69db      	ldr	r3, [r3, #28]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d007      	beq.n	8007168 <HAL_SPI_IRQHandler+0x140>
 8007158:	7cfb      	ldrb	r3, [r7, #19]
 800715a:	2b03      	cmp	r3, #3
 800715c:	d059      	beq.n	8007212 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007162:	69db      	ldr	r3, [r3, #28]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d154      	bne.n	8007212 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d13d      	bne.n	80071f2 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8007176:	e036      	b.n	80071e6 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	2b0f      	cmp	r3, #15
 800717e:	d90b      	bls.n	8007198 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007188:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800718a:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007190:	1d1a      	adds	r2, r3, #4
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	665a      	str	r2, [r3, #100]	; 0x64
 8007196:	e01d      	b.n	80071d4 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	2b07      	cmp	r3, #7
 800719e:	d90b      	bls.n	80071b8 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	8812      	ldrh	r2, [r2, #0]
 80071a8:	b292      	uxth	r2, r2
 80071aa:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071b0:	1c9a      	adds	r2, r3, #2
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	665a      	str	r2, [r3, #100]	; 0x64
 80071b6:	e00d      	b.n	80071d4 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071c4:	7812      	ldrb	r2, [r2, #0]
 80071c6:	b2d2      	uxtb	r2, r2
 80071c8:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071ce:	1c5a      	adds	r2, r3, #1
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80071da:	b29b      	uxth	r3, r3
 80071dc:	3b01      	subs	r3, #1
 80071de:	b29a      	uxth	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1c2      	bne.n	8007178 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f990 	bl	8007518 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f90c 	bl	8007428 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8007210:	e0e4      	b.n	80073dc <HAL_SPI_IRQHandler+0x3b4>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007212:	7cfb      	ldrb	r3, [r7, #19]
 8007214:	2b05      	cmp	r3, #5
 8007216:	d103      	bne.n	8007220 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 f8f1 	bl	8007400 <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 800721e:	e0da      	b.n	80073d6 <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007220:	7cfb      	ldrb	r3, [r7, #19]
 8007222:	2b04      	cmp	r3, #4
 8007224:	d103      	bne.n	800722e <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f8e0 	bl	80073ec <HAL_SPI_RxCpltCallback>
    return;
 800722c:	e0d3      	b.n	80073d6 <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800722e:	7cfb      	ldrb	r3, [r7, #19]
 8007230:	2b03      	cmp	r3, #3
 8007232:	f040 80d0 	bne.w	80073d6 <HAL_SPI_IRQHandler+0x3ae>
      HAL_SPI_TxCpltCallback(hspi);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7f9 fafe 	bl	8000838 <HAL_SPI_TxCpltCallback>
    return;
 800723c:	e0cb      	b.n	80073d6 <HAL_SPI_IRQHandler+0x3ae>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00d      	beq.n	8007264 <HAL_SPI_IRQHandler+0x23c>
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	f003 0308 	and.w	r3, r3, #8
 800724e:	2b00      	cmp	r3, #0
 8007250:	d008      	beq.n	8007264 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	699a      	ldr	r2, [r3, #24]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007260:	619a      	str	r2, [r3, #24]

    return;
 8007262:	e0bb      	b.n	80073dc <HAL_SPI_IRQHandler+0x3b4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800726a:	2b00      	cmp	r3, #0
 800726c:	f000 80b6 	beq.w	80073dc <HAL_SPI_IRQHandler+0x3b4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00f      	beq.n	800729a <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007280:	f043 0204 	orr.w	r2, r3, #4
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	699a      	ldr	r2, [r3, #24]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007298:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00f      	beq.n	80072c4 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072aa:	f043 0201 	orr.w	r2, r3, #1
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	699a      	ldr	r2, [r3, #24]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072c2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00f      	beq.n	80072ee <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072d4:	f043 0208 	orr.w	r2, r3, #8
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	699a      	ldr	r2, [r3, #24]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072ec:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	f003 0320 	and.w	r3, r3, #32
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00f      	beq.n	8007318 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072fe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	699a      	ldr	r2, [r3, #24]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f042 0220 	orr.w	r2, r2, #32
 8007316:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800731e:	2b00      	cmp	r3, #0
 8007320:	d05b      	beq.n	80073da <HAL_SPI_IRQHandler+0x3b2>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f022 0201 	bic.w	r2, r2, #1
 8007330:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6919      	ldr	r1, [r3, #16]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	4b29      	ldr	r3, [pc, #164]	; (80073e4 <HAL_SPI_IRQHandler+0x3bc>)
 800733e:	400b      	ands	r3, r1
 8007340:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007348:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800734c:	d138      	bne.n	80073c0 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	689a      	ldr	r2, [r3, #8]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800735c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007362:	2b00      	cmp	r3, #0
 8007364:	d013      	beq.n	800738e <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800736a:	4a1f      	ldr	r2, [pc, #124]	; (80073e8 <HAL_SPI_IRQHandler+0x3c0>)
 800736c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007372:	4618      	mov	r0, r3
 8007374:	f7fa ff34 	bl	80021e0 <HAL_DMA_Abort_IT>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d007      	beq.n	800738e <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007384:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007392:	2b00      	cmp	r3, #0
 8007394:	d021      	beq.n	80073da <HAL_SPI_IRQHandler+0x3b2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800739a:	4a13      	ldr	r2, [pc, #76]	; (80073e8 <HAL_SPI_IRQHandler+0x3c0>)
 800739c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7fa ff1c 	bl	80021e0 <HAL_DMA_Abort_IT>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d015      	beq.n	80073da <HAL_SPI_IRQHandler+0x3b2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80073be:	e00c      	b.n	80073da <HAL_SPI_IRQHandler+0x3b2>
        hspi->State = HAL_SPI_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f82d 	bl	8007428 <HAL_SPI_ErrorCallback>
    return;
 80073ce:	bf00      	nop
 80073d0:	e003      	b.n	80073da <HAL_SPI_IRQHandler+0x3b2>
    return;
 80073d2:	bf00      	nop
 80073d4:	e002      	b.n	80073dc <HAL_SPI_IRQHandler+0x3b4>
    return;
 80073d6:	bf00      	nop
 80073d8:	e000      	b.n	80073dc <HAL_SPI_IRQHandler+0x3b4>
    return;
 80073da:	bf00      	nop
  }
}
 80073dc:	3728      	adds	r7, #40	; 0x28
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	fffffc94 	.word	0xfffffc94
 80073e8:	080074e5 	.word	0x080074e5

080073ec <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007448:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b07      	cmp	r3, #7
 8007454:	d011      	beq.n	800747a <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800745a:	69db      	ldr	r3, [r3, #28]
 800745c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007460:	d103      	bne.n	800746a <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f7f9 f9e8 	bl	8000838 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8007468:	e007      	b.n	800747a <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	691a      	ldr	r2, [r3, #16]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f042 0208 	orr.w	r2, r2, #8
 8007478:	611a      	str	r2, [r3, #16]
}
 800747a:	bf00      	nop
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b084      	sub	sp, #16
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f7ff ffbf 	bl	8007414 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007496:	bf00      	nop
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b084      	sub	sp, #16
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074aa:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7fc f805 	bl	80034bc <HAL_DMA_GetError>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d011      	beq.n	80074dc <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f000 f82d 	bl	8007518 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074c4:	f043 0210 	orr.w	r2, r3, #16
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f7ff ffa6 	bl	8007428 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80074dc:	bf00      	nop
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f7ff ff8c 	bl	8007428 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007510:	bf00      	nop
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	699a      	ldr	r2, [r3, #24]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f042 0208 	orr.w	r2, r2, #8
 8007536:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	699a      	ldr	r2, [r3, #24]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f042 0210 	orr.w	r2, r2, #16
 8007546:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f022 0201 	bic.w	r2, r2, #1
 8007556:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6919      	ldr	r1, [r3, #16]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	4b3c      	ldr	r3, [pc, #240]	; (8007654 <SPI_CloseTransfer+0x13c>)
 8007564:	400b      	ands	r3, r1
 8007566:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	689a      	ldr	r2, [r3, #8]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007576:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b04      	cmp	r3, #4
 8007582:	d014      	beq.n	80075ae <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f003 0320 	and.w	r3, r3, #32
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00f      	beq.n	80075ae <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007594:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	699a      	ldr	r2, [r3, #24]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f042 0220 	orr.w	r2, r2, #32
 80075ac:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	d014      	beq.n	80075e4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00f      	beq.n	80075e4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075ca:	f043 0204 	orr.w	r2, r3, #4
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	699a      	ldr	r2, [r3, #24]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075e2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00f      	beq.n	800760e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075f4:	f043 0201 	orr.w	r2, r3, #1
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	699a      	ldr	r2, [r3, #24]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800760c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00f      	beq.n	8007638 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800761e:	f043 0208 	orr.w	r2, r3, #8
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	699a      	ldr	r2, [r3, #24]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007636:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007648:	bf00      	nop
 800764a:	3714      	adds	r7, #20
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr
 8007654:	fffffc90 	.word	0xfffffc90

08007658 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	603b      	str	r3, [r7, #0]
 8007664:	4613      	mov	r3, r2
 8007666:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007668:	e010      	b.n	800768c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800766a:	f7f9 fea9 	bl	80013c0 <HAL_GetTick>
 800766e:	4602      	mov	r2, r0
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	69ba      	ldr	r2, [r7, #24]
 8007676:	429a      	cmp	r2, r3
 8007678:	d803      	bhi.n	8007682 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007680:	d102      	bne.n	8007688 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d101      	bne.n	800768c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e00f      	b.n	80076ac <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	695a      	ldr	r2, [r3, #20]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	4013      	ands	r3, r2
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	429a      	cmp	r2, r3
 800769a:	bf0c      	ite	eq
 800769c:	2301      	moveq	r3, #1
 800769e:	2300      	movne	r3, #0
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	461a      	mov	r2, r3
 80076a4:	79fb      	ldrb	r3, [r7, #7]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d0df      	beq.n	800766a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c0:	095b      	lsrs	r3, r3, #5
 80076c2:	3301      	adds	r3, #1
 80076c4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	3301      	adds	r3, #1
 80076cc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	3307      	adds	r3, #7
 80076d2:	08db      	lsrs	r3, r3, #3
 80076d4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	fb02 f303 	mul.w	r3, r2, r3
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b082      	sub	sp, #8
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d101      	bne.n	80076fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e042      	b.n	8007782 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007702:	2b00      	cmp	r3, #0
 8007704:	d106      	bne.n	8007714 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f7f9 fc58 	bl	8000fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2224      	movs	r2, #36	; 0x24
 8007718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f022 0201 	bic.w	r2, r2, #1
 800772a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f8c3 	bl	80078b8 <UART_SetConfig>
 8007732:	4603      	mov	r3, r0
 8007734:	2b01      	cmp	r3, #1
 8007736:	d101      	bne.n	800773c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	e022      	b.n	8007782 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007740:	2b00      	cmp	r3, #0
 8007742:	d002      	beq.n	800774a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fe67 	bl	8008418 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	685a      	ldr	r2, [r3, #4]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007758:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689a      	ldr	r2, [r3, #8]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007768:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f042 0201 	orr.w	r2, r2, #1
 8007778:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 feee 	bl	800855c <UART_CheckIdleState>
 8007780:	4603      	mov	r3, r0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3708      	adds	r7, #8
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b08a      	sub	sp, #40	; 0x28
 800778e:	af02      	add	r7, sp, #8
 8007790:	60f8      	str	r0, [r7, #12]
 8007792:	60b9      	str	r1, [r7, #8]
 8007794:	603b      	str	r3, [r7, #0]
 8007796:	4613      	mov	r3, r2
 8007798:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077a0:	2b20      	cmp	r3, #32
 80077a2:	f040 8083 	bne.w	80078ac <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d002      	beq.n	80077b2 <HAL_UART_Transmit+0x28>
 80077ac:	88fb      	ldrh	r3, [r7, #6]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d101      	bne.n	80077b6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e07b      	b.n	80078ae <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d101      	bne.n	80077c4 <HAL_UART_Transmit+0x3a>
 80077c0:	2302      	movs	r3, #2
 80077c2:	e074      	b.n	80078ae <HAL_UART_Transmit+0x124>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2221      	movs	r2, #33	; 0x21
 80077d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80077dc:	f7f9 fdf0 	bl	80013c0 <HAL_GetTick>
 80077e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	88fa      	ldrh	r2, [r7, #6]
 80077e6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	88fa      	ldrh	r2, [r7, #6]
 80077ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077fa:	d108      	bne.n	800780e <HAL_UART_Transmit+0x84>
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d104      	bne.n	800780e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007804:	2300      	movs	r3, #0
 8007806:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	61bb      	str	r3, [r7, #24]
 800780c:	e003      	b.n	8007816 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007812:	2300      	movs	r3, #0
 8007814:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800781e:	e02c      	b.n	800787a <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	2200      	movs	r2, #0
 8007828:	2180      	movs	r1, #128	; 0x80
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f000 fede 	bl	80085ec <UART_WaitOnFlagUntilTimeout>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d001      	beq.n	800783a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e039      	b.n	80078ae <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10b      	bne.n	8007858 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	881b      	ldrh	r3, [r3, #0]
 8007844:	461a      	mov	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800784e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	3302      	adds	r3, #2
 8007854:	61bb      	str	r3, [r7, #24]
 8007856:	e007      	b.n	8007868 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	781a      	ldrb	r2, [r3, #0]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	3301      	adds	r3, #1
 8007866:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800786e:	b29b      	uxth	r3, r3
 8007870:	3b01      	subs	r3, #1
 8007872:	b29a      	uxth	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007880:	b29b      	uxth	r3, r3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1cc      	bne.n	8007820 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	2200      	movs	r2, #0
 800788e:	2140      	movs	r1, #64	; 0x40
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 feab 	bl	80085ec <UART_WaitOnFlagUntilTimeout>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800789c:	2303      	movs	r3, #3
 800789e:	e006      	b.n	80078ae <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2220      	movs	r2, #32
 80078a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	e000      	b.n	80078ae <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80078ac:	2302      	movs	r3, #2
  }
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3720      	adds	r7, #32
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
	...

080078b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078b8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80078bc:	b08e      	sub	sp, #56	; 0x38
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	689a      	ldr	r2, [r3, #8]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	431a      	orrs	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	695b      	ldr	r3, [r3, #20]
 80078d6:	431a      	orrs	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	69db      	ldr	r3, [r3, #28]
 80078dc:	4313      	orrs	r3, r2
 80078de:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078e6:	4313      	orrs	r3, r2
 80078e8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	4bc1      	ldr	r3, [pc, #772]	; (8007bf8 <UART_SetConfig+0x340>)
 80078f2:	4013      	ands	r3, r2
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	6812      	ldr	r2, [r2, #0]
 80078f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80078fa:	430b      	orrs	r3, r1
 80078fc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	68da      	ldr	r2, [r3, #12]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	430a      	orrs	r2, r1
 8007912:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4ab7      	ldr	r2, [pc, #732]	; (8007bfc <UART_SetConfig+0x344>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d004      	beq.n	800792e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a1b      	ldr	r3, [r3, #32]
 8007928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800792a:	4313      	orrs	r3, r2
 800792c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	689a      	ldr	r2, [r3, #8]
 8007934:	4bb2      	ldr	r3, [pc, #712]	; (8007c00 <UART_SetConfig+0x348>)
 8007936:	4013      	ands	r3, r2
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	6812      	ldr	r2, [r2, #0]
 800793c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800793e:	430b      	orrs	r3, r1
 8007940:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007948:	f023 010f 	bic.w	r1, r3, #15
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	430a      	orrs	r2, r1
 8007956:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4aa9      	ldr	r2, [pc, #676]	; (8007c04 <UART_SetConfig+0x34c>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d177      	bne.n	8007a52 <UART_SetConfig+0x19a>
 8007962:	4ba9      	ldr	r3, [pc, #676]	; (8007c08 <UART_SetConfig+0x350>)
 8007964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007966:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800796a:	2b28      	cmp	r3, #40	; 0x28
 800796c:	d86c      	bhi.n	8007a48 <UART_SetConfig+0x190>
 800796e:	a201      	add	r2, pc, #4	; (adr r2, 8007974 <UART_SetConfig+0xbc>)
 8007970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007974:	08007a19 	.word	0x08007a19
 8007978:	08007a49 	.word	0x08007a49
 800797c:	08007a49 	.word	0x08007a49
 8007980:	08007a49 	.word	0x08007a49
 8007984:	08007a49 	.word	0x08007a49
 8007988:	08007a49 	.word	0x08007a49
 800798c:	08007a49 	.word	0x08007a49
 8007990:	08007a49 	.word	0x08007a49
 8007994:	08007a21 	.word	0x08007a21
 8007998:	08007a49 	.word	0x08007a49
 800799c:	08007a49 	.word	0x08007a49
 80079a0:	08007a49 	.word	0x08007a49
 80079a4:	08007a49 	.word	0x08007a49
 80079a8:	08007a49 	.word	0x08007a49
 80079ac:	08007a49 	.word	0x08007a49
 80079b0:	08007a49 	.word	0x08007a49
 80079b4:	08007a29 	.word	0x08007a29
 80079b8:	08007a49 	.word	0x08007a49
 80079bc:	08007a49 	.word	0x08007a49
 80079c0:	08007a49 	.word	0x08007a49
 80079c4:	08007a49 	.word	0x08007a49
 80079c8:	08007a49 	.word	0x08007a49
 80079cc:	08007a49 	.word	0x08007a49
 80079d0:	08007a49 	.word	0x08007a49
 80079d4:	08007a31 	.word	0x08007a31
 80079d8:	08007a49 	.word	0x08007a49
 80079dc:	08007a49 	.word	0x08007a49
 80079e0:	08007a49 	.word	0x08007a49
 80079e4:	08007a49 	.word	0x08007a49
 80079e8:	08007a49 	.word	0x08007a49
 80079ec:	08007a49 	.word	0x08007a49
 80079f0:	08007a49 	.word	0x08007a49
 80079f4:	08007a39 	.word	0x08007a39
 80079f8:	08007a49 	.word	0x08007a49
 80079fc:	08007a49 	.word	0x08007a49
 8007a00:	08007a49 	.word	0x08007a49
 8007a04:	08007a49 	.word	0x08007a49
 8007a08:	08007a49 	.word	0x08007a49
 8007a0c:	08007a49 	.word	0x08007a49
 8007a10:	08007a49 	.word	0x08007a49
 8007a14:	08007a41 	.word	0x08007a41
 8007a18:	2301      	movs	r3, #1
 8007a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a1e:	e233      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007a20:	2304      	movs	r3, #4
 8007a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a26:	e22f      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007a28:	2308      	movs	r3, #8
 8007a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a2e:	e22b      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007a30:	2310      	movs	r3, #16
 8007a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a36:	e227      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007a38:	2320      	movs	r3, #32
 8007a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a3e:	e223      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007a40:	2340      	movs	r3, #64	; 0x40
 8007a42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a46:	e21f      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007a48:	2380      	movs	r3, #128	; 0x80
 8007a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a4e:	bf00      	nop
 8007a50:	e21a      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a6d      	ldr	r2, [pc, #436]	; (8007c0c <UART_SetConfig+0x354>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d132      	bne.n	8007ac2 <UART_SetConfig+0x20a>
 8007a5c:	4b6a      	ldr	r3, [pc, #424]	; (8007c08 <UART_SetConfig+0x350>)
 8007a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a60:	f003 0307 	and.w	r3, r3, #7
 8007a64:	2b05      	cmp	r3, #5
 8007a66:	d827      	bhi.n	8007ab8 <UART_SetConfig+0x200>
 8007a68:	a201      	add	r2, pc, #4	; (adr r2, 8007a70 <UART_SetConfig+0x1b8>)
 8007a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6e:	bf00      	nop
 8007a70:	08007a89 	.word	0x08007a89
 8007a74:	08007a91 	.word	0x08007a91
 8007a78:	08007a99 	.word	0x08007a99
 8007a7c:	08007aa1 	.word	0x08007aa1
 8007a80:	08007aa9 	.word	0x08007aa9
 8007a84:	08007ab1 	.word	0x08007ab1
 8007a88:	2300      	movs	r3, #0
 8007a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a8e:	e1fb      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007a90:	2304      	movs	r3, #4
 8007a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a96:	e1f7      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007a98:	2308      	movs	r3, #8
 8007a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a9e:	e1f3      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007aa0:	2310      	movs	r3, #16
 8007aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aa6:	e1ef      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007aa8:	2320      	movs	r3, #32
 8007aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aae:	e1eb      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007ab0:	2340      	movs	r3, #64	; 0x40
 8007ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ab6:	e1e7      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007ab8:	2380      	movs	r3, #128	; 0x80
 8007aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007abe:	bf00      	nop
 8007ac0:	e1e2      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a52      	ldr	r2, [pc, #328]	; (8007c10 <UART_SetConfig+0x358>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d132      	bne.n	8007b32 <UART_SetConfig+0x27a>
 8007acc:	4b4e      	ldr	r3, [pc, #312]	; (8007c08 <UART_SetConfig+0x350>)
 8007ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad0:	f003 0307 	and.w	r3, r3, #7
 8007ad4:	2b05      	cmp	r3, #5
 8007ad6:	d827      	bhi.n	8007b28 <UART_SetConfig+0x270>
 8007ad8:	a201      	add	r2, pc, #4	; (adr r2, 8007ae0 <UART_SetConfig+0x228>)
 8007ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ade:	bf00      	nop
 8007ae0:	08007af9 	.word	0x08007af9
 8007ae4:	08007b01 	.word	0x08007b01
 8007ae8:	08007b09 	.word	0x08007b09
 8007aec:	08007b11 	.word	0x08007b11
 8007af0:	08007b19 	.word	0x08007b19
 8007af4:	08007b21 	.word	0x08007b21
 8007af8:	2300      	movs	r3, #0
 8007afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007afe:	e1c3      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007b00:	2304      	movs	r3, #4
 8007b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b06:	e1bf      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007b08:	2308      	movs	r3, #8
 8007b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b0e:	e1bb      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007b10:	2310      	movs	r3, #16
 8007b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b16:	e1b7      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007b18:	2320      	movs	r3, #32
 8007b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b1e:	e1b3      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007b20:	2340      	movs	r3, #64	; 0x40
 8007b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b26:	e1af      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007b28:	2380      	movs	r3, #128	; 0x80
 8007b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b2e:	bf00      	nop
 8007b30:	e1aa      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a37      	ldr	r2, [pc, #220]	; (8007c14 <UART_SetConfig+0x35c>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d132      	bne.n	8007ba2 <UART_SetConfig+0x2ea>
 8007b3c:	4b32      	ldr	r3, [pc, #200]	; (8007c08 <UART_SetConfig+0x350>)
 8007b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b40:	f003 0307 	and.w	r3, r3, #7
 8007b44:	2b05      	cmp	r3, #5
 8007b46:	d827      	bhi.n	8007b98 <UART_SetConfig+0x2e0>
 8007b48:	a201      	add	r2, pc, #4	; (adr r2, 8007b50 <UART_SetConfig+0x298>)
 8007b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4e:	bf00      	nop
 8007b50:	08007b69 	.word	0x08007b69
 8007b54:	08007b71 	.word	0x08007b71
 8007b58:	08007b79 	.word	0x08007b79
 8007b5c:	08007b81 	.word	0x08007b81
 8007b60:	08007b89 	.word	0x08007b89
 8007b64:	08007b91 	.word	0x08007b91
 8007b68:	2300      	movs	r3, #0
 8007b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b6e:	e18b      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007b70:	2304      	movs	r3, #4
 8007b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b76:	e187      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007b78:	2308      	movs	r3, #8
 8007b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b7e:	e183      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007b80:	2310      	movs	r3, #16
 8007b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b86:	e17f      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007b88:	2320      	movs	r3, #32
 8007b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b8e:	e17b      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007b90:	2340      	movs	r3, #64	; 0x40
 8007b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b96:	e177      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007b98:	2380      	movs	r3, #128	; 0x80
 8007b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b9e:	bf00      	nop
 8007ba0:	e172      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a1c      	ldr	r2, [pc, #112]	; (8007c18 <UART_SetConfig+0x360>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d144      	bne.n	8007c36 <UART_SetConfig+0x37e>
 8007bac:	4b16      	ldr	r3, [pc, #88]	; (8007c08 <UART_SetConfig+0x350>)
 8007bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb0:	f003 0307 	and.w	r3, r3, #7
 8007bb4:	2b05      	cmp	r3, #5
 8007bb6:	d839      	bhi.n	8007c2c <UART_SetConfig+0x374>
 8007bb8:	a201      	add	r2, pc, #4	; (adr r2, 8007bc0 <UART_SetConfig+0x308>)
 8007bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bbe:	bf00      	nop
 8007bc0:	08007bd9 	.word	0x08007bd9
 8007bc4:	08007be1 	.word	0x08007be1
 8007bc8:	08007be9 	.word	0x08007be9
 8007bcc:	08007bf1 	.word	0x08007bf1
 8007bd0:	08007c1d 	.word	0x08007c1d
 8007bd4:	08007c25 	.word	0x08007c25
 8007bd8:	2300      	movs	r3, #0
 8007bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bde:	e153      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007be0:	2304      	movs	r3, #4
 8007be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007be6:	e14f      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007be8:	2308      	movs	r3, #8
 8007bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bee:	e14b      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007bf0:	2310      	movs	r3, #16
 8007bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bf6:	e147      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007bf8:	cfff69f3 	.word	0xcfff69f3
 8007bfc:	58000c00 	.word	0x58000c00
 8007c00:	11fff4ff 	.word	0x11fff4ff
 8007c04:	40011000 	.word	0x40011000
 8007c08:	58024400 	.word	0x58024400
 8007c0c:	40004400 	.word	0x40004400
 8007c10:	40004800 	.word	0x40004800
 8007c14:	40004c00 	.word	0x40004c00
 8007c18:	40005000 	.word	0x40005000
 8007c1c:	2320      	movs	r3, #32
 8007c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c22:	e131      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007c24:	2340      	movs	r3, #64	; 0x40
 8007c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c2a:	e12d      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007c2c:	2380      	movs	r3, #128	; 0x80
 8007c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c32:	bf00      	nop
 8007c34:	e128      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4ab6      	ldr	r2, [pc, #728]	; (8007f14 <UART_SetConfig+0x65c>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d178      	bne.n	8007d32 <UART_SetConfig+0x47a>
 8007c40:	4bb5      	ldr	r3, [pc, #724]	; (8007f18 <UART_SetConfig+0x660>)
 8007c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c48:	2b28      	cmp	r3, #40	; 0x28
 8007c4a:	d86d      	bhi.n	8007d28 <UART_SetConfig+0x470>
 8007c4c:	a201      	add	r2, pc, #4	; (adr r2, 8007c54 <UART_SetConfig+0x39c>)
 8007c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c52:	bf00      	nop
 8007c54:	08007cf9 	.word	0x08007cf9
 8007c58:	08007d29 	.word	0x08007d29
 8007c5c:	08007d29 	.word	0x08007d29
 8007c60:	08007d29 	.word	0x08007d29
 8007c64:	08007d29 	.word	0x08007d29
 8007c68:	08007d29 	.word	0x08007d29
 8007c6c:	08007d29 	.word	0x08007d29
 8007c70:	08007d29 	.word	0x08007d29
 8007c74:	08007d01 	.word	0x08007d01
 8007c78:	08007d29 	.word	0x08007d29
 8007c7c:	08007d29 	.word	0x08007d29
 8007c80:	08007d29 	.word	0x08007d29
 8007c84:	08007d29 	.word	0x08007d29
 8007c88:	08007d29 	.word	0x08007d29
 8007c8c:	08007d29 	.word	0x08007d29
 8007c90:	08007d29 	.word	0x08007d29
 8007c94:	08007d09 	.word	0x08007d09
 8007c98:	08007d29 	.word	0x08007d29
 8007c9c:	08007d29 	.word	0x08007d29
 8007ca0:	08007d29 	.word	0x08007d29
 8007ca4:	08007d29 	.word	0x08007d29
 8007ca8:	08007d29 	.word	0x08007d29
 8007cac:	08007d29 	.word	0x08007d29
 8007cb0:	08007d29 	.word	0x08007d29
 8007cb4:	08007d11 	.word	0x08007d11
 8007cb8:	08007d29 	.word	0x08007d29
 8007cbc:	08007d29 	.word	0x08007d29
 8007cc0:	08007d29 	.word	0x08007d29
 8007cc4:	08007d29 	.word	0x08007d29
 8007cc8:	08007d29 	.word	0x08007d29
 8007ccc:	08007d29 	.word	0x08007d29
 8007cd0:	08007d29 	.word	0x08007d29
 8007cd4:	08007d19 	.word	0x08007d19
 8007cd8:	08007d29 	.word	0x08007d29
 8007cdc:	08007d29 	.word	0x08007d29
 8007ce0:	08007d29 	.word	0x08007d29
 8007ce4:	08007d29 	.word	0x08007d29
 8007ce8:	08007d29 	.word	0x08007d29
 8007cec:	08007d29 	.word	0x08007d29
 8007cf0:	08007d29 	.word	0x08007d29
 8007cf4:	08007d21 	.word	0x08007d21
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cfe:	e0c3      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007d00:	2304      	movs	r3, #4
 8007d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d06:	e0bf      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007d08:	2308      	movs	r3, #8
 8007d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d0e:	e0bb      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007d10:	2310      	movs	r3, #16
 8007d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d16:	e0b7      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007d18:	2320      	movs	r3, #32
 8007d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d1e:	e0b3      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007d20:	2340      	movs	r3, #64	; 0x40
 8007d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d26:	e0af      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007d28:	2380      	movs	r3, #128	; 0x80
 8007d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d2e:	bf00      	nop
 8007d30:	e0aa      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a79      	ldr	r2, [pc, #484]	; (8007f1c <UART_SetConfig+0x664>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d132      	bne.n	8007da2 <UART_SetConfig+0x4ea>
 8007d3c:	4b76      	ldr	r3, [pc, #472]	; (8007f18 <UART_SetConfig+0x660>)
 8007d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d40:	f003 0307 	and.w	r3, r3, #7
 8007d44:	2b05      	cmp	r3, #5
 8007d46:	d827      	bhi.n	8007d98 <UART_SetConfig+0x4e0>
 8007d48:	a201      	add	r2, pc, #4	; (adr r2, 8007d50 <UART_SetConfig+0x498>)
 8007d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4e:	bf00      	nop
 8007d50:	08007d69 	.word	0x08007d69
 8007d54:	08007d71 	.word	0x08007d71
 8007d58:	08007d79 	.word	0x08007d79
 8007d5c:	08007d81 	.word	0x08007d81
 8007d60:	08007d89 	.word	0x08007d89
 8007d64:	08007d91 	.word	0x08007d91
 8007d68:	2300      	movs	r3, #0
 8007d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d6e:	e08b      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007d70:	2304      	movs	r3, #4
 8007d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d76:	e087      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007d78:	2308      	movs	r3, #8
 8007d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d7e:	e083      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007d80:	2310      	movs	r3, #16
 8007d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d86:	e07f      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007d88:	2320      	movs	r3, #32
 8007d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d8e:	e07b      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007d90:	2340      	movs	r3, #64	; 0x40
 8007d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d96:	e077      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007d98:	2380      	movs	r3, #128	; 0x80
 8007d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d9e:	bf00      	nop
 8007da0:	e072      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a5e      	ldr	r2, [pc, #376]	; (8007f20 <UART_SetConfig+0x668>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d132      	bne.n	8007e12 <UART_SetConfig+0x55a>
 8007dac:	4b5a      	ldr	r3, [pc, #360]	; (8007f18 <UART_SetConfig+0x660>)
 8007dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db0:	f003 0307 	and.w	r3, r3, #7
 8007db4:	2b05      	cmp	r3, #5
 8007db6:	d827      	bhi.n	8007e08 <UART_SetConfig+0x550>
 8007db8:	a201      	add	r2, pc, #4	; (adr r2, 8007dc0 <UART_SetConfig+0x508>)
 8007dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dbe:	bf00      	nop
 8007dc0:	08007dd9 	.word	0x08007dd9
 8007dc4:	08007de1 	.word	0x08007de1
 8007dc8:	08007de9 	.word	0x08007de9
 8007dcc:	08007df1 	.word	0x08007df1
 8007dd0:	08007df9 	.word	0x08007df9
 8007dd4:	08007e01 	.word	0x08007e01
 8007dd8:	2300      	movs	r3, #0
 8007dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dde:	e053      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007de0:	2304      	movs	r3, #4
 8007de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007de6:	e04f      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007de8:	2308      	movs	r3, #8
 8007dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dee:	e04b      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007df0:	2310      	movs	r3, #16
 8007df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007df6:	e047      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007df8:	2320      	movs	r3, #32
 8007dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dfe:	e043      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007e00:	2340      	movs	r3, #64	; 0x40
 8007e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e06:	e03f      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007e08:	2380      	movs	r3, #128	; 0x80
 8007e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e0e:	bf00      	nop
 8007e10:	e03a      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a43      	ldr	r2, [pc, #268]	; (8007f24 <UART_SetConfig+0x66c>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d132      	bne.n	8007e82 <UART_SetConfig+0x5ca>
 8007e1c:	4b3e      	ldr	r3, [pc, #248]	; (8007f18 <UART_SetConfig+0x660>)
 8007e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e20:	f003 0307 	and.w	r3, r3, #7
 8007e24:	2b05      	cmp	r3, #5
 8007e26:	d827      	bhi.n	8007e78 <UART_SetConfig+0x5c0>
 8007e28:	a201      	add	r2, pc, #4	; (adr r2, 8007e30 <UART_SetConfig+0x578>)
 8007e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2e:	bf00      	nop
 8007e30:	08007e49 	.word	0x08007e49
 8007e34:	08007e51 	.word	0x08007e51
 8007e38:	08007e59 	.word	0x08007e59
 8007e3c:	08007e61 	.word	0x08007e61
 8007e40:	08007e69 	.word	0x08007e69
 8007e44:	08007e71 	.word	0x08007e71
 8007e48:	2302      	movs	r3, #2
 8007e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e4e:	e01b      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007e50:	2304      	movs	r3, #4
 8007e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e56:	e017      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007e58:	2308      	movs	r3, #8
 8007e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e5e:	e013      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007e60:	2310      	movs	r3, #16
 8007e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e66:	e00f      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007e68:	2320      	movs	r3, #32
 8007e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e6e:	e00b      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007e70:	2340      	movs	r3, #64	; 0x40
 8007e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e76:	e007      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007e78:	2380      	movs	r3, #128	; 0x80
 8007e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e7e:	bf00      	nop
 8007e80:	e002      	b.n	8007e88 <UART_SetConfig+0x5d0>
 8007e82:	2380      	movs	r3, #128	; 0x80
 8007e84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a25      	ldr	r2, [pc, #148]	; (8007f24 <UART_SetConfig+0x66c>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	f040 80b8 	bne.w	8008004 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007e98:	2b08      	cmp	r3, #8
 8007e9a:	d019      	beq.n	8007ed0 <UART_SetConfig+0x618>
 8007e9c:	2b08      	cmp	r3, #8
 8007e9e:	dc04      	bgt.n	8007eaa <UART_SetConfig+0x5f2>
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	d009      	beq.n	8007eb8 <UART_SetConfig+0x600>
 8007ea4:	2b04      	cmp	r3, #4
 8007ea6:	d00b      	beq.n	8007ec0 <UART_SetConfig+0x608>
 8007ea8:	e042      	b.n	8007f30 <UART_SetConfig+0x678>
 8007eaa:	2b20      	cmp	r3, #32
 8007eac:	d02b      	beq.n	8007f06 <UART_SetConfig+0x64e>
 8007eae:	2b40      	cmp	r3, #64	; 0x40
 8007eb0:	d02c      	beq.n	8007f0c <UART_SetConfig+0x654>
 8007eb2:	2b10      	cmp	r3, #16
 8007eb4:	d014      	beq.n	8007ee0 <UART_SetConfig+0x628>
 8007eb6:	e03b      	b.n	8007f30 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007eb8:	f7fd ff7a 	bl	8005db0 <HAL_RCCEx_GetD3PCLK1Freq>
 8007ebc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007ebe:	e03d      	b.n	8007f3c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ec0:	f107 0314 	add.w	r3, r7, #20
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7fd ff89 	bl	8005ddc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ece:	e035      	b.n	8007f3c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ed0:	f107 0308 	add.w	r3, r7, #8
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7fe f8cd 	bl	8006074 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ede:	e02d      	b.n	8007f3c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ee0:	4b0d      	ldr	r3, [pc, #52]	; (8007f18 <UART_SetConfig+0x660>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 0320 	and.w	r3, r3, #32
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d009      	beq.n	8007f00 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007eec:	4b0a      	ldr	r3, [pc, #40]	; (8007f18 <UART_SetConfig+0x660>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	08db      	lsrs	r3, r3, #3
 8007ef2:	f003 0303 	and.w	r3, r3, #3
 8007ef6:	4a0c      	ldr	r2, [pc, #48]	; (8007f28 <UART_SetConfig+0x670>)
 8007ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8007efc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007efe:	e01d      	b.n	8007f3c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8007f00:	4b09      	ldr	r3, [pc, #36]	; (8007f28 <UART_SetConfig+0x670>)
 8007f02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f04:	e01a      	b.n	8007f3c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f06:	4b09      	ldr	r3, [pc, #36]	; (8007f2c <UART_SetConfig+0x674>)
 8007f08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f0a:	e017      	b.n	8007f3c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f12:	e013      	b.n	8007f3c <UART_SetConfig+0x684>
 8007f14:	40011400 	.word	0x40011400
 8007f18:	58024400 	.word	0x58024400
 8007f1c:	40007800 	.word	0x40007800
 8007f20:	40007c00 	.word	0x40007c00
 8007f24:	58000c00 	.word	0x58000c00
 8007f28:	03d09000 	.word	0x03d09000
 8007f2c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8007f30:	2300      	movs	r3, #0
 8007f32:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007f3a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f000 824d 	beq.w	80083de <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f48:	4aad      	ldr	r2, [pc, #692]	; (8008200 <UART_SetConfig+0x948>)
 8007f4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f52:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f56:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	005b      	lsls	r3, r3, #1
 8007f60:	4413      	add	r3, r2
 8007f62:	6a3a      	ldr	r2, [r7, #32]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d305      	bcc.n	8007f74 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f6e:	6a3a      	ldr	r2, [r7, #32]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d903      	bls.n	8007f7c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007f7a:	e230      	b.n	80083de <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f04f 0100 	mov.w	r1, #0
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f88:	4a9d      	ldr	r2, [pc, #628]	; (8008200 <UART_SetConfig+0x948>)
 8007f8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	f04f 0400 	mov.w	r4, #0
 8007f94:	461a      	mov	r2, r3
 8007f96:	4623      	mov	r3, r4
 8007f98:	f7f8 f9fa 	bl	8000390 <__aeabi_uldivmod>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	460c      	mov	r4, r1
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	4622      	mov	r2, r4
 8007fa4:	f04f 0300 	mov.w	r3, #0
 8007fa8:	f04f 0400 	mov.w	r4, #0
 8007fac:	0214      	lsls	r4, r2, #8
 8007fae:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007fb2:	020b      	lsls	r3, r1, #8
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	6852      	ldr	r2, [r2, #4]
 8007fb8:	0852      	lsrs	r2, r2, #1
 8007fba:	4611      	mov	r1, r2
 8007fbc:	f04f 0200 	mov.w	r2, #0
 8007fc0:	eb13 0b01 	adds.w	fp, r3, r1
 8007fc4:	eb44 0c02 	adc.w	ip, r4, r2
 8007fc8:	4658      	mov	r0, fp
 8007fca:	4661      	mov	r1, ip
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	f04f 0400 	mov.w	r4, #0
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	4623      	mov	r3, r4
 8007fd8:	f7f8 f9da 	bl	8000390 <__aeabi_uldivmod>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	460c      	mov	r4, r1
 8007fe0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fe8:	d308      	bcc.n	8007ffc <UART_SetConfig+0x744>
 8007fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ff0:	d204      	bcs.n	8007ffc <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ff8:	60da      	str	r2, [r3, #12]
 8007ffa:	e1f0      	b.n	80083de <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008002:	e1ec      	b.n	80083de <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	69db      	ldr	r3, [r3, #28]
 8008008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800800c:	f040 8100 	bne.w	8008210 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8008010:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008014:	2b40      	cmp	r3, #64	; 0x40
 8008016:	f200 80b7 	bhi.w	8008188 <UART_SetConfig+0x8d0>
 800801a:	a201      	add	r2, pc, #4	; (adr r2, 8008020 <UART_SetConfig+0x768>)
 800801c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008020:	08008125 	.word	0x08008125
 8008024:	0800812d 	.word	0x0800812d
 8008028:	08008189 	.word	0x08008189
 800802c:	08008189 	.word	0x08008189
 8008030:	08008135 	.word	0x08008135
 8008034:	08008189 	.word	0x08008189
 8008038:	08008189 	.word	0x08008189
 800803c:	08008189 	.word	0x08008189
 8008040:	08008145 	.word	0x08008145
 8008044:	08008189 	.word	0x08008189
 8008048:	08008189 	.word	0x08008189
 800804c:	08008189 	.word	0x08008189
 8008050:	08008189 	.word	0x08008189
 8008054:	08008189 	.word	0x08008189
 8008058:	08008189 	.word	0x08008189
 800805c:	08008189 	.word	0x08008189
 8008060:	08008155 	.word	0x08008155
 8008064:	08008189 	.word	0x08008189
 8008068:	08008189 	.word	0x08008189
 800806c:	08008189 	.word	0x08008189
 8008070:	08008189 	.word	0x08008189
 8008074:	08008189 	.word	0x08008189
 8008078:	08008189 	.word	0x08008189
 800807c:	08008189 	.word	0x08008189
 8008080:	08008189 	.word	0x08008189
 8008084:	08008189 	.word	0x08008189
 8008088:	08008189 	.word	0x08008189
 800808c:	08008189 	.word	0x08008189
 8008090:	08008189 	.word	0x08008189
 8008094:	08008189 	.word	0x08008189
 8008098:	08008189 	.word	0x08008189
 800809c:	08008189 	.word	0x08008189
 80080a0:	0800817b 	.word	0x0800817b
 80080a4:	08008189 	.word	0x08008189
 80080a8:	08008189 	.word	0x08008189
 80080ac:	08008189 	.word	0x08008189
 80080b0:	08008189 	.word	0x08008189
 80080b4:	08008189 	.word	0x08008189
 80080b8:	08008189 	.word	0x08008189
 80080bc:	08008189 	.word	0x08008189
 80080c0:	08008189 	.word	0x08008189
 80080c4:	08008189 	.word	0x08008189
 80080c8:	08008189 	.word	0x08008189
 80080cc:	08008189 	.word	0x08008189
 80080d0:	08008189 	.word	0x08008189
 80080d4:	08008189 	.word	0x08008189
 80080d8:	08008189 	.word	0x08008189
 80080dc:	08008189 	.word	0x08008189
 80080e0:	08008189 	.word	0x08008189
 80080e4:	08008189 	.word	0x08008189
 80080e8:	08008189 	.word	0x08008189
 80080ec:	08008189 	.word	0x08008189
 80080f0:	08008189 	.word	0x08008189
 80080f4:	08008189 	.word	0x08008189
 80080f8:	08008189 	.word	0x08008189
 80080fc:	08008189 	.word	0x08008189
 8008100:	08008189 	.word	0x08008189
 8008104:	08008189 	.word	0x08008189
 8008108:	08008189 	.word	0x08008189
 800810c:	08008189 	.word	0x08008189
 8008110:	08008189 	.word	0x08008189
 8008114:	08008189 	.word	0x08008189
 8008118:	08008189 	.word	0x08008189
 800811c:	08008189 	.word	0x08008189
 8008120:	08008181 	.word	0x08008181
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008124:	f7fc ff2a 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 8008128:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800812a:	e033      	b.n	8008194 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800812c:	f7fc ff3c 	bl	8004fa8 <HAL_RCC_GetPCLK2Freq>
 8008130:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008132:	e02f      	b.n	8008194 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008134:	f107 0314 	add.w	r3, r7, #20
 8008138:	4618      	mov	r0, r3
 800813a:	f7fd fe4f 	bl	8005ddc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008142:	e027      	b.n	8008194 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008144:	f107 0308 	add.w	r3, r7, #8
 8008148:	4618      	mov	r0, r3
 800814a:	f7fd ff93 	bl	8006074 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008152:	e01f      	b.n	8008194 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008154:	4b2b      	ldr	r3, [pc, #172]	; (8008204 <UART_SetConfig+0x94c>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 0320 	and.w	r3, r3, #32
 800815c:	2b00      	cmp	r3, #0
 800815e:	d009      	beq.n	8008174 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008160:	4b28      	ldr	r3, [pc, #160]	; (8008204 <UART_SetConfig+0x94c>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	08db      	lsrs	r3, r3, #3
 8008166:	f003 0303 	and.w	r3, r3, #3
 800816a:	4a27      	ldr	r2, [pc, #156]	; (8008208 <UART_SetConfig+0x950>)
 800816c:	fa22 f303 	lsr.w	r3, r2, r3
 8008170:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008172:	e00f      	b.n	8008194 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8008174:	4b24      	ldr	r3, [pc, #144]	; (8008208 <UART_SetConfig+0x950>)
 8008176:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008178:	e00c      	b.n	8008194 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800817a:	4b24      	ldr	r3, [pc, #144]	; (800820c <UART_SetConfig+0x954>)
 800817c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800817e:	e009      	b.n	8008194 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008180:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008184:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008186:	e005      	b.n	8008194 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8008188:	2300      	movs	r3, #0
 800818a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008192:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008196:	2b00      	cmp	r3, #0
 8008198:	f000 8121 	beq.w	80083de <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a0:	4a17      	ldr	r2, [pc, #92]	; (8008200 <UART_SetConfig+0x948>)
 80081a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081a6:	461a      	mov	r2, r3
 80081a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80081ae:	005a      	lsls	r2, r3, #1
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	085b      	lsrs	r3, r3, #1
 80081b6:	441a      	add	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c6:	2b0f      	cmp	r3, #15
 80081c8:	d916      	bls.n	80081f8 <UART_SetConfig+0x940>
 80081ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081d0:	d212      	bcs.n	80081f8 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	f023 030f 	bic.w	r3, r3, #15
 80081da:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081de:	085b      	lsrs	r3, r3, #1
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	f003 0307 	and.w	r3, r3, #7
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081ea:	4313      	orrs	r3, r2
 80081ec:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80081f4:	60da      	str	r2, [r3, #12]
 80081f6:	e0f2      	b.n	80083de <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80081fe:	e0ee      	b.n	80083de <UART_SetConfig+0xb26>
 8008200:	0800c608 	.word	0x0800c608
 8008204:	58024400 	.word	0x58024400
 8008208:	03d09000 	.word	0x03d09000
 800820c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8008210:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008214:	2b40      	cmp	r3, #64	; 0x40
 8008216:	f200 80b7 	bhi.w	8008388 <UART_SetConfig+0xad0>
 800821a:	a201      	add	r2, pc, #4	; (adr r2, 8008220 <UART_SetConfig+0x968>)
 800821c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008220:	08008325 	.word	0x08008325
 8008224:	0800832d 	.word	0x0800832d
 8008228:	08008389 	.word	0x08008389
 800822c:	08008389 	.word	0x08008389
 8008230:	08008335 	.word	0x08008335
 8008234:	08008389 	.word	0x08008389
 8008238:	08008389 	.word	0x08008389
 800823c:	08008389 	.word	0x08008389
 8008240:	08008345 	.word	0x08008345
 8008244:	08008389 	.word	0x08008389
 8008248:	08008389 	.word	0x08008389
 800824c:	08008389 	.word	0x08008389
 8008250:	08008389 	.word	0x08008389
 8008254:	08008389 	.word	0x08008389
 8008258:	08008389 	.word	0x08008389
 800825c:	08008389 	.word	0x08008389
 8008260:	08008355 	.word	0x08008355
 8008264:	08008389 	.word	0x08008389
 8008268:	08008389 	.word	0x08008389
 800826c:	08008389 	.word	0x08008389
 8008270:	08008389 	.word	0x08008389
 8008274:	08008389 	.word	0x08008389
 8008278:	08008389 	.word	0x08008389
 800827c:	08008389 	.word	0x08008389
 8008280:	08008389 	.word	0x08008389
 8008284:	08008389 	.word	0x08008389
 8008288:	08008389 	.word	0x08008389
 800828c:	08008389 	.word	0x08008389
 8008290:	08008389 	.word	0x08008389
 8008294:	08008389 	.word	0x08008389
 8008298:	08008389 	.word	0x08008389
 800829c:	08008389 	.word	0x08008389
 80082a0:	0800837b 	.word	0x0800837b
 80082a4:	08008389 	.word	0x08008389
 80082a8:	08008389 	.word	0x08008389
 80082ac:	08008389 	.word	0x08008389
 80082b0:	08008389 	.word	0x08008389
 80082b4:	08008389 	.word	0x08008389
 80082b8:	08008389 	.word	0x08008389
 80082bc:	08008389 	.word	0x08008389
 80082c0:	08008389 	.word	0x08008389
 80082c4:	08008389 	.word	0x08008389
 80082c8:	08008389 	.word	0x08008389
 80082cc:	08008389 	.word	0x08008389
 80082d0:	08008389 	.word	0x08008389
 80082d4:	08008389 	.word	0x08008389
 80082d8:	08008389 	.word	0x08008389
 80082dc:	08008389 	.word	0x08008389
 80082e0:	08008389 	.word	0x08008389
 80082e4:	08008389 	.word	0x08008389
 80082e8:	08008389 	.word	0x08008389
 80082ec:	08008389 	.word	0x08008389
 80082f0:	08008389 	.word	0x08008389
 80082f4:	08008389 	.word	0x08008389
 80082f8:	08008389 	.word	0x08008389
 80082fc:	08008389 	.word	0x08008389
 8008300:	08008389 	.word	0x08008389
 8008304:	08008389 	.word	0x08008389
 8008308:	08008389 	.word	0x08008389
 800830c:	08008389 	.word	0x08008389
 8008310:	08008389 	.word	0x08008389
 8008314:	08008389 	.word	0x08008389
 8008318:	08008389 	.word	0x08008389
 800831c:	08008389 	.word	0x08008389
 8008320:	08008381 	.word	0x08008381
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008324:	f7fc fe2a 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 8008328:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800832a:	e033      	b.n	8008394 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800832c:	f7fc fe3c 	bl	8004fa8 <HAL_RCC_GetPCLK2Freq>
 8008330:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008332:	e02f      	b.n	8008394 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008334:	f107 0314 	add.w	r3, r7, #20
 8008338:	4618      	mov	r0, r3
 800833a:	f7fd fd4f 	bl	8005ddc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008342:	e027      	b.n	8008394 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008344:	f107 0308 	add.w	r3, r7, #8
 8008348:	4618      	mov	r0, r3
 800834a:	f7fd fe93 	bl	8006074 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008352:	e01f      	b.n	8008394 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008354:	4b2c      	ldr	r3, [pc, #176]	; (8008408 <UART_SetConfig+0xb50>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 0320 	and.w	r3, r3, #32
 800835c:	2b00      	cmp	r3, #0
 800835e:	d009      	beq.n	8008374 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008360:	4b29      	ldr	r3, [pc, #164]	; (8008408 <UART_SetConfig+0xb50>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	08db      	lsrs	r3, r3, #3
 8008366:	f003 0303 	and.w	r3, r3, #3
 800836a:	4a28      	ldr	r2, [pc, #160]	; (800840c <UART_SetConfig+0xb54>)
 800836c:	fa22 f303 	lsr.w	r3, r2, r3
 8008370:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008372:	e00f      	b.n	8008394 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8008374:	4b25      	ldr	r3, [pc, #148]	; (800840c <UART_SetConfig+0xb54>)
 8008376:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008378:	e00c      	b.n	8008394 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800837a:	4b25      	ldr	r3, [pc, #148]	; (8008410 <UART_SetConfig+0xb58>)
 800837c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800837e:	e009      	b.n	8008394 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008380:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008384:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008386:	e005      	b.n	8008394 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8008388:	2300      	movs	r3, #0
 800838a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008392:	bf00      	nop
    }

    if (pclk != 0U)
 8008394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008396:	2b00      	cmp	r3, #0
 8008398:	d021      	beq.n	80083de <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839e:	4a1d      	ldr	r2, [pc, #116]	; (8008414 <UART_SetConfig+0xb5c>)
 80083a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083a4:	461a      	mov	r2, r3
 80083a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	085b      	lsrs	r3, r3, #1
 80083b2:	441a      	add	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80083bc:	b29b      	uxth	r3, r3
 80083be:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c2:	2b0f      	cmp	r3, #15
 80083c4:	d908      	bls.n	80083d8 <UART_SetConfig+0xb20>
 80083c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083cc:	d204      	bcs.n	80083d8 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083d4:	60da      	str	r2, [r3, #12]
 80083d6:	e002      	b.n	80083de <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2201      	movs	r2, #1
 80083e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2201      	movs	r2, #1
 80083ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80083fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3738      	adds	r7, #56	; 0x38
 8008402:	46bd      	mov	sp, r7
 8008404:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8008408:	58024400 	.word	0x58024400
 800840c:	03d09000 	.word	0x03d09000
 8008410:	003d0900 	.word	0x003d0900
 8008414:	0800c608 	.word	0x0800c608

08008418 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008424:	f003 0301 	and.w	r3, r3, #1
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00a      	beq.n	8008442 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	430a      	orrs	r2, r1
 8008440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008446:	f003 0302 	and.w	r3, r3, #2
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00a      	beq.n	8008464 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	430a      	orrs	r2, r1
 8008462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008468:	f003 0304 	and.w	r3, r3, #4
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00a      	beq.n	8008486 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	430a      	orrs	r2, r1
 8008484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800848a:	f003 0308 	and.w	r3, r3, #8
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00a      	beq.n	80084a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	430a      	orrs	r2, r1
 80084a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ac:	f003 0310 	and.w	r3, r3, #16
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00a      	beq.n	80084ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	430a      	orrs	r2, r1
 80084c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ce:	f003 0320 	and.w	r3, r3, #32
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00a      	beq.n	80084ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	430a      	orrs	r2, r1
 80084ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d01a      	beq.n	800852e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	430a      	orrs	r2, r1
 800850c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008512:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008516:	d10a      	bne.n	800852e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	430a      	orrs	r2, r1
 800852c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00a      	beq.n	8008550 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	430a      	orrs	r2, r1
 800854e:	605a      	str	r2, [r3, #4]
  }
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b086      	sub	sp, #24
 8008560:	af02      	add	r7, sp, #8
 8008562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800856c:	f7f8 ff28 	bl	80013c0 <HAL_GetTick>
 8008570:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 0308 	and.w	r3, r3, #8
 800857c:	2b08      	cmp	r3, #8
 800857e:	d10e      	bne.n	800859e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008580:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f82c 	bl	80085ec <UART_WaitOnFlagUntilTimeout>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d001      	beq.n	800859e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e022      	b.n	80085e4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 0304 	and.w	r3, r3, #4
 80085a8:	2b04      	cmp	r3, #4
 80085aa:	d10e      	bne.n	80085ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f816 	bl	80085ec <UART_WaitOnFlagUntilTimeout>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e00c      	b.n	80085e4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2220      	movs	r2, #32
 80085ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2220      	movs	r2, #32
 80085d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	603b      	str	r3, [r7, #0]
 80085f8:	4613      	mov	r3, r2
 80085fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085fc:	e062      	b.n	80086c4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008604:	d05e      	beq.n	80086c4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008606:	f7f8 fedb 	bl	80013c0 <HAL_GetTick>
 800860a:	4602      	mov	r2, r0
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	1ad3      	subs	r3, r2, r3
 8008610:	69ba      	ldr	r2, [r7, #24]
 8008612:	429a      	cmp	r2, r3
 8008614:	d302      	bcc.n	800861c <UART_WaitOnFlagUntilTimeout+0x30>
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d11d      	bne.n	8008658 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800862a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	689a      	ldr	r2, [r3, #8]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f022 0201 	bic.w	r2, r2, #1
 800863a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2220      	movs	r2, #32
 8008640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2220      	movs	r2, #32
 8008648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008654:	2303      	movs	r3, #3
 8008656:	e045      	b.n	80086e4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f003 0304 	and.w	r3, r3, #4
 8008662:	2b00      	cmp	r3, #0
 8008664:	d02e      	beq.n	80086c4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	69db      	ldr	r3, [r3, #28]
 800866c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008674:	d126      	bne.n	80086c4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800867e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800868e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	689a      	ldr	r2, [r3, #8]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f022 0201 	bic.w	r2, r2, #1
 800869e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2220      	movs	r2, #32
 80086a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2220      	movs	r2, #32
 80086ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2220      	movs	r2, #32
 80086b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80086c0:	2303      	movs	r3, #3
 80086c2:	e00f      	b.n	80086e4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	69da      	ldr	r2, [r3, #28]
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	4013      	ands	r3, r2
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	bf0c      	ite	eq
 80086d4:	2301      	moveq	r3, #1
 80086d6:	2300      	movne	r3, #0
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	461a      	mov	r2, r3
 80086dc:	79fb      	ldrb	r3, [r7, #7]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d08d      	beq.n	80085fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d101      	bne.n	8008702 <HAL_UARTEx_DisableFifoMode+0x16>
 80086fe:	2302      	movs	r3, #2
 8008700:	e027      	b.n	8008752 <HAL_UARTEx_DisableFifoMode+0x66>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2201      	movs	r2, #1
 8008706:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2224      	movs	r2, #36	; 0x24
 800870e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f022 0201 	bic.w	r2, r2, #1
 8008728:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008730:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2220      	movs	r2, #32
 8008744:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3714      	adds	r7, #20
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b084      	sub	sp, #16
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800876e:	2b01      	cmp	r3, #1
 8008770:	d101      	bne.n	8008776 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008772:	2302      	movs	r3, #2
 8008774:	e02d      	b.n	80087d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2224      	movs	r2, #36	; 0x24
 8008782:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f022 0201 	bic.w	r2, r2, #1
 800879c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	683a      	ldr	r2, [r7, #0]
 80087ae:	430a      	orrs	r2, r1
 80087b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f850 	bl	8008858 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2220      	movs	r2, #32
 80087c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b084      	sub	sp, #16
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d101      	bne.n	80087f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80087ee:	2302      	movs	r3, #2
 80087f0:	e02d      	b.n	800884e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2201      	movs	r2, #1
 80087f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2224      	movs	r2, #36	; 0x24
 80087fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f022 0201 	bic.w	r2, r2, #1
 8008818:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	683a      	ldr	r2, [r7, #0]
 800882a:	430a      	orrs	r2, r1
 800882c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f812 	bl	8008858 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2220      	movs	r2, #32
 8008840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
	...

08008858 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008858:	b480      	push	{r7}
 800885a:	b089      	sub	sp, #36	; 0x24
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008860:	4a2f      	ldr	r2, [pc, #188]	; (8008920 <UARTEx_SetNbDataToProcess+0xc8>)
 8008862:	f107 0314 	add.w	r3, r7, #20
 8008866:	e892 0003 	ldmia.w	r2, {r0, r1}
 800886a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800886e:	4a2d      	ldr	r2, [pc, #180]	; (8008924 <UARTEx_SetNbDataToProcess+0xcc>)
 8008870:	f107 030c 	add.w	r3, r7, #12
 8008874:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008878:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008880:	2b00      	cmp	r3, #0
 8008882:	d108      	bne.n	8008896 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008894:	e03d      	b.n	8008912 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008896:	2310      	movs	r3, #16
 8008898:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800889a:	2310      	movs	r3, #16
 800889c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	0e5b      	lsrs	r3, r3, #25
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	f003 0307 	and.w	r3, r3, #7
 80088ac:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	0f5b      	lsrs	r3, r3, #29
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	f003 0307 	and.w	r3, r3, #7
 80088bc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80088be:	7fbb      	ldrb	r3, [r7, #30]
 80088c0:	7f3a      	ldrb	r2, [r7, #28]
 80088c2:	f107 0120 	add.w	r1, r7, #32
 80088c6:	440a      	add	r2, r1
 80088c8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80088cc:	fb02 f303 	mul.w	r3, r2, r3
 80088d0:	7f3a      	ldrb	r2, [r7, #28]
 80088d2:	f107 0120 	add.w	r1, r7, #32
 80088d6:	440a      	add	r2, r1
 80088d8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80088dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80088e8:	7ffb      	ldrb	r3, [r7, #31]
 80088ea:	7f7a      	ldrb	r2, [r7, #29]
 80088ec:	f107 0120 	add.w	r1, r7, #32
 80088f0:	440a      	add	r2, r1
 80088f2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80088f6:	fb02 f303 	mul.w	r3, r2, r3
 80088fa:	7f7a      	ldrb	r2, [r7, #29]
 80088fc:	f107 0120 	add.w	r1, r7, #32
 8008900:	440a      	add	r2, r1
 8008902:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008906:	fb93 f3f2 	sdiv	r3, r3, r2
 800890a:	b29a      	uxth	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008912:	bf00      	nop
 8008914:	3724      	adds	r7, #36	; 0x24
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	0800c59c 	.word	0x0800c59c
 8008924:	0800c5a4 	.word	0x0800c5a4

08008928 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800892c:	4904      	ldr	r1, [pc, #16]	; (8008940 <MX_FATFS_Init+0x18>)
 800892e:	4805      	ldr	r0, [pc, #20]	; (8008944 <MX_FATFS_Init+0x1c>)
 8008930:	f003 f934 	bl	800bb9c <FATFS_LinkDriver>
 8008934:	4603      	mov	r3, r0
 8008936:	461a      	mov	r2, r3
 8008938:	4b03      	ldr	r3, [pc, #12]	; (8008948 <MX_FATFS_Init+0x20>)
 800893a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800893c:	bf00      	nop
 800893e:	bd80      	pop	{r7, pc}
 8008940:	24000bec 	.word	0x24000bec
 8008944:	24000010 	.word	0x24000010
 8008948:	24000bf0 	.word	0x24000bf0

0800894c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800894c:	b480      	push	{r7}
 800894e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008950:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008952:	4618      	mov	r0, r3
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	4603      	mov	r3, r0
 8008964:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
    return USER_SPI_initialize(pdrv);
 8008966:	79fb      	ldrb	r3, [r7, #7]
 8008968:	4618      	mov	r0, r3
 800896a:	f000 fa8d 	bl	8008e88 <USER_SPI_initialize>
 800896e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008970:	4618      	mov	r0, r3
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	4603      	mov	r3, r0
 8008980:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
    return USER_SPI_status(pdrv);
 8008982:	79fb      	ldrb	r3, [r7, #7]
 8008984:	4618      	mov	r0, r3
 8008986:	f000 fb5f 	bl	8009048 <USER_SPI_status>
 800898a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800898c:	4618      	mov	r0, r3
 800898e:	3708      	adds	r7, #8
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	60b9      	str	r1, [r7, #8]
 800899c:	607a      	str	r2, [r7, #4]
 800899e:	603b      	str	r3, [r7, #0]
 80089a0:	4603      	mov	r3, r0
 80089a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
    return USER_SPI_read(pdrv, buff, sector, count);
 80089a4:	7bf8      	ldrb	r0, [r7, #15]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	68b9      	ldr	r1, [r7, #8]
 80089ac:	f000 fb62 	bl	8009074 <USER_SPI_read>
 80089b0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b084      	sub	sp, #16
 80089be:	af00      	add	r7, sp, #0
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
 80089c4:	603b      	str	r3, [r7, #0]
 80089c6:	4603      	mov	r3, r0
 80089c8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
    return USER_SPI_write(pdrv, buff, sector, count);
 80089ca:	7bf8      	ldrb	r0, [r7, #15]
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	68b9      	ldr	r1, [r7, #8]
 80089d2:	f000 fbb5 	bl	8009140 <USER_SPI_write>
 80089d6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3710      	adds	r7, #16
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <USER_write_dma>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60b9      	str	r1, [r7, #8]
 80089e8:	607a      	str	r2, [r7, #4]
 80089ea:	603b      	str	r3, [r7, #0]
 80089ec:	4603      	mov	r3, r0
 80089ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
    return USER_SPI_write_dma(pdrv, buff, sector, count);
 80089f0:	7bf8      	ldrb	r0, [r7, #15]
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	68b9      	ldr	r1, [r7, #8]
 80089f8:	f000 fc1e 	bl	8009238 <USER_SPI_write_dma>
 80089fc:	4603      	mov	r3, r0
//    return USER_SPI_write_dma(pdrv, buff, sector, count);
  /* USER CODE END WRITE */
}DRESULT USER_write_dma_start (
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <USER_write_dma_start>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b084      	sub	sp, #16
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
 8008a10:	603b      	str	r3, [r7, #0]
 8008a12:	4603      	mov	r3, r0
 8008a14:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
    return USER_SPI_write_dma_start(pdrv, buff, sector, count);
 8008a16:	7bf8      	ldrb	r0, [r7, #15]
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	68b9      	ldr	r1, [r7, #8]
 8008a1e:	f000 fc57 	bl	80092d0 <USER_SPI_write_dma_start>
 8008a22:	4603      	mov	r3, r0
//    return USER_SPI_write_dma(pdrv, buff, sector, count);
  /* USER CODE END WRITE */
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <USER_write_dma_cplt>:

DRESULT USER_write_dma_cplt (
)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
    return USER_SPI_write_dma_cplt();
 8008a30:	f000 fc98 	bl	8009364 <USER_SPI_write_dma_cplt>
 8008a34:	4603      	mov	r3, r0
//    return USER_SPI_write_dma(pdrv, buff, sector, count);
  /* USER CODE END WRITE */
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b082      	sub	sp, #8
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	4603      	mov	r3, r0
 8008a42:	603a      	str	r2, [r7, #0]
 8008a44:	71fb      	strb	r3, [r7, #7]
 8008a46:	460b      	mov	r3, r1
 8008a48:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8008a4a:	79b9      	ldrb	r1, [r7, #6]
 8008a4c:	79fb      	ldrb	r3, [r7, #7]
 8008a4e:	683a      	ldr	r2, [r7, #0]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f000 fc99 	bl	8009388 <USER_SPI_ioctl>
 8008a56:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3708      	adds	r7, #8
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8008a68:	f7f8 fcaa 	bl	80013c0 <HAL_GetTick>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	4b04      	ldr	r3, [pc, #16]	; (8008a80 <SPI_Timer_On+0x20>)
 8008a70:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8008a72:	4a04      	ldr	r2, [pc, #16]	; (8008a84 <SPI_Timer_On+0x24>)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6013      	str	r3, [r2, #0]
}
 8008a78:	bf00      	nop
 8008a7a:	3708      	adds	r7, #8
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	24001054 	.word	0x24001054
 8008a84:	24001058 	.word	0x24001058

08008a88 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8008a8c:	f7f8 fc98 	bl	80013c0 <HAL_GetTick>
 8008a90:	4602      	mov	r2, r0
 8008a92:	4b06      	ldr	r3, [pc, #24]	; (8008aac <SPI_Timer_Status+0x24>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	1ad2      	subs	r2, r2, r3
 8008a98:	4b05      	ldr	r3, [pc, #20]	; (8008ab0 <SPI_Timer_Status+0x28>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	bf34      	ite	cc
 8008aa0:	2301      	movcc	r3, #1
 8008aa2:	2300      	movcs	r3, #0
 8008aa4:	b2db      	uxtb	r3, r3
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	24001054 	.word	0x24001054
 8008ab0:	24001058 	.word	0x24001058

08008ab4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b086      	sub	sp, #24
 8008ab8:	af02      	add	r7, sp, #8
 8008aba:	4603      	mov	r3, r0
 8008abc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8008abe:	f107 020f 	add.w	r2, r7, #15
 8008ac2:	1df9      	adds	r1, r7, #7
 8008ac4:	2332      	movs	r3, #50	; 0x32
 8008ac6:	9300      	str	r3, [sp, #0]
 8008ac8:	2301      	movs	r3, #1
 8008aca:	4804      	ldr	r0, [pc, #16]	; (8008adc <xchg_spi+0x28>)
 8008acc:	f7fd fe7a 	bl	80067c4 <HAL_SPI_TransmitReceive>
    return rxDat;
 8008ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	240000b4 	.word	0x240000b4

08008ae0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8008ae0:	b590      	push	{r4, r7, lr}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8008aea:	2300      	movs	r3, #0
 8008aec:	60fb      	str	r3, [r7, #12]
 8008aee:	e00a      	b.n	8008b06 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	18d4      	adds	r4, r2, r3
 8008af6:	20ff      	movs	r0, #255	; 0xff
 8008af8:	f7ff ffdc 	bl	8008ab4 <xchg_spi>
 8008afc:	4603      	mov	r3, r0
 8008afe:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	3301      	adds	r3, #1
 8008b04:	60fb      	str	r3, [r7, #12]
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d3f0      	bcc.n	8008af0 <rcvr_spi_multi+0x10>
	}
}
 8008b0e:	bf00      	nop
 8008b10:	3714      	adds	r7, #20
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd90      	pop	{r4, r7, pc}

08008b16 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b084      	sub	sp, #16
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
 8008b1e:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8008b20:	2300      	movs	r3, #0
 8008b22:	60fb      	str	r3, [r7, #12]
 8008b24:	e009      	b.n	8008b3a <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7ff ffc0 	bl	8008ab4 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	3301      	adds	r3, #1
 8008b38:	60fb      	str	r3, [r7, #12]
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d3f1      	bcc.n	8008b26 <xmit_spi_multi+0x10>
	}
}
 8008b42:	bf00      	nop
 8008b44:	3710      	adds	r7, #16
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b086      	sub	sp, #24
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8008b52:	f7f8 fc35 	bl	80013c0 <HAL_GetTick>
 8008b56:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8008b5c:	20ff      	movs	r0, #255	; 0xff
 8008b5e:	f7ff ffa9 	bl	8008ab4 <xchg_spi>
 8008b62:	4603      	mov	r3, r0
 8008b64:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
 8008b68:	2bff      	cmp	r3, #255	; 0xff
 8008b6a:	d007      	beq.n	8008b7c <wait_ready+0x32>
 8008b6c:	f7f8 fc28 	bl	80013c0 <HAL_GetTick>
 8008b70:	4602      	mov	r2, r0
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	693a      	ldr	r2, [r7, #16]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d8ef      	bhi.n	8008b5c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
 8008b7e:	2bff      	cmp	r3, #255	; 0xff
 8008b80:	bf0c      	ite	eq
 8008b82:	2301      	moveq	r3, #1
 8008b84:	2300      	movne	r3, #0
 8008b86:	b2db      	uxtb	r3, r3
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3718      	adds	r7, #24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8008b94:	2201      	movs	r2, #1
 8008b96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008b9a:	4804      	ldr	r0, [pc, #16]	; (8008bac <despiselect+0x1c>)
 8008b9c:	f7fb fa32 	bl	8004004 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8008ba0:	20ff      	movs	r0, #255	; 0xff
 8008ba2:	f7ff ff87 	bl	8008ab4 <xchg_spi>

}
 8008ba6:	bf00      	nop
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	58020800 	.word	0x58020800

08008bb0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008bba:	480a      	ldr	r0, [pc, #40]	; (8008be4 <spiselect+0x34>)
 8008bbc:	f7fb fa22 	bl	8004004 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8008bc0:	20ff      	movs	r0, #255	; 0xff
 8008bc2:	f7ff ff77 	bl	8008ab4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8008bc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008bca:	f7ff ffbe 	bl	8008b4a <wait_ready>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d001      	beq.n	8008bd8 <spiselect+0x28>
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e002      	b.n	8008bde <spiselect+0x2e>

	despiselect();
 8008bd8:	f7ff ffda 	bl	8008b90 <despiselect>
	return 0;	/* Timeout */
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	58020800 	.word	0x58020800

08008be8 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8008bf2:	20c8      	movs	r0, #200	; 0xc8
 8008bf4:	f7ff ff34 	bl	8008a60 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8008bf8:	20ff      	movs	r0, #255	; 0xff
 8008bfa:	f7ff ff5b 	bl	8008ab4 <xchg_spi>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8008c02:	7bfb      	ldrb	r3, [r7, #15]
 8008c04:	2bff      	cmp	r3, #255	; 0xff
 8008c06:	d104      	bne.n	8008c12 <rcvr_datablock+0x2a>
 8008c08:	f7ff ff3e 	bl	8008a88 <SPI_Timer_Status>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d1f2      	bne.n	8008bf8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8008c12:	7bfb      	ldrb	r3, [r7, #15]
 8008c14:	2bfe      	cmp	r3, #254	; 0xfe
 8008c16:	d001      	beq.n	8008c1c <rcvr_datablock+0x34>
 8008c18:	2300      	movs	r3, #0
 8008c1a:	e00a      	b.n	8008c32 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8008c1c:	6839      	ldr	r1, [r7, #0]
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f7ff ff5e 	bl	8008ae0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8008c24:	20ff      	movs	r0, #255	; 0xff
 8008c26:	f7ff ff45 	bl	8008ab4 <xchg_spi>
 8008c2a:	20ff      	movs	r0, #255	; 0xff
 8008c2c:	f7ff ff42 	bl	8008ab4 <xchg_spi>

	return 1;						/* Function succeeded */
 8008c30:	2301      	movs	r3, #1
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b084      	sub	sp, #16
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
 8008c42:	460b      	mov	r3, r1
 8008c44:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008c46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008c4a:	f7ff ff7e 	bl	8008b4a <wait_ready>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d101      	bne.n	8008c58 <xmit_datablock+0x1e>
 8008c54:	2300      	movs	r3, #0
 8008c56:	e01e      	b.n	8008c96 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8008c58:	78fb      	ldrb	r3, [r7, #3]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7ff ff2a 	bl	8008ab4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008c60:	78fb      	ldrb	r3, [r7, #3]
 8008c62:	2bfd      	cmp	r3, #253	; 0xfd
 8008c64:	d016      	beq.n	8008c94 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8008c66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7ff ff53 	bl	8008b16 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008c70:	20ff      	movs	r0, #255	; 0xff
 8008c72:	f7ff ff1f 	bl	8008ab4 <xchg_spi>
 8008c76:	20ff      	movs	r0, #255	; 0xff
 8008c78:	f7ff ff1c 	bl	8008ab4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8008c7c:	20ff      	movs	r0, #255	; 0xff
 8008c7e:	f7ff ff19 	bl	8008ab4 <xchg_spi>
 8008c82:	4603      	mov	r3, r0
 8008c84:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8008c86:	7bfb      	ldrb	r3, [r7, #15]
 8008c88:	f003 031f 	and.w	r3, r3, #31
 8008c8c:	2b05      	cmp	r3, #5
 8008c8e:	d001      	beq.n	8008c94 <xmit_datablock+0x5a>
 8008c90:	2300      	movs	r3, #0
 8008c92:	e000      	b.n	8008c96 <xmit_datablock+0x5c>
	}
	return 1;
 8008c94:	2301      	movs	r3, #1
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
	...

08008ca0 <xmit_data_dma>:
int xmit_data_dma (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	UINT count,			/* Number of sectors to write (1..128) */
	BYTE token			/* Token */
)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b086      	sub	sp, #24
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	4613      	mov	r3, r2
 8008cac:	71fb      	strb	r3, [r7, #7]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008cae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008cb2:	f7ff ff4a 	bl	8008b4a <wait_ready>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d101      	bne.n	8008cc0 <xmit_data_dma+0x20>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	e025      	b.n	8008d0c <xmit_data_dma+0x6c>

	xchg_spi(token);					/* Send token */
 8008cc0:	79fb      	ldrb	r3, [r7, #7]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7ff fef6 	bl	8008ab4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008cc8:	79fb      	ldrb	r3, [r7, #7]
 8008cca:	2bfd      	cmp	r3, #253	; 0xfd
 8008ccc:	d01d      	beq.n	8008d0a <xmit_data_dma+0x6a>
		HAL_SPI_Transmit_DMA(&SD_SPI_HANDLE, buff, count * 512);
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	025b      	lsls	r3, r3, #9
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	68f9      	ldr	r1, [r7, #12]
 8008cda:	480e      	ldr	r0, [pc, #56]	; (8008d14 <xmit_data_dma+0x74>)
 8008cdc:	f7fe f85e 	bl	8006d9c <HAL_SPI_Transmit_DMA>
		HAL_Delay(15);
 8008ce0:	200f      	movs	r0, #15
 8008ce2:	f7f8 fb79 	bl	80013d8 <HAL_Delay>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008ce6:	20ff      	movs	r0, #255	; 0xff
 8008ce8:	f7ff fee4 	bl	8008ab4 <xchg_spi>
 8008cec:	20ff      	movs	r0, #255	; 0xff
 8008cee:	f7ff fee1 	bl	8008ab4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8008cf2:	20ff      	movs	r0, #255	; 0xff
 8008cf4:	f7ff fede 	bl	8008ab4 <xchg_spi>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	75fb      	strb	r3, [r7, #23]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8008cfc:	7dfb      	ldrb	r3, [r7, #23]
 8008cfe:	f003 031f 	and.w	r3, r3, #31
 8008d02:	2b05      	cmp	r3, #5
 8008d04:	d001      	beq.n	8008d0a <xmit_data_dma+0x6a>
 8008d06:	2300      	movs	r3, #0
 8008d08:	e000      	b.n	8008d0c <xmit_data_dma+0x6c>
	}
	return 1;
 8008d0a:	2301      	movs	r3, #1
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3718      	adds	r7, #24
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	240000b4 	.word	0x240000b4

08008d18 <xmit_data_dma_start>:
int xmit_data_dma_start (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	UINT count,			/* Number of sectors to write (1..128) */
	BYTE token			/* Token */
)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b086      	sub	sp, #24
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	4613      	mov	r3, r2
 8008d24:	71fb      	strb	r3, [r7, #7]
	BYTE resp;
	HAL_StatusTypeDef ret;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008d26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008d2a:	f7ff ff0e 	bl	8008b4a <wait_ready>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d101      	bne.n	8008d38 <xmit_data_dma_start+0x20>
 8008d34:	2300      	movs	r3, #0
 8008d36:	e017      	b.n	8008d68 <xmit_data_dma_start+0x50>

	xchg_spi(token);					/* Send token */
 8008d38:	79fb      	ldrb	r3, [r7, #7]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7ff feba 	bl	8008ab4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008d40:	79fb      	ldrb	r3, [r7, #7]
 8008d42:	2bfd      	cmp	r3, #253	; 0xfd
 8008d44:	d00a      	beq.n	8008d5c <xmit_data_dma_start+0x44>
	  ret = HAL_SPI_Transmit_DMA(&SD_SPI_HANDLE, buff, count * 512);
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	025b      	lsls	r3, r3, #9
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	461a      	mov	r2, r3
 8008d50:	68f9      	ldr	r1, [r7, #12]
 8008d52:	4807      	ldr	r0, [pc, #28]	; (8008d70 <xmit_data_dma_start+0x58>)
 8008d54:	f7fe f822 	bl	8006d9c <HAL_SPI_Transmit_DMA>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	75fb      	strb	r3, [r7, #23]
	}
	return ret == HAL_OK ? 1 : 0;
 8008d5c:	7dfb      	ldrb	r3, [r7, #23]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	bf0c      	ite	eq
 8008d62:	2301      	moveq	r3, #1
 8008d64:	2300      	movne	r3, #0
 8008d66:	b2db      	uxtb	r3, r3
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3718      	adds	r7, #24
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	240000b4 	.word	0x240000b4

08008d74 <xmit_data_dma_cplt>:

static
int xmit_data_dma_cplt (	/* 1:OK, 0:Failed */
)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
	BYTE resp;

	xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008d7a:	20ff      	movs	r0, #255	; 0xff
 8008d7c:	f7ff fe9a 	bl	8008ab4 <xchg_spi>
 8008d80:	20ff      	movs	r0, #255	; 0xff
 8008d82:	f7ff fe97 	bl	8008ab4 <xchg_spi>
	resp = xchg_spi(0xFF);				/* Receive data resp */
 8008d86:	20ff      	movs	r0, #255	; 0xff
 8008d88:	f7ff fe94 	bl	8008ab4 <xchg_spi>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	71fb      	strb	r3, [r7, #7]
	if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8008d90:	79fb      	ldrb	r3, [r7, #7]
 8008d92:	f003 031f 	and.w	r3, r3, #31
 8008d96:	2b05      	cmp	r3, #5
 8008d98:	d001      	beq.n	8008d9e <xmit_data_dma_cplt+0x2a>
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	e000      	b.n	8008da0 <xmit_data_dma_cplt+0x2c>
	return 1;
 8008d9e:	2301      	movs	r3, #1
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	4603      	mov	r3, r0
 8008db0:	6039      	str	r1, [r7, #0]
 8008db2:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8008db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	da0e      	bge.n	8008dda <send_cmd+0x32>
		cmd &= 0x7F;
 8008dbc:	79fb      	ldrb	r3, [r7, #7]
 8008dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dc2:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8008dc4:	2100      	movs	r1, #0
 8008dc6:	2037      	movs	r0, #55	; 0x37
 8008dc8:	f7ff ffee 	bl	8008da8 <send_cmd>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8008dd0:	7bbb      	ldrb	r3, [r7, #14]
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d901      	bls.n	8008dda <send_cmd+0x32>
 8008dd6:	7bbb      	ldrb	r3, [r7, #14]
 8008dd8:	e051      	b.n	8008e7e <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8008dda:	79fb      	ldrb	r3, [r7, #7]
 8008ddc:	2b0c      	cmp	r3, #12
 8008dde:	d008      	beq.n	8008df2 <send_cmd+0x4a>
		despiselect();
 8008de0:	f7ff fed6 	bl	8008b90 <despiselect>
		if (!spiselect()) return 0xFF;
 8008de4:	f7ff fee4 	bl	8008bb0 <spiselect>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <send_cmd+0x4a>
 8008dee:	23ff      	movs	r3, #255	; 0xff
 8008df0:	e045      	b.n	8008e7e <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8008df2:	79fb      	ldrb	r3, [r7, #7]
 8008df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7ff fe5a 	bl	8008ab4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	0e1b      	lsrs	r3, r3, #24
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7ff fe54 	bl	8008ab4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	0c1b      	lsrs	r3, r3, #16
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7ff fe4e 	bl	8008ab4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	0a1b      	lsrs	r3, r3, #8
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7ff fe48 	bl	8008ab4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7ff fe43 	bl	8008ab4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8008e2e:	2301      	movs	r3, #1
 8008e30:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8008e32:	79fb      	ldrb	r3, [r7, #7]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d101      	bne.n	8008e3c <send_cmd+0x94>
 8008e38:	2395      	movs	r3, #149	; 0x95
 8008e3a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8008e3c:	79fb      	ldrb	r3, [r7, #7]
 8008e3e:	2b08      	cmp	r3, #8
 8008e40:	d101      	bne.n	8008e46 <send_cmd+0x9e>
 8008e42:	2387      	movs	r3, #135	; 0x87
 8008e44:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8008e46:	7bfb      	ldrb	r3, [r7, #15]
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7ff fe33 	bl	8008ab4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8008e4e:	79fb      	ldrb	r3, [r7, #7]
 8008e50:	2b0c      	cmp	r3, #12
 8008e52:	d102      	bne.n	8008e5a <send_cmd+0xb2>
 8008e54:	20ff      	movs	r0, #255	; 0xff
 8008e56:	f7ff fe2d 	bl	8008ab4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8008e5a:	230a      	movs	r3, #10
 8008e5c:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8008e5e:	20ff      	movs	r0, #255	; 0xff
 8008e60:	f7ff fe28 	bl	8008ab4 <xchg_spi>
 8008e64:	4603      	mov	r3, r0
 8008e66:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8008e68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	da05      	bge.n	8008e7c <send_cmd+0xd4>
 8008e70:	7bfb      	ldrb	r3, [r7, #15]
 8008e72:	3b01      	subs	r3, #1
 8008e74:	73fb      	strb	r3, [r7, #15]
 8008e76:	7bfb      	ldrb	r3, [r7, #15]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1f0      	bne.n	8008e5e <send_cmd+0xb6>

	return res;							/* Return received response */
 8008e7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3710      	adds	r7, #16
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
	...

08008e88 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8008e88:	b590      	push	{r4, r7, lr}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	4603      	mov	r3, r0
 8008e90:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8008e92:	79fb      	ldrb	r3, [r7, #7]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d001      	beq.n	8008e9c <USER_SPI_initialize+0x14>
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e0ca      	b.n	8009032 <USER_SPI_initialize+0x1aa>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8008e9c:	4b67      	ldr	r3, [pc, #412]	; (800903c <USER_SPI_initialize+0x1b4>)
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	f003 0302 	and.w	r3, r3, #2
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d003      	beq.n	8008eb2 <USER_SPI_initialize+0x2a>
 8008eaa:	4b64      	ldr	r3, [pc, #400]	; (800903c <USER_SPI_initialize+0x1b4>)
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	e0bf      	b.n	8009032 <USER_SPI_initialize+0x1aa>

	FCLK_SLOW();
 8008eb2:	4b63      	ldr	r3, [pc, #396]	; (8009040 <USER_SPI_initialize+0x1b8>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	22aa      	movs	r2, #170	; 0xaa
 8008eb8:	651a      	str	r2, [r3, #80]	; 0x50
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8008eba:	230a      	movs	r3, #10
 8008ebc:	73fb      	strb	r3, [r7, #15]
 8008ebe:	e005      	b.n	8008ecc <USER_SPI_initialize+0x44>
 8008ec0:	20ff      	movs	r0, #255	; 0xff
 8008ec2:	f7ff fdf7 	bl	8008ab4 <xchg_spi>
 8008ec6:	7bfb      	ldrb	r3, [r7, #15]
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	73fb      	strb	r3, [r7, #15]
 8008ecc:	7bfb      	ldrb	r3, [r7, #15]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1f6      	bne.n	8008ec0 <USER_SPI_initialize+0x38>

	ty = 0;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	2000      	movs	r0, #0
 8008eda:	f7ff ff65 	bl	8008da8 <send_cmd>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	f040 808b 	bne.w	8008ffc <USER_SPI_initialize+0x174>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8008ee6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008eea:	f7ff fdb9 	bl	8008a60 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8008eee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008ef2:	2008      	movs	r0, #8
 8008ef4:	f7ff ff58 	bl	8008da8 <send_cmd>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d151      	bne.n	8008fa2 <USER_SPI_initialize+0x11a>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8008efe:	2300      	movs	r3, #0
 8008f00:	73fb      	strb	r3, [r7, #15]
 8008f02:	e00d      	b.n	8008f20 <USER_SPI_initialize+0x98>
 8008f04:	7bfc      	ldrb	r4, [r7, #15]
 8008f06:	20ff      	movs	r0, #255	; 0xff
 8008f08:	f7ff fdd4 	bl	8008ab4 <xchg_spi>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	461a      	mov	r2, r3
 8008f10:	f107 0310 	add.w	r3, r7, #16
 8008f14:	4423      	add	r3, r4
 8008f16:	f803 2c08 	strb.w	r2, [r3, #-8]
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	73fb      	strb	r3, [r7, #15]
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
 8008f22:	2b03      	cmp	r3, #3
 8008f24:	d9ee      	bls.n	8008f04 <USER_SPI_initialize+0x7c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8008f26:	7abb      	ldrb	r3, [r7, #10]
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d167      	bne.n	8008ffc <USER_SPI_initialize+0x174>
 8008f2c:	7afb      	ldrb	r3, [r7, #11]
 8008f2e:	2baa      	cmp	r3, #170	; 0xaa
 8008f30:	d164      	bne.n	8008ffc <USER_SPI_initialize+0x174>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8008f32:	bf00      	nop
 8008f34:	f7ff fda8 	bl	8008a88 <SPI_Timer_Status>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d007      	beq.n	8008f4e <USER_SPI_initialize+0xc6>
 8008f3e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008f42:	20a9      	movs	r0, #169	; 0xa9
 8008f44:	f7ff ff30 	bl	8008da8 <send_cmd>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1f2      	bne.n	8008f34 <USER_SPI_initialize+0xac>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8008f4e:	f7ff fd9b 	bl	8008a88 <SPI_Timer_Status>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d051      	beq.n	8008ffc <USER_SPI_initialize+0x174>
 8008f58:	2100      	movs	r1, #0
 8008f5a:	203a      	movs	r0, #58	; 0x3a
 8008f5c:	f7ff ff24 	bl	8008da8 <send_cmd>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d14a      	bne.n	8008ffc <USER_SPI_initialize+0x174>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8008f66:	2300      	movs	r3, #0
 8008f68:	73fb      	strb	r3, [r7, #15]
 8008f6a:	e00d      	b.n	8008f88 <USER_SPI_initialize+0x100>
 8008f6c:	7bfc      	ldrb	r4, [r7, #15]
 8008f6e:	20ff      	movs	r0, #255	; 0xff
 8008f70:	f7ff fda0 	bl	8008ab4 <xchg_spi>
 8008f74:	4603      	mov	r3, r0
 8008f76:	461a      	mov	r2, r3
 8008f78:	f107 0310 	add.w	r3, r7, #16
 8008f7c:	4423      	add	r3, r4
 8008f7e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8008f82:	7bfb      	ldrb	r3, [r7, #15]
 8008f84:	3301      	adds	r3, #1
 8008f86:	73fb      	strb	r3, [r7, #15]
 8008f88:	7bfb      	ldrb	r3, [r7, #15]
 8008f8a:	2b03      	cmp	r3, #3
 8008f8c:	d9ee      	bls.n	8008f6c <USER_SPI_initialize+0xe4>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8008f8e:	7a3b      	ldrb	r3, [r7, #8]
 8008f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d001      	beq.n	8008f9c <USER_SPI_initialize+0x114>
 8008f98:	230c      	movs	r3, #12
 8008f9a:	e000      	b.n	8008f9e <USER_SPI_initialize+0x116>
 8008f9c:	2304      	movs	r3, #4
 8008f9e:	737b      	strb	r3, [r7, #13]
 8008fa0:	e02c      	b.n	8008ffc <USER_SPI_initialize+0x174>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	20a9      	movs	r0, #169	; 0xa9
 8008fa6:	f7ff feff 	bl	8008da8 <send_cmd>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d804      	bhi.n	8008fba <USER_SPI_initialize+0x132>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8008fb0:	2302      	movs	r3, #2
 8008fb2:	737b      	strb	r3, [r7, #13]
 8008fb4:	23a9      	movs	r3, #169	; 0xa9
 8008fb6:	73bb      	strb	r3, [r7, #14]
 8008fb8:	e003      	b.n	8008fc2 <USER_SPI_initialize+0x13a>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8008fba:	2301      	movs	r3, #1
 8008fbc:	737b      	strb	r3, [r7, #13]
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8008fc2:	bf00      	nop
 8008fc4:	f7ff fd60 	bl	8008a88 <SPI_Timer_Status>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d007      	beq.n	8008fde <USER_SPI_initialize+0x156>
 8008fce:	7bbb      	ldrb	r3, [r7, #14]
 8008fd0:	2100      	movs	r1, #0
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7ff fee8 	bl	8008da8 <send_cmd>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1f2      	bne.n	8008fc4 <USER_SPI_initialize+0x13c>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8008fde:	f7ff fd53 	bl	8008a88 <SPI_Timer_Status>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d007      	beq.n	8008ff8 <USER_SPI_initialize+0x170>
 8008fe8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008fec:	2010      	movs	r0, #16
 8008fee:	f7ff fedb 	bl	8008da8 <send_cmd>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d001      	beq.n	8008ffc <USER_SPI_initialize+0x174>
				ty = 0;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8008ffc:	4a11      	ldr	r2, [pc, #68]	; (8009044 <USER_SPI_initialize+0x1bc>)
 8008ffe:	7b7b      	ldrb	r3, [r7, #13]
 8009000:	7013      	strb	r3, [r2, #0]
	despiselect();
 8009002:	f7ff fdc5 	bl	8008b90 <despiselect>

	if (ty) {			/* OK */
 8009006:	7b7b      	ldrb	r3, [r7, #13]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00c      	beq.n	8009026 <USER_SPI_initialize+0x19e>
		FCLK_FAST();			/* Set fast clock */
 800900c:	4b0c      	ldr	r3, [pc, #48]	; (8009040 <USER_SPI_initialize+0x1b8>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	220c      	movs	r2, #12
 8009012:	651a      	str	r2, [r3, #80]	; 0x50
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8009014:	4b09      	ldr	r3, [pc, #36]	; (800903c <USER_SPI_initialize+0x1b4>)
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	b2db      	uxtb	r3, r3
 800901a:	f023 0301 	bic.w	r3, r3, #1
 800901e:	b2da      	uxtb	r2, r3
 8009020:	4b06      	ldr	r3, [pc, #24]	; (800903c <USER_SPI_initialize+0x1b4>)
 8009022:	701a      	strb	r2, [r3, #0]
 8009024:	e002      	b.n	800902c <USER_SPI_initialize+0x1a4>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8009026:	4b05      	ldr	r3, [pc, #20]	; (800903c <USER_SPI_initialize+0x1b4>)
 8009028:	2201      	movs	r2, #1
 800902a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800902c:	4b03      	ldr	r3, [pc, #12]	; (800903c <USER_SPI_initialize+0x1b4>)
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	b2db      	uxtb	r3, r3
}
 8009032:	4618      	mov	r0, r3
 8009034:	3714      	adds	r7, #20
 8009036:	46bd      	mov	sp, r7
 8009038:	bd90      	pop	{r4, r7, pc}
 800903a:	bf00      	nop
 800903c:	24000030 	.word	0x24000030
 8009040:	240000b4 	.word	0x240000b4
 8009044:	24000ba8 	.word	0x24000ba8

08009048 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	4603      	mov	r3, r0
 8009050:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8009052:	79fb      	ldrb	r3, [r7, #7]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d001      	beq.n	800905c <USER_SPI_status+0x14>
 8009058:	2301      	movs	r3, #1
 800905a:	e002      	b.n	8009062 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800905c:	4b04      	ldr	r3, [pc, #16]	; (8009070 <USER_SPI_status+0x28>)
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	b2db      	uxtb	r3, r3
}
 8009062:	4618      	mov	r0, r3
 8009064:	370c      	adds	r7, #12
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr
 800906e:	bf00      	nop
 8009070:	24000030 	.word	0x24000030

08009074 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	60b9      	str	r1, [r7, #8]
 800907c:	607a      	str	r2, [r7, #4]
 800907e:	603b      	str	r3, [r7, #0]
 8009080:	4603      	mov	r3, r0
 8009082:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009084:	7bfb      	ldrb	r3, [r7, #15]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d102      	bne.n	8009090 <USER_SPI_read+0x1c>
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d101      	bne.n	8009094 <USER_SPI_read+0x20>
 8009090:	2304      	movs	r3, #4
 8009092:	e04d      	b.n	8009130 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009094:	4b28      	ldr	r3, [pc, #160]	; (8009138 <USER_SPI_read+0xc4>)
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	b2db      	uxtb	r3, r3
 800909a:	f003 0301 	and.w	r3, r3, #1
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <USER_SPI_read+0x32>
 80090a2:	2303      	movs	r3, #3
 80090a4:	e044      	b.n	8009130 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80090a6:	4b25      	ldr	r3, [pc, #148]	; (800913c <USER_SPI_read+0xc8>)
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	f003 0308 	and.w	r3, r3, #8
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d102      	bne.n	80090b8 <USER_SPI_read+0x44>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	025b      	lsls	r3, r3, #9
 80090b6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d111      	bne.n	80090e2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80090be:	6879      	ldr	r1, [r7, #4]
 80090c0:	2011      	movs	r0, #17
 80090c2:	f7ff fe71 	bl	8008da8 <send_cmd>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d129      	bne.n	8009120 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80090cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80090d0:	68b8      	ldr	r0, [r7, #8]
 80090d2:	f7ff fd89 	bl	8008be8 <rcvr_datablock>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d021      	beq.n	8009120 <USER_SPI_read+0xac>
			count = 0;
 80090dc:	2300      	movs	r3, #0
 80090de:	603b      	str	r3, [r7, #0]
 80090e0:	e01e      	b.n	8009120 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80090e2:	6879      	ldr	r1, [r7, #4]
 80090e4:	2012      	movs	r0, #18
 80090e6:	f7ff fe5f 	bl	8008da8 <send_cmd>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d117      	bne.n	8009120 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80090f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80090f4:	68b8      	ldr	r0, [r7, #8]
 80090f6:	f7ff fd77 	bl	8008be8 <rcvr_datablock>
 80090fa:	4603      	mov	r3, r0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00a      	beq.n	8009116 <USER_SPI_read+0xa2>
				buff += 512;
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009106:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	3b01      	subs	r3, #1
 800910c:	603b      	str	r3, [r7, #0]
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1ed      	bne.n	80090f0 <USER_SPI_read+0x7c>
 8009114:	e000      	b.n	8009118 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8009116:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8009118:	2100      	movs	r1, #0
 800911a:	200c      	movs	r0, #12
 800911c:	f7ff fe44 	bl	8008da8 <send_cmd>
		}
	}
	despiselect();
 8009120:	f7ff fd36 	bl	8008b90 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	bf14      	ite	ne
 800912a:	2301      	movne	r3, #1
 800912c:	2300      	moveq	r3, #0
 800912e:	b2db      	uxtb	r3, r3
}
 8009130:	4618      	mov	r0, r3
 8009132:	3710      	adds	r7, #16
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}
 8009138:	24000030 	.word	0x24000030
 800913c:	24000ba8 	.word	0x24000ba8

08009140 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	60b9      	str	r1, [r7, #8]
 8009148:	607a      	str	r2, [r7, #4]
 800914a:	603b      	str	r3, [r7, #0]
 800914c:	4603      	mov	r3, r0
 800914e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009150:	7bfb      	ldrb	r3, [r7, #15]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d102      	bne.n	800915c <USER_SPI_write+0x1c>
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d101      	bne.n	8009160 <USER_SPI_write+0x20>
 800915c:	2304      	movs	r3, #4
 800915e:	e063      	b.n	8009228 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8009160:	4b33      	ldr	r3, [pc, #204]	; (8009230 <USER_SPI_write+0xf0>)
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	b2db      	uxtb	r3, r3
 8009166:	f003 0301 	and.w	r3, r3, #1
 800916a:	2b00      	cmp	r3, #0
 800916c:	d001      	beq.n	8009172 <USER_SPI_write+0x32>
 800916e:	2303      	movs	r3, #3
 8009170:	e05a      	b.n	8009228 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8009172:	4b2f      	ldr	r3, [pc, #188]	; (8009230 <USER_SPI_write+0xf0>)
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	b2db      	uxtb	r3, r3
 8009178:	f003 0304 	and.w	r3, r3, #4
 800917c:	2b00      	cmp	r3, #0
 800917e:	d001      	beq.n	8009184 <USER_SPI_write+0x44>
 8009180:	2302      	movs	r3, #2
 8009182:	e051      	b.n	8009228 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8009184:	4b2b      	ldr	r3, [pc, #172]	; (8009234 <USER_SPI_write+0xf4>)
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	f003 0308 	and.w	r3, r3, #8
 800918c:	2b00      	cmp	r3, #0
 800918e:	d102      	bne.n	8009196 <USER_SPI_write+0x56>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	025b      	lsls	r3, r3, #9
 8009194:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	2b01      	cmp	r3, #1
 800919a:	d110      	bne.n	80091be <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800919c:	6879      	ldr	r1, [r7, #4]
 800919e:	2018      	movs	r0, #24
 80091a0:	f7ff fe02 	bl	8008da8 <send_cmd>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d136      	bne.n	8009218 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80091aa:	21fe      	movs	r1, #254	; 0xfe
 80091ac:	68b8      	ldr	r0, [r7, #8]
 80091ae:	f7ff fd44 	bl	8008c3a <xmit_datablock>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d02f      	beq.n	8009218 <USER_SPI_write+0xd8>
			count = 0;
 80091b8:	2300      	movs	r3, #0
 80091ba:	603b      	str	r3, [r7, #0]
 80091bc:	e02c      	b.n	8009218 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80091be:	4b1d      	ldr	r3, [pc, #116]	; (8009234 <USER_SPI_write+0xf4>)
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	f003 0306 	and.w	r3, r3, #6
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d003      	beq.n	80091d2 <USER_SPI_write+0x92>
 80091ca:	6839      	ldr	r1, [r7, #0]
 80091cc:	2097      	movs	r0, #151	; 0x97
 80091ce:	f7ff fdeb 	bl	8008da8 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80091d2:	6879      	ldr	r1, [r7, #4]
 80091d4:	2019      	movs	r0, #25
 80091d6:	f7ff fde7 	bl	8008da8 <send_cmd>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d11b      	bne.n	8009218 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80091e0:	21fc      	movs	r1, #252	; 0xfc
 80091e2:	68b8      	ldr	r0, [r7, #8]
 80091e4:	f7ff fd29 	bl	8008c3a <xmit_datablock>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00a      	beq.n	8009204 <USER_SPI_write+0xc4>
				buff += 512;
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80091f4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	3b01      	subs	r3, #1
 80091fa:	603b      	str	r3, [r7, #0]
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d1ee      	bne.n	80091e0 <USER_SPI_write+0xa0>
 8009202:	e000      	b.n	8009206 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8009204:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8009206:	21fd      	movs	r1, #253	; 0xfd
 8009208:	2000      	movs	r0, #0
 800920a:	f7ff fd16 	bl	8008c3a <xmit_datablock>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d101      	bne.n	8009218 <USER_SPI_write+0xd8>
 8009214:	2301      	movs	r3, #1
 8009216:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8009218:	f7ff fcba 	bl	8008b90 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	bf14      	ite	ne
 8009222:	2301      	movne	r3, #1
 8009224:	2300      	moveq	r3, #0
 8009226:	b2db      	uxtb	r3, r3
}
 8009228:	4618      	mov	r0, r3
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	24000030 	.word	0x24000030
 8009234:	24000ba8 	.word	0x24000ba8

08009238 <USER_SPI_write_dma>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	60b9      	str	r1, [r7, #8]
 8009240:	607a      	str	r2, [r7, #4]
 8009242:	603b      	str	r3, [r7, #0]
 8009244:	4603      	mov	r3, r0
 8009246:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009248:	7bfb      	ldrb	r3, [r7, #15]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d102      	bne.n	8009254 <USER_SPI_write_dma+0x1c>
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d101      	bne.n	8009258 <USER_SPI_write_dma+0x20>
 8009254:	2304      	movs	r3, #4
 8009256:	e033      	b.n	80092c0 <USER_SPI_write_dma+0x88>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8009258:	4b1b      	ldr	r3, [pc, #108]	; (80092c8 <USER_SPI_write_dma+0x90>)
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	b2db      	uxtb	r3, r3
 800925e:	f003 0301 	and.w	r3, r3, #1
 8009262:	2b00      	cmp	r3, #0
 8009264:	d001      	beq.n	800926a <USER_SPI_write_dma+0x32>
 8009266:	2303      	movs	r3, #3
 8009268:	e02a      	b.n	80092c0 <USER_SPI_write_dma+0x88>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800926a:	4b17      	ldr	r3, [pc, #92]	; (80092c8 <USER_SPI_write_dma+0x90>)
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	b2db      	uxtb	r3, r3
 8009270:	f003 0304 	and.w	r3, r3, #4
 8009274:	2b00      	cmp	r3, #0
 8009276:	d001      	beq.n	800927c <USER_SPI_write_dma+0x44>
 8009278:	2302      	movs	r3, #2
 800927a:	e021      	b.n	80092c0 <USER_SPI_write_dma+0x88>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800927c:	4b13      	ldr	r3, [pc, #76]	; (80092cc <USER_SPI_write_dma+0x94>)
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	f003 0308 	and.w	r3, r3, #8
 8009284:	2b00      	cmp	r3, #0
 8009286:	d102      	bne.n	800928e <USER_SPI_write_dma+0x56>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	025b      	lsls	r3, r3, #9
 800928c:	607b      	str	r3, [r7, #4]

//	if (count == 1) {	/* Single sector write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800928e:	6879      	ldr	r1, [r7, #4]
 8009290:	2018      	movs	r0, #24
 8009292:	f7ff fd89 	bl	8008da8 <send_cmd>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d109      	bne.n	80092b0 <USER_SPI_write_dma+0x78>
			&& xmit_data_dma(buff, count, 0xFE)) {
 800929c:	22fe      	movs	r2, #254	; 0xfe
 800929e:	6839      	ldr	r1, [r7, #0]
 80092a0:	68b8      	ldr	r0, [r7, #8]
 80092a2:	f7ff fcfd 	bl	8008ca0 <xmit_data_dma>
 80092a6:	4603      	mov	r3, r0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d001      	beq.n	80092b0 <USER_SPI_write_dma+0x78>
			count = 0;
 80092ac:	2300      	movs	r3, #0
 80092ae:	603b      	str	r3, [r7, #0]
//				buff += 512;
//			} while (--count);
//			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
//		}
//	}
	despiselect();
 80092b0:	f7ff fc6e 	bl	8008b90 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	bf14      	ite	ne
 80092ba:	2301      	movne	r3, #1
 80092bc:	2300      	moveq	r3, #0
 80092be:	b2db      	uxtb	r3, r3
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	24000030 	.word	0x24000030
 80092cc:	24000ba8 	.word	0x24000ba8

080092d0 <USER_SPI_write_dma_start>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60b9      	str	r1, [r7, #8]
 80092d8:	607a      	str	r2, [r7, #4]
 80092da:	603b      	str	r3, [r7, #0]
 80092dc:	4603      	mov	r3, r0
 80092de:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80092e0:	7bfb      	ldrb	r3, [r7, #15]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d102      	bne.n	80092ec <USER_SPI_write_dma_start+0x1c>
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d101      	bne.n	80092f0 <USER_SPI_write_dma_start+0x20>
 80092ec:	2304      	movs	r3, #4
 80092ee:	e031      	b.n	8009354 <USER_SPI_write_dma_start+0x84>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80092f0:	4b1a      	ldr	r3, [pc, #104]	; (800935c <USER_SPI_write_dma_start+0x8c>)
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	f003 0301 	and.w	r3, r3, #1
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d001      	beq.n	8009302 <USER_SPI_write_dma_start+0x32>
 80092fe:	2303      	movs	r3, #3
 8009300:	e028      	b.n	8009354 <USER_SPI_write_dma_start+0x84>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8009302:	4b16      	ldr	r3, [pc, #88]	; (800935c <USER_SPI_write_dma_start+0x8c>)
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	b2db      	uxtb	r3, r3
 8009308:	f003 0304 	and.w	r3, r3, #4
 800930c:	2b00      	cmp	r3, #0
 800930e:	d001      	beq.n	8009314 <USER_SPI_write_dma_start+0x44>
 8009310:	2302      	movs	r3, #2
 8009312:	e01f      	b.n	8009354 <USER_SPI_write_dma_start+0x84>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8009314:	4b12      	ldr	r3, [pc, #72]	; (8009360 <USER_SPI_write_dma_start+0x90>)
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	f003 0308 	and.w	r3, r3, #8
 800931c:	2b00      	cmp	r3, #0
 800931e:	d102      	bne.n	8009326 <USER_SPI_write_dma_start+0x56>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	025b      	lsls	r3, r3, #9
 8009324:	607b      	str	r3, [r7, #4]

	if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8009326:	6879      	ldr	r1, [r7, #4]
 8009328:	2018      	movs	r0, #24
 800932a:	f7ff fd3d 	bl	8008da8 <send_cmd>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d109      	bne.n	8009348 <USER_SPI_write_dma_start+0x78>
		&& xmit_data_dma_start(buff, count, 0xFE)) {
 8009334:	22fe      	movs	r2, #254	; 0xfe
 8009336:	6839      	ldr	r1, [r7, #0]
 8009338:	68b8      	ldr	r0, [r7, #8]
 800933a:	f7ff fced 	bl	8008d18 <xmit_data_dma_start>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d001      	beq.n	8009348 <USER_SPI_write_dma_start+0x78>
		count = 0;
 8009344:	2300      	movs	r3, #0
 8009346:	603b      	str	r3, [r7, #0]
	}
//	despiselect();

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	bf14      	ite	ne
 800934e:	2301      	movne	r3, #1
 8009350:	2300      	moveq	r3, #0
 8009352:	b2db      	uxtb	r3, r3
}
 8009354:	4618      	mov	r0, r3
 8009356:	3710      	adds	r7, #16
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	24000030 	.word	0x24000030
 8009360:	24000ba8 	.word	0x24000ba8

08009364 <USER_SPI_write_dma_cplt>:


inline DRESULT USER_SPI_write_dma_cplt (
)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
	int success = xmit_data_dma_cplt();
 800936a:	f7ff fd03 	bl	8008d74 <xmit_data_dma_cplt>
 800936e:	6078      	str	r0, [r7, #4]
	despiselect();
 8009370:	f7ff fc0e 	bl	8008b90 <despiselect>

	return success ? RES_OK : RES_ERROR;	/* Return result */
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2b00      	cmp	r3, #0
 8009378:	bf0c      	ite	eq
 800937a:	2301      	moveq	r3, #1
 800937c:	2300      	movne	r3, #0
 800937e:	b2db      	uxtb	r3, r3
}
 8009380:	4618      	mov	r0, r3
 8009382:	3708      	adds	r7, #8
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b08c      	sub	sp, #48	; 0x30
 800938c:	af00      	add	r7, sp, #0
 800938e:	4603      	mov	r3, r0
 8009390:	603a      	str	r2, [r7, #0]
 8009392:	71fb      	strb	r3, [r7, #7]
 8009394:	460b      	mov	r3, r1
 8009396:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8009398:	79fb      	ldrb	r3, [r7, #7]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d001      	beq.n	80093a2 <USER_SPI_ioctl+0x1a>
 800939e:	2304      	movs	r3, #4
 80093a0:	e15a      	b.n	8009658 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80093a2:	4baf      	ldr	r3, [pc, #700]	; (8009660 <USER_SPI_ioctl+0x2d8>)
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	f003 0301 	and.w	r3, r3, #1
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d001      	beq.n	80093b4 <USER_SPI_ioctl+0x2c>
 80093b0:	2303      	movs	r3, #3
 80093b2:	e151      	b.n	8009658 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80093ba:	79bb      	ldrb	r3, [r7, #6]
 80093bc:	2b04      	cmp	r3, #4
 80093be:	f200 8136 	bhi.w	800962e <USER_SPI_ioctl+0x2a6>
 80093c2:	a201      	add	r2, pc, #4	; (adr r2, 80093c8 <USER_SPI_ioctl+0x40>)
 80093c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c8:	080093dd 	.word	0x080093dd
 80093cc:	080093f1 	.word	0x080093f1
 80093d0:	0800962f 	.word	0x0800962f
 80093d4:	0800949d 	.word	0x0800949d
 80093d8:	08009593 	.word	0x08009593
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80093dc:	f7ff fbe8 	bl	8008bb0 <spiselect>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f000 8127 	beq.w	8009636 <USER_SPI_ioctl+0x2ae>
 80093e8:	2300      	movs	r3, #0
 80093ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80093ee:	e122      	b.n	8009636 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80093f0:	2100      	movs	r1, #0
 80093f2:	2009      	movs	r0, #9
 80093f4:	f7ff fcd8 	bl	8008da8 <send_cmd>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	f040 811d 	bne.w	800963a <USER_SPI_ioctl+0x2b2>
 8009400:	f107 030c 	add.w	r3, r7, #12
 8009404:	2110      	movs	r1, #16
 8009406:	4618      	mov	r0, r3
 8009408:	f7ff fbee 	bl	8008be8 <rcvr_datablock>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	f000 8113 	beq.w	800963a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8009414:	7b3b      	ldrb	r3, [r7, #12]
 8009416:	099b      	lsrs	r3, r3, #6
 8009418:	b2db      	uxtb	r3, r3
 800941a:	2b01      	cmp	r3, #1
 800941c:	d111      	bne.n	8009442 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800941e:	7d7b      	ldrb	r3, [r7, #21]
 8009420:	461a      	mov	r2, r3
 8009422:	7d3b      	ldrb	r3, [r7, #20]
 8009424:	021b      	lsls	r3, r3, #8
 8009426:	4413      	add	r3, r2
 8009428:	461a      	mov	r2, r3
 800942a:	7cfb      	ldrb	r3, [r7, #19]
 800942c:	041b      	lsls	r3, r3, #16
 800942e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8009432:	4413      	add	r3, r2
 8009434:	3301      	adds	r3, #1
 8009436:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	029a      	lsls	r2, r3, #10
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	601a      	str	r2, [r3, #0]
 8009440:	e028      	b.n	8009494 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8009442:	7c7b      	ldrb	r3, [r7, #17]
 8009444:	f003 030f 	and.w	r3, r3, #15
 8009448:	b2da      	uxtb	r2, r3
 800944a:	7dbb      	ldrb	r3, [r7, #22]
 800944c:	09db      	lsrs	r3, r3, #7
 800944e:	b2db      	uxtb	r3, r3
 8009450:	4413      	add	r3, r2
 8009452:	b2da      	uxtb	r2, r3
 8009454:	7d7b      	ldrb	r3, [r7, #21]
 8009456:	005b      	lsls	r3, r3, #1
 8009458:	b2db      	uxtb	r3, r3
 800945a:	f003 0306 	and.w	r3, r3, #6
 800945e:	b2db      	uxtb	r3, r3
 8009460:	4413      	add	r3, r2
 8009462:	b2db      	uxtb	r3, r3
 8009464:	3302      	adds	r3, #2
 8009466:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800946a:	7d3b      	ldrb	r3, [r7, #20]
 800946c:	099b      	lsrs	r3, r3, #6
 800946e:	b2db      	uxtb	r3, r3
 8009470:	461a      	mov	r2, r3
 8009472:	7cfb      	ldrb	r3, [r7, #19]
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	441a      	add	r2, r3
 8009478:	7cbb      	ldrb	r3, [r7, #18]
 800947a:	029b      	lsls	r3, r3, #10
 800947c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009480:	4413      	add	r3, r2
 8009482:	3301      	adds	r3, #1
 8009484:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8009486:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800948a:	3b09      	subs	r3, #9
 800948c:	69fa      	ldr	r2, [r7, #28]
 800948e:	409a      	lsls	r2, r3
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8009494:	2300      	movs	r3, #0
 8009496:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800949a:	e0ce      	b.n	800963a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800949c:	4b71      	ldr	r3, [pc, #452]	; (8009664 <USER_SPI_ioctl+0x2dc>)
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	f003 0304 	and.w	r3, r3, #4
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d031      	beq.n	800950c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80094a8:	2100      	movs	r1, #0
 80094aa:	208d      	movs	r0, #141	; 0x8d
 80094ac:	f7ff fc7c 	bl	8008da8 <send_cmd>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f040 80c3 	bne.w	800963e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80094b8:	20ff      	movs	r0, #255	; 0xff
 80094ba:	f7ff fafb 	bl	8008ab4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80094be:	f107 030c 	add.w	r3, r7, #12
 80094c2:	2110      	movs	r1, #16
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7ff fb8f 	bl	8008be8 <rcvr_datablock>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f000 80b6 	beq.w	800963e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80094d2:	2330      	movs	r3, #48	; 0x30
 80094d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80094d8:	e007      	b.n	80094ea <USER_SPI_ioctl+0x162>
 80094da:	20ff      	movs	r0, #255	; 0xff
 80094dc:	f7ff faea 	bl	8008ab4 <xchg_spi>
 80094e0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80094e4:	3b01      	subs	r3, #1
 80094e6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80094ea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1f3      	bne.n	80094da <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80094f2:	7dbb      	ldrb	r3, [r7, #22]
 80094f4:	091b      	lsrs	r3, r3, #4
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	461a      	mov	r2, r3
 80094fa:	2310      	movs	r3, #16
 80094fc:	fa03 f202 	lsl.w	r2, r3, r2
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8009504:	2300      	movs	r3, #0
 8009506:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800950a:	e098      	b.n	800963e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800950c:	2100      	movs	r1, #0
 800950e:	2009      	movs	r0, #9
 8009510:	f7ff fc4a 	bl	8008da8 <send_cmd>
 8009514:	4603      	mov	r3, r0
 8009516:	2b00      	cmp	r3, #0
 8009518:	f040 8091 	bne.w	800963e <USER_SPI_ioctl+0x2b6>
 800951c:	f107 030c 	add.w	r3, r7, #12
 8009520:	2110      	movs	r1, #16
 8009522:	4618      	mov	r0, r3
 8009524:	f7ff fb60 	bl	8008be8 <rcvr_datablock>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	f000 8087 	beq.w	800963e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8009530:	4b4c      	ldr	r3, [pc, #304]	; (8009664 <USER_SPI_ioctl+0x2dc>)
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	f003 0302 	and.w	r3, r3, #2
 8009538:	2b00      	cmp	r3, #0
 800953a:	d012      	beq.n	8009562 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800953c:	7dbb      	ldrb	r3, [r7, #22]
 800953e:	005b      	lsls	r3, r3, #1
 8009540:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8009544:	7dfa      	ldrb	r2, [r7, #23]
 8009546:	09d2      	lsrs	r2, r2, #7
 8009548:	b2d2      	uxtb	r2, r2
 800954a:	4413      	add	r3, r2
 800954c:	1c5a      	adds	r2, r3, #1
 800954e:	7e7b      	ldrb	r3, [r7, #25]
 8009550:	099b      	lsrs	r3, r3, #6
 8009552:	b2db      	uxtb	r3, r3
 8009554:	3b01      	subs	r3, #1
 8009556:	fa02 f303 	lsl.w	r3, r2, r3
 800955a:	461a      	mov	r2, r3
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	601a      	str	r2, [r3, #0]
 8009560:	e013      	b.n	800958a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8009562:	7dbb      	ldrb	r3, [r7, #22]
 8009564:	109b      	asrs	r3, r3, #2
 8009566:	b29b      	uxth	r3, r3
 8009568:	f003 031f 	and.w	r3, r3, #31
 800956c:	3301      	adds	r3, #1
 800956e:	7dfa      	ldrb	r2, [r7, #23]
 8009570:	00d2      	lsls	r2, r2, #3
 8009572:	f002 0218 	and.w	r2, r2, #24
 8009576:	7df9      	ldrb	r1, [r7, #23]
 8009578:	0949      	lsrs	r1, r1, #5
 800957a:	b2c9      	uxtb	r1, r1
 800957c:	440a      	add	r2, r1
 800957e:	3201      	adds	r2, #1
 8009580:	fb02 f303 	mul.w	r3, r2, r3
 8009584:	461a      	mov	r2, r3
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800958a:	2300      	movs	r3, #0
 800958c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8009590:	e055      	b.n	800963e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009592:	4b34      	ldr	r3, [pc, #208]	; (8009664 <USER_SPI_ioctl+0x2dc>)
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	f003 0306 	and.w	r3, r3, #6
 800959a:	2b00      	cmp	r3, #0
 800959c:	d051      	beq.n	8009642 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800959e:	f107 020c 	add.w	r2, r7, #12
 80095a2:	79fb      	ldrb	r3, [r7, #7]
 80095a4:	210b      	movs	r1, #11
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7ff feee 	bl	8009388 <USER_SPI_ioctl>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d149      	bne.n	8009646 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80095b2:	7b3b      	ldrb	r3, [r7, #12]
 80095b4:	099b      	lsrs	r3, r3, #6
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d104      	bne.n	80095c6 <USER_SPI_ioctl+0x23e>
 80095bc:	7dbb      	ldrb	r3, [r7, #22]
 80095be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d041      	beq.n	800964a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	623b      	str	r3, [r7, #32]
 80095ca:	6a3b      	ldr	r3, [r7, #32]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80095d0:	6a3b      	ldr	r3, [r7, #32]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80095d6:	4b23      	ldr	r3, [pc, #140]	; (8009664 <USER_SPI_ioctl+0x2dc>)
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	f003 0308 	and.w	r3, r3, #8
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d105      	bne.n	80095ee <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80095e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e4:	025b      	lsls	r3, r3, #9
 80095e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80095e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ea:	025b      	lsls	r3, r3, #9
 80095ec:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80095ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095f0:	2020      	movs	r0, #32
 80095f2:	f7ff fbd9 	bl	8008da8 <send_cmd>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d128      	bne.n	800964e <USER_SPI_ioctl+0x2c6>
 80095fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80095fe:	2021      	movs	r0, #33	; 0x21
 8009600:	f7ff fbd2 	bl	8008da8 <send_cmd>
 8009604:	4603      	mov	r3, r0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d121      	bne.n	800964e <USER_SPI_ioctl+0x2c6>
 800960a:	2100      	movs	r1, #0
 800960c:	2026      	movs	r0, #38	; 0x26
 800960e:	f7ff fbcb 	bl	8008da8 <send_cmd>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d11a      	bne.n	800964e <USER_SPI_ioctl+0x2c6>
 8009618:	f247 5030 	movw	r0, #30000	; 0x7530
 800961c:	f7ff fa95 	bl	8008b4a <wait_ready>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d013      	beq.n	800964e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8009626:	2300      	movs	r3, #0
 8009628:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800962c:	e00f      	b.n	800964e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800962e:	2304      	movs	r3, #4
 8009630:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009634:	e00c      	b.n	8009650 <USER_SPI_ioctl+0x2c8>
		break;
 8009636:	bf00      	nop
 8009638:	e00a      	b.n	8009650 <USER_SPI_ioctl+0x2c8>
		break;
 800963a:	bf00      	nop
 800963c:	e008      	b.n	8009650 <USER_SPI_ioctl+0x2c8>
		break;
 800963e:	bf00      	nop
 8009640:	e006      	b.n	8009650 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009642:	bf00      	nop
 8009644:	e004      	b.n	8009650 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009646:	bf00      	nop
 8009648:	e002      	b.n	8009650 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800964a:	bf00      	nop
 800964c:	e000      	b.n	8009650 <USER_SPI_ioctl+0x2c8>
		break;
 800964e:	bf00      	nop
	}

	despiselect();
 8009650:	f7ff fa9e 	bl	8008b90 <despiselect>

	return res;
 8009654:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009658:	4618      	mov	r0, r3
 800965a:	3730      	adds	r7, #48	; 0x30
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	24000030 	.word	0x24000030
 8009664:	24000ba8 	.word	0x24000ba8

08009668 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	4603      	mov	r3, r0
 8009670:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009672:	79fb      	ldrb	r3, [r7, #7]
 8009674:	4a08      	ldr	r2, [pc, #32]	; (8009698 <disk_status+0x30>)
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	4413      	add	r3, r2
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	79fa      	ldrb	r2, [r7, #7]
 8009680:	4905      	ldr	r1, [pc, #20]	; (8009698 <disk_status+0x30>)
 8009682:	440a      	add	r2, r1
 8009684:	7a12      	ldrb	r2, [r2, #8]
 8009686:	4610      	mov	r0, r2
 8009688:	4798      	blx	r3
 800968a:	4603      	mov	r3, r0
 800968c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800968e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009690:	4618      	mov	r0, r3
 8009692:	3710      	adds	r7, #16
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	24000bd4 	.word	0x24000bd4

0800969c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	4603      	mov	r3, r0
 80096a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80096a6:	2300      	movs	r3, #0
 80096a8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80096aa:	79fb      	ldrb	r3, [r7, #7]
 80096ac:	4a0d      	ldr	r2, [pc, #52]	; (80096e4 <disk_initialize+0x48>)
 80096ae:	5cd3      	ldrb	r3, [r2, r3]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d111      	bne.n	80096d8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80096b4:	79fb      	ldrb	r3, [r7, #7]
 80096b6:	4a0b      	ldr	r2, [pc, #44]	; (80096e4 <disk_initialize+0x48>)
 80096b8:	2101      	movs	r1, #1
 80096ba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80096bc:	79fb      	ldrb	r3, [r7, #7]
 80096be:	4a09      	ldr	r2, [pc, #36]	; (80096e4 <disk_initialize+0x48>)
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	4413      	add	r3, r2
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	79fa      	ldrb	r2, [r7, #7]
 80096ca:	4906      	ldr	r1, [pc, #24]	; (80096e4 <disk_initialize+0x48>)
 80096cc:	440a      	add	r2, r1
 80096ce:	7a12      	ldrb	r2, [r2, #8]
 80096d0:	4610      	mov	r0, r2
 80096d2:	4798      	blx	r3
 80096d4:	4603      	mov	r3, r0
 80096d6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80096d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	24000bd4 	.word	0x24000bd4

080096e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80096e8:	b590      	push	{r4, r7, lr}
 80096ea:	b087      	sub	sp, #28
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60b9      	str	r1, [r7, #8]
 80096f0:	607a      	str	r2, [r7, #4]
 80096f2:	603b      	str	r3, [r7, #0]
 80096f4:	4603      	mov	r3, r0
 80096f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80096f8:	7bfb      	ldrb	r3, [r7, #15]
 80096fa:	4a0a      	ldr	r2, [pc, #40]	; (8009724 <disk_read+0x3c>)
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	4413      	add	r3, r2
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	689c      	ldr	r4, [r3, #8]
 8009704:	7bfb      	ldrb	r3, [r7, #15]
 8009706:	4a07      	ldr	r2, [pc, #28]	; (8009724 <disk_read+0x3c>)
 8009708:	4413      	add	r3, r2
 800970a:	7a18      	ldrb	r0, [r3, #8]
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	68b9      	ldr	r1, [r7, #8]
 8009712:	47a0      	blx	r4
 8009714:	4603      	mov	r3, r0
 8009716:	75fb      	strb	r3, [r7, #23]
  return res;
 8009718:	7dfb      	ldrb	r3, [r7, #23]
}
 800971a:	4618      	mov	r0, r3
 800971c:	371c      	adds	r7, #28
 800971e:	46bd      	mov	sp, r7
 8009720:	bd90      	pop	{r4, r7, pc}
 8009722:	bf00      	nop
 8009724:	24000bd4 	.word	0x24000bd4

08009728 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009728:	b590      	push	{r4, r7, lr}
 800972a:	b087      	sub	sp, #28
 800972c:	af00      	add	r7, sp, #0
 800972e:	60b9      	str	r1, [r7, #8]
 8009730:	607a      	str	r2, [r7, #4]
 8009732:	603b      	str	r3, [r7, #0]
 8009734:	4603      	mov	r3, r0
 8009736:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009738:	7bfb      	ldrb	r3, [r7, #15]
 800973a:	4a0a      	ldr	r2, [pc, #40]	; (8009764 <disk_write+0x3c>)
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	4413      	add	r3, r2
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	68dc      	ldr	r4, [r3, #12]
 8009744:	7bfb      	ldrb	r3, [r7, #15]
 8009746:	4a07      	ldr	r2, [pc, #28]	; (8009764 <disk_write+0x3c>)
 8009748:	4413      	add	r3, r2
 800974a:	7a18      	ldrb	r0, [r3, #8]
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	68b9      	ldr	r1, [r7, #8]
 8009752:	47a0      	blx	r4
 8009754:	4603      	mov	r3, r0
 8009756:	75fb      	strb	r3, [r7, #23]
  return res;
 8009758:	7dfb      	ldrb	r3, [r7, #23]
}
 800975a:	4618      	mov	r0, r3
 800975c:	371c      	adds	r7, #28
 800975e:	46bd      	mov	sp, r7
 8009760:	bd90      	pop	{r4, r7, pc}
 8009762:	bf00      	nop
 8009764:	24000bd4 	.word	0x24000bd4

08009768 <disk_write_dma_start>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009768:	b590      	push	{r4, r7, lr}
 800976a:	b087      	sub	sp, #28
 800976c:	af00      	add	r7, sp, #0
 800976e:	60b9      	str	r1, [r7, #8]
 8009770:	607a      	str	r2, [r7, #4]
 8009772:	603b      	str	r3, [r7, #0]
 8009774:	4603      	mov	r3, r0
 8009776:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write_dma_start(disk.lun[pdrv], buff, sector, count);
 8009778:	7bfb      	ldrb	r3, [r7, #15]
 800977a:	4a0a      	ldr	r2, [pc, #40]	; (80097a4 <disk_write_dma_start+0x3c>)
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	4413      	add	r3, r2
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	695c      	ldr	r4, [r3, #20]
 8009784:	7bfb      	ldrb	r3, [r7, #15]
 8009786:	4a07      	ldr	r2, [pc, #28]	; (80097a4 <disk_write_dma_start+0x3c>)
 8009788:	4413      	add	r3, r2
 800978a:	7a18      	ldrb	r0, [r3, #8]
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	68b9      	ldr	r1, [r7, #8]
 8009792:	47a0      	blx	r4
 8009794:	4603      	mov	r3, r0
 8009796:	75fb      	strb	r3, [r7, #23]
  return res;
 8009798:	7dfb      	ldrb	r3, [r7, #23]
}
 800979a:	4618      	mov	r0, r3
 800979c:	371c      	adds	r7, #28
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd90      	pop	{r4, r7, pc}
 80097a2:	bf00      	nop
 80097a4:	24000bd4 	.word	0x24000bd4

080097a8 <disk_write_dma_cplt>:

DRESULT disk_write_dma_cplt (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	4603      	mov	r3, r0
 80097b0:	71fb      	strb	r3, [r7, #7]
  DRESULT res;

//  res = disk.drv[pdrv]->disk_write_dma_cplt();
  res = disk.drv[pdrv]->disk_write_dma_cplt();
 80097b2:	79fb      	ldrb	r3, [r7, #7]
 80097b4:	4a06      	ldr	r2, [pc, #24]	; (80097d0 <disk_write_dma_cplt+0x28>)
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	4413      	add	r3, r2
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	699b      	ldr	r3, [r3, #24]
 80097be:	4798      	blx	r3
 80097c0:	4603      	mov	r3, r0
 80097c2:	73fb      	strb	r3, [r7, #15]
  return res;
 80097c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	24000bd4 	.word	0x24000bd4

080097d4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	4603      	mov	r3, r0
 80097dc:	603a      	str	r2, [r7, #0]
 80097de:	71fb      	strb	r3, [r7, #7]
 80097e0:	460b      	mov	r3, r1
 80097e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80097e4:	79fb      	ldrb	r3, [r7, #7]
 80097e6:	4a09      	ldr	r2, [pc, #36]	; (800980c <disk_ioctl+0x38>)
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	4413      	add	r3, r2
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	69db      	ldr	r3, [r3, #28]
 80097f0:	79fa      	ldrb	r2, [r7, #7]
 80097f2:	4906      	ldr	r1, [pc, #24]	; (800980c <disk_ioctl+0x38>)
 80097f4:	440a      	add	r2, r1
 80097f6:	7a10      	ldrb	r0, [r2, #8]
 80097f8:	79b9      	ldrb	r1, [r7, #6]
 80097fa:	683a      	ldr	r2, [r7, #0]
 80097fc:	4798      	blx	r3
 80097fe:	4603      	mov	r3, r0
 8009800:	73fb      	strb	r3, [r7, #15]
  return res;
 8009802:	7bfb      	ldrb	r3, [r7, #15]
}
 8009804:	4618      	mov	r0, r3
 8009806:	3710      	adds	r7, #16
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}
 800980c:	24000bd4 	.word	0x24000bd4

08009810 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009810:	b480      	push	{r7}
 8009812:	b085      	sub	sp, #20
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	3301      	adds	r3, #1
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009820:	89fb      	ldrh	r3, [r7, #14]
 8009822:	021b      	lsls	r3, r3, #8
 8009824:	b21a      	sxth	r2, r3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	b21b      	sxth	r3, r3
 800982c:	4313      	orrs	r3, r2
 800982e:	b21b      	sxth	r3, r3
 8009830:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009832:	89fb      	ldrh	r3, [r7, #14]
}
 8009834:	4618      	mov	r0, r3
 8009836:	3714      	adds	r7, #20
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	3303      	adds	r3, #3
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	021b      	lsls	r3, r3, #8
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	3202      	adds	r2, #2
 8009858:	7812      	ldrb	r2, [r2, #0]
 800985a:	4313      	orrs	r3, r2
 800985c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	021b      	lsls	r3, r3, #8
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	3201      	adds	r2, #1
 8009866:	7812      	ldrb	r2, [r2, #0]
 8009868:	4313      	orrs	r3, r2
 800986a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	021b      	lsls	r3, r3, #8
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	7812      	ldrb	r2, [r2, #0]
 8009874:	4313      	orrs	r3, r2
 8009876:	60fb      	str	r3, [r7, #12]
	return rv;
 8009878:	68fb      	ldr	r3, [r7, #12]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3714      	adds	r7, #20
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr

08009886 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009886:	b480      	push	{r7}
 8009888:	b083      	sub	sp, #12
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
 800988e:	460b      	mov	r3, r1
 8009890:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	1c5a      	adds	r2, r3, #1
 8009896:	607a      	str	r2, [r7, #4]
 8009898:	887a      	ldrh	r2, [r7, #2]
 800989a:	b2d2      	uxtb	r2, r2
 800989c:	701a      	strb	r2, [r3, #0]
 800989e:	887b      	ldrh	r3, [r7, #2]
 80098a0:	0a1b      	lsrs	r3, r3, #8
 80098a2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	1c5a      	adds	r2, r3, #1
 80098a8:	607a      	str	r2, [r7, #4]
 80098aa:	887a      	ldrh	r2, [r7, #2]
 80098ac:	b2d2      	uxtb	r2, r2
 80098ae:	701a      	strb	r2, [r3, #0]
}
 80098b0:	bf00      	nop
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	1c5a      	adds	r2, r3, #1
 80098ca:	607a      	str	r2, [r7, #4]
 80098cc:	683a      	ldr	r2, [r7, #0]
 80098ce:	b2d2      	uxtb	r2, r2
 80098d0:	701a      	strb	r2, [r3, #0]
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	0a1b      	lsrs	r3, r3, #8
 80098d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	1c5a      	adds	r2, r3, #1
 80098dc:	607a      	str	r2, [r7, #4]
 80098de:	683a      	ldr	r2, [r7, #0]
 80098e0:	b2d2      	uxtb	r2, r2
 80098e2:	701a      	strb	r2, [r3, #0]
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	0a1b      	lsrs	r3, r3, #8
 80098e8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	1c5a      	adds	r2, r3, #1
 80098ee:	607a      	str	r2, [r7, #4]
 80098f0:	683a      	ldr	r2, [r7, #0]
 80098f2:	b2d2      	uxtb	r2, r2
 80098f4:	701a      	strb	r2, [r3, #0]
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	0a1b      	lsrs	r3, r3, #8
 80098fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	1c5a      	adds	r2, r3, #1
 8009900:	607a      	str	r2, [r7, #4]
 8009902:	683a      	ldr	r2, [r7, #0]
 8009904:	b2d2      	uxtb	r2, r2
 8009906:	701a      	strb	r2, [r3, #0]
}
 8009908:	bf00      	nop
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009914:	b480      	push	{r7}
 8009916:	b087      	sub	sp, #28
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00d      	beq.n	800994a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800992e:	693a      	ldr	r2, [r7, #16]
 8009930:	1c53      	adds	r3, r2, #1
 8009932:	613b      	str	r3, [r7, #16]
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	1c59      	adds	r1, r3, #1
 8009938:	6179      	str	r1, [r7, #20]
 800993a:	7812      	ldrb	r2, [r2, #0]
 800993c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	3b01      	subs	r3, #1
 8009942:	607b      	str	r3, [r7, #4]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d1f1      	bne.n	800992e <mem_cpy+0x1a>
	}
}
 800994a:	bf00      	nop
 800994c:	371c      	adds	r7, #28
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr

08009956 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009956:	b480      	push	{r7}
 8009958:	b087      	sub	sp, #28
 800995a:	af00      	add	r7, sp, #0
 800995c:	60f8      	str	r0, [r7, #12]
 800995e:	60b9      	str	r1, [r7, #8]
 8009960:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	1c5a      	adds	r2, r3, #1
 800996a:	617a      	str	r2, [r7, #20]
 800996c:	68ba      	ldr	r2, [r7, #8]
 800996e:	b2d2      	uxtb	r2, r2
 8009970:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	3b01      	subs	r3, #1
 8009976:	607b      	str	r3, [r7, #4]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1f3      	bne.n	8009966 <mem_set+0x10>
}
 800997e:	bf00      	nop
 8009980:	371c      	adds	r7, #28
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr

0800998a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800998a:	b480      	push	{r7}
 800998c:	b089      	sub	sp, #36	; 0x24
 800998e:	af00      	add	r7, sp, #0
 8009990:	60f8      	str	r0, [r7, #12]
 8009992:	60b9      	str	r1, [r7, #8]
 8009994:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	61fb      	str	r3, [r7, #28]
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800999e:	2300      	movs	r3, #0
 80099a0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	1c5a      	adds	r2, r3, #1
 80099a6:	61fa      	str	r2, [r7, #28]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	4619      	mov	r1, r3
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	1c5a      	adds	r2, r3, #1
 80099b0:	61ba      	str	r2, [r7, #24]
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	1acb      	subs	r3, r1, r3
 80099b6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	3b01      	subs	r3, #1
 80099bc:	607b      	str	r3, [r7, #4]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d002      	beq.n	80099ca <mem_cmp+0x40>
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d0eb      	beq.n	80099a2 <mem_cmp+0x18>

	return r;
 80099ca:	697b      	ldr	r3, [r7, #20]
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3724      	adds	r7, #36	; 0x24
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80099e2:	e002      	b.n	80099ea <chk_chr+0x12>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	3301      	adds	r3, #1
 80099e8:	607b      	str	r3, [r7, #4]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d005      	beq.n	80099fe <chk_chr+0x26>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	461a      	mov	r2, r3
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d1f2      	bne.n	80099e4 <chk_chr+0xc>
	return *str;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	781b      	ldrb	r3, [r3, #0]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	370c      	adds	r7, #12
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr
	...

08009a10 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b085      	sub	sp, #20
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	60bb      	str	r3, [r7, #8]
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	60fb      	str	r3, [r7, #12]
 8009a22:	e029      	b.n	8009a78 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009a24:	4a27      	ldr	r2, [pc, #156]	; (8009ac4 <chk_lock+0xb4>)
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	011b      	lsls	r3, r3, #4
 8009a2a:	4413      	add	r3, r2
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d01d      	beq.n	8009a6e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009a32:	4a24      	ldr	r2, [pc, #144]	; (8009ac4 <chk_lock+0xb4>)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	011b      	lsls	r3, r3, #4
 8009a38:	4413      	add	r3, r2
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d116      	bne.n	8009a72 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009a44:	4a1f      	ldr	r2, [pc, #124]	; (8009ac4 <chk_lock+0xb4>)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	011b      	lsls	r3, r3, #4
 8009a4a:	4413      	add	r3, r2
 8009a4c:	3304      	adds	r3, #4
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d10c      	bne.n	8009a72 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009a58:	4a1a      	ldr	r2, [pc, #104]	; (8009ac4 <chk_lock+0xb4>)
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	011b      	lsls	r3, r3, #4
 8009a5e:	4413      	add	r3, r2
 8009a60:	3308      	adds	r3, #8
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d102      	bne.n	8009a72 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009a6c:	e007      	b.n	8009a7e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	3301      	adds	r3, #1
 8009a76:	60fb      	str	r3, [r7, #12]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d9d2      	bls.n	8009a24 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2b02      	cmp	r3, #2
 8009a82:	d109      	bne.n	8009a98 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d102      	bne.n	8009a90 <chk_lock+0x80>
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	2b02      	cmp	r3, #2
 8009a8e:	d101      	bne.n	8009a94 <chk_lock+0x84>
 8009a90:	2300      	movs	r3, #0
 8009a92:	e010      	b.n	8009ab6 <chk_lock+0xa6>
 8009a94:	2312      	movs	r3, #18
 8009a96:	e00e      	b.n	8009ab6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d108      	bne.n	8009ab0 <chk_lock+0xa0>
 8009a9e:	4a09      	ldr	r2, [pc, #36]	; (8009ac4 <chk_lock+0xb4>)
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	011b      	lsls	r3, r3, #4
 8009aa4:	4413      	add	r3, r2
 8009aa6:	330c      	adds	r3, #12
 8009aa8:	881b      	ldrh	r3, [r3, #0]
 8009aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009aae:	d101      	bne.n	8009ab4 <chk_lock+0xa4>
 8009ab0:	2310      	movs	r3, #16
 8009ab2:	e000      	b.n	8009ab6 <chk_lock+0xa6>
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3714      	adds	r7, #20
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr
 8009ac2:	bf00      	nop
 8009ac4:	24000bb4 	.word	0x24000bb4

08009ac8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	607b      	str	r3, [r7, #4]
 8009ad2:	e002      	b.n	8009ada <enq_lock+0x12>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	607b      	str	r3, [r7, #4]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d806      	bhi.n	8009aee <enq_lock+0x26>
 8009ae0:	4a09      	ldr	r2, [pc, #36]	; (8009b08 <enq_lock+0x40>)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	011b      	lsls	r3, r3, #4
 8009ae6:	4413      	add	r3, r2
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1f2      	bne.n	8009ad4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	bf14      	ite	ne
 8009af4:	2301      	movne	r3, #1
 8009af6:	2300      	moveq	r3, #0
 8009af8:	b2db      	uxtb	r3, r3
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	370c      	adds	r7, #12
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr
 8009b06:	bf00      	nop
 8009b08:	24000bb4 	.word	0x24000bb4

08009b0c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009b16:	2300      	movs	r3, #0
 8009b18:	60fb      	str	r3, [r7, #12]
 8009b1a:	e01f      	b.n	8009b5c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009b1c:	4a41      	ldr	r2, [pc, #260]	; (8009c24 <inc_lock+0x118>)
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	011b      	lsls	r3, r3, #4
 8009b22:	4413      	add	r3, r2
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d113      	bne.n	8009b56 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009b2e:	4a3d      	ldr	r2, [pc, #244]	; (8009c24 <inc_lock+0x118>)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	011b      	lsls	r3, r3, #4
 8009b34:	4413      	add	r3, r2
 8009b36:	3304      	adds	r3, #4
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d109      	bne.n	8009b56 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009b42:	4a38      	ldr	r2, [pc, #224]	; (8009c24 <inc_lock+0x118>)
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	011b      	lsls	r3, r3, #4
 8009b48:	4413      	add	r3, r2
 8009b4a:	3308      	adds	r3, #8
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d006      	beq.n	8009b64 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	60fb      	str	r3, [r7, #12]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d9dc      	bls.n	8009b1c <inc_lock+0x10>
 8009b62:	e000      	b.n	8009b66 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009b64:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2b02      	cmp	r3, #2
 8009b6a:	d132      	bne.n	8009bd2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	60fb      	str	r3, [r7, #12]
 8009b70:	e002      	b.n	8009b78 <inc_lock+0x6c>
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	3301      	adds	r3, #1
 8009b76:	60fb      	str	r3, [r7, #12]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d806      	bhi.n	8009b8c <inc_lock+0x80>
 8009b7e:	4a29      	ldr	r2, [pc, #164]	; (8009c24 <inc_lock+0x118>)
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	011b      	lsls	r3, r3, #4
 8009b84:	4413      	add	r3, r2
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d1f2      	bne.n	8009b72 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	d101      	bne.n	8009b96 <inc_lock+0x8a>
 8009b92:	2300      	movs	r3, #0
 8009b94:	e040      	b.n	8009c18 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	4922      	ldr	r1, [pc, #136]	; (8009c24 <inc_lock+0x118>)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	011b      	lsls	r3, r3, #4
 8009ba0:	440b      	add	r3, r1
 8009ba2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	689a      	ldr	r2, [r3, #8]
 8009ba8:	491e      	ldr	r1, [pc, #120]	; (8009c24 <inc_lock+0x118>)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	011b      	lsls	r3, r3, #4
 8009bae:	440b      	add	r3, r1
 8009bb0:	3304      	adds	r3, #4
 8009bb2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	695a      	ldr	r2, [r3, #20]
 8009bb8:	491a      	ldr	r1, [pc, #104]	; (8009c24 <inc_lock+0x118>)
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	011b      	lsls	r3, r3, #4
 8009bbe:	440b      	add	r3, r1
 8009bc0:	3308      	adds	r3, #8
 8009bc2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009bc4:	4a17      	ldr	r2, [pc, #92]	; (8009c24 <inc_lock+0x118>)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	011b      	lsls	r3, r3, #4
 8009bca:	4413      	add	r3, r2
 8009bcc:	330c      	adds	r3, #12
 8009bce:	2200      	movs	r2, #0
 8009bd0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d009      	beq.n	8009bec <inc_lock+0xe0>
 8009bd8:	4a12      	ldr	r2, [pc, #72]	; (8009c24 <inc_lock+0x118>)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	011b      	lsls	r3, r3, #4
 8009bde:	4413      	add	r3, r2
 8009be0:	330c      	adds	r3, #12
 8009be2:	881b      	ldrh	r3, [r3, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d001      	beq.n	8009bec <inc_lock+0xe0>
 8009be8:	2300      	movs	r3, #0
 8009bea:	e015      	b.n	8009c18 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d108      	bne.n	8009c04 <inc_lock+0xf8>
 8009bf2:	4a0c      	ldr	r2, [pc, #48]	; (8009c24 <inc_lock+0x118>)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	011b      	lsls	r3, r3, #4
 8009bf8:	4413      	add	r3, r2
 8009bfa:	330c      	adds	r3, #12
 8009bfc:	881b      	ldrh	r3, [r3, #0]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	b29a      	uxth	r2, r3
 8009c02:	e001      	b.n	8009c08 <inc_lock+0xfc>
 8009c04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c08:	4906      	ldr	r1, [pc, #24]	; (8009c24 <inc_lock+0x118>)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	011b      	lsls	r3, r3, #4
 8009c0e:	440b      	add	r3, r1
 8009c10:	330c      	adds	r3, #12
 8009c12:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	3301      	adds	r3, #1
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3714      	adds	r7, #20
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr
 8009c24:	24000bb4 	.word	0x24000bb4

08009c28 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	3b01      	subs	r3, #1
 8009c34:	607b      	str	r3, [r7, #4]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d825      	bhi.n	8009c88 <dec_lock+0x60>
		n = Files[i].ctr;
 8009c3c:	4a17      	ldr	r2, [pc, #92]	; (8009c9c <dec_lock+0x74>)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	011b      	lsls	r3, r3, #4
 8009c42:	4413      	add	r3, r2
 8009c44:	330c      	adds	r3, #12
 8009c46:	881b      	ldrh	r3, [r3, #0]
 8009c48:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009c4a:	89fb      	ldrh	r3, [r7, #14]
 8009c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c50:	d101      	bne.n	8009c56 <dec_lock+0x2e>
 8009c52:	2300      	movs	r3, #0
 8009c54:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009c56:	89fb      	ldrh	r3, [r7, #14]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d002      	beq.n	8009c62 <dec_lock+0x3a>
 8009c5c:	89fb      	ldrh	r3, [r7, #14]
 8009c5e:	3b01      	subs	r3, #1
 8009c60:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009c62:	4a0e      	ldr	r2, [pc, #56]	; (8009c9c <dec_lock+0x74>)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	011b      	lsls	r3, r3, #4
 8009c68:	4413      	add	r3, r2
 8009c6a:	330c      	adds	r3, #12
 8009c6c:	89fa      	ldrh	r2, [r7, #14]
 8009c6e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009c70:	89fb      	ldrh	r3, [r7, #14]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d105      	bne.n	8009c82 <dec_lock+0x5a>
 8009c76:	4a09      	ldr	r2, [pc, #36]	; (8009c9c <dec_lock+0x74>)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	011b      	lsls	r3, r3, #4
 8009c7c:	4413      	add	r3, r2
 8009c7e:	2200      	movs	r2, #0
 8009c80:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009c82:	2300      	movs	r3, #0
 8009c84:	737b      	strb	r3, [r7, #13]
 8009c86:	e001      	b.n	8009c8c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009c88:	2302      	movs	r3, #2
 8009c8a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009c8c:	7b7b      	ldrb	r3, [r7, #13]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3714      	adds	r7, #20
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr
 8009c9a:	bf00      	nop
 8009c9c:	24000bb4 	.word	0x24000bb4

08009ca0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b085      	sub	sp, #20
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009ca8:	2300      	movs	r3, #0
 8009caa:	60fb      	str	r3, [r7, #12]
 8009cac:	e010      	b.n	8009cd0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009cae:	4a0d      	ldr	r2, [pc, #52]	; (8009ce4 <clear_lock+0x44>)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	011b      	lsls	r3, r3, #4
 8009cb4:	4413      	add	r3, r2
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d105      	bne.n	8009cca <clear_lock+0x2a>
 8009cbe:	4a09      	ldr	r2, [pc, #36]	; (8009ce4 <clear_lock+0x44>)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	011b      	lsls	r3, r3, #4
 8009cc4:	4413      	add	r3, r2
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	60fb      	str	r3, [r7, #12]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d9eb      	bls.n	8009cae <clear_lock+0xe>
	}
}
 8009cd6:	bf00      	nop
 8009cd8:	3714      	adds	r7, #20
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	24000bb4 	.word	0x24000bb4

08009ce8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b086      	sub	sp, #24
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	78db      	ldrb	r3, [r3, #3]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d034      	beq.n	8009d66 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d00:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	7858      	ldrb	r0, [r3, #1]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	697a      	ldr	r2, [r7, #20]
 8009d10:	f7ff fd0a 	bl	8009728 <disk_write>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d002      	beq.n	8009d20 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	73fb      	strb	r3, [r7, #15]
 8009d1e:	e022      	b.n	8009d66 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6a1b      	ldr	r3, [r3, #32]
 8009d2a:	697a      	ldr	r2, [r7, #20]
 8009d2c:	1ad2      	subs	r2, r2, r3
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	699b      	ldr	r3, [r3, #24]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d217      	bcs.n	8009d66 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	789b      	ldrb	r3, [r3, #2]
 8009d3a:	613b      	str	r3, [r7, #16]
 8009d3c:	e010      	b.n	8009d60 <sync_window+0x78>
					wsect += fs->fsize;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	699b      	ldr	r3, [r3, #24]
 8009d42:	697a      	ldr	r2, [r7, #20]
 8009d44:	4413      	add	r3, r2
 8009d46:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	7858      	ldrb	r0, [r3, #1]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009d52:	2301      	movs	r3, #1
 8009d54:	697a      	ldr	r2, [r7, #20]
 8009d56:	f7ff fce7 	bl	8009728 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	613b      	str	r3, [r7, #16]
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d8eb      	bhi.n	8009d3e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3718      	adds	r7, #24
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d82:	683a      	ldr	r2, [r7, #0]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d01b      	beq.n	8009dc0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f7ff ffad 	bl	8009ce8 <sync_window>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009d92:	7bfb      	ldrb	r3, [r7, #15]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d113      	bne.n	8009dc0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	7858      	ldrb	r0, [r3, #1]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009da2:	2301      	movs	r3, #1
 8009da4:	683a      	ldr	r2, [r7, #0]
 8009da6:	f7ff fc9f 	bl	80096e8 <disk_read>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d004      	beq.n	8009dba <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009db0:	f04f 33ff 	mov.w	r3, #4294967295
 8009db4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009db6:	2301      	movs	r3, #1
 8009db8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	683a      	ldr	r2, [r7, #0]
 8009dbe:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8009dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
	...

08009dcc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f7ff ff87 	bl	8009ce8 <sync_window>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009dde:	7bfb      	ldrb	r3, [r7, #15]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d158      	bne.n	8009e96 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	2b03      	cmp	r3, #3
 8009dea:	d148      	bne.n	8009e7e <sync_fs+0xb2>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	791b      	ldrb	r3, [r3, #4]
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d144      	bne.n	8009e7e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	3330      	adds	r3, #48	; 0x30
 8009df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7ff fda9 	bl	8009956 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	3330      	adds	r3, #48	; 0x30
 8009e08:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009e0c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7ff fd38 	bl	8009886 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	3330      	adds	r3, #48	; 0x30
 8009e1a:	4921      	ldr	r1, [pc, #132]	; (8009ea0 <sync_fs+0xd4>)
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7ff fd4d 	bl	80098bc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	3330      	adds	r3, #48	; 0x30
 8009e26:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009e2a:	491e      	ldr	r1, [pc, #120]	; (8009ea4 <sync_fs+0xd8>)
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7ff fd45 	bl	80098bc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	3330      	adds	r3, #48	; 0x30
 8009e36:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	691b      	ldr	r3, [r3, #16]
 8009e3e:	4619      	mov	r1, r3
 8009e40:	4610      	mov	r0, r2
 8009e42:	f7ff fd3b 	bl	80098bc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	3330      	adds	r3, #48	; 0x30
 8009e4a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	4619      	mov	r1, r3
 8009e54:	4610      	mov	r0, r2
 8009e56:	f7ff fd31 	bl	80098bc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	69db      	ldr	r3, [r3, #28]
 8009e5e:	1c5a      	adds	r2, r3, #1
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	7858      	ldrb	r0, [r3, #1]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e72:	2301      	movs	r3, #1
 8009e74:	f7ff fc58 	bl	8009728 <disk_write>
			fs->fsi_flag = 0;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	785b      	ldrb	r3, [r3, #1]
 8009e82:	2200      	movs	r2, #0
 8009e84:	2100      	movs	r1, #0
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7ff fca4 	bl	80097d4 <disk_ioctl>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d001      	beq.n	8009e96 <sync_fs+0xca>
 8009e92:	2301      	movs	r3, #1
 8009e94:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3710      	adds	r7, #16
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	41615252 	.word	0x41615252
 8009ea4:	61417272 	.word	0x61417272

08009ea8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	3b02      	subs	r3, #2
 8009eb6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	695b      	ldr	r3, [r3, #20]
 8009ebc:	3b02      	subs	r3, #2
 8009ebe:	683a      	ldr	r2, [r7, #0]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d301      	bcc.n	8009ec8 <clust2sect+0x20>
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	e008      	b.n	8009eda <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	895b      	ldrh	r3, [r3, #10]
 8009ecc:	461a      	mov	r2, r3
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	fb03 f202 	mul.w	r2, r3, r2
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ed8:	4413      	add	r3, r2
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	370c      	adds	r7, #12
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr

08009ee6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b086      	sub	sp, #24
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
 8009eee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d904      	bls.n	8009f06 <get_fat+0x20>
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	695b      	ldr	r3, [r3, #20]
 8009f00:	683a      	ldr	r2, [r7, #0]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d302      	bcc.n	8009f0c <get_fat+0x26>
		val = 1;	/* Internal error */
 8009f06:	2301      	movs	r3, #1
 8009f08:	617b      	str	r3, [r7, #20]
 8009f0a:	e08c      	b.n	800a026 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8009f10:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d045      	beq.n	8009fa6 <get_fat+0xc0>
 8009f1a:	2b03      	cmp	r3, #3
 8009f1c:	d05d      	beq.n	8009fda <get_fat+0xf4>
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d177      	bne.n	800a012 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	60fb      	str	r3, [r7, #12]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	085b      	lsrs	r3, r3, #1
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	4413      	add	r3, r2
 8009f2e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	6a1a      	ldr	r2, [r3, #32]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	0a5b      	lsrs	r3, r3, #9
 8009f38:	4413      	add	r3, r2
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	6938      	ldr	r0, [r7, #16]
 8009f3e:	f7ff ff17 	bl	8009d70 <move_window>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d167      	bne.n	800a018 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	1c5a      	adds	r2, r3, #1
 8009f4c:	60fa      	str	r2, [r7, #12]
 8009f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f52:	693a      	ldr	r2, [r7, #16]
 8009f54:	4413      	add	r3, r2
 8009f56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f5a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	6a1a      	ldr	r2, [r3, #32]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	0a5b      	lsrs	r3, r3, #9
 8009f64:	4413      	add	r3, r2
 8009f66:	4619      	mov	r1, r3
 8009f68:	6938      	ldr	r0, [r7, #16]
 8009f6a:	f7ff ff01 	bl	8009d70 <move_window>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d153      	bne.n	800a01c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f7a:	693a      	ldr	r2, [r7, #16]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f82:	021b      	lsls	r3, r3, #8
 8009f84:	461a      	mov	r2, r3
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	f003 0301 	and.w	r3, r3, #1
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d002      	beq.n	8009f9c <get_fat+0xb6>
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	091b      	lsrs	r3, r3, #4
 8009f9a:	e002      	b.n	8009fa2 <get_fat+0xbc>
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fa2:	617b      	str	r3, [r7, #20]
			break;
 8009fa4:	e03f      	b.n	800a026 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	6a1a      	ldr	r2, [r3, #32]
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	0a1b      	lsrs	r3, r3, #8
 8009fae:	4413      	add	r3, r2
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	6938      	ldr	r0, [r7, #16]
 8009fb4:	f7ff fedc 	bl	8009d70 <move_window>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d130      	bne.n	800a020 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	005b      	lsls	r3, r3, #1
 8009fc8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009fcc:	4413      	add	r3, r2
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7ff fc1e 	bl	8009810 <ld_word>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	617b      	str	r3, [r7, #20]
			break;
 8009fd8:	e025      	b.n	800a026 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	6a1a      	ldr	r2, [r3, #32]
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	09db      	lsrs	r3, r3, #7
 8009fe2:	4413      	add	r3, r2
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	6938      	ldr	r0, [r7, #16]
 8009fe8:	f7ff fec2 	bl	8009d70 <move_window>
 8009fec:	4603      	mov	r3, r0
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d118      	bne.n	800a024 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a000:	4413      	add	r3, r2
 800a002:	4618      	mov	r0, r3
 800a004:	f7ff fc1c 	bl	8009840 <ld_dword>
 800a008:	4603      	mov	r3, r0
 800a00a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a00e:	617b      	str	r3, [r7, #20]
			break;
 800a010:	e009      	b.n	800a026 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a012:	2301      	movs	r3, #1
 800a014:	617b      	str	r3, [r7, #20]
 800a016:	e006      	b.n	800a026 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a018:	bf00      	nop
 800a01a:	e004      	b.n	800a026 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a01c:	bf00      	nop
 800a01e:	e002      	b.n	800a026 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a020:	bf00      	nop
 800a022:	e000      	b.n	800a026 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a024:	bf00      	nop
		}
	}

	return val;
 800a026:	697b      	ldr	r3, [r7, #20]
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3718      	adds	r7, #24
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a030:	b590      	push	{r4, r7, lr}
 800a032:	b089      	sub	sp, #36	; 0x24
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a03c:	2302      	movs	r3, #2
 800a03e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	2b01      	cmp	r3, #1
 800a044:	f240 80d6 	bls.w	800a1f4 <put_fat+0x1c4>
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	695b      	ldr	r3, [r3, #20]
 800a04c:	68ba      	ldr	r2, [r7, #8]
 800a04e:	429a      	cmp	r2, r3
 800a050:	f080 80d0 	bcs.w	800a1f4 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	2b02      	cmp	r3, #2
 800a05a:	d073      	beq.n	800a144 <put_fat+0x114>
 800a05c:	2b03      	cmp	r3, #3
 800a05e:	f000 8091 	beq.w	800a184 <put_fat+0x154>
 800a062:	2b01      	cmp	r3, #1
 800a064:	f040 80c6 	bne.w	800a1f4 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	61bb      	str	r3, [r7, #24]
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	085b      	lsrs	r3, r3, #1
 800a070:	69ba      	ldr	r2, [r7, #24]
 800a072:	4413      	add	r3, r2
 800a074:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	6a1a      	ldr	r2, [r3, #32]
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	0a5b      	lsrs	r3, r3, #9
 800a07e:	4413      	add	r3, r2
 800a080:	4619      	mov	r1, r3
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f7ff fe74 	bl	8009d70 <move_window>
 800a088:	4603      	mov	r3, r0
 800a08a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a08c:	7ffb      	ldrb	r3, [r7, #31]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	f040 80a9 	bne.w	800a1e6 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	1c59      	adds	r1, r3, #1
 800a09e:	61b9      	str	r1, [r7, #24]
 800a0a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0a4:	4413      	add	r3, r2
 800a0a6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	f003 0301 	and.w	r3, r3, #1
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d00d      	beq.n	800a0ce <put_fat+0x9e>
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	b25b      	sxtb	r3, r3
 800a0b8:	f003 030f 	and.w	r3, r3, #15
 800a0bc:	b25a      	sxtb	r2, r3
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	011b      	lsls	r3, r3, #4
 800a0c4:	b25b      	sxtb	r3, r3
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	b25b      	sxtb	r3, r3
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	e001      	b.n	800a0d2 <put_fat+0xa2>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	697a      	ldr	r2, [r7, #20]
 800a0d4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6a1a      	ldr	r2, [r3, #32]
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	0a5b      	lsrs	r3, r3, #9
 800a0e4:	4413      	add	r3, r2
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f7ff fe41 	bl	8009d70 <move_window>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a0f2:	7ffb      	ldrb	r3, [r7, #31]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d178      	bne.n	800a1ea <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a104:	4413      	add	r3, r2
 800a106:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	f003 0301 	and.w	r3, r3, #1
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d003      	beq.n	800a11a <put_fat+0xea>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	091b      	lsrs	r3, r3, #4
 800a116:	b2db      	uxtb	r3, r3
 800a118:	e00e      	b.n	800a138 <put_fat+0x108>
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	b25b      	sxtb	r3, r3
 800a120:	f023 030f 	bic.w	r3, r3, #15
 800a124:	b25a      	sxtb	r2, r3
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	0a1b      	lsrs	r3, r3, #8
 800a12a:	b25b      	sxtb	r3, r3
 800a12c:	f003 030f 	and.w	r3, r3, #15
 800a130:	b25b      	sxtb	r3, r3
 800a132:	4313      	orrs	r3, r2
 800a134:	b25b      	sxtb	r3, r3
 800a136:	b2db      	uxtb	r3, r3
 800a138:	697a      	ldr	r2, [r7, #20]
 800a13a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2201      	movs	r2, #1
 800a140:	70da      	strb	r2, [r3, #3]
			break;
 800a142:	e057      	b.n	800a1f4 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	6a1a      	ldr	r2, [r3, #32]
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	0a1b      	lsrs	r3, r3, #8
 800a14c:	4413      	add	r3, r2
 800a14e:	4619      	mov	r1, r3
 800a150:	68f8      	ldr	r0, [r7, #12]
 800a152:	f7ff fe0d 	bl	8009d70 <move_window>
 800a156:	4603      	mov	r3, r0
 800a158:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a15a:	7ffb      	ldrb	r3, [r7, #31]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d146      	bne.n	800a1ee <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	005b      	lsls	r3, r3, #1
 800a16a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a16e:	4413      	add	r3, r2
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	b292      	uxth	r2, r2
 800a174:	4611      	mov	r1, r2
 800a176:	4618      	mov	r0, r3
 800a178:	f7ff fb85 	bl	8009886 <st_word>
			fs->wflag = 1;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2201      	movs	r2, #1
 800a180:	70da      	strb	r2, [r3, #3]
			break;
 800a182:	e037      	b.n	800a1f4 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	6a1a      	ldr	r2, [r3, #32]
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	09db      	lsrs	r3, r3, #7
 800a18c:	4413      	add	r3, r2
 800a18e:	4619      	mov	r1, r3
 800a190:	68f8      	ldr	r0, [r7, #12]
 800a192:	f7ff fded 	bl	8009d70 <move_window>
 800a196:	4603      	mov	r3, r0
 800a198:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a19a:	7ffb      	ldrb	r3, [r7, #31]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d128      	bne.n	800a1f2 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a1b4:	4413      	add	r3, r2
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7ff fb42 	bl	8009840 <ld_dword>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a1c2:	4323      	orrs	r3, r4
 800a1c4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a1d4:	4413      	add	r3, r2
 800a1d6:	6879      	ldr	r1, [r7, #4]
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f7ff fb6f 	bl	80098bc <st_dword>
			fs->wflag = 1;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	70da      	strb	r2, [r3, #3]
			break;
 800a1e4:	e006      	b.n	800a1f4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a1e6:	bf00      	nop
 800a1e8:	e004      	b.n	800a1f4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a1ea:	bf00      	nop
 800a1ec:	e002      	b.n	800a1f4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a1ee:	bf00      	nop
 800a1f0:	e000      	b.n	800a1f4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a1f2:	bf00      	nop
		}
	}
	return res;
 800a1f4:	7ffb      	ldrb	r3, [r7, #31]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3724      	adds	r7, #36	; 0x24
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd90      	pop	{r4, r7, pc}

0800a1fe <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b088      	sub	sp, #32
 800a202:	af00      	add	r7, sp, #0
 800a204:	60f8      	str	r0, [r7, #12]
 800a206:	60b9      	str	r1, [r7, #8]
 800a208:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a20a:	2300      	movs	r3, #0
 800a20c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	2b01      	cmp	r3, #1
 800a218:	d904      	bls.n	800a224 <remove_chain+0x26>
 800a21a:	69bb      	ldr	r3, [r7, #24]
 800a21c:	695b      	ldr	r3, [r3, #20]
 800a21e:	68ba      	ldr	r2, [r7, #8]
 800a220:	429a      	cmp	r2, r3
 800a222:	d301      	bcc.n	800a228 <remove_chain+0x2a>
 800a224:	2302      	movs	r3, #2
 800a226:	e04b      	b.n	800a2c0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00c      	beq.n	800a248 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a22e:	f04f 32ff 	mov.w	r2, #4294967295
 800a232:	6879      	ldr	r1, [r7, #4]
 800a234:	69b8      	ldr	r0, [r7, #24]
 800a236:	f7ff fefb 	bl	800a030 <put_fat>
 800a23a:	4603      	mov	r3, r0
 800a23c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a23e:	7ffb      	ldrb	r3, [r7, #31]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d001      	beq.n	800a248 <remove_chain+0x4a>
 800a244:	7ffb      	ldrb	r3, [r7, #31]
 800a246:	e03b      	b.n	800a2c0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a248:	68b9      	ldr	r1, [r7, #8]
 800a24a:	68f8      	ldr	r0, [r7, #12]
 800a24c:	f7ff fe4b 	bl	8009ee6 <get_fat>
 800a250:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d031      	beq.n	800a2bc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d101      	bne.n	800a262 <remove_chain+0x64>
 800a25e:	2302      	movs	r3, #2
 800a260:	e02e      	b.n	800a2c0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a268:	d101      	bne.n	800a26e <remove_chain+0x70>
 800a26a:	2301      	movs	r3, #1
 800a26c:	e028      	b.n	800a2c0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a26e:	2200      	movs	r2, #0
 800a270:	68b9      	ldr	r1, [r7, #8]
 800a272:	69b8      	ldr	r0, [r7, #24]
 800a274:	f7ff fedc 	bl	800a030 <put_fat>
 800a278:	4603      	mov	r3, r0
 800a27a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a27c:	7ffb      	ldrb	r3, [r7, #31]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d001      	beq.n	800a286 <remove_chain+0x88>
 800a282:	7ffb      	ldrb	r3, [r7, #31]
 800a284:	e01c      	b.n	800a2c0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a286:	69bb      	ldr	r3, [r7, #24]
 800a288:	691a      	ldr	r2, [r3, #16]
 800a28a:	69bb      	ldr	r3, [r7, #24]
 800a28c:	695b      	ldr	r3, [r3, #20]
 800a28e:	3b02      	subs	r3, #2
 800a290:	429a      	cmp	r2, r3
 800a292:	d20b      	bcs.n	800a2ac <remove_chain+0xae>
			fs->free_clst++;
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	691b      	ldr	r3, [r3, #16]
 800a298:	1c5a      	adds	r2, r3, #1
 800a29a:	69bb      	ldr	r3, [r7, #24]
 800a29c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	791b      	ldrb	r3, [r3, #4]
 800a2a2:	f043 0301 	orr.w	r3, r3, #1
 800a2a6:	b2da      	uxtb	r2, r3
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	695b      	ldr	r3, [r3, #20]
 800a2b4:	68ba      	ldr	r2, [r7, #8]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d3c6      	bcc.n	800a248 <remove_chain+0x4a>
 800a2ba:	e000      	b.n	800a2be <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a2bc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a2be:	2300      	movs	r3, #0
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3720      	adds	r7, #32
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b088      	sub	sp, #32
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d10d      	bne.n	800a2fa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a2e4:	69bb      	ldr	r3, [r7, #24]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d004      	beq.n	800a2f4 <create_chain+0x2c>
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	695b      	ldr	r3, [r3, #20]
 800a2ee:	69ba      	ldr	r2, [r7, #24]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d31b      	bcc.n	800a32c <create_chain+0x64>
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	61bb      	str	r3, [r7, #24]
 800a2f8:	e018      	b.n	800a32c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a2fa:	6839      	ldr	r1, [r7, #0]
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f7ff fdf2 	bl	8009ee6 <get_fat>
 800a302:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2b01      	cmp	r3, #1
 800a308:	d801      	bhi.n	800a30e <create_chain+0x46>
 800a30a:	2301      	movs	r3, #1
 800a30c:	e070      	b.n	800a3f0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a314:	d101      	bne.n	800a31a <create_chain+0x52>
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	e06a      	b.n	800a3f0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	695b      	ldr	r3, [r3, #20]
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	429a      	cmp	r2, r3
 800a322:	d201      	bcs.n	800a328 <create_chain+0x60>
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	e063      	b.n	800a3f0 <create_chain+0x128>
		scl = clst;
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a32c:	69bb      	ldr	r3, [r7, #24]
 800a32e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	3301      	adds	r3, #1
 800a334:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	695b      	ldr	r3, [r3, #20]
 800a33a:	69fa      	ldr	r2, [r7, #28]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d307      	bcc.n	800a350 <create_chain+0x88>
				ncl = 2;
 800a340:	2302      	movs	r3, #2
 800a342:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a344:	69fa      	ldr	r2, [r7, #28]
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d901      	bls.n	800a350 <create_chain+0x88>
 800a34c:	2300      	movs	r3, #0
 800a34e:	e04f      	b.n	800a3f0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a350:	69f9      	ldr	r1, [r7, #28]
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f7ff fdc7 	bl	8009ee6 <get_fat>
 800a358:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00e      	beq.n	800a37e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2b01      	cmp	r3, #1
 800a364:	d003      	beq.n	800a36e <create_chain+0xa6>
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a36c:	d101      	bne.n	800a372 <create_chain+0xaa>
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	e03e      	b.n	800a3f0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a372:	69fa      	ldr	r2, [r7, #28]
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	429a      	cmp	r2, r3
 800a378:	d1da      	bne.n	800a330 <create_chain+0x68>
 800a37a:	2300      	movs	r3, #0
 800a37c:	e038      	b.n	800a3f0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a37e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a380:	f04f 32ff 	mov.w	r2, #4294967295
 800a384:	69f9      	ldr	r1, [r7, #28]
 800a386:	6938      	ldr	r0, [r7, #16]
 800a388:	f7ff fe52 	bl	800a030 <put_fat>
 800a38c:	4603      	mov	r3, r0
 800a38e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a390:	7dfb      	ldrb	r3, [r7, #23]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d109      	bne.n	800a3aa <create_chain+0xe2>
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d006      	beq.n	800a3aa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a39c:	69fa      	ldr	r2, [r7, #28]
 800a39e:	6839      	ldr	r1, [r7, #0]
 800a3a0:	6938      	ldr	r0, [r7, #16]
 800a3a2:	f7ff fe45 	bl	800a030 <put_fat>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a3aa:	7dfb      	ldrb	r3, [r7, #23]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d116      	bne.n	800a3de <create_chain+0x116>
		fs->last_clst = ncl;
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	69fa      	ldr	r2, [r7, #28]
 800a3b4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	691a      	ldr	r2, [r3, #16]
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	695b      	ldr	r3, [r3, #20]
 800a3be:	3b02      	subs	r3, #2
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d804      	bhi.n	800a3ce <create_chain+0x106>
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	691b      	ldr	r3, [r3, #16]
 800a3c8:	1e5a      	subs	r2, r3, #1
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	791b      	ldrb	r3, [r3, #4]
 800a3d2:	f043 0301 	orr.w	r3, r3, #1
 800a3d6:	b2da      	uxtb	r2, r3
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	711a      	strb	r2, [r3, #4]
 800a3dc:	e007      	b.n	800a3ee <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a3de:	7dfb      	ldrb	r3, [r7, #23]
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d102      	bne.n	800a3ea <create_chain+0x122>
 800a3e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a3e8:	e000      	b.n	800a3ec <create_chain+0x124>
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a3ee:	69fb      	ldr	r3, [r7, #28]
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3720      	adds	r7, #32
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b087      	sub	sp, #28
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a40c:	3304      	adds	r3, #4
 800a40e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	0a5b      	lsrs	r3, r3, #9
 800a414:	68fa      	ldr	r2, [r7, #12]
 800a416:	8952      	ldrh	r2, [r2, #10]
 800a418:	fbb3 f3f2 	udiv	r3, r3, r2
 800a41c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	1d1a      	adds	r2, r3, #4
 800a422:	613a      	str	r2, [r7, #16]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d101      	bne.n	800a432 <clmt_clust+0x3a>
 800a42e:	2300      	movs	r3, #0
 800a430:	e010      	b.n	800a454 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a432:	697a      	ldr	r2, [r7, #20]
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	429a      	cmp	r2, r3
 800a438:	d307      	bcc.n	800a44a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a43a:	697a      	ldr	r2, [r7, #20]
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	1ad3      	subs	r3, r2, r3
 800a440:	617b      	str	r3, [r7, #20]
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	3304      	adds	r3, #4
 800a446:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a448:	e7e9      	b.n	800a41e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a44a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	4413      	add	r3, r2
}
 800a454:	4618      	mov	r0, r3
 800a456:	371c      	adds	r7, #28
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b086      	sub	sp, #24
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a476:	d204      	bcs.n	800a482 <dir_sdi+0x22>
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	f003 031f 	and.w	r3, r3, #31
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d001      	beq.n	800a486 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a482:	2302      	movs	r3, #2
 800a484:	e063      	b.n	800a54e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	683a      	ldr	r2, [r7, #0]
 800a48a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d106      	bne.n	800a4a6 <dir_sdi+0x46>
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	781b      	ldrb	r3, [r3, #0]
 800a49c:	2b02      	cmp	r3, #2
 800a49e:	d902      	bls.n	800a4a6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d10c      	bne.n	800a4c6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	095b      	lsrs	r3, r3, #5
 800a4b0:	693a      	ldr	r2, [r7, #16]
 800a4b2:	8912      	ldrh	r2, [r2, #8]
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d301      	bcc.n	800a4bc <dir_sdi+0x5c>
 800a4b8:	2302      	movs	r3, #2
 800a4ba:	e048      	b.n	800a54e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	61da      	str	r2, [r3, #28]
 800a4c4:	e029      	b.n	800a51a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	895b      	ldrh	r3, [r3, #10]
 800a4ca:	025b      	lsls	r3, r3, #9
 800a4cc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a4ce:	e019      	b.n	800a504 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6979      	ldr	r1, [r7, #20]
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7ff fd06 	bl	8009ee6 <get_fat>
 800a4da:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4e2:	d101      	bne.n	800a4e8 <dir_sdi+0x88>
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e032      	b.n	800a54e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d904      	bls.n	800a4f8 <dir_sdi+0x98>
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	695b      	ldr	r3, [r3, #20]
 800a4f2:	697a      	ldr	r2, [r7, #20]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d301      	bcc.n	800a4fc <dir_sdi+0x9c>
 800a4f8:	2302      	movs	r3, #2
 800a4fa:	e028      	b.n	800a54e <dir_sdi+0xee>
			ofs -= csz;
 800a4fc:	683a      	ldr	r2, [r7, #0]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	1ad3      	subs	r3, r2, r3
 800a502:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a504:	683a      	ldr	r2, [r7, #0]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d2e1      	bcs.n	800a4d0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a50c:	6979      	ldr	r1, [r7, #20]
 800a50e:	6938      	ldr	r0, [r7, #16]
 800a510:	f7ff fcca 	bl	8009ea8 <clust2sect>
 800a514:	4602      	mov	r2, r0
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	697a      	ldr	r2, [r7, #20]
 800a51e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	69db      	ldr	r3, [r3, #28]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d101      	bne.n	800a52c <dir_sdi+0xcc>
 800a528:	2302      	movs	r3, #2
 800a52a:	e010      	b.n	800a54e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	69da      	ldr	r2, [r3, #28]
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	0a5b      	lsrs	r3, r3, #9
 800a534:	441a      	add	r2, r3
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a546:	441a      	add	r2, r3
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a54c:	2300      	movs	r3, #0
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3718      	adds	r7, #24
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b086      	sub	sp, #24
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
 800a55e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	695b      	ldr	r3, [r3, #20]
 800a56a:	3320      	adds	r3, #32
 800a56c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	69db      	ldr	r3, [r3, #28]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d003      	beq.n	800a57e <dir_next+0x28>
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a57c:	d301      	bcc.n	800a582 <dir_next+0x2c>
 800a57e:	2304      	movs	r3, #4
 800a580:	e0aa      	b.n	800a6d8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f040 8098 	bne.w	800a6be <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	69db      	ldr	r3, [r3, #28]
 800a592:	1c5a      	adds	r2, r3, #1
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	699b      	ldr	r3, [r3, #24]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d10b      	bne.n	800a5b8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	095b      	lsrs	r3, r3, #5
 800a5a4:	68fa      	ldr	r2, [r7, #12]
 800a5a6:	8912      	ldrh	r2, [r2, #8]
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	f0c0 8088 	bcc.w	800a6be <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	61da      	str	r2, [r3, #28]
 800a5b4:	2304      	movs	r3, #4
 800a5b6:	e08f      	b.n	800a6d8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	0a5b      	lsrs	r3, r3, #9
 800a5bc:	68fa      	ldr	r2, [r7, #12]
 800a5be:	8952      	ldrh	r2, [r2, #10]
 800a5c0:	3a01      	subs	r2, #1
 800a5c2:	4013      	ands	r3, r2
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d17a      	bne.n	800a6be <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	699b      	ldr	r3, [r3, #24]
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	4610      	mov	r0, r2
 800a5d2:	f7ff fc88 	bl	8009ee6 <get_fat>
 800a5d6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d801      	bhi.n	800a5e2 <dir_next+0x8c>
 800a5de:	2302      	movs	r3, #2
 800a5e0:	e07a      	b.n	800a6d8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e8:	d101      	bne.n	800a5ee <dir_next+0x98>
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e074      	b.n	800a6d8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	695b      	ldr	r3, [r3, #20]
 800a5f2:	697a      	ldr	r2, [r7, #20]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d358      	bcc.n	800a6aa <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d104      	bne.n	800a608 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	61da      	str	r2, [r3, #28]
 800a604:	2304      	movs	r3, #4
 800a606:	e067      	b.n	800a6d8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	699b      	ldr	r3, [r3, #24]
 800a60e:	4619      	mov	r1, r3
 800a610:	4610      	mov	r0, r2
 800a612:	f7ff fe59 	bl	800a2c8 <create_chain>
 800a616:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d101      	bne.n	800a622 <dir_next+0xcc>
 800a61e:	2307      	movs	r3, #7
 800a620:	e05a      	b.n	800a6d8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	2b01      	cmp	r3, #1
 800a626:	d101      	bne.n	800a62c <dir_next+0xd6>
 800a628:	2302      	movs	r3, #2
 800a62a:	e055      	b.n	800a6d8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a632:	d101      	bne.n	800a638 <dir_next+0xe2>
 800a634:	2301      	movs	r3, #1
 800a636:	e04f      	b.n	800a6d8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a638:	68f8      	ldr	r0, [r7, #12]
 800a63a:	f7ff fb55 	bl	8009ce8 <sync_window>
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d001      	beq.n	800a648 <dir_next+0xf2>
 800a644:	2301      	movs	r3, #1
 800a646:	e047      	b.n	800a6d8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	3330      	adds	r3, #48	; 0x30
 800a64c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a650:	2100      	movs	r1, #0
 800a652:	4618      	mov	r0, r3
 800a654:	f7ff f97f 	bl	8009956 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a658:	2300      	movs	r3, #0
 800a65a:	613b      	str	r3, [r7, #16]
 800a65c:	6979      	ldr	r1, [r7, #20]
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f7ff fc22 	bl	8009ea8 <clust2sect>
 800a664:	4602      	mov	r2, r0
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	62da      	str	r2, [r3, #44]	; 0x2c
 800a66a:	e012      	b.n	800a692 <dir_next+0x13c>
						fs->wflag = 1;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2201      	movs	r2, #1
 800a670:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a672:	68f8      	ldr	r0, [r7, #12]
 800a674:	f7ff fb38 	bl	8009ce8 <sync_window>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d001      	beq.n	800a682 <dir_next+0x12c>
 800a67e:	2301      	movs	r3, #1
 800a680:	e02a      	b.n	800a6d8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	3301      	adds	r3, #1
 800a686:	613b      	str	r3, [r7, #16]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a68c:	1c5a      	adds	r2, r3, #1
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	62da      	str	r2, [r3, #44]	; 0x2c
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	895b      	ldrh	r3, [r3, #10]
 800a696:	461a      	mov	r2, r3
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d3e6      	bcc.n	800a66c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	1ad2      	subs	r2, r2, r3
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	697a      	ldr	r2, [r7, #20]
 800a6ae:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a6b0:	6979      	ldr	r1, [r7, #20]
 800a6b2:	68f8      	ldr	r0, [r7, #12]
 800a6b4:	f7ff fbf8 	bl	8009ea8 <clust2sect>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	68ba      	ldr	r2, [r7, #8]
 800a6c2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6d0:	441a      	add	r2, r3
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a6d6:	2300      	movs	r3, #0
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3718      	adds	r7, #24
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b086      	sub	sp, #24
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f7ff feb4 	bl	800a460 <dir_sdi>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a6fc:	7dfb      	ldrb	r3, [r7, #23]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d12b      	bne.n	800a75a <dir_alloc+0x7a>
		n = 0;
 800a702:	2300      	movs	r3, #0
 800a704:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	69db      	ldr	r3, [r3, #28]
 800a70a:	4619      	mov	r1, r3
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	f7ff fb2f 	bl	8009d70 <move_window>
 800a712:	4603      	mov	r3, r0
 800a714:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a716:	7dfb      	ldrb	r3, [r7, #23]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d11d      	bne.n	800a758 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6a1b      	ldr	r3, [r3, #32]
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	2be5      	cmp	r3, #229	; 0xe5
 800a724:	d004      	beq.n	800a730 <dir_alloc+0x50>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6a1b      	ldr	r3, [r3, #32]
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d107      	bne.n	800a740 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	3301      	adds	r3, #1
 800a734:	613b      	str	r3, [r7, #16]
 800a736:	693a      	ldr	r2, [r7, #16]
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d102      	bne.n	800a744 <dir_alloc+0x64>
 800a73e:	e00c      	b.n	800a75a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a740:	2300      	movs	r3, #0
 800a742:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a744:	2101      	movs	r1, #1
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f7ff ff05 	bl	800a556 <dir_next>
 800a74c:	4603      	mov	r3, r0
 800a74e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a750:	7dfb      	ldrb	r3, [r7, #23]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d0d7      	beq.n	800a706 <dir_alloc+0x26>
 800a756:	e000      	b.n	800a75a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a758:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a75a:	7dfb      	ldrb	r3, [r7, #23]
 800a75c:	2b04      	cmp	r3, #4
 800a75e:	d101      	bne.n	800a764 <dir_alloc+0x84>
 800a760:	2307      	movs	r3, #7
 800a762:	75fb      	strb	r3, [r7, #23]
	return res;
 800a764:	7dfb      	ldrb	r3, [r7, #23]
}
 800a766:	4618      	mov	r0, r3
 800a768:	3718      	adds	r7, #24
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}

0800a76e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a76e:	b580      	push	{r7, lr}
 800a770:	b084      	sub	sp, #16
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]
 800a776:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	331a      	adds	r3, #26
 800a77c:	4618      	mov	r0, r3
 800a77e:	f7ff f847 	bl	8009810 <ld_word>
 800a782:	4603      	mov	r3, r0
 800a784:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	2b03      	cmp	r3, #3
 800a78c:	d109      	bne.n	800a7a2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	3314      	adds	r3, #20
 800a792:	4618      	mov	r0, r3
 800a794:	f7ff f83c 	bl	8009810 <ld_word>
 800a798:	4603      	mov	r3, r0
 800a79a:	041b      	lsls	r3, r3, #16
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3710      	adds	r7, #16
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	331a      	adds	r3, #26
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	b292      	uxth	r2, r2
 800a7c0:	4611      	mov	r1, r2
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7ff f85f 	bl	8009886 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	2b03      	cmp	r3, #3
 800a7ce:	d109      	bne.n	800a7e4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	f103 0214 	add.w	r2, r3, #20
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	0c1b      	lsrs	r3, r3, #16
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	4619      	mov	r1, r3
 800a7de:	4610      	mov	r0, r2
 800a7e0:	f7ff f851 	bl	8009886 <st_word>
	}
}
 800a7e4:	bf00      	nop
 800a7e6:	3710      	adds	r7, #16
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b086      	sub	sp, #24
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f7ff fe2f 	bl	800a460 <dir_sdi>
 800a802:	4603      	mov	r3, r0
 800a804:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a806:	7dfb      	ldrb	r3, [r7, #23]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d001      	beq.n	800a810 <dir_find+0x24>
 800a80c:	7dfb      	ldrb	r3, [r7, #23]
 800a80e:	e03e      	b.n	800a88e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	69db      	ldr	r3, [r3, #28]
 800a814:	4619      	mov	r1, r3
 800a816:	6938      	ldr	r0, [r7, #16]
 800a818:	f7ff faaa 	bl	8009d70 <move_window>
 800a81c:	4603      	mov	r3, r0
 800a81e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a820:	7dfb      	ldrb	r3, [r7, #23]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d12f      	bne.n	800a886 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6a1b      	ldr	r3, [r3, #32]
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a82e:	7bfb      	ldrb	r3, [r7, #15]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d102      	bne.n	800a83a <dir_find+0x4e>
 800a834:	2304      	movs	r3, #4
 800a836:	75fb      	strb	r3, [r7, #23]
 800a838:	e028      	b.n	800a88c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6a1b      	ldr	r3, [r3, #32]
 800a83e:	330b      	adds	r3, #11
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a846:	b2da      	uxtb	r2, r3
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6a1b      	ldr	r3, [r3, #32]
 800a850:	330b      	adds	r3, #11
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	f003 0308 	and.w	r3, r3, #8
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d10a      	bne.n	800a872 <dir_find+0x86>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6a18      	ldr	r0, [r3, #32]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	3324      	adds	r3, #36	; 0x24
 800a864:	220b      	movs	r2, #11
 800a866:	4619      	mov	r1, r3
 800a868:	f7ff f88f 	bl	800998a <mem_cmp>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d00b      	beq.n	800a88a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a872:	2100      	movs	r1, #0
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f7ff fe6e 	bl	800a556 <dir_next>
 800a87a:	4603      	mov	r3, r0
 800a87c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a87e:	7dfb      	ldrb	r3, [r7, #23]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d0c5      	beq.n	800a810 <dir_find+0x24>
 800a884:	e002      	b.n	800a88c <dir_find+0xa0>
		if (res != FR_OK) break;
 800a886:	bf00      	nop
 800a888:	e000      	b.n	800a88c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a88a:	bf00      	nop

	return res;
 800a88c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3718      	adds	r7, #24
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b084      	sub	sp, #16
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a8a4:	2101      	movs	r1, #1
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f7ff ff1a 	bl	800a6e0 <dir_alloc>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a8b0:	7bfb      	ldrb	r3, [r7, #15]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d11c      	bne.n	800a8f0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	69db      	ldr	r3, [r3, #28]
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	68b8      	ldr	r0, [r7, #8]
 800a8be:	f7ff fa57 	bl	8009d70 <move_window>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a8c6:	7bfb      	ldrb	r3, [r7, #15]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d111      	bne.n	800a8f0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a1b      	ldr	r3, [r3, #32]
 800a8d0:	2220      	movs	r2, #32
 800a8d2:	2100      	movs	r1, #0
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7ff f83e 	bl	8009956 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a18      	ldr	r0, [r3, #32]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	3324      	adds	r3, #36	; 0x24
 800a8e2:	220b      	movs	r2, #11
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	f7ff f815 	bl	8009914 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a8f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
	...

0800a8fc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b088      	sub	sp, #32
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	60fb      	str	r3, [r7, #12]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	3324      	adds	r3, #36	; 0x24
 800a910:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a912:	220b      	movs	r2, #11
 800a914:	2120      	movs	r1, #32
 800a916:	68b8      	ldr	r0, [r7, #8]
 800a918:	f7ff f81d 	bl	8009956 <mem_set>
	si = i = 0; ni = 8;
 800a91c:	2300      	movs	r3, #0
 800a91e:	613b      	str	r3, [r7, #16]
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	617b      	str	r3, [r7, #20]
 800a924:	2308      	movs	r3, #8
 800a926:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	1c5a      	adds	r2, r3, #1
 800a92c:	617a      	str	r2, [r7, #20]
 800a92e:	68fa      	ldr	r2, [r7, #12]
 800a930:	4413      	add	r3, r2
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a936:	7ffb      	ldrb	r3, [r7, #31]
 800a938:	2b20      	cmp	r3, #32
 800a93a:	d94e      	bls.n	800a9da <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a93c:	7ffb      	ldrb	r3, [r7, #31]
 800a93e:	2b2f      	cmp	r3, #47	; 0x2f
 800a940:	d006      	beq.n	800a950 <create_name+0x54>
 800a942:	7ffb      	ldrb	r3, [r7, #31]
 800a944:	2b5c      	cmp	r3, #92	; 0x5c
 800a946:	d110      	bne.n	800a96a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a948:	e002      	b.n	800a950 <create_name+0x54>
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	3301      	adds	r3, #1
 800a94e:	617b      	str	r3, [r7, #20]
 800a950:	68fa      	ldr	r2, [r7, #12]
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	4413      	add	r3, r2
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	2b2f      	cmp	r3, #47	; 0x2f
 800a95a:	d0f6      	beq.n	800a94a <create_name+0x4e>
 800a95c:	68fa      	ldr	r2, [r7, #12]
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	4413      	add	r3, r2
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	2b5c      	cmp	r3, #92	; 0x5c
 800a966:	d0f0      	beq.n	800a94a <create_name+0x4e>
			break;
 800a968:	e038      	b.n	800a9dc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a96a:	7ffb      	ldrb	r3, [r7, #31]
 800a96c:	2b2e      	cmp	r3, #46	; 0x2e
 800a96e:	d003      	beq.n	800a978 <create_name+0x7c>
 800a970:	693a      	ldr	r2, [r7, #16]
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	429a      	cmp	r2, r3
 800a976:	d30c      	bcc.n	800a992 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a978:	69bb      	ldr	r3, [r7, #24]
 800a97a:	2b0b      	cmp	r3, #11
 800a97c:	d002      	beq.n	800a984 <create_name+0x88>
 800a97e:	7ffb      	ldrb	r3, [r7, #31]
 800a980:	2b2e      	cmp	r3, #46	; 0x2e
 800a982:	d001      	beq.n	800a988 <create_name+0x8c>
 800a984:	2306      	movs	r3, #6
 800a986:	e044      	b.n	800aa12 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a988:	2308      	movs	r3, #8
 800a98a:	613b      	str	r3, [r7, #16]
 800a98c:	230b      	movs	r3, #11
 800a98e:	61bb      	str	r3, [r7, #24]
			continue;
 800a990:	e022      	b.n	800a9d8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a992:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a996:	2b00      	cmp	r3, #0
 800a998:	da04      	bge.n	800a9a4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a99a:	7ffb      	ldrb	r3, [r7, #31]
 800a99c:	3b80      	subs	r3, #128	; 0x80
 800a99e:	4a1f      	ldr	r2, [pc, #124]	; (800aa1c <create_name+0x120>)
 800a9a0:	5cd3      	ldrb	r3, [r2, r3]
 800a9a2:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a9a4:	7ffb      	ldrb	r3, [r7, #31]
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	481d      	ldr	r0, [pc, #116]	; (800aa20 <create_name+0x124>)
 800a9aa:	f7ff f815 	bl	80099d8 <chk_chr>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d001      	beq.n	800a9b8 <create_name+0xbc>
 800a9b4:	2306      	movs	r3, #6
 800a9b6:	e02c      	b.n	800aa12 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a9b8:	7ffb      	ldrb	r3, [r7, #31]
 800a9ba:	2b60      	cmp	r3, #96	; 0x60
 800a9bc:	d905      	bls.n	800a9ca <create_name+0xce>
 800a9be:	7ffb      	ldrb	r3, [r7, #31]
 800a9c0:	2b7a      	cmp	r3, #122	; 0x7a
 800a9c2:	d802      	bhi.n	800a9ca <create_name+0xce>
 800a9c4:	7ffb      	ldrb	r3, [r7, #31]
 800a9c6:	3b20      	subs	r3, #32
 800a9c8:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	1c5a      	adds	r2, r3, #1
 800a9ce:	613a      	str	r2, [r7, #16]
 800a9d0:	68ba      	ldr	r2, [r7, #8]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	7ffa      	ldrb	r2, [r7, #31]
 800a9d6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a9d8:	e7a6      	b.n	800a928 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a9da:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a9dc:	68fa      	ldr	r2, [r7, #12]
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	441a      	add	r2, r3
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d101      	bne.n	800a9f0 <create_name+0xf4>
 800a9ec:	2306      	movs	r3, #6
 800a9ee:	e010      	b.n	800aa12 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	2be5      	cmp	r3, #229	; 0xe5
 800a9f6:	d102      	bne.n	800a9fe <create_name+0x102>
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	2205      	movs	r2, #5
 800a9fc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a9fe:	7ffb      	ldrb	r3, [r7, #31]
 800aa00:	2b20      	cmp	r3, #32
 800aa02:	d801      	bhi.n	800aa08 <create_name+0x10c>
 800aa04:	2204      	movs	r2, #4
 800aa06:	e000      	b.n	800aa0a <create_name+0x10e>
 800aa08:	2200      	movs	r2, #0
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	330b      	adds	r3, #11
 800aa0e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800aa10:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3720      	adds	r7, #32
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	bf00      	nop
 800aa1c:	0800c620 	.word	0x0800c620
 800aa20:	0800c5ac 	.word	0x0800c5ac

0800aa24 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b086      	sub	sp, #24
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800aa38:	e002      	b.n	800aa40 <follow_path+0x1c>
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	603b      	str	r3, [r7, #0]
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	2b2f      	cmp	r3, #47	; 0x2f
 800aa46:	d0f8      	beq.n	800aa3a <follow_path+0x16>
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	2b5c      	cmp	r3, #92	; 0x5c
 800aa4e:	d0f4      	beq.n	800aa3a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	2200      	movs	r2, #0
 800aa54:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	2b1f      	cmp	r3, #31
 800aa5c:	d80a      	bhi.n	800aa74 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2280      	movs	r2, #128	; 0x80
 800aa62:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800aa66:	2100      	movs	r1, #0
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f7ff fcf9 	bl	800a460 <dir_sdi>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	75fb      	strb	r3, [r7, #23]
 800aa72:	e043      	b.n	800aafc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aa74:	463b      	mov	r3, r7
 800aa76:	4619      	mov	r1, r3
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f7ff ff3f 	bl	800a8fc <create_name>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aa82:	7dfb      	ldrb	r3, [r7, #23]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d134      	bne.n	800aaf2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f7ff feaf 	bl	800a7ec <dir_find>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800aa98:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800aa9a:	7dfb      	ldrb	r3, [r7, #23]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d00a      	beq.n	800aab6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800aaa0:	7dfb      	ldrb	r3, [r7, #23]
 800aaa2:	2b04      	cmp	r3, #4
 800aaa4:	d127      	bne.n	800aaf6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800aaa6:	7afb      	ldrb	r3, [r7, #11]
 800aaa8:	f003 0304 	and.w	r3, r3, #4
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d122      	bne.n	800aaf6 <follow_path+0xd2>
 800aab0:	2305      	movs	r3, #5
 800aab2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800aab4:	e01f      	b.n	800aaf6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800aab6:	7afb      	ldrb	r3, [r7, #11]
 800aab8:	f003 0304 	and.w	r3, r3, #4
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d11c      	bne.n	800aafa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	799b      	ldrb	r3, [r3, #6]
 800aac4:	f003 0310 	and.w	r3, r3, #16
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d102      	bne.n	800aad2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800aacc:	2305      	movs	r3, #5
 800aace:	75fb      	strb	r3, [r7, #23]
 800aad0:	e014      	b.n	800aafc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	695b      	ldr	r3, [r3, #20]
 800aadc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aae0:	4413      	add	r3, r2
 800aae2:	4619      	mov	r1, r3
 800aae4:	68f8      	ldr	r0, [r7, #12]
 800aae6:	f7ff fe42 	bl	800a76e <ld_clust>
 800aaea:	4602      	mov	r2, r0
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aaf0:	e7c0      	b.n	800aa74 <follow_path+0x50>
			if (res != FR_OK) break;
 800aaf2:	bf00      	nop
 800aaf4:	e002      	b.n	800aafc <follow_path+0xd8>
				break;
 800aaf6:	bf00      	nop
 800aaf8:	e000      	b.n	800aafc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800aafa:	bf00      	nop
			}
		}
	}

	return res;
 800aafc:	7dfb      	ldrb	r3, [r7, #23]
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3718      	adds	r7, #24
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}

0800ab06 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ab06:	b480      	push	{r7}
 800ab08:	b087      	sub	sp, #28
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ab0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab12:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d031      	beq.n	800ab80 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	617b      	str	r3, [r7, #20]
 800ab22:	e002      	b.n	800ab2a <get_ldnumber+0x24>
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	3301      	adds	r3, #1
 800ab28:	617b      	str	r3, [r7, #20]
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	2b20      	cmp	r3, #32
 800ab30:	d903      	bls.n	800ab3a <get_ldnumber+0x34>
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	2b3a      	cmp	r3, #58	; 0x3a
 800ab38:	d1f4      	bne.n	800ab24 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	2b3a      	cmp	r3, #58	; 0x3a
 800ab40:	d11c      	bne.n	800ab7c <get_ldnumber+0x76>
			tp = *path;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	1c5a      	adds	r2, r3, #1
 800ab4c:	60fa      	str	r2, [r7, #12]
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	3b30      	subs	r3, #48	; 0x30
 800ab52:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	2b09      	cmp	r3, #9
 800ab58:	d80e      	bhi.n	800ab78 <get_ldnumber+0x72>
 800ab5a:	68fa      	ldr	r2, [r7, #12]
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d10a      	bne.n	800ab78 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d107      	bne.n	800ab78 <get_ldnumber+0x72>
					vol = (int)i;
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	3301      	adds	r3, #1
 800ab70:	617b      	str	r3, [r7, #20]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	697a      	ldr	r2, [r7, #20]
 800ab76:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	e002      	b.n	800ab82 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ab80:	693b      	ldr	r3, [r7, #16]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	371c      	adds	r7, #28
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
	...

0800ab90 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	70da      	strb	r2, [r3, #3]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f04f 32ff 	mov.w	r2, #4294967295
 800aba6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800aba8:	6839      	ldr	r1, [r7, #0]
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f7ff f8e0 	bl	8009d70 <move_window>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d001      	beq.n	800abba <check_fs+0x2a>
 800abb6:	2304      	movs	r3, #4
 800abb8:	e038      	b.n	800ac2c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	3330      	adds	r3, #48	; 0x30
 800abbe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7fe fe24 	bl	8009810 <ld_word>
 800abc8:	4603      	mov	r3, r0
 800abca:	461a      	mov	r2, r3
 800abcc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d001      	beq.n	800abd8 <check_fs+0x48>
 800abd4:	2303      	movs	r3, #3
 800abd6:	e029      	b.n	800ac2c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800abde:	2be9      	cmp	r3, #233	; 0xe9
 800abe0:	d009      	beq.n	800abf6 <check_fs+0x66>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800abe8:	2beb      	cmp	r3, #235	; 0xeb
 800abea:	d11e      	bne.n	800ac2a <check_fs+0x9a>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800abf2:	2b90      	cmp	r3, #144	; 0x90
 800abf4:	d119      	bne.n	800ac2a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	3330      	adds	r3, #48	; 0x30
 800abfa:	3336      	adds	r3, #54	; 0x36
 800abfc:	4618      	mov	r0, r3
 800abfe:	f7fe fe1f 	bl	8009840 <ld_dword>
 800ac02:	4603      	mov	r3, r0
 800ac04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ac08:	4a0a      	ldr	r2, [pc, #40]	; (800ac34 <check_fs+0xa4>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d101      	bne.n	800ac12 <check_fs+0x82>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	e00c      	b.n	800ac2c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	3330      	adds	r3, #48	; 0x30
 800ac16:	3352      	adds	r3, #82	; 0x52
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7fe fe11 	bl	8009840 <ld_dword>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	4b05      	ldr	r3, [pc, #20]	; (800ac38 <check_fs+0xa8>)
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d101      	bne.n	800ac2a <check_fs+0x9a>
 800ac26:	2300      	movs	r3, #0
 800ac28:	e000      	b.n	800ac2c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ac2a:	2302      	movs	r3, #2
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3708      	adds	r7, #8
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}
 800ac34:	00544146 	.word	0x00544146
 800ac38:	33544146 	.word	0x33544146

0800ac3c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b096      	sub	sp, #88	; 0x58
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	4613      	mov	r3, r2
 800ac48:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f7ff ff58 	bl	800ab06 <get_ldnumber>
 800ac56:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ac58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	da01      	bge.n	800ac62 <find_volume+0x26>
 800ac5e:	230b      	movs	r3, #11
 800ac60:	e22e      	b.n	800b0c0 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ac62:	4aa8      	ldr	r2, [pc, #672]	; (800af04 <find_volume+0x2c8>)
 800ac64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac6a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ac6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d101      	bne.n	800ac76 <find_volume+0x3a>
 800ac72:	230c      	movs	r3, #12
 800ac74:	e224      	b.n	800b0c0 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac7a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ac7c:	79fb      	ldrb	r3, [r7, #7]
 800ac7e:	f023 0301 	bic.w	r3, r3, #1
 800ac82:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ac84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d01a      	beq.n	800acc2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ac8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac8e:	785b      	ldrb	r3, [r3, #1]
 800ac90:	4618      	mov	r0, r3
 800ac92:	f7fe fce9 	bl	8009668 <disk_status>
 800ac96:	4603      	mov	r3, r0
 800ac98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ac9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aca0:	f003 0301 	and.w	r3, r3, #1
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d10c      	bne.n	800acc2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800aca8:	79fb      	ldrb	r3, [r7, #7]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d007      	beq.n	800acbe <find_volume+0x82>
 800acae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800acb2:	f003 0304 	and.w	r3, r3, #4
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d001      	beq.n	800acbe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800acba:	230a      	movs	r3, #10
 800acbc:	e200      	b.n	800b0c0 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800acbe:	2300      	movs	r3, #0
 800acc0:	e1fe      	b.n	800b0c0 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800acc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc4:	2200      	movs	r2, #0
 800acc6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800acc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acca:	b2da      	uxtb	r2, r3
 800accc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acce:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800acd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd2:	785b      	ldrb	r3, [r3, #1]
 800acd4:	4618      	mov	r0, r3
 800acd6:	f7fe fce1 	bl	800969c <disk_initialize>
 800acda:	4603      	mov	r3, r0
 800acdc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ace0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ace4:	f003 0301 	and.w	r3, r3, #1
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d001      	beq.n	800acf0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800acec:	2303      	movs	r3, #3
 800acee:	e1e7      	b.n	800b0c0 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800acf0:	79fb      	ldrb	r3, [r7, #7]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d007      	beq.n	800ad06 <find_volume+0xca>
 800acf6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800acfa:	f003 0304 	and.w	r3, r3, #4
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d001      	beq.n	800ad06 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ad02:	230a      	movs	r3, #10
 800ad04:	e1dc      	b.n	800b0c0 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ad06:	2300      	movs	r3, #0
 800ad08:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ad0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ad0e:	f7ff ff3f 	bl	800ab90 <check_fs>
 800ad12:	4603      	mov	r3, r0
 800ad14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ad18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad1c:	2b02      	cmp	r3, #2
 800ad1e:	d14b      	bne.n	800adb8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ad20:	2300      	movs	r3, #0
 800ad22:	643b      	str	r3, [r7, #64]	; 0x40
 800ad24:	e01f      	b.n	800ad66 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ad26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad28:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ad2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad2e:	011b      	lsls	r3, r3, #4
 800ad30:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ad34:	4413      	add	r3, r2
 800ad36:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ad38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3a:	3304      	adds	r3, #4
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d006      	beq.n	800ad50 <find_volume+0x114>
 800ad42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad44:	3308      	adds	r3, #8
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7fe fd7a 	bl	8009840 <ld_dword>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	e000      	b.n	800ad52 <find_volume+0x116>
 800ad50:	2200      	movs	r2, #0
 800ad52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ad5a:	440b      	add	r3, r1
 800ad5c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ad60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad62:	3301      	adds	r3, #1
 800ad64:	643b      	str	r3, [r7, #64]	; 0x40
 800ad66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad68:	2b03      	cmp	r3, #3
 800ad6a:	d9dc      	bls.n	800ad26 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ad70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d002      	beq.n	800ad7c <find_volume+0x140>
 800ad76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad78:	3b01      	subs	r3, #1
 800ad7a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ad7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ad84:	4413      	add	r3, r2
 800ad86:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ad8a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ad8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d005      	beq.n	800ad9e <find_volume+0x162>
 800ad92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ad96:	f7ff fefb 	bl	800ab90 <check_fs>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	e000      	b.n	800ada0 <find_volume+0x164>
 800ad9e:	2303      	movs	r3, #3
 800ada0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ada4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d905      	bls.n	800adb8 <find_volume+0x17c>
 800adac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adae:	3301      	adds	r3, #1
 800adb0:	643b      	str	r3, [r7, #64]	; 0x40
 800adb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adb4:	2b03      	cmp	r3, #3
 800adb6:	d9e1      	bls.n	800ad7c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800adb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800adbc:	2b04      	cmp	r3, #4
 800adbe:	d101      	bne.n	800adc4 <find_volume+0x188>
 800adc0:	2301      	movs	r3, #1
 800adc2:	e17d      	b.n	800b0c0 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800adc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d901      	bls.n	800add0 <find_volume+0x194>
 800adcc:	230d      	movs	r3, #13
 800adce:	e177      	b.n	800b0c0 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800add0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add2:	3330      	adds	r3, #48	; 0x30
 800add4:	330b      	adds	r3, #11
 800add6:	4618      	mov	r0, r3
 800add8:	f7fe fd1a 	bl	8009810 <ld_word>
 800addc:	4603      	mov	r3, r0
 800adde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ade2:	d001      	beq.n	800ade8 <find_volume+0x1ac>
 800ade4:	230d      	movs	r3, #13
 800ade6:	e16b      	b.n	800b0c0 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ade8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adea:	3330      	adds	r3, #48	; 0x30
 800adec:	3316      	adds	r3, #22
 800adee:	4618      	mov	r0, r3
 800adf0:	f7fe fd0e 	bl	8009810 <ld_word>
 800adf4:	4603      	mov	r3, r0
 800adf6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800adf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d106      	bne.n	800ae0c <find_volume+0x1d0>
 800adfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae00:	3330      	adds	r3, #48	; 0x30
 800ae02:	3324      	adds	r3, #36	; 0x24
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7fe fd1b 	bl	8009840 <ld_dword>
 800ae0a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ae0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae10:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ae12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae14:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800ae18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae1a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ae1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae1e:	789b      	ldrb	r3, [r3, #2]
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	d005      	beq.n	800ae30 <find_volume+0x1f4>
 800ae24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae26:	789b      	ldrb	r3, [r3, #2]
 800ae28:	2b02      	cmp	r3, #2
 800ae2a:	d001      	beq.n	800ae30 <find_volume+0x1f4>
 800ae2c:	230d      	movs	r3, #13
 800ae2e:	e147      	b.n	800b0c0 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ae30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae32:	789b      	ldrb	r3, [r3, #2]
 800ae34:	461a      	mov	r2, r3
 800ae36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae38:	fb02 f303 	mul.w	r3, r2, r3
 800ae3c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ae3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae44:	b29a      	uxth	r2, r3
 800ae46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae48:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ae4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae4c:	895b      	ldrh	r3, [r3, #10]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d008      	beq.n	800ae64 <find_volume+0x228>
 800ae52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae54:	895b      	ldrh	r3, [r3, #10]
 800ae56:	461a      	mov	r2, r3
 800ae58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae5a:	895b      	ldrh	r3, [r3, #10]
 800ae5c:	3b01      	subs	r3, #1
 800ae5e:	4013      	ands	r3, r2
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d001      	beq.n	800ae68 <find_volume+0x22c>
 800ae64:	230d      	movs	r3, #13
 800ae66:	e12b      	b.n	800b0c0 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ae68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae6a:	3330      	adds	r3, #48	; 0x30
 800ae6c:	3311      	adds	r3, #17
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7fe fcce 	bl	8009810 <ld_word>
 800ae74:	4603      	mov	r3, r0
 800ae76:	461a      	mov	r2, r3
 800ae78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae7a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ae7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae7e:	891b      	ldrh	r3, [r3, #8]
 800ae80:	f003 030f 	and.w	r3, r3, #15
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d001      	beq.n	800ae8e <find_volume+0x252>
 800ae8a:	230d      	movs	r3, #13
 800ae8c:	e118      	b.n	800b0c0 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ae8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae90:	3330      	adds	r3, #48	; 0x30
 800ae92:	3313      	adds	r3, #19
 800ae94:	4618      	mov	r0, r3
 800ae96:	f7fe fcbb 	bl	8009810 <ld_word>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ae9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d106      	bne.n	800aeb2 <find_volume+0x276>
 800aea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea6:	3330      	adds	r3, #48	; 0x30
 800aea8:	3320      	adds	r3, #32
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7fe fcc8 	bl	8009840 <ld_dword>
 800aeb0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800aeb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb4:	3330      	adds	r3, #48	; 0x30
 800aeb6:	330e      	adds	r3, #14
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7fe fca9 	bl	8009810 <ld_word>
 800aebe:	4603      	mov	r3, r0
 800aec0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800aec2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d101      	bne.n	800aecc <find_volume+0x290>
 800aec8:	230d      	movs	r3, #13
 800aeca:	e0f9      	b.n	800b0c0 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800aecc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800aece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aed0:	4413      	add	r3, r2
 800aed2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aed4:	8912      	ldrh	r2, [r2, #8]
 800aed6:	0912      	lsrs	r2, r2, #4
 800aed8:	b292      	uxth	r2, r2
 800aeda:	4413      	add	r3, r2
 800aedc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800aede:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d201      	bcs.n	800aeea <find_volume+0x2ae>
 800aee6:	230d      	movs	r3, #13
 800aee8:	e0ea      	b.n	800b0c0 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800aeea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aeec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeee:	1ad3      	subs	r3, r2, r3
 800aef0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aef2:	8952      	ldrh	r2, [r2, #10]
 800aef4:	fbb3 f3f2 	udiv	r3, r3, r2
 800aef8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800aefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d103      	bne.n	800af08 <find_volume+0x2cc>
 800af00:	230d      	movs	r3, #13
 800af02:	e0dd      	b.n	800b0c0 <find_volume+0x484>
 800af04:	24000bac 	.word	0x24000bac
		fmt = FS_FAT32;
 800af08:	2303      	movs	r3, #3
 800af0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800af0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af10:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800af14:	4293      	cmp	r3, r2
 800af16:	d802      	bhi.n	800af1e <find_volume+0x2e2>
 800af18:	2302      	movs	r3, #2
 800af1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800af1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af20:	f640 72f5 	movw	r2, #4085	; 0xff5
 800af24:	4293      	cmp	r3, r2
 800af26:	d802      	bhi.n	800af2e <find_volume+0x2f2>
 800af28:	2301      	movs	r3, #1
 800af2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800af2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af30:	1c9a      	adds	r2, r3, #2
 800af32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af34:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800af36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800af3a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800af3c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800af3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af40:	441a      	add	r2, r3
 800af42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af44:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800af46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800af48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af4a:	441a      	add	r2, r3
 800af4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af4e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800af50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af54:	2b03      	cmp	r3, #3
 800af56:	d11e      	bne.n	800af96 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800af58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af5a:	3330      	adds	r3, #48	; 0x30
 800af5c:	332a      	adds	r3, #42	; 0x2a
 800af5e:	4618      	mov	r0, r3
 800af60:	f7fe fc56 	bl	8009810 <ld_word>
 800af64:	4603      	mov	r3, r0
 800af66:	2b00      	cmp	r3, #0
 800af68:	d001      	beq.n	800af6e <find_volume+0x332>
 800af6a:	230d      	movs	r3, #13
 800af6c:	e0a8      	b.n	800b0c0 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800af6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af70:	891b      	ldrh	r3, [r3, #8]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d001      	beq.n	800af7a <find_volume+0x33e>
 800af76:	230d      	movs	r3, #13
 800af78:	e0a2      	b.n	800b0c0 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800af7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af7c:	3330      	adds	r3, #48	; 0x30
 800af7e:	332c      	adds	r3, #44	; 0x2c
 800af80:	4618      	mov	r0, r3
 800af82:	f7fe fc5d 	bl	8009840 <ld_dword>
 800af86:	4602      	mov	r2, r0
 800af88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af8a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800af8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af8e:	695b      	ldr	r3, [r3, #20]
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	647b      	str	r3, [r7, #68]	; 0x44
 800af94:	e01f      	b.n	800afd6 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800af96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af98:	891b      	ldrh	r3, [r3, #8]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d101      	bne.n	800afa2 <find_volume+0x366>
 800af9e:	230d      	movs	r3, #13
 800afa0:	e08e      	b.n	800b0c0 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800afa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa4:	6a1a      	ldr	r2, [r3, #32]
 800afa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afa8:	441a      	add	r2, r3
 800afaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afac:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800afae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800afb2:	2b02      	cmp	r3, #2
 800afb4:	d103      	bne.n	800afbe <find_volume+0x382>
 800afb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb8:	695b      	ldr	r3, [r3, #20]
 800afba:	005b      	lsls	r3, r3, #1
 800afbc:	e00a      	b.n	800afd4 <find_volume+0x398>
 800afbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc0:	695a      	ldr	r2, [r3, #20]
 800afc2:	4613      	mov	r3, r2
 800afc4:	005b      	lsls	r3, r3, #1
 800afc6:	4413      	add	r3, r2
 800afc8:	085a      	lsrs	r2, r3, #1
 800afca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afcc:	695b      	ldr	r3, [r3, #20]
 800afce:	f003 0301 	and.w	r3, r3, #1
 800afd2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800afd4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800afd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd8:	699a      	ldr	r2, [r3, #24]
 800afda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afdc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800afe0:	0a5b      	lsrs	r3, r3, #9
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d201      	bcs.n	800afea <find_volume+0x3ae>
 800afe6:	230d      	movs	r3, #13
 800afe8:	e06a      	b.n	800b0c0 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800afea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afec:	f04f 32ff 	mov.w	r2, #4294967295
 800aff0:	611a      	str	r2, [r3, #16]
 800aff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff4:	691a      	ldr	r2, [r3, #16]
 800aff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff8:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800affa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affc:	2280      	movs	r2, #128	; 0x80
 800affe:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b000:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b004:	2b03      	cmp	r3, #3
 800b006:	d149      	bne.n	800b09c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00a:	3330      	adds	r3, #48	; 0x30
 800b00c:	3330      	adds	r3, #48	; 0x30
 800b00e:	4618      	mov	r0, r3
 800b010:	f7fe fbfe 	bl	8009810 <ld_word>
 800b014:	4603      	mov	r3, r0
 800b016:	2b01      	cmp	r3, #1
 800b018:	d140      	bne.n	800b09c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b01a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b01c:	3301      	adds	r3, #1
 800b01e:	4619      	mov	r1, r3
 800b020:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b022:	f7fe fea5 	bl	8009d70 <move_window>
 800b026:	4603      	mov	r3, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d137      	bne.n	800b09c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800b02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02e:	2200      	movs	r2, #0
 800b030:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b034:	3330      	adds	r3, #48	; 0x30
 800b036:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b03a:	4618      	mov	r0, r3
 800b03c:	f7fe fbe8 	bl	8009810 <ld_word>
 800b040:	4603      	mov	r3, r0
 800b042:	461a      	mov	r2, r3
 800b044:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b048:	429a      	cmp	r2, r3
 800b04a:	d127      	bne.n	800b09c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04e:	3330      	adds	r3, #48	; 0x30
 800b050:	4618      	mov	r0, r3
 800b052:	f7fe fbf5 	bl	8009840 <ld_dword>
 800b056:	4602      	mov	r2, r0
 800b058:	4b1b      	ldr	r3, [pc, #108]	; (800b0c8 <find_volume+0x48c>)
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d11e      	bne.n	800b09c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b060:	3330      	adds	r3, #48	; 0x30
 800b062:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b066:	4618      	mov	r0, r3
 800b068:	f7fe fbea 	bl	8009840 <ld_dword>
 800b06c:	4602      	mov	r2, r0
 800b06e:	4b17      	ldr	r3, [pc, #92]	; (800b0cc <find_volume+0x490>)
 800b070:	429a      	cmp	r2, r3
 800b072:	d113      	bne.n	800b09c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b076:	3330      	adds	r3, #48	; 0x30
 800b078:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7fe fbdf 	bl	8009840 <ld_dword>
 800b082:	4602      	mov	r2, r0
 800b084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b086:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08a:	3330      	adds	r3, #48	; 0x30
 800b08c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b090:	4618      	mov	r0, r3
 800b092:	f7fe fbd5 	bl	8009840 <ld_dword>
 800b096:	4602      	mov	r2, r0
 800b098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b0a2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b0a4:	4b0a      	ldr	r3, [pc, #40]	; (800b0d0 <find_volume+0x494>)
 800b0a6:	881b      	ldrh	r3, [r3, #0]
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	b29a      	uxth	r2, r3
 800b0ac:	4b08      	ldr	r3, [pc, #32]	; (800b0d0 <find_volume+0x494>)
 800b0ae:	801a      	strh	r2, [r3, #0]
 800b0b0:	4b07      	ldr	r3, [pc, #28]	; (800b0d0 <find_volume+0x494>)
 800b0b2:	881a      	ldrh	r2, [r3, #0]
 800b0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b0b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b0ba:	f7fe fdf1 	bl	8009ca0 <clear_lock>
#endif
	return FR_OK;
 800b0be:	2300      	movs	r3, #0
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3758      	adds	r7, #88	; 0x58
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}
 800b0c8:	41615252 	.word	0x41615252
 800b0cc:	61417272 	.word	0x61417272
 800b0d0:	24000bb0 	.word	0x24000bb0

0800b0d4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b0de:	2309      	movs	r3, #9
 800b0e0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d01c      	beq.n	800b122 <validate+0x4e>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d018      	beq.n	800b122 <validate+0x4e>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d013      	beq.n	800b122 <validate+0x4e>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	889a      	ldrh	r2, [r3, #4]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	88db      	ldrh	r3, [r3, #6]
 800b104:	429a      	cmp	r2, r3
 800b106:	d10c      	bne.n	800b122 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	785b      	ldrb	r3, [r3, #1]
 800b10e:	4618      	mov	r0, r3
 800b110:	f7fe faaa 	bl	8009668 <disk_status>
 800b114:	4603      	mov	r3, r0
 800b116:	f003 0301 	and.w	r3, r3, #1
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d101      	bne.n	800b122 <validate+0x4e>
			res = FR_OK;
 800b11e:	2300      	movs	r3, #0
 800b120:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b122:	7bfb      	ldrb	r3, [r7, #15]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d102      	bne.n	800b12e <validate+0x5a>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	e000      	b.n	800b130 <validate+0x5c>
 800b12e:	2300      	movs	r3, #0
 800b130:	683a      	ldr	r2, [r7, #0]
 800b132:	6013      	str	r3, [r2, #0]
	return res;
 800b134:	7bfb      	ldrb	r3, [r7, #15]
}
 800b136:	4618      	mov	r0, r3
 800b138:	3710      	adds	r7, #16
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
	...

0800b140 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b088      	sub	sp, #32
 800b144:	af00      	add	r7, sp, #0
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	4613      	mov	r3, r2
 800b14c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b152:	f107 0310 	add.w	r3, r7, #16
 800b156:	4618      	mov	r0, r3
 800b158:	f7ff fcd5 	bl	800ab06 <get_ldnumber>
 800b15c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b15e:	69fb      	ldr	r3, [r7, #28]
 800b160:	2b00      	cmp	r3, #0
 800b162:	da01      	bge.n	800b168 <f_mount+0x28>
 800b164:	230b      	movs	r3, #11
 800b166:	e02b      	b.n	800b1c0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b168:	4a17      	ldr	r2, [pc, #92]	; (800b1c8 <f_mount+0x88>)
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b170:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d005      	beq.n	800b184 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b178:	69b8      	ldr	r0, [r7, #24]
 800b17a:	f7fe fd91 	bl	8009ca0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b17e:	69bb      	ldr	r3, [r7, #24]
 800b180:	2200      	movs	r2, #0
 800b182:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d002      	beq.n	800b190 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2200      	movs	r2, #0
 800b18e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b190:	68fa      	ldr	r2, [r7, #12]
 800b192:	490d      	ldr	r1, [pc, #52]	; (800b1c8 <f_mount+0x88>)
 800b194:	69fb      	ldr	r3, [r7, #28]
 800b196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d002      	beq.n	800b1a6 <f_mount+0x66>
 800b1a0:	79fb      	ldrb	r3, [r7, #7]
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d001      	beq.n	800b1aa <f_mount+0x6a>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	e00a      	b.n	800b1c0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b1aa:	f107 010c 	add.w	r1, r7, #12
 800b1ae:	f107 0308 	add.w	r3, r7, #8
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7ff fd41 	bl	800ac3c <find_volume>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b1be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3720      	adds	r7, #32
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	24000bac 	.word	0x24000bac

0800b1cc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b098      	sub	sp, #96	; 0x60
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	4613      	mov	r3, r2
 800b1d8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d101      	bne.n	800b1e4 <f_open+0x18>
 800b1e0:	2309      	movs	r3, #9
 800b1e2:	e1ad      	b.n	800b540 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b1e4:	79fb      	ldrb	r3, [r7, #7]
 800b1e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1ea:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b1ec:	79fa      	ldrb	r2, [r7, #7]
 800b1ee:	f107 0110 	add.w	r1, r7, #16
 800b1f2:	f107 0308 	add.w	r3, r7, #8
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7ff fd20 	bl	800ac3c <find_volume>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b202:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b206:	2b00      	cmp	r3, #0
 800b208:	f040 8191 	bne.w	800b52e <f_open+0x362>
		dj.obj.fs = fs;
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b210:	68ba      	ldr	r2, [r7, #8]
 800b212:	f107 0314 	add.w	r3, r7, #20
 800b216:	4611      	mov	r1, r2
 800b218:	4618      	mov	r0, r3
 800b21a:	f7ff fc03 	bl	800aa24 <follow_path>
 800b21e:	4603      	mov	r3, r0
 800b220:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b224:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d11a      	bne.n	800b262 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b22c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b230:	b25b      	sxtb	r3, r3
 800b232:	2b00      	cmp	r3, #0
 800b234:	da03      	bge.n	800b23e <f_open+0x72>
				res = FR_INVALID_NAME;
 800b236:	2306      	movs	r3, #6
 800b238:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b23c:	e011      	b.n	800b262 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b23e:	79fb      	ldrb	r3, [r7, #7]
 800b240:	f023 0301 	bic.w	r3, r3, #1
 800b244:	2b00      	cmp	r3, #0
 800b246:	bf14      	ite	ne
 800b248:	2301      	movne	r3, #1
 800b24a:	2300      	moveq	r3, #0
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	461a      	mov	r2, r3
 800b250:	f107 0314 	add.w	r3, r7, #20
 800b254:	4611      	mov	r1, r2
 800b256:	4618      	mov	r0, r3
 800b258:	f7fe fbda 	bl	8009a10 <chk_lock>
 800b25c:	4603      	mov	r3, r0
 800b25e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b262:	79fb      	ldrb	r3, [r7, #7]
 800b264:	f003 031c 	and.w	r3, r3, #28
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d07f      	beq.n	800b36c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b26c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b270:	2b00      	cmp	r3, #0
 800b272:	d017      	beq.n	800b2a4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b274:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b278:	2b04      	cmp	r3, #4
 800b27a:	d10e      	bne.n	800b29a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b27c:	f7fe fc24 	bl	8009ac8 <enq_lock>
 800b280:	4603      	mov	r3, r0
 800b282:	2b00      	cmp	r3, #0
 800b284:	d006      	beq.n	800b294 <f_open+0xc8>
 800b286:	f107 0314 	add.w	r3, r7, #20
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7ff fb03 	bl	800a896 <dir_register>
 800b290:	4603      	mov	r3, r0
 800b292:	e000      	b.n	800b296 <f_open+0xca>
 800b294:	2312      	movs	r3, #18
 800b296:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b29a:	79fb      	ldrb	r3, [r7, #7]
 800b29c:	f043 0308 	orr.w	r3, r3, #8
 800b2a0:	71fb      	strb	r3, [r7, #7]
 800b2a2:	e010      	b.n	800b2c6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b2a4:	7ebb      	ldrb	r3, [r7, #26]
 800b2a6:	f003 0311 	and.w	r3, r3, #17
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d003      	beq.n	800b2b6 <f_open+0xea>
					res = FR_DENIED;
 800b2ae:	2307      	movs	r3, #7
 800b2b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b2b4:	e007      	b.n	800b2c6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b2b6:	79fb      	ldrb	r3, [r7, #7]
 800b2b8:	f003 0304 	and.w	r3, r3, #4
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d002      	beq.n	800b2c6 <f_open+0xfa>
 800b2c0:	2308      	movs	r3, #8
 800b2c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b2c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d168      	bne.n	800b3a0 <f_open+0x1d4>
 800b2ce:	79fb      	ldrb	r3, [r7, #7]
 800b2d0:	f003 0308 	and.w	r3, r3, #8
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d063      	beq.n	800b3a0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b2d8:	f7fd fb38 	bl	800894c <get_fattime>
 800b2dc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b2de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2e0:	330e      	adds	r3, #14
 800b2e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f7fe fae9 	bl	80098bc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b2ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ec:	3316      	adds	r3, #22
 800b2ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f7fe fae3 	bl	80098bc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b2f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2f8:	330b      	adds	r3, #11
 800b2fa:	2220      	movs	r2, #32
 800b2fc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b302:	4611      	mov	r1, r2
 800b304:	4618      	mov	r0, r3
 800b306:	f7ff fa32 	bl	800a76e <ld_clust>
 800b30a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b310:	2200      	movs	r2, #0
 800b312:	4618      	mov	r0, r3
 800b314:	f7ff fa4a 	bl	800a7ac <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b31a:	331c      	adds	r3, #28
 800b31c:	2100      	movs	r1, #0
 800b31e:	4618      	mov	r0, r3
 800b320:	f7fe facc 	bl	80098bc <st_dword>
					fs->wflag = 1;
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	2201      	movs	r2, #1
 800b328:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b32a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d037      	beq.n	800b3a0 <f_open+0x1d4>
						dw = fs->winsect;
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b334:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b336:	f107 0314 	add.w	r3, r7, #20
 800b33a:	2200      	movs	r2, #0
 800b33c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b33e:	4618      	mov	r0, r3
 800b340:	f7fe ff5d 	bl	800a1fe <remove_chain>
 800b344:	4603      	mov	r3, r0
 800b346:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b34a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d126      	bne.n	800b3a0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b356:	4618      	mov	r0, r3
 800b358:	f7fe fd0a 	bl	8009d70 <move_window>
 800b35c:	4603      	mov	r3, r0
 800b35e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b366:	3a01      	subs	r2, #1
 800b368:	60da      	str	r2, [r3, #12]
 800b36a:	e019      	b.n	800b3a0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b36c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b370:	2b00      	cmp	r3, #0
 800b372:	d115      	bne.n	800b3a0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b374:	7ebb      	ldrb	r3, [r7, #26]
 800b376:	f003 0310 	and.w	r3, r3, #16
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d003      	beq.n	800b386 <f_open+0x1ba>
					res = FR_NO_FILE;
 800b37e:	2304      	movs	r3, #4
 800b380:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b384:	e00c      	b.n	800b3a0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b386:	79fb      	ldrb	r3, [r7, #7]
 800b388:	f003 0302 	and.w	r3, r3, #2
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d007      	beq.n	800b3a0 <f_open+0x1d4>
 800b390:	7ebb      	ldrb	r3, [r7, #26]
 800b392:	f003 0301 	and.w	r3, r3, #1
 800b396:	2b00      	cmp	r3, #0
 800b398:	d002      	beq.n	800b3a0 <f_open+0x1d4>
						res = FR_DENIED;
 800b39a:	2307      	movs	r3, #7
 800b39c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b3a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d128      	bne.n	800b3fa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b3a8:	79fb      	ldrb	r3, [r7, #7]
 800b3aa:	f003 0308 	and.w	r3, r3, #8
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d003      	beq.n	800b3ba <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b3b2:	79fb      	ldrb	r3, [r7, #7]
 800b3b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3b8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b3c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b3c8:	79fb      	ldrb	r3, [r7, #7]
 800b3ca:	f023 0301 	bic.w	r3, r3, #1
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	bf14      	ite	ne
 800b3d2:	2301      	movne	r3, #1
 800b3d4:	2300      	moveq	r3, #0
 800b3d6:	b2db      	uxtb	r3, r3
 800b3d8:	461a      	mov	r2, r3
 800b3da:	f107 0314 	add.w	r3, r7, #20
 800b3de:	4611      	mov	r1, r2
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f7fe fb93 	bl	8009b0c <inc_lock>
 800b3e6:	4602      	mov	r2, r0
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	691b      	ldr	r3, [r3, #16]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d102      	bne.n	800b3fa <f_open+0x22e>
 800b3f4:	2302      	movs	r3, #2
 800b3f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b3fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	f040 8095 	bne.w	800b52e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b408:	4611      	mov	r1, r2
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7ff f9af 	bl	800a76e <ld_clust>
 800b410:	4602      	mov	r2, r0
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b418:	331c      	adds	r3, #28
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7fe fa10 	bl	8009840 <ld_dword>
 800b420:	4602      	mov	r2, r0
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2200      	movs	r2, #0
 800b42a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b42c:	693a      	ldr	r2, [r7, #16]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	88da      	ldrh	r2, [r3, #6]
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	79fa      	ldrb	r2, [r7, #7]
 800b43e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2200      	movs	r2, #0
 800b444:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2200      	movs	r2, #0
 800b44a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2200      	movs	r2, #0
 800b450:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	3330      	adds	r3, #48	; 0x30
 800b456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b45a:	2100      	movs	r1, #0
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7fe fa7a 	bl	8009956 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b462:	79fb      	ldrb	r3, [r7, #7]
 800b464:	f003 0320 	and.w	r3, r3, #32
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d060      	beq.n	800b52e <f_open+0x362>
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d05c      	beq.n	800b52e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	68da      	ldr	r2, [r3, #12]
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	895b      	ldrh	r3, [r3, #10]
 800b480:	025b      	lsls	r3, r3, #9
 800b482:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	68db      	ldr	r3, [r3, #12]
 800b48e:	657b      	str	r3, [r7, #84]	; 0x54
 800b490:	e016      	b.n	800b4c0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b496:	4618      	mov	r0, r3
 800b498:	f7fe fd25 	bl	8009ee6 <get_fat>
 800b49c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b49e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d802      	bhi.n	800b4aa <f_open+0x2de>
 800b4a4:	2302      	movs	r3, #2
 800b4a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b4aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4b0:	d102      	bne.n	800b4b8 <f_open+0x2ec>
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b4b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b4ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4bc:	1ad3      	subs	r3, r2, r3
 800b4be:	657b      	str	r3, [r7, #84]	; 0x54
 800b4c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d103      	bne.n	800b4d0 <f_open+0x304>
 800b4c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b4ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d8e0      	bhi.n	800b492 <f_open+0x2c6>
				}
				fp->clust = clst;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b4d4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b4d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d127      	bne.n	800b52e <f_open+0x362>
 800b4de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d022      	beq.n	800b52e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7fe fcdb 	bl	8009ea8 <clust2sect>
 800b4f2:	6478      	str	r0, [r7, #68]	; 0x44
 800b4f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d103      	bne.n	800b502 <f_open+0x336>
						res = FR_INT_ERR;
 800b4fa:	2302      	movs	r3, #2
 800b4fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b500:	e015      	b.n	800b52e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b504:	0a5a      	lsrs	r2, r3, #9
 800b506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b508:	441a      	add	r2, r3
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	7858      	ldrb	r0, [r3, #1]
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	6a1a      	ldr	r2, [r3, #32]
 800b51c:	2301      	movs	r3, #1
 800b51e:	f7fe f8e3 	bl	80096e8 <disk_read>
 800b522:	4603      	mov	r3, r0
 800b524:	2b00      	cmp	r3, #0
 800b526:	d002      	beq.n	800b52e <f_open+0x362>
 800b528:	2301      	movs	r3, #1
 800b52a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b52e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b532:	2b00      	cmp	r3, #0
 800b534:	d002      	beq.n	800b53c <f_open+0x370>
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2200      	movs	r2, #0
 800b53a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b53c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b540:	4618      	mov	r0, r3
 800b542:	3760      	adds	r7, #96	; 0x60
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <f_write_dma_start>:
FRESULT f_write_dma_start (
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw			/* Number of bytes to write */
)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b08c      	sub	sp, #48	; 0x30
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	60b9      	str	r1, [r7, #8]
 800b552:	607a      	str	r2, [r7, #4]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	61fb      	str	r3, [r7, #28]

	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f107 0210 	add.w	r2, r7, #16
 800b55e:	4611      	mov	r1, r2
 800b560:	4618      	mov	r0, r3
 800b562:	f7ff fdb7 	bl	800b0d4 <validate>
 800b566:	4603      	mov	r3, r0
 800b568:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b56c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b570:	2b00      	cmp	r3, #0
 800b572:	d107      	bne.n	800b584 <f_write_dma_start+0x3c>
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	7d5b      	ldrb	r3, [r3, #21]
 800b578:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b57c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b580:	2b00      	cmp	r3, #0
 800b582:	d002      	beq.n	800b58a <f_write_dma_start+0x42>
 800b584:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b588:	e124      	b.n	800b7d4 <f_write_dma_start+0x28c>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	7d1b      	ldrb	r3, [r3, #20]
 800b58e:	f003 0302 	and.w	r3, r3, #2
 800b592:	2b00      	cmp	r3, #0
 800b594:	d101      	bne.n	800b59a <f_write_dma_start+0x52>
 800b596:	2307      	movs	r3, #7
 800b598:	e11c      	b.n	800b7d4 <f_write_dma_start+0x28c>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	699a      	ldr	r2, [r3, #24]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	441a      	add	r2, r3
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	699b      	ldr	r3, [r3, #24]
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d203      	bcs.n	800b5b2 <f_write_dma_start+0x6a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	699b      	ldr	r3, [r3, #24]
 800b5ae:	43db      	mvns	r3, r3
 800b5b0:	607b      	str	r3, [r7, #4]
	}

	if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	699b      	ldr	r3, [r3, #24]
 800b5b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	f040 80e8 	bne.w	800b790 <f_write_dma_start+0x248>
		csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	699b      	ldr	r3, [r3, #24]
 800b5c4:	0a5b      	lsrs	r3, r3, #9
 800b5c6:	693a      	ldr	r2, [r7, #16]
 800b5c8:	8952      	ldrh	r2, [r2, #10]
 800b5ca:	3a01      	subs	r2, #1
 800b5cc:	4013      	ands	r3, r2
 800b5ce:	61bb      	str	r3, [r7, #24]
		if (csect == 0) {				/* On the cluster boundary? */
 800b5d0:	69bb      	ldr	r3, [r7, #24]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d147      	bne.n	800b666 <f_write_dma_start+0x11e>
			if (fp->fptr == 0) {		/* On the top of the file? */
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	699b      	ldr	r3, [r3, #24]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d10c      	bne.n	800b5f8 <f_write_dma_start+0xb0>
				clst = fp->obj.sclust;	/* Follow from the origin */
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	689b      	ldr	r3, [r3, #8]
 800b5e2:	62bb      	str	r3, [r7, #40]	; 0x28
				if (clst == 0) {		/* If no cluster is allocated, */
 800b5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d11a      	bne.n	800b620 <f_write_dma_start+0xd8>
					clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2100      	movs	r1, #0
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7fe fe6a 	bl	800a2c8 <create_chain>
 800b5f4:	62b8      	str	r0, [r7, #40]	; 0x28
 800b5f6:	e013      	b.n	800b620 <f_write_dma_start+0xd8>
				}
			} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
				if (fp->cltbl) {
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d007      	beq.n	800b610 <f_write_dma_start+0xc8>
					clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	699b      	ldr	r3, [r3, #24]
 800b604:	4619      	mov	r1, r3
 800b606:	68f8      	ldr	r0, [r7, #12]
 800b608:	f7fe fef6 	bl	800a3f8 <clmt_clust>
 800b60c:	62b8      	str	r0, [r7, #40]	; 0x28
 800b60e:	e007      	b.n	800b620 <f_write_dma_start+0xd8>
				} else
#endif
				{
					clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b610:	68fa      	ldr	r2, [r7, #12]
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	69db      	ldr	r3, [r3, #28]
 800b616:	4619      	mov	r1, r3
 800b618:	4610      	mov	r0, r2
 800b61a:	f7fe fe55 	bl	800a2c8 <create_chain>
 800b61e:	62b8      	str	r0, [r7, #40]	; 0x28
				}
			}
			if (clst == 0) ABORT(fs, FR_DISK_ERR);		/* Could not allocate a new cluster (disk full)  SHOULD break the loop! */
 800b620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b622:	2b00      	cmp	r3, #0
 800b624:	d104      	bne.n	800b630 <f_write_dma_start+0xe8>
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2201      	movs	r2, #1
 800b62a:	755a      	strb	r2, [r3, #21]
 800b62c:	2301      	movs	r3, #1
 800b62e:	e0d1      	b.n	800b7d4 <f_write_dma_start+0x28c>
			if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b632:	2b01      	cmp	r3, #1
 800b634:	d104      	bne.n	800b640 <f_write_dma_start+0xf8>
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2202      	movs	r2, #2
 800b63a:	755a      	strb	r2, [r3, #21]
 800b63c:	2302      	movs	r3, #2
 800b63e:	e0c9      	b.n	800b7d4 <f_write_dma_start+0x28c>
			if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b642:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b646:	d104      	bne.n	800b652 <f_write_dma_start+0x10a>
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	2201      	movs	r2, #1
 800b64c:	755a      	strb	r2, [r3, #21]
 800b64e:	2301      	movs	r3, #1
 800b650:	e0c0      	b.n	800b7d4 <f_write_dma_start+0x28c>
			fp->clust = clst;			/* Update current cluster */
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b656:	61da      	str	r2, [r3, #28]
			if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	689b      	ldr	r3, [r3, #8]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d102      	bne.n	800b666 <f_write_dma_start+0x11e>
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b664:	609a      	str	r2, [r3, #8]
		}
#if _FS_TINY
		if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
		if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	7d1b      	ldrb	r3, [r3, #20]
 800b66a:	b25b      	sxtb	r3, r3
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	da18      	bge.n	800b6a2 <f_write_dma_start+0x15a>
			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	7858      	ldrb	r0, [r3, #1]
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	6a1a      	ldr	r2, [r3, #32]
 800b67e:	2301      	movs	r3, #1
 800b680:	f7fe f852 	bl	8009728 <disk_write>
 800b684:	4603      	mov	r3, r0
 800b686:	2b00      	cmp	r3, #0
 800b688:	d004      	beq.n	800b694 <f_write_dma_start+0x14c>
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2201      	movs	r2, #1
 800b68e:	755a      	strb	r2, [r3, #21]
 800b690:	2301      	movs	r3, #1
 800b692:	e09f      	b.n	800b7d4 <f_write_dma_start+0x28c>
			fp->flag &= (BYTE)~FA_DIRTY;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	7d1b      	ldrb	r3, [r3, #20]
 800b698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b69c:	b2da      	uxtb	r2, r3
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	751a      	strb	r2, [r3, #20]
		}
#endif
		sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b6a2:	693a      	ldr	r2, [r7, #16]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	69db      	ldr	r3, [r3, #28]
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	4610      	mov	r0, r2
 800b6ac:	f7fe fbfc 	bl	8009ea8 <clust2sect>
 800b6b0:	6178      	str	r0, [r7, #20]
		if (!sect) ABORT(fs, FR_INT_ERR);
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d104      	bne.n	800b6c2 <f_write_dma_start+0x17a>
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2202      	movs	r2, #2
 800b6bc:	755a      	strb	r2, [r3, #21]
 800b6be:	2302      	movs	r3, #2
 800b6c0:	e088      	b.n	800b7d4 <f_write_dma_start+0x28c>
		sect += csect;
 800b6c2:	697a      	ldr	r2, [r7, #20]
 800b6c4:	69bb      	ldr	r3, [r7, #24]
 800b6c6:	4413      	add	r3, r2
 800b6c8:	617b      	str	r3, [r7, #20]
		cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	0a5b      	lsrs	r3, r3, #9
 800b6ce:	623b      	str	r3, [r7, #32]
		if (cc) {						/* Write maximum contiguous sectors directly */
 800b6d0:	6a3b      	ldr	r3, [r7, #32]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d03c      	beq.n	800b750 <f_write_dma_start+0x208>
			if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b6d6:	69ba      	ldr	r2, [r7, #24]
 800b6d8:	6a3b      	ldr	r3, [r7, #32]
 800b6da:	4413      	add	r3, r2
 800b6dc:	693a      	ldr	r2, [r7, #16]
 800b6de:	8952      	ldrh	r2, [r2, #10]
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d905      	bls.n	800b6f0 <f_write_dma_start+0x1a8>
				cc = fs->csize - csect;
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	895b      	ldrh	r3, [r3, #10]
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	69bb      	ldr	r3, [r7, #24]
 800b6ec:	1ad3      	subs	r3, r2, r3
 800b6ee:	623b      	str	r3, [r7, #32]
			}
			if (disk_write_dma_start(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	7858      	ldrb	r0, [r3, #1]
 800b6f4:	6a3b      	ldr	r3, [r7, #32]
 800b6f6:	697a      	ldr	r2, [r7, #20]
 800b6f8:	69f9      	ldr	r1, [r7, #28]
 800b6fa:	f7fe f835 	bl	8009768 <disk_write_dma_start>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b00      	cmp	r3, #0
 800b702:	d004      	beq.n	800b70e <f_write_dma_start+0x1c6>
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2201      	movs	r2, #1
 800b708:	755a      	strb	r2, [r3, #21]
 800b70a:	2301      	movs	r3, #1
 800b70c:	e062      	b.n	800b7d4 <f_write_dma_start+0x28c>
			if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
				mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
				fs->wflag = 0;
			}
#else
			if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	6a1a      	ldr	r2, [r3, #32]
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	1ad3      	subs	r3, r2, r3
 800b716:	6a3a      	ldr	r2, [r7, #32]
 800b718:	429a      	cmp	r2, r3
 800b71a:	d915      	bls.n	800b748 <f_write_dma_start+0x200>
				mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	6a1a      	ldr	r2, [r3, #32]
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	1ad3      	subs	r3, r2, r3
 800b72a:	025b      	lsls	r3, r3, #9
 800b72c:	69fa      	ldr	r2, [r7, #28]
 800b72e:	4413      	add	r3, r2
 800b730:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b734:	4619      	mov	r1, r3
 800b736:	f7fe f8ed 	bl	8009914 <mem_cpy>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	7d1b      	ldrb	r3, [r3, #20]
 800b73e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b742:	b2da      	uxtb	r2, r3
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	751a      	strb	r2, [r3, #20]
			}
#endif
#endif
			wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b748:	6a3b      	ldr	r3, [r7, #32]
 800b74a:	025b      	lsls	r3, r3, #9
 800b74c:	627b      	str	r3, [r7, #36]	; 0x24
 800b74e:	e040      	b.n	800b7d2 <f_write_dma_start+0x28a>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	6a1b      	ldr	r3, [r3, #32]
 800b754:	697a      	ldr	r2, [r7, #20]
 800b756:	429a      	cmp	r2, r3
 800b758:	d016      	beq.n	800b788 <f_write_dma_start+0x240>
				fp->fptr < fp->obj.objsize &&
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	699a      	ldr	r2, [r3, #24]
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b762:	429a      	cmp	r2, r3
 800b764:	d210      	bcs.n	800b788 <f_write_dma_start+0x240>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	7858      	ldrb	r0, [r3, #1]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b770:	2301      	movs	r3, #1
 800b772:	697a      	ldr	r2, [r7, #20]
 800b774:	f7fd ffb8 	bl	80096e8 <disk_read>
 800b778:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d004      	beq.n	800b788 <f_write_dma_start+0x240>
					ABORT(fs, FR_DISK_ERR);
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2201      	movs	r2, #1
 800b782:	755a      	strb	r2, [r3, #21]
 800b784:	2301      	movs	r3, #1
 800b786:	e025      	b.n	800b7d4 <f_write_dma_start+0x28c>
			}
#endif
			fp->sect = sect;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	697a      	ldr	r2, [r7, #20]
 800b78c:	621a      	str	r2, [r3, #32]
 800b78e:	e020      	b.n	800b7d2 <f_write_dma_start+0x28a>
		}
	}

	else {

		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	699b      	ldr	r3, [r3, #24]
 800b794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b798:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b79c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b79e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d901      	bls.n	800b7aa <f_write_dma_start+0x262>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	699b      	ldr	r3, [r3, #24]
 800b7b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7b8:	4413      	add	r3, r2
 800b7ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7bc:	69f9      	ldr	r1, [r7, #28]
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f7fe f8a8 	bl	8009914 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	7d1b      	ldrb	r3, [r3, #20]
 800b7c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b7cc:	b2da      	uxtb	r2, r3
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	751a      	strb	r2, [r3, #20]
#endif

	}

//	fp->flag |= FA_MODIFIED;				/* Set file change flag */
	LEAVE_FF(fs, FR_OK);
 800b7d2:	2300      	movs	r3, #0
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3730      	adds	r7, #48	; 0x30
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <f_write_dma_cplt>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b08c      	sub	sp, #48	; 0x30
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	607a      	str	r2, [r7, #4]
 800b7e8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	627b      	str	r3, [r7, #36]	; 0x24

	// Replicating all this again, after dma_start: should be stored as globals /////////
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	f107 0214 	add.w	r2, r7, #20
 800b7f4:	4611      	mov	r1, r2
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7ff fc6c 	bl	800b0d4 <validate>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b802:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b806:	2b00      	cmp	r3, #0
 800b808:	d107      	bne.n	800b81a <f_write_dma_cplt+0x3e>
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	7d5b      	ldrb	r3, [r3, #21]
 800b80e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b812:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b816:	2b00      	cmp	r3, #0
 800b818:	d002      	beq.n	800b820 <f_write_dma_cplt+0x44>
 800b81a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b81e:	e0c4      	b.n	800b9aa <f_write_dma_cplt+0x1ce>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	7d1b      	ldrb	r3, [r3, #20]
 800b824:	f003 0302 	and.w	r3, r3, #2
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d101      	bne.n	800b830 <f_write_dma_cplt+0x54>
 800b82c:	2307      	movs	r3, #7
 800b82e:	e0bc      	b.n	800b9aa <f_write_dma_cplt+0x1ce>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	699a      	ldr	r2, [r3, #24]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	441a      	add	r2, r3
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	699b      	ldr	r3, [r3, #24]
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d203      	bcs.n	800b848 <f_write_dma_cplt+0x6c>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	699b      	ldr	r3, [r3, #24]
 800b844:	43db      	mvns	r3, r3
 800b846:	607b      	str	r3, [r7, #4]
	}
	csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	699b      	ldr	r3, [r3, #24]
 800b84c:	0a5b      	lsrs	r3, r3, #9
 800b84e:	697a      	ldr	r2, [r7, #20]
 800b850:	8952      	ldrh	r2, [r2, #10]
 800b852:	3a01      	subs	r2, #1
 800b854:	4013      	ands	r3, r2
 800b856:	623b      	str	r3, [r7, #32]
	sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b858:	697a      	ldr	r2, [r7, #20]
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	69db      	ldr	r3, [r3, #28]
 800b85e:	4619      	mov	r1, r3
 800b860:	4610      	mov	r0, r2
 800b862:	f7fe fb21 	bl	8009ea8 <clust2sect>
 800b866:	61f8      	str	r0, [r7, #28]
	if (!sect) ABORT(fs, FR_INT_ERR);
 800b868:	69fb      	ldr	r3, [r7, #28]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d104      	bne.n	800b878 <f_write_dma_cplt+0x9c>
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2202      	movs	r2, #2
 800b872:	755a      	strb	r2, [r3, #21]
 800b874:	2302      	movs	r3, #2
 800b876:	e098      	b.n	800b9aa <f_write_dma_cplt+0x1ce>
	sect += csect;
 800b878:	69fa      	ldr	r2, [r7, #28]
 800b87a:	6a3b      	ldr	r3, [r7, #32]
 800b87c:	4413      	add	r3, r2
 800b87e:	61fb      	str	r3, [r7, #28]
	////////////////////////////////////////////////////////////////////////////////


	*bw = 0;	/* Clear write byte counter */
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	2200      	movs	r2, #0
 800b884:	601a      	str	r2, [r3, #0]

	if (disk_write_dma_cplt(fs->drv) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	785b      	ldrb	r3, [r3, #1]
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7fd ff8c 	bl	80097a8 <disk_write_dma_cplt>
 800b890:	4603      	mov	r3, r0
 800b892:	2b00      	cmp	r3, #0
 800b894:	d004      	beq.n	800b8a0 <f_write_dma_cplt+0xc4>
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2201      	movs	r2, #1
 800b89a:	755a      	strb	r2, [r3, #21]
 800b89c:	2301      	movs	r3, #1
 800b89e:	e084      	b.n	800b9aa <f_write_dma_cplt+0x1ce>
	if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
		mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
		fs->wflag = 0;
	}
#else
	if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	6a1a      	ldr	r2, [r3, #32]
 800b8a4:	69fb      	ldr	r3, [r7, #28]
 800b8a6:	1ad3      	subs	r3, r2, r3
 800b8a8:	69ba      	ldr	r2, [r7, #24]
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d915      	bls.n	800b8da <f_write_dma_cplt+0xfe>
		mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	6a1a      	ldr	r2, [r3, #32]
 800b8b8:	69fb      	ldr	r3, [r7, #28]
 800b8ba:	1ad3      	subs	r3, r2, r3
 800b8bc:	025b      	lsls	r3, r3, #9
 800b8be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8c0:	4413      	add	r3, r2
 800b8c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	f7fe f824 	bl	8009914 <mem_cpy>
		fp->flag &= (BYTE)~FA_DIRTY;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	7d1b      	ldrb	r3, [r3, #20]
 800b8d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8d4:	b2da      	uxtb	r2, r3
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	751a      	strb	r2, [r3, #20]
	}
#endif
#endif
	wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	025b      	lsls	r3, r3, #9
 800b8de:	62bb      	str	r3, [r7, #40]	; 0x28
	if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
		if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
		fs->winsect = sect;
	}
#else
	if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	6a1b      	ldr	r3, [r3, #32]
 800b8e4:	69fa      	ldr	r2, [r7, #28]
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d016      	beq.n	800b918 <f_write_dma_cplt+0x13c>
		fp->fptr < fp->obj.objsize &&
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	699a      	ldr	r2, [r3, #24]
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	68db      	ldr	r3, [r3, #12]
	if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d210      	bcs.n	800b918 <f_write_dma_cplt+0x13c>
		disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	7858      	ldrb	r0, [r3, #1]
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b900:	2301      	movs	r3, #1
 800b902:	69fa      	ldr	r2, [r7, #28]
 800b904:	f7fd fef0 	bl	80096e8 <disk_read>
 800b908:	4603      	mov	r3, r0
		fp->fptr < fp->obj.objsize &&
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d004      	beq.n	800b918 <f_write_dma_cplt+0x13c>
			ABORT(fs, FR_DISK_ERR);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2201      	movs	r2, #1
 800b912:	755a      	strb	r2, [r3, #21]
 800b914:	2301      	movs	r3, #1
 800b916:	e048      	b.n	800b9aa <f_write_dma_cplt+0x1ce>
	}
#endif
	fp->sect = sect;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	69fa      	ldr	r2, [r7, #28]
 800b91c:	621a      	str	r2, [r3, #32]
	wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	699b      	ldr	r3, [r3, #24]
 800b922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b926:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b92a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b92c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	429a      	cmp	r2, r3
 800b932:	d901      	bls.n	800b938 <f_write_dma_cplt+0x15c>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
	if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
	mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
	fs->wflag = 1;
#else
	mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	699b      	ldr	r3, [r3, #24]
 800b942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b946:	4413      	add	r3, r2
 800b948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b94a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7fd ffe1 	bl	8009914 <mem_cpy>
	fp->flag |= FA_DIRTY;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	7d1b      	ldrb	r3, [r3, #20]
 800b956:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b95a:	b2da      	uxtb	r2, r3
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	751a      	strb	r2, [r3, #20]
#endif

	wbuff += wcnt; fp->fptr += wcnt; fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt; btw -= wcnt;
 800b960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b964:	4413      	add	r3, r2
 800b966:	627b      	str	r3, [r7, #36]	; 0x24
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	699a      	ldr	r2, [r3, #24]
 800b96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96e:	441a      	add	r2, r3
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	619a      	str	r2, [r3, #24]
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	68da      	ldr	r2, [r3, #12]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	699b      	ldr	r3, [r3, #24]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	bf38      	it	cc
 800b980:	461a      	movcc	r2, r3
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	60da      	str	r2, [r3, #12]
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98c:	441a      	add	r2, r3
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	601a      	str	r2, [r3, #0]
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b996:	1ad3      	subs	r3, r2, r3
 800b998:	607b      	str	r3, [r7, #4]

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	7d1b      	ldrb	r3, [r3, #20]
 800b99e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9a2:	b2da      	uxtb	r2, r3
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b9a8:	2300      	movs	r3, #0
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3730      	adds	r7, #48	; 0x30
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b086      	sub	sp, #24
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f107 0208 	add.w	r2, r7, #8
 800b9c0:	4611      	mov	r1, r2
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7ff fb86 	bl	800b0d4 <validate>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b9cc:	7dfb      	ldrb	r3, [r7, #23]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d168      	bne.n	800baa4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	7d1b      	ldrb	r3, [r3, #20]
 800b9d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d062      	beq.n	800baa4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	7d1b      	ldrb	r3, [r3, #20]
 800b9e2:	b25b      	sxtb	r3, r3
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	da15      	bge.n	800ba14 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	7858      	ldrb	r0, [r3, #1]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6a1a      	ldr	r2, [r3, #32]
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	f7fd fe96 	bl	8009728 <disk_write>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d001      	beq.n	800ba06 <f_sync+0x54>
 800ba02:	2301      	movs	r3, #1
 800ba04:	e04f      	b.n	800baa6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	7d1b      	ldrb	r3, [r3, #20]
 800ba0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba0e:	b2da      	uxtb	r2, r3
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ba14:	f7fc ff9a 	bl	800894c <get_fattime>
 800ba18:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ba1a:	68ba      	ldr	r2, [r7, #8]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba20:	4619      	mov	r1, r3
 800ba22:	4610      	mov	r0, r2
 800ba24:	f7fe f9a4 	bl	8009d70 <move_window>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ba2c:	7dfb      	ldrb	r3, [r7, #23]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d138      	bne.n	800baa4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba36:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	330b      	adds	r3, #11
 800ba3c:	781a      	ldrb	r2, [r3, #0]
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	330b      	adds	r3, #11
 800ba42:	f042 0220 	orr.w	r2, r2, #32
 800ba46:	b2d2      	uxtb	r2, r2
 800ba48:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6818      	ldr	r0, [r3, #0]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	689b      	ldr	r3, [r3, #8]
 800ba52:	461a      	mov	r2, r3
 800ba54:	68f9      	ldr	r1, [r7, #12]
 800ba56:	f7fe fea9 	bl	800a7ac <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	f103 021c 	add.w	r2, r3, #28
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	68db      	ldr	r3, [r3, #12]
 800ba64:	4619      	mov	r1, r3
 800ba66:	4610      	mov	r0, r2
 800ba68:	f7fd ff28 	bl	80098bc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	3316      	adds	r3, #22
 800ba70:	6939      	ldr	r1, [r7, #16]
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7fd ff22 	bl	80098bc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	3312      	adds	r3, #18
 800ba7c:	2100      	movs	r1, #0
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f7fd ff01 	bl	8009886 <st_word>
					fs->wflag = 1;
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	2201      	movs	r2, #1
 800ba88:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f7fe f99d 	bl	8009dcc <sync_fs>
 800ba92:	4603      	mov	r3, r0
 800ba94:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	7d1b      	ldrb	r3, [r3, #20]
 800ba9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba9e:	b2da      	uxtb	r2, r3
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800baa4:	7dfb      	ldrb	r3, [r7, #23]
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3718      	adds	r7, #24
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}

0800baae <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800baae:	b580      	push	{r7, lr}
 800bab0:	b084      	sub	sp, #16
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f7ff ff7b 	bl	800b9b2 <f_sync>
 800babc:	4603      	mov	r3, r0
 800babe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bac0:	7bfb      	ldrb	r3, [r7, #15]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d118      	bne.n	800baf8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f107 0208 	add.w	r2, r7, #8
 800bacc:	4611      	mov	r1, r2
 800bace:	4618      	mov	r0, r3
 800bad0:	f7ff fb00 	bl	800b0d4 <validate>
 800bad4:	4603      	mov	r3, r0
 800bad6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bad8:	7bfb      	ldrb	r3, [r7, #15]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d10c      	bne.n	800baf8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	691b      	ldr	r3, [r3, #16]
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7fe f8a0 	bl	8009c28 <dec_lock>
 800bae8:	4603      	mov	r3, r0
 800baea:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800baec:	7bfb      	ldrb	r3, [r7, #15]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d102      	bne.n	800baf8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2200      	movs	r2, #0
 800baf6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800baf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3710      	adds	r7, #16
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}
	...

0800bb04 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b087      	sub	sp, #28
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	4613      	mov	r3, r2
 800bb10:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bb12:	2301      	movs	r3, #1
 800bb14:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bb16:	2300      	movs	r3, #0
 800bb18:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bb1a:	4b1f      	ldr	r3, [pc, #124]	; (800bb98 <FATFS_LinkDriverEx+0x94>)
 800bb1c:	7a5b      	ldrb	r3, [r3, #9]
 800bb1e:	b2db      	uxtb	r3, r3
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d131      	bne.n	800bb88 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bb24:	4b1c      	ldr	r3, [pc, #112]	; (800bb98 <FATFS_LinkDriverEx+0x94>)
 800bb26:	7a5b      	ldrb	r3, [r3, #9]
 800bb28:	b2db      	uxtb	r3, r3
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	4b1a      	ldr	r3, [pc, #104]	; (800bb98 <FATFS_LinkDriverEx+0x94>)
 800bb2e:	2100      	movs	r1, #0
 800bb30:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bb32:	4b19      	ldr	r3, [pc, #100]	; (800bb98 <FATFS_LinkDriverEx+0x94>)
 800bb34:	7a5b      	ldrb	r3, [r3, #9]
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	4a17      	ldr	r2, [pc, #92]	; (800bb98 <FATFS_LinkDriverEx+0x94>)
 800bb3a:	009b      	lsls	r3, r3, #2
 800bb3c:	4413      	add	r3, r2
 800bb3e:	68fa      	ldr	r2, [r7, #12]
 800bb40:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bb42:	4b15      	ldr	r3, [pc, #84]	; (800bb98 <FATFS_LinkDriverEx+0x94>)
 800bb44:	7a5b      	ldrb	r3, [r3, #9]
 800bb46:	b2db      	uxtb	r3, r3
 800bb48:	461a      	mov	r2, r3
 800bb4a:	4b13      	ldr	r3, [pc, #76]	; (800bb98 <FATFS_LinkDriverEx+0x94>)
 800bb4c:	4413      	add	r3, r2
 800bb4e:	79fa      	ldrb	r2, [r7, #7]
 800bb50:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bb52:	4b11      	ldr	r3, [pc, #68]	; (800bb98 <FATFS_LinkDriverEx+0x94>)
 800bb54:	7a5b      	ldrb	r3, [r3, #9]
 800bb56:	b2db      	uxtb	r3, r3
 800bb58:	1c5a      	adds	r2, r3, #1
 800bb5a:	b2d1      	uxtb	r1, r2
 800bb5c:	4a0e      	ldr	r2, [pc, #56]	; (800bb98 <FATFS_LinkDriverEx+0x94>)
 800bb5e:	7251      	strb	r1, [r2, #9]
 800bb60:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bb62:	7dbb      	ldrb	r3, [r7, #22]
 800bb64:	3330      	adds	r3, #48	; 0x30
 800bb66:	b2da      	uxtb	r2, r3
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	3301      	adds	r3, #1
 800bb70:	223a      	movs	r2, #58	; 0x3a
 800bb72:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	3302      	adds	r3, #2
 800bb78:	222f      	movs	r2, #47	; 0x2f
 800bb7a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	3303      	adds	r3, #3
 800bb80:	2200      	movs	r2, #0
 800bb82:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bb84:	2300      	movs	r3, #0
 800bb86:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bb88:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	371c      	adds	r7, #28
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb94:	4770      	bx	lr
 800bb96:	bf00      	nop
 800bb98:	24000bd4 	.word	0x24000bd4

0800bb9c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bba6:	2200      	movs	r2, #0
 800bba8:	6839      	ldr	r1, [r7, #0]
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f7ff ffaa 	bl	800bb04 <FATFS_LinkDriverEx>
 800bbb0:	4603      	mov	r3, r0
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3708      	adds	r7, #8
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
	...

0800bbbc <__errno>:
 800bbbc:	4b01      	ldr	r3, [pc, #4]	; (800bbc4 <__errno+0x8>)
 800bbbe:	6818      	ldr	r0, [r3, #0]
 800bbc0:	4770      	bx	lr
 800bbc2:	bf00      	nop
 800bbc4:	24000034 	.word	0x24000034

0800bbc8 <__libc_init_array>:
 800bbc8:	b570      	push	{r4, r5, r6, lr}
 800bbca:	4e0d      	ldr	r6, [pc, #52]	; (800bc00 <__libc_init_array+0x38>)
 800bbcc:	4c0d      	ldr	r4, [pc, #52]	; (800bc04 <__libc_init_array+0x3c>)
 800bbce:	1ba4      	subs	r4, r4, r6
 800bbd0:	10a4      	asrs	r4, r4, #2
 800bbd2:	2500      	movs	r5, #0
 800bbd4:	42a5      	cmp	r5, r4
 800bbd6:	d109      	bne.n	800bbec <__libc_init_array+0x24>
 800bbd8:	4e0b      	ldr	r6, [pc, #44]	; (800bc08 <__libc_init_array+0x40>)
 800bbda:	4c0c      	ldr	r4, [pc, #48]	; (800bc0c <__libc_init_array+0x44>)
 800bbdc:	f000 fc40 	bl	800c460 <_init>
 800bbe0:	1ba4      	subs	r4, r4, r6
 800bbe2:	10a4      	asrs	r4, r4, #2
 800bbe4:	2500      	movs	r5, #0
 800bbe6:	42a5      	cmp	r5, r4
 800bbe8:	d105      	bne.n	800bbf6 <__libc_init_array+0x2e>
 800bbea:	bd70      	pop	{r4, r5, r6, pc}
 800bbec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bbf0:	4798      	blx	r3
 800bbf2:	3501      	adds	r5, #1
 800bbf4:	e7ee      	b.n	800bbd4 <__libc_init_array+0xc>
 800bbf6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bbfa:	4798      	blx	r3
 800bbfc:	3501      	adds	r5, #1
 800bbfe:	e7f2      	b.n	800bbe6 <__libc_init_array+0x1e>
 800bc00:	0800c6dc 	.word	0x0800c6dc
 800bc04:	0800c6dc 	.word	0x0800c6dc
 800bc08:	0800c6dc 	.word	0x0800c6dc
 800bc0c:	0800c6e0 	.word	0x0800c6e0

0800bc10 <memset>:
 800bc10:	4402      	add	r2, r0
 800bc12:	4603      	mov	r3, r0
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d100      	bne.n	800bc1a <memset+0xa>
 800bc18:	4770      	bx	lr
 800bc1a:	f803 1b01 	strb.w	r1, [r3], #1
 800bc1e:	e7f9      	b.n	800bc14 <memset+0x4>

0800bc20 <_vsniprintf_r>:
 800bc20:	b530      	push	{r4, r5, lr}
 800bc22:	1e14      	subs	r4, r2, #0
 800bc24:	4605      	mov	r5, r0
 800bc26:	b09b      	sub	sp, #108	; 0x6c
 800bc28:	4618      	mov	r0, r3
 800bc2a:	da05      	bge.n	800bc38 <_vsniprintf_r+0x18>
 800bc2c:	238b      	movs	r3, #139	; 0x8b
 800bc2e:	602b      	str	r3, [r5, #0]
 800bc30:	f04f 30ff 	mov.w	r0, #4294967295
 800bc34:	b01b      	add	sp, #108	; 0x6c
 800bc36:	bd30      	pop	{r4, r5, pc}
 800bc38:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bc3c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bc40:	bf14      	ite	ne
 800bc42:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bc46:	4623      	moveq	r3, r4
 800bc48:	9302      	str	r3, [sp, #8]
 800bc4a:	9305      	str	r3, [sp, #20]
 800bc4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc50:	9100      	str	r1, [sp, #0]
 800bc52:	9104      	str	r1, [sp, #16]
 800bc54:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bc58:	4602      	mov	r2, r0
 800bc5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bc5c:	4669      	mov	r1, sp
 800bc5e:	4628      	mov	r0, r5
 800bc60:	f000 f872 	bl	800bd48 <_svfiprintf_r>
 800bc64:	1c43      	adds	r3, r0, #1
 800bc66:	bfbc      	itt	lt
 800bc68:	238b      	movlt	r3, #139	; 0x8b
 800bc6a:	602b      	strlt	r3, [r5, #0]
 800bc6c:	2c00      	cmp	r4, #0
 800bc6e:	d0e1      	beq.n	800bc34 <_vsniprintf_r+0x14>
 800bc70:	9b00      	ldr	r3, [sp, #0]
 800bc72:	2200      	movs	r2, #0
 800bc74:	701a      	strb	r2, [r3, #0]
 800bc76:	e7dd      	b.n	800bc34 <_vsniprintf_r+0x14>

0800bc78 <vsniprintf>:
 800bc78:	b507      	push	{r0, r1, r2, lr}
 800bc7a:	9300      	str	r3, [sp, #0]
 800bc7c:	4613      	mov	r3, r2
 800bc7e:	460a      	mov	r2, r1
 800bc80:	4601      	mov	r1, r0
 800bc82:	4803      	ldr	r0, [pc, #12]	; (800bc90 <vsniprintf+0x18>)
 800bc84:	6800      	ldr	r0, [r0, #0]
 800bc86:	f7ff ffcb 	bl	800bc20 <_vsniprintf_r>
 800bc8a:	b003      	add	sp, #12
 800bc8c:	f85d fb04 	ldr.w	pc, [sp], #4
 800bc90:	24000034 	.word	0x24000034

0800bc94 <__ssputs_r>:
 800bc94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc98:	688e      	ldr	r6, [r1, #8]
 800bc9a:	429e      	cmp	r6, r3
 800bc9c:	4682      	mov	sl, r0
 800bc9e:	460c      	mov	r4, r1
 800bca0:	4690      	mov	r8, r2
 800bca2:	4699      	mov	r9, r3
 800bca4:	d837      	bhi.n	800bd16 <__ssputs_r+0x82>
 800bca6:	898a      	ldrh	r2, [r1, #12]
 800bca8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bcac:	d031      	beq.n	800bd12 <__ssputs_r+0x7e>
 800bcae:	6825      	ldr	r5, [r4, #0]
 800bcb0:	6909      	ldr	r1, [r1, #16]
 800bcb2:	1a6f      	subs	r7, r5, r1
 800bcb4:	6965      	ldr	r5, [r4, #20]
 800bcb6:	2302      	movs	r3, #2
 800bcb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bcbc:	fb95 f5f3 	sdiv	r5, r5, r3
 800bcc0:	f109 0301 	add.w	r3, r9, #1
 800bcc4:	443b      	add	r3, r7
 800bcc6:	429d      	cmp	r5, r3
 800bcc8:	bf38      	it	cc
 800bcca:	461d      	movcc	r5, r3
 800bccc:	0553      	lsls	r3, r2, #21
 800bcce:	d530      	bpl.n	800bd32 <__ssputs_r+0x9e>
 800bcd0:	4629      	mov	r1, r5
 800bcd2:	f000 fb2b 	bl	800c32c <_malloc_r>
 800bcd6:	4606      	mov	r6, r0
 800bcd8:	b950      	cbnz	r0, 800bcf0 <__ssputs_r+0x5c>
 800bcda:	230c      	movs	r3, #12
 800bcdc:	f8ca 3000 	str.w	r3, [sl]
 800bce0:	89a3      	ldrh	r3, [r4, #12]
 800bce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bce6:	81a3      	strh	r3, [r4, #12]
 800bce8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcf0:	463a      	mov	r2, r7
 800bcf2:	6921      	ldr	r1, [r4, #16]
 800bcf4:	f000 faa8 	bl	800c248 <memcpy>
 800bcf8:	89a3      	ldrh	r3, [r4, #12]
 800bcfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bcfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd02:	81a3      	strh	r3, [r4, #12]
 800bd04:	6126      	str	r6, [r4, #16]
 800bd06:	6165      	str	r5, [r4, #20]
 800bd08:	443e      	add	r6, r7
 800bd0a:	1bed      	subs	r5, r5, r7
 800bd0c:	6026      	str	r6, [r4, #0]
 800bd0e:	60a5      	str	r5, [r4, #8]
 800bd10:	464e      	mov	r6, r9
 800bd12:	454e      	cmp	r6, r9
 800bd14:	d900      	bls.n	800bd18 <__ssputs_r+0x84>
 800bd16:	464e      	mov	r6, r9
 800bd18:	4632      	mov	r2, r6
 800bd1a:	4641      	mov	r1, r8
 800bd1c:	6820      	ldr	r0, [r4, #0]
 800bd1e:	f000 fa9e 	bl	800c25e <memmove>
 800bd22:	68a3      	ldr	r3, [r4, #8]
 800bd24:	1b9b      	subs	r3, r3, r6
 800bd26:	60a3      	str	r3, [r4, #8]
 800bd28:	6823      	ldr	r3, [r4, #0]
 800bd2a:	441e      	add	r6, r3
 800bd2c:	6026      	str	r6, [r4, #0]
 800bd2e:	2000      	movs	r0, #0
 800bd30:	e7dc      	b.n	800bcec <__ssputs_r+0x58>
 800bd32:	462a      	mov	r2, r5
 800bd34:	f000 fb54 	bl	800c3e0 <_realloc_r>
 800bd38:	4606      	mov	r6, r0
 800bd3a:	2800      	cmp	r0, #0
 800bd3c:	d1e2      	bne.n	800bd04 <__ssputs_r+0x70>
 800bd3e:	6921      	ldr	r1, [r4, #16]
 800bd40:	4650      	mov	r0, sl
 800bd42:	f000 faa5 	bl	800c290 <_free_r>
 800bd46:	e7c8      	b.n	800bcda <__ssputs_r+0x46>

0800bd48 <_svfiprintf_r>:
 800bd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd4c:	461d      	mov	r5, r3
 800bd4e:	898b      	ldrh	r3, [r1, #12]
 800bd50:	061f      	lsls	r7, r3, #24
 800bd52:	b09d      	sub	sp, #116	; 0x74
 800bd54:	4680      	mov	r8, r0
 800bd56:	460c      	mov	r4, r1
 800bd58:	4616      	mov	r6, r2
 800bd5a:	d50f      	bpl.n	800bd7c <_svfiprintf_r+0x34>
 800bd5c:	690b      	ldr	r3, [r1, #16]
 800bd5e:	b96b      	cbnz	r3, 800bd7c <_svfiprintf_r+0x34>
 800bd60:	2140      	movs	r1, #64	; 0x40
 800bd62:	f000 fae3 	bl	800c32c <_malloc_r>
 800bd66:	6020      	str	r0, [r4, #0]
 800bd68:	6120      	str	r0, [r4, #16]
 800bd6a:	b928      	cbnz	r0, 800bd78 <_svfiprintf_r+0x30>
 800bd6c:	230c      	movs	r3, #12
 800bd6e:	f8c8 3000 	str.w	r3, [r8]
 800bd72:	f04f 30ff 	mov.w	r0, #4294967295
 800bd76:	e0c8      	b.n	800bf0a <_svfiprintf_r+0x1c2>
 800bd78:	2340      	movs	r3, #64	; 0x40
 800bd7a:	6163      	str	r3, [r4, #20]
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	9309      	str	r3, [sp, #36]	; 0x24
 800bd80:	2320      	movs	r3, #32
 800bd82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd86:	2330      	movs	r3, #48	; 0x30
 800bd88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd8c:	9503      	str	r5, [sp, #12]
 800bd8e:	f04f 0b01 	mov.w	fp, #1
 800bd92:	4637      	mov	r7, r6
 800bd94:	463d      	mov	r5, r7
 800bd96:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bd9a:	b10b      	cbz	r3, 800bda0 <_svfiprintf_r+0x58>
 800bd9c:	2b25      	cmp	r3, #37	; 0x25
 800bd9e:	d13e      	bne.n	800be1e <_svfiprintf_r+0xd6>
 800bda0:	ebb7 0a06 	subs.w	sl, r7, r6
 800bda4:	d00b      	beq.n	800bdbe <_svfiprintf_r+0x76>
 800bda6:	4653      	mov	r3, sl
 800bda8:	4632      	mov	r2, r6
 800bdaa:	4621      	mov	r1, r4
 800bdac:	4640      	mov	r0, r8
 800bdae:	f7ff ff71 	bl	800bc94 <__ssputs_r>
 800bdb2:	3001      	adds	r0, #1
 800bdb4:	f000 80a4 	beq.w	800bf00 <_svfiprintf_r+0x1b8>
 800bdb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdba:	4453      	add	r3, sl
 800bdbc:	9309      	str	r3, [sp, #36]	; 0x24
 800bdbe:	783b      	ldrb	r3, [r7, #0]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	f000 809d 	beq.w	800bf00 <_svfiprintf_r+0x1b8>
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	f04f 32ff 	mov.w	r2, #4294967295
 800bdcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdd0:	9304      	str	r3, [sp, #16]
 800bdd2:	9307      	str	r3, [sp, #28]
 800bdd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bdd8:	931a      	str	r3, [sp, #104]	; 0x68
 800bdda:	462f      	mov	r7, r5
 800bddc:	2205      	movs	r2, #5
 800bdde:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bde2:	4850      	ldr	r0, [pc, #320]	; (800bf24 <_svfiprintf_r+0x1dc>)
 800bde4:	f7f4 fa84 	bl	80002f0 <memchr>
 800bde8:	9b04      	ldr	r3, [sp, #16]
 800bdea:	b9d0      	cbnz	r0, 800be22 <_svfiprintf_r+0xda>
 800bdec:	06d9      	lsls	r1, r3, #27
 800bdee:	bf44      	itt	mi
 800bdf0:	2220      	movmi	r2, #32
 800bdf2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bdf6:	071a      	lsls	r2, r3, #28
 800bdf8:	bf44      	itt	mi
 800bdfa:	222b      	movmi	r2, #43	; 0x2b
 800bdfc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800be00:	782a      	ldrb	r2, [r5, #0]
 800be02:	2a2a      	cmp	r2, #42	; 0x2a
 800be04:	d015      	beq.n	800be32 <_svfiprintf_r+0xea>
 800be06:	9a07      	ldr	r2, [sp, #28]
 800be08:	462f      	mov	r7, r5
 800be0a:	2000      	movs	r0, #0
 800be0c:	250a      	movs	r5, #10
 800be0e:	4639      	mov	r1, r7
 800be10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be14:	3b30      	subs	r3, #48	; 0x30
 800be16:	2b09      	cmp	r3, #9
 800be18:	d94d      	bls.n	800beb6 <_svfiprintf_r+0x16e>
 800be1a:	b1b8      	cbz	r0, 800be4c <_svfiprintf_r+0x104>
 800be1c:	e00f      	b.n	800be3e <_svfiprintf_r+0xf6>
 800be1e:	462f      	mov	r7, r5
 800be20:	e7b8      	b.n	800bd94 <_svfiprintf_r+0x4c>
 800be22:	4a40      	ldr	r2, [pc, #256]	; (800bf24 <_svfiprintf_r+0x1dc>)
 800be24:	1a80      	subs	r0, r0, r2
 800be26:	fa0b f000 	lsl.w	r0, fp, r0
 800be2a:	4318      	orrs	r0, r3
 800be2c:	9004      	str	r0, [sp, #16]
 800be2e:	463d      	mov	r5, r7
 800be30:	e7d3      	b.n	800bdda <_svfiprintf_r+0x92>
 800be32:	9a03      	ldr	r2, [sp, #12]
 800be34:	1d11      	adds	r1, r2, #4
 800be36:	6812      	ldr	r2, [r2, #0]
 800be38:	9103      	str	r1, [sp, #12]
 800be3a:	2a00      	cmp	r2, #0
 800be3c:	db01      	blt.n	800be42 <_svfiprintf_r+0xfa>
 800be3e:	9207      	str	r2, [sp, #28]
 800be40:	e004      	b.n	800be4c <_svfiprintf_r+0x104>
 800be42:	4252      	negs	r2, r2
 800be44:	f043 0302 	orr.w	r3, r3, #2
 800be48:	9207      	str	r2, [sp, #28]
 800be4a:	9304      	str	r3, [sp, #16]
 800be4c:	783b      	ldrb	r3, [r7, #0]
 800be4e:	2b2e      	cmp	r3, #46	; 0x2e
 800be50:	d10c      	bne.n	800be6c <_svfiprintf_r+0x124>
 800be52:	787b      	ldrb	r3, [r7, #1]
 800be54:	2b2a      	cmp	r3, #42	; 0x2a
 800be56:	d133      	bne.n	800bec0 <_svfiprintf_r+0x178>
 800be58:	9b03      	ldr	r3, [sp, #12]
 800be5a:	1d1a      	adds	r2, r3, #4
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	9203      	str	r2, [sp, #12]
 800be60:	2b00      	cmp	r3, #0
 800be62:	bfb8      	it	lt
 800be64:	f04f 33ff 	movlt.w	r3, #4294967295
 800be68:	3702      	adds	r7, #2
 800be6a:	9305      	str	r3, [sp, #20]
 800be6c:	4d2e      	ldr	r5, [pc, #184]	; (800bf28 <_svfiprintf_r+0x1e0>)
 800be6e:	7839      	ldrb	r1, [r7, #0]
 800be70:	2203      	movs	r2, #3
 800be72:	4628      	mov	r0, r5
 800be74:	f7f4 fa3c 	bl	80002f0 <memchr>
 800be78:	b138      	cbz	r0, 800be8a <_svfiprintf_r+0x142>
 800be7a:	2340      	movs	r3, #64	; 0x40
 800be7c:	1b40      	subs	r0, r0, r5
 800be7e:	fa03 f000 	lsl.w	r0, r3, r0
 800be82:	9b04      	ldr	r3, [sp, #16]
 800be84:	4303      	orrs	r3, r0
 800be86:	3701      	adds	r7, #1
 800be88:	9304      	str	r3, [sp, #16]
 800be8a:	7839      	ldrb	r1, [r7, #0]
 800be8c:	4827      	ldr	r0, [pc, #156]	; (800bf2c <_svfiprintf_r+0x1e4>)
 800be8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be92:	2206      	movs	r2, #6
 800be94:	1c7e      	adds	r6, r7, #1
 800be96:	f7f4 fa2b 	bl	80002f0 <memchr>
 800be9a:	2800      	cmp	r0, #0
 800be9c:	d038      	beq.n	800bf10 <_svfiprintf_r+0x1c8>
 800be9e:	4b24      	ldr	r3, [pc, #144]	; (800bf30 <_svfiprintf_r+0x1e8>)
 800bea0:	bb13      	cbnz	r3, 800bee8 <_svfiprintf_r+0x1a0>
 800bea2:	9b03      	ldr	r3, [sp, #12]
 800bea4:	3307      	adds	r3, #7
 800bea6:	f023 0307 	bic.w	r3, r3, #7
 800beaa:	3308      	adds	r3, #8
 800beac:	9303      	str	r3, [sp, #12]
 800beae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beb0:	444b      	add	r3, r9
 800beb2:	9309      	str	r3, [sp, #36]	; 0x24
 800beb4:	e76d      	b.n	800bd92 <_svfiprintf_r+0x4a>
 800beb6:	fb05 3202 	mla	r2, r5, r2, r3
 800beba:	2001      	movs	r0, #1
 800bebc:	460f      	mov	r7, r1
 800bebe:	e7a6      	b.n	800be0e <_svfiprintf_r+0xc6>
 800bec0:	2300      	movs	r3, #0
 800bec2:	3701      	adds	r7, #1
 800bec4:	9305      	str	r3, [sp, #20]
 800bec6:	4619      	mov	r1, r3
 800bec8:	250a      	movs	r5, #10
 800beca:	4638      	mov	r0, r7
 800becc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bed0:	3a30      	subs	r2, #48	; 0x30
 800bed2:	2a09      	cmp	r2, #9
 800bed4:	d903      	bls.n	800bede <_svfiprintf_r+0x196>
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d0c8      	beq.n	800be6c <_svfiprintf_r+0x124>
 800beda:	9105      	str	r1, [sp, #20]
 800bedc:	e7c6      	b.n	800be6c <_svfiprintf_r+0x124>
 800bede:	fb05 2101 	mla	r1, r5, r1, r2
 800bee2:	2301      	movs	r3, #1
 800bee4:	4607      	mov	r7, r0
 800bee6:	e7f0      	b.n	800beca <_svfiprintf_r+0x182>
 800bee8:	ab03      	add	r3, sp, #12
 800beea:	9300      	str	r3, [sp, #0]
 800beec:	4622      	mov	r2, r4
 800beee:	4b11      	ldr	r3, [pc, #68]	; (800bf34 <_svfiprintf_r+0x1ec>)
 800bef0:	a904      	add	r1, sp, #16
 800bef2:	4640      	mov	r0, r8
 800bef4:	f3af 8000 	nop.w
 800bef8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800befc:	4681      	mov	r9, r0
 800befe:	d1d6      	bne.n	800beae <_svfiprintf_r+0x166>
 800bf00:	89a3      	ldrh	r3, [r4, #12]
 800bf02:	065b      	lsls	r3, r3, #25
 800bf04:	f53f af35 	bmi.w	800bd72 <_svfiprintf_r+0x2a>
 800bf08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf0a:	b01d      	add	sp, #116	; 0x74
 800bf0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf10:	ab03      	add	r3, sp, #12
 800bf12:	9300      	str	r3, [sp, #0]
 800bf14:	4622      	mov	r2, r4
 800bf16:	4b07      	ldr	r3, [pc, #28]	; (800bf34 <_svfiprintf_r+0x1ec>)
 800bf18:	a904      	add	r1, sp, #16
 800bf1a:	4640      	mov	r0, r8
 800bf1c:	f000 f882 	bl	800c024 <_printf_i>
 800bf20:	e7ea      	b.n	800bef8 <_svfiprintf_r+0x1b0>
 800bf22:	bf00      	nop
 800bf24:	0800c6a0 	.word	0x0800c6a0
 800bf28:	0800c6a6 	.word	0x0800c6a6
 800bf2c:	0800c6aa 	.word	0x0800c6aa
 800bf30:	00000000 	.word	0x00000000
 800bf34:	0800bc95 	.word	0x0800bc95

0800bf38 <_printf_common>:
 800bf38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf3c:	4691      	mov	r9, r2
 800bf3e:	461f      	mov	r7, r3
 800bf40:	688a      	ldr	r2, [r1, #8]
 800bf42:	690b      	ldr	r3, [r1, #16]
 800bf44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	bfb8      	it	lt
 800bf4c:	4613      	movlt	r3, r2
 800bf4e:	f8c9 3000 	str.w	r3, [r9]
 800bf52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bf56:	4606      	mov	r6, r0
 800bf58:	460c      	mov	r4, r1
 800bf5a:	b112      	cbz	r2, 800bf62 <_printf_common+0x2a>
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	f8c9 3000 	str.w	r3, [r9]
 800bf62:	6823      	ldr	r3, [r4, #0]
 800bf64:	0699      	lsls	r1, r3, #26
 800bf66:	bf42      	ittt	mi
 800bf68:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bf6c:	3302      	addmi	r3, #2
 800bf6e:	f8c9 3000 	strmi.w	r3, [r9]
 800bf72:	6825      	ldr	r5, [r4, #0]
 800bf74:	f015 0506 	ands.w	r5, r5, #6
 800bf78:	d107      	bne.n	800bf8a <_printf_common+0x52>
 800bf7a:	f104 0a19 	add.w	sl, r4, #25
 800bf7e:	68e3      	ldr	r3, [r4, #12]
 800bf80:	f8d9 2000 	ldr.w	r2, [r9]
 800bf84:	1a9b      	subs	r3, r3, r2
 800bf86:	42ab      	cmp	r3, r5
 800bf88:	dc28      	bgt.n	800bfdc <_printf_common+0xa4>
 800bf8a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bf8e:	6822      	ldr	r2, [r4, #0]
 800bf90:	3300      	adds	r3, #0
 800bf92:	bf18      	it	ne
 800bf94:	2301      	movne	r3, #1
 800bf96:	0692      	lsls	r2, r2, #26
 800bf98:	d42d      	bmi.n	800bff6 <_printf_common+0xbe>
 800bf9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf9e:	4639      	mov	r1, r7
 800bfa0:	4630      	mov	r0, r6
 800bfa2:	47c0      	blx	r8
 800bfa4:	3001      	adds	r0, #1
 800bfa6:	d020      	beq.n	800bfea <_printf_common+0xb2>
 800bfa8:	6823      	ldr	r3, [r4, #0]
 800bfaa:	68e5      	ldr	r5, [r4, #12]
 800bfac:	f8d9 2000 	ldr.w	r2, [r9]
 800bfb0:	f003 0306 	and.w	r3, r3, #6
 800bfb4:	2b04      	cmp	r3, #4
 800bfb6:	bf08      	it	eq
 800bfb8:	1aad      	subeq	r5, r5, r2
 800bfba:	68a3      	ldr	r3, [r4, #8]
 800bfbc:	6922      	ldr	r2, [r4, #16]
 800bfbe:	bf0c      	ite	eq
 800bfc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bfc4:	2500      	movne	r5, #0
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	bfc4      	itt	gt
 800bfca:	1a9b      	subgt	r3, r3, r2
 800bfcc:	18ed      	addgt	r5, r5, r3
 800bfce:	f04f 0900 	mov.w	r9, #0
 800bfd2:	341a      	adds	r4, #26
 800bfd4:	454d      	cmp	r5, r9
 800bfd6:	d11a      	bne.n	800c00e <_printf_common+0xd6>
 800bfd8:	2000      	movs	r0, #0
 800bfda:	e008      	b.n	800bfee <_printf_common+0xb6>
 800bfdc:	2301      	movs	r3, #1
 800bfde:	4652      	mov	r2, sl
 800bfe0:	4639      	mov	r1, r7
 800bfe2:	4630      	mov	r0, r6
 800bfe4:	47c0      	blx	r8
 800bfe6:	3001      	adds	r0, #1
 800bfe8:	d103      	bne.n	800bff2 <_printf_common+0xba>
 800bfea:	f04f 30ff 	mov.w	r0, #4294967295
 800bfee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bff2:	3501      	adds	r5, #1
 800bff4:	e7c3      	b.n	800bf7e <_printf_common+0x46>
 800bff6:	18e1      	adds	r1, r4, r3
 800bff8:	1c5a      	adds	r2, r3, #1
 800bffa:	2030      	movs	r0, #48	; 0x30
 800bffc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c000:	4422      	add	r2, r4
 800c002:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c006:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c00a:	3302      	adds	r3, #2
 800c00c:	e7c5      	b.n	800bf9a <_printf_common+0x62>
 800c00e:	2301      	movs	r3, #1
 800c010:	4622      	mov	r2, r4
 800c012:	4639      	mov	r1, r7
 800c014:	4630      	mov	r0, r6
 800c016:	47c0      	blx	r8
 800c018:	3001      	adds	r0, #1
 800c01a:	d0e6      	beq.n	800bfea <_printf_common+0xb2>
 800c01c:	f109 0901 	add.w	r9, r9, #1
 800c020:	e7d8      	b.n	800bfd4 <_printf_common+0x9c>
	...

0800c024 <_printf_i>:
 800c024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c028:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c02c:	460c      	mov	r4, r1
 800c02e:	7e09      	ldrb	r1, [r1, #24]
 800c030:	b085      	sub	sp, #20
 800c032:	296e      	cmp	r1, #110	; 0x6e
 800c034:	4617      	mov	r7, r2
 800c036:	4606      	mov	r6, r0
 800c038:	4698      	mov	r8, r3
 800c03a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c03c:	f000 80b3 	beq.w	800c1a6 <_printf_i+0x182>
 800c040:	d822      	bhi.n	800c088 <_printf_i+0x64>
 800c042:	2963      	cmp	r1, #99	; 0x63
 800c044:	d036      	beq.n	800c0b4 <_printf_i+0x90>
 800c046:	d80a      	bhi.n	800c05e <_printf_i+0x3a>
 800c048:	2900      	cmp	r1, #0
 800c04a:	f000 80b9 	beq.w	800c1c0 <_printf_i+0x19c>
 800c04e:	2958      	cmp	r1, #88	; 0x58
 800c050:	f000 8083 	beq.w	800c15a <_printf_i+0x136>
 800c054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c058:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c05c:	e032      	b.n	800c0c4 <_printf_i+0xa0>
 800c05e:	2964      	cmp	r1, #100	; 0x64
 800c060:	d001      	beq.n	800c066 <_printf_i+0x42>
 800c062:	2969      	cmp	r1, #105	; 0x69
 800c064:	d1f6      	bne.n	800c054 <_printf_i+0x30>
 800c066:	6820      	ldr	r0, [r4, #0]
 800c068:	6813      	ldr	r3, [r2, #0]
 800c06a:	0605      	lsls	r5, r0, #24
 800c06c:	f103 0104 	add.w	r1, r3, #4
 800c070:	d52a      	bpl.n	800c0c8 <_printf_i+0xa4>
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	6011      	str	r1, [r2, #0]
 800c076:	2b00      	cmp	r3, #0
 800c078:	da03      	bge.n	800c082 <_printf_i+0x5e>
 800c07a:	222d      	movs	r2, #45	; 0x2d
 800c07c:	425b      	negs	r3, r3
 800c07e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c082:	486f      	ldr	r0, [pc, #444]	; (800c240 <_printf_i+0x21c>)
 800c084:	220a      	movs	r2, #10
 800c086:	e039      	b.n	800c0fc <_printf_i+0xd8>
 800c088:	2973      	cmp	r1, #115	; 0x73
 800c08a:	f000 809d 	beq.w	800c1c8 <_printf_i+0x1a4>
 800c08e:	d808      	bhi.n	800c0a2 <_printf_i+0x7e>
 800c090:	296f      	cmp	r1, #111	; 0x6f
 800c092:	d020      	beq.n	800c0d6 <_printf_i+0xb2>
 800c094:	2970      	cmp	r1, #112	; 0x70
 800c096:	d1dd      	bne.n	800c054 <_printf_i+0x30>
 800c098:	6823      	ldr	r3, [r4, #0]
 800c09a:	f043 0320 	orr.w	r3, r3, #32
 800c09e:	6023      	str	r3, [r4, #0]
 800c0a0:	e003      	b.n	800c0aa <_printf_i+0x86>
 800c0a2:	2975      	cmp	r1, #117	; 0x75
 800c0a4:	d017      	beq.n	800c0d6 <_printf_i+0xb2>
 800c0a6:	2978      	cmp	r1, #120	; 0x78
 800c0a8:	d1d4      	bne.n	800c054 <_printf_i+0x30>
 800c0aa:	2378      	movs	r3, #120	; 0x78
 800c0ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c0b0:	4864      	ldr	r0, [pc, #400]	; (800c244 <_printf_i+0x220>)
 800c0b2:	e055      	b.n	800c160 <_printf_i+0x13c>
 800c0b4:	6813      	ldr	r3, [r2, #0]
 800c0b6:	1d19      	adds	r1, r3, #4
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	6011      	str	r1, [r2, #0]
 800c0bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c0c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	e08c      	b.n	800c1e2 <_printf_i+0x1be>
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	6011      	str	r1, [r2, #0]
 800c0cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c0d0:	bf18      	it	ne
 800c0d2:	b21b      	sxthne	r3, r3
 800c0d4:	e7cf      	b.n	800c076 <_printf_i+0x52>
 800c0d6:	6813      	ldr	r3, [r2, #0]
 800c0d8:	6825      	ldr	r5, [r4, #0]
 800c0da:	1d18      	adds	r0, r3, #4
 800c0dc:	6010      	str	r0, [r2, #0]
 800c0de:	0628      	lsls	r0, r5, #24
 800c0e0:	d501      	bpl.n	800c0e6 <_printf_i+0xc2>
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	e002      	b.n	800c0ec <_printf_i+0xc8>
 800c0e6:	0668      	lsls	r0, r5, #25
 800c0e8:	d5fb      	bpl.n	800c0e2 <_printf_i+0xbe>
 800c0ea:	881b      	ldrh	r3, [r3, #0]
 800c0ec:	4854      	ldr	r0, [pc, #336]	; (800c240 <_printf_i+0x21c>)
 800c0ee:	296f      	cmp	r1, #111	; 0x6f
 800c0f0:	bf14      	ite	ne
 800c0f2:	220a      	movne	r2, #10
 800c0f4:	2208      	moveq	r2, #8
 800c0f6:	2100      	movs	r1, #0
 800c0f8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c0fc:	6865      	ldr	r5, [r4, #4]
 800c0fe:	60a5      	str	r5, [r4, #8]
 800c100:	2d00      	cmp	r5, #0
 800c102:	f2c0 8095 	blt.w	800c230 <_printf_i+0x20c>
 800c106:	6821      	ldr	r1, [r4, #0]
 800c108:	f021 0104 	bic.w	r1, r1, #4
 800c10c:	6021      	str	r1, [r4, #0]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d13d      	bne.n	800c18e <_printf_i+0x16a>
 800c112:	2d00      	cmp	r5, #0
 800c114:	f040 808e 	bne.w	800c234 <_printf_i+0x210>
 800c118:	4665      	mov	r5, ip
 800c11a:	2a08      	cmp	r2, #8
 800c11c:	d10b      	bne.n	800c136 <_printf_i+0x112>
 800c11e:	6823      	ldr	r3, [r4, #0]
 800c120:	07db      	lsls	r3, r3, #31
 800c122:	d508      	bpl.n	800c136 <_printf_i+0x112>
 800c124:	6923      	ldr	r3, [r4, #16]
 800c126:	6862      	ldr	r2, [r4, #4]
 800c128:	429a      	cmp	r2, r3
 800c12a:	bfde      	ittt	le
 800c12c:	2330      	movle	r3, #48	; 0x30
 800c12e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c132:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c136:	ebac 0305 	sub.w	r3, ip, r5
 800c13a:	6123      	str	r3, [r4, #16]
 800c13c:	f8cd 8000 	str.w	r8, [sp]
 800c140:	463b      	mov	r3, r7
 800c142:	aa03      	add	r2, sp, #12
 800c144:	4621      	mov	r1, r4
 800c146:	4630      	mov	r0, r6
 800c148:	f7ff fef6 	bl	800bf38 <_printf_common>
 800c14c:	3001      	adds	r0, #1
 800c14e:	d14d      	bne.n	800c1ec <_printf_i+0x1c8>
 800c150:	f04f 30ff 	mov.w	r0, #4294967295
 800c154:	b005      	add	sp, #20
 800c156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c15a:	4839      	ldr	r0, [pc, #228]	; (800c240 <_printf_i+0x21c>)
 800c15c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c160:	6813      	ldr	r3, [r2, #0]
 800c162:	6821      	ldr	r1, [r4, #0]
 800c164:	1d1d      	adds	r5, r3, #4
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	6015      	str	r5, [r2, #0]
 800c16a:	060a      	lsls	r2, r1, #24
 800c16c:	d50b      	bpl.n	800c186 <_printf_i+0x162>
 800c16e:	07ca      	lsls	r2, r1, #31
 800c170:	bf44      	itt	mi
 800c172:	f041 0120 	orrmi.w	r1, r1, #32
 800c176:	6021      	strmi	r1, [r4, #0]
 800c178:	b91b      	cbnz	r3, 800c182 <_printf_i+0x15e>
 800c17a:	6822      	ldr	r2, [r4, #0]
 800c17c:	f022 0220 	bic.w	r2, r2, #32
 800c180:	6022      	str	r2, [r4, #0]
 800c182:	2210      	movs	r2, #16
 800c184:	e7b7      	b.n	800c0f6 <_printf_i+0xd2>
 800c186:	064d      	lsls	r5, r1, #25
 800c188:	bf48      	it	mi
 800c18a:	b29b      	uxthmi	r3, r3
 800c18c:	e7ef      	b.n	800c16e <_printf_i+0x14a>
 800c18e:	4665      	mov	r5, ip
 800c190:	fbb3 f1f2 	udiv	r1, r3, r2
 800c194:	fb02 3311 	mls	r3, r2, r1, r3
 800c198:	5cc3      	ldrb	r3, [r0, r3]
 800c19a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c19e:	460b      	mov	r3, r1
 800c1a0:	2900      	cmp	r1, #0
 800c1a2:	d1f5      	bne.n	800c190 <_printf_i+0x16c>
 800c1a4:	e7b9      	b.n	800c11a <_printf_i+0xf6>
 800c1a6:	6813      	ldr	r3, [r2, #0]
 800c1a8:	6825      	ldr	r5, [r4, #0]
 800c1aa:	6961      	ldr	r1, [r4, #20]
 800c1ac:	1d18      	adds	r0, r3, #4
 800c1ae:	6010      	str	r0, [r2, #0]
 800c1b0:	0628      	lsls	r0, r5, #24
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	d501      	bpl.n	800c1ba <_printf_i+0x196>
 800c1b6:	6019      	str	r1, [r3, #0]
 800c1b8:	e002      	b.n	800c1c0 <_printf_i+0x19c>
 800c1ba:	066a      	lsls	r2, r5, #25
 800c1bc:	d5fb      	bpl.n	800c1b6 <_printf_i+0x192>
 800c1be:	8019      	strh	r1, [r3, #0]
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	6123      	str	r3, [r4, #16]
 800c1c4:	4665      	mov	r5, ip
 800c1c6:	e7b9      	b.n	800c13c <_printf_i+0x118>
 800c1c8:	6813      	ldr	r3, [r2, #0]
 800c1ca:	1d19      	adds	r1, r3, #4
 800c1cc:	6011      	str	r1, [r2, #0]
 800c1ce:	681d      	ldr	r5, [r3, #0]
 800c1d0:	6862      	ldr	r2, [r4, #4]
 800c1d2:	2100      	movs	r1, #0
 800c1d4:	4628      	mov	r0, r5
 800c1d6:	f7f4 f88b 	bl	80002f0 <memchr>
 800c1da:	b108      	cbz	r0, 800c1e0 <_printf_i+0x1bc>
 800c1dc:	1b40      	subs	r0, r0, r5
 800c1de:	6060      	str	r0, [r4, #4]
 800c1e0:	6863      	ldr	r3, [r4, #4]
 800c1e2:	6123      	str	r3, [r4, #16]
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1ea:	e7a7      	b.n	800c13c <_printf_i+0x118>
 800c1ec:	6923      	ldr	r3, [r4, #16]
 800c1ee:	462a      	mov	r2, r5
 800c1f0:	4639      	mov	r1, r7
 800c1f2:	4630      	mov	r0, r6
 800c1f4:	47c0      	blx	r8
 800c1f6:	3001      	adds	r0, #1
 800c1f8:	d0aa      	beq.n	800c150 <_printf_i+0x12c>
 800c1fa:	6823      	ldr	r3, [r4, #0]
 800c1fc:	079b      	lsls	r3, r3, #30
 800c1fe:	d413      	bmi.n	800c228 <_printf_i+0x204>
 800c200:	68e0      	ldr	r0, [r4, #12]
 800c202:	9b03      	ldr	r3, [sp, #12]
 800c204:	4298      	cmp	r0, r3
 800c206:	bfb8      	it	lt
 800c208:	4618      	movlt	r0, r3
 800c20a:	e7a3      	b.n	800c154 <_printf_i+0x130>
 800c20c:	2301      	movs	r3, #1
 800c20e:	464a      	mov	r2, r9
 800c210:	4639      	mov	r1, r7
 800c212:	4630      	mov	r0, r6
 800c214:	47c0      	blx	r8
 800c216:	3001      	adds	r0, #1
 800c218:	d09a      	beq.n	800c150 <_printf_i+0x12c>
 800c21a:	3501      	adds	r5, #1
 800c21c:	68e3      	ldr	r3, [r4, #12]
 800c21e:	9a03      	ldr	r2, [sp, #12]
 800c220:	1a9b      	subs	r3, r3, r2
 800c222:	42ab      	cmp	r3, r5
 800c224:	dcf2      	bgt.n	800c20c <_printf_i+0x1e8>
 800c226:	e7eb      	b.n	800c200 <_printf_i+0x1dc>
 800c228:	2500      	movs	r5, #0
 800c22a:	f104 0919 	add.w	r9, r4, #25
 800c22e:	e7f5      	b.n	800c21c <_printf_i+0x1f8>
 800c230:	2b00      	cmp	r3, #0
 800c232:	d1ac      	bne.n	800c18e <_printf_i+0x16a>
 800c234:	7803      	ldrb	r3, [r0, #0]
 800c236:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c23a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c23e:	e76c      	b.n	800c11a <_printf_i+0xf6>
 800c240:	0800c6b1 	.word	0x0800c6b1
 800c244:	0800c6c2 	.word	0x0800c6c2

0800c248 <memcpy>:
 800c248:	b510      	push	{r4, lr}
 800c24a:	1e43      	subs	r3, r0, #1
 800c24c:	440a      	add	r2, r1
 800c24e:	4291      	cmp	r1, r2
 800c250:	d100      	bne.n	800c254 <memcpy+0xc>
 800c252:	bd10      	pop	{r4, pc}
 800c254:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c258:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c25c:	e7f7      	b.n	800c24e <memcpy+0x6>

0800c25e <memmove>:
 800c25e:	4288      	cmp	r0, r1
 800c260:	b510      	push	{r4, lr}
 800c262:	eb01 0302 	add.w	r3, r1, r2
 800c266:	d807      	bhi.n	800c278 <memmove+0x1a>
 800c268:	1e42      	subs	r2, r0, #1
 800c26a:	4299      	cmp	r1, r3
 800c26c:	d00a      	beq.n	800c284 <memmove+0x26>
 800c26e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c272:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c276:	e7f8      	b.n	800c26a <memmove+0xc>
 800c278:	4283      	cmp	r3, r0
 800c27a:	d9f5      	bls.n	800c268 <memmove+0xa>
 800c27c:	1881      	adds	r1, r0, r2
 800c27e:	1ad2      	subs	r2, r2, r3
 800c280:	42d3      	cmn	r3, r2
 800c282:	d100      	bne.n	800c286 <memmove+0x28>
 800c284:	bd10      	pop	{r4, pc}
 800c286:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c28a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c28e:	e7f7      	b.n	800c280 <memmove+0x22>

0800c290 <_free_r>:
 800c290:	b538      	push	{r3, r4, r5, lr}
 800c292:	4605      	mov	r5, r0
 800c294:	2900      	cmp	r1, #0
 800c296:	d045      	beq.n	800c324 <_free_r+0x94>
 800c298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c29c:	1f0c      	subs	r4, r1, #4
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	bfb8      	it	lt
 800c2a2:	18e4      	addlt	r4, r4, r3
 800c2a4:	f000 f8d2 	bl	800c44c <__malloc_lock>
 800c2a8:	4a1f      	ldr	r2, [pc, #124]	; (800c328 <_free_r+0x98>)
 800c2aa:	6813      	ldr	r3, [r2, #0]
 800c2ac:	4610      	mov	r0, r2
 800c2ae:	b933      	cbnz	r3, 800c2be <_free_r+0x2e>
 800c2b0:	6063      	str	r3, [r4, #4]
 800c2b2:	6014      	str	r4, [r2, #0]
 800c2b4:	4628      	mov	r0, r5
 800c2b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2ba:	f000 b8c8 	b.w	800c44e <__malloc_unlock>
 800c2be:	42a3      	cmp	r3, r4
 800c2c0:	d90c      	bls.n	800c2dc <_free_r+0x4c>
 800c2c2:	6821      	ldr	r1, [r4, #0]
 800c2c4:	1862      	adds	r2, r4, r1
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	bf04      	itt	eq
 800c2ca:	681a      	ldreq	r2, [r3, #0]
 800c2cc:	685b      	ldreq	r3, [r3, #4]
 800c2ce:	6063      	str	r3, [r4, #4]
 800c2d0:	bf04      	itt	eq
 800c2d2:	1852      	addeq	r2, r2, r1
 800c2d4:	6022      	streq	r2, [r4, #0]
 800c2d6:	6004      	str	r4, [r0, #0]
 800c2d8:	e7ec      	b.n	800c2b4 <_free_r+0x24>
 800c2da:	4613      	mov	r3, r2
 800c2dc:	685a      	ldr	r2, [r3, #4]
 800c2de:	b10a      	cbz	r2, 800c2e4 <_free_r+0x54>
 800c2e0:	42a2      	cmp	r2, r4
 800c2e2:	d9fa      	bls.n	800c2da <_free_r+0x4a>
 800c2e4:	6819      	ldr	r1, [r3, #0]
 800c2e6:	1858      	adds	r0, r3, r1
 800c2e8:	42a0      	cmp	r0, r4
 800c2ea:	d10b      	bne.n	800c304 <_free_r+0x74>
 800c2ec:	6820      	ldr	r0, [r4, #0]
 800c2ee:	4401      	add	r1, r0
 800c2f0:	1858      	adds	r0, r3, r1
 800c2f2:	4282      	cmp	r2, r0
 800c2f4:	6019      	str	r1, [r3, #0]
 800c2f6:	d1dd      	bne.n	800c2b4 <_free_r+0x24>
 800c2f8:	6810      	ldr	r0, [r2, #0]
 800c2fa:	6852      	ldr	r2, [r2, #4]
 800c2fc:	605a      	str	r2, [r3, #4]
 800c2fe:	4401      	add	r1, r0
 800c300:	6019      	str	r1, [r3, #0]
 800c302:	e7d7      	b.n	800c2b4 <_free_r+0x24>
 800c304:	d902      	bls.n	800c30c <_free_r+0x7c>
 800c306:	230c      	movs	r3, #12
 800c308:	602b      	str	r3, [r5, #0]
 800c30a:	e7d3      	b.n	800c2b4 <_free_r+0x24>
 800c30c:	6820      	ldr	r0, [r4, #0]
 800c30e:	1821      	adds	r1, r4, r0
 800c310:	428a      	cmp	r2, r1
 800c312:	bf04      	itt	eq
 800c314:	6811      	ldreq	r1, [r2, #0]
 800c316:	6852      	ldreq	r2, [r2, #4]
 800c318:	6062      	str	r2, [r4, #4]
 800c31a:	bf04      	itt	eq
 800c31c:	1809      	addeq	r1, r1, r0
 800c31e:	6021      	streq	r1, [r4, #0]
 800c320:	605c      	str	r4, [r3, #4]
 800c322:	e7c7      	b.n	800c2b4 <_free_r+0x24>
 800c324:	bd38      	pop	{r3, r4, r5, pc}
 800c326:	bf00      	nop
 800c328:	24000be0 	.word	0x24000be0

0800c32c <_malloc_r>:
 800c32c:	b570      	push	{r4, r5, r6, lr}
 800c32e:	1ccd      	adds	r5, r1, #3
 800c330:	f025 0503 	bic.w	r5, r5, #3
 800c334:	3508      	adds	r5, #8
 800c336:	2d0c      	cmp	r5, #12
 800c338:	bf38      	it	cc
 800c33a:	250c      	movcc	r5, #12
 800c33c:	2d00      	cmp	r5, #0
 800c33e:	4606      	mov	r6, r0
 800c340:	db01      	blt.n	800c346 <_malloc_r+0x1a>
 800c342:	42a9      	cmp	r1, r5
 800c344:	d903      	bls.n	800c34e <_malloc_r+0x22>
 800c346:	230c      	movs	r3, #12
 800c348:	6033      	str	r3, [r6, #0]
 800c34a:	2000      	movs	r0, #0
 800c34c:	bd70      	pop	{r4, r5, r6, pc}
 800c34e:	f000 f87d 	bl	800c44c <__malloc_lock>
 800c352:	4a21      	ldr	r2, [pc, #132]	; (800c3d8 <_malloc_r+0xac>)
 800c354:	6814      	ldr	r4, [r2, #0]
 800c356:	4621      	mov	r1, r4
 800c358:	b991      	cbnz	r1, 800c380 <_malloc_r+0x54>
 800c35a:	4c20      	ldr	r4, [pc, #128]	; (800c3dc <_malloc_r+0xb0>)
 800c35c:	6823      	ldr	r3, [r4, #0]
 800c35e:	b91b      	cbnz	r3, 800c368 <_malloc_r+0x3c>
 800c360:	4630      	mov	r0, r6
 800c362:	f000 f863 	bl	800c42c <_sbrk_r>
 800c366:	6020      	str	r0, [r4, #0]
 800c368:	4629      	mov	r1, r5
 800c36a:	4630      	mov	r0, r6
 800c36c:	f000 f85e 	bl	800c42c <_sbrk_r>
 800c370:	1c43      	adds	r3, r0, #1
 800c372:	d124      	bne.n	800c3be <_malloc_r+0x92>
 800c374:	230c      	movs	r3, #12
 800c376:	6033      	str	r3, [r6, #0]
 800c378:	4630      	mov	r0, r6
 800c37a:	f000 f868 	bl	800c44e <__malloc_unlock>
 800c37e:	e7e4      	b.n	800c34a <_malloc_r+0x1e>
 800c380:	680b      	ldr	r3, [r1, #0]
 800c382:	1b5b      	subs	r3, r3, r5
 800c384:	d418      	bmi.n	800c3b8 <_malloc_r+0x8c>
 800c386:	2b0b      	cmp	r3, #11
 800c388:	d90f      	bls.n	800c3aa <_malloc_r+0x7e>
 800c38a:	600b      	str	r3, [r1, #0]
 800c38c:	50cd      	str	r5, [r1, r3]
 800c38e:	18cc      	adds	r4, r1, r3
 800c390:	4630      	mov	r0, r6
 800c392:	f000 f85c 	bl	800c44e <__malloc_unlock>
 800c396:	f104 000b 	add.w	r0, r4, #11
 800c39a:	1d23      	adds	r3, r4, #4
 800c39c:	f020 0007 	bic.w	r0, r0, #7
 800c3a0:	1ac3      	subs	r3, r0, r3
 800c3a2:	d0d3      	beq.n	800c34c <_malloc_r+0x20>
 800c3a4:	425a      	negs	r2, r3
 800c3a6:	50e2      	str	r2, [r4, r3]
 800c3a8:	e7d0      	b.n	800c34c <_malloc_r+0x20>
 800c3aa:	428c      	cmp	r4, r1
 800c3ac:	684b      	ldr	r3, [r1, #4]
 800c3ae:	bf16      	itet	ne
 800c3b0:	6063      	strne	r3, [r4, #4]
 800c3b2:	6013      	streq	r3, [r2, #0]
 800c3b4:	460c      	movne	r4, r1
 800c3b6:	e7eb      	b.n	800c390 <_malloc_r+0x64>
 800c3b8:	460c      	mov	r4, r1
 800c3ba:	6849      	ldr	r1, [r1, #4]
 800c3bc:	e7cc      	b.n	800c358 <_malloc_r+0x2c>
 800c3be:	1cc4      	adds	r4, r0, #3
 800c3c0:	f024 0403 	bic.w	r4, r4, #3
 800c3c4:	42a0      	cmp	r0, r4
 800c3c6:	d005      	beq.n	800c3d4 <_malloc_r+0xa8>
 800c3c8:	1a21      	subs	r1, r4, r0
 800c3ca:	4630      	mov	r0, r6
 800c3cc:	f000 f82e 	bl	800c42c <_sbrk_r>
 800c3d0:	3001      	adds	r0, #1
 800c3d2:	d0cf      	beq.n	800c374 <_malloc_r+0x48>
 800c3d4:	6025      	str	r5, [r4, #0]
 800c3d6:	e7db      	b.n	800c390 <_malloc_r+0x64>
 800c3d8:	24000be0 	.word	0x24000be0
 800c3dc:	24000be4 	.word	0x24000be4

0800c3e0 <_realloc_r>:
 800c3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3e2:	4607      	mov	r7, r0
 800c3e4:	4614      	mov	r4, r2
 800c3e6:	460e      	mov	r6, r1
 800c3e8:	b921      	cbnz	r1, 800c3f4 <_realloc_r+0x14>
 800c3ea:	4611      	mov	r1, r2
 800c3ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c3f0:	f7ff bf9c 	b.w	800c32c <_malloc_r>
 800c3f4:	b922      	cbnz	r2, 800c400 <_realloc_r+0x20>
 800c3f6:	f7ff ff4b 	bl	800c290 <_free_r>
 800c3fa:	4625      	mov	r5, r4
 800c3fc:	4628      	mov	r0, r5
 800c3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c400:	f000 f826 	bl	800c450 <_malloc_usable_size_r>
 800c404:	42a0      	cmp	r0, r4
 800c406:	d20f      	bcs.n	800c428 <_realloc_r+0x48>
 800c408:	4621      	mov	r1, r4
 800c40a:	4638      	mov	r0, r7
 800c40c:	f7ff ff8e 	bl	800c32c <_malloc_r>
 800c410:	4605      	mov	r5, r0
 800c412:	2800      	cmp	r0, #0
 800c414:	d0f2      	beq.n	800c3fc <_realloc_r+0x1c>
 800c416:	4631      	mov	r1, r6
 800c418:	4622      	mov	r2, r4
 800c41a:	f7ff ff15 	bl	800c248 <memcpy>
 800c41e:	4631      	mov	r1, r6
 800c420:	4638      	mov	r0, r7
 800c422:	f7ff ff35 	bl	800c290 <_free_r>
 800c426:	e7e9      	b.n	800c3fc <_realloc_r+0x1c>
 800c428:	4635      	mov	r5, r6
 800c42a:	e7e7      	b.n	800c3fc <_realloc_r+0x1c>

0800c42c <_sbrk_r>:
 800c42c:	b538      	push	{r3, r4, r5, lr}
 800c42e:	4c06      	ldr	r4, [pc, #24]	; (800c448 <_sbrk_r+0x1c>)
 800c430:	2300      	movs	r3, #0
 800c432:	4605      	mov	r5, r0
 800c434:	4608      	mov	r0, r1
 800c436:	6023      	str	r3, [r4, #0]
 800c438:	f7f4 fe50 	bl	80010dc <_sbrk>
 800c43c:	1c43      	adds	r3, r0, #1
 800c43e:	d102      	bne.n	800c446 <_sbrk_r+0x1a>
 800c440:	6823      	ldr	r3, [r4, #0]
 800c442:	b103      	cbz	r3, 800c446 <_sbrk_r+0x1a>
 800c444:	602b      	str	r3, [r5, #0]
 800c446:	bd38      	pop	{r3, r4, r5, pc}
 800c448:	2400105c 	.word	0x2400105c

0800c44c <__malloc_lock>:
 800c44c:	4770      	bx	lr

0800c44e <__malloc_unlock>:
 800c44e:	4770      	bx	lr

0800c450 <_malloc_usable_size_r>:
 800c450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c454:	1f18      	subs	r0, r3, #4
 800c456:	2b00      	cmp	r3, #0
 800c458:	bfbc      	itt	lt
 800c45a:	580b      	ldrlt	r3, [r1, r0]
 800c45c:	18c0      	addlt	r0, r0, r3
 800c45e:	4770      	bx	lr

0800c460 <_init>:
 800c460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c462:	bf00      	nop
 800c464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c466:	bc08      	pop	{r3}
 800c468:	469e      	mov	lr, r3
 800c46a:	4770      	bx	lr

0800c46c <_fini>:
 800c46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c46e:	bf00      	nop
 800c470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c472:	bc08      	pop	{r3}
 800c474:	469e      	mov	lr, r3
 800c476:	4770      	bx	lr
