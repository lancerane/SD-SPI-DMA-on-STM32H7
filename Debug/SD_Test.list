
SD_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c584  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  0800c824  0800c824  0001c824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cac0  0800cac0  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800cac0  0800cac0  0001cac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cac8  0800cac8  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cac8  0800cac8  0001cac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cacc  0800cacc  0001cacc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  24000000  0800cad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c8  24000098  0800cb68  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001260  0800cb68  00021260  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021401  00000000  00000000  000200c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003798  00000000  00000000  000414c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001088  00000000  00000000  00044c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f30  00000000  00000000  00045ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003afe7  00000000  00000000  00046c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001182b  00000000  00000000  00081bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0015d321  00000000  00000000  0009342a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f074b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004724  00000000  00000000  001f07c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000098 	.word	0x24000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c80c 	.word	0x0800c80c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400009c 	.word	0x2400009c
 80002dc:	0800c80c 	.word	0x0800c80c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <_Z8myprintfPKcz>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8000690:	b40f      	push	{r0, r1, r2, r3}
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	693a      	ldr	r2, [r7, #16]
 80006a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a6:	480b      	ldr	r0, [pc, #44]	; (80006d4 <_Z8myprintfPKcz+0x44>)
 80006a8:	f00b fcbc 	bl	800c024 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80006ac:	4809      	ldr	r0, [pc, #36]	; (80006d4 <_Z8myprintfPKcz+0x44>)
 80006ae:	f7ff fe17 	bl	80002e0 <strlen>
 80006b2:	4603      	mov	r3, r0
 80006b4:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, len, -1);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	4905      	ldr	r1, [pc, #20]	; (80006d4 <_Z8myprintfPKcz+0x44>)
 80006c0:	4805      	ldr	r0, [pc, #20]	; (80006d8 <_Z8myprintfPKcz+0x48>)
 80006c2:	f007 f8b2 	bl	800782a <HAL_UART_Transmit>

}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006d0:	b004      	add	sp, #16
 80006d2:	4770      	bx	lr
 80006d4:	24000aa4 	.word	0x24000aa4
 80006d8:	240001b4 	.word	0x240001b4

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	f2ad 6d44 	subw	sp, sp, #1604	; 0x644
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e4:	f000 fe36 	bl	8001354 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e8:	f000 f924 	bl	8000934 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ec:	f000 face 	bl	8000c8c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80006f0:	f000 faac 	bl	8000c4c <_ZL11MX_DMA_Initv>
  MX_USART3_UART_Init();
 80006f4:	f000 fa4a 	bl	8000b8c <_ZL19MX_USART3_UART_Initv>
  MX_SPI3_Init();
 80006f8:	f000 f9ec 	bl	8000ad4 <_ZL12MX_SPI3_Initv>
  MX_FATFS_Init();
 80006fc:	f008 f964 	bl	80089c8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 8000700:	4862      	ldr	r0, [pc, #392]	; (800088c <main+0x1b0>)
 8000702:	f7ff ffc5 	bl	8000690 <_Z8myprintfPKcz>

  HAL_Delay(1000); //a short delay is important to let the SD card settle
 8000706:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800070a:	f000 feb5 	bl	8001478 <HAL_Delay>

  //Open the file system
  fres = f_mount(&FatFs, "", 1); //1=mount now
 800070e:	2201      	movs	r2, #1
 8000710:	495f      	ldr	r1, [pc, #380]	; (8000890 <main+0x1b4>)
 8000712:	4860      	ldr	r0, [pc, #384]	; (8000894 <main+0x1b8>)
 8000714:	f00a fdcc 	bl	800b2b0 <f_mount>
 8000718:	4603      	mov	r3, r0
 800071a:	461a      	mov	r2, r3
 800071c:	4b5e      	ldr	r3, [pc, #376]	; (8000898 <main+0x1bc>)
 800071e:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 8000720:	4b5d      	ldr	r3, [pc, #372]	; (8000898 <main+0x1bc>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d006      	beq.n	8000736 <main+0x5a>
    myprintf("f_mount error (%i)\r\n", fres);
 8000728:	4b5b      	ldr	r3, [pc, #364]	; (8000898 <main+0x1bc>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	4619      	mov	r1, r3
 800072e:	485b      	ldr	r0, [pc, #364]	; (800089c <main+0x1c0>)
 8000730:	f7ff ffae 	bl	8000690 <_Z8myprintfPKcz>
  while(1);
 8000734:	e7fe      	b.n	8000734 <main+0x58>
  }

  char filename[50] = "newwrite.bin";
 8000736:	4b5a      	ldr	r3, [pc, #360]	; (80008a0 <main+0x1c4>)
 8000738:	f507 64c1 	add.w	r4, r7, #1544	; 0x608
 800073c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800073e:	c407      	stmia	r4!, {r0, r1, r2}
 8000740:	7023      	strb	r3, [r4, #0]
 8000742:	f207 6315 	addw	r3, r7, #1557	; 0x615
 8000746:	2225      	movs	r2, #37	; 0x25
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f00b fc36 	bl	800bfbc <memset>
  fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000750:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 8000754:	221a      	movs	r2, #26
 8000756:	4619      	mov	r1, r3
 8000758:	4852      	ldr	r0, [pc, #328]	; (80008a4 <main+0x1c8>)
 800075a:	f00a fdef 	bl	800b33c <f_open>
 800075e:	4603      	mov	r3, r0
 8000760:	461a      	mov	r2, r3
 8000762:	4b4d      	ldr	r3, [pc, #308]	; (8000898 <main+0x1bc>)
 8000764:	701a      	strb	r2, [r3, #0]
  if(fres == FR_OK) {
 8000766:	4b4c      	ldr	r3, [pc, #304]	; (8000898 <main+0x1bc>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d103      	bne.n	8000776 <main+0x9a>
    myprintf("file opened\r\n");
 800076e:	484e      	ldr	r0, [pc, #312]	; (80008a8 <main+0x1cc>)
 8000770:	f7ff ff8e 	bl	8000690 <_Z8myprintfPKcz>
 8000774:	e005      	b.n	8000782 <main+0xa6>
  }
  else {
    myprintf("f_open error (%i)\r\n", fres);
 8000776:	4b48      	ldr	r3, [pc, #288]	; (8000898 <main+0x1bc>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	4619      	mov	r1, r3
 800077c:	484b      	ldr	r0, [pc, #300]	; (80008ac <main+0x1d0>)
 800077e:	f7ff ff87 	bl	8000690 <_Z8myprintfPKcz>
  }

  //Copy in the data
  UINT bytesWrote;
  buf[0] = 'a';
 8000782:	4b4b      	ldr	r3, [pc, #300]	; (80008b0 <main+0x1d4>)
 8000784:	2261      	movs	r2, #97	; 0x61
 8000786:	701a      	strb	r2, [r3, #0]
//  for (int i(0); i < 511; i++) {
//	char prev = buf[i];
//	buf[i+1] = prev + 1;
//  }

  block.data[0].imuData[0] = 133;
 8000788:	4b4a      	ldr	r3, [pc, #296]	; (80008b4 <main+0x1d8>)
 800078a:	2285      	movs	r2, #133	; 0x85
 800078c:	805a      	strh	r2, [r3, #2]

  fres = f_write_dma_start(&fil, &block, 512);
 800078e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000792:	4948      	ldr	r1, [pc, #288]	; (80008b4 <main+0x1d8>)
 8000794:	4843      	ldr	r0, [pc, #268]	; (80008a4 <main+0x1c8>)
 8000796:	f00b f8ce 	bl	800b936 <f_write_dma_start>
 800079a:	4603      	mov	r3, r0
 800079c:	461a      	mov	r2, r3
 800079e:	4b3e      	ldr	r3, [pc, #248]	; (8000898 <main+0x1bc>)
 80007a0:	701a      	strb	r2, [r3, #0]
//  fres = f_write_dma_start(&fil, buf, 1024);
//  fres = f_write_dma(&fil, buf, 1024, &bytesWrote);

  if(fres == FR_OK) {
 80007a2:	4b3d      	ldr	r3, [pc, #244]	; (8000898 <main+0x1bc>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d103      	bne.n	80007b2 <main+0xd6>
  	myprintf("Commenced DMA transfer\r\n");
 80007aa:	4843      	ldr	r0, [pc, #268]	; (80008b8 <main+0x1dc>)
 80007ac:	f7ff ff70 	bl	8000690 <_Z8myprintfPKcz>
 80007b0:	e002      	b.n	80007b8 <main+0xdc>
  }
  else {
  	myprintf("DMA start error\r\n");
 80007b2:	4842      	ldr	r0, [pc, #264]	; (80008bc <main+0x1e0>)
 80007b4:	f7ff ff6c 	bl	8000690 <_Z8myprintfPKcz>
  }

  HAL_Delay(500);
 80007b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007bc:	f000 fe5c 	bl	8001478 <HAL_Delay>


  f_close(&fil);
 80007c0:	4838      	ldr	r0, [pc, #224]	; (80008a4 <main+0x1c8>)
 80007c2:	f00b fb4a 	bl	800be5a <f_close>

  // Unmount
  f_mount(NULL, "", 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	4931      	ldr	r1, [pc, #196]	; (8000890 <main+0x1b4>)
 80007ca:	2000      	movs	r0, #0
 80007cc:	f00a fd70 	bl	800b2b0 <f_mount>


  /* Now confirm that the write worked correctly */
  //Open the file system
  fres = f_mount(&FatFs, "", 1); //1=mount now
 80007d0:	2201      	movs	r2, #1
 80007d2:	492f      	ldr	r1, [pc, #188]	; (8000890 <main+0x1b4>)
 80007d4:	482f      	ldr	r0, [pc, #188]	; (8000894 <main+0x1b8>)
 80007d6:	f00a fd6b 	bl	800b2b0 <f_mount>
 80007da:	4603      	mov	r3, r0
 80007dc:	461a      	mov	r2, r3
 80007de:	4b2e      	ldr	r3, [pc, #184]	; (8000898 <main+0x1bc>)
 80007e0:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 80007e2:	4b2d      	ldr	r3, [pc, #180]	; (8000898 <main+0x1bc>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d006      	beq.n	80007f8 <main+0x11c>
    myprintf("f_mount error (%i)\r\n", fres);
 80007ea:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <main+0x1bc>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	4619      	mov	r1, r3
 80007f0:	482a      	ldr	r0, [pc, #168]	; (800089c <main+0x1c0>)
 80007f2:	f7ff ff4d 	bl	8000690 <_Z8myprintfPKcz>
  while(1);
 80007f6:	e7fe      	b.n	80007f6 <main+0x11a>
  }

  // Reopen the file
  fres = f_open(&fil, filename, FA_READ);
 80007f8:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 80007fc:	2201      	movs	r2, #1
 80007fe:	4619      	mov	r1, r3
 8000800:	4828      	ldr	r0, [pc, #160]	; (80008a4 <main+0x1c8>)
 8000802:	f00a fd9b 	bl	800b33c <f_open>
 8000806:	4603      	mov	r3, r0
 8000808:	461a      	mov	r2, r3
 800080a:	4b23      	ldr	r3, [pc, #140]	; (8000898 <main+0x1bc>)
 800080c:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 800080e:	4b22      	ldr	r3, [pc, #136]	; (8000898 <main+0x1bc>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d003      	beq.n	800081e <main+0x142>
    myprintf("f_open error (%i)\r\n");
 8000816:	4825      	ldr	r0, [pc, #148]	; (80008ac <main+0x1d0>)
 8000818:	f7ff ff3a 	bl	8000690 <_Z8myprintfPKcz>
    while(1);
 800081c:	e7fe      	b.n	800081c <main+0x140>
  }
  myprintf("File opened for reading\r\n");
 800081e:	4828      	ldr	r0, [pc, #160]	; (80008c0 <main+0x1e4>)
 8000820:	f7ff ff36 	bl	8000690 <_Z8myprintfPKcz>
  char readBuf[1024];
  UINT bytesRead;

  //We can either use f_read OR f_gets to get data out of files
  //f_gets is a wrapper on f_read that does some string formatting for us
  fres = f_read(&fil, &readBlock, 512, &bytesRead);
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 800082a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800082e:	481d      	ldr	r0, [pc, #116]	; (80008a4 <main+0x1c8>)
 8000830:	f00a ff42 	bl	800b6b8 <f_read>
 8000834:	4603      	mov	r3, r0
 8000836:	461a      	mov	r2, r3
 8000838:	4b17      	ldr	r3, [pc, #92]	; (8000898 <main+0x1bc>)
 800083a:	701a      	strb	r2, [r3, #0]
//  fres = f_read(&fil, &readBuf, 1024, &bytesRead);

  if(fres == FR_OK) {
 800083c:	4b16      	ldr	r3, [pc, #88]	; (8000898 <main+0x1bc>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d106      	bne.n	8000852 <main+0x176>
  	myprintf("Read %d bytes\r\n", bytesRead);
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4619      	mov	r1, r3
 800084a:	481e      	ldr	r0, [pc, #120]	; (80008c4 <main+0x1e8>)
 800084c:	f7ff ff20 	bl	8000690 <_Z8myprintfPKcz>
 8000850:	e005      	b.n	800085e <main+0x182>
  }
  else {
  	myprintf("f_read error (%i)\r\n", fres);
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <main+0x1bc>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	4619      	mov	r1, r3
 8000858:	481b      	ldr	r0, [pc, #108]	; (80008c8 <main+0x1ec>)
 800085a:	f7ff ff19 	bl	8000690 <_Z8myprintfPKcz>
  }

  // Readout the value that we put in earlier
  int val = readBlock.data[0].imuData[0];
 800085e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000862:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000866:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c

  myprintf("Read value: %d\r\n", val);
 800086a:	f8d7 163c 	ldr.w	r1, [r7, #1596]	; 0x63c
 800086e:	4817      	ldr	r0, [pc, #92]	; (80008cc <main+0x1f0>)
 8000870:	f7ff ff0e 	bl	8000690 <_Z8myprintfPKcz>

  f_close(&fil);
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <main+0x1c8>)
 8000876:	f00b faf0 	bl	800be5a <f_close>

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 800087a:	2200      	movs	r2, #0
 800087c:	4904      	ldr	r1, [pc, #16]	; (8000890 <main+0x1b4>)
 800087e:	2000      	movs	r0, #0
 8000880:	f00a fd16 	bl	800b2b0 <f_mount>

  myprintf("done\r\n");
 8000884:	4812      	ldr	r0, [pc, #72]	; (80008d0 <main+0x1f4>)
 8000886:	f7ff ff03 	bl	8000690 <_Z8myprintfPKcz>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800088a:	e7fe      	b.n	800088a <main+0x1ae>
 800088c:	0800c824 	.word	0x0800c824
 8000890:	0800c844 	.word	0x0800c844
 8000894:	24000240 	.word	0x24000240
 8000898:	240006a0 	.word	0x240006a0
 800089c:	0800c848 	.word	0x0800c848
 80008a0:	0800c910 	.word	0x0800c910
 80008a4:	24000470 	.word	0x24000470
 80008a8:	0800c860 	.word	0x0800c860
 80008ac:	0800c870 	.word	0x0800c870
 80008b0:	240006a4 	.word	0x240006a4
 80008b4:	24000ba4 	.word	0x24000ba4
 80008b8:	0800c884 	.word	0x0800c884
 80008bc:	0800c8a0 	.word	0x0800c8a0
 80008c0:	0800c8b4 	.word	0x0800c8b4
 80008c4:	0800c8d0 	.word	0x0800c8d0
 80008c8:	0800c8e0 	.word	0x0800c8e0
 80008cc:	0800c8f4 	.word	0x0800c8f4
 80008d0:	0800c908 	.word	0x0800c908

080008d4 <HAL_SPI_TxCpltCallback>:
  }
  /* USER CODE END 3 */
}


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef* hspi) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]

	UINT bytesWrote;
	fres = f_write_dma_cplt(&fil, &block, 512, &bytesWrote);
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e4:	490d      	ldr	r1, [pc, #52]	; (800091c <HAL_SPI_TxCpltCallback+0x48>)
 80008e6:	480e      	ldr	r0, [pc, #56]	; (8000920 <HAL_SPI_TxCpltCallback+0x4c>)
 80008e8:	f00b f94e 	bl	800bb88 <f_write_dma_cplt>
 80008ec:	4603      	mov	r3, r0
 80008ee:	461a      	mov	r2, r3
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <HAL_SPI_TxCpltCallback+0x50>)
 80008f2:	701a      	strb	r2, [r3, #0]
//	fres = f_write_dma_cplt(&fil, buf, 1024, &bytesWrote);

	myprintf("dma transfer complete\r\n");
 80008f4:	480c      	ldr	r0, [pc, #48]	; (8000928 <HAL_SPI_TxCpltCallback+0x54>)
 80008f6:	f7ff fecb 	bl	8000690 <_Z8myprintfPKcz>

	if(fres == FR_OK) {
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <HAL_SPI_TxCpltCallback+0x50>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d105      	bne.n	800090e <HAL_SPI_TxCpltCallback+0x3a>
	  	myprintf("Wrote %d bytes\r\n", bytesWrote);
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	4619      	mov	r1, r3
 8000906:	4809      	ldr	r0, [pc, #36]	; (800092c <HAL_SPI_TxCpltCallback+0x58>)
 8000908:	f7ff fec2 	bl	8000690 <_Z8myprintfPKcz>
	}
	else {
	  myprintf( "f_write error (%i)\r\n");
	}
}
 800090c:	e002      	b.n	8000914 <HAL_SPI_TxCpltCallback+0x40>
	  myprintf( "f_write error (%i)\r\n");
 800090e:	4808      	ldr	r0, [pc, #32]	; (8000930 <HAL_SPI_TxCpltCallback+0x5c>)
 8000910:	f7ff febe 	bl	8000690 <_Z8myprintfPKcz>
}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	24000ba4 	.word	0x24000ba4
 8000920:	24000470 	.word	0x24000470
 8000924:	240006a0 	.word	0x240006a0
 8000928:	0800c944 	.word	0x0800c944
 800092c:	0800c95c 	.word	0x0800c95c
 8000930:	0800c970 	.word	0x0800c970

08000934 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b0cc      	sub	sp, #304	; 0x130
 8000938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800093e:	224c      	movs	r2, #76	; 0x4c
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f00b fb3a 	bl	800bfbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000948:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800094c:	2220      	movs	r2, #32
 800094e:	2100      	movs	r1, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f00b fb33 	bl	800bfbc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	4618      	mov	r0, r3
 800095c:	23bc      	movs	r3, #188	; 0xbc
 800095e:	461a      	mov	r2, r3
 8000960:	2100      	movs	r1, #0
 8000962:	f00b fb2b 	bl	800bfbc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000966:	2002      	movs	r0, #2
 8000968:	f003 fbb6 	bl	80040d8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	4b56      	ldr	r3, [pc, #344]	; (8000acc <_Z18SystemClock_Configv+0x198>)
 8000974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000976:	4a55      	ldr	r2, [pc, #340]	; (8000acc <_Z18SystemClock_Configv+0x198>)
 8000978:	f023 0301 	bic.w	r3, r3, #1
 800097c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800097e:	4b53      	ldr	r3, [pc, #332]	; (8000acc <_Z18SystemClock_Configv+0x198>)
 8000980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000982:	f003 0201 	and.w	r2, r3, #1
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	4b51      	ldr	r3, [pc, #324]	; (8000ad0 <_Z18SystemClock_Configv+0x19c>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000992:	4a4f      	ldr	r2, [pc, #316]	; (8000ad0 <_Z18SystemClock_Configv+0x19c>)
 8000994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000998:	6193      	str	r3, [r2, #24]
 800099a:	4b4d      	ldr	r3, [pc, #308]	; (8000ad0 <_Z18SystemClock_Configv+0x19c>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009aa:	4b49      	ldr	r3, [pc, #292]	; (8000ad0 <_Z18SystemClock_Configv+0x19c>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009b6:	bf14      	ite	ne
 80009b8:	2301      	movne	r3, #1
 80009ba:	2300      	moveq	r3, #0
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d000      	beq.n	80009c4 <_Z18SystemClock_Configv+0x90>
 80009c2:	e7f2      	b.n	80009aa <_Z18SystemClock_Configv+0x76>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80009c4:	2303      	movs	r3, #3
 80009c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009ca:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009d2:	2301      	movs	r3, #1
 80009d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d8:	2340      	movs	r3, #64	; 0x40
 80009da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009de:	2302      	movs	r3, #2
 80009e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e4:	2302      	movs	r3, #2
 80009e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009ea:	2301      	movs	r3, #1
 80009ec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 80009f0:	2318      	movs	r3, #24
 80009f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009f6:	2302      	movs	r3, #2
 80009f8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009fc:	2304      	movs	r3, #4
 80009fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a02:	2302      	movs	r3, #2
 8000a04:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a08:	230c      	movs	r3, #12
 8000a0a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a1a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f003 fb94 	bl	800414c <HAL_RCC_OscConfig>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	bf14      	ite	ne
 8000a2a:	2301      	movne	r3, #1
 8000a2c:	2300      	moveq	r3, #0
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8000a34:	f000 fa70 	bl	8000f18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a38:	233f      	movs	r3, #63	; 0x3f
 8000a3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a56:	2300      	movs	r3, #0
 8000a58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a68:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f003 ff7c 	bl	800496c <HAL_RCC_ClockConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	bf14      	ite	ne
 8000a7a:	2301      	movne	r3, #1
 8000a7c:	2300      	moveq	r3, #0
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <_Z18SystemClock_Configv+0x154>
  {
    Error_Handler();
 8000a84:	f000 fa48 	bl	8000f18 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SPI3;
 8000a88:	f107 0308 	add.w	r3, r7, #8
 8000a8c:	f241 0202 	movw	r2, #4098	; 0x1002
 8000a90:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	2200      	movs	r2, #0
 8000a98:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f004 fae4 	bl	8005074 <HAL_RCCEx_PeriphCLKConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	bf14      	ite	ne
 8000ab2:	2301      	movne	r3, #1
 8000ab4:	2300      	moveq	r3, #0
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <_Z18SystemClock_Configv+0x18c>
  {
    Error_Handler();
 8000abc:	f000 fa2c 	bl	8000f18 <Error_Handler>
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	58000400 	.word	0x58000400
 8000ad0:	58024800 	.word	0x58024800

08000ad4 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ad8:	4b2a      	ldr	r3, [pc, #168]	; (8000b84 <_ZL12MX_SPI3_Initv+0xb0>)
 8000ada:	4a2b      	ldr	r2, [pc, #172]	; (8000b88 <_ZL12MX_SPI3_Initv+0xb4>)
 8000adc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ade:	4b29      	ldr	r3, [pc, #164]	; (8000b84 <_ZL12MX_SPI3_Initv+0xb0>)
 8000ae0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ae4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ae6:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <_ZL12MX_SPI3_Initv+0xb0>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aec:	4b25      	ldr	r3, [pc, #148]	; (8000b84 <_ZL12MX_SPI3_Initv+0xb0>)
 8000aee:	2207      	movs	r2, #7
 8000af0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000af2:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <_ZL12MX_SPI3_Initv+0xb0>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000af8:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <_ZL12MX_SPI3_Initv+0xb0>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000afe:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <_ZL12MX_SPI3_Initv+0xb0>)
 8000b00:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b04:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000b06:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <_ZL12MX_SPI3_Initv+0xb0>)
 8000b08:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000b0c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b0e:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <_ZL12MX_SPI3_Initv+0xb0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b14:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <_ZL12MX_SPI3_Initv+0xb0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <_ZL12MX_SPI3_Initv+0xb0>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000b20:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <_ZL12MX_SPI3_Initv+0xb0>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <_ZL12MX_SPI3_Initv+0xb0>)
 8000b28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b2c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <_ZL12MX_SPI3_Initv+0xb0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <_ZL12MX_SPI3_Initv+0xb0>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <_ZL12MX_SPI3_Initv+0xb0>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b40:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <_ZL12MX_SPI3_Initv+0xb0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <_ZL12MX_SPI3_Initv+0xb0>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <_ZL12MX_SPI3_Initv+0xb0>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <_ZL12MX_SPI3_Initv+0xb0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <_ZL12MX_SPI3_Initv+0xb0>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <_ZL12MX_SPI3_Initv+0xb0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b64:	4807      	ldr	r0, [pc, #28]	; (8000b84 <_ZL12MX_SPI3_Initv+0xb0>)
 8000b66:	f005 fd85 	bl	8006674 <HAL_SPI_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	bf14      	ite	ne
 8000b70:	2301      	movne	r3, #1
 8000b72:	2300      	moveq	r3, #0
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <_ZL12MX_SPI3_Initv+0xaa>
  {
    Error_Handler();
 8000b7a:	f000 f9cd 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	240000b4 	.word	0x240000b4
 8000b88:	40003c00 	.word	0x40003c00

08000b8c <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b90:	4b2c      	ldr	r3, [pc, #176]	; (8000c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b92:	4a2d      	ldr	r2, [pc, #180]	; (8000c48 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000b94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b96:	4b2b      	ldr	r3, [pc, #172]	; (8000c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9e:	4b29      	ldr	r3, [pc, #164]	; (8000c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ba4:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000baa:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bb0:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb6:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bbc:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc2:	4b20      	ldr	r3, [pc, #128]	; (8000c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bce:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bd4:	481b      	ldr	r0, [pc, #108]	; (8000c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000bd6:	f006 fdd8 	bl	800778a <HAL_UART_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	bf14      	ite	ne
 8000be0:	2301      	movne	r3, #1
 8000be2:	2300      	moveq	r3, #0
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8000bea:	f000 f995 	bl	8000f18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4814      	ldr	r0, [pc, #80]	; (8000c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000bf2:	f007 fe04 	bl	80087fe <HAL_UARTEx_SetTxFifoThreshold>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	bf14      	ite	ne
 8000bfc:	2301      	movne	r3, #1
 8000bfe:	2300      	moveq	r3, #0
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8000c06:	f000 f987 	bl	8000f18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	480d      	ldr	r0, [pc, #52]	; (8000c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000c0e:	f007 fe34 	bl	800887a <HAL_UARTEx_SetRxFifoThreshold>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	bf14      	ite	ne
 8000c18:	2301      	movne	r3, #1
 8000c1a:	2300      	moveq	r3, #0
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8000c22:	f000 f979 	bl	8000f18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c26:	4807      	ldr	r0, [pc, #28]	; (8000c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000c28:	f007 fdb0 	bl	800878c <HAL_UARTEx_DisableFifoMode>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	bf14      	ite	ne
 8000c32:	2301      	movne	r3, #1
 8000c34:	2300      	moveq	r3, #0
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8000c3c:	f000 f96c 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	240001b4 	.word	0x240001b4
 8000c48:	40004800 	.word	0x40004800

08000c4c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c52:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <_ZL11MX_DMA_Initv+0x3c>)
 8000c54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c58:	4a0b      	ldr	r2, [pc, #44]	; (8000c88 <_ZL11MX_DMA_Initv+0x3c>)
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <_ZL11MX_DMA_Initv+0x3c>)
 8000c64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2100      	movs	r1, #0
 8000c74:	200b      	movs	r0, #11
 8000c76:	f000 fd08 	bl	800168a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c7a:	200b      	movs	r0, #11
 8000c7c:	f000 fd1f 	bl	80016be <HAL_NVIC_EnableIRQ>

}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	58024400 	.word	0x58024400

08000c8c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	; 0x30
 8000c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	4b95      	ldr	r3, [pc, #596]	; (8000ef8 <_ZL12MX_GPIO_Initv+0x26c>)
 8000ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca8:	4a93      	ldr	r2, [pc, #588]	; (8000ef8 <_ZL12MX_GPIO_Initv+0x26c>)
 8000caa:	f043 0304 	orr.w	r3, r3, #4
 8000cae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb2:	4b91      	ldr	r3, [pc, #580]	; (8000ef8 <_ZL12MX_GPIO_Initv+0x26c>)
 8000cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	61bb      	str	r3, [r7, #24]
 8000cbe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc0:	4b8d      	ldr	r3, [pc, #564]	; (8000ef8 <_ZL12MX_GPIO_Initv+0x26c>)
 8000cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc6:	4a8c      	ldr	r2, [pc, #560]	; (8000ef8 <_ZL12MX_GPIO_Initv+0x26c>)
 8000cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd0:	4b89      	ldr	r3, [pc, #548]	; (8000ef8 <_ZL12MX_GPIO_Initv+0x26c>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	4b86      	ldr	r3, [pc, #536]	; (8000ef8 <_ZL12MX_GPIO_Initv+0x26c>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce4:	4a84      	ldr	r2, [pc, #528]	; (8000ef8 <_ZL12MX_GPIO_Initv+0x26c>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cee:	4b82      	ldr	r3, [pc, #520]	; (8000ef8 <_ZL12MX_GPIO_Initv+0x26c>)
 8000cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	4b7e      	ldr	r3, [pc, #504]	; (8000ef8 <_ZL12MX_GPIO_Initv+0x26c>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d02:	4a7d      	ldr	r2, [pc, #500]	; (8000ef8 <_ZL12MX_GPIO_Initv+0x26c>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d0c:	4b7a      	ldr	r3, [pc, #488]	; (8000ef8 <_ZL12MX_GPIO_Initv+0x26c>)
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1a:	4b77      	ldr	r3, [pc, #476]	; (8000ef8 <_ZL12MX_GPIO_Initv+0x26c>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d20:	4a75      	ldr	r2, [pc, #468]	; (8000ef8 <_ZL12MX_GPIO_Initv+0x26c>)
 8000d22:	f043 0308 	orr.w	r3, r3, #8
 8000d26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2a:	4b73      	ldr	r3, [pc, #460]	; (8000ef8 <_ZL12MX_GPIO_Initv+0x26c>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d30:	f003 0308 	and.w	r3, r3, #8
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d38:	4b6f      	ldr	r3, [pc, #444]	; (8000ef8 <_ZL12MX_GPIO_Initv+0x26c>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3e:	4a6e      	ldr	r2, [pc, #440]	; (8000ef8 <_ZL12MX_GPIO_Initv+0x26c>)
 8000d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d48:	4b6b      	ldr	r3, [pc, #428]	; (8000ef8 <_ZL12MX_GPIO_Initv+0x26c>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d56:	4b68      	ldr	r3, [pc, #416]	; (8000ef8 <_ZL12MX_GPIO_Initv+0x26c>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5c:	4a66      	ldr	r2, [pc, #408]	; (8000ef8 <_ZL12MX_GPIO_Initv+0x26c>)
 8000d5e:	f043 0310 	orr.w	r3, r3, #16
 8000d62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d66:	4b64      	ldr	r3, [pc, #400]	; (8000ef8 <_ZL12MX_GPIO_Initv+0x26c>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6c:	f003 0310 	and.w	r3, r3, #16
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d7a:	4860      	ldr	r0, [pc, #384]	; (8000efc <_ZL12MX_GPIO_Initv+0x270>)
 8000d7c:	f003 f992 	bl	80040a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d86:	485e      	ldr	r0, [pc, #376]	; (8000f00 <_ZL12MX_GPIO_Initv+0x274>)
 8000d88:	f003 f98c 	bl	80040a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d92:	485c      	ldr	r0, [pc, #368]	; (8000f04 <_ZL12MX_GPIO_Initv+0x278>)
 8000d94:	f003 f986 	bl	80040a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2102      	movs	r1, #2
 8000d9c:	485a      	ldr	r0, [pc, #360]	; (8000f08 <_ZL12MX_GPIO_Initv+0x27c>)
 8000d9e:	f003 f981 	bl	80040a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000da2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da8:	2300      	movs	r3, #0
 8000daa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	4619      	mov	r1, r3
 8000db6:	4853      	ldr	r0, [pc, #332]	; (8000f04 <_ZL12MX_GPIO_Initv+0x278>)
 8000db8:	f002 ffc4 	bl	8003d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000dbc:	2332      	movs	r3, #50	; 0x32
 8000dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dcc:	230b      	movs	r3, #11
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd0:	f107 031c 	add.w	r3, r7, #28
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	484b      	ldr	r0, [pc, #300]	; (8000f04 <_ZL12MX_GPIO_Initv+0x278>)
 8000dd8:	f002 ffb4 	bl	8003d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000ddc:	2386      	movs	r3, #134	; 0x86
 8000dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dec:	230b      	movs	r3, #11
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	4619      	mov	r1, r3
 8000df6:	4845      	ldr	r0, [pc, #276]	; (8000f0c <_ZL12MX_GPIO_Initv+0x280>)
 8000df8:	f002 ffa4 	bl	8003d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000dfc:	f244 0301 	movw	r3, #16385	; 0x4001
 8000e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4619      	mov	r1, r3
 8000e14:	4839      	ldr	r0, [pc, #228]	; (8000efc <_ZL12MX_GPIO_Initv+0x270>)
 8000e16:	f002 ff95 	bl	8003d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e2c:	230b      	movs	r3, #11
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e30:	f107 031c 	add.w	r3, r7, #28
 8000e34:	4619      	mov	r1, r3
 8000e36:	4831      	ldr	r0, [pc, #196]	; (8000efc <_ZL12MX_GPIO_Initv+0x270>)
 8000e38:	f002 ff84 	bl	8003d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000e3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	4619      	mov	r1, r3
 8000e54:	482a      	ldr	r0, [pc, #168]	; (8000f00 <_ZL12MX_GPIO_Initv+0x274>)
 8000e56:	f002 ff75 	bl	8003d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000e5a:	2380      	movs	r3, #128	; 0x80
 8000e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e5e:	4b2c      	ldr	r3, [pc, #176]	; (8000f10 <_ZL12MX_GPIO_Initv+0x284>)
 8000e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4829      	ldr	r0, [pc, #164]	; (8000f14 <_ZL12MX_GPIO_Initv+0x288>)
 8000e6e:	f002 ff69 	bl	8003d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000e72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	481e      	ldr	r0, [pc, #120]	; (8000f04 <_ZL12MX_GPIO_Initv+0x278>)
 8000e8c:	f002 ff5a 	bl	8003d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000e90:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000ea2:	230a      	movs	r3, #10
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4817      	ldr	r0, [pc, #92]	; (8000f0c <_ZL12MX_GPIO_Initv+0x280>)
 8000eae:	f002 ff49 	bl	8003d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000eb2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ec4:	230b      	movs	r3, #11
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4811      	ldr	r0, [pc, #68]	; (8000f14 <_ZL12MX_GPIO_Initv+0x288>)
 8000ed0:	f002 ff38 	bl	8003d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4807      	ldr	r0, [pc, #28]	; (8000f08 <_ZL12MX_GPIO_Initv+0x27c>)
 8000eec:	f002 ff2a 	bl	8003d44 <HAL_GPIO_Init>

}
 8000ef0:	bf00      	nop
 8000ef2:	3730      	adds	r7, #48	; 0x30
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	58024400 	.word	0x58024400
 8000efc:	58020400 	.word	0x58020400
 8000f00:	58020c00 	.word	0x58020c00
 8000f04:	58020800 	.word	0x58020800
 8000f08:	58021000 	.word	0x58021000
 8000f0c:	58020000 	.word	0x58020000
 8000f10:	11110000 	.word	0x11110000
 8000f14:	58021800 	.word	0x58021800

08000f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <HAL_MspInit+0x30>)
 8000f30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f34:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <HAL_MspInit+0x30>)
 8000f36:	f043 0302 	orr.w	r3, r3, #2
 8000f3a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_MspInit+0x30>)
 8000f40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	58024400 	.word	0x58024400

08000f5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a35      	ldr	r2, [pc, #212]	; (8001050 <HAL_SPI_MspInit+0xf4>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d163      	bne.n	8001046 <HAL_SPI_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f7e:	4b35      	ldr	r3, [pc, #212]	; (8001054 <HAL_SPI_MspInit+0xf8>)
 8000f80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f84:	4a33      	ldr	r2, [pc, #204]	; (8001054 <HAL_SPI_MspInit+0xf8>)
 8000f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f8e:	4b31      	ldr	r3, [pc, #196]	; (8001054 <HAL_SPI_MspInit+0xf8>)
 8000f90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9c:	4b2d      	ldr	r3, [pc, #180]	; (8001054 <HAL_SPI_MspInit+0xf8>)
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa2:	4a2c      	ldr	r2, [pc, #176]	; (8001054 <HAL_SPI_MspInit+0xf8>)
 8000fa4:	f043 0304 	orr.w	r3, r3, #4
 8000fa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fac:	4b29      	ldr	r3, [pc, #164]	; (8001054 <HAL_SPI_MspInit+0xf8>)
 8000fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000fba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fcc:	2306      	movs	r3, #6
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4820      	ldr	r0, [pc, #128]	; (8001058 <HAL_SPI_MspInit+0xfc>)
 8000fd8:	f002 feb4 	bl	8003d44 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream0;
 8000fdc:	4b1f      	ldr	r3, [pc, #124]	; (800105c <HAL_SPI_MspInit+0x100>)
 8000fde:	4a20      	ldr	r2, [pc, #128]	; (8001060 <HAL_SPI_MspInit+0x104>)
 8000fe0:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8000fe2:	4b1e      	ldr	r3, [pc, #120]	; (800105c <HAL_SPI_MspInit+0x100>)
 8000fe4:	223e      	movs	r2, #62	; 0x3e
 8000fe6:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	; (800105c <HAL_SPI_MspInit+0x100>)
 8000fea:	2240      	movs	r2, #64	; 0x40
 8000fec:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fee:	4b1b      	ldr	r3, [pc, #108]	; (800105c <HAL_SPI_MspInit+0x100>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <HAL_SPI_MspInit+0x100>)
 8000ff6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ffa:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <HAL_SPI_MspInit+0x100>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001002:	4b16      	ldr	r3, [pc, #88]	; (800105c <HAL_SPI_MspInit+0x100>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <HAL_SPI_MspInit+0x100>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <HAL_SPI_MspInit+0x100>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <HAL_SPI_MspInit+0x100>)
 8001016:	2200      	movs	r2, #0
 8001018:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800101a:	4810      	ldr	r0, [pc, #64]	; (800105c <HAL_SPI_MspInit+0x100>)
 800101c:	f000 fb6a 	bl	80016f4 <HAL_DMA_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8001026:	f7ff ff77 	bl	8000f18 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a0b      	ldr	r2, [pc, #44]	; (800105c <HAL_SPI_MspInit+0x100>)
 800102e:	679a      	str	r2, [r3, #120]	; 0x78
 8001030:	4a0a      	ldr	r2, [pc, #40]	; (800105c <HAL_SPI_MspInit+0x100>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	2033      	movs	r0, #51	; 0x33
 800103c:	f000 fb25 	bl	800168a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001040:	2033      	movs	r0, #51	; 0x33
 8001042:	f000 fb3c 	bl	80016be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001046:	bf00      	nop
 8001048:	3728      	adds	r7, #40	; 0x28
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40003c00 	.word	0x40003c00
 8001054:	58024400 	.word	0x58024400
 8001058:	58020800 	.word	0x58020800
 800105c:	2400013c 	.word	0x2400013c
 8001060:	40020010 	.word	0x40020010

08001064 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a1a      	ldr	r2, [pc, #104]	; (80010ec <HAL_UART_MspInit+0x88>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d12e      	bne.n	80010e4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001086:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <HAL_UART_MspInit+0x8c>)
 8001088:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800108c:	4a18      	ldr	r2, [pc, #96]	; (80010f0 <HAL_UART_MspInit+0x8c>)
 800108e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001092:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <HAL_UART_MspInit+0x8c>)
 8001098:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800109c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_UART_MspInit+0x8c>)
 80010a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010aa:	4a11      	ldr	r2, [pc, #68]	; (80010f0 <HAL_UART_MspInit+0x8c>)
 80010ac:	f043 0308 	orr.w	r3, r3, #8
 80010b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b4:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <HAL_UART_MspInit+0x8c>)
 80010b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ba:	f003 0308 	and.w	r3, r3, #8
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80010c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010d4:	2307      	movs	r3, #7
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <HAL_UART_MspInit+0x90>)
 80010e0:	f002 fe30 	bl	8003d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	; 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40004800 	.word	0x40004800
 80010f0:	58024400 	.word	0x58024400
 80010f4:	58020c00 	.word	0x58020c00

080010f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110a:	e7fe      	b.n	800110a <HardFault_Handler+0x4>

0800110c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <MemManage_Handler+0x4>

08001112 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <BusFault_Handler+0x4>

08001118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <UsageFault_Handler+0x4>

0800111e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800114c:	f000 f974 	bl	8001438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}

08001154 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <DMA1_Stream0_IRQHandler+0x10>)
 800115a:	f001 fad5 	bl	8002708 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	2400013c 	.word	0x2400013c

08001168 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <SPI3_IRQHandler+0x10>)
 800116e:	f005 ffab 	bl	80070c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	240000b4 	.word	0x240000b4

0800117c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001184:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <_sbrk+0x5c>)
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <_sbrk+0x60>)
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d102      	bne.n	800119e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <_sbrk+0x64>)
 800119a:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <_sbrk+0x68>)
 800119c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <_sbrk+0x64>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d207      	bcs.n	80011bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011ac:	f00a fedc 	bl	800bf68 <__errno>
 80011b0:	4602      	mov	r2, r0
 80011b2:	230c      	movs	r3, #12
 80011b4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	e009      	b.n	80011d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011c2:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <_sbrk+0x64>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <_sbrk+0x64>)
 80011cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ce:	68fb      	ldr	r3, [r7, #12]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	24080000 	.word	0x24080000
 80011dc:	00000400 	.word	0x00000400
 80011e0:	24000da4 	.word	0x24000da4
 80011e4:	24001260 	.word	0x24001260

080011e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011ec:	4b39      	ldr	r3, [pc, #228]	; (80012d4 <SystemInit+0xec>)
 80011ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f2:	4a38      	ldr	r2, [pc, #224]	; (80012d4 <SystemInit+0xec>)
 80011f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011fc:	4b36      	ldr	r3, [pc, #216]	; (80012d8 <SystemInit+0xf0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 030f 	and.w	r3, r3, #15
 8001204:	2b06      	cmp	r3, #6
 8001206:	d807      	bhi.n	8001218 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001208:	4b33      	ldr	r3, [pc, #204]	; (80012d8 <SystemInit+0xf0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f023 030f 	bic.w	r3, r3, #15
 8001210:	4a31      	ldr	r2, [pc, #196]	; (80012d8 <SystemInit+0xf0>)
 8001212:	f043 0307 	orr.w	r3, r3, #7
 8001216:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001218:	4b30      	ldr	r3, [pc, #192]	; (80012dc <SystemInit+0xf4>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a2f      	ldr	r2, [pc, #188]	; (80012dc <SystemInit+0xf4>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001224:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <SystemInit+0xf4>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800122a:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <SystemInit+0xf4>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	492b      	ldr	r1, [pc, #172]	; (80012dc <SystemInit+0xf4>)
 8001230:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <SystemInit+0xf8>)
 8001232:	4013      	ands	r3, r2
 8001234:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001236:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <SystemInit+0xf0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	2b07      	cmp	r3, #7
 8001240:	d907      	bls.n	8001252 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001242:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <SystemInit+0xf0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f023 030f 	bic.w	r3, r3, #15
 800124a:	4a23      	ldr	r2, [pc, #140]	; (80012d8 <SystemInit+0xf0>)
 800124c:	f043 0307 	orr.w	r3, r3, #7
 8001250:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001252:	4b22      	ldr	r3, [pc, #136]	; (80012dc <SystemInit+0xf4>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001258:	4b20      	ldr	r3, [pc, #128]	; (80012dc <SystemInit+0xf4>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800125e:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <SystemInit+0xf4>)
 8001260:	2200      	movs	r2, #0
 8001262:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001264:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <SystemInit+0xf4>)
 8001266:	4a1f      	ldr	r2, [pc, #124]	; (80012e4 <SystemInit+0xfc>)
 8001268:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800126a:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <SystemInit+0xf4>)
 800126c:	4a1e      	ldr	r2, [pc, #120]	; (80012e8 <SystemInit+0x100>)
 800126e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001270:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <SystemInit+0xf4>)
 8001272:	4a1e      	ldr	r2, [pc, #120]	; (80012ec <SystemInit+0x104>)
 8001274:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <SystemInit+0xf4>)
 8001278:	2200      	movs	r2, #0
 800127a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800127c:	4b17      	ldr	r3, [pc, #92]	; (80012dc <SystemInit+0xf4>)
 800127e:	4a1b      	ldr	r2, [pc, #108]	; (80012ec <SystemInit+0x104>)
 8001280:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001282:	4b16      	ldr	r3, [pc, #88]	; (80012dc <SystemInit+0xf4>)
 8001284:	2200      	movs	r2, #0
 8001286:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <SystemInit+0xf4>)
 800128a:	4a18      	ldr	r2, [pc, #96]	; (80012ec <SystemInit+0x104>)
 800128c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <SystemInit+0xf4>)
 8001290:	2200      	movs	r2, #0
 8001292:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <SystemInit+0xf4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a10      	ldr	r2, [pc, #64]	; (80012dc <SystemInit+0xf4>)
 800129a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800129e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <SystemInit+0xf4>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <SystemInit+0x108>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <SystemInit+0x10c>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012b2:	d202      	bcs.n	80012ba <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80012b4:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <SystemInit+0x110>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <SystemInit+0x114>)
 80012bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80012c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <SystemInit+0xec>)
 80012c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012c8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000ed00 	.word	0xe000ed00
 80012d8:	52002000 	.word	0x52002000
 80012dc:	58024400 	.word	0x58024400
 80012e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80012e4:	02020200 	.word	0x02020200
 80012e8:	01ff0000 	.word	0x01ff0000
 80012ec:	01010280 	.word	0x01010280
 80012f0:	5c001000 	.word	0x5c001000
 80012f4:	ffff0000 	.word	0xffff0000
 80012f8:	51008108 	.word	0x51008108
 80012fc:	52004000 	.word	0x52004000

08001300 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001300:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001338 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001304:	f7ff ff70 	bl	80011e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001308:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800130a:	e003      	b.n	8001314 <LoopCopyDataInit>

0800130c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800130e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001310:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001312:	3104      	adds	r1, #4

08001314 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001314:	480a      	ldr	r0, [pc, #40]	; (8001340 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001318:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800131a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800131c:	d3f6      	bcc.n	800130c <CopyDataInit>
  ldr  r2, =_sbss
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001320:	e002      	b.n	8001328 <LoopFillZerobss>

08001322 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001322:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001324:	f842 3b04 	str.w	r3, [r2], #4

08001328 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800132a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800132c:	d3f9      	bcc.n	8001322 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800132e:	f00a fe21 	bl	800bf74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001332:	f7ff f9d3 	bl	80006dc <main>
  bx  lr    
 8001336:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001338:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800133c:	0800cad0 	.word	0x0800cad0
  ldr  r0, =_sdata
 8001340:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001344:	24000098 	.word	0x24000098
  ldr  r2, =_sbss
 8001348:	24000098 	.word	0x24000098
  ldr  r3, = _ebss
 800134c:	24001260 	.word	0x24001260

08001350 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001350:	e7fe      	b.n	8001350 <ADC3_IRQHandler>
	...

08001354 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135a:	2003      	movs	r0, #3
 800135c:	f000 f98a 	bl	8001674 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001360:	f003 fcba 	bl	8004cd8 <HAL_RCC_GetSysClockFreq>
 8001364:	4601      	mov	r1, r0
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_Init+0x68>)
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	0a1b      	lsrs	r3, r3, #8
 800136c:	f003 030f 	and.w	r3, r3, #15
 8001370:	4a13      	ldr	r2, [pc, #76]	; (80013c0 <HAL_Init+0x6c>)
 8001372:	5cd3      	ldrb	r3, [r2, r3]
 8001374:	f003 031f 	and.w	r3, r3, #31
 8001378:	fa21 f303 	lsr.w	r3, r1, r3
 800137c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <HAL_Init+0x68>)
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	4a0e      	ldr	r2, [pc, #56]	; (80013c0 <HAL_Init+0x6c>)
 8001388:	5cd3      	ldrb	r3, [r2, r3]
 800138a:	f003 031f 	and.w	r3, r3, #31
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	fa22 f303 	lsr.w	r3, r2, r3
 8001394:	4a0b      	ldr	r2, [pc, #44]	; (80013c4 <HAL_Init+0x70>)
 8001396:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001398:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <HAL_Init+0x74>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800139e:	2000      	movs	r0, #0
 80013a0:	f000 f814 	bl	80013cc <HAL_InitTick>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e002      	b.n	80013b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013ae:	f7ff fdbb 	bl	8000f28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	58024400 	.word	0x58024400
 80013c0:	0800c9dc 	.word	0x0800c9dc
 80013c4:	24000004 	.word	0x24000004
 80013c8:	24000000 	.word	0x24000000

080013cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013d4:	4b15      	ldr	r3, [pc, #84]	; (800142c <HAL_InitTick+0x60>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d101      	bne.n	80013e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e021      	b.n	8001424 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013e0:	4b13      	ldr	r3, [pc, #76]	; (8001430 <HAL_InitTick+0x64>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <HAL_InitTick+0x60>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4619      	mov	r1, r3
 80013ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80013f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 f96f 	bl	80016da <HAL_SYSTICK_Config>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e00e      	b.n	8001424 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b0f      	cmp	r3, #15
 800140a:	d80a      	bhi.n	8001422 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800140c:	2200      	movs	r2, #0
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f000 f939 	bl	800168a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001418:	4a06      	ldr	r2, [pc, #24]	; (8001434 <HAL_InitTick+0x68>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	e000      	b.n	8001424 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	2400000c 	.word	0x2400000c
 8001430:	24000000 	.word	0x24000000
 8001434:	24000008 	.word	0x24000008

08001438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_IncTick+0x20>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_IncTick+0x24>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4413      	add	r3, r2
 8001448:	4a04      	ldr	r2, [pc, #16]	; (800145c <HAL_IncTick+0x24>)
 800144a:	6013      	str	r3, [r2, #0]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	2400000c 	.word	0x2400000c
 800145c:	24000de8 	.word	0x24000de8

08001460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return uwTick;
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <HAL_GetTick+0x14>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	24000de8 	.word	0x24000de8

08001478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001480:	f7ff ffee 	bl	8001460 <HAL_GetTick>
 8001484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001490:	d005      	beq.n	800149e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_Delay+0x40>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4413      	add	r3, r2
 800149c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800149e:	bf00      	nop
 80014a0:	f7ff ffde 	bl	8001460 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d8f7      	bhi.n	80014a0 <HAL_Delay+0x28>
  {
  }
}
 80014b0:	bf00      	nop
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	2400000c 	.word	0x2400000c

080014bc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <HAL_GetREVID+0x14>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	0c1b      	lsrs	r3, r3, #16
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	5c001000 	.word	0x5c001000

080014d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <__NVIC_SetPriorityGrouping+0x40>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f0:	4013      	ands	r3, r2
 80014f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001502:	4a04      	ldr	r2, [pc, #16]	; (8001514 <__NVIC_SetPriorityGrouping+0x40>)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	60d3      	str	r3, [r2, #12]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00
 8001518:	05fa0000 	.word	0x05fa0000

0800151c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <__NVIC_GetPriorityGrouping+0x18>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	f003 0307 	and.w	r3, r3, #7
}
 800152a:	4618      	mov	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001546:	2b00      	cmp	r3, #0
 8001548:	db0b      	blt.n	8001562 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	f003 021f 	and.w	r2, r3, #31
 8001550:	4907      	ldr	r1, [pc, #28]	; (8001570 <__NVIC_EnableIRQ+0x38>)
 8001552:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001556:	095b      	lsrs	r3, r3, #5
 8001558:	2001      	movs	r0, #1
 800155a:	fa00 f202 	lsl.w	r2, r0, r2
 800155e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000e100 	.word	0xe000e100

08001574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	6039      	str	r1, [r7, #0]
 800157e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001580:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001584:	2b00      	cmp	r3, #0
 8001586:	db0a      	blt.n	800159e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	b2da      	uxtb	r2, r3
 800158c:	490c      	ldr	r1, [pc, #48]	; (80015c0 <__NVIC_SetPriority+0x4c>)
 800158e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001592:	0112      	lsls	r2, r2, #4
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	440b      	add	r3, r1
 8001598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800159c:	e00a      	b.n	80015b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4908      	ldr	r1, [pc, #32]	; (80015c4 <__NVIC_SetPriority+0x50>)
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	3b04      	subs	r3, #4
 80015ac:	0112      	lsls	r2, r2, #4
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	440b      	add	r3, r1
 80015b2:	761a      	strb	r2, [r3, #24]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000e100 	.word	0xe000e100
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b089      	sub	sp, #36	; 0x24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	f1c3 0307 	rsb	r3, r3, #7
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	bf28      	it	cs
 80015e6:	2304      	movcs	r3, #4
 80015e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3304      	adds	r3, #4
 80015ee:	2b06      	cmp	r3, #6
 80015f0:	d902      	bls.n	80015f8 <NVIC_EncodePriority+0x30>
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3b03      	subs	r3, #3
 80015f6:	e000      	b.n	80015fa <NVIC_EncodePriority+0x32>
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43da      	mvns	r2, r3
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	401a      	ands	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001610:	f04f 31ff 	mov.w	r1, #4294967295
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	fa01 f303 	lsl.w	r3, r1, r3
 800161a:	43d9      	mvns	r1, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	4313      	orrs	r3, r2
         );
}
 8001622:	4618      	mov	r0, r3
 8001624:	3724      	adds	r7, #36	; 0x24
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
	...

08001630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3b01      	subs	r3, #1
 800163c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001640:	d301      	bcc.n	8001646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001642:	2301      	movs	r3, #1
 8001644:	e00f      	b.n	8001666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001646:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <SysTick_Config+0x40>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800164e:	210f      	movs	r1, #15
 8001650:	f04f 30ff 	mov.w	r0, #4294967295
 8001654:	f7ff ff8e 	bl	8001574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <SysTick_Config+0x40>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800165e:	4b04      	ldr	r3, [pc, #16]	; (8001670 <SysTick_Config+0x40>)
 8001660:	2207      	movs	r2, #7
 8001662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	e000e010 	.word	0xe000e010

08001674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff ff29 	bl	80014d4 <__NVIC_SetPriorityGrouping>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b086      	sub	sp, #24
 800168e:	af00      	add	r7, sp, #0
 8001690:	4603      	mov	r3, r0
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	607a      	str	r2, [r7, #4]
 8001696:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001698:	f7ff ff40 	bl	800151c <__NVIC_GetPriorityGrouping>
 800169c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	68b9      	ldr	r1, [r7, #8]
 80016a2:	6978      	ldr	r0, [r7, #20]
 80016a4:	f7ff ff90 	bl	80015c8 <NVIC_EncodePriority>
 80016a8:	4602      	mov	r2, r0
 80016aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016ae:	4611      	mov	r1, r2
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff5f 	bl	8001574 <__NVIC_SetPriority>
}
 80016b6:	bf00      	nop
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4603      	mov	r3, r0
 80016c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff33 	bl	8001538 <__NVIC_EnableIRQ>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ffa4 	bl	8001630 <SysTick_Config>
 80016e8:	4603      	mov	r3, r0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80016fc:	f7ff feb0 	bl	8001460 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e316      	b.n	8001d3a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a66      	ldr	r2, [pc, #408]	; (80018ac <HAL_DMA_Init+0x1b8>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d04a      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a65      	ldr	r2, [pc, #404]	; (80018b0 <HAL_DMA_Init+0x1bc>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d045      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a63      	ldr	r2, [pc, #396]	; (80018b4 <HAL_DMA_Init+0x1c0>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d040      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a62      	ldr	r2, [pc, #392]	; (80018b8 <HAL_DMA_Init+0x1c4>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d03b      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a60      	ldr	r2, [pc, #384]	; (80018bc <HAL_DMA_Init+0x1c8>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d036      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a5f      	ldr	r2, [pc, #380]	; (80018c0 <HAL_DMA_Init+0x1cc>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d031      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a5d      	ldr	r2, [pc, #372]	; (80018c4 <HAL_DMA_Init+0x1d0>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d02c      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a5c      	ldr	r2, [pc, #368]	; (80018c8 <HAL_DMA_Init+0x1d4>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d027      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a5a      	ldr	r2, [pc, #360]	; (80018cc <HAL_DMA_Init+0x1d8>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d022      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a59      	ldr	r2, [pc, #356]	; (80018d0 <HAL_DMA_Init+0x1dc>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d01d      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a57      	ldr	r2, [pc, #348]	; (80018d4 <HAL_DMA_Init+0x1e0>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d018      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a56      	ldr	r2, [pc, #344]	; (80018d8 <HAL_DMA_Init+0x1e4>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d013      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a54      	ldr	r2, [pc, #336]	; (80018dc <HAL_DMA_Init+0x1e8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d00e      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a53      	ldr	r2, [pc, #332]	; (80018e0 <HAL_DMA_Init+0x1ec>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d009      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a51      	ldr	r2, [pc, #324]	; (80018e4 <HAL_DMA_Init+0x1f0>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d004      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a50      	ldr	r2, [pc, #320]	; (80018e8 <HAL_DMA_Init+0x1f4>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d101      	bne.n	80017b0 <HAL_DMA_Init+0xbc>
 80017ac:	2301      	movs	r3, #1
 80017ae:	e000      	b.n	80017b2 <HAL_DMA_Init+0xbe>
 80017b0:	2300      	movs	r3, #0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 813b 	beq.w	8001a2e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2202      	movs	r2, #2
 80017c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a37      	ldr	r2, [pc, #220]	; (80018ac <HAL_DMA_Init+0x1b8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d04a      	beq.n	8001868 <HAL_DMA_Init+0x174>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a36      	ldr	r2, [pc, #216]	; (80018b0 <HAL_DMA_Init+0x1bc>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d045      	beq.n	8001868 <HAL_DMA_Init+0x174>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a34      	ldr	r2, [pc, #208]	; (80018b4 <HAL_DMA_Init+0x1c0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d040      	beq.n	8001868 <HAL_DMA_Init+0x174>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a33      	ldr	r2, [pc, #204]	; (80018b8 <HAL_DMA_Init+0x1c4>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d03b      	beq.n	8001868 <HAL_DMA_Init+0x174>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a31      	ldr	r2, [pc, #196]	; (80018bc <HAL_DMA_Init+0x1c8>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d036      	beq.n	8001868 <HAL_DMA_Init+0x174>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a30      	ldr	r2, [pc, #192]	; (80018c0 <HAL_DMA_Init+0x1cc>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d031      	beq.n	8001868 <HAL_DMA_Init+0x174>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a2e      	ldr	r2, [pc, #184]	; (80018c4 <HAL_DMA_Init+0x1d0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d02c      	beq.n	8001868 <HAL_DMA_Init+0x174>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a2d      	ldr	r2, [pc, #180]	; (80018c8 <HAL_DMA_Init+0x1d4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d027      	beq.n	8001868 <HAL_DMA_Init+0x174>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a2b      	ldr	r2, [pc, #172]	; (80018cc <HAL_DMA_Init+0x1d8>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d022      	beq.n	8001868 <HAL_DMA_Init+0x174>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a2a      	ldr	r2, [pc, #168]	; (80018d0 <HAL_DMA_Init+0x1dc>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d01d      	beq.n	8001868 <HAL_DMA_Init+0x174>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a28      	ldr	r2, [pc, #160]	; (80018d4 <HAL_DMA_Init+0x1e0>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d018      	beq.n	8001868 <HAL_DMA_Init+0x174>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a27      	ldr	r2, [pc, #156]	; (80018d8 <HAL_DMA_Init+0x1e4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d013      	beq.n	8001868 <HAL_DMA_Init+0x174>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a25      	ldr	r2, [pc, #148]	; (80018dc <HAL_DMA_Init+0x1e8>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d00e      	beq.n	8001868 <HAL_DMA_Init+0x174>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a24      	ldr	r2, [pc, #144]	; (80018e0 <HAL_DMA_Init+0x1ec>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d009      	beq.n	8001868 <HAL_DMA_Init+0x174>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a22      	ldr	r2, [pc, #136]	; (80018e4 <HAL_DMA_Init+0x1f0>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d004      	beq.n	8001868 <HAL_DMA_Init+0x174>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a21      	ldr	r2, [pc, #132]	; (80018e8 <HAL_DMA_Init+0x1f4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d108      	bne.n	800187a <HAL_DMA_Init+0x186>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 0201 	bic.w	r2, r2, #1
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	e007      	b.n	800188a <HAL_DMA_Init+0x196>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 0201 	bic.w	r2, r2, #1
 8001888:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800188a:	e02f      	b.n	80018ec <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800188c:	f7ff fde8 	bl	8001460 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b05      	cmp	r3, #5
 8001898:	d928      	bls.n	80018ec <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2220      	movs	r2, #32
 800189e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2203      	movs	r2, #3
 80018a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e246      	b.n	8001d3a <HAL_DMA_Init+0x646>
 80018ac:	40020010 	.word	0x40020010
 80018b0:	40020028 	.word	0x40020028
 80018b4:	40020040 	.word	0x40020040
 80018b8:	40020058 	.word	0x40020058
 80018bc:	40020070 	.word	0x40020070
 80018c0:	40020088 	.word	0x40020088
 80018c4:	400200a0 	.word	0x400200a0
 80018c8:	400200b8 	.word	0x400200b8
 80018cc:	40020410 	.word	0x40020410
 80018d0:	40020428 	.word	0x40020428
 80018d4:	40020440 	.word	0x40020440
 80018d8:	40020458 	.word	0x40020458
 80018dc:	40020470 	.word	0x40020470
 80018e0:	40020488 	.word	0x40020488
 80018e4:	400204a0 	.word	0x400204a0
 80018e8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1c8      	bne.n	800188c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	4b83      	ldr	r3, [pc, #524]	; (8001b14 <HAL_DMA_Init+0x420>)
 8001906:	4013      	ands	r3, r2
 8001908:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001912:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800191e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800192a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	4313      	orrs	r3, r2
 8001936:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	2b04      	cmp	r3, #4
 800193e:	d107      	bne.n	8001950 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	4313      	orrs	r3, r2
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	4313      	orrs	r3, r2
 800194e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001950:	4b71      	ldr	r3, [pc, #452]	; (8001b18 <HAL_DMA_Init+0x424>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b71      	ldr	r3, [pc, #452]	; (8001b1c <HAL_DMA_Init+0x428>)
 8001956:	4013      	ands	r3, r2
 8001958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800195c:	d328      	bcc.n	80019b0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b28      	cmp	r3, #40	; 0x28
 8001964:	d903      	bls.n	800196e <HAL_DMA_Init+0x27a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b2e      	cmp	r3, #46	; 0x2e
 800196c:	d917      	bls.n	800199e <HAL_DMA_Init+0x2aa>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b3e      	cmp	r3, #62	; 0x3e
 8001974:	d903      	bls.n	800197e <HAL_DMA_Init+0x28a>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b42      	cmp	r3, #66	; 0x42
 800197c:	d90f      	bls.n	800199e <HAL_DMA_Init+0x2aa>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b46      	cmp	r3, #70	; 0x46
 8001984:	d903      	bls.n	800198e <HAL_DMA_Init+0x29a>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b48      	cmp	r3, #72	; 0x48
 800198c:	d907      	bls.n	800199e <HAL_DMA_Init+0x2aa>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b4e      	cmp	r3, #78	; 0x4e
 8001994:	d905      	bls.n	80019a2 <HAL_DMA_Init+0x2ae>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b52      	cmp	r3, #82	; 0x52
 800199c:	d801      	bhi.n	80019a2 <HAL_DMA_Init+0x2ae>
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <HAL_DMA_Init+0x2b0>
 80019a2:	2300      	movs	r3, #0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019ae:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f023 0307 	bic.w	r3, r3, #7
 80019c6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d117      	bne.n	8001a0a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d00e      	beq.n	8001a0a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f002 f81f 	bl	8003a30 <DMA_CheckFifoParam>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d008      	beq.n	8001a0a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2240      	movs	r2, #64	; 0x40
 80019fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e197      	b.n	8001d3a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f001 ff5a 	bl	80038cc <DMA_CalcBaseAndBitshift>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	223f      	movs	r2, #63	; 0x3f
 8001a26:	409a      	lsls	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	e0cd      	b.n	8001bca <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a3b      	ldr	r2, [pc, #236]	; (8001b20 <HAL_DMA_Init+0x42c>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d022      	beq.n	8001a7e <HAL_DMA_Init+0x38a>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a39      	ldr	r2, [pc, #228]	; (8001b24 <HAL_DMA_Init+0x430>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d01d      	beq.n	8001a7e <HAL_DMA_Init+0x38a>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a38      	ldr	r2, [pc, #224]	; (8001b28 <HAL_DMA_Init+0x434>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d018      	beq.n	8001a7e <HAL_DMA_Init+0x38a>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a36      	ldr	r2, [pc, #216]	; (8001b2c <HAL_DMA_Init+0x438>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d013      	beq.n	8001a7e <HAL_DMA_Init+0x38a>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a35      	ldr	r2, [pc, #212]	; (8001b30 <HAL_DMA_Init+0x43c>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d00e      	beq.n	8001a7e <HAL_DMA_Init+0x38a>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a33      	ldr	r2, [pc, #204]	; (8001b34 <HAL_DMA_Init+0x440>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d009      	beq.n	8001a7e <HAL_DMA_Init+0x38a>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a32      	ldr	r2, [pc, #200]	; (8001b38 <HAL_DMA_Init+0x444>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d004      	beq.n	8001a7e <HAL_DMA_Init+0x38a>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a30      	ldr	r2, [pc, #192]	; (8001b3c <HAL_DMA_Init+0x448>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d101      	bne.n	8001a82 <HAL_DMA_Init+0x38e>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <HAL_DMA_Init+0x390>
 8001a82:	2300      	movs	r3, #0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 8097 	beq.w	8001bb8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a24      	ldr	r2, [pc, #144]	; (8001b20 <HAL_DMA_Init+0x42c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d021      	beq.n	8001ad8 <HAL_DMA_Init+0x3e4>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a22      	ldr	r2, [pc, #136]	; (8001b24 <HAL_DMA_Init+0x430>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d01c      	beq.n	8001ad8 <HAL_DMA_Init+0x3e4>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a21      	ldr	r2, [pc, #132]	; (8001b28 <HAL_DMA_Init+0x434>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d017      	beq.n	8001ad8 <HAL_DMA_Init+0x3e4>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a1f      	ldr	r2, [pc, #124]	; (8001b2c <HAL_DMA_Init+0x438>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d012      	beq.n	8001ad8 <HAL_DMA_Init+0x3e4>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a1e      	ldr	r2, [pc, #120]	; (8001b30 <HAL_DMA_Init+0x43c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d00d      	beq.n	8001ad8 <HAL_DMA_Init+0x3e4>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a1c      	ldr	r2, [pc, #112]	; (8001b34 <HAL_DMA_Init+0x440>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d008      	beq.n	8001ad8 <HAL_DMA_Init+0x3e4>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a1b      	ldr	r2, [pc, #108]	; (8001b38 <HAL_DMA_Init+0x444>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d003      	beq.n	8001ad8 <HAL_DMA_Init+0x3e4>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a19      	ldr	r2, [pc, #100]	; (8001b3c <HAL_DMA_Init+0x448>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_DMA_Init+0x44c>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b40      	cmp	r3, #64	; 0x40
 8001b00:	d020      	beq.n	8001b44 <HAL_DMA_Init+0x450>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	2b80      	cmp	r3, #128	; 0x80
 8001b08:	d102      	bne.n	8001b10 <HAL_DMA_Init+0x41c>
 8001b0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b0e:	e01a      	b.n	8001b46 <HAL_DMA_Init+0x452>
 8001b10:	2300      	movs	r3, #0
 8001b12:	e018      	b.n	8001b46 <HAL_DMA_Init+0x452>
 8001b14:	fe10803f 	.word	0xfe10803f
 8001b18:	5c001000 	.word	0x5c001000
 8001b1c:	ffff0000 	.word	0xffff0000
 8001b20:	58025408 	.word	0x58025408
 8001b24:	5802541c 	.word	0x5802541c
 8001b28:	58025430 	.word	0x58025430
 8001b2c:	58025444 	.word	0x58025444
 8001b30:	58025458 	.word	0x58025458
 8001b34:	5802546c 	.word	0x5802546c
 8001b38:	58025480 	.word	0x58025480
 8001b3c:	58025494 	.word	0x58025494
 8001b40:	fffe000f 	.word	0xfffe000f
 8001b44:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	68d2      	ldr	r2, [r2, #12]
 8001b4a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b74:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b6e      	ldr	r3, [pc, #440]	; (8001d44 <HAL_DMA_Init+0x650>)
 8001b8c:	4413      	add	r3, r2
 8001b8e:	4a6e      	ldr	r2, [pc, #440]	; (8001d48 <HAL_DMA_Init+0x654>)
 8001b90:	fba2 2303 	umull	r2, r3, r2, r3
 8001b94:	091b      	lsrs	r3, r3, #4
 8001b96:	009a      	lsls	r2, r3, #2
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f001 fe95 	bl	80038cc <DMA_CalcBaseAndBitshift>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001baa:	f003 031f 	and.w	r3, r3, #31
 8001bae:	2201      	movs	r2, #1
 8001bb0:	409a      	lsls	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	e008      	b.n	8001bca <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2240      	movs	r2, #64	; 0x40
 8001bbc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e0b7      	b.n	8001d3a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a5f      	ldr	r2, [pc, #380]	; (8001d4c <HAL_DMA_Init+0x658>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d072      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a5d      	ldr	r2, [pc, #372]	; (8001d50 <HAL_DMA_Init+0x65c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d06d      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a5c      	ldr	r2, [pc, #368]	; (8001d54 <HAL_DMA_Init+0x660>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d068      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a5a      	ldr	r2, [pc, #360]	; (8001d58 <HAL_DMA_Init+0x664>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d063      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a59      	ldr	r2, [pc, #356]	; (8001d5c <HAL_DMA_Init+0x668>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d05e      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a57      	ldr	r2, [pc, #348]	; (8001d60 <HAL_DMA_Init+0x66c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d059      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a56      	ldr	r2, [pc, #344]	; (8001d64 <HAL_DMA_Init+0x670>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d054      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a54      	ldr	r2, [pc, #336]	; (8001d68 <HAL_DMA_Init+0x674>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d04f      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a53      	ldr	r2, [pc, #332]	; (8001d6c <HAL_DMA_Init+0x678>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d04a      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a51      	ldr	r2, [pc, #324]	; (8001d70 <HAL_DMA_Init+0x67c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d045      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a50      	ldr	r2, [pc, #320]	; (8001d74 <HAL_DMA_Init+0x680>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d040      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a4e      	ldr	r2, [pc, #312]	; (8001d78 <HAL_DMA_Init+0x684>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d03b      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a4d      	ldr	r2, [pc, #308]	; (8001d7c <HAL_DMA_Init+0x688>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d036      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a4b      	ldr	r2, [pc, #300]	; (8001d80 <HAL_DMA_Init+0x68c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d031      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a4a      	ldr	r2, [pc, #296]	; (8001d84 <HAL_DMA_Init+0x690>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d02c      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a48      	ldr	r2, [pc, #288]	; (8001d88 <HAL_DMA_Init+0x694>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d027      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a47      	ldr	r2, [pc, #284]	; (8001d8c <HAL_DMA_Init+0x698>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d022      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a45      	ldr	r2, [pc, #276]	; (8001d90 <HAL_DMA_Init+0x69c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d01d      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a44      	ldr	r2, [pc, #272]	; (8001d94 <HAL_DMA_Init+0x6a0>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d018      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a42      	ldr	r2, [pc, #264]	; (8001d98 <HAL_DMA_Init+0x6a4>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d013      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a41      	ldr	r2, [pc, #260]	; (8001d9c <HAL_DMA_Init+0x6a8>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d00e      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a3f      	ldr	r2, [pc, #252]	; (8001da0 <HAL_DMA_Init+0x6ac>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d009      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a3e      	ldr	r2, [pc, #248]	; (8001da4 <HAL_DMA_Init+0x6b0>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d004      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a3c      	ldr	r2, [pc, #240]	; (8001da8 <HAL_DMA_Init+0x6b4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d101      	bne.n	8001cbe <HAL_DMA_Init+0x5ca>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <HAL_DMA_Init+0x5cc>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d032      	beq.n	8001d2a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f001 ff2f 	bl	8003b28 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2b80      	cmp	r3, #128	; 0x80
 8001cd0:	d102      	bne.n	8001cd8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001cec:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d010      	beq.n	8001d18 <HAL_DMA_Init+0x624>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d80c      	bhi.n	8001d18 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f001 ffac 	bl	8003c5c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	e008      	b.n	8001d2a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	a7fdabf8 	.word	0xa7fdabf8
 8001d48:	cccccccd 	.word	0xcccccccd
 8001d4c:	40020010 	.word	0x40020010
 8001d50:	40020028 	.word	0x40020028
 8001d54:	40020040 	.word	0x40020040
 8001d58:	40020058 	.word	0x40020058
 8001d5c:	40020070 	.word	0x40020070
 8001d60:	40020088 	.word	0x40020088
 8001d64:	400200a0 	.word	0x400200a0
 8001d68:	400200b8 	.word	0x400200b8
 8001d6c:	40020410 	.word	0x40020410
 8001d70:	40020428 	.word	0x40020428
 8001d74:	40020440 	.word	0x40020440
 8001d78:	40020458 	.word	0x40020458
 8001d7c:	40020470 	.word	0x40020470
 8001d80:	40020488 	.word	0x40020488
 8001d84:	400204a0 	.word	0x400204a0
 8001d88:	400204b8 	.word	0x400204b8
 8001d8c:	58025408 	.word	0x58025408
 8001d90:	5802541c 	.word	0x5802541c
 8001d94:	58025430 	.word	0x58025430
 8001d98:	58025444 	.word	0x58025444
 8001d9c:	58025458 	.word	0x58025458
 8001da0:	5802546c 	.word	0x5802546c
 8001da4:	58025480 	.word	0x58025480
 8001da8:	58025494 	.word	0x58025494

08001dac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
 8001db8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e226      	b.n	8002216 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_DMA_Start_IT+0x2a>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e21f      	b.n	8002216 <HAL_DMA_Start_IT+0x46a>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	f040 820a 	bne.w	8002200 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2202      	movs	r2, #2
 8001df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a68      	ldr	r2, [pc, #416]	; (8001fa0 <HAL_DMA_Start_IT+0x1f4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d04a      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a66      	ldr	r2, [pc, #408]	; (8001fa4 <HAL_DMA_Start_IT+0x1f8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d045      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a65      	ldr	r2, [pc, #404]	; (8001fa8 <HAL_DMA_Start_IT+0x1fc>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d040      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a63      	ldr	r2, [pc, #396]	; (8001fac <HAL_DMA_Start_IT+0x200>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d03b      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a62      	ldr	r2, [pc, #392]	; (8001fb0 <HAL_DMA_Start_IT+0x204>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d036      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a60      	ldr	r2, [pc, #384]	; (8001fb4 <HAL_DMA_Start_IT+0x208>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d031      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a5f      	ldr	r2, [pc, #380]	; (8001fb8 <HAL_DMA_Start_IT+0x20c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d02c      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a5d      	ldr	r2, [pc, #372]	; (8001fbc <HAL_DMA_Start_IT+0x210>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d027      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a5c      	ldr	r2, [pc, #368]	; (8001fc0 <HAL_DMA_Start_IT+0x214>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d022      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a5a      	ldr	r2, [pc, #360]	; (8001fc4 <HAL_DMA_Start_IT+0x218>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d01d      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a59      	ldr	r2, [pc, #356]	; (8001fc8 <HAL_DMA_Start_IT+0x21c>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d018      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a57      	ldr	r2, [pc, #348]	; (8001fcc <HAL_DMA_Start_IT+0x220>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d013      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a56      	ldr	r2, [pc, #344]	; (8001fd0 <HAL_DMA_Start_IT+0x224>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d00e      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a54      	ldr	r2, [pc, #336]	; (8001fd4 <HAL_DMA_Start_IT+0x228>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d009      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a53      	ldr	r2, [pc, #332]	; (8001fd8 <HAL_DMA_Start_IT+0x22c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d004      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a51      	ldr	r2, [pc, #324]	; (8001fdc <HAL_DMA_Start_IT+0x230>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d108      	bne.n	8001eac <HAL_DMA_Start_IT+0x100>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0201 	bic.w	r2, r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	e007      	b.n	8001ebc <HAL_DMA_Start_IT+0x110>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0201 	bic.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68b9      	ldr	r1, [r7, #8]
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f001 fb56 	bl	8003574 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a34      	ldr	r2, [pc, #208]	; (8001fa0 <HAL_DMA_Start_IT+0x1f4>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d04a      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a33      	ldr	r2, [pc, #204]	; (8001fa4 <HAL_DMA_Start_IT+0x1f8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d045      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a31      	ldr	r2, [pc, #196]	; (8001fa8 <HAL_DMA_Start_IT+0x1fc>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d040      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a30      	ldr	r2, [pc, #192]	; (8001fac <HAL_DMA_Start_IT+0x200>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d03b      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a2e      	ldr	r2, [pc, #184]	; (8001fb0 <HAL_DMA_Start_IT+0x204>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d036      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a2d      	ldr	r2, [pc, #180]	; (8001fb4 <HAL_DMA_Start_IT+0x208>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d031      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a2b      	ldr	r2, [pc, #172]	; (8001fb8 <HAL_DMA_Start_IT+0x20c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d02c      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a2a      	ldr	r2, [pc, #168]	; (8001fbc <HAL_DMA_Start_IT+0x210>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d027      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a28      	ldr	r2, [pc, #160]	; (8001fc0 <HAL_DMA_Start_IT+0x214>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d022      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a27      	ldr	r2, [pc, #156]	; (8001fc4 <HAL_DMA_Start_IT+0x218>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d01d      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a25      	ldr	r2, [pc, #148]	; (8001fc8 <HAL_DMA_Start_IT+0x21c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d018      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a24      	ldr	r2, [pc, #144]	; (8001fcc <HAL_DMA_Start_IT+0x220>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d013      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a22      	ldr	r2, [pc, #136]	; (8001fd0 <HAL_DMA_Start_IT+0x224>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00e      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a21      	ldr	r2, [pc, #132]	; (8001fd4 <HAL_DMA_Start_IT+0x228>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d009      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a1f      	ldr	r2, [pc, #124]	; (8001fd8 <HAL_DMA_Start_IT+0x22c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d004      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a1e      	ldr	r2, [pc, #120]	; (8001fdc <HAL_DMA_Start_IT+0x230>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d101      	bne.n	8001f6c <HAL_DMA_Start_IT+0x1c0>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <HAL_DMA_Start_IT+0x1c2>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d036      	beq.n	8001fe0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f023 021e 	bic.w	r2, r3, #30
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f042 0216 	orr.w	r2, r2, #22
 8001f84:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d03e      	beq.n	800200c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f042 0208 	orr.w	r2, r2, #8
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	e035      	b.n	800200c <HAL_DMA_Start_IT+0x260>
 8001fa0:	40020010 	.word	0x40020010
 8001fa4:	40020028 	.word	0x40020028
 8001fa8:	40020040 	.word	0x40020040
 8001fac:	40020058 	.word	0x40020058
 8001fb0:	40020070 	.word	0x40020070
 8001fb4:	40020088 	.word	0x40020088
 8001fb8:	400200a0 	.word	0x400200a0
 8001fbc:	400200b8 	.word	0x400200b8
 8001fc0:	40020410 	.word	0x40020410
 8001fc4:	40020428 	.word	0x40020428
 8001fc8:	40020440 	.word	0x40020440
 8001fcc:	40020458 	.word	0x40020458
 8001fd0:	40020470 	.word	0x40020470
 8001fd4:	40020488 	.word	0x40020488
 8001fd8:	400204a0 	.word	0x400204a0
 8001fdc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 020e 	bic.w	r2, r3, #14
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 020a 	orr.w	r2, r2, #10
 8001ff2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d007      	beq.n	800200c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0204 	orr.w	r2, r2, #4
 800200a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a83      	ldr	r2, [pc, #524]	; (8002220 <HAL_DMA_Start_IT+0x474>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d072      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a82      	ldr	r2, [pc, #520]	; (8002224 <HAL_DMA_Start_IT+0x478>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d06d      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a80      	ldr	r2, [pc, #512]	; (8002228 <HAL_DMA_Start_IT+0x47c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d068      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a7f      	ldr	r2, [pc, #508]	; (800222c <HAL_DMA_Start_IT+0x480>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d063      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a7d      	ldr	r2, [pc, #500]	; (8002230 <HAL_DMA_Start_IT+0x484>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d05e      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a7c      	ldr	r2, [pc, #496]	; (8002234 <HAL_DMA_Start_IT+0x488>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d059      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a7a      	ldr	r2, [pc, #488]	; (8002238 <HAL_DMA_Start_IT+0x48c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d054      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a79      	ldr	r2, [pc, #484]	; (800223c <HAL_DMA_Start_IT+0x490>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d04f      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a77      	ldr	r2, [pc, #476]	; (8002240 <HAL_DMA_Start_IT+0x494>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d04a      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a76      	ldr	r2, [pc, #472]	; (8002244 <HAL_DMA_Start_IT+0x498>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d045      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a74      	ldr	r2, [pc, #464]	; (8002248 <HAL_DMA_Start_IT+0x49c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d040      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a73      	ldr	r2, [pc, #460]	; (800224c <HAL_DMA_Start_IT+0x4a0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d03b      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a71      	ldr	r2, [pc, #452]	; (8002250 <HAL_DMA_Start_IT+0x4a4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d036      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a70      	ldr	r2, [pc, #448]	; (8002254 <HAL_DMA_Start_IT+0x4a8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d031      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a6e      	ldr	r2, [pc, #440]	; (8002258 <HAL_DMA_Start_IT+0x4ac>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d02c      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a6d      	ldr	r2, [pc, #436]	; (800225c <HAL_DMA_Start_IT+0x4b0>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d027      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a6b      	ldr	r2, [pc, #428]	; (8002260 <HAL_DMA_Start_IT+0x4b4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d022      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a6a      	ldr	r2, [pc, #424]	; (8002264 <HAL_DMA_Start_IT+0x4b8>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d01d      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a68      	ldr	r2, [pc, #416]	; (8002268 <HAL_DMA_Start_IT+0x4bc>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d018      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a67      	ldr	r2, [pc, #412]	; (800226c <HAL_DMA_Start_IT+0x4c0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d013      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a65      	ldr	r2, [pc, #404]	; (8002270 <HAL_DMA_Start_IT+0x4c4>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d00e      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a64      	ldr	r2, [pc, #400]	; (8002274 <HAL_DMA_Start_IT+0x4c8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d009      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a62      	ldr	r2, [pc, #392]	; (8002278 <HAL_DMA_Start_IT+0x4cc>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d004      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a61      	ldr	r2, [pc, #388]	; (800227c <HAL_DMA_Start_IT+0x4d0>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d101      	bne.n	8002100 <HAL_DMA_Start_IT+0x354>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <HAL_DMA_Start_IT+0x356>
 8002100:	2300      	movs	r3, #0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d01a      	beq.n	800213c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d007      	beq.n	8002124 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800211e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002122:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002128:	2b00      	cmp	r3, #0
 800212a:	d007      	beq.n	800213c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002136:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800213a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a37      	ldr	r2, [pc, #220]	; (8002220 <HAL_DMA_Start_IT+0x474>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d04a      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a36      	ldr	r2, [pc, #216]	; (8002224 <HAL_DMA_Start_IT+0x478>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d045      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a34      	ldr	r2, [pc, #208]	; (8002228 <HAL_DMA_Start_IT+0x47c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d040      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a33      	ldr	r2, [pc, #204]	; (800222c <HAL_DMA_Start_IT+0x480>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d03b      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a31      	ldr	r2, [pc, #196]	; (8002230 <HAL_DMA_Start_IT+0x484>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d036      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a30      	ldr	r2, [pc, #192]	; (8002234 <HAL_DMA_Start_IT+0x488>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d031      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a2e      	ldr	r2, [pc, #184]	; (8002238 <HAL_DMA_Start_IT+0x48c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d02c      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a2d      	ldr	r2, [pc, #180]	; (800223c <HAL_DMA_Start_IT+0x490>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d027      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a2b      	ldr	r2, [pc, #172]	; (8002240 <HAL_DMA_Start_IT+0x494>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d022      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a2a      	ldr	r2, [pc, #168]	; (8002244 <HAL_DMA_Start_IT+0x498>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d01d      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a28      	ldr	r2, [pc, #160]	; (8002248 <HAL_DMA_Start_IT+0x49c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d018      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a27      	ldr	r2, [pc, #156]	; (800224c <HAL_DMA_Start_IT+0x4a0>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d013      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a25      	ldr	r2, [pc, #148]	; (8002250 <HAL_DMA_Start_IT+0x4a4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00e      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a24      	ldr	r2, [pc, #144]	; (8002254 <HAL_DMA_Start_IT+0x4a8>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d009      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a22      	ldr	r2, [pc, #136]	; (8002258 <HAL_DMA_Start_IT+0x4ac>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d004      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a21      	ldr	r2, [pc, #132]	; (800225c <HAL_DMA_Start_IT+0x4b0>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d108      	bne.n	80021ee <HAL_DMA_Start_IT+0x442>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	e012      	b.n	8002214 <HAL_DMA_Start_IT+0x468>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f042 0201 	orr.w	r2, r2, #1
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	e009      	b.n	8002214 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800220e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002214:	7dfb      	ldrb	r3, [r7, #23]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40020010 	.word	0x40020010
 8002224:	40020028 	.word	0x40020028
 8002228:	40020040 	.word	0x40020040
 800222c:	40020058 	.word	0x40020058
 8002230:	40020070 	.word	0x40020070
 8002234:	40020088 	.word	0x40020088
 8002238:	400200a0 	.word	0x400200a0
 800223c:	400200b8 	.word	0x400200b8
 8002240:	40020410 	.word	0x40020410
 8002244:	40020428 	.word	0x40020428
 8002248:	40020440 	.word	0x40020440
 800224c:	40020458 	.word	0x40020458
 8002250:	40020470 	.word	0x40020470
 8002254:	40020488 	.word	0x40020488
 8002258:	400204a0 	.word	0x400204a0
 800225c:	400204b8 	.word	0x400204b8
 8002260:	58025408 	.word	0x58025408
 8002264:	5802541c 	.word	0x5802541c
 8002268:	58025430 	.word	0x58025430
 800226c:	58025444 	.word	0x58025444
 8002270:	58025458 	.word	0x58025458
 8002274:	5802546c 	.word	0x5802546c
 8002278:	58025480 	.word	0x58025480
 800227c:	58025494 	.word	0x58025494

08002280 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e205      	b.n	800269e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d004      	beq.n	80022a8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2280      	movs	r2, #128	; 0x80
 80022a2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e1fa      	b.n	800269e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a8c      	ldr	r2, [pc, #560]	; (80024e0 <HAL_DMA_Abort_IT+0x260>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d04a      	beq.n	8002348 <HAL_DMA_Abort_IT+0xc8>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a8b      	ldr	r2, [pc, #556]	; (80024e4 <HAL_DMA_Abort_IT+0x264>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d045      	beq.n	8002348 <HAL_DMA_Abort_IT+0xc8>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a89      	ldr	r2, [pc, #548]	; (80024e8 <HAL_DMA_Abort_IT+0x268>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d040      	beq.n	8002348 <HAL_DMA_Abort_IT+0xc8>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a88      	ldr	r2, [pc, #544]	; (80024ec <HAL_DMA_Abort_IT+0x26c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d03b      	beq.n	8002348 <HAL_DMA_Abort_IT+0xc8>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a86      	ldr	r2, [pc, #536]	; (80024f0 <HAL_DMA_Abort_IT+0x270>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d036      	beq.n	8002348 <HAL_DMA_Abort_IT+0xc8>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a85      	ldr	r2, [pc, #532]	; (80024f4 <HAL_DMA_Abort_IT+0x274>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d031      	beq.n	8002348 <HAL_DMA_Abort_IT+0xc8>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a83      	ldr	r2, [pc, #524]	; (80024f8 <HAL_DMA_Abort_IT+0x278>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d02c      	beq.n	8002348 <HAL_DMA_Abort_IT+0xc8>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a82      	ldr	r2, [pc, #520]	; (80024fc <HAL_DMA_Abort_IT+0x27c>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d027      	beq.n	8002348 <HAL_DMA_Abort_IT+0xc8>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a80      	ldr	r2, [pc, #512]	; (8002500 <HAL_DMA_Abort_IT+0x280>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d022      	beq.n	8002348 <HAL_DMA_Abort_IT+0xc8>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a7f      	ldr	r2, [pc, #508]	; (8002504 <HAL_DMA_Abort_IT+0x284>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d01d      	beq.n	8002348 <HAL_DMA_Abort_IT+0xc8>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a7d      	ldr	r2, [pc, #500]	; (8002508 <HAL_DMA_Abort_IT+0x288>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d018      	beq.n	8002348 <HAL_DMA_Abort_IT+0xc8>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a7c      	ldr	r2, [pc, #496]	; (800250c <HAL_DMA_Abort_IT+0x28c>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d013      	beq.n	8002348 <HAL_DMA_Abort_IT+0xc8>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a7a      	ldr	r2, [pc, #488]	; (8002510 <HAL_DMA_Abort_IT+0x290>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00e      	beq.n	8002348 <HAL_DMA_Abort_IT+0xc8>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a79      	ldr	r2, [pc, #484]	; (8002514 <HAL_DMA_Abort_IT+0x294>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d009      	beq.n	8002348 <HAL_DMA_Abort_IT+0xc8>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a77      	ldr	r2, [pc, #476]	; (8002518 <HAL_DMA_Abort_IT+0x298>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d004      	beq.n	8002348 <HAL_DMA_Abort_IT+0xc8>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a76      	ldr	r2, [pc, #472]	; (800251c <HAL_DMA_Abort_IT+0x29c>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d101      	bne.n	800234c <HAL_DMA_Abort_IT+0xcc>
 8002348:	2301      	movs	r3, #1
 800234a:	e000      	b.n	800234e <HAL_DMA_Abort_IT+0xce>
 800234c:	2300      	movs	r3, #0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d065      	beq.n	800241e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2204      	movs	r2, #4
 8002356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a60      	ldr	r2, [pc, #384]	; (80024e0 <HAL_DMA_Abort_IT+0x260>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d04a      	beq.n	80023fa <HAL_DMA_Abort_IT+0x17a>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a5e      	ldr	r2, [pc, #376]	; (80024e4 <HAL_DMA_Abort_IT+0x264>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d045      	beq.n	80023fa <HAL_DMA_Abort_IT+0x17a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a5d      	ldr	r2, [pc, #372]	; (80024e8 <HAL_DMA_Abort_IT+0x268>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d040      	beq.n	80023fa <HAL_DMA_Abort_IT+0x17a>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a5b      	ldr	r2, [pc, #364]	; (80024ec <HAL_DMA_Abort_IT+0x26c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d03b      	beq.n	80023fa <HAL_DMA_Abort_IT+0x17a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a5a      	ldr	r2, [pc, #360]	; (80024f0 <HAL_DMA_Abort_IT+0x270>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d036      	beq.n	80023fa <HAL_DMA_Abort_IT+0x17a>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a58      	ldr	r2, [pc, #352]	; (80024f4 <HAL_DMA_Abort_IT+0x274>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d031      	beq.n	80023fa <HAL_DMA_Abort_IT+0x17a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a57      	ldr	r2, [pc, #348]	; (80024f8 <HAL_DMA_Abort_IT+0x278>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d02c      	beq.n	80023fa <HAL_DMA_Abort_IT+0x17a>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a55      	ldr	r2, [pc, #340]	; (80024fc <HAL_DMA_Abort_IT+0x27c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d027      	beq.n	80023fa <HAL_DMA_Abort_IT+0x17a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a54      	ldr	r2, [pc, #336]	; (8002500 <HAL_DMA_Abort_IT+0x280>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d022      	beq.n	80023fa <HAL_DMA_Abort_IT+0x17a>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a52      	ldr	r2, [pc, #328]	; (8002504 <HAL_DMA_Abort_IT+0x284>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d01d      	beq.n	80023fa <HAL_DMA_Abort_IT+0x17a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a51      	ldr	r2, [pc, #324]	; (8002508 <HAL_DMA_Abort_IT+0x288>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d018      	beq.n	80023fa <HAL_DMA_Abort_IT+0x17a>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a4f      	ldr	r2, [pc, #316]	; (800250c <HAL_DMA_Abort_IT+0x28c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d013      	beq.n	80023fa <HAL_DMA_Abort_IT+0x17a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a4e      	ldr	r2, [pc, #312]	; (8002510 <HAL_DMA_Abort_IT+0x290>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d00e      	beq.n	80023fa <HAL_DMA_Abort_IT+0x17a>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a4c      	ldr	r2, [pc, #304]	; (8002514 <HAL_DMA_Abort_IT+0x294>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d009      	beq.n	80023fa <HAL_DMA_Abort_IT+0x17a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a4b      	ldr	r2, [pc, #300]	; (8002518 <HAL_DMA_Abort_IT+0x298>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d004      	beq.n	80023fa <HAL_DMA_Abort_IT+0x17a>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a49      	ldr	r2, [pc, #292]	; (800251c <HAL_DMA_Abort_IT+0x29c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d108      	bne.n	800240c <HAL_DMA_Abort_IT+0x18c>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0201 	bic.w	r2, r2, #1
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	e147      	b.n	800269c <HAL_DMA_Abort_IT+0x41c>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0201 	bic.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e13e      	b.n	800269c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 020e 	bic.w	r2, r2, #14
 800242c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a2b      	ldr	r2, [pc, #172]	; (80024e0 <HAL_DMA_Abort_IT+0x260>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d04a      	beq.n	80024ce <HAL_DMA_Abort_IT+0x24e>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a29      	ldr	r2, [pc, #164]	; (80024e4 <HAL_DMA_Abort_IT+0x264>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d045      	beq.n	80024ce <HAL_DMA_Abort_IT+0x24e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a28      	ldr	r2, [pc, #160]	; (80024e8 <HAL_DMA_Abort_IT+0x268>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d040      	beq.n	80024ce <HAL_DMA_Abort_IT+0x24e>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a26      	ldr	r2, [pc, #152]	; (80024ec <HAL_DMA_Abort_IT+0x26c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d03b      	beq.n	80024ce <HAL_DMA_Abort_IT+0x24e>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a25      	ldr	r2, [pc, #148]	; (80024f0 <HAL_DMA_Abort_IT+0x270>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d036      	beq.n	80024ce <HAL_DMA_Abort_IT+0x24e>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a23      	ldr	r2, [pc, #140]	; (80024f4 <HAL_DMA_Abort_IT+0x274>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d031      	beq.n	80024ce <HAL_DMA_Abort_IT+0x24e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a22      	ldr	r2, [pc, #136]	; (80024f8 <HAL_DMA_Abort_IT+0x278>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d02c      	beq.n	80024ce <HAL_DMA_Abort_IT+0x24e>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a20      	ldr	r2, [pc, #128]	; (80024fc <HAL_DMA_Abort_IT+0x27c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d027      	beq.n	80024ce <HAL_DMA_Abort_IT+0x24e>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a1f      	ldr	r2, [pc, #124]	; (8002500 <HAL_DMA_Abort_IT+0x280>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d022      	beq.n	80024ce <HAL_DMA_Abort_IT+0x24e>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a1d      	ldr	r2, [pc, #116]	; (8002504 <HAL_DMA_Abort_IT+0x284>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d01d      	beq.n	80024ce <HAL_DMA_Abort_IT+0x24e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a1c      	ldr	r2, [pc, #112]	; (8002508 <HAL_DMA_Abort_IT+0x288>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d018      	beq.n	80024ce <HAL_DMA_Abort_IT+0x24e>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a1a      	ldr	r2, [pc, #104]	; (800250c <HAL_DMA_Abort_IT+0x28c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d013      	beq.n	80024ce <HAL_DMA_Abort_IT+0x24e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a19      	ldr	r2, [pc, #100]	; (8002510 <HAL_DMA_Abort_IT+0x290>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d00e      	beq.n	80024ce <HAL_DMA_Abort_IT+0x24e>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a17      	ldr	r2, [pc, #92]	; (8002514 <HAL_DMA_Abort_IT+0x294>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d009      	beq.n	80024ce <HAL_DMA_Abort_IT+0x24e>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a16      	ldr	r2, [pc, #88]	; (8002518 <HAL_DMA_Abort_IT+0x298>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d004      	beq.n	80024ce <HAL_DMA_Abort_IT+0x24e>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a14      	ldr	r2, [pc, #80]	; (800251c <HAL_DMA_Abort_IT+0x29c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d128      	bne.n	8002520 <HAL_DMA_Abort_IT+0x2a0>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 0201 	bic.w	r2, r2, #1
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	e027      	b.n	8002530 <HAL_DMA_Abort_IT+0x2b0>
 80024e0:	40020010 	.word	0x40020010
 80024e4:	40020028 	.word	0x40020028
 80024e8:	40020040 	.word	0x40020040
 80024ec:	40020058 	.word	0x40020058
 80024f0:	40020070 	.word	0x40020070
 80024f4:	40020088 	.word	0x40020088
 80024f8:	400200a0 	.word	0x400200a0
 80024fc:	400200b8 	.word	0x400200b8
 8002500:	40020410 	.word	0x40020410
 8002504:	40020428 	.word	0x40020428
 8002508:	40020440 	.word	0x40020440
 800250c:	40020458 	.word	0x40020458
 8002510:	40020470 	.word	0x40020470
 8002514:	40020488 	.word	0x40020488
 8002518:	400204a0 	.word	0x400204a0
 800251c:	400204b8 	.word	0x400204b8
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0201 	bic.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a5c      	ldr	r2, [pc, #368]	; (80026a8 <HAL_DMA_Abort_IT+0x428>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d072      	beq.n	8002620 <HAL_DMA_Abort_IT+0x3a0>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a5b      	ldr	r2, [pc, #364]	; (80026ac <HAL_DMA_Abort_IT+0x42c>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d06d      	beq.n	8002620 <HAL_DMA_Abort_IT+0x3a0>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a59      	ldr	r2, [pc, #356]	; (80026b0 <HAL_DMA_Abort_IT+0x430>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d068      	beq.n	8002620 <HAL_DMA_Abort_IT+0x3a0>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a58      	ldr	r2, [pc, #352]	; (80026b4 <HAL_DMA_Abort_IT+0x434>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d063      	beq.n	8002620 <HAL_DMA_Abort_IT+0x3a0>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a56      	ldr	r2, [pc, #344]	; (80026b8 <HAL_DMA_Abort_IT+0x438>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d05e      	beq.n	8002620 <HAL_DMA_Abort_IT+0x3a0>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a55      	ldr	r2, [pc, #340]	; (80026bc <HAL_DMA_Abort_IT+0x43c>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d059      	beq.n	8002620 <HAL_DMA_Abort_IT+0x3a0>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a53      	ldr	r2, [pc, #332]	; (80026c0 <HAL_DMA_Abort_IT+0x440>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d054      	beq.n	8002620 <HAL_DMA_Abort_IT+0x3a0>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a52      	ldr	r2, [pc, #328]	; (80026c4 <HAL_DMA_Abort_IT+0x444>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d04f      	beq.n	8002620 <HAL_DMA_Abort_IT+0x3a0>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a50      	ldr	r2, [pc, #320]	; (80026c8 <HAL_DMA_Abort_IT+0x448>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d04a      	beq.n	8002620 <HAL_DMA_Abort_IT+0x3a0>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a4f      	ldr	r2, [pc, #316]	; (80026cc <HAL_DMA_Abort_IT+0x44c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d045      	beq.n	8002620 <HAL_DMA_Abort_IT+0x3a0>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a4d      	ldr	r2, [pc, #308]	; (80026d0 <HAL_DMA_Abort_IT+0x450>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d040      	beq.n	8002620 <HAL_DMA_Abort_IT+0x3a0>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a4c      	ldr	r2, [pc, #304]	; (80026d4 <HAL_DMA_Abort_IT+0x454>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d03b      	beq.n	8002620 <HAL_DMA_Abort_IT+0x3a0>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a4a      	ldr	r2, [pc, #296]	; (80026d8 <HAL_DMA_Abort_IT+0x458>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d036      	beq.n	8002620 <HAL_DMA_Abort_IT+0x3a0>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a49      	ldr	r2, [pc, #292]	; (80026dc <HAL_DMA_Abort_IT+0x45c>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d031      	beq.n	8002620 <HAL_DMA_Abort_IT+0x3a0>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a47      	ldr	r2, [pc, #284]	; (80026e0 <HAL_DMA_Abort_IT+0x460>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d02c      	beq.n	8002620 <HAL_DMA_Abort_IT+0x3a0>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a46      	ldr	r2, [pc, #280]	; (80026e4 <HAL_DMA_Abort_IT+0x464>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d027      	beq.n	8002620 <HAL_DMA_Abort_IT+0x3a0>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a44      	ldr	r2, [pc, #272]	; (80026e8 <HAL_DMA_Abort_IT+0x468>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d022      	beq.n	8002620 <HAL_DMA_Abort_IT+0x3a0>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a43      	ldr	r2, [pc, #268]	; (80026ec <HAL_DMA_Abort_IT+0x46c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d01d      	beq.n	8002620 <HAL_DMA_Abort_IT+0x3a0>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a41      	ldr	r2, [pc, #260]	; (80026f0 <HAL_DMA_Abort_IT+0x470>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d018      	beq.n	8002620 <HAL_DMA_Abort_IT+0x3a0>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a40      	ldr	r2, [pc, #256]	; (80026f4 <HAL_DMA_Abort_IT+0x474>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d013      	beq.n	8002620 <HAL_DMA_Abort_IT+0x3a0>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a3e      	ldr	r2, [pc, #248]	; (80026f8 <HAL_DMA_Abort_IT+0x478>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d00e      	beq.n	8002620 <HAL_DMA_Abort_IT+0x3a0>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a3d      	ldr	r2, [pc, #244]	; (80026fc <HAL_DMA_Abort_IT+0x47c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d009      	beq.n	8002620 <HAL_DMA_Abort_IT+0x3a0>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a3b      	ldr	r2, [pc, #236]	; (8002700 <HAL_DMA_Abort_IT+0x480>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d004      	beq.n	8002620 <HAL_DMA_Abort_IT+0x3a0>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a3a      	ldr	r2, [pc, #232]	; (8002704 <HAL_DMA_Abort_IT+0x484>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d101      	bne.n	8002624 <HAL_DMA_Abort_IT+0x3a4>
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <HAL_DMA_Abort_IT+0x3a6>
 8002624:	2300      	movs	r3, #0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d028      	beq.n	800267c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002634:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002638:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002644:	f003 031f 	and.w	r3, r3, #31
 8002648:	2201      	movs	r2, #1
 800264a:	409a      	lsls	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002658:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00c      	beq.n	800267c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800266c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002670:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800267a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40020010 	.word	0x40020010
 80026ac:	40020028 	.word	0x40020028
 80026b0:	40020040 	.word	0x40020040
 80026b4:	40020058 	.word	0x40020058
 80026b8:	40020070 	.word	0x40020070
 80026bc:	40020088 	.word	0x40020088
 80026c0:	400200a0 	.word	0x400200a0
 80026c4:	400200b8 	.word	0x400200b8
 80026c8:	40020410 	.word	0x40020410
 80026cc:	40020428 	.word	0x40020428
 80026d0:	40020440 	.word	0x40020440
 80026d4:	40020458 	.word	0x40020458
 80026d8:	40020470 	.word	0x40020470
 80026dc:	40020488 	.word	0x40020488
 80026e0:	400204a0 	.word	0x400204a0
 80026e4:	400204b8 	.word	0x400204b8
 80026e8:	58025408 	.word	0x58025408
 80026ec:	5802541c 	.word	0x5802541c
 80026f0:	58025430 	.word	0x58025430
 80026f4:	58025444 	.word	0x58025444
 80026f8:	58025458 	.word	0x58025458
 80026fc:	5802546c 	.word	0x5802546c
 8002700:	58025480 	.word	0x58025480
 8002704:	58025494 	.word	0x58025494

08002708 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08a      	sub	sp, #40	; 0x28
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002714:	4b67      	ldr	r3, [pc, #412]	; (80028b4 <HAL_DMA_IRQHandler+0x1ac>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a67      	ldr	r2, [pc, #412]	; (80028b8 <HAL_DMA_IRQHandler+0x1b0>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	0a9b      	lsrs	r3, r3, #10
 8002720:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002726:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a5f      	ldr	r2, [pc, #380]	; (80028bc <HAL_DMA_IRQHandler+0x1b4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d04a      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a5d      	ldr	r2, [pc, #372]	; (80028c0 <HAL_DMA_IRQHandler+0x1b8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d045      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a5c      	ldr	r2, [pc, #368]	; (80028c4 <HAL_DMA_IRQHandler+0x1bc>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d040      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a5a      	ldr	r2, [pc, #360]	; (80028c8 <HAL_DMA_IRQHandler+0x1c0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d03b      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a59      	ldr	r2, [pc, #356]	; (80028cc <HAL_DMA_IRQHandler+0x1c4>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d036      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a57      	ldr	r2, [pc, #348]	; (80028d0 <HAL_DMA_IRQHandler+0x1c8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d031      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a56      	ldr	r2, [pc, #344]	; (80028d4 <HAL_DMA_IRQHandler+0x1cc>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d02c      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a54      	ldr	r2, [pc, #336]	; (80028d8 <HAL_DMA_IRQHandler+0x1d0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d027      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a53      	ldr	r2, [pc, #332]	; (80028dc <HAL_DMA_IRQHandler+0x1d4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d022      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a51      	ldr	r2, [pc, #324]	; (80028e0 <HAL_DMA_IRQHandler+0x1d8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d01d      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a50      	ldr	r2, [pc, #320]	; (80028e4 <HAL_DMA_IRQHandler+0x1dc>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d018      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a4e      	ldr	r2, [pc, #312]	; (80028e8 <HAL_DMA_IRQHandler+0x1e0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d013      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a4d      	ldr	r2, [pc, #308]	; (80028ec <HAL_DMA_IRQHandler+0x1e4>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d00e      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a4b      	ldr	r2, [pc, #300]	; (80028f0 <HAL_DMA_IRQHandler+0x1e8>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d009      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a4a      	ldr	r2, [pc, #296]	; (80028f4 <HAL_DMA_IRQHandler+0x1ec>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d004      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a48      	ldr	r2, [pc, #288]	; (80028f8 <HAL_DMA_IRQHandler+0x1f0>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d101      	bne.n	80027de <HAL_DMA_IRQHandler+0xd6>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <HAL_DMA_IRQHandler+0xd8>
 80027de:	2300      	movs	r3, #0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 842b 	beq.w	800303c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ea:	f003 031f 	and.w	r3, r3, #31
 80027ee:	2208      	movs	r2, #8
 80027f0:	409a      	lsls	r2, r3
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 80a2 	beq.w	8002940 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a2e      	ldr	r2, [pc, #184]	; (80028bc <HAL_DMA_IRQHandler+0x1b4>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d04a      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a2d      	ldr	r2, [pc, #180]	; (80028c0 <HAL_DMA_IRQHandler+0x1b8>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d045      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a2b      	ldr	r2, [pc, #172]	; (80028c4 <HAL_DMA_IRQHandler+0x1bc>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d040      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a2a      	ldr	r2, [pc, #168]	; (80028c8 <HAL_DMA_IRQHandler+0x1c0>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d03b      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a28      	ldr	r2, [pc, #160]	; (80028cc <HAL_DMA_IRQHandler+0x1c4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d036      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a27      	ldr	r2, [pc, #156]	; (80028d0 <HAL_DMA_IRQHandler+0x1c8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d031      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a25      	ldr	r2, [pc, #148]	; (80028d4 <HAL_DMA_IRQHandler+0x1cc>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d02c      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a24      	ldr	r2, [pc, #144]	; (80028d8 <HAL_DMA_IRQHandler+0x1d0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d027      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a22      	ldr	r2, [pc, #136]	; (80028dc <HAL_DMA_IRQHandler+0x1d4>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d022      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a21      	ldr	r2, [pc, #132]	; (80028e0 <HAL_DMA_IRQHandler+0x1d8>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d01d      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a1f      	ldr	r2, [pc, #124]	; (80028e4 <HAL_DMA_IRQHandler+0x1dc>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d018      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a1e      	ldr	r2, [pc, #120]	; (80028e8 <HAL_DMA_IRQHandler+0x1e0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d013      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a1c      	ldr	r2, [pc, #112]	; (80028ec <HAL_DMA_IRQHandler+0x1e4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d00e      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a1b      	ldr	r2, [pc, #108]	; (80028f0 <HAL_DMA_IRQHandler+0x1e8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d009      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a19      	ldr	r2, [pc, #100]	; (80028f4 <HAL_DMA_IRQHandler+0x1ec>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d004      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a18      	ldr	r2, [pc, #96]	; (80028f8 <HAL_DMA_IRQHandler+0x1f0>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d12f      	bne.n	80028fc <HAL_DMA_IRQHandler+0x1f4>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	bf14      	ite	ne
 80028aa:	2301      	movne	r3, #1
 80028ac:	2300      	moveq	r3, #0
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	e02e      	b.n	8002910 <HAL_DMA_IRQHandler+0x208>
 80028b2:	bf00      	nop
 80028b4:	24000000 	.word	0x24000000
 80028b8:	1b4e81b5 	.word	0x1b4e81b5
 80028bc:	40020010 	.word	0x40020010
 80028c0:	40020028 	.word	0x40020028
 80028c4:	40020040 	.word	0x40020040
 80028c8:	40020058 	.word	0x40020058
 80028cc:	40020070 	.word	0x40020070
 80028d0:	40020088 	.word	0x40020088
 80028d4:	400200a0 	.word	0x400200a0
 80028d8:	400200b8 	.word	0x400200b8
 80028dc:	40020410 	.word	0x40020410
 80028e0:	40020428 	.word	0x40020428
 80028e4:	40020440 	.word	0x40020440
 80028e8:	40020458 	.word	0x40020458
 80028ec:	40020470 	.word	0x40020470
 80028f0:	40020488 	.word	0x40020488
 80028f4:	400204a0 	.word	0x400204a0
 80028f8:	400204b8 	.word	0x400204b8
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	bf14      	ite	ne
 800290a:	2301      	movne	r3, #1
 800290c:	2300      	moveq	r3, #0
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d015      	beq.n	8002940 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0204 	bic.w	r2, r2, #4
 8002922:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002928:	f003 031f 	and.w	r3, r3, #31
 800292c:	2208      	movs	r2, #8
 800292e:	409a      	lsls	r2, r3
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002938:	f043 0201 	orr.w	r2, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	fa22 f303 	lsr.w	r3, r2, r3
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d06e      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a69      	ldr	r2, [pc, #420]	; (8002b00 <HAL_DMA_IRQHandler+0x3f8>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d04a      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a67      	ldr	r2, [pc, #412]	; (8002b04 <HAL_DMA_IRQHandler+0x3fc>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d045      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a66      	ldr	r2, [pc, #408]	; (8002b08 <HAL_DMA_IRQHandler+0x400>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d040      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a64      	ldr	r2, [pc, #400]	; (8002b0c <HAL_DMA_IRQHandler+0x404>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d03b      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a63      	ldr	r2, [pc, #396]	; (8002b10 <HAL_DMA_IRQHandler+0x408>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d036      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a61      	ldr	r2, [pc, #388]	; (8002b14 <HAL_DMA_IRQHandler+0x40c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d031      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a60      	ldr	r2, [pc, #384]	; (8002b18 <HAL_DMA_IRQHandler+0x410>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d02c      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a5e      	ldr	r2, [pc, #376]	; (8002b1c <HAL_DMA_IRQHandler+0x414>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d027      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a5d      	ldr	r2, [pc, #372]	; (8002b20 <HAL_DMA_IRQHandler+0x418>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d022      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a5b      	ldr	r2, [pc, #364]	; (8002b24 <HAL_DMA_IRQHandler+0x41c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d01d      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a5a      	ldr	r2, [pc, #360]	; (8002b28 <HAL_DMA_IRQHandler+0x420>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d018      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a58      	ldr	r2, [pc, #352]	; (8002b2c <HAL_DMA_IRQHandler+0x424>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d013      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a57      	ldr	r2, [pc, #348]	; (8002b30 <HAL_DMA_IRQHandler+0x428>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d00e      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a55      	ldr	r2, [pc, #340]	; (8002b34 <HAL_DMA_IRQHandler+0x42c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d009      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a54      	ldr	r2, [pc, #336]	; (8002b38 <HAL_DMA_IRQHandler+0x430>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d004      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a52      	ldr	r2, [pc, #328]	; (8002b3c <HAL_DMA_IRQHandler+0x434>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d10a      	bne.n	8002a0c <HAL_DMA_IRQHandler+0x304>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	bf14      	ite	ne
 8002a04:	2301      	movne	r3, #1
 8002a06:	2300      	moveq	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	e003      	b.n	8002a14 <HAL_DMA_IRQHandler+0x30c>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2300      	movs	r3, #0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00d      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1c:	f003 031f 	and.w	r3, r3, #31
 8002a20:	2201      	movs	r2, #1
 8002a22:	409a      	lsls	r2, r3
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2c:	f043 0202 	orr.w	r2, r3, #2
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	2204      	movs	r2, #4
 8002a3e:	409a      	lsls	r2, r3
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 808f 	beq.w	8002b68 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a2c      	ldr	r2, [pc, #176]	; (8002b00 <HAL_DMA_IRQHandler+0x3f8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d04a      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a2a      	ldr	r2, [pc, #168]	; (8002b04 <HAL_DMA_IRQHandler+0x3fc>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d045      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a29      	ldr	r2, [pc, #164]	; (8002b08 <HAL_DMA_IRQHandler+0x400>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d040      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a27      	ldr	r2, [pc, #156]	; (8002b0c <HAL_DMA_IRQHandler+0x404>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d03b      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a26      	ldr	r2, [pc, #152]	; (8002b10 <HAL_DMA_IRQHandler+0x408>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d036      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a24      	ldr	r2, [pc, #144]	; (8002b14 <HAL_DMA_IRQHandler+0x40c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d031      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a23      	ldr	r2, [pc, #140]	; (8002b18 <HAL_DMA_IRQHandler+0x410>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d02c      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a21      	ldr	r2, [pc, #132]	; (8002b1c <HAL_DMA_IRQHandler+0x414>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d027      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a20      	ldr	r2, [pc, #128]	; (8002b20 <HAL_DMA_IRQHandler+0x418>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d022      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a1e      	ldr	r2, [pc, #120]	; (8002b24 <HAL_DMA_IRQHandler+0x41c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d01d      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <HAL_DMA_IRQHandler+0x420>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d018      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a1b      	ldr	r2, [pc, #108]	; (8002b2c <HAL_DMA_IRQHandler+0x424>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d013      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a1a      	ldr	r2, [pc, #104]	; (8002b30 <HAL_DMA_IRQHandler+0x428>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00e      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a18      	ldr	r2, [pc, #96]	; (8002b34 <HAL_DMA_IRQHandler+0x42c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d009      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <HAL_DMA_IRQHandler+0x430>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d004      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a15      	ldr	r2, [pc, #84]	; (8002b3c <HAL_DMA_IRQHandler+0x434>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d12a      	bne.n	8002b40 <HAL_DMA_IRQHandler+0x438>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	bf14      	ite	ne
 8002af8:	2301      	movne	r3, #1
 8002afa:	2300      	moveq	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	e023      	b.n	8002b48 <HAL_DMA_IRQHandler+0x440>
 8002b00:	40020010 	.word	0x40020010
 8002b04:	40020028 	.word	0x40020028
 8002b08:	40020040 	.word	0x40020040
 8002b0c:	40020058 	.word	0x40020058
 8002b10:	40020070 	.word	0x40020070
 8002b14:	40020088 	.word	0x40020088
 8002b18:	400200a0 	.word	0x400200a0
 8002b1c:	400200b8 	.word	0x400200b8
 8002b20:	40020410 	.word	0x40020410
 8002b24:	40020428 	.word	0x40020428
 8002b28:	40020440 	.word	0x40020440
 8002b2c:	40020458 	.word	0x40020458
 8002b30:	40020470 	.word	0x40020470
 8002b34:	40020488 	.word	0x40020488
 8002b38:	400204a0 	.word	0x400204a0
 8002b3c:	400204b8 	.word	0x400204b8
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2300      	movs	r3, #0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00d      	beq.n	8002b68 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b50:	f003 031f 	and.w	r3, r3, #31
 8002b54:	2204      	movs	r2, #4
 8002b56:	409a      	lsls	r2, r3
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b60:	f043 0204 	orr.w	r2, r3, #4
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6c:	f003 031f 	and.w	r3, r3, #31
 8002b70:	2210      	movs	r2, #16
 8002b72:	409a      	lsls	r2, r3
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80a6 	beq.w	8002cca <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a85      	ldr	r2, [pc, #532]	; (8002d98 <HAL_DMA_IRQHandler+0x690>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d04a      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a83      	ldr	r2, [pc, #524]	; (8002d9c <HAL_DMA_IRQHandler+0x694>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d045      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a82      	ldr	r2, [pc, #520]	; (8002da0 <HAL_DMA_IRQHandler+0x698>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d040      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a80      	ldr	r2, [pc, #512]	; (8002da4 <HAL_DMA_IRQHandler+0x69c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d03b      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a7f      	ldr	r2, [pc, #508]	; (8002da8 <HAL_DMA_IRQHandler+0x6a0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d036      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a7d      	ldr	r2, [pc, #500]	; (8002dac <HAL_DMA_IRQHandler+0x6a4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d031      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a7c      	ldr	r2, [pc, #496]	; (8002db0 <HAL_DMA_IRQHandler+0x6a8>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d02c      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a7a      	ldr	r2, [pc, #488]	; (8002db4 <HAL_DMA_IRQHandler+0x6ac>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d027      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a79      	ldr	r2, [pc, #484]	; (8002db8 <HAL_DMA_IRQHandler+0x6b0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d022      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a77      	ldr	r2, [pc, #476]	; (8002dbc <HAL_DMA_IRQHandler+0x6b4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d01d      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a76      	ldr	r2, [pc, #472]	; (8002dc0 <HAL_DMA_IRQHandler+0x6b8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d018      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a74      	ldr	r2, [pc, #464]	; (8002dc4 <HAL_DMA_IRQHandler+0x6bc>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d013      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a73      	ldr	r2, [pc, #460]	; (8002dc8 <HAL_DMA_IRQHandler+0x6c0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d00e      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a71      	ldr	r2, [pc, #452]	; (8002dcc <HAL_DMA_IRQHandler+0x6c4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d009      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a70      	ldr	r2, [pc, #448]	; (8002dd0 <HAL_DMA_IRQHandler+0x6c8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d004      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a6e      	ldr	r2, [pc, #440]	; (8002dd4 <HAL_DMA_IRQHandler+0x6cc>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d10a      	bne.n	8002c34 <HAL_DMA_IRQHandler+0x52c>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	bf14      	ite	ne
 8002c2c:	2301      	movne	r3, #1
 8002c2e:	2300      	moveq	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	e009      	b.n	8002c48 <HAL_DMA_IRQHandler+0x540>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	bf14      	ite	ne
 8002c42:	2301      	movne	r3, #1
 8002c44:	2300      	moveq	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d03e      	beq.n	8002cca <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c50:	f003 031f 	and.w	r3, r3, #31
 8002c54:	2210      	movs	r2, #16
 8002c56:	409a      	lsls	r2, r3
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d018      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d108      	bne.n	8002c8a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d024      	beq.n	8002cca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	4798      	blx	r3
 8002c88:	e01f      	b.n	8002cca <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d01b      	beq.n	8002cca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	4798      	blx	r3
 8002c9a:	e016      	b.n	8002cca <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d107      	bne.n	8002cba <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0208 	bic.w	r2, r2, #8
 8002cb8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cce:	f003 031f 	and.w	r3, r3, #31
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	409a      	lsls	r2, r3
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 8110 	beq.w	8002f00 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a2c      	ldr	r2, [pc, #176]	; (8002d98 <HAL_DMA_IRQHandler+0x690>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d04a      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a2b      	ldr	r2, [pc, #172]	; (8002d9c <HAL_DMA_IRQHandler+0x694>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d045      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a29      	ldr	r2, [pc, #164]	; (8002da0 <HAL_DMA_IRQHandler+0x698>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d040      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a28      	ldr	r2, [pc, #160]	; (8002da4 <HAL_DMA_IRQHandler+0x69c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d03b      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a26      	ldr	r2, [pc, #152]	; (8002da8 <HAL_DMA_IRQHandler+0x6a0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d036      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a25      	ldr	r2, [pc, #148]	; (8002dac <HAL_DMA_IRQHandler+0x6a4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d031      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a23      	ldr	r2, [pc, #140]	; (8002db0 <HAL_DMA_IRQHandler+0x6a8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d02c      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a22      	ldr	r2, [pc, #136]	; (8002db4 <HAL_DMA_IRQHandler+0x6ac>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d027      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a20      	ldr	r2, [pc, #128]	; (8002db8 <HAL_DMA_IRQHandler+0x6b0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d022      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a1f      	ldr	r2, [pc, #124]	; (8002dbc <HAL_DMA_IRQHandler+0x6b4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d01d      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a1d      	ldr	r2, [pc, #116]	; (8002dc0 <HAL_DMA_IRQHandler+0x6b8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d018      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a1c      	ldr	r2, [pc, #112]	; (8002dc4 <HAL_DMA_IRQHandler+0x6bc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d013      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a1a      	ldr	r2, [pc, #104]	; (8002dc8 <HAL_DMA_IRQHandler+0x6c0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00e      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a19      	ldr	r2, [pc, #100]	; (8002dcc <HAL_DMA_IRQHandler+0x6c4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d009      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a17      	ldr	r2, [pc, #92]	; (8002dd0 <HAL_DMA_IRQHandler+0x6c8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d004      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a16      	ldr	r2, [pc, #88]	; (8002dd4 <HAL_DMA_IRQHandler+0x6cc>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d12b      	bne.n	8002dd8 <HAL_DMA_IRQHandler+0x6d0>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	bf14      	ite	ne
 8002d8e:	2301      	movne	r3, #1
 8002d90:	2300      	moveq	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	e02a      	b.n	8002dec <HAL_DMA_IRQHandler+0x6e4>
 8002d96:	bf00      	nop
 8002d98:	40020010 	.word	0x40020010
 8002d9c:	40020028 	.word	0x40020028
 8002da0:	40020040 	.word	0x40020040
 8002da4:	40020058 	.word	0x40020058
 8002da8:	40020070 	.word	0x40020070
 8002dac:	40020088 	.word	0x40020088
 8002db0:	400200a0 	.word	0x400200a0
 8002db4:	400200b8 	.word	0x400200b8
 8002db8:	40020410 	.word	0x40020410
 8002dbc:	40020428 	.word	0x40020428
 8002dc0:	40020440 	.word	0x40020440
 8002dc4:	40020458 	.word	0x40020458
 8002dc8:	40020470 	.word	0x40020470
 8002dcc:	40020488 	.word	0x40020488
 8002dd0:	400204a0 	.word	0x400204a0
 8002dd4:	400204b8 	.word	0x400204b8
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	bf14      	ite	ne
 8002de6:	2301      	movne	r3, #1
 8002de8:	2300      	moveq	r3, #0
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 8087 	beq.w	8002f00 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df6:	f003 031f 	and.w	r3, r3, #31
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	409a      	lsls	r2, r3
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d139      	bne.n	8002e82 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0216 	bic.w	r2, r2, #22
 8002e1c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695a      	ldr	r2, [r3, #20]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e2c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d103      	bne.n	8002e3e <HAL_DMA_IRQHandler+0x736>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d007      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0208 	bic.w	r2, r2, #8
 8002e4c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e52:	f003 031f 	and.w	r3, r3, #31
 8002e56:	223f      	movs	r2, #63	; 0x3f
 8002e58:	409a      	lsls	r2, r3
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 834a 	beq.w	800350c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	4798      	blx	r3
          }
          return;
 8002e80:	e344      	b.n	800350c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d018      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d108      	bne.n	8002eb0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d02c      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	4798      	blx	r3
 8002eae:	e027      	b.n	8002f00 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d023      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	4798      	blx	r3
 8002ec0:	e01e      	b.n	8002f00 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10f      	bne.n	8002ef0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0210 	bic.w	r2, r2, #16
 8002ede:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 8306 	beq.w	8003516 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 8088 	beq.w	8003028 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2204      	movs	r2, #4
 8002f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a7a      	ldr	r2, [pc, #488]	; (8003110 <HAL_DMA_IRQHandler+0xa08>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d04a      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a79      	ldr	r2, [pc, #484]	; (8003114 <HAL_DMA_IRQHandler+0xa0c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d045      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a77      	ldr	r2, [pc, #476]	; (8003118 <HAL_DMA_IRQHandler+0xa10>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d040      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a76      	ldr	r2, [pc, #472]	; (800311c <HAL_DMA_IRQHandler+0xa14>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d03b      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a74      	ldr	r2, [pc, #464]	; (8003120 <HAL_DMA_IRQHandler+0xa18>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d036      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a73      	ldr	r2, [pc, #460]	; (8003124 <HAL_DMA_IRQHandler+0xa1c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d031      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a71      	ldr	r2, [pc, #452]	; (8003128 <HAL_DMA_IRQHandler+0xa20>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d02c      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a70      	ldr	r2, [pc, #448]	; (800312c <HAL_DMA_IRQHandler+0xa24>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d027      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a6e      	ldr	r2, [pc, #440]	; (8003130 <HAL_DMA_IRQHandler+0xa28>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d022      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a6d      	ldr	r2, [pc, #436]	; (8003134 <HAL_DMA_IRQHandler+0xa2c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d01d      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a6b      	ldr	r2, [pc, #428]	; (8003138 <HAL_DMA_IRQHandler+0xa30>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d018      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a6a      	ldr	r2, [pc, #424]	; (800313c <HAL_DMA_IRQHandler+0xa34>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d013      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a68      	ldr	r2, [pc, #416]	; (8003140 <HAL_DMA_IRQHandler+0xa38>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00e      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a67      	ldr	r2, [pc, #412]	; (8003144 <HAL_DMA_IRQHandler+0xa3c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d009      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a65      	ldr	r2, [pc, #404]	; (8003148 <HAL_DMA_IRQHandler+0xa40>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d004      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a64      	ldr	r2, [pc, #400]	; (800314c <HAL_DMA_IRQHandler+0xa44>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d108      	bne.n	8002fd2 <HAL_DMA_IRQHandler+0x8ca>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0201 	bic.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	e007      	b.n	8002fe2 <HAL_DMA_IRQHandler+0x8da>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0201 	bic.w	r2, r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d307      	bcc.n	8002ffe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1f2      	bne.n	8002fe2 <HAL_DMA_IRQHandler+0x8da>
 8002ffc:	e000      	b.n	8003000 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002ffe:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d004      	beq.n	8003020 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2203      	movs	r2, #3
 800301a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800301e:	e003      	b.n	8003028 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 8272 	beq.w	8003516 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	4798      	blx	r3
 800303a:	e26c      	b.n	8003516 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a43      	ldr	r2, [pc, #268]	; (8003150 <HAL_DMA_IRQHandler+0xa48>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d022      	beq.n	800308c <HAL_DMA_IRQHandler+0x984>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a42      	ldr	r2, [pc, #264]	; (8003154 <HAL_DMA_IRQHandler+0xa4c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d01d      	beq.n	800308c <HAL_DMA_IRQHandler+0x984>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a40      	ldr	r2, [pc, #256]	; (8003158 <HAL_DMA_IRQHandler+0xa50>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d018      	beq.n	800308c <HAL_DMA_IRQHandler+0x984>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a3f      	ldr	r2, [pc, #252]	; (800315c <HAL_DMA_IRQHandler+0xa54>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d013      	beq.n	800308c <HAL_DMA_IRQHandler+0x984>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a3d      	ldr	r2, [pc, #244]	; (8003160 <HAL_DMA_IRQHandler+0xa58>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d00e      	beq.n	800308c <HAL_DMA_IRQHandler+0x984>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a3c      	ldr	r2, [pc, #240]	; (8003164 <HAL_DMA_IRQHandler+0xa5c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d009      	beq.n	800308c <HAL_DMA_IRQHandler+0x984>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a3a      	ldr	r2, [pc, #232]	; (8003168 <HAL_DMA_IRQHandler+0xa60>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d004      	beq.n	800308c <HAL_DMA_IRQHandler+0x984>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a39      	ldr	r2, [pc, #228]	; (800316c <HAL_DMA_IRQHandler+0xa64>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d101      	bne.n	8003090 <HAL_DMA_IRQHandler+0x988>
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <HAL_DMA_IRQHandler+0x98a>
 8003090:	2300      	movs	r3, #0
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 823f 	beq.w	8003516 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a4:	f003 031f 	and.w	r3, r3, #31
 80030a8:	2204      	movs	r2, #4
 80030aa:	409a      	lsls	r2, r3
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80cd 	beq.w	8003250 <HAL_DMA_IRQHandler+0xb48>
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 80c7 	beq.w	8003250 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c6:	f003 031f 	and.w	r3, r3, #31
 80030ca:	2204      	movs	r2, #4
 80030cc:	409a      	lsls	r2, r3
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d049      	beq.n	8003170 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d109      	bne.n	80030fa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 8210 	beq.w	8003510 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030f8:	e20a      	b.n	8003510 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8206 	beq.w	8003510 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800310c:	e200      	b.n	8003510 <HAL_DMA_IRQHandler+0xe08>
 800310e:	bf00      	nop
 8003110:	40020010 	.word	0x40020010
 8003114:	40020028 	.word	0x40020028
 8003118:	40020040 	.word	0x40020040
 800311c:	40020058 	.word	0x40020058
 8003120:	40020070 	.word	0x40020070
 8003124:	40020088 	.word	0x40020088
 8003128:	400200a0 	.word	0x400200a0
 800312c:	400200b8 	.word	0x400200b8
 8003130:	40020410 	.word	0x40020410
 8003134:	40020428 	.word	0x40020428
 8003138:	40020440 	.word	0x40020440
 800313c:	40020458 	.word	0x40020458
 8003140:	40020470 	.word	0x40020470
 8003144:	40020488 	.word	0x40020488
 8003148:	400204a0 	.word	0x400204a0
 800314c:	400204b8 	.word	0x400204b8
 8003150:	58025408 	.word	0x58025408
 8003154:	5802541c 	.word	0x5802541c
 8003158:	58025430 	.word	0x58025430
 800315c:	58025444 	.word	0x58025444
 8003160:	58025458 	.word	0x58025458
 8003164:	5802546c 	.word	0x5802546c
 8003168:	58025480 	.word	0x58025480
 800316c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f003 0320 	and.w	r3, r3, #32
 8003176:	2b00      	cmp	r3, #0
 8003178:	d160      	bne.n	800323c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a8c      	ldr	r2, [pc, #560]	; (80033b0 <HAL_DMA_IRQHandler+0xca8>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d04a      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a8a      	ldr	r2, [pc, #552]	; (80033b4 <HAL_DMA_IRQHandler+0xcac>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d045      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a89      	ldr	r2, [pc, #548]	; (80033b8 <HAL_DMA_IRQHandler+0xcb0>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d040      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a87      	ldr	r2, [pc, #540]	; (80033bc <HAL_DMA_IRQHandler+0xcb4>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d03b      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a86      	ldr	r2, [pc, #536]	; (80033c0 <HAL_DMA_IRQHandler+0xcb8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d036      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a84      	ldr	r2, [pc, #528]	; (80033c4 <HAL_DMA_IRQHandler+0xcbc>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d031      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a83      	ldr	r2, [pc, #524]	; (80033c8 <HAL_DMA_IRQHandler+0xcc0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d02c      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a81      	ldr	r2, [pc, #516]	; (80033cc <HAL_DMA_IRQHandler+0xcc4>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d027      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a80      	ldr	r2, [pc, #512]	; (80033d0 <HAL_DMA_IRQHandler+0xcc8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d022      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a7e      	ldr	r2, [pc, #504]	; (80033d4 <HAL_DMA_IRQHandler+0xccc>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d01d      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a7d      	ldr	r2, [pc, #500]	; (80033d8 <HAL_DMA_IRQHandler+0xcd0>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d018      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a7b      	ldr	r2, [pc, #492]	; (80033dc <HAL_DMA_IRQHandler+0xcd4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d013      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a7a      	ldr	r2, [pc, #488]	; (80033e0 <HAL_DMA_IRQHandler+0xcd8>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00e      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a78      	ldr	r2, [pc, #480]	; (80033e4 <HAL_DMA_IRQHandler+0xcdc>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d009      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a77      	ldr	r2, [pc, #476]	; (80033e8 <HAL_DMA_IRQHandler+0xce0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d004      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a75      	ldr	r2, [pc, #468]	; (80033ec <HAL_DMA_IRQHandler+0xce4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d108      	bne.n	800322c <HAL_DMA_IRQHandler+0xb24>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0208 	bic.w	r2, r2, #8
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	e007      	b.n	800323c <HAL_DMA_IRQHandler+0xb34>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0204 	bic.w	r2, r2, #4
 800323a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 8165 	beq.w	8003510 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800324e:	e15f      	b.n	8003510 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	2202      	movs	r2, #2
 800325a:	409a      	lsls	r2, r3
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	4013      	ands	r3, r2
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80c5 	beq.w	80033f0 <HAL_DMA_IRQHandler+0xce8>
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 80bf 	beq.w	80033f0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003276:	f003 031f 	and.w	r3, r3, #31
 800327a:	2202      	movs	r2, #2
 800327c:	409a      	lsls	r2, r3
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d018      	beq.n	80032be <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d109      	bne.n	80032aa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 813a 	beq.w	8003514 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032a8:	e134      	b.n	8003514 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 8130 	beq.w	8003514 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032bc:	e12a      	b.n	8003514 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f003 0320 	and.w	r3, r3, #32
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d168      	bne.n	800339a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a38      	ldr	r2, [pc, #224]	; (80033b0 <HAL_DMA_IRQHandler+0xca8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d04a      	beq.n	8003368 <HAL_DMA_IRQHandler+0xc60>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a37      	ldr	r2, [pc, #220]	; (80033b4 <HAL_DMA_IRQHandler+0xcac>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d045      	beq.n	8003368 <HAL_DMA_IRQHandler+0xc60>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a35      	ldr	r2, [pc, #212]	; (80033b8 <HAL_DMA_IRQHandler+0xcb0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d040      	beq.n	8003368 <HAL_DMA_IRQHandler+0xc60>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a34      	ldr	r2, [pc, #208]	; (80033bc <HAL_DMA_IRQHandler+0xcb4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d03b      	beq.n	8003368 <HAL_DMA_IRQHandler+0xc60>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a32      	ldr	r2, [pc, #200]	; (80033c0 <HAL_DMA_IRQHandler+0xcb8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d036      	beq.n	8003368 <HAL_DMA_IRQHandler+0xc60>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a31      	ldr	r2, [pc, #196]	; (80033c4 <HAL_DMA_IRQHandler+0xcbc>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d031      	beq.n	8003368 <HAL_DMA_IRQHandler+0xc60>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a2f      	ldr	r2, [pc, #188]	; (80033c8 <HAL_DMA_IRQHandler+0xcc0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d02c      	beq.n	8003368 <HAL_DMA_IRQHandler+0xc60>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a2e      	ldr	r2, [pc, #184]	; (80033cc <HAL_DMA_IRQHandler+0xcc4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d027      	beq.n	8003368 <HAL_DMA_IRQHandler+0xc60>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a2c      	ldr	r2, [pc, #176]	; (80033d0 <HAL_DMA_IRQHandler+0xcc8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d022      	beq.n	8003368 <HAL_DMA_IRQHandler+0xc60>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a2b      	ldr	r2, [pc, #172]	; (80033d4 <HAL_DMA_IRQHandler+0xccc>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d01d      	beq.n	8003368 <HAL_DMA_IRQHandler+0xc60>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a29      	ldr	r2, [pc, #164]	; (80033d8 <HAL_DMA_IRQHandler+0xcd0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d018      	beq.n	8003368 <HAL_DMA_IRQHandler+0xc60>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a28      	ldr	r2, [pc, #160]	; (80033dc <HAL_DMA_IRQHandler+0xcd4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d013      	beq.n	8003368 <HAL_DMA_IRQHandler+0xc60>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a26      	ldr	r2, [pc, #152]	; (80033e0 <HAL_DMA_IRQHandler+0xcd8>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d00e      	beq.n	8003368 <HAL_DMA_IRQHandler+0xc60>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a25      	ldr	r2, [pc, #148]	; (80033e4 <HAL_DMA_IRQHandler+0xcdc>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d009      	beq.n	8003368 <HAL_DMA_IRQHandler+0xc60>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a23      	ldr	r2, [pc, #140]	; (80033e8 <HAL_DMA_IRQHandler+0xce0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d004      	beq.n	8003368 <HAL_DMA_IRQHandler+0xc60>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a22      	ldr	r2, [pc, #136]	; (80033ec <HAL_DMA_IRQHandler+0xce4>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d108      	bne.n	800337a <HAL_DMA_IRQHandler+0xc72>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0214 	bic.w	r2, r2, #20
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	e007      	b.n	800338a <HAL_DMA_IRQHandler+0xc82>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 020a 	bic.w	r2, r2, #10
 8003388:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 80b8 	beq.w	8003514 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033ac:	e0b2      	b.n	8003514 <HAL_DMA_IRQHandler+0xe0c>
 80033ae:	bf00      	nop
 80033b0:	40020010 	.word	0x40020010
 80033b4:	40020028 	.word	0x40020028
 80033b8:	40020040 	.word	0x40020040
 80033bc:	40020058 	.word	0x40020058
 80033c0:	40020070 	.word	0x40020070
 80033c4:	40020088 	.word	0x40020088
 80033c8:	400200a0 	.word	0x400200a0
 80033cc:	400200b8 	.word	0x400200b8
 80033d0:	40020410 	.word	0x40020410
 80033d4:	40020428 	.word	0x40020428
 80033d8:	40020440 	.word	0x40020440
 80033dc:	40020458 	.word	0x40020458
 80033e0:	40020470 	.word	0x40020470
 80033e4:	40020488 	.word	0x40020488
 80033e8:	400204a0 	.word	0x400204a0
 80033ec:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f4:	f003 031f 	and.w	r3, r3, #31
 80033f8:	2208      	movs	r2, #8
 80033fa:	409a      	lsls	r2, r3
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	4013      	ands	r3, r2
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 8088 	beq.w	8003516 <HAL_DMA_IRQHandler+0xe0e>
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 8082 	beq.w	8003516 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a41      	ldr	r2, [pc, #260]	; (800351c <HAL_DMA_IRQHandler+0xe14>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d04a      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a3f      	ldr	r2, [pc, #252]	; (8003520 <HAL_DMA_IRQHandler+0xe18>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d045      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a3e      	ldr	r2, [pc, #248]	; (8003524 <HAL_DMA_IRQHandler+0xe1c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d040      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a3c      	ldr	r2, [pc, #240]	; (8003528 <HAL_DMA_IRQHandler+0xe20>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d03b      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a3b      	ldr	r2, [pc, #236]	; (800352c <HAL_DMA_IRQHandler+0xe24>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d036      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a39      	ldr	r2, [pc, #228]	; (8003530 <HAL_DMA_IRQHandler+0xe28>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d031      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a38      	ldr	r2, [pc, #224]	; (8003534 <HAL_DMA_IRQHandler+0xe2c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d02c      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a36      	ldr	r2, [pc, #216]	; (8003538 <HAL_DMA_IRQHandler+0xe30>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d027      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a35      	ldr	r2, [pc, #212]	; (800353c <HAL_DMA_IRQHandler+0xe34>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d022      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a33      	ldr	r2, [pc, #204]	; (8003540 <HAL_DMA_IRQHandler+0xe38>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d01d      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a32      	ldr	r2, [pc, #200]	; (8003544 <HAL_DMA_IRQHandler+0xe3c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d018      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a30      	ldr	r2, [pc, #192]	; (8003548 <HAL_DMA_IRQHandler+0xe40>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d013      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a2f      	ldr	r2, [pc, #188]	; (800354c <HAL_DMA_IRQHandler+0xe44>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d00e      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a2d      	ldr	r2, [pc, #180]	; (8003550 <HAL_DMA_IRQHandler+0xe48>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d009      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a2c      	ldr	r2, [pc, #176]	; (8003554 <HAL_DMA_IRQHandler+0xe4c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d004      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a2a      	ldr	r2, [pc, #168]	; (8003558 <HAL_DMA_IRQHandler+0xe50>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d108      	bne.n	80034c4 <HAL_DMA_IRQHandler+0xdbc>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 021c 	bic.w	r2, r2, #28
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	e007      	b.n	80034d4 <HAL_DMA_IRQHandler+0xdcc>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 020e 	bic.w	r2, r2, #14
 80034d2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d8:	f003 031f 	and.w	r3, r3, #31
 80034dc:	2201      	movs	r2, #1
 80034de:	409a      	lsls	r2, r3
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d009      	beq.n	8003516 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	4798      	blx	r3
 800350a:	e004      	b.n	8003516 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800350c:	bf00      	nop
 800350e:	e002      	b.n	8003516 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003510:	bf00      	nop
 8003512:	e000      	b.n	8003516 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003514:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003516:	3728      	adds	r7, #40	; 0x28
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40020010 	.word	0x40020010
 8003520:	40020028 	.word	0x40020028
 8003524:	40020040 	.word	0x40020040
 8003528:	40020058 	.word	0x40020058
 800352c:	40020070 	.word	0x40020070
 8003530:	40020088 	.word	0x40020088
 8003534:	400200a0 	.word	0x400200a0
 8003538:	400200b8 	.word	0x400200b8
 800353c:	40020410 	.word	0x40020410
 8003540:	40020428 	.word	0x40020428
 8003544:	40020440 	.word	0x40020440
 8003548:	40020458 	.word	0x40020458
 800354c:	40020470 	.word	0x40020470
 8003550:	40020488 	.word	0x40020488
 8003554:	400204a0 	.word	0x400204a0
 8003558:	400204b8 	.word	0x400204b8

0800355c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003568:	4618      	mov	r0, r3
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003586:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a84      	ldr	r2, [pc, #528]	; (80037a4 <DMA_SetConfig+0x230>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d072      	beq.n	800367e <DMA_SetConfig+0x10a>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a82      	ldr	r2, [pc, #520]	; (80037a8 <DMA_SetConfig+0x234>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d06d      	beq.n	800367e <DMA_SetConfig+0x10a>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a81      	ldr	r2, [pc, #516]	; (80037ac <DMA_SetConfig+0x238>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d068      	beq.n	800367e <DMA_SetConfig+0x10a>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a7f      	ldr	r2, [pc, #508]	; (80037b0 <DMA_SetConfig+0x23c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d063      	beq.n	800367e <DMA_SetConfig+0x10a>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a7e      	ldr	r2, [pc, #504]	; (80037b4 <DMA_SetConfig+0x240>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d05e      	beq.n	800367e <DMA_SetConfig+0x10a>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a7c      	ldr	r2, [pc, #496]	; (80037b8 <DMA_SetConfig+0x244>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d059      	beq.n	800367e <DMA_SetConfig+0x10a>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a7b      	ldr	r2, [pc, #492]	; (80037bc <DMA_SetConfig+0x248>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d054      	beq.n	800367e <DMA_SetConfig+0x10a>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a79      	ldr	r2, [pc, #484]	; (80037c0 <DMA_SetConfig+0x24c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d04f      	beq.n	800367e <DMA_SetConfig+0x10a>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a78      	ldr	r2, [pc, #480]	; (80037c4 <DMA_SetConfig+0x250>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d04a      	beq.n	800367e <DMA_SetConfig+0x10a>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a76      	ldr	r2, [pc, #472]	; (80037c8 <DMA_SetConfig+0x254>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d045      	beq.n	800367e <DMA_SetConfig+0x10a>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a75      	ldr	r2, [pc, #468]	; (80037cc <DMA_SetConfig+0x258>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d040      	beq.n	800367e <DMA_SetConfig+0x10a>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a73      	ldr	r2, [pc, #460]	; (80037d0 <DMA_SetConfig+0x25c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d03b      	beq.n	800367e <DMA_SetConfig+0x10a>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a72      	ldr	r2, [pc, #456]	; (80037d4 <DMA_SetConfig+0x260>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d036      	beq.n	800367e <DMA_SetConfig+0x10a>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a70      	ldr	r2, [pc, #448]	; (80037d8 <DMA_SetConfig+0x264>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d031      	beq.n	800367e <DMA_SetConfig+0x10a>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a6f      	ldr	r2, [pc, #444]	; (80037dc <DMA_SetConfig+0x268>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d02c      	beq.n	800367e <DMA_SetConfig+0x10a>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a6d      	ldr	r2, [pc, #436]	; (80037e0 <DMA_SetConfig+0x26c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d027      	beq.n	800367e <DMA_SetConfig+0x10a>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a6c      	ldr	r2, [pc, #432]	; (80037e4 <DMA_SetConfig+0x270>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d022      	beq.n	800367e <DMA_SetConfig+0x10a>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a6a      	ldr	r2, [pc, #424]	; (80037e8 <DMA_SetConfig+0x274>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d01d      	beq.n	800367e <DMA_SetConfig+0x10a>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a69      	ldr	r2, [pc, #420]	; (80037ec <DMA_SetConfig+0x278>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d018      	beq.n	800367e <DMA_SetConfig+0x10a>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a67      	ldr	r2, [pc, #412]	; (80037f0 <DMA_SetConfig+0x27c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d013      	beq.n	800367e <DMA_SetConfig+0x10a>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a66      	ldr	r2, [pc, #408]	; (80037f4 <DMA_SetConfig+0x280>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d00e      	beq.n	800367e <DMA_SetConfig+0x10a>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a64      	ldr	r2, [pc, #400]	; (80037f8 <DMA_SetConfig+0x284>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d009      	beq.n	800367e <DMA_SetConfig+0x10a>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a63      	ldr	r2, [pc, #396]	; (80037fc <DMA_SetConfig+0x288>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d004      	beq.n	800367e <DMA_SetConfig+0x10a>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a61      	ldr	r2, [pc, #388]	; (8003800 <DMA_SetConfig+0x28c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d101      	bne.n	8003682 <DMA_SetConfig+0x10e>
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <DMA_SetConfig+0x110>
 8003682:	2300      	movs	r3, #0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00d      	beq.n	80036a4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003690:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003696:	2b00      	cmp	r3, #0
 8003698:	d004      	beq.n	80036a4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80036a2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a3e      	ldr	r2, [pc, #248]	; (80037a4 <DMA_SetConfig+0x230>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d04a      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a3d      	ldr	r2, [pc, #244]	; (80037a8 <DMA_SetConfig+0x234>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d045      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a3b      	ldr	r2, [pc, #236]	; (80037ac <DMA_SetConfig+0x238>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d040      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a3a      	ldr	r2, [pc, #232]	; (80037b0 <DMA_SetConfig+0x23c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d03b      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a38      	ldr	r2, [pc, #224]	; (80037b4 <DMA_SetConfig+0x240>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d036      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a37      	ldr	r2, [pc, #220]	; (80037b8 <DMA_SetConfig+0x244>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d031      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a35      	ldr	r2, [pc, #212]	; (80037bc <DMA_SetConfig+0x248>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d02c      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a34      	ldr	r2, [pc, #208]	; (80037c0 <DMA_SetConfig+0x24c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d027      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a32      	ldr	r2, [pc, #200]	; (80037c4 <DMA_SetConfig+0x250>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d022      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a31      	ldr	r2, [pc, #196]	; (80037c8 <DMA_SetConfig+0x254>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d01d      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a2f      	ldr	r2, [pc, #188]	; (80037cc <DMA_SetConfig+0x258>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d018      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a2e      	ldr	r2, [pc, #184]	; (80037d0 <DMA_SetConfig+0x25c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d013      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a2c      	ldr	r2, [pc, #176]	; (80037d4 <DMA_SetConfig+0x260>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d00e      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a2b      	ldr	r2, [pc, #172]	; (80037d8 <DMA_SetConfig+0x264>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d009      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a29      	ldr	r2, [pc, #164]	; (80037dc <DMA_SetConfig+0x268>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d004      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a28      	ldr	r2, [pc, #160]	; (80037e0 <DMA_SetConfig+0x26c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d101      	bne.n	8003748 <DMA_SetConfig+0x1d4>
 8003744:	2301      	movs	r3, #1
 8003746:	e000      	b.n	800374a <DMA_SetConfig+0x1d6>
 8003748:	2300      	movs	r3, #0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d05a      	beq.n	8003804 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003752:	f003 031f 	and.w	r3, r3, #31
 8003756:	223f      	movs	r2, #63	; 0x3f
 8003758:	409a      	lsls	r2, r3
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800376c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	2b40      	cmp	r3, #64	; 0x40
 800377c:	d108      	bne.n	8003790 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800378e:	e087      	b.n	80038a0 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	60da      	str	r2, [r3, #12]
}
 80037a0:	e07e      	b.n	80038a0 <DMA_SetConfig+0x32c>
 80037a2:	bf00      	nop
 80037a4:	40020010 	.word	0x40020010
 80037a8:	40020028 	.word	0x40020028
 80037ac:	40020040 	.word	0x40020040
 80037b0:	40020058 	.word	0x40020058
 80037b4:	40020070 	.word	0x40020070
 80037b8:	40020088 	.word	0x40020088
 80037bc:	400200a0 	.word	0x400200a0
 80037c0:	400200b8 	.word	0x400200b8
 80037c4:	40020410 	.word	0x40020410
 80037c8:	40020428 	.word	0x40020428
 80037cc:	40020440 	.word	0x40020440
 80037d0:	40020458 	.word	0x40020458
 80037d4:	40020470 	.word	0x40020470
 80037d8:	40020488 	.word	0x40020488
 80037dc:	400204a0 	.word	0x400204a0
 80037e0:	400204b8 	.word	0x400204b8
 80037e4:	58025408 	.word	0x58025408
 80037e8:	5802541c 	.word	0x5802541c
 80037ec:	58025430 	.word	0x58025430
 80037f0:	58025444 	.word	0x58025444
 80037f4:	58025458 	.word	0x58025458
 80037f8:	5802546c 	.word	0x5802546c
 80037fc:	58025480 	.word	0x58025480
 8003800:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a28      	ldr	r2, [pc, #160]	; (80038ac <DMA_SetConfig+0x338>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d022      	beq.n	8003854 <DMA_SetConfig+0x2e0>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a27      	ldr	r2, [pc, #156]	; (80038b0 <DMA_SetConfig+0x33c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d01d      	beq.n	8003854 <DMA_SetConfig+0x2e0>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a25      	ldr	r2, [pc, #148]	; (80038b4 <DMA_SetConfig+0x340>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d018      	beq.n	8003854 <DMA_SetConfig+0x2e0>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a24      	ldr	r2, [pc, #144]	; (80038b8 <DMA_SetConfig+0x344>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d013      	beq.n	8003854 <DMA_SetConfig+0x2e0>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a22      	ldr	r2, [pc, #136]	; (80038bc <DMA_SetConfig+0x348>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d00e      	beq.n	8003854 <DMA_SetConfig+0x2e0>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a21      	ldr	r2, [pc, #132]	; (80038c0 <DMA_SetConfig+0x34c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d009      	beq.n	8003854 <DMA_SetConfig+0x2e0>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a1f      	ldr	r2, [pc, #124]	; (80038c4 <DMA_SetConfig+0x350>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d004      	beq.n	8003854 <DMA_SetConfig+0x2e0>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a1e      	ldr	r2, [pc, #120]	; (80038c8 <DMA_SetConfig+0x354>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d101      	bne.n	8003858 <DMA_SetConfig+0x2e4>
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <DMA_SetConfig+0x2e6>
 8003858:	2300      	movs	r3, #0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d020      	beq.n	80038a0 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003862:	f003 031f 	and.w	r3, r3, #31
 8003866:	2201      	movs	r2, #1
 8003868:	409a      	lsls	r2, r3
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2b40      	cmp	r3, #64	; 0x40
 800387c:	d108      	bne.n	8003890 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	60da      	str	r2, [r3, #12]
}
 800388e:	e007      	b.n	80038a0 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	60da      	str	r2, [r3, #12]
}
 80038a0:	bf00      	nop
 80038a2:	371c      	adds	r7, #28
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	58025408 	.word	0x58025408
 80038b0:	5802541c 	.word	0x5802541c
 80038b4:	58025430 	.word	0x58025430
 80038b8:	58025444 	.word	0x58025444
 80038bc:	58025458 	.word	0x58025458
 80038c0:	5802546c 	.word	0x5802546c
 80038c4:	58025480 	.word	0x58025480
 80038c8:	58025494 	.word	0x58025494

080038cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a42      	ldr	r2, [pc, #264]	; (80039e4 <DMA_CalcBaseAndBitshift+0x118>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d04a      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a41      	ldr	r2, [pc, #260]	; (80039e8 <DMA_CalcBaseAndBitshift+0x11c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d045      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a3f      	ldr	r2, [pc, #252]	; (80039ec <DMA_CalcBaseAndBitshift+0x120>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d040      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a3e      	ldr	r2, [pc, #248]	; (80039f0 <DMA_CalcBaseAndBitshift+0x124>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d03b      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a3c      	ldr	r2, [pc, #240]	; (80039f4 <DMA_CalcBaseAndBitshift+0x128>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d036      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a3b      	ldr	r2, [pc, #236]	; (80039f8 <DMA_CalcBaseAndBitshift+0x12c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d031      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a39      	ldr	r2, [pc, #228]	; (80039fc <DMA_CalcBaseAndBitshift+0x130>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d02c      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a38      	ldr	r2, [pc, #224]	; (8003a00 <DMA_CalcBaseAndBitshift+0x134>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d027      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a36      	ldr	r2, [pc, #216]	; (8003a04 <DMA_CalcBaseAndBitshift+0x138>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d022      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a35      	ldr	r2, [pc, #212]	; (8003a08 <DMA_CalcBaseAndBitshift+0x13c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d01d      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a33      	ldr	r2, [pc, #204]	; (8003a0c <DMA_CalcBaseAndBitshift+0x140>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d018      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a32      	ldr	r2, [pc, #200]	; (8003a10 <DMA_CalcBaseAndBitshift+0x144>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d013      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a30      	ldr	r2, [pc, #192]	; (8003a14 <DMA_CalcBaseAndBitshift+0x148>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00e      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a2f      	ldr	r2, [pc, #188]	; (8003a18 <DMA_CalcBaseAndBitshift+0x14c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d009      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a2d      	ldr	r2, [pc, #180]	; (8003a1c <DMA_CalcBaseAndBitshift+0x150>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d004      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a2c      	ldr	r2, [pc, #176]	; (8003a20 <DMA_CalcBaseAndBitshift+0x154>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d101      	bne.n	8003978 <DMA_CalcBaseAndBitshift+0xac>
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <DMA_CalcBaseAndBitshift+0xae>
 8003978:	2300      	movs	r3, #0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d024      	beq.n	80039c8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	b2db      	uxtb	r3, r3
 8003984:	3b10      	subs	r3, #16
 8003986:	4a27      	ldr	r2, [pc, #156]	; (8003a24 <DMA_CalcBaseAndBitshift+0x158>)
 8003988:	fba2 2303 	umull	r2, r3, r2, r3
 800398c:	091b      	lsrs	r3, r3, #4
 800398e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	4a24      	ldr	r2, [pc, #144]	; (8003a28 <DMA_CalcBaseAndBitshift+0x15c>)
 8003998:	5cd3      	ldrb	r3, [r2, r3]
 800399a:	461a      	mov	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2b03      	cmp	r3, #3
 80039a4:	d908      	bls.n	80039b8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	4b1f      	ldr	r3, [pc, #124]	; (8003a2c <DMA_CalcBaseAndBitshift+0x160>)
 80039ae:	4013      	ands	r3, r2
 80039b0:	1d1a      	adds	r2, r3, #4
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	659a      	str	r2, [r3, #88]	; 0x58
 80039b6:	e00d      	b.n	80039d4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	461a      	mov	r2, r3
 80039be:	4b1b      	ldr	r3, [pc, #108]	; (8003a2c <DMA_CalcBaseAndBitshift+0x160>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6593      	str	r3, [r2, #88]	; 0x58
 80039c6:	e005      	b.n	80039d4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	40020010 	.word	0x40020010
 80039e8:	40020028 	.word	0x40020028
 80039ec:	40020040 	.word	0x40020040
 80039f0:	40020058 	.word	0x40020058
 80039f4:	40020070 	.word	0x40020070
 80039f8:	40020088 	.word	0x40020088
 80039fc:	400200a0 	.word	0x400200a0
 8003a00:	400200b8 	.word	0x400200b8
 8003a04:	40020410 	.word	0x40020410
 8003a08:	40020428 	.word	0x40020428
 8003a0c:	40020440 	.word	0x40020440
 8003a10:	40020458 	.word	0x40020458
 8003a14:	40020470 	.word	0x40020470
 8003a18:	40020488 	.word	0x40020488
 8003a1c:	400204a0 	.word	0x400204a0
 8003a20:	400204b8 	.word	0x400204b8
 8003a24:	aaaaaaab 	.word	0xaaaaaaab
 8003a28:	0800c9ec 	.word	0x0800c9ec
 8003a2c:	fffffc00 	.word	0xfffffc00

08003a30 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d120      	bne.n	8003a86 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d858      	bhi.n	8003afe <DMA_CheckFifoParam+0xce>
 8003a4c:	a201      	add	r2, pc, #4	; (adr r2, 8003a54 <DMA_CheckFifoParam+0x24>)
 8003a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a52:	bf00      	nop
 8003a54:	08003a65 	.word	0x08003a65
 8003a58:	08003a77 	.word	0x08003a77
 8003a5c:	08003a65 	.word	0x08003a65
 8003a60:	08003aff 	.word	0x08003aff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d048      	beq.n	8003b02 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a74:	e045      	b.n	8003b02 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a7e:	d142      	bne.n	8003b06 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a84:	e03f      	b.n	8003b06 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a8e:	d123      	bne.n	8003ad8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d838      	bhi.n	8003b0a <DMA_CheckFifoParam+0xda>
 8003a98:	a201      	add	r2, pc, #4	; (adr r2, 8003aa0 <DMA_CheckFifoParam+0x70>)
 8003a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9e:	bf00      	nop
 8003aa0:	08003ab1 	.word	0x08003ab1
 8003aa4:	08003ab7 	.word	0x08003ab7
 8003aa8:	08003ab1 	.word	0x08003ab1
 8003aac:	08003ac9 	.word	0x08003ac9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	73fb      	strb	r3, [r7, #15]
        break;
 8003ab4:	e030      	b.n	8003b18 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d025      	beq.n	8003b0e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ac6:	e022      	b.n	8003b0e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003acc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ad0:	d11f      	bne.n	8003b12 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ad6:	e01c      	b.n	8003b12 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d902      	bls.n	8003ae6 <DMA_CheckFifoParam+0xb6>
 8003ae0:	2b03      	cmp	r3, #3
 8003ae2:	d003      	beq.n	8003aec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003ae4:	e018      	b.n	8003b18 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	73fb      	strb	r3, [r7, #15]
        break;
 8003aea:	e015      	b.n	8003b18 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00e      	beq.n	8003b16 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	73fb      	strb	r3, [r7, #15]
    break;
 8003afc:	e00b      	b.n	8003b16 <DMA_CheckFifoParam+0xe6>
        break;
 8003afe:	bf00      	nop
 8003b00:	e00a      	b.n	8003b18 <DMA_CheckFifoParam+0xe8>
        break;
 8003b02:	bf00      	nop
 8003b04:	e008      	b.n	8003b18 <DMA_CheckFifoParam+0xe8>
        break;
 8003b06:	bf00      	nop
 8003b08:	e006      	b.n	8003b18 <DMA_CheckFifoParam+0xe8>
        break;
 8003b0a:	bf00      	nop
 8003b0c:	e004      	b.n	8003b18 <DMA_CheckFifoParam+0xe8>
        break;
 8003b0e:	bf00      	nop
 8003b10:	e002      	b.n	8003b18 <DMA_CheckFifoParam+0xe8>
        break;
 8003b12:	bf00      	nop
 8003b14:	e000      	b.n	8003b18 <DMA_CheckFifoParam+0xe8>
    break;
 8003b16:	bf00      	nop
    }
  }

  return status;
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop

08003b28 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a38      	ldr	r2, [pc, #224]	; (8003c1c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d022      	beq.n	8003b86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a36      	ldr	r2, [pc, #216]	; (8003c20 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d01d      	beq.n	8003b86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a35      	ldr	r2, [pc, #212]	; (8003c24 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d018      	beq.n	8003b86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a33      	ldr	r2, [pc, #204]	; (8003c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d013      	beq.n	8003b86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a32      	ldr	r2, [pc, #200]	; (8003c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00e      	beq.n	8003b86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a30      	ldr	r2, [pc, #192]	; (8003c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d009      	beq.n	8003b86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a2f      	ldr	r2, [pc, #188]	; (8003c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d004      	beq.n	8003b86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a2d      	ldr	r2, [pc, #180]	; (8003c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d101      	bne.n	8003b8a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d01a      	beq.n	8003bc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	3b08      	subs	r3, #8
 8003b98:	4a28      	ldr	r2, [pc, #160]	; (8003c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	091b      	lsrs	r3, r3, #4
 8003ba0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	4b26      	ldr	r3, [pc, #152]	; (8003c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	461a      	mov	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a24      	ldr	r2, [pc, #144]	; (8003c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003bb4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f003 031f 	and.w	r3, r3, #31
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	409a      	lsls	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003bc4:	e024      	b.n	8003c10 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	3b10      	subs	r3, #16
 8003bce:	4a1e      	ldr	r2, [pc, #120]	; (8003c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd4:	091b      	lsrs	r3, r3, #4
 8003bd6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	4a1c      	ldr	r2, [pc, #112]	; (8003c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d806      	bhi.n	8003bee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4a1b      	ldr	r2, [pc, #108]	; (8003c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d902      	bls.n	8003bee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	3308      	adds	r3, #8
 8003bec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4b18      	ldr	r3, [pc, #96]	; (8003c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003bf2:	4413      	add	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a16      	ldr	r2, [pc, #88]	; (8003c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003c00:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f003 031f 	and.w	r3, r3, #31
 8003c08:	2201      	movs	r2, #1
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003c10:	bf00      	nop
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	58025408 	.word	0x58025408
 8003c20:	5802541c 	.word	0x5802541c
 8003c24:	58025430 	.word	0x58025430
 8003c28:	58025444 	.word	0x58025444
 8003c2c:	58025458 	.word	0x58025458
 8003c30:	5802546c 	.word	0x5802546c
 8003c34:	58025480 	.word	0x58025480
 8003c38:	58025494 	.word	0x58025494
 8003c3c:	cccccccd 	.word	0xcccccccd
 8003c40:	16009600 	.word	0x16009600
 8003c44:	58025880 	.word	0x58025880
 8003c48:	aaaaaaab 	.word	0xaaaaaaab
 8003c4c:	400204b8 	.word	0x400204b8
 8003c50:	4002040f 	.word	0x4002040f
 8003c54:	10008200 	.word	0x10008200
 8003c58:	40020880 	.word	0x40020880

08003c5c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d04a      	beq.n	8003d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d847      	bhi.n	8003d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a25      	ldr	r2, [pc, #148]	; (8003d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d022      	beq.n	8003cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a24      	ldr	r2, [pc, #144]	; (8003d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d01d      	beq.n	8003cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a22      	ldr	r2, [pc, #136]	; (8003d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d018      	beq.n	8003cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a21      	ldr	r2, [pc, #132]	; (8003d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d013      	beq.n	8003cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a1f      	ldr	r2, [pc, #124]	; (8003d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d00e      	beq.n	8003cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a1e      	ldr	r2, [pc, #120]	; (8003d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d009      	beq.n	8003cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1c      	ldr	r2, [pc, #112]	; (8003d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d004      	beq.n	8003cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a1b      	ldr	r2, [pc, #108]	; (8003d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d101      	bne.n	8003ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e000      	b.n	8003cce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4b17      	ldr	r3, [pc, #92]	; (8003d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003cd6:	4413      	add	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	461a      	mov	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a15      	ldr	r2, [pc, #84]	; (8003d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003ce4:	671a      	str	r2, [r3, #112]	; 0x70
 8003ce6:	e009      	b.n	8003cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	4b14      	ldr	r3, [pc, #80]	; (8003d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003cec:	4413      	add	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a11      	ldr	r2, [pc, #68]	; (8003d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003cfa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	2201      	movs	r2, #1
 8003d02:	409a      	lsls	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003d08:	bf00      	nop
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	58025408 	.word	0x58025408
 8003d18:	5802541c 	.word	0x5802541c
 8003d1c:	58025430 	.word	0x58025430
 8003d20:	58025444 	.word	0x58025444
 8003d24:	58025458 	.word	0x58025458
 8003d28:	5802546c 	.word	0x5802546c
 8003d2c:	58025480 	.word	0x58025480
 8003d30:	58025494 	.word	0x58025494
 8003d34:	1600963f 	.word	0x1600963f
 8003d38:	58025940 	.word	0x58025940
 8003d3c:	1000823f 	.word	0x1000823f
 8003d40:	40020940 	.word	0x40020940

08003d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b089      	sub	sp, #36	; 0x24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003d52:	4b89      	ldr	r3, [pc, #548]	; (8003f78 <HAL_GPIO_Init+0x234>)
 8003d54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d56:	e194      	b.n	8004082 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	fa01 f303 	lsl.w	r3, r1, r3
 8003d64:	4013      	ands	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 8186 	beq.w	800407c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d00b      	beq.n	8003d90 <HAL_GPIO_Init+0x4c>
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d007      	beq.n	8003d90 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d84:	2b11      	cmp	r3, #17
 8003d86:	d003      	beq.n	8003d90 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b12      	cmp	r3, #18
 8003d8e:	d130      	bne.n	8003df2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	2203      	movs	r2, #3
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4013      	ands	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	68da      	ldr	r2, [r3, #12]
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	43db      	mvns	r3, r3
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	091b      	lsrs	r3, r3, #4
 8003ddc:	f003 0201 	and.w	r2, r3, #1
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	2203      	movs	r2, #3
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43db      	mvns	r3, r3
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	4013      	ands	r3, r2
 8003e08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d003      	beq.n	8003e32 <HAL_GPIO_Init+0xee>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b12      	cmp	r3, #18
 8003e30:	d123      	bne.n	8003e7a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	08da      	lsrs	r2, r3, #3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3208      	adds	r2, #8
 8003e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	220f      	movs	r2, #15
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	4013      	ands	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	691a      	ldr	r2, [r3, #16]
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	08da      	lsrs	r2, r3, #3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3208      	adds	r2, #8
 8003e74:	69b9      	ldr	r1, [r7, #24]
 8003e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	2203      	movs	r2, #3
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 0203 	and.w	r2, r3, #3
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 80e0 	beq.w	800407c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ebc:	4b2f      	ldr	r3, [pc, #188]	; (8003f7c <HAL_GPIO_Init+0x238>)
 8003ebe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ec2:	4a2e      	ldr	r2, [pc, #184]	; (8003f7c <HAL_GPIO_Init+0x238>)
 8003ec4:	f043 0302 	orr.w	r3, r3, #2
 8003ec8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003ecc:	4b2b      	ldr	r3, [pc, #172]	; (8003f7c <HAL_GPIO_Init+0x238>)
 8003ece:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003eda:	4a29      	ldr	r2, [pc, #164]	; (8003f80 <HAL_GPIO_Init+0x23c>)
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	089b      	lsrs	r3, r3, #2
 8003ee0:	3302      	adds	r3, #2
 8003ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	220f      	movs	r2, #15
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4013      	ands	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a20      	ldr	r2, [pc, #128]	; (8003f84 <HAL_GPIO_Init+0x240>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d052      	beq.n	8003fac <HAL_GPIO_Init+0x268>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a1f      	ldr	r2, [pc, #124]	; (8003f88 <HAL_GPIO_Init+0x244>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d031      	beq.n	8003f72 <HAL_GPIO_Init+0x22e>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a1e      	ldr	r2, [pc, #120]	; (8003f8c <HAL_GPIO_Init+0x248>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d02b      	beq.n	8003f6e <HAL_GPIO_Init+0x22a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a1d      	ldr	r2, [pc, #116]	; (8003f90 <HAL_GPIO_Init+0x24c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d025      	beq.n	8003f6a <HAL_GPIO_Init+0x226>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a1c      	ldr	r2, [pc, #112]	; (8003f94 <HAL_GPIO_Init+0x250>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d01f      	beq.n	8003f66 <HAL_GPIO_Init+0x222>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a1b      	ldr	r2, [pc, #108]	; (8003f98 <HAL_GPIO_Init+0x254>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d019      	beq.n	8003f62 <HAL_GPIO_Init+0x21e>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a1a      	ldr	r2, [pc, #104]	; (8003f9c <HAL_GPIO_Init+0x258>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d013      	beq.n	8003f5e <HAL_GPIO_Init+0x21a>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a19      	ldr	r2, [pc, #100]	; (8003fa0 <HAL_GPIO_Init+0x25c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d00d      	beq.n	8003f5a <HAL_GPIO_Init+0x216>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a18      	ldr	r2, [pc, #96]	; (8003fa4 <HAL_GPIO_Init+0x260>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d007      	beq.n	8003f56 <HAL_GPIO_Init+0x212>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a17      	ldr	r2, [pc, #92]	; (8003fa8 <HAL_GPIO_Init+0x264>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d101      	bne.n	8003f52 <HAL_GPIO_Init+0x20e>
 8003f4e:	2309      	movs	r3, #9
 8003f50:	e02d      	b.n	8003fae <HAL_GPIO_Init+0x26a>
 8003f52:	230a      	movs	r3, #10
 8003f54:	e02b      	b.n	8003fae <HAL_GPIO_Init+0x26a>
 8003f56:	2308      	movs	r3, #8
 8003f58:	e029      	b.n	8003fae <HAL_GPIO_Init+0x26a>
 8003f5a:	2307      	movs	r3, #7
 8003f5c:	e027      	b.n	8003fae <HAL_GPIO_Init+0x26a>
 8003f5e:	2306      	movs	r3, #6
 8003f60:	e025      	b.n	8003fae <HAL_GPIO_Init+0x26a>
 8003f62:	2305      	movs	r3, #5
 8003f64:	e023      	b.n	8003fae <HAL_GPIO_Init+0x26a>
 8003f66:	2304      	movs	r3, #4
 8003f68:	e021      	b.n	8003fae <HAL_GPIO_Init+0x26a>
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e01f      	b.n	8003fae <HAL_GPIO_Init+0x26a>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e01d      	b.n	8003fae <HAL_GPIO_Init+0x26a>
 8003f72:	2301      	movs	r3, #1
 8003f74:	e01b      	b.n	8003fae <HAL_GPIO_Init+0x26a>
 8003f76:	bf00      	nop
 8003f78:	58000080 	.word	0x58000080
 8003f7c:	58024400 	.word	0x58024400
 8003f80:	58000400 	.word	0x58000400
 8003f84:	58020000 	.word	0x58020000
 8003f88:	58020400 	.word	0x58020400
 8003f8c:	58020800 	.word	0x58020800
 8003f90:	58020c00 	.word	0x58020c00
 8003f94:	58021000 	.word	0x58021000
 8003f98:	58021400 	.word	0x58021400
 8003f9c:	58021800 	.word	0x58021800
 8003fa0:	58021c00 	.word	0x58021c00
 8003fa4:	58022000 	.word	0x58022000
 8003fa8:	58022400 	.word	0x58022400
 8003fac:	2300      	movs	r3, #0
 8003fae:	69fa      	ldr	r2, [r7, #28]
 8003fb0:	f002 0203 	and.w	r2, r2, #3
 8003fb4:	0092      	lsls	r2, r2, #2
 8003fb6:	4093      	lsls	r3, r2
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fbe:	4938      	ldr	r1, [pc, #224]	; (80040a0 <HAL_GPIO_Init+0x35c>)
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	089b      	lsrs	r3, r3, #2
 8003fc4:	3302      	adds	r3, #2
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	43db      	mvns	r3, r3
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	4013      	ands	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	43db      	mvns	r3, r3
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	4013      	ands	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	4313      	orrs	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004046:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800404e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	43db      	mvns	r3, r3
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	4013      	ands	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004074:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	3301      	adds	r3, #1
 8004080:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	fa22 f303 	lsr.w	r3, r2, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	f47f ae63 	bne.w	8003d58 <HAL_GPIO_Init+0x14>
  }
}
 8004092:	bf00      	nop
 8004094:	3724      	adds	r7, #36	; 0x24
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	58000400 	.word	0x58000400

080040a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	460b      	mov	r3, r1
 80040ae:	807b      	strh	r3, [r7, #2]
 80040b0:	4613      	mov	r3, r2
 80040b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040b4:	787b      	ldrb	r3, [r7, #1]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040ba:	887a      	ldrh	r2, [r7, #2]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80040c0:	e003      	b.n	80040ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80040c2:	887b      	ldrh	r3, [r7, #2]
 80040c4:	041a      	lsls	r2, r3, #16
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	619a      	str	r2, [r3, #24]
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
	...

080040d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80040e0:	4b19      	ldr	r3, [pc, #100]	; (8004148 <HAL_PWREx_ConfigSupply+0x70>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d00a      	beq.n	8004102 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80040ec:	4b16      	ldr	r3, [pc, #88]	; (8004148 <HAL_PWREx_ConfigSupply+0x70>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d001      	beq.n	80040fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e01f      	b.n	800413e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	e01d      	b.n	800413e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004102:	4b11      	ldr	r3, [pc, #68]	; (8004148 <HAL_PWREx_ConfigSupply+0x70>)
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f023 0207 	bic.w	r2, r3, #7
 800410a:	490f      	ldr	r1, [pc, #60]	; (8004148 <HAL_PWREx_ConfigSupply+0x70>)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4313      	orrs	r3, r2
 8004110:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004112:	f7fd f9a5 	bl	8001460 <HAL_GetTick>
 8004116:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004118:	e009      	b.n	800412e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800411a:	f7fd f9a1 	bl	8001460 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004128:	d901      	bls.n	800412e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e007      	b.n	800413e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800412e:	4b06      	ldr	r3, [pc, #24]	; (8004148 <HAL_PWREx_ConfigSupply+0x70>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800413a:	d1ee      	bne.n	800411a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	58024800 	.word	0x58024800

0800414c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b08c      	sub	sp, #48	; 0x30
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e3ff      	b.n	800495e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 8087 	beq.w	800427a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800416c:	4b99      	ldr	r3, [pc, #612]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004174:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004176:	4b97      	ldr	r3, [pc, #604]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 8004178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800417c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417e:	2b10      	cmp	r3, #16
 8004180:	d007      	beq.n	8004192 <HAL_RCC_OscConfig+0x46>
 8004182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004184:	2b18      	cmp	r3, #24
 8004186:	d110      	bne.n	80041aa <HAL_RCC_OscConfig+0x5e>
 8004188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d10b      	bne.n	80041aa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004192:	4b90      	ldr	r3, [pc, #576]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d06c      	beq.n	8004278 <HAL_RCC_OscConfig+0x12c>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d168      	bne.n	8004278 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e3d9      	b.n	800495e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b2:	d106      	bne.n	80041c2 <HAL_RCC_OscConfig+0x76>
 80041b4:	4b87      	ldr	r3, [pc, #540]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a86      	ldr	r2, [pc, #536]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 80041ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	e02e      	b.n	8004220 <HAL_RCC_OscConfig+0xd4>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10c      	bne.n	80041e4 <HAL_RCC_OscConfig+0x98>
 80041ca:	4b82      	ldr	r3, [pc, #520]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a81      	ldr	r2, [pc, #516]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 80041d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	4b7f      	ldr	r3, [pc, #508]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a7e      	ldr	r2, [pc, #504]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 80041dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041e0:	6013      	str	r3, [r2, #0]
 80041e2:	e01d      	b.n	8004220 <HAL_RCC_OscConfig+0xd4>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041ec:	d10c      	bne.n	8004208 <HAL_RCC_OscConfig+0xbc>
 80041ee:	4b79      	ldr	r3, [pc, #484]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a78      	ldr	r2, [pc, #480]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 80041f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	4b76      	ldr	r3, [pc, #472]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a75      	ldr	r2, [pc, #468]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 8004200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	e00b      	b.n	8004220 <HAL_RCC_OscConfig+0xd4>
 8004208:	4b72      	ldr	r3, [pc, #456]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a71      	ldr	r2, [pc, #452]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 800420e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004212:	6013      	str	r3, [r2, #0]
 8004214:	4b6f      	ldr	r3, [pc, #444]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a6e      	ldr	r2, [pc, #440]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 800421a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800421e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d013      	beq.n	8004250 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004228:	f7fd f91a 	bl	8001460 <HAL_GetTick>
 800422c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004230:	f7fd f916 	bl	8001460 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b64      	cmp	r3, #100	; 0x64
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e38d      	b.n	800495e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004242:	4b64      	ldr	r3, [pc, #400]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0f0      	beq.n	8004230 <HAL_RCC_OscConfig+0xe4>
 800424e:	e014      	b.n	800427a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004250:	f7fd f906 	bl	8001460 <HAL_GetTick>
 8004254:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004258:	f7fd f902 	bl	8001460 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b64      	cmp	r3, #100	; 0x64
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e379      	b.n	800495e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800426a:	4b5a      	ldr	r3, [pc, #360]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f0      	bne.n	8004258 <HAL_RCC_OscConfig+0x10c>
 8004276:	e000      	b.n	800427a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 80ae 	beq.w	80043e4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004288:	4b52      	ldr	r3, [pc, #328]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004290:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004292:	4b50      	ldr	r3, [pc, #320]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 8004294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004296:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d007      	beq.n	80042ae <HAL_RCC_OscConfig+0x162>
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	2b18      	cmp	r3, #24
 80042a2:	d13a      	bne.n	800431a <HAL_RCC_OscConfig+0x1ce>
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d135      	bne.n	800431a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042ae:	4b49      	ldr	r3, [pc, #292]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0304 	and.w	r3, r3, #4
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d005      	beq.n	80042c6 <HAL_RCC_OscConfig+0x17a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e34b      	b.n	800495e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c6:	f7fd f8f9 	bl	80014bc <HAL_GetREVID>
 80042ca:	4602      	mov	r2, r0
 80042cc:	f241 0303 	movw	r3, #4099	; 0x1003
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d817      	bhi.n	8004304 <HAL_RCC_OscConfig+0x1b8>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	2b40      	cmp	r3, #64	; 0x40
 80042da:	d108      	bne.n	80042ee <HAL_RCC_OscConfig+0x1a2>
 80042dc:	4b3d      	ldr	r3, [pc, #244]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80042e4:	4a3b      	ldr	r2, [pc, #236]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 80042e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ea:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042ec:	e07a      	b.n	80043e4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ee:	4b39      	ldr	r3, [pc, #228]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	031b      	lsls	r3, r3, #12
 80042fc:	4935      	ldr	r1, [pc, #212]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004302:	e06f      	b.n	80043e4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004304:	4b33      	ldr	r3, [pc, #204]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	061b      	lsls	r3, r3, #24
 8004312:	4930      	ldr	r1, [pc, #192]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 8004314:	4313      	orrs	r3, r2
 8004316:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004318:	e064      	b.n	80043e4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d045      	beq.n	80043ae <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004322:	4b2c      	ldr	r3, [pc, #176]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f023 0219 	bic.w	r2, r3, #25
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	4929      	ldr	r1, [pc, #164]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 8004330:	4313      	orrs	r3, r2
 8004332:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004334:	f7fd f894 	bl	8001460 <HAL_GetTick>
 8004338:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800433c:	f7fd f890 	bl	8001460 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e307      	b.n	800495e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800434e:	4b21      	ldr	r3, [pc, #132]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435a:	f7fd f8af 	bl	80014bc <HAL_GetREVID>
 800435e:	4602      	mov	r2, r0
 8004360:	f241 0303 	movw	r3, #4099	; 0x1003
 8004364:	429a      	cmp	r2, r3
 8004366:	d817      	bhi.n	8004398 <HAL_RCC_OscConfig+0x24c>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	2b40      	cmp	r3, #64	; 0x40
 800436e:	d108      	bne.n	8004382 <HAL_RCC_OscConfig+0x236>
 8004370:	4b18      	ldr	r3, [pc, #96]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004378:	4a16      	ldr	r2, [pc, #88]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 800437a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800437e:	6053      	str	r3, [r2, #4]
 8004380:	e030      	b.n	80043e4 <HAL_RCC_OscConfig+0x298>
 8004382:	4b14      	ldr	r3, [pc, #80]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	031b      	lsls	r3, r3, #12
 8004390:	4910      	ldr	r1, [pc, #64]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 8004392:	4313      	orrs	r3, r2
 8004394:	604b      	str	r3, [r1, #4]
 8004396:	e025      	b.n	80043e4 <HAL_RCC_OscConfig+0x298>
 8004398:	4b0e      	ldr	r3, [pc, #56]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	061b      	lsls	r3, r3, #24
 80043a6:	490b      	ldr	r1, [pc, #44]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	604b      	str	r3, [r1, #4]
 80043ac:	e01a      	b.n	80043e4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ae:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a08      	ldr	r2, [pc, #32]	; (80043d4 <HAL_RCC_OscConfig+0x288>)
 80043b4:	f023 0301 	bic.w	r3, r3, #1
 80043b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ba:	f7fd f851 	bl	8001460 <HAL_GetTick>
 80043be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80043c0:	e00a      	b.n	80043d8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043c2:	f7fd f84d 	bl	8001460 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d903      	bls.n	80043d8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e2c4      	b.n	800495e <HAL_RCC_OscConfig+0x812>
 80043d4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80043d8:	4ba4      	ldr	r3, [pc, #656]	; (800466c <HAL_RCC_OscConfig+0x520>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1ee      	bne.n	80043c2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0310 	and.w	r3, r3, #16
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 80a9 	beq.w	8004544 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043f2:	4b9e      	ldr	r3, [pc, #632]	; (800466c <HAL_RCC_OscConfig+0x520>)
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043fc:	4b9b      	ldr	r3, [pc, #620]	; (800466c <HAL_RCC_OscConfig+0x520>)
 80043fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004400:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	2b08      	cmp	r3, #8
 8004406:	d007      	beq.n	8004418 <HAL_RCC_OscConfig+0x2cc>
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	2b18      	cmp	r3, #24
 800440c:	d13a      	bne.n	8004484 <HAL_RCC_OscConfig+0x338>
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f003 0303 	and.w	r3, r3, #3
 8004414:	2b01      	cmp	r3, #1
 8004416:	d135      	bne.n	8004484 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004418:	4b94      	ldr	r3, [pc, #592]	; (800466c <HAL_RCC_OscConfig+0x520>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <HAL_RCC_OscConfig+0x2e4>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	69db      	ldr	r3, [r3, #28]
 8004428:	2b80      	cmp	r3, #128	; 0x80
 800442a:	d001      	beq.n	8004430 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e296      	b.n	800495e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004430:	f7fd f844 	bl	80014bc <HAL_GetREVID>
 8004434:	4602      	mov	r2, r0
 8004436:	f241 0303 	movw	r3, #4099	; 0x1003
 800443a:	429a      	cmp	r2, r3
 800443c:	d817      	bhi.n	800446e <HAL_RCC_OscConfig+0x322>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	2b20      	cmp	r3, #32
 8004444:	d108      	bne.n	8004458 <HAL_RCC_OscConfig+0x30c>
 8004446:	4b89      	ldr	r3, [pc, #548]	; (800466c <HAL_RCC_OscConfig+0x520>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800444e:	4a87      	ldr	r2, [pc, #540]	; (800466c <HAL_RCC_OscConfig+0x520>)
 8004450:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004454:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004456:	e075      	b.n	8004544 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004458:	4b84      	ldr	r3, [pc, #528]	; (800466c <HAL_RCC_OscConfig+0x520>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	069b      	lsls	r3, r3, #26
 8004466:	4981      	ldr	r1, [pc, #516]	; (800466c <HAL_RCC_OscConfig+0x520>)
 8004468:	4313      	orrs	r3, r2
 800446a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800446c:	e06a      	b.n	8004544 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800446e:	4b7f      	ldr	r3, [pc, #508]	; (800466c <HAL_RCC_OscConfig+0x520>)
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	061b      	lsls	r3, r3, #24
 800447c:	497b      	ldr	r1, [pc, #492]	; (800466c <HAL_RCC_OscConfig+0x520>)
 800447e:	4313      	orrs	r3, r2
 8004480:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004482:	e05f      	b.n	8004544 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d042      	beq.n	8004512 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800448c:	4b77      	ldr	r3, [pc, #476]	; (800466c <HAL_RCC_OscConfig+0x520>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a76      	ldr	r2, [pc, #472]	; (800466c <HAL_RCC_OscConfig+0x520>)
 8004492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004498:	f7fc ffe2 	bl	8001460 <HAL_GetTick>
 800449c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80044a0:	f7fc ffde 	bl	8001460 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e255      	b.n	800495e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044b2:	4b6e      	ldr	r3, [pc, #440]	; (800466c <HAL_RCC_OscConfig+0x520>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0f0      	beq.n	80044a0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044be:	f7fc fffd 	bl	80014bc <HAL_GetREVID>
 80044c2:	4602      	mov	r2, r0
 80044c4:	f241 0303 	movw	r3, #4099	; 0x1003
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d817      	bhi.n	80044fc <HAL_RCC_OscConfig+0x3b0>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	d108      	bne.n	80044e6 <HAL_RCC_OscConfig+0x39a>
 80044d4:	4b65      	ldr	r3, [pc, #404]	; (800466c <HAL_RCC_OscConfig+0x520>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80044dc:	4a63      	ldr	r2, [pc, #396]	; (800466c <HAL_RCC_OscConfig+0x520>)
 80044de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044e2:	6053      	str	r3, [r2, #4]
 80044e4:	e02e      	b.n	8004544 <HAL_RCC_OscConfig+0x3f8>
 80044e6:	4b61      	ldr	r3, [pc, #388]	; (800466c <HAL_RCC_OscConfig+0x520>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	069b      	lsls	r3, r3, #26
 80044f4:	495d      	ldr	r1, [pc, #372]	; (800466c <HAL_RCC_OscConfig+0x520>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	604b      	str	r3, [r1, #4]
 80044fa:	e023      	b.n	8004544 <HAL_RCC_OscConfig+0x3f8>
 80044fc:	4b5b      	ldr	r3, [pc, #364]	; (800466c <HAL_RCC_OscConfig+0x520>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	061b      	lsls	r3, r3, #24
 800450a:	4958      	ldr	r1, [pc, #352]	; (800466c <HAL_RCC_OscConfig+0x520>)
 800450c:	4313      	orrs	r3, r2
 800450e:	60cb      	str	r3, [r1, #12]
 8004510:	e018      	b.n	8004544 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004512:	4b56      	ldr	r3, [pc, #344]	; (800466c <HAL_RCC_OscConfig+0x520>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a55      	ldr	r2, [pc, #340]	; (800466c <HAL_RCC_OscConfig+0x520>)
 8004518:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800451c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451e:	f7fc ff9f 	bl	8001460 <HAL_GetTick>
 8004522:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004526:	f7fc ff9b 	bl	8001460 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e212      	b.n	800495e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004538:	4b4c      	ldr	r3, [pc, #304]	; (800466c <HAL_RCC_OscConfig+0x520>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1f0      	bne.n	8004526 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0308 	and.w	r3, r3, #8
 800454c:	2b00      	cmp	r3, #0
 800454e:	d036      	beq.n	80045be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d019      	beq.n	800458c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004558:	4b44      	ldr	r3, [pc, #272]	; (800466c <HAL_RCC_OscConfig+0x520>)
 800455a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800455c:	4a43      	ldr	r2, [pc, #268]	; (800466c <HAL_RCC_OscConfig+0x520>)
 800455e:	f043 0301 	orr.w	r3, r3, #1
 8004562:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004564:	f7fc ff7c 	bl	8001460 <HAL_GetTick>
 8004568:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800456c:	f7fc ff78 	bl	8001460 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e1ef      	b.n	800495e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800457e:	4b3b      	ldr	r3, [pc, #236]	; (800466c <HAL_RCC_OscConfig+0x520>)
 8004580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0f0      	beq.n	800456c <HAL_RCC_OscConfig+0x420>
 800458a:	e018      	b.n	80045be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800458c:	4b37      	ldr	r3, [pc, #220]	; (800466c <HAL_RCC_OscConfig+0x520>)
 800458e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004590:	4a36      	ldr	r2, [pc, #216]	; (800466c <HAL_RCC_OscConfig+0x520>)
 8004592:	f023 0301 	bic.w	r3, r3, #1
 8004596:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004598:	f7fc ff62 	bl	8001460 <HAL_GetTick>
 800459c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045a0:	f7fc ff5e 	bl	8001460 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e1d5      	b.n	800495e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045b2:	4b2e      	ldr	r3, [pc, #184]	; (800466c <HAL_RCC_OscConfig+0x520>)
 80045b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f0      	bne.n	80045a0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d036      	beq.n	8004638 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d019      	beq.n	8004606 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045d2:	4b26      	ldr	r3, [pc, #152]	; (800466c <HAL_RCC_OscConfig+0x520>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a25      	ldr	r2, [pc, #148]	; (800466c <HAL_RCC_OscConfig+0x520>)
 80045d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80045de:	f7fc ff3f 	bl	8001460 <HAL_GetTick>
 80045e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80045e4:	e008      	b.n	80045f8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80045e6:	f7fc ff3b 	bl	8001460 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e1b2      	b.n	800495e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80045f8:	4b1c      	ldr	r3, [pc, #112]	; (800466c <HAL_RCC_OscConfig+0x520>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0f0      	beq.n	80045e6 <HAL_RCC_OscConfig+0x49a>
 8004604:	e018      	b.n	8004638 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004606:	4b19      	ldr	r3, [pc, #100]	; (800466c <HAL_RCC_OscConfig+0x520>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a18      	ldr	r2, [pc, #96]	; (800466c <HAL_RCC_OscConfig+0x520>)
 800460c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004610:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004612:	f7fc ff25 	bl	8001460 <HAL_GetTick>
 8004616:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004618:	e008      	b.n	800462c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800461a:	f7fc ff21 	bl	8001460 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e198      	b.n	800495e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800462c:	4b0f      	ldr	r3, [pc, #60]	; (800466c <HAL_RCC_OscConfig+0x520>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1f0      	bne.n	800461a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 8085 	beq.w	8004750 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004646:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <HAL_RCC_OscConfig+0x524>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a09      	ldr	r2, [pc, #36]	; (8004670 <HAL_RCC_OscConfig+0x524>)
 800464c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004650:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004652:	f7fc ff05 	bl	8001460 <HAL_GetTick>
 8004656:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004658:	e00c      	b.n	8004674 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800465a:	f7fc ff01 	bl	8001460 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b64      	cmp	r3, #100	; 0x64
 8004666:	d905      	bls.n	8004674 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e178      	b.n	800495e <HAL_RCC_OscConfig+0x812>
 800466c:	58024400 	.word	0x58024400
 8004670:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004674:	4b96      	ldr	r3, [pc, #600]	; (80048d0 <HAL_RCC_OscConfig+0x784>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0ec      	beq.n	800465a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d106      	bne.n	8004696 <HAL_RCC_OscConfig+0x54a>
 8004688:	4b92      	ldr	r3, [pc, #584]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 800468a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468c:	4a91      	ldr	r2, [pc, #580]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 800468e:	f043 0301 	orr.w	r3, r3, #1
 8004692:	6713      	str	r3, [r2, #112]	; 0x70
 8004694:	e02d      	b.n	80046f2 <HAL_RCC_OscConfig+0x5a6>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10c      	bne.n	80046b8 <HAL_RCC_OscConfig+0x56c>
 800469e:	4b8d      	ldr	r3, [pc, #564]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 80046a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a2:	4a8c      	ldr	r2, [pc, #560]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 80046a4:	f023 0301 	bic.w	r3, r3, #1
 80046a8:	6713      	str	r3, [r2, #112]	; 0x70
 80046aa:	4b8a      	ldr	r3, [pc, #552]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 80046ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ae:	4a89      	ldr	r2, [pc, #548]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 80046b0:	f023 0304 	bic.w	r3, r3, #4
 80046b4:	6713      	str	r3, [r2, #112]	; 0x70
 80046b6:	e01c      	b.n	80046f2 <HAL_RCC_OscConfig+0x5a6>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	2b05      	cmp	r3, #5
 80046be:	d10c      	bne.n	80046da <HAL_RCC_OscConfig+0x58e>
 80046c0:	4b84      	ldr	r3, [pc, #528]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 80046c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c4:	4a83      	ldr	r2, [pc, #524]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 80046c6:	f043 0304 	orr.w	r3, r3, #4
 80046ca:	6713      	str	r3, [r2, #112]	; 0x70
 80046cc:	4b81      	ldr	r3, [pc, #516]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 80046ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d0:	4a80      	ldr	r2, [pc, #512]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 80046d2:	f043 0301 	orr.w	r3, r3, #1
 80046d6:	6713      	str	r3, [r2, #112]	; 0x70
 80046d8:	e00b      	b.n	80046f2 <HAL_RCC_OscConfig+0x5a6>
 80046da:	4b7e      	ldr	r3, [pc, #504]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 80046dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046de:	4a7d      	ldr	r2, [pc, #500]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 80046e0:	f023 0301 	bic.w	r3, r3, #1
 80046e4:	6713      	str	r3, [r2, #112]	; 0x70
 80046e6:	4b7b      	ldr	r3, [pc, #492]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	4a7a      	ldr	r2, [pc, #488]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 80046ec:	f023 0304 	bic.w	r3, r3, #4
 80046f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d015      	beq.n	8004726 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fa:	f7fc feb1 	bl	8001460 <HAL_GetTick>
 80046fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004700:	e00a      	b.n	8004718 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004702:	f7fc fead 	bl	8001460 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004710:	4293      	cmp	r3, r2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e122      	b.n	800495e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004718:	4b6e      	ldr	r3, [pc, #440]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 800471a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0ee      	beq.n	8004702 <HAL_RCC_OscConfig+0x5b6>
 8004724:	e014      	b.n	8004750 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004726:	f7fc fe9b 	bl	8001460 <HAL_GetTick>
 800472a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800472c:	e00a      	b.n	8004744 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800472e:	f7fc fe97 	bl	8001460 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	f241 3288 	movw	r2, #5000	; 0x1388
 800473c:	4293      	cmp	r3, r2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e10c      	b.n	800495e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004744:	4b63      	ldr	r3, [pc, #396]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 8004746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1ee      	bne.n	800472e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 8101 	beq.w	800495c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800475a:	4b5e      	ldr	r3, [pc, #376]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004762:	2b18      	cmp	r3, #24
 8004764:	f000 80bc 	beq.w	80048e0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	2b02      	cmp	r3, #2
 800476e:	f040 8095 	bne.w	800489c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004772:	4b58      	ldr	r3, [pc, #352]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a57      	ldr	r2, [pc, #348]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 8004778:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800477c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477e:	f7fc fe6f 	bl	8001460 <HAL_GetTick>
 8004782:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004786:	f7fc fe6b 	bl	8001460 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e0e2      	b.n	800495e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004798:	4b4e      	ldr	r3, [pc, #312]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1f0      	bne.n	8004786 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047a4:	4b4b      	ldr	r3, [pc, #300]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 80047a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047a8:	4b4b      	ldr	r3, [pc, #300]	; (80048d8 <HAL_RCC_OscConfig+0x78c>)
 80047aa:	4013      	ands	r3, r2
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80047b4:	0112      	lsls	r2, r2, #4
 80047b6:	430a      	orrs	r2, r1
 80047b8:	4946      	ldr	r1, [pc, #280]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	628b      	str	r3, [r1, #40]	; 0x28
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c2:	3b01      	subs	r3, #1
 80047c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047cc:	3b01      	subs	r3, #1
 80047ce:	025b      	lsls	r3, r3, #9
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d8:	3b01      	subs	r3, #1
 80047da:	041b      	lsls	r3, r3, #16
 80047dc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e6:	3b01      	subs	r3, #1
 80047e8:	061b      	lsls	r3, r3, #24
 80047ea:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80047ee:	4939      	ldr	r1, [pc, #228]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80047f4:	4b37      	ldr	r3, [pc, #220]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	4a36      	ldr	r2, [pc, #216]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 80047fa:	f023 0301 	bic.w	r3, r3, #1
 80047fe:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004800:	4b34      	ldr	r3, [pc, #208]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 8004802:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004804:	4b35      	ldr	r3, [pc, #212]	; (80048dc <HAL_RCC_OscConfig+0x790>)
 8004806:	4013      	ands	r3, r2
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800480c:	00d2      	lsls	r2, r2, #3
 800480e:	4931      	ldr	r1, [pc, #196]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 8004810:	4313      	orrs	r3, r2
 8004812:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004814:	4b2f      	ldr	r3, [pc, #188]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	f023 020c 	bic.w	r2, r3, #12
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004820:	492c      	ldr	r1, [pc, #176]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 8004822:	4313      	orrs	r3, r2
 8004824:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004826:	4b2b      	ldr	r3, [pc, #172]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 8004828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482a:	f023 0202 	bic.w	r2, r3, #2
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004832:	4928      	ldr	r1, [pc, #160]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 8004834:	4313      	orrs	r3, r2
 8004836:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004838:	4b26      	ldr	r3, [pc, #152]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 800483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483c:	4a25      	ldr	r2, [pc, #148]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 800483e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004842:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004844:	4b23      	ldr	r3, [pc, #140]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	4a22      	ldr	r2, [pc, #136]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 800484a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800484e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004850:	4b20      	ldr	r3, [pc, #128]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	4a1f      	ldr	r2, [pc, #124]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 8004856:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800485a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800485c:	4b1d      	ldr	r3, [pc, #116]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 800485e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004860:	4a1c      	ldr	r2, [pc, #112]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 8004862:	f043 0301 	orr.w	r3, r3, #1
 8004866:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004868:	4b1a      	ldr	r3, [pc, #104]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a19      	ldr	r2, [pc, #100]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 800486e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004874:	f7fc fdf4 	bl	8001460 <HAL_GetTick>
 8004878:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800487c:	f7fc fdf0 	bl	8001460 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e067      	b.n	800495e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800488e:	4b11      	ldr	r3, [pc, #68]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0f0      	beq.n	800487c <HAL_RCC_OscConfig+0x730>
 800489a:	e05f      	b.n	800495c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800489c:	4b0d      	ldr	r3, [pc, #52]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a0c      	ldr	r2, [pc, #48]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 80048a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a8:	f7fc fdda 	bl	8001460 <HAL_GetTick>
 80048ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048b0:	f7fc fdd6 	bl	8001460 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e04d      	b.n	800495e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048c2:	4b04      	ldr	r3, [pc, #16]	; (80048d4 <HAL_RCC_OscConfig+0x788>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0x764>
 80048ce:	e045      	b.n	800495c <HAL_RCC_OscConfig+0x810>
 80048d0:	58024800 	.word	0x58024800
 80048d4:	58024400 	.word	0x58024400
 80048d8:	fffffc0c 	.word	0xfffffc0c
 80048dc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80048e0:	4b21      	ldr	r3, [pc, #132]	; (8004968 <HAL_RCC_OscConfig+0x81c>)
 80048e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80048e6:	4b20      	ldr	r3, [pc, #128]	; (8004968 <HAL_RCC_OscConfig+0x81c>)
 80048e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ea:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d031      	beq.n	8004958 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	f003 0203 	and.w	r2, r3, #3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048fe:	429a      	cmp	r2, r3
 8004900:	d12a      	bne.n	8004958 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	091b      	lsrs	r3, r3, #4
 8004906:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800490e:	429a      	cmp	r2, r3
 8004910:	d122      	bne.n	8004958 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800491e:	429a      	cmp	r2, r3
 8004920:	d11a      	bne.n	8004958 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	0a5b      	lsrs	r3, r3, #9
 8004926:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800492e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004930:	429a      	cmp	r2, r3
 8004932:	d111      	bne.n	8004958 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	0c1b      	lsrs	r3, r3, #16
 8004938:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004940:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004942:	429a      	cmp	r2, r3
 8004944:	d108      	bne.n	8004958 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	0e1b      	lsrs	r3, r3, #24
 800494a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004952:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004954:	429a      	cmp	r2, r3
 8004956:	d001      	beq.n	800495c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e000      	b.n	800495e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3730      	adds	r7, #48	; 0x30
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	58024400 	.word	0x58024400

0800496c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e19c      	b.n	8004cba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004980:	4b8a      	ldr	r3, [pc, #552]	; (8004bac <HAL_RCC_ClockConfig+0x240>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 030f 	and.w	r3, r3, #15
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d910      	bls.n	80049b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498e:	4b87      	ldr	r3, [pc, #540]	; (8004bac <HAL_RCC_ClockConfig+0x240>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f023 020f 	bic.w	r2, r3, #15
 8004996:	4985      	ldr	r1, [pc, #532]	; (8004bac <HAL_RCC_ClockConfig+0x240>)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	4313      	orrs	r3, r2
 800499c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800499e:	4b83      	ldr	r3, [pc, #524]	; (8004bac <HAL_RCC_ClockConfig+0x240>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d001      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e184      	b.n	8004cba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d010      	beq.n	80049de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	4b7b      	ldr	r3, [pc, #492]	; (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d908      	bls.n	80049de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049cc:	4b78      	ldr	r3, [pc, #480]	; (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	4975      	ldr	r1, [pc, #468]	; (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d010      	beq.n	8004a0c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695a      	ldr	r2, [r3, #20]
 80049ee:	4b70      	ldr	r3, [pc, #448]	; (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d908      	bls.n	8004a0c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80049fa:	4b6d      	ldr	r3, [pc, #436]	; (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	496a      	ldr	r1, [pc, #424]	; (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0310 	and.w	r3, r3, #16
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d010      	beq.n	8004a3a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	699a      	ldr	r2, [r3, #24]
 8004a1c:	4b64      	ldr	r3, [pc, #400]	; (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004a1e:	69db      	ldr	r3, [r3, #28]
 8004a20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d908      	bls.n	8004a3a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a28:	4b61      	ldr	r3, [pc, #388]	; (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004a2a:	69db      	ldr	r3, [r3, #28]
 8004a2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	495e      	ldr	r1, [pc, #376]	; (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0320 	and.w	r3, r3, #32
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d010      	beq.n	8004a68 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69da      	ldr	r2, [r3, #28]
 8004a4a:	4b59      	ldr	r3, [pc, #356]	; (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d908      	bls.n	8004a68 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004a56:	4b56      	ldr	r3, [pc, #344]	; (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	4953      	ldr	r1, [pc, #332]	; (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d010      	beq.n	8004a96 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	4b4d      	ldr	r3, [pc, #308]	; (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	f003 030f 	and.w	r3, r3, #15
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d908      	bls.n	8004a96 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a84:	4b4a      	ldr	r3, [pc, #296]	; (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	f023 020f 	bic.w	r2, r3, #15
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	4947      	ldr	r1, [pc, #284]	; (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d055      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004aa2:	4b43      	ldr	r3, [pc, #268]	; (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	4940      	ldr	r1, [pc, #256]	; (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d107      	bne.n	8004acc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004abc:	4b3c      	ldr	r3, [pc, #240]	; (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d121      	bne.n	8004b0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e0f6      	b.n	8004cba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d107      	bne.n	8004ae4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ad4:	4b36      	ldr	r3, [pc, #216]	; (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d115      	bne.n	8004b0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e0ea      	b.n	8004cba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d107      	bne.n	8004afc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004aec:	4b30      	ldr	r3, [pc, #192]	; (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d109      	bne.n	8004b0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e0de      	b.n	8004cba <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004afc:	4b2c      	ldr	r3, [pc, #176]	; (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e0d6      	b.n	8004cba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b0c:	4b28      	ldr	r3, [pc, #160]	; (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	f023 0207 	bic.w	r2, r3, #7
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	4925      	ldr	r1, [pc, #148]	; (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1e:	f7fc fc9f 	bl	8001460 <HAL_GetTick>
 8004b22:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b24:	e00a      	b.n	8004b3c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b26:	f7fc fc9b 	bl	8001460 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e0be      	b.n	8004cba <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b3c:	4b1c      	ldr	r3, [pc, #112]	; (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	00db      	lsls	r3, r3, #3
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d1eb      	bne.n	8004b26 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d010      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	4b14      	ldr	r3, [pc, #80]	; (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d208      	bcs.n	8004b7c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b6a:	4b11      	ldr	r3, [pc, #68]	; (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	f023 020f 	bic.w	r2, r3, #15
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	490e      	ldr	r1, [pc, #56]	; (8004bb0 <HAL_RCC_ClockConfig+0x244>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b7c:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <HAL_RCC_ClockConfig+0x240>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 030f 	and.w	r3, r3, #15
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d214      	bcs.n	8004bb4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b8a:	4b08      	ldr	r3, [pc, #32]	; (8004bac <HAL_RCC_ClockConfig+0x240>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f023 020f 	bic.w	r2, r3, #15
 8004b92:	4906      	ldr	r1, [pc, #24]	; (8004bac <HAL_RCC_ClockConfig+0x240>)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b9a:	4b04      	ldr	r3, [pc, #16]	; (8004bac <HAL_RCC_ClockConfig+0x240>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d005      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e086      	b.n	8004cba <HAL_RCC_ClockConfig+0x34e>
 8004bac:	52002000 	.word	0x52002000
 8004bb0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d010      	beq.n	8004be2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691a      	ldr	r2, [r3, #16]
 8004bc4:	4b3f      	ldr	r3, [pc, #252]	; (8004cc4 <HAL_RCC_ClockConfig+0x358>)
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d208      	bcs.n	8004be2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004bd0:	4b3c      	ldr	r3, [pc, #240]	; (8004cc4 <HAL_RCC_ClockConfig+0x358>)
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	4939      	ldr	r1, [pc, #228]	; (8004cc4 <HAL_RCC_ClockConfig+0x358>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d010      	beq.n	8004c10 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	695a      	ldr	r2, [r3, #20]
 8004bf2:	4b34      	ldr	r3, [pc, #208]	; (8004cc4 <HAL_RCC_ClockConfig+0x358>)
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d208      	bcs.n	8004c10 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004bfe:	4b31      	ldr	r3, [pc, #196]	; (8004cc4 <HAL_RCC_ClockConfig+0x358>)
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	492e      	ldr	r1, [pc, #184]	; (8004cc4 <HAL_RCC_ClockConfig+0x358>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0310 	and.w	r3, r3, #16
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d010      	beq.n	8004c3e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	699a      	ldr	r2, [r3, #24]
 8004c20:	4b28      	ldr	r3, [pc, #160]	; (8004cc4 <HAL_RCC_ClockConfig+0x358>)
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d208      	bcs.n	8004c3e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c2c:	4b25      	ldr	r3, [pc, #148]	; (8004cc4 <HAL_RCC_ClockConfig+0x358>)
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	4922      	ldr	r1, [pc, #136]	; (8004cc4 <HAL_RCC_ClockConfig+0x358>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0320 	and.w	r3, r3, #32
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d010      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69da      	ldr	r2, [r3, #28]
 8004c4e:	4b1d      	ldr	r3, [pc, #116]	; (8004cc4 <HAL_RCC_ClockConfig+0x358>)
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d208      	bcs.n	8004c6c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004c5a:	4b1a      	ldr	r3, [pc, #104]	; (8004cc4 <HAL_RCC_ClockConfig+0x358>)
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	4917      	ldr	r1, [pc, #92]	; (8004cc4 <HAL_RCC_ClockConfig+0x358>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004c6c:	f000 f834 	bl	8004cd8 <HAL_RCC_GetSysClockFreq>
 8004c70:	4601      	mov	r1, r0
 8004c72:	4b14      	ldr	r3, [pc, #80]	; (8004cc4 <HAL_RCC_ClockConfig+0x358>)
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	0a1b      	lsrs	r3, r3, #8
 8004c78:	f003 030f 	and.w	r3, r3, #15
 8004c7c:	4a12      	ldr	r2, [pc, #72]	; (8004cc8 <HAL_RCC_ClockConfig+0x35c>)
 8004c7e:	5cd3      	ldrb	r3, [r2, r3]
 8004c80:	f003 031f 	and.w	r3, r3, #31
 8004c84:	fa21 f303 	lsr.w	r3, r1, r3
 8004c88:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c8a:	4b0e      	ldr	r3, [pc, #56]	; (8004cc4 <HAL_RCC_ClockConfig+0x358>)
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	4a0d      	ldr	r2, [pc, #52]	; (8004cc8 <HAL_RCC_ClockConfig+0x35c>)
 8004c94:	5cd3      	ldrb	r3, [r2, r3]
 8004c96:	f003 031f 	and.w	r3, r3, #31
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca0:	4a0a      	ldr	r2, [pc, #40]	; (8004ccc <HAL_RCC_ClockConfig+0x360>)
 8004ca2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ca4:	4a0a      	ldr	r2, [pc, #40]	; (8004cd0 <HAL_RCC_ClockConfig+0x364>)
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004caa:	4b0a      	ldr	r3, [pc, #40]	; (8004cd4 <HAL_RCC_ClockConfig+0x368>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fc fb8c 	bl	80013cc <HAL_InitTick>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	58024400 	.word	0x58024400
 8004cc8:	0800c9dc 	.word	0x0800c9dc
 8004ccc:	24000004 	.word	0x24000004
 8004cd0:	24000000 	.word	0x24000000
 8004cd4:	24000008 	.word	0x24000008

08004cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b089      	sub	sp, #36	; 0x24
 8004cdc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cde:	4baf      	ldr	r3, [pc, #700]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ce6:	2b18      	cmp	r3, #24
 8004ce8:	f200 814e 	bhi.w	8004f88 <HAL_RCC_GetSysClockFreq+0x2b0>
 8004cec:	a201      	add	r2, pc, #4	; (adr r2, 8004cf4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf2:	bf00      	nop
 8004cf4:	08004d59 	.word	0x08004d59
 8004cf8:	08004f89 	.word	0x08004f89
 8004cfc:	08004f89 	.word	0x08004f89
 8004d00:	08004f89 	.word	0x08004f89
 8004d04:	08004f89 	.word	0x08004f89
 8004d08:	08004f89 	.word	0x08004f89
 8004d0c:	08004f89 	.word	0x08004f89
 8004d10:	08004f89 	.word	0x08004f89
 8004d14:	08004d7f 	.word	0x08004d7f
 8004d18:	08004f89 	.word	0x08004f89
 8004d1c:	08004f89 	.word	0x08004f89
 8004d20:	08004f89 	.word	0x08004f89
 8004d24:	08004f89 	.word	0x08004f89
 8004d28:	08004f89 	.word	0x08004f89
 8004d2c:	08004f89 	.word	0x08004f89
 8004d30:	08004f89 	.word	0x08004f89
 8004d34:	08004d85 	.word	0x08004d85
 8004d38:	08004f89 	.word	0x08004f89
 8004d3c:	08004f89 	.word	0x08004f89
 8004d40:	08004f89 	.word	0x08004f89
 8004d44:	08004f89 	.word	0x08004f89
 8004d48:	08004f89 	.word	0x08004f89
 8004d4c:	08004f89 	.word	0x08004f89
 8004d50:	08004f89 	.word	0x08004f89
 8004d54:	08004d8b 	.word	0x08004d8b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d58:	4b90      	ldr	r3, [pc, #576]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0320 	and.w	r3, r3, #32
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d009      	beq.n	8004d78 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d64:	4b8d      	ldr	r3, [pc, #564]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	08db      	lsrs	r3, r3, #3
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	4a8c      	ldr	r2, [pc, #560]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004d70:	fa22 f303 	lsr.w	r3, r2, r3
 8004d74:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004d76:	e10a      	b.n	8004f8e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004d78:	4b89      	ldr	r3, [pc, #548]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004d7a:	61bb      	str	r3, [r7, #24]
    break;
 8004d7c:	e107      	b.n	8004f8e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004d7e:	4b89      	ldr	r3, [pc, #548]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004d80:	61bb      	str	r3, [r7, #24]
    break;
 8004d82:	e104      	b.n	8004f8e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004d84:	4b88      	ldr	r3, [pc, #544]	; (8004fa8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004d86:	61bb      	str	r3, [r7, #24]
    break;
 8004d88:	e101      	b.n	8004f8e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d8a:	4b84      	ldr	r3, [pc, #528]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004d94:	4b81      	ldr	r3, [pc, #516]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d98:	091b      	lsrs	r3, r3, #4
 8004d9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d9e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004da0:	4b7e      	ldr	r3, [pc, #504]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004daa:	4b7c      	ldr	r3, [pc, #496]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dae:	08db      	lsrs	r3, r3, #3
 8004db0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	fb02 f303 	mul.w	r3, r2, r3
 8004dba:	ee07 3a90 	vmov	s15, r3
 8004dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 80da 	beq.w	8004f82 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d05a      	beq.n	8004e8a <HAL_RCC_GetSysClockFreq+0x1b2>
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d302      	bcc.n	8004dde <HAL_RCC_GetSysClockFreq+0x106>
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d078      	beq.n	8004ece <HAL_RCC_GetSysClockFreq+0x1f6>
 8004ddc:	e099      	b.n	8004f12 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dde:	4b6f      	ldr	r3, [pc, #444]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0320 	and.w	r3, r3, #32
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d02d      	beq.n	8004e46 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004dea:	4b6c      	ldr	r3, [pc, #432]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	08db      	lsrs	r3, r3, #3
 8004df0:	f003 0303 	and.w	r3, r3, #3
 8004df4:	4a6a      	ldr	r2, [pc, #424]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004df6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dfa:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	ee07 3a90 	vmov	s15, r3
 8004e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e14:	4b61      	ldr	r3, [pc, #388]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e1c:	ee07 3a90 	vmov	s15, r3
 8004e20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e24:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e28:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004fac <HAL_RCC_GetSysClockFreq+0x2d4>
 8004e2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e40:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004e44:	e087      	b.n	8004f56 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	ee07 3a90 	vmov	s15, r3
 8004e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e50:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004fb0 <HAL_RCC_GetSysClockFreq+0x2d8>
 8004e54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e58:	4b50      	ldr	r3, [pc, #320]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e60:	ee07 3a90 	vmov	s15, r3
 8004e64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e68:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e6c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004fac <HAL_RCC_GetSysClockFreq+0x2d4>
 8004e70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e88:	e065      	b.n	8004f56 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	ee07 3a90 	vmov	s15, r3
 8004e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e94:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004fb4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004e98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e9c:	4b3f      	ldr	r3, [pc, #252]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea4:	ee07 3a90 	vmov	s15, r3
 8004ea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eac:	ed97 6a02 	vldr	s12, [r7, #8]
 8004eb0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004fac <HAL_RCC_GetSysClockFreq+0x2d4>
 8004eb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ebc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ec0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ec8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ecc:	e043      	b.n	8004f56 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	ee07 3a90 	vmov	s15, r3
 8004ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed8:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004fb8 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004edc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ee0:	4b2e      	ldr	r3, [pc, #184]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee8:	ee07 3a90 	vmov	s15, r3
 8004eec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ef0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ef4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004fac <HAL_RCC_GetSysClockFreq+0x2d4>
 8004ef8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004efc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f10:	e021      	b.n	8004f56 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	ee07 3a90 	vmov	s15, r3
 8004f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004fb4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004f20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f24:	4b1d      	ldr	r3, [pc, #116]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f2c:	ee07 3a90 	vmov	s15, r3
 8004f30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f34:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f38:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004fac <HAL_RCC_GetSysClockFreq+0x2d4>
 8004f3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f54:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004f56:	4b11      	ldr	r3, [pc, #68]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	0a5b      	lsrs	r3, r3, #9
 8004f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f60:	3301      	adds	r3, #1
 8004f62:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	ee07 3a90 	vmov	s15, r3
 8004f6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f7a:	ee17 3a90 	vmov	r3, s15
 8004f7e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004f80:	e005      	b.n	8004f8e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	61bb      	str	r3, [r7, #24]
    break;
 8004f86:	e002      	b.n	8004f8e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004f88:	4b06      	ldr	r3, [pc, #24]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004f8a:	61bb      	str	r3, [r7, #24]
    break;
 8004f8c:	bf00      	nop
  }

  return sysclockfreq;
 8004f8e:	69bb      	ldr	r3, [r7, #24]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3724      	adds	r7, #36	; 0x24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	58024400 	.word	0x58024400
 8004fa0:	03d09000 	.word	0x03d09000
 8004fa4:	003d0900 	.word	0x003d0900
 8004fa8:	007a1200 	.word	0x007a1200
 8004fac:	46000000 	.word	0x46000000
 8004fb0:	4c742400 	.word	0x4c742400
 8004fb4:	4a742400 	.word	0x4a742400
 8004fb8:	4af42400 	.word	0x4af42400

08004fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004fc2:	f7ff fe89 	bl	8004cd8 <HAL_RCC_GetSysClockFreq>
 8004fc6:	4601      	mov	r1, r0
 8004fc8:	4b10      	ldr	r3, [pc, #64]	; (800500c <HAL_RCC_GetHCLKFreq+0x50>)
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	0a1b      	lsrs	r3, r3, #8
 8004fce:	f003 030f 	and.w	r3, r3, #15
 8004fd2:	4a0f      	ldr	r2, [pc, #60]	; (8005010 <HAL_RCC_GetHCLKFreq+0x54>)
 8004fd4:	5cd3      	ldrb	r3, [r2, r3]
 8004fd6:	f003 031f 	and.w	r3, r3, #31
 8004fda:	fa21 f303 	lsr.w	r3, r1, r3
 8004fde:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fe0:	4b0a      	ldr	r3, [pc, #40]	; (800500c <HAL_RCC_GetHCLKFreq+0x50>)
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	f003 030f 	and.w	r3, r3, #15
 8004fe8:	4a09      	ldr	r2, [pc, #36]	; (8005010 <HAL_RCC_GetHCLKFreq+0x54>)
 8004fea:	5cd3      	ldrb	r3, [r2, r3]
 8004fec:	f003 031f 	and.w	r3, r3, #31
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff6:	4a07      	ldr	r2, [pc, #28]	; (8005014 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ff8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ffa:	4a07      	ldr	r2, [pc, #28]	; (8005018 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005000:	4b04      	ldr	r3, [pc, #16]	; (8005014 <HAL_RCC_GetHCLKFreq+0x58>)
 8005002:	681b      	ldr	r3, [r3, #0]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	58024400 	.word	0x58024400
 8005010:	0800c9dc 	.word	0x0800c9dc
 8005014:	24000004 	.word	0x24000004
 8005018:	24000000 	.word	0x24000000

0800501c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005020:	f7ff ffcc 	bl	8004fbc <HAL_RCC_GetHCLKFreq>
 8005024:	4601      	mov	r1, r0
 8005026:	4b06      	ldr	r3, [pc, #24]	; (8005040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	091b      	lsrs	r3, r3, #4
 800502c:	f003 0307 	and.w	r3, r3, #7
 8005030:	4a04      	ldr	r2, [pc, #16]	; (8005044 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005032:	5cd3      	ldrb	r3, [r2, r3]
 8005034:	f003 031f 	and.w	r3, r3, #31
 8005038:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800503c:	4618      	mov	r0, r3
 800503e:	bd80      	pop	{r7, pc}
 8005040:	58024400 	.word	0x58024400
 8005044:	0800c9dc 	.word	0x0800c9dc

08005048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800504c:	f7ff ffb6 	bl	8004fbc <HAL_RCC_GetHCLKFreq>
 8005050:	4601      	mov	r1, r0
 8005052:	4b06      	ldr	r3, [pc, #24]	; (800506c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	0a1b      	lsrs	r3, r3, #8
 8005058:	f003 0307 	and.w	r3, r3, #7
 800505c:	4a04      	ldr	r2, [pc, #16]	; (8005070 <HAL_RCC_GetPCLK2Freq+0x28>)
 800505e:	5cd3      	ldrb	r3, [r2, r3]
 8005060:	f003 031f 	and.w	r3, r3, #31
 8005064:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005068:	4618      	mov	r0, r3
 800506a:	bd80      	pop	{r7, pc}
 800506c:	58024400 	.word	0x58024400
 8005070:	0800c9dc 	.word	0x0800c9dc

08005074 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800507c:	2300      	movs	r3, #0
 800507e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005080:	2300      	movs	r3, #0
 8005082:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d03d      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005094:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005098:	d013      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800509a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800509e:	d802      	bhi.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d007      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80050a4:	e01f      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80050a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050aa:	d013      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80050ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050b0:	d01c      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x78>
 80050b2:	e018      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050b4:	4baf      	ldr	r3, [pc, #700]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b8:	4aae      	ldr	r2, [pc, #696]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80050c0:	e015      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	3304      	adds	r3, #4
 80050c6:	2102      	movs	r1, #2
 80050c8:	4618      	mov	r0, r3
 80050ca:	f001 f96f 	bl	80063ac <RCCEx_PLL2_Config>
 80050ce:	4603      	mov	r3, r0
 80050d0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80050d2:	e00c      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3324      	adds	r3, #36	; 0x24
 80050d8:	2102      	movs	r1, #2
 80050da:	4618      	mov	r0, r3
 80050dc:	f001 fa18 	bl	8006510 <RCCEx_PLL3_Config>
 80050e0:	4603      	mov	r3, r0
 80050e2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80050e4:	e003      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	75fb      	strb	r3, [r7, #23]
      break;
 80050ea:	e000      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80050ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050ee:	7dfb      	ldrb	r3, [r7, #23]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d109      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80050f4:	4b9f      	ldr	r3, [pc, #636]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005100:	499c      	ldr	r1, [pc, #624]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005102:	4313      	orrs	r3, r2
 8005104:	650b      	str	r3, [r1, #80]	; 0x50
 8005106:	e001      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005108:	7dfb      	ldrb	r3, [r7, #23]
 800510a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005114:	2b00      	cmp	r3, #0
 8005116:	d03d      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511c:	2b04      	cmp	r3, #4
 800511e:	d826      	bhi.n	800516e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8005120:	a201      	add	r2, pc, #4	; (adr r2, 8005128 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8005122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005126:	bf00      	nop
 8005128:	0800513d 	.word	0x0800513d
 800512c:	0800514b 	.word	0x0800514b
 8005130:	0800515d 	.word	0x0800515d
 8005134:	08005175 	.word	0x08005175
 8005138:	08005175 	.word	0x08005175
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800513c:	4b8d      	ldr	r3, [pc, #564]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800513e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005140:	4a8c      	ldr	r2, [pc, #560]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005142:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005146:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005148:	e015      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	3304      	adds	r3, #4
 800514e:	2100      	movs	r1, #0
 8005150:	4618      	mov	r0, r3
 8005152:	f001 f92b 	bl	80063ac <RCCEx_PLL2_Config>
 8005156:	4603      	mov	r3, r0
 8005158:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800515a:	e00c      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3324      	adds	r3, #36	; 0x24
 8005160:	2100      	movs	r1, #0
 8005162:	4618      	mov	r0, r3
 8005164:	f001 f9d4 	bl	8006510 <RCCEx_PLL3_Config>
 8005168:	4603      	mov	r3, r0
 800516a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800516c:	e003      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	75fb      	strb	r3, [r7, #23]
      break;
 8005172:	e000      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8005174:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005176:	7dfb      	ldrb	r3, [r7, #23]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d109      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800517c:	4b7d      	ldr	r3, [pc, #500]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800517e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005180:	f023 0207 	bic.w	r2, r3, #7
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005188:	497a      	ldr	r1, [pc, #488]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800518a:	4313      	orrs	r3, r2
 800518c:	650b      	str	r3, [r1, #80]	; 0x50
 800518e:	e001      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005190:	7dfb      	ldrb	r3, [r7, #23]
 8005192:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800519c:	2b00      	cmp	r3, #0
 800519e:	d03e      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a4:	2b80      	cmp	r3, #128	; 0x80
 80051a6:	d01c      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80051a8:	2b80      	cmp	r3, #128	; 0x80
 80051aa:	d804      	bhi.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d008      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80051b0:	2b40      	cmp	r3, #64	; 0x40
 80051b2:	d00d      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80051b4:	e01e      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80051b6:	2bc0      	cmp	r3, #192	; 0xc0
 80051b8:	d01f      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x186>
 80051ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051be:	d01e      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80051c0:	e018      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051c2:	4b6c      	ldr	r3, [pc, #432]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c6:	4a6b      	ldr	r2, [pc, #428]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80051ce:	e017      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3304      	adds	r3, #4
 80051d4:	2100      	movs	r1, #0
 80051d6:	4618      	mov	r0, r3
 80051d8:	f001 f8e8 	bl	80063ac <RCCEx_PLL2_Config>
 80051dc:	4603      	mov	r3, r0
 80051de:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80051e0:	e00e      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	3324      	adds	r3, #36	; 0x24
 80051e6:	2100      	movs	r1, #0
 80051e8:	4618      	mov	r0, r3
 80051ea:	f001 f991 	bl	8006510 <RCCEx_PLL3_Config>
 80051ee:	4603      	mov	r3, r0
 80051f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80051f2:	e005      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	75fb      	strb	r3, [r7, #23]
      break;
 80051f8:	e002      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80051fa:	bf00      	nop
 80051fc:	e000      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80051fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005200:	7dfb      	ldrb	r3, [r7, #23]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d109      	bne.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005206:	4b5b      	ldr	r3, [pc, #364]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800520a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005212:	4958      	ldr	r1, [pc, #352]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005214:	4313      	orrs	r3, r2
 8005216:	650b      	str	r3, [r1, #80]	; 0x50
 8005218:	e001      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800521a:	7dfb      	ldrb	r3, [r7, #23]
 800521c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005226:	2b00      	cmp	r3, #0
 8005228:	d044      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005234:	d01f      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005236:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800523a:	d805      	bhi.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00a      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005240:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005244:	d00e      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8005246:	e01f      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8005248:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800524c:	d01f      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800524e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005252:	d01e      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005254:	e018      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005256:	4b47      	ldr	r3, [pc, #284]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525a:	4a46      	ldr	r2, [pc, #280]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800525c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005260:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005262:	e017      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	3304      	adds	r3, #4
 8005268:	2100      	movs	r1, #0
 800526a:	4618      	mov	r0, r3
 800526c:	f001 f89e 	bl	80063ac <RCCEx_PLL2_Config>
 8005270:	4603      	mov	r3, r0
 8005272:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005274:	e00e      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3324      	adds	r3, #36	; 0x24
 800527a:	2100      	movs	r1, #0
 800527c:	4618      	mov	r0, r3
 800527e:	f001 f947 	bl	8006510 <RCCEx_PLL3_Config>
 8005282:	4603      	mov	r3, r0
 8005284:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005286:	e005      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	75fb      	strb	r3, [r7, #23]
      break;
 800528c:	e002      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800528e:	bf00      	nop
 8005290:	e000      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005292:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005294:	7dfb      	ldrb	r3, [r7, #23]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10a      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800529a:	4b36      	ldr	r3, [pc, #216]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800529c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80052a8:	4932      	ldr	r1, [pc, #200]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	658b      	str	r3, [r1, #88]	; 0x58
 80052ae:	e001      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b0:	7dfb      	ldrb	r3, [r7, #23]
 80052b2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d044      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80052c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052ca:	d01f      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x298>
 80052cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052d0:	d805      	bhi.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x278>
 80052d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052da:	d00e      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x286>
 80052dc:	e01f      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80052de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80052e2:	d01f      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80052e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052e8:	d01e      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80052ea:	e018      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052ec:	4b21      	ldr	r3, [pc, #132]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f0:	4a20      	ldr	r2, [pc, #128]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80052f8:	e017      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3304      	adds	r3, #4
 80052fe:	2100      	movs	r1, #0
 8005300:	4618      	mov	r0, r3
 8005302:	f001 f853 	bl	80063ac <RCCEx_PLL2_Config>
 8005306:	4603      	mov	r3, r0
 8005308:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800530a:	e00e      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3324      	adds	r3, #36	; 0x24
 8005310:	2100      	movs	r1, #0
 8005312:	4618      	mov	r0, r3
 8005314:	f001 f8fc 	bl	8006510 <RCCEx_PLL3_Config>
 8005318:	4603      	mov	r3, r0
 800531a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800531c:	e005      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	75fb      	strb	r3, [r7, #23]
      break;
 8005322:	e002      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005324:	bf00      	nop
 8005326:	e000      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005328:	bf00      	nop
    }

    if(ret == HAL_OK)
 800532a:	7dfb      	ldrb	r3, [r7, #23]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10a      	bne.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005330:	4b10      	ldr	r3, [pc, #64]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005334:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800533e:	490d      	ldr	r1, [pc, #52]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005340:	4313      	orrs	r3, r2
 8005342:	658b      	str	r3, [r1, #88]	; 0x58
 8005344:	e001      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005346:	7dfb      	ldrb	r3, [r7, #23]
 8005348:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d035      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800535a:	2b10      	cmp	r3, #16
 800535c:	d00c      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800535e:	2b10      	cmp	r3, #16
 8005360:	d802      	bhi.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8005362:	2b00      	cmp	r3, #0
 8005364:	d01b      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8005366:	e017      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005368:	2b20      	cmp	r3, #32
 800536a:	d00c      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800536c:	2b30      	cmp	r3, #48	; 0x30
 800536e:	d018      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005370:	e012      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005372:	bf00      	nop
 8005374:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005378:	4baf      	ldr	r3, [pc, #700]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800537a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537c:	4aae      	ldr	r2, [pc, #696]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800537e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005382:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005384:	e00e      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	3304      	adds	r3, #4
 800538a:	2102      	movs	r1, #2
 800538c:	4618      	mov	r0, r3
 800538e:	f001 f80d 	bl	80063ac <RCCEx_PLL2_Config>
 8005392:	4603      	mov	r3, r0
 8005394:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005396:	e005      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	75fb      	strb	r3, [r7, #23]
      break;
 800539c:	e002      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800539e:	bf00      	nop
 80053a0:	e000      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80053a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053a4:	7dfb      	ldrb	r3, [r7, #23]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d109      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80053aa:	4ba3      	ldr	r3, [pc, #652]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b6:	49a0      	ldr	r1, [pc, #640]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 80053bc:	e001      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053be:	7dfb      	ldrb	r3, [r7, #23]
 80053c0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d042      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d6:	d01f      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80053d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053dc:	d805      	bhi.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00a      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80053e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e6:	d00e      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80053e8:	e01f      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80053ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053ee:	d01f      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80053f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053f4:	d01e      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80053f6:	e018      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053f8:	4b8f      	ldr	r3, [pc, #572]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fc:	4a8e      	ldr	r2, [pc, #568]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005402:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005404:	e017      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	3304      	adds	r3, #4
 800540a:	2100      	movs	r1, #0
 800540c:	4618      	mov	r0, r3
 800540e:	f000 ffcd 	bl	80063ac <RCCEx_PLL2_Config>
 8005412:	4603      	mov	r3, r0
 8005414:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005416:	e00e      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3324      	adds	r3, #36	; 0x24
 800541c:	2100      	movs	r1, #0
 800541e:	4618      	mov	r0, r3
 8005420:	f001 f876 	bl	8006510 <RCCEx_PLL3_Config>
 8005424:	4603      	mov	r3, r0
 8005426:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005428:	e005      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	75fb      	strb	r3, [r7, #23]
      break;
 800542e:	e002      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005430:	bf00      	nop
 8005432:	e000      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005434:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005436:	7dfb      	ldrb	r3, [r7, #23]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d109      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800543c:	4b7e      	ldr	r3, [pc, #504]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800543e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005440:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005448:	497b      	ldr	r1, [pc, #492]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800544a:	4313      	orrs	r3, r2
 800544c:	650b      	str	r3, [r1, #80]	; 0x50
 800544e:	e001      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005450:	7dfb      	ldrb	r3, [r7, #23]
 8005452:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d042      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005464:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005468:	d01b      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800546a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800546e:	d805      	bhi.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005470:	2b00      	cmp	r3, #0
 8005472:	d022      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x446>
 8005474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005478:	d00a      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800547a:	e01b      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800547c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005480:	d01d      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8005482:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005486:	d01c      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8005488:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800548c:	d01b      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800548e:	e011      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3304      	adds	r3, #4
 8005494:	2101      	movs	r1, #1
 8005496:	4618      	mov	r0, r3
 8005498:	f000 ff88 	bl	80063ac <RCCEx_PLL2_Config>
 800549c:	4603      	mov	r3, r0
 800549e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80054a0:	e012      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	3324      	adds	r3, #36	; 0x24
 80054a6:	2101      	movs	r1, #1
 80054a8:	4618      	mov	r0, r3
 80054aa:	f001 f831 	bl	8006510 <RCCEx_PLL3_Config>
 80054ae:	4603      	mov	r3, r0
 80054b0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80054b2:	e009      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	75fb      	strb	r3, [r7, #23]
      break;
 80054b8:	e006      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80054ba:	bf00      	nop
 80054bc:	e004      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80054be:	bf00      	nop
 80054c0:	e002      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80054c2:	bf00      	nop
 80054c4:	e000      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80054c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054c8:	7dfb      	ldrb	r3, [r7, #23]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d109      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80054ce:	4b5a      	ldr	r3, [pc, #360]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80054d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054d2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054da:	4957      	ldr	r1, [pc, #348]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	650b      	str	r3, [r1, #80]	; 0x50
 80054e0:	e001      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e2:	7dfb      	ldrb	r3, [r7, #23]
 80054e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d044      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80054f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054fc:	d01b      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80054fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005502:	d805      	bhi.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8005504:	2b00      	cmp	r3, #0
 8005506:	d022      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005508:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800550c:	d00a      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800550e:	e01b      	b.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005514:	d01d      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005516:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800551a:	d01c      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800551c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005520:	d01b      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005522:	e011      	b.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3304      	adds	r3, #4
 8005528:	2101      	movs	r1, #1
 800552a:	4618      	mov	r0, r3
 800552c:	f000 ff3e 	bl	80063ac <RCCEx_PLL2_Config>
 8005530:	4603      	mov	r3, r0
 8005532:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005534:	e012      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	3324      	adds	r3, #36	; 0x24
 800553a:	2101      	movs	r1, #1
 800553c:	4618      	mov	r0, r3
 800553e:	f000 ffe7 	bl	8006510 <RCCEx_PLL3_Config>
 8005542:	4603      	mov	r3, r0
 8005544:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005546:	e009      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	75fb      	strb	r3, [r7, #23]
      break;
 800554c:	e006      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800554e:	bf00      	nop
 8005550:	e004      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005552:	bf00      	nop
 8005554:	e002      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005556:	bf00      	nop
 8005558:	e000      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800555a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800555c:	7dfb      	ldrb	r3, [r7, #23]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10a      	bne.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005562:	4b35      	ldr	r3, [pc, #212]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005566:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005570:	4931      	ldr	r1, [pc, #196]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005572:	4313      	orrs	r3, r2
 8005574:	658b      	str	r3, [r1, #88]	; 0x58
 8005576:	e001      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005578:	7dfb      	ldrb	r3, [r7, #23]
 800557a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d02d      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800558c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005590:	d005      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005592:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005596:	d009      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x538>
 8005598:	2b00      	cmp	r3, #0
 800559a:	d013      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800559c:	e00f      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800559e:	4b26      	ldr	r3, [pc, #152]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a2:	4a25      	ldr	r2, [pc, #148]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80055aa:	e00c      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3304      	adds	r3, #4
 80055b0:	2101      	movs	r1, #1
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fefa 	bl	80063ac <RCCEx_PLL2_Config>
 80055b8:	4603      	mov	r3, r0
 80055ba:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80055bc:	e003      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	75fb      	strb	r3, [r7, #23]
      break;
 80055c2:	e000      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80055c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055c6:	7dfb      	ldrb	r3, [r7, #23]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d109      	bne.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80055cc:	4b1a      	ldr	r3, [pc, #104]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055d8:	4917      	ldr	r1, [pc, #92]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	650b      	str	r3, [r1, #80]	; 0x50
 80055de:	e001      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e0:	7dfb      	ldrb	r3, [r7, #23]
 80055e2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d035      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f4:	2b03      	cmp	r3, #3
 80055f6:	d81b      	bhi.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80055f8:	a201      	add	r2, pc, #4	; (adr r2, 8005600 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80055fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fe:	bf00      	nop
 8005600:	0800563d 	.word	0x0800563d
 8005604:	08005611 	.word	0x08005611
 8005608:	0800561f 	.word	0x0800561f
 800560c:	0800563d 	.word	0x0800563d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005610:	4b09      	ldr	r3, [pc, #36]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005614:	4a08      	ldr	r2, [pc, #32]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800561a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800561c:	e00f      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	3304      	adds	r3, #4
 8005622:	2102      	movs	r1, #2
 8005624:	4618      	mov	r0, r3
 8005626:	f000 fec1 	bl	80063ac <RCCEx_PLL2_Config>
 800562a:	4603      	mov	r3, r0
 800562c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800562e:	e006      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	75fb      	strb	r3, [r7, #23]
      break;
 8005634:	e003      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8005636:	bf00      	nop
 8005638:	58024400 	.word	0x58024400
      break;
 800563c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800563e:	7dfb      	ldrb	r3, [r7, #23]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d109      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005644:	4bba      	ldr	r3, [pc, #744]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005648:	f023 0203 	bic.w	r2, r3, #3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005650:	49b7      	ldr	r1, [pc, #732]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005652:	4313      	orrs	r3, r2
 8005654:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005656:	e001      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005658:	7dfb      	ldrb	r3, [r7, #23]
 800565a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 8086 	beq.w	8005776 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800566a:	4bb2      	ldr	r3, [pc, #712]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4ab1      	ldr	r2, [pc, #708]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005674:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005676:	f7fb fef3 	bl	8001460 <HAL_GetTick>
 800567a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800567c:	e009      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800567e:	f7fb feef 	bl	8001460 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b64      	cmp	r3, #100	; 0x64
 800568a:	d902      	bls.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	75fb      	strb	r3, [r7, #23]
        break;
 8005690:	e005      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005692:	4ba8      	ldr	r3, [pc, #672]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569a:	2b00      	cmp	r3, #0
 800569c:	d0ef      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800569e:	7dfb      	ldrb	r3, [r7, #23]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d166      	bne.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80056a4:	4ba2      	ldr	r3, [pc, #648]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056ae:	4053      	eors	r3, r2
 80056b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d013      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056b8:	4b9d      	ldr	r3, [pc, #628]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056c0:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80056c2:	4b9b      	ldr	r3, [pc, #620]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c6:	4a9a      	ldr	r2, [pc, #616]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056cc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056ce:	4b98      	ldr	r3, [pc, #608]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d2:	4a97      	ldr	r2, [pc, #604]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056d8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80056da:	4a95      	ldr	r2, [pc, #596]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ea:	d115      	bne.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ec:	f7fb feb8 	bl	8001460 <HAL_GetTick>
 80056f0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056f2:	e00b      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056f4:	f7fb feb4 	bl	8001460 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005702:	4293      	cmp	r3, r2
 8005704:	d902      	bls.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	75fb      	strb	r3, [r7, #23]
            break;
 800570a:	e005      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800570c:	4b88      	ldr	r3, [pc, #544]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800570e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0ed      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005718:	7dfb      	ldrb	r3, [r7, #23]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d126      	bne.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005724:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005728:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800572c:	d10d      	bne.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800572e:	4b80      	ldr	r3, [pc, #512]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800573c:	0919      	lsrs	r1, r3, #4
 800573e:	4b7e      	ldr	r3, [pc, #504]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005740:	400b      	ands	r3, r1
 8005742:	497b      	ldr	r1, [pc, #492]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005744:	4313      	orrs	r3, r2
 8005746:	610b      	str	r3, [r1, #16]
 8005748:	e005      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800574a:	4b79      	ldr	r3, [pc, #484]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	4a78      	ldr	r2, [pc, #480]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005750:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005754:	6113      	str	r3, [r2, #16]
 8005756:	4b76      	ldr	r3, [pc, #472]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005758:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005764:	4972      	ldr	r1, [pc, #456]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005766:	4313      	orrs	r3, r2
 8005768:	670b      	str	r3, [r1, #112]	; 0x70
 800576a:	e004      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800576c:	7dfb      	ldrb	r3, [r7, #23]
 800576e:	75bb      	strb	r3, [r7, #22]
 8005770:	e001      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005772:	7dfb      	ldrb	r3, [r7, #23]
 8005774:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d07d      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005786:	2b28      	cmp	r3, #40	; 0x28
 8005788:	d866      	bhi.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800578a:	a201      	add	r2, pc, #4	; (adr r2, 8005790 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800578c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005790:	0800585f 	.word	0x0800585f
 8005794:	08005859 	.word	0x08005859
 8005798:	08005859 	.word	0x08005859
 800579c:	08005859 	.word	0x08005859
 80057a0:	08005859 	.word	0x08005859
 80057a4:	08005859 	.word	0x08005859
 80057a8:	08005859 	.word	0x08005859
 80057ac:	08005859 	.word	0x08005859
 80057b0:	08005835 	.word	0x08005835
 80057b4:	08005859 	.word	0x08005859
 80057b8:	08005859 	.word	0x08005859
 80057bc:	08005859 	.word	0x08005859
 80057c0:	08005859 	.word	0x08005859
 80057c4:	08005859 	.word	0x08005859
 80057c8:	08005859 	.word	0x08005859
 80057cc:	08005859 	.word	0x08005859
 80057d0:	08005847 	.word	0x08005847
 80057d4:	08005859 	.word	0x08005859
 80057d8:	08005859 	.word	0x08005859
 80057dc:	08005859 	.word	0x08005859
 80057e0:	08005859 	.word	0x08005859
 80057e4:	08005859 	.word	0x08005859
 80057e8:	08005859 	.word	0x08005859
 80057ec:	08005859 	.word	0x08005859
 80057f0:	0800585f 	.word	0x0800585f
 80057f4:	08005859 	.word	0x08005859
 80057f8:	08005859 	.word	0x08005859
 80057fc:	08005859 	.word	0x08005859
 8005800:	08005859 	.word	0x08005859
 8005804:	08005859 	.word	0x08005859
 8005808:	08005859 	.word	0x08005859
 800580c:	08005859 	.word	0x08005859
 8005810:	0800585f 	.word	0x0800585f
 8005814:	08005859 	.word	0x08005859
 8005818:	08005859 	.word	0x08005859
 800581c:	08005859 	.word	0x08005859
 8005820:	08005859 	.word	0x08005859
 8005824:	08005859 	.word	0x08005859
 8005828:	08005859 	.word	0x08005859
 800582c:	08005859 	.word	0x08005859
 8005830:	0800585f 	.word	0x0800585f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3304      	adds	r3, #4
 8005838:	2101      	movs	r1, #1
 800583a:	4618      	mov	r0, r3
 800583c:	f000 fdb6 	bl	80063ac <RCCEx_PLL2_Config>
 8005840:	4603      	mov	r3, r0
 8005842:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005844:	e00c      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	3324      	adds	r3, #36	; 0x24
 800584a:	2101      	movs	r1, #1
 800584c:	4618      	mov	r0, r3
 800584e:	f000 fe5f 	bl	8006510 <RCCEx_PLL3_Config>
 8005852:	4603      	mov	r3, r0
 8005854:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005856:	e003      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	75fb      	strb	r3, [r7, #23]
      break;
 800585c:	e000      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800585e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005860:	7dfb      	ldrb	r3, [r7, #23]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d109      	bne.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005866:	4b32      	ldr	r3, [pc, #200]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005872:	492f      	ldr	r1, [pc, #188]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005874:	4313      	orrs	r3, r2
 8005876:	654b      	str	r3, [r1, #84]	; 0x54
 8005878:	e001      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800587a:	7dfb      	ldrb	r3, [r7, #23]
 800587c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d037      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800588e:	2b05      	cmp	r3, #5
 8005890:	d820      	bhi.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8005892:	a201      	add	r2, pc, #4	; (adr r2, 8005898 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005898:	080058db 	.word	0x080058db
 800589c:	080058b1 	.word	0x080058b1
 80058a0:	080058c3 	.word	0x080058c3
 80058a4:	080058db 	.word	0x080058db
 80058a8:	080058db 	.word	0x080058db
 80058ac:	080058db 	.word	0x080058db
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	3304      	adds	r3, #4
 80058b4:	2101      	movs	r1, #1
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 fd78 	bl	80063ac <RCCEx_PLL2_Config>
 80058bc:	4603      	mov	r3, r0
 80058be:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80058c0:	e00c      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	3324      	adds	r3, #36	; 0x24
 80058c6:	2101      	movs	r1, #1
 80058c8:	4618      	mov	r0, r3
 80058ca:	f000 fe21 	bl	8006510 <RCCEx_PLL3_Config>
 80058ce:	4603      	mov	r3, r0
 80058d0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80058d2:	e003      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	75fb      	strb	r3, [r7, #23]
      break;
 80058d8:	e000      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80058da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058dc:	7dfb      	ldrb	r3, [r7, #23]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d109      	bne.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80058e2:	4b13      	ldr	r3, [pc, #76]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80058e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e6:	f023 0207 	bic.w	r2, r3, #7
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ee:	4910      	ldr	r1, [pc, #64]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	654b      	str	r3, [r1, #84]	; 0x54
 80058f4:	e001      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f6:	7dfb      	ldrb	r3, [r7, #23]
 80058f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0304 	and.w	r3, r3, #4
 8005902:	2b00      	cmp	r3, #0
 8005904:	d040      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800590c:	2b05      	cmp	r3, #5
 800590e:	d827      	bhi.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8005910:	a201      	add	r2, pc, #4	; (adr r2, 8005918 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8005912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005916:	bf00      	nop
 8005918:	08005967 	.word	0x08005967
 800591c:	0800593d 	.word	0x0800593d
 8005920:	0800594f 	.word	0x0800594f
 8005924:	08005967 	.word	0x08005967
 8005928:	08005967 	.word	0x08005967
 800592c:	08005967 	.word	0x08005967
 8005930:	58024400 	.word	0x58024400
 8005934:	58024800 	.word	0x58024800
 8005938:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	3304      	adds	r3, #4
 8005940:	2101      	movs	r1, #1
 8005942:	4618      	mov	r0, r3
 8005944:	f000 fd32 	bl	80063ac <RCCEx_PLL2_Config>
 8005948:	4603      	mov	r3, r0
 800594a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800594c:	e00c      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	3324      	adds	r3, #36	; 0x24
 8005952:	2101      	movs	r1, #1
 8005954:	4618      	mov	r0, r3
 8005956:	f000 fddb 	bl	8006510 <RCCEx_PLL3_Config>
 800595a:	4603      	mov	r3, r0
 800595c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800595e:	e003      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	75fb      	strb	r3, [r7, #23]
      break;
 8005964:	e000      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8005966:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005968:	7dfb      	ldrb	r3, [r7, #23]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10a      	bne.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800596e:	4bb2      	ldr	r3, [pc, #712]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005972:	f023 0207 	bic.w	r2, r3, #7
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800597c:	49ae      	ldr	r1, [pc, #696]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800597e:	4313      	orrs	r3, r2
 8005980:	658b      	str	r3, [r1, #88]	; 0x58
 8005982:	e001      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005984:	7dfb      	ldrb	r3, [r7, #23]
 8005986:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0320 	and.w	r3, r3, #32
 8005990:	2b00      	cmp	r3, #0
 8005992:	d044      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800599a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800599e:	d01b      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80059a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059a4:	d805      	bhi.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d022      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80059aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059ae:	d00a      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80059b0:	e01b      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x976>
 80059b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b6:	d01d      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80059b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059bc:	d01c      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80059be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059c2:	d01b      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x988>
 80059c4:	e011      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	3304      	adds	r3, #4
 80059ca:	2100      	movs	r1, #0
 80059cc:	4618      	mov	r0, r3
 80059ce:	f000 fced 	bl	80063ac <RCCEx_PLL2_Config>
 80059d2:	4603      	mov	r3, r0
 80059d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80059d6:	e012      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3324      	adds	r3, #36	; 0x24
 80059dc:	2102      	movs	r1, #2
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 fd96 	bl	8006510 <RCCEx_PLL3_Config>
 80059e4:	4603      	mov	r3, r0
 80059e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80059e8:	e009      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	75fb      	strb	r3, [r7, #23]
      break;
 80059ee:	e006      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80059f0:	bf00      	nop
 80059f2:	e004      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80059f4:	bf00      	nop
 80059f6:	e002      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80059f8:	bf00      	nop
 80059fa:	e000      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80059fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059fe:	7dfb      	ldrb	r3, [r7, #23]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10a      	bne.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a04:	4b8c      	ldr	r3, [pc, #560]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a08:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a12:	4989      	ldr	r1, [pc, #548]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	654b      	str	r3, [r1, #84]	; 0x54
 8005a18:	e001      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a1a:	7dfb      	ldrb	r3, [r7, #23]
 8005a1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d044      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a34:	d01b      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8005a36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a3a:	d805      	bhi.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d022      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a44:	d00a      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8005a46:	e01b      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a4c:	d01d      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005a4e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005a52:	d01c      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8005a54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a58:	d01b      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8005a5a:	e011      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	3304      	adds	r3, #4
 8005a60:	2100      	movs	r1, #0
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fca2 	bl	80063ac <RCCEx_PLL2_Config>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005a6c:	e012      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	3324      	adds	r3, #36	; 0x24
 8005a72:	2102      	movs	r1, #2
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 fd4b 	bl	8006510 <RCCEx_PLL3_Config>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005a7e:	e009      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	75fb      	strb	r3, [r7, #23]
      break;
 8005a84:	e006      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005a86:	bf00      	nop
 8005a88:	e004      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005a8a:	bf00      	nop
 8005a8c:	e002      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005a8e:	bf00      	nop
 8005a90:	e000      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005a92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a94:	7dfb      	ldrb	r3, [r7, #23]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10a      	bne.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a9a:	4b67      	ldr	r3, [pc, #412]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a9e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005aa8:	4963      	ldr	r1, [pc, #396]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	658b      	str	r3, [r1, #88]	; 0x58
 8005aae:	e001      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab0:	7dfb      	ldrb	r3, [r7, #23]
 8005ab2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d044      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ac6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005aca:	d01b      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8005acc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ad0:	d805      	bhi.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d022      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ada:	d00a      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005adc:	e01b      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8005ade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ae2:	d01d      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005ae4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005ae8:	d01c      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8005aea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005aee:	d01b      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005af0:	e011      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	3304      	adds	r3, #4
 8005af6:	2100      	movs	r1, #0
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 fc57 	bl	80063ac <RCCEx_PLL2_Config>
 8005afe:	4603      	mov	r3, r0
 8005b00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005b02:	e012      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	3324      	adds	r3, #36	; 0x24
 8005b08:	2102      	movs	r1, #2
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 fd00 	bl	8006510 <RCCEx_PLL3_Config>
 8005b10:	4603      	mov	r3, r0
 8005b12:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005b14:	e009      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	75fb      	strb	r3, [r7, #23]
      break;
 8005b1a:	e006      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005b1c:	bf00      	nop
 8005b1e:	e004      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005b20:	bf00      	nop
 8005b22:	e002      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005b24:	bf00      	nop
 8005b26:	e000      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005b28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b2a:	7dfb      	ldrb	r3, [r7, #23]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10a      	bne.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005b30:	4b41      	ldr	r3, [pc, #260]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b34:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b3e:	493e      	ldr	r1, [pc, #248]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	658b      	str	r3, [r1, #88]	; 0x58
 8005b44:	e001      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b46:	7dfb      	ldrb	r3, [r7, #23]
 8005b48:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0308 	and.w	r3, r3, #8
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d01a      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b60:	d10a      	bne.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	3324      	adds	r3, #36	; 0x24
 8005b66:	2102      	movs	r1, #2
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 fcd1 	bl	8006510 <RCCEx_PLL3_Config>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005b78:	4b2f      	ldr	r3, [pc, #188]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b7c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b86:	492c      	ldr	r1, [pc, #176]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0310 	and.w	r3, r3, #16
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d01a      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ba2:	d10a      	bne.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	3324      	adds	r3, #36	; 0x24
 8005ba8:	2102      	movs	r1, #2
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 fcb0 	bl	8006510 <RCCEx_PLL3_Config>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005bba:	4b1f      	ldr	r3, [pc, #124]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bc8:	491b      	ldr	r1, [pc, #108]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d032      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005be4:	d00d      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8005be6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bea:	d016      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d111      	bne.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 fbd8 	bl	80063ac <RCCEx_PLL2_Config>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005c00:	e00c      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	3324      	adds	r3, #36	; 0x24
 8005c06:	2102      	movs	r1, #2
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 fc81 	bl	8006510 <RCCEx_PLL3_Config>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005c12:	e003      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	75fb      	strb	r3, [r7, #23]
      break;
 8005c18:	e000      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8005c1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c1c:	7dfb      	ldrb	r3, [r7, #23]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10c      	bne.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c22:	4b05      	ldr	r3, [pc, #20]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005c30:	4901      	ldr	r1, [pc, #4]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	658b      	str	r3, [r1, #88]	; 0x58
 8005c36:	e003      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005c38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c3c:	7dfb      	ldrb	r3, [r7, #23]
 8005c3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d02f      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c56:	d00c      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005c58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c5c:	d015      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8005c5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c62:	d10f      	bne.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c64:	4b79      	ldr	r3, [pc, #484]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	4a78      	ldr	r2, [pc, #480]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005c70:	e00c      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	3324      	adds	r3, #36	; 0x24
 8005c76:	2101      	movs	r1, #1
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f000 fc49 	bl	8006510 <RCCEx_PLL3_Config>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005c82:	e003      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	75fb      	strb	r3, [r7, #23]
      break;
 8005c88:	e000      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8005c8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c8c:	7dfb      	ldrb	r3, [r7, #23]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10a      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c92:	4b6e      	ldr	r3, [pc, #440]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ca0:	496a      	ldr	r1, [pc, #424]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	654b      	str	r3, [r1, #84]	; 0x54
 8005ca6:	e001      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca8:	7dfb      	ldrb	r3, [r7, #23]
 8005caa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d029      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d003      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cc4:	d007      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8005cc6:	e00f      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cc8:	4b60      	ldr	r3, [pc, #384]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ccc:	4a5f      	ldr	r2, [pc, #380]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005cd4:	e00b      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	3304      	adds	r3, #4
 8005cda:	2102      	movs	r1, #2
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f000 fb65 	bl	80063ac <RCCEx_PLL2_Config>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005ce6:	e002      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	75fb      	strb	r3, [r7, #23]
      break;
 8005cec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cee:	7dfb      	ldrb	r3, [r7, #23]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d109      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005cf4:	4b55      	ldr	r3, [pc, #340]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cf8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d00:	4952      	ldr	r1, [pc, #328]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005d06:	e001      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d08:	7dfb      	ldrb	r3, [r7, #23]
 8005d0a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00a      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	3324      	adds	r3, #36	; 0x24
 8005d1c:	2102      	movs	r1, #2
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 fbf6 	bl	8006510 <RCCEx_PLL3_Config>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d02f      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d42:	d00c      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d48:	d802      	bhi.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d011      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8005d4e:	e00d      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d54:	d00f      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8005d56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d5a:	d00e      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005d5c:	e006      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d5e:	4b3b      	ldr	r3, [pc, #236]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d62:	4a3a      	ldr	r2, [pc, #232]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005d6a:	e007      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d70:	e004      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005d72:	bf00      	nop
 8005d74:	e002      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005d76:	bf00      	nop
 8005d78:	e000      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005d7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d7c:	7dfb      	ldrb	r3, [r7, #23]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d109      	bne.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d82:	4b32      	ldr	r3, [pc, #200]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d8e:	492f      	ldr	r1, [pc, #188]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	654b      	str	r3, [r1, #84]	; 0x54
 8005d94:	e001      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d96:	7dfb      	ldrb	r3, [r7, #23]
 8005d98:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d008      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005da6:	4b29      	ldr	r3, [pc, #164]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005daa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db2:	4926      	ldr	r1, [pc, #152]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d009      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005dc4:	4b21      	ldr	r3, [pc, #132]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005dd2:	491e      	ldr	r1, [pc, #120]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d008      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005de4:	4b19      	ldr	r3, [pc, #100]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005df0:	4916      	ldr	r1, [pc, #88]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00d      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e02:	4b12      	ldr	r3, [pc, #72]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	4a11      	ldr	r2, [pc, #68]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e0c:	6113      	str	r3, [r2, #16]
 8005e0e:	4b0f      	ldr	r3, [pc, #60]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e10:	691a      	ldr	r2, [r3, #16]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005e18:	490c      	ldr	r1, [pc, #48]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	da08      	bge.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005e26:	4b09      	ldr	r3, [pc, #36]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e32:	4906      	ldr	r1, [pc, #24]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005e38:	7dbb      	ldrb	r3, [r7, #22]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	e000      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3718      	adds	r7, #24
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	58024400 	.word	0x58024400

08005e50 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005e54:	f7ff f8b2 	bl	8004fbc <HAL_RCC_GetHCLKFreq>
 8005e58:	4601      	mov	r1, r0
 8005e5a:	4b06      	ldr	r3, [pc, #24]	; (8005e74 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	091b      	lsrs	r3, r3, #4
 8005e60:	f003 0307 	and.w	r3, r3, #7
 8005e64:	4a04      	ldr	r2, [pc, #16]	; (8005e78 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005e66:	5cd3      	ldrb	r3, [r2, r3]
 8005e68:	f003 031f 	and.w	r3, r3, #31
 8005e6c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	58024400 	.word	0x58024400
 8005e78:	0800c9dc 	.word	0x0800c9dc

08005e7c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b089      	sub	sp, #36	; 0x24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e84:	4b9d      	ldr	r3, [pc, #628]	; (80060fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e88:	f003 0303 	and.w	r3, r3, #3
 8005e8c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005e8e:	4b9b      	ldr	r3, [pc, #620]	; (80060fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e92:	0b1b      	lsrs	r3, r3, #12
 8005e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e98:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005e9a:	4b98      	ldr	r3, [pc, #608]	; (80060fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9e:	091b      	lsrs	r3, r3, #4
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005ea6:	4b95      	ldr	r3, [pc, #596]	; (80060fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eaa:	08db      	lsrs	r3, r3, #3
 8005eac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	fb02 f303 	mul.w	r3, r2, r3
 8005eb6:	ee07 3a90 	vmov	s15, r3
 8005eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ebe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 810a 	beq.w	80060de <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d05a      	beq.n	8005f86 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d302      	bcc.n	8005eda <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d078      	beq.n	8005fca <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8005ed8:	e099      	b.n	800600e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005eda:	4b88      	ldr	r3, [pc, #544]	; (80060fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0320 	and.w	r3, r3, #32
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d02d      	beq.n	8005f42 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ee6:	4b85      	ldr	r3, [pc, #532]	; (80060fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	08db      	lsrs	r3, r3, #3
 8005eec:	f003 0303 	and.w	r3, r3, #3
 8005ef0:	4a83      	ldr	r2, [pc, #524]	; (8006100 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef6:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	ee07 3a90 	vmov	s15, r3
 8005efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	ee07 3a90 	vmov	s15, r3
 8005f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f10:	4b7a      	ldr	r3, [pc, #488]	; (80060fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f18:	ee07 3a90 	vmov	s15, r3
 8005f1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f20:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f24:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006104 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005f28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f3c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005f40:	e087      	b.n	8006052 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	ee07 3a90 	vmov	s15, r3
 8005f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f4c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005f50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f54:	4b69      	ldr	r3, [pc, #420]	; (80060fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f5c:	ee07 3a90 	vmov	s15, r3
 8005f60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f64:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f68:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006104 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005f6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f84:	e065      	b.n	8006052 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	ee07 3a90 	vmov	s15, r3
 8005f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f90:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800610c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005f94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f98:	4b58      	ldr	r3, [pc, #352]	; (80060fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa0:	ee07 3a90 	vmov	s15, r3
 8005fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fac:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006104 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005fb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fc8:	e043      	b.n	8006052 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	ee07 3a90 	vmov	s15, r3
 8005fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006110 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005fd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fdc:	4b47      	ldr	r3, [pc, #284]	; (80060fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe4:	ee07 3a90 	vmov	s15, r3
 8005fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fec:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ff0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006104 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005ff4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ff8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ffc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006000:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006008:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800600c:	e021      	b.n	8006052 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	ee07 3a90 	vmov	s15, r3
 8006014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006018:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800610c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800601c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006020:	4b36      	ldr	r3, [pc, #216]	; (80060fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006028:	ee07 3a90 	vmov	s15, r3
 800602c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006030:	ed97 6a03 	vldr	s12, [r7, #12]
 8006034:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006104 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006038:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800603c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006040:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006044:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800604c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006050:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006052:	4b2a      	ldr	r3, [pc, #168]	; (80060fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006056:	0a5b      	lsrs	r3, r3, #9
 8006058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800605c:	ee07 3a90 	vmov	s15, r3
 8006060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006064:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006068:	ee37 7a87 	vadd.f32	s14, s15, s14
 800606c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006078:	ee17 2a90 	vmov	r2, s15
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006080:	4b1e      	ldr	r3, [pc, #120]	; (80060fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006084:	0c1b      	lsrs	r3, r3, #16
 8006086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800608a:	ee07 3a90 	vmov	s15, r3
 800608e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006092:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006096:	ee37 7a87 	vadd.f32	s14, s15, s14
 800609a:	edd7 6a07 	vldr	s13, [r7, #28]
 800609e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060a6:	ee17 2a90 	vmov	r2, s15
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80060ae:	4b13      	ldr	r3, [pc, #76]	; (80060fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80060b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b2:	0e1b      	lsrs	r3, r3, #24
 80060b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060b8:	ee07 3a90 	vmov	s15, r3
 80060bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80060cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060d4:	ee17 2a90 	vmov	r2, s15
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80060dc:	e008      	b.n	80060f0 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	609a      	str	r2, [r3, #8]
}
 80060f0:	bf00      	nop
 80060f2:	3724      	adds	r7, #36	; 0x24
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr
 80060fc:	58024400 	.word	0x58024400
 8006100:	03d09000 	.word	0x03d09000
 8006104:	46000000 	.word	0x46000000
 8006108:	4c742400 	.word	0x4c742400
 800610c:	4a742400 	.word	0x4a742400
 8006110:	4af42400 	.word	0x4af42400

08006114 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006114:	b480      	push	{r7}
 8006116:	b089      	sub	sp, #36	; 0x24
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800611c:	4b9d      	ldr	r3, [pc, #628]	; (8006394 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800611e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006120:	f003 0303 	and.w	r3, r3, #3
 8006124:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006126:	4b9b      	ldr	r3, [pc, #620]	; (8006394 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612a:	0d1b      	lsrs	r3, r3, #20
 800612c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006130:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006132:	4b98      	ldr	r3, [pc, #608]	; (8006394 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006136:	0a1b      	lsrs	r3, r3, #8
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800613e:	4b95      	ldr	r3, [pc, #596]	; (8006394 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006142:	08db      	lsrs	r3, r3, #3
 8006144:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	fb02 f303 	mul.w	r3, r2, r3
 800614e:	ee07 3a90 	vmov	s15, r3
 8006152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006156:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 810a 	beq.w	8006376 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d05a      	beq.n	800621e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8006168:	2b01      	cmp	r3, #1
 800616a:	d302      	bcc.n	8006172 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800616c:	2b02      	cmp	r3, #2
 800616e:	d078      	beq.n	8006262 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8006170:	e099      	b.n	80062a6 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006172:	4b88      	ldr	r3, [pc, #544]	; (8006394 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	2b00      	cmp	r3, #0
 800617c:	d02d      	beq.n	80061da <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800617e:	4b85      	ldr	r3, [pc, #532]	; (8006394 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	08db      	lsrs	r3, r3, #3
 8006184:	f003 0303 	and.w	r3, r3, #3
 8006188:	4a83      	ldr	r2, [pc, #524]	; (8006398 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800618a:	fa22 f303 	lsr.w	r3, r2, r3
 800618e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	ee07 3a90 	vmov	s15, r3
 8006196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	ee07 3a90 	vmov	s15, r3
 80061a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061a8:	4b7a      	ldr	r3, [pc, #488]	; (8006394 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80061aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b0:	ee07 3a90 	vmov	s15, r3
 80061b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80061bc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800639c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80061c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061d4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80061d8:	e087      	b.n	80062ea <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	ee07 3a90 	vmov	s15, r3
 80061e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061e4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80063a0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80061e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ec:	4b69      	ldr	r3, [pc, #420]	; (8006394 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80061ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061f4:	ee07 3a90 	vmov	s15, r3
 80061f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006200:	eddf 5a66 	vldr	s11, [pc, #408]	; 800639c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006204:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006208:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800620c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006210:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006218:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800621c:	e065      	b.n	80062ea <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	ee07 3a90 	vmov	s15, r3
 8006224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006228:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80063a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800622c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006230:	4b58      	ldr	r3, [pc, #352]	; (8006394 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006238:	ee07 3a90 	vmov	s15, r3
 800623c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006240:	ed97 6a03 	vldr	s12, [r7, #12]
 8006244:	eddf 5a55 	vldr	s11, [pc, #340]	; 800639c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006248:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800624c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006250:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006254:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800625c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006260:	e043      	b.n	80062ea <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	ee07 3a90 	vmov	s15, r3
 8006268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800626c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80063a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8006270:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006274:	4b47      	ldr	r3, [pc, #284]	; (8006394 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800627c:	ee07 3a90 	vmov	s15, r3
 8006280:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006284:	ed97 6a03 	vldr	s12, [r7, #12]
 8006288:	eddf 5a44 	vldr	s11, [pc, #272]	; 800639c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800628c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006290:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006294:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006298:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800629c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062a4:	e021      	b.n	80062ea <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	ee07 3a90 	vmov	s15, r3
 80062ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80063a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80062b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062b8:	4b36      	ldr	r3, [pc, #216]	; (8006394 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80062ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062c0:	ee07 3a90 	vmov	s15, r3
 80062c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80062cc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800639c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80062d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062e8:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80062ea:	4b2a      	ldr	r3, [pc, #168]	; (8006394 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80062ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ee:	0a5b      	lsrs	r3, r3, #9
 80062f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062f4:	ee07 3a90 	vmov	s15, r3
 80062f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006300:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006304:	edd7 6a07 	vldr	s13, [r7, #28]
 8006308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800630c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006310:	ee17 2a90 	vmov	r2, s15
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006318:	4b1e      	ldr	r3, [pc, #120]	; (8006394 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800631a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631c:	0c1b      	lsrs	r3, r3, #16
 800631e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006322:	ee07 3a90 	vmov	s15, r3
 8006326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800632a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800632e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006332:	edd7 6a07 	vldr	s13, [r7, #28]
 8006336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800633a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800633e:	ee17 2a90 	vmov	r2, s15
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006346:	4b13      	ldr	r3, [pc, #76]	; (8006394 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634a:	0e1b      	lsrs	r3, r3, #24
 800634c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006350:	ee07 3a90 	vmov	s15, r3
 8006354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006358:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800635c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006360:	edd7 6a07 	vldr	s13, [r7, #28]
 8006364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006368:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800636c:	ee17 2a90 	vmov	r2, s15
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006374:	e008      	b.n	8006388 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	609a      	str	r2, [r3, #8]
}
 8006388:	bf00      	nop
 800638a:	3724      	adds	r7, #36	; 0x24
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	58024400 	.word	0x58024400
 8006398:	03d09000 	.word	0x03d09000
 800639c:	46000000 	.word	0x46000000
 80063a0:	4c742400 	.word	0x4c742400
 80063a4:	4a742400 	.word	0x4a742400
 80063a8:	4af42400 	.word	0x4af42400

080063ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063b6:	2300      	movs	r3, #0
 80063b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80063ba:	4b53      	ldr	r3, [pc, #332]	; (8006508 <RCCEx_PLL2_Config+0x15c>)
 80063bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063be:	f003 0303 	and.w	r3, r3, #3
 80063c2:	2b03      	cmp	r3, #3
 80063c4:	d101      	bne.n	80063ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e099      	b.n	80064fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80063ca:	4b4f      	ldr	r3, [pc, #316]	; (8006508 <RCCEx_PLL2_Config+0x15c>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a4e      	ldr	r2, [pc, #312]	; (8006508 <RCCEx_PLL2_Config+0x15c>)
 80063d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063d6:	f7fb f843 	bl	8001460 <HAL_GetTick>
 80063da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80063dc:	e008      	b.n	80063f0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80063de:	f7fb f83f 	bl	8001460 <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d901      	bls.n	80063f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e086      	b.n	80064fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80063f0:	4b45      	ldr	r3, [pc, #276]	; (8006508 <RCCEx_PLL2_Config+0x15c>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1f0      	bne.n	80063de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80063fc:	4b42      	ldr	r3, [pc, #264]	; (8006508 <RCCEx_PLL2_Config+0x15c>)
 80063fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006400:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	031b      	lsls	r3, r3, #12
 800640a:	493f      	ldr	r1, [pc, #252]	; (8006508 <RCCEx_PLL2_Config+0x15c>)
 800640c:	4313      	orrs	r3, r2
 800640e:	628b      	str	r3, [r1, #40]	; 0x28
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	3b01      	subs	r3, #1
 8006416:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	3b01      	subs	r3, #1
 8006420:	025b      	lsls	r3, r3, #9
 8006422:	b29b      	uxth	r3, r3
 8006424:	431a      	orrs	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	3b01      	subs	r3, #1
 800642c:	041b      	lsls	r3, r3, #16
 800642e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006432:	431a      	orrs	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	3b01      	subs	r3, #1
 800643a:	061b      	lsls	r3, r3, #24
 800643c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006440:	4931      	ldr	r1, [pc, #196]	; (8006508 <RCCEx_PLL2_Config+0x15c>)
 8006442:	4313      	orrs	r3, r2
 8006444:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006446:	4b30      	ldr	r3, [pc, #192]	; (8006508 <RCCEx_PLL2_Config+0x15c>)
 8006448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	492d      	ldr	r1, [pc, #180]	; (8006508 <RCCEx_PLL2_Config+0x15c>)
 8006454:	4313      	orrs	r3, r2
 8006456:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006458:	4b2b      	ldr	r3, [pc, #172]	; (8006508 <RCCEx_PLL2_Config+0x15c>)
 800645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645c:	f023 0220 	bic.w	r2, r3, #32
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	4928      	ldr	r1, [pc, #160]	; (8006508 <RCCEx_PLL2_Config+0x15c>)
 8006466:	4313      	orrs	r3, r2
 8006468:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800646a:	4b27      	ldr	r3, [pc, #156]	; (8006508 <RCCEx_PLL2_Config+0x15c>)
 800646c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646e:	4a26      	ldr	r2, [pc, #152]	; (8006508 <RCCEx_PLL2_Config+0x15c>)
 8006470:	f023 0310 	bic.w	r3, r3, #16
 8006474:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006476:	4b24      	ldr	r3, [pc, #144]	; (8006508 <RCCEx_PLL2_Config+0x15c>)
 8006478:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800647a:	4b24      	ldr	r3, [pc, #144]	; (800650c <RCCEx_PLL2_Config+0x160>)
 800647c:	4013      	ands	r3, r2
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	69d2      	ldr	r2, [r2, #28]
 8006482:	00d2      	lsls	r2, r2, #3
 8006484:	4920      	ldr	r1, [pc, #128]	; (8006508 <RCCEx_PLL2_Config+0x15c>)
 8006486:	4313      	orrs	r3, r2
 8006488:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800648a:	4b1f      	ldr	r3, [pc, #124]	; (8006508 <RCCEx_PLL2_Config+0x15c>)
 800648c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648e:	4a1e      	ldr	r2, [pc, #120]	; (8006508 <RCCEx_PLL2_Config+0x15c>)
 8006490:	f043 0310 	orr.w	r3, r3, #16
 8006494:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d106      	bne.n	80064aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800649c:	4b1a      	ldr	r3, [pc, #104]	; (8006508 <RCCEx_PLL2_Config+0x15c>)
 800649e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a0:	4a19      	ldr	r2, [pc, #100]	; (8006508 <RCCEx_PLL2_Config+0x15c>)
 80064a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80064a8:	e00f      	b.n	80064ca <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d106      	bne.n	80064be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80064b0:	4b15      	ldr	r3, [pc, #84]	; (8006508 <RCCEx_PLL2_Config+0x15c>)
 80064b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b4:	4a14      	ldr	r2, [pc, #80]	; (8006508 <RCCEx_PLL2_Config+0x15c>)
 80064b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80064bc:	e005      	b.n	80064ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80064be:	4b12      	ldr	r3, [pc, #72]	; (8006508 <RCCEx_PLL2_Config+0x15c>)
 80064c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c2:	4a11      	ldr	r2, [pc, #68]	; (8006508 <RCCEx_PLL2_Config+0x15c>)
 80064c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80064c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80064ca:	4b0f      	ldr	r3, [pc, #60]	; (8006508 <RCCEx_PLL2_Config+0x15c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a0e      	ldr	r2, [pc, #56]	; (8006508 <RCCEx_PLL2_Config+0x15c>)
 80064d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064d6:	f7fa ffc3 	bl	8001460 <HAL_GetTick>
 80064da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80064dc:	e008      	b.n	80064f0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80064de:	f7fa ffbf 	bl	8001460 <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d901      	bls.n	80064f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e006      	b.n	80064fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80064f0:	4b05      	ldr	r3, [pc, #20]	; (8006508 <RCCEx_PLL2_Config+0x15c>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d0f0      	beq.n	80064de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	58024400 	.word	0x58024400
 800650c:	ffff0007 	.word	0xffff0007

08006510 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800651a:	2300      	movs	r3, #0
 800651c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800651e:	4b53      	ldr	r3, [pc, #332]	; (800666c <RCCEx_PLL3_Config+0x15c>)
 8006520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006522:	f003 0303 	and.w	r3, r3, #3
 8006526:	2b03      	cmp	r3, #3
 8006528:	d101      	bne.n	800652e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e099      	b.n	8006662 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800652e:	4b4f      	ldr	r3, [pc, #316]	; (800666c <RCCEx_PLL3_Config+0x15c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a4e      	ldr	r2, [pc, #312]	; (800666c <RCCEx_PLL3_Config+0x15c>)
 8006534:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006538:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800653a:	f7fa ff91 	bl	8001460 <HAL_GetTick>
 800653e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006540:	e008      	b.n	8006554 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006542:	f7fa ff8d 	bl	8001460 <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	2b02      	cmp	r3, #2
 800654e:	d901      	bls.n	8006554 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e086      	b.n	8006662 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006554:	4b45      	ldr	r3, [pc, #276]	; (800666c <RCCEx_PLL3_Config+0x15c>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1f0      	bne.n	8006542 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006560:	4b42      	ldr	r3, [pc, #264]	; (800666c <RCCEx_PLL3_Config+0x15c>)
 8006562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006564:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	051b      	lsls	r3, r3, #20
 800656e:	493f      	ldr	r1, [pc, #252]	; (800666c <RCCEx_PLL3_Config+0x15c>)
 8006570:	4313      	orrs	r3, r2
 8006572:	628b      	str	r3, [r1, #40]	; 0x28
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	3b01      	subs	r3, #1
 800657a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	3b01      	subs	r3, #1
 8006584:	025b      	lsls	r3, r3, #9
 8006586:	b29b      	uxth	r3, r3
 8006588:	431a      	orrs	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	3b01      	subs	r3, #1
 8006590:	041b      	lsls	r3, r3, #16
 8006592:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006596:	431a      	orrs	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	3b01      	subs	r3, #1
 800659e:	061b      	lsls	r3, r3, #24
 80065a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80065a4:	4931      	ldr	r1, [pc, #196]	; (800666c <RCCEx_PLL3_Config+0x15c>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80065aa:	4b30      	ldr	r3, [pc, #192]	; (800666c <RCCEx_PLL3_Config+0x15c>)
 80065ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	492d      	ldr	r1, [pc, #180]	; (800666c <RCCEx_PLL3_Config+0x15c>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80065bc:	4b2b      	ldr	r3, [pc, #172]	; (800666c <RCCEx_PLL3_Config+0x15c>)
 80065be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	4928      	ldr	r1, [pc, #160]	; (800666c <RCCEx_PLL3_Config+0x15c>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80065ce:	4b27      	ldr	r3, [pc, #156]	; (800666c <RCCEx_PLL3_Config+0x15c>)
 80065d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d2:	4a26      	ldr	r2, [pc, #152]	; (800666c <RCCEx_PLL3_Config+0x15c>)
 80065d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80065da:	4b24      	ldr	r3, [pc, #144]	; (800666c <RCCEx_PLL3_Config+0x15c>)
 80065dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065de:	4b24      	ldr	r3, [pc, #144]	; (8006670 <RCCEx_PLL3_Config+0x160>)
 80065e0:	4013      	ands	r3, r2
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	69d2      	ldr	r2, [r2, #28]
 80065e6:	00d2      	lsls	r2, r2, #3
 80065e8:	4920      	ldr	r1, [pc, #128]	; (800666c <RCCEx_PLL3_Config+0x15c>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80065ee:	4b1f      	ldr	r3, [pc, #124]	; (800666c <RCCEx_PLL3_Config+0x15c>)
 80065f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f2:	4a1e      	ldr	r2, [pc, #120]	; (800666c <RCCEx_PLL3_Config+0x15c>)
 80065f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d106      	bne.n	800660e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006600:	4b1a      	ldr	r3, [pc, #104]	; (800666c <RCCEx_PLL3_Config+0x15c>)
 8006602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006604:	4a19      	ldr	r2, [pc, #100]	; (800666c <RCCEx_PLL3_Config+0x15c>)
 8006606:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800660a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800660c:	e00f      	b.n	800662e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d106      	bne.n	8006622 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006614:	4b15      	ldr	r3, [pc, #84]	; (800666c <RCCEx_PLL3_Config+0x15c>)
 8006616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006618:	4a14      	ldr	r2, [pc, #80]	; (800666c <RCCEx_PLL3_Config+0x15c>)
 800661a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800661e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006620:	e005      	b.n	800662e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006622:	4b12      	ldr	r3, [pc, #72]	; (800666c <RCCEx_PLL3_Config+0x15c>)
 8006624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006626:	4a11      	ldr	r2, [pc, #68]	; (800666c <RCCEx_PLL3_Config+0x15c>)
 8006628:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800662c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800662e:	4b0f      	ldr	r3, [pc, #60]	; (800666c <RCCEx_PLL3_Config+0x15c>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a0e      	ldr	r2, [pc, #56]	; (800666c <RCCEx_PLL3_Config+0x15c>)
 8006634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006638:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800663a:	f7fa ff11 	bl	8001460 <HAL_GetTick>
 800663e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006640:	e008      	b.n	8006654 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006642:	f7fa ff0d 	bl	8001460 <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	2b02      	cmp	r3, #2
 800664e:	d901      	bls.n	8006654 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e006      	b.n	8006662 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006654:	4b05      	ldr	r3, [pc, #20]	; (800666c <RCCEx_PLL3_Config+0x15c>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d0f0      	beq.n	8006642 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006660:	7bfb      	ldrb	r3, [r7, #15]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	58024400 	.word	0x58024400
 8006670:	ffff0007 	.word	0xffff0007

08006674 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800667c:	2300      	movs	r3, #0
 800667e:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d101      	bne.n	800668a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e0e2      	b.n	8006850 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a70      	ldr	r2, [pc, #448]	; (8006858 <HAL_SPI_Init+0x1e4>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d00f      	beq.n	80066ba <HAL_SPI_Init+0x46>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a6f      	ldr	r2, [pc, #444]	; (800685c <HAL_SPI_Init+0x1e8>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d00a      	beq.n	80066ba <HAL_SPI_Init+0x46>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a6d      	ldr	r2, [pc, #436]	; (8006860 <HAL_SPI_Init+0x1ec>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d005      	beq.n	80066ba <HAL_SPI_Init+0x46>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	2b0f      	cmp	r3, #15
 80066b4:	d901      	bls.n	80066ba <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e0ca      	b.n	8006850 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f001 f84a 	bl	8007754 <SPI_GetPacketSize>
 80066c0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a64      	ldr	r2, [pc, #400]	; (8006858 <HAL_SPI_Init+0x1e4>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d00c      	beq.n	80066e6 <HAL_SPI_Init+0x72>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a62      	ldr	r2, [pc, #392]	; (800685c <HAL_SPI_Init+0x1e8>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d007      	beq.n	80066e6 <HAL_SPI_Init+0x72>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a61      	ldr	r2, [pc, #388]	; (8006860 <HAL_SPI_Init+0x1ec>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d002      	beq.n	80066e6 <HAL_SPI_Init+0x72>
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	2b08      	cmp	r3, #8
 80066e4:	d811      	bhi.n	800670a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80066ea:	4a5b      	ldr	r2, [pc, #364]	; (8006858 <HAL_SPI_Init+0x1e4>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d009      	beq.n	8006704 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a59      	ldr	r2, [pc, #356]	; (800685c <HAL_SPI_Init+0x1e8>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d004      	beq.n	8006704 <HAL_SPI_Init+0x90>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a58      	ldr	r2, [pc, #352]	; (8006860 <HAL_SPI_Init+0x1ec>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d104      	bne.n	800670e <HAL_SPI_Init+0x9a>
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2b10      	cmp	r3, #16
 8006708:	d901      	bls.n	800670e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e0a0      	b.n	8006850 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d106      	bne.n	8006728 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7fa fc1a 	bl	8000f5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 0201 	bic.w	r2, r2, #1
 800673e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006748:	d110      	bne.n	800676c <HAL_SPI_Init+0xf8>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006752:	d10b      	bne.n	800676c <HAL_SPI_Init+0xf8>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006758:	2b00      	cmp	r3, #0
 800675a:	d107      	bne.n	800676c <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800676a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	69da      	ldr	r2, [r3, #28]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006774:	431a      	orrs	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	431a      	orrs	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677e:	ea42 0103 	orr.w	r1, r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68da      	ldr	r2, [r3, #12]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	430a      	orrs	r2, r1
 800678c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006796:	431a      	orrs	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679c:	431a      	orrs	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	431a      	orrs	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	431a      	orrs	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	431a      	orrs	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	431a      	orrs	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	431a      	orrs	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c0:	431a      	orrs	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	431a      	orrs	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067cc:	ea42 0103 	orr.w	r1, r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	430a      	orrs	r2, r1
 80067da:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d113      	bne.n	800680c <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067f6:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800680a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f022 0201 	bic.w	r2, r2, #1
 800681a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00a      	beq.n	800683e <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	40013000 	.word	0x40013000
 800685c:	40003800 	.word	0x40003800
 8006860:	40003c00 	.word	0x40003c00

08006864 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b08e      	sub	sp, #56	; 0x38
 8006868:	af02      	add	r7, sp, #8
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
 8006870:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006872:	2300      	movs	r3, #0
 8006874:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	3320      	adds	r3, #32
 800687e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3330      	adds	r3, #48	; 0x30
 8006886:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800688e:	2b01      	cmp	r3, #1
 8006890:	d101      	bne.n	8006896 <HAL_SPI_TransmitReceive+0x32>
 8006892:	2302      	movs	r3, #2
 8006894:	e2ce      	b.n	8006e34 <HAL_SPI_TransmitReceive+0x5d0>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800689e:	f7fa fddf 	bl	8001460 <HAL_GetTick>
 80068a2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 80068a4:	887b      	ldrh	r3, [r7, #2]
 80068a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 80068a8:	887b      	ldrh	r3, [r7, #2]
 80068aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80068b2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80068ba:	7efb      	ldrb	r3, [r7, #27]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d014      	beq.n	80068ea <HAL_SPI_TransmitReceive+0x86>
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068c6:	d106      	bne.n	80068d6 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d102      	bne.n	80068d6 <HAL_SPI_TransmitReceive+0x72>
 80068d0:	7efb      	ldrb	r3, [r7, #27]
 80068d2:	2b04      	cmp	r3, #4
 80068d4:	d009      	beq.n	80068ea <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 80068d6:	2302      	movs	r3, #2
 80068d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80068e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068e8:	e2a4      	b.n	8006e34 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d005      	beq.n	80068fc <HAL_SPI_TransmitReceive+0x98>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d002      	beq.n	80068fc <HAL_SPI_TransmitReceive+0x98>
 80068f6:	887b      	ldrh	r3, [r7, #2]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d109      	bne.n	8006910 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800690a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800690e:	e291      	b.n	8006e34 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b04      	cmp	r3, #4
 800691a:	d003      	beq.n	8006924 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2205      	movs	r2, #5
 8006920:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	887a      	ldrh	r2, [r7, #2]
 8006936:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	887a      	ldrh	r2, [r7, #2]
 800693e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	887a      	ldrh	r2, [r7, #2]
 800694c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	887a      	ldrh	r2, [r7, #2]
 8006954:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	4b9f      	ldr	r3, [pc, #636]	; (8006be8 <HAL_SPI_TransmitReceive+0x384>)
 800696c:	4013      	ands	r3, r2
 800696e:	8879      	ldrh	r1, [r7, #2]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	6812      	ldr	r2, [r2, #0]
 8006974:	430b      	orrs	r3, r1
 8006976:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f042 0201 	orr.w	r2, r2, #1
 8006986:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006990:	d107      	bne.n	80069a2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	2b0f      	cmp	r3, #15
 80069a8:	d970      	bls.n	8006a8c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80069aa:	e068      	b.n	8006a7e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d11a      	bne.n	80069f0 <HAL_SPI_TransmitReceive+0x18c>
 80069ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d017      	beq.n	80069f0 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6812      	ldr	r2, [r2, #0]
 80069ca:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d0:	1d1a      	adds	r2, r3, #4
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80069dc:	b29b      	uxth	r3, r3
 80069de:	3b01      	subs	r3, #1
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80069ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	695a      	ldr	r2, [r3, #20]
 80069f6:	f248 0308 	movw	r3, #32776	; 0x8008
 80069fa:	4013      	ands	r3, r2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01a      	beq.n	8006a36 <HAL_SPI_TransmitReceive+0x1d2>
 8006a00:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d017      	beq.n	8006a36 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006a10:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a16:	1d1a      	adds	r2, r3, #4
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	3b01      	subs	r3, #1
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006a34:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a36:	f7fa fd13 	bl	8001460 <HAL_GetTick>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d803      	bhi.n	8006a4e <HAL_SPI_TransmitReceive+0x1ea>
 8006a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4c:	d102      	bne.n	8006a54 <HAL_SPI_TransmitReceive+0x1f0>
 8006a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d114      	bne.n	8006a7e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f000 fdaf 	bl	80075b8 <SPI_CloseTransfer>
      
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e1da      	b.n	8006e34 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006a7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d193      	bne.n	80069ac <HAL_SPI_TransmitReceive+0x148>
 8006a84:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d190      	bne.n	80069ac <HAL_SPI_TransmitReceive+0x148>
 8006a8a:	e1ac      	b.n	8006de6 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	2b07      	cmp	r3, #7
 8006a92:	f240 81a0 	bls.w	8006dd6 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006a96:	e0a9      	b.n	8006bec <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	f003 0302 	and.w	r3, r3, #2
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d139      	bne.n	8006b1a <HAL_SPI_TransmitReceive+0x2b6>
 8006aa6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d036      	beq.n	8006b1a <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006aac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d91c      	bls.n	8006aec <HAL_SPI_TransmitReceive+0x288>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d018      	beq.n	8006aec <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6812      	ldr	r2, [r2, #0]
 8006ac4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aca:	1d1a      	adds	r2, r3, #4
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	3b02      	subs	r3, #2
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006ae8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006aea:	e016      	b.n	8006b1a <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006af0:	881a      	ldrh	r2, [r3, #0]
 8006af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006afa:	1c9a      	adds	r2, r3, #2
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006b18:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d03a      	beq.n	8006b9e <HAL_SPI_TransmitReceive+0x33a>
 8006b28:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d037      	beq.n	8006b9e <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d018      	beq.n	8006b6e <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006b46:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b4c:	1d1a      	adds	r2, r3, #4
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	3b02      	subs	r3, #2
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006b6a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006b6c:	e017      	b.n	8006b9e <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b72:	6a3a      	ldr	r2, [r7, #32]
 8006b74:	8812      	ldrh	r2, [r2, #0]
 8006b76:	b292      	uxth	r2, r2
 8006b78:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b7e:	1c9a      	adds	r2, r3, #2
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006b9c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b9e:	f7fa fc5f 	bl	8001460 <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d803      	bhi.n	8006bb6 <HAL_SPI_TransmitReceive+0x352>
 8006bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb4:	d102      	bne.n	8006bbc <HAL_SPI_TransmitReceive+0x358>
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d117      	bne.n	8006bec <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 fcfb 	bl	80075b8 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e126      	b.n	8006e34 <HAL_SPI_TransmitReceive+0x5d0>
 8006be6:	bf00      	nop
 8006be8:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006bec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f47f af52 	bne.w	8006a98 <HAL_SPI_TransmitReceive+0x234>
 8006bf4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f47f af4e 	bne.w	8006a98 <HAL_SPI_TransmitReceive+0x234>
 8006bfc:	e0f3      	b.n	8006de6 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	695b      	ldr	r3, [r3, #20]
 8006c04:	f003 0302 	and.w	r3, r3, #2
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d15a      	bne.n	8006cc2 <HAL_SPI_TransmitReceive+0x45e>
 8006c0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d057      	beq.n	8006cc2 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006c12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c14:	2b03      	cmp	r3, #3
 8006c16:	d91c      	bls.n	8006c52 <HAL_SPI_TransmitReceive+0x3ee>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c1c:	2b40      	cmp	r3, #64	; 0x40
 8006c1e:	d918      	bls.n	8006c52 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6812      	ldr	r2, [r2, #0]
 8006c2a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c30:	1d1a      	adds	r2, r3, #4
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	3b04      	subs	r3, #4
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006c4e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006c50:	e037      	b.n	8006cc2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006c52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d91b      	bls.n	8006c90 <HAL_SPI_TransmitReceive+0x42c>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d017      	beq.n	8006c90 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c64:	881a      	ldrh	r2, [r3, #0]
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c68:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c6e:	1c9a      	adds	r2, r3, #2
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	3b02      	subs	r3, #2
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006c8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006c8e:	e018      	b.n	8006cc2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3320      	adds	r3, #32
 8006c9a:	7812      	ldrb	r2, [r2, #0]
 8006c9c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006cc0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d05e      	beq.n	8006d8e <HAL_SPI_TransmitReceive+0x52a>
 8006cd0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d05b      	beq.n	8006d8e <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d018      	beq.n	8006d16 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006cee:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cf4:	1d1a      	adds	r2, r3, #4
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	3b04      	subs	r3, #4
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d12:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006d14:	e03b      	b.n	8006d8e <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	695b      	ldr	r3, [r3, #20]
 8006d1c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8006d20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d24:	d918      	bls.n	8006d58 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d2a:	6a3a      	ldr	r2, [r7, #32]
 8006d2c:	8812      	ldrh	r2, [r2, #0]
 8006d2e:	b292      	uxth	r2, r2
 8006d30:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d36:	1c9a      	adds	r2, r3, #2
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	3b02      	subs	r3, #2
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d54:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006d56:	e01a      	b.n	8006d8e <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d64:	7812      	ldrb	r2, [r2, #0]
 8006d66:	b2d2      	uxtb	r2, r2
 8006d68:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d6e:	1c5a      	adds	r2, r3, #1
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d8c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d8e:	f7fa fb67 	bl	8001460 <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d803      	bhi.n	8006da6 <HAL_SPI_TransmitReceive+0x542>
 8006d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da4:	d102      	bne.n	8006dac <HAL_SPI_TransmitReceive+0x548>
 8006da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d114      	bne.n	8006dd6 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f000 fc03 	bl	80075b8 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e02e      	b.n	8006e34 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006dd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f47f af10 	bne.w	8006bfe <HAL_SPI_TransmitReceive+0x39a>
 8006dde:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f47f af0c 	bne.w	8006bfe <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8006de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	2200      	movs	r2, #0
 8006dee:	2108      	movs	r1, #8
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f000 fc81 	bl	80076f8 <SPI_WaitOnFlagUntilTimeout>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d007      	beq.n	8006e0c <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e02:	f043 0220 	orr.w	r2, r3, #32
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f000 fbd3 	bl	80075b8 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e001      	b.n	8006e34 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8006e30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3730      	adds	r7, #48	; 0x30
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b086      	sub	sp, #24
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	4613      	mov	r3, r2
 8006e48:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d101      	bne.n	8006e5c <HAL_SPI_Transmit_DMA+0x20>
 8006e58:	2302      	movs	r3, #2
 8006e5a:	e128      	b.n	80070ae <HAL_SPI_Transmit_DMA+0x272>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d007      	beq.n	8006e80 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8006e70:	2302      	movs	r3, #2
 8006e72:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006e7c:	7dfb      	ldrb	r3, [r7, #23]
 8006e7e:	e116      	b.n	80070ae <HAL_SPI_Transmit_DMA+0x272>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d002      	beq.n	8006e8c <HAL_SPI_Transmit_DMA+0x50>
 8006e86:	88fb      	ldrh	r3, [r7, #6]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d107      	bne.n	8006e9c <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006e98:	7dfb      	ldrb	r3, [r7, #23]
 8006e9a:	e108      	b.n	80070ae <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2203      	movs	r2, #3
 8006ea0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	88fa      	ldrh	r2, [r7, #6]
 8006eb6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	88fa      	ldrh	r2, [r7, #6]
 8006ebe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006eec:	d107      	bne.n	8006efe <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006efc:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	2b0f      	cmp	r3, #15
 8006f04:	d905      	bls.n	8006f12 <HAL_SPI_Transmit_DMA+0xd6>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f10:	d10f      	bne.n	8006f32 <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006f16:	2b07      	cmp	r3, #7
 8006f18:	d913      	bls.n	8006f42 <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f24:	d00d      	beq.n	8006f42 <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f2a:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8006f2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f30:	d007      	beq.n	8006f42 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006f3e:	7dfb      	ldrb	r3, [r7, #23]
 8006f40:	e0b5      	b.n	80070ae <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	2b07      	cmp	r3, #7
 8006f48:	d820      	bhi.n	8006f8c <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f4e:	699b      	ldr	r3, [r3, #24]
 8006f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f54:	d109      	bne.n	8006f6a <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	3301      	adds	r3, #1
 8006f60:	105b      	asrs	r3, r3, #1
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f6e:	699b      	ldr	r3, [r3, #24]
 8006f70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f74:	d11e      	bne.n	8006fb4 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	3303      	adds	r3, #3
 8006f80:	109b      	asrs	r3, r3, #2
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006f8a:	e013      	b.n	8006fb4 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	2b0f      	cmp	r3, #15
 8006f92:	d80f      	bhi.n	8006fb4 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f9e:	d109      	bne.n	8006fb4 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	3301      	adds	r3, #1
 8006faa:	105b      	asrs	r3, r3, #1
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fb8:	4a3f      	ldr	r2, [pc, #252]	; (80070b8 <HAL_SPI_Transmit_DMA+0x27c>)
 8006fba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fc0:	4a3e      	ldr	r2, [pc, #248]	; (80070bc <HAL_SPI_Transmit_DMA+0x280>)
 8006fc2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fc8:	4a3d      	ldr	r2, [pc, #244]	; (80070c0 <HAL_SPI_Transmit_DMA+0x284>)
 8006fca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689a      	ldr	r2, [r3, #8]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fe2:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fec:	4619      	mov	r1, r3
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3320      	adds	r3, #32
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	f7fa fed5 	bl	8001dac <HAL_DMA_Start_IT>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00f      	beq.n	8007028 <HAL_SPI_Transmit_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800700e:	f043 0210 	orr.w	r2, r3, #16
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 8007024:	7dfb      	ldrb	r3, [r7, #23]
 8007026:	e042      	b.n	80070ae <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007032:	d108      	bne.n	8007046 <HAL_SPI_Transmit_DMA+0x20a>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	6859      	ldr	r1, [r3, #4]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	4b21      	ldr	r3, [pc, #132]	; (80070c4 <HAL_SPI_Transmit_DMA+0x288>)
 8007040:	400b      	ands	r3, r1
 8007042:	6053      	str	r3, [r2, #4]
 8007044:	e009      	b.n	800705a <HAL_SPI_Transmit_DMA+0x21e>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	4b1d      	ldr	r3, [pc, #116]	; (80070c4 <HAL_SPI_Transmit_DMA+0x288>)
 800704e:	4013      	ands	r3, r2
 8007050:	88f9      	ldrh	r1, [r7, #6]
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	6812      	ldr	r2, [r2, #0]
 8007056:	430b      	orrs	r3, r1
 8007058:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	689a      	ldr	r2, [r3, #8]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007068:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	691a      	ldr	r2, [r3, #16]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 8007078:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f042 0201 	orr.w	r2, r2, #1
 8007088:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007092:	d107      	bne.n	80070a4 <HAL_SPI_Transmit_DMA+0x268>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070a2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 80070ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3718      	adds	r7, #24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	08007523 	.word	0x08007523
 80070bc:	080074dd 	.word	0x080074dd
 80070c0:	0800753f 	.word	0x0800753f
 80070c4:	ffff0000 	.word	0xffff0000

080070c8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b08a      	sub	sp, #40	; 0x28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80070e0:	6a3a      	ldr	r2, [r7, #32]
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	4013      	ands	r3, r2
 80070e6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80070f0:	2300      	movs	r3, #0
 80070f2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80070fa:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	3330      	adds	r3, #48	; 0x30
 8007102:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800710a:	2b00      	cmp	r3, #0
 800710c:	d113      	bne.n	8007136 <HAL_SPI_IRQHandler+0x6e>
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	f003 0320 	and.w	r3, r3, #32
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10e      	bne.n	8007136 <HAL_SPI_IRQHandler+0x6e>
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	f003 0304 	and.w	r3, r3, #4
 800711e:	2b00      	cmp	r3, #0
 8007120:	d009      	beq.n	8007136 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	4798      	blx	r3
    hspi->RxISR(hspi);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	4798      	blx	r3
    handled = 1UL;
 8007132:	2301      	movs	r3, #1
 8007134:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10f      	bne.n	8007160 <HAL_SPI_IRQHandler+0x98>
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00a      	beq.n	8007160 <HAL_SPI_IRQHandler+0x98>
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	f003 0304 	and.w	r3, r3, #4
 8007150:	2b00      	cmp	r3, #0
 8007152:	d105      	bne.n	8007160 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	4798      	blx	r3
    handled = 1UL;
 800715c:	2301      	movs	r3, #1
 800715e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	f003 0320 	and.w	r3, r3, #32
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10f      	bne.n	800718a <HAL_SPI_IRQHandler+0xc2>
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	f003 0302 	and.w	r3, r3, #2
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00a      	beq.n	800718a <HAL_SPI_IRQHandler+0xc2>
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	f003 0304 	and.w	r3, r3, #4
 800717a:	2b00      	cmp	r3, #0
 800717c:	d105      	bne.n	800718a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	4798      	blx	r3
    handled = 1UL;
 8007186:	2301      	movs	r3, #1
 8007188:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	2b00      	cmp	r3, #0
 800718e:	f040 8170 	bne.w	8007472 <HAL_SPI_IRQHandler+0x3aa>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	f003 0308 	and.w	r3, r3, #8
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 80a0 	beq.w	80072de <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	699a      	ldr	r2, [r3, #24]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f042 0208 	orr.w	r2, r2, #8
 80071ac:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	699a      	ldr	r2, [r3, #24]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f042 0210 	orr.w	r2, r2, #16
 80071bc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	699a      	ldr	r2, [r3, #24]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071cc:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	691a      	ldr	r2, [r3, #16]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0208 	bic.w	r2, r2, #8
 80071dc:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00f      	beq.n	8007208 <HAL_SPI_IRQHandler+0x140>
 80071e8:	7cfb      	ldrb	r3, [r7, #19]
 80071ea:	2b04      	cmp	r3, #4
 80071ec:	d004      	beq.n	80071f8 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071f2:	69db      	ldr	r3, [r3, #28]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d007      	beq.n	8007208 <HAL_SPI_IRQHandler+0x140>
 80071f8:	7cfb      	ldrb	r3, [r7, #19]
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d059      	beq.n	80072b2 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007202:	69db      	ldr	r3, [r3, #28]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d154      	bne.n	80072b2 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d13d      	bne.n	8007292 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8007216:	e036      	b.n	8007286 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	2b0f      	cmp	r3, #15
 800721e:	d90b      	bls.n	8007238 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007228:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800722a:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007230:	1d1a      	adds	r2, r3, #4
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	665a      	str	r2, [r3, #100]	; 0x64
 8007236:	e01d      	b.n	8007274 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	2b07      	cmp	r3, #7
 800723e:	d90b      	bls.n	8007258 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	8812      	ldrh	r2, [r2, #0]
 8007248:	b292      	uxth	r2, r2
 800724a:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007250:	1c9a      	adds	r2, r3, #2
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	665a      	str	r2, [r3, #100]	; 0x64
 8007256:	e00d      	b.n	8007274 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007264:	7812      	ldrb	r2, [r2, #0]
 8007266:	b2d2      	uxtb	r2, r2
 8007268:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800726e:	1c5a      	adds	r2, r3, #1
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800727a:	b29b      	uxth	r3, r3
 800727c:	3b01      	subs	r3, #1
 800727e:	b29a      	uxth	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800728c:	b29b      	uxth	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1c2      	bne.n	8007218 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f990 	bl	80075b8 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d003      	beq.n	80072b2 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f90c 	bl	80074c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 80072b0:	e0e4      	b.n	800747c <HAL_SPI_IRQHandler+0x3b4>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80072b2:	7cfb      	ldrb	r3, [r7, #19]
 80072b4:	2b05      	cmp	r3, #5
 80072b6:	d103      	bne.n	80072c0 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f8f1 	bl	80074a0 <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 80072be:	e0da      	b.n	8007476 <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80072c0:	7cfb      	ldrb	r3, [r7, #19]
 80072c2:	2b04      	cmp	r3, #4
 80072c4:	d103      	bne.n	80072ce <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f8e0 	bl	800748c <HAL_SPI_RxCpltCallback>
    return;
 80072cc:	e0d3      	b.n	8007476 <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80072ce:	7cfb      	ldrb	r3, [r7, #19]
 80072d0:	2b03      	cmp	r3, #3
 80072d2:	f040 80d0 	bne.w	8007476 <HAL_SPI_IRQHandler+0x3ae>
      HAL_SPI_TxCpltCallback(hspi);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7f9 fafc 	bl	80008d4 <HAL_SPI_TxCpltCallback>
    return;
 80072dc:	e0cb      	b.n	8007476 <HAL_SPI_IRQHandler+0x3ae>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00d      	beq.n	8007304 <HAL_SPI_IRQHandler+0x23c>
 80072e8:	6a3b      	ldr	r3, [r7, #32]
 80072ea:	f003 0308 	and.w	r3, r3, #8
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d008      	beq.n	8007304 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	699a      	ldr	r2, [r3, #24]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007300:	619a      	str	r2, [r3, #24]

    return;
 8007302:	e0bb      	b.n	800747c <HAL_SPI_IRQHandler+0x3b4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 80b6 	beq.w	800747c <HAL_SPI_IRQHandler+0x3b4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00f      	beq.n	800733a <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007320:	f043 0204 	orr.w	r2, r3, #4
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	699a      	ldr	r2, [r3, #24]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007338:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00f      	beq.n	8007364 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800734a:	f043 0201 	orr.w	r2, r3, #1
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	699a      	ldr	r2, [r3, #24]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007362:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00f      	beq.n	800738e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007374:	f043 0208 	orr.w	r2, r3, #8
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	699a      	ldr	r2, [r3, #24]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800738c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	f003 0320 	and.w	r3, r3, #32
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00f      	beq.n	80073b8 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800739e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	699a      	ldr	r2, [r3, #24]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f042 0220 	orr.w	r2, r2, #32
 80073b6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d05b      	beq.n	800747a <HAL_SPI_IRQHandler+0x3b2>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f022 0201 	bic.w	r2, r2, #1
 80073d0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	6919      	ldr	r1, [r3, #16]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	4b29      	ldr	r3, [pc, #164]	; (8007484 <HAL_SPI_IRQHandler+0x3bc>)
 80073de:	400b      	ands	r3, r1
 80073e0:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80073e8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80073ec:	d138      	bne.n	8007460 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	689a      	ldr	r2, [r3, #8]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80073fc:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007402:	2b00      	cmp	r3, #0
 8007404:	d013      	beq.n	800742e <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800740a:	4a1f      	ldr	r2, [pc, #124]	; (8007488 <HAL_SPI_IRQHandler+0x3c0>)
 800740c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007412:	4618      	mov	r0, r3
 8007414:	f7fa ff34 	bl	8002280 <HAL_DMA_Abort_IT>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d007      	beq.n	800742e <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007424:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007432:	2b00      	cmp	r3, #0
 8007434:	d021      	beq.n	800747a <HAL_SPI_IRQHandler+0x3b2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800743a:	4a13      	ldr	r2, [pc, #76]	; (8007488 <HAL_SPI_IRQHandler+0x3c0>)
 800743c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007442:	4618      	mov	r0, r3
 8007444:	f7fa ff1c 	bl	8002280 <HAL_DMA_Abort_IT>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d015      	beq.n	800747a <HAL_SPI_IRQHandler+0x3b2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007454:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800745e:	e00c      	b.n	800747a <HAL_SPI_IRQHandler+0x3b2>
        hspi->State = HAL_SPI_STATE_READY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 f82d 	bl	80074c8 <HAL_SPI_ErrorCallback>
    return;
 800746e:	bf00      	nop
 8007470:	e003      	b.n	800747a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007472:	bf00      	nop
 8007474:	e002      	b.n	800747c <HAL_SPI_IRQHandler+0x3b4>
    return;
 8007476:	bf00      	nop
 8007478:	e000      	b.n	800747c <HAL_SPI_IRQHandler+0x3b4>
    return;
 800747a:	bf00      	nop
  }
}
 800747c:	3728      	adds	r7, #40	; 0x28
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	fffffc94 	.word	0xfffffc94
 8007488:	08007585 	.word	0x08007585

0800748c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007494:	bf00      	nop
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e8:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b07      	cmp	r3, #7
 80074f4:	d011      	beq.n	800751a <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074fa:	69db      	ldr	r3, [r3, #28]
 80074fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007500:	d103      	bne.n	800750a <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f7f9 f9e6 	bl	80008d4 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8007508:	e007      	b.n	800751a <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	691a      	ldr	r2, [r3, #16]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f042 0208 	orr.w	r2, r2, #8
 8007518:	611a      	str	r2, [r3, #16]
}
 800751a:	bf00      	nop
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b084      	sub	sp, #16
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f7ff ffbf 	bl	80074b4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007536:	bf00      	nop
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754a:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7fc f805 	bl	800355c <HAL_DMA_GetError>
 8007552:	4603      	mov	r3, r0
 8007554:	2b02      	cmp	r3, #2
 8007556:	d011      	beq.n	800757c <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f000 f82d 	bl	80075b8 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007564:	f043 0210 	orr.w	r2, r3, #16
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f7ff ffa6 	bl	80074c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800757c:	bf00      	nop
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007590:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f7ff ff8c 	bl	80074c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80075b0:	bf00      	nop
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	699a      	ldr	r2, [r3, #24]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f042 0208 	orr.w	r2, r2, #8
 80075d6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	699a      	ldr	r2, [r3, #24]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f042 0210 	orr.w	r2, r2, #16
 80075e6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f022 0201 	bic.w	r2, r2, #1
 80075f6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6919      	ldr	r1, [r3, #16]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	4b3c      	ldr	r3, [pc, #240]	; (80076f4 <SPI_CloseTransfer+0x13c>)
 8007604:	400b      	ands	r3, r1
 8007606:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	689a      	ldr	r2, [r3, #8]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007616:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800761e:	b2db      	uxtb	r3, r3
 8007620:	2b04      	cmp	r3, #4
 8007622:	d014      	beq.n	800764e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f003 0320 	and.w	r3, r3, #32
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00f      	beq.n	800764e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007634:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	699a      	ldr	r2, [r3, #24]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f042 0220 	orr.w	r2, r2, #32
 800764c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007654:	b2db      	uxtb	r3, r3
 8007656:	2b03      	cmp	r3, #3
 8007658:	d014      	beq.n	8007684 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00f      	beq.n	8007684 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800766a:	f043 0204 	orr.w	r2, r3, #4
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	699a      	ldr	r2, [r3, #24]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007682:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00f      	beq.n	80076ae <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007694:	f043 0201 	orr.w	r2, r3, #1
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	699a      	ldr	r2, [r3, #24]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076ac:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00f      	beq.n	80076d8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076be:	f043 0208 	orr.w	r2, r3, #8
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	699a      	ldr	r2, [r3, #24]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076d6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80076e8:	bf00      	nop
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr
 80076f4:	fffffc90 	.word	0xfffffc90

080076f8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	603b      	str	r3, [r7, #0]
 8007704:	4613      	mov	r3, r2
 8007706:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007708:	e010      	b.n	800772c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800770a:	f7f9 fea9 	bl	8001460 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	69ba      	ldr	r2, [r7, #24]
 8007716:	429a      	cmp	r2, r3
 8007718:	d803      	bhi.n	8007722 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007720:	d102      	bne.n	8007728 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d101      	bne.n	800772c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	e00f      	b.n	800774c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	695a      	ldr	r2, [r3, #20]
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	4013      	ands	r3, r2
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	429a      	cmp	r2, r3
 800773a:	bf0c      	ite	eq
 800773c:	2301      	moveq	r3, #1
 800773e:	2300      	movne	r3, #0
 8007740:	b2db      	uxtb	r3, r3
 8007742:	461a      	mov	r2, r3
 8007744:	79fb      	ldrb	r3, [r7, #7]
 8007746:	429a      	cmp	r2, r3
 8007748:	d0df      	beq.n	800770a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007760:	095b      	lsrs	r3, r3, #5
 8007762:	3301      	adds	r3, #1
 8007764:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	3301      	adds	r3, #1
 800776c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	3307      	adds	r3, #7
 8007772:	08db      	lsrs	r3, r3, #3
 8007774:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	fb02 f303 	mul.w	r3, r2, r3
}
 800777e:	4618      	mov	r0, r3
 8007780:	3714      	adds	r7, #20
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b082      	sub	sp, #8
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e042      	b.n	8007822 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d106      	bne.n	80077b4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7f9 fc58 	bl	8001064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2224      	movs	r2, #36	; 0x24
 80077b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f022 0201 	bic.w	r2, r2, #1
 80077ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f8c3 	bl	8007958 <UART_SetConfig>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d101      	bne.n	80077dc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e022      	b.n	8007822 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fe67 	bl	80084b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	685a      	ldr	r2, [r3, #4]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689a      	ldr	r2, [r3, #8]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007808:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f042 0201 	orr.w	r2, r2, #1
 8007818:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 feee 	bl	80085fc <UART_CheckIdleState>
 8007820:	4603      	mov	r3, r0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3708      	adds	r7, #8
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b08a      	sub	sp, #40	; 0x28
 800782e:	af02      	add	r7, sp, #8
 8007830:	60f8      	str	r0, [r7, #12]
 8007832:	60b9      	str	r1, [r7, #8]
 8007834:	603b      	str	r3, [r7, #0]
 8007836:	4613      	mov	r3, r2
 8007838:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007840:	2b20      	cmp	r3, #32
 8007842:	f040 8083 	bne.w	800794c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d002      	beq.n	8007852 <HAL_UART_Transmit+0x28>
 800784c:	88fb      	ldrh	r3, [r7, #6]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d101      	bne.n	8007856 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e07b      	b.n	800794e <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800785c:	2b01      	cmp	r3, #1
 800785e:	d101      	bne.n	8007864 <HAL_UART_Transmit+0x3a>
 8007860:	2302      	movs	r3, #2
 8007862:	e074      	b.n	800794e <HAL_UART_Transmit+0x124>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2221      	movs	r2, #33	; 0x21
 8007878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800787c:	f7f9 fdf0 	bl	8001460 <HAL_GetTick>
 8007880:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	88fa      	ldrh	r2, [r7, #6]
 8007886:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	88fa      	ldrh	r2, [r7, #6]
 800788e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800789a:	d108      	bne.n	80078ae <HAL_UART_Transmit+0x84>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d104      	bne.n	80078ae <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80078a4:	2300      	movs	r3, #0
 80078a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	61bb      	str	r3, [r7, #24]
 80078ac:	e003      	b.n	80078b6 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078b2:	2300      	movs	r3, #0
 80078b4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80078be:	e02c      	b.n	800791a <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	9300      	str	r3, [sp, #0]
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	2200      	movs	r2, #0
 80078c8:	2180      	movs	r1, #128	; 0x80
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f000 fede 	bl	800868c <UART_WaitOnFlagUntilTimeout>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d001      	beq.n	80078da <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e039      	b.n	800794e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d10b      	bne.n	80078f8 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	881b      	ldrh	r3, [r3, #0]
 80078e4:	461a      	mov	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	3302      	adds	r3, #2
 80078f4:	61bb      	str	r3, [r7, #24]
 80078f6:	e007      	b.n	8007908 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	781a      	ldrb	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	3301      	adds	r3, #1
 8007906:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800790e:	b29b      	uxth	r3, r3
 8007910:	3b01      	subs	r3, #1
 8007912:	b29a      	uxth	r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007920:	b29b      	uxth	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1cc      	bne.n	80078c0 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	2200      	movs	r2, #0
 800792e:	2140      	movs	r1, #64	; 0x40
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f000 feab 	bl	800868c <UART_WaitOnFlagUntilTimeout>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d001      	beq.n	8007940 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e006      	b.n	800794e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2220      	movs	r2, #32
 8007944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8007948:	2300      	movs	r3, #0
 800794a:	e000      	b.n	800794e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800794c:	2302      	movs	r3, #2
  }
}
 800794e:	4618      	mov	r0, r3
 8007950:	3720      	adds	r7, #32
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
	...

08007958 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007958:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800795c:	b08e      	sub	sp, #56	; 0x38
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007962:	2300      	movs	r3, #0
 8007964:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	689a      	ldr	r2, [r3, #8]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	431a      	orrs	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	431a      	orrs	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	69db      	ldr	r3, [r3, #28]
 800797c:	4313      	orrs	r3, r2
 800797e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007986:	4313      	orrs	r3, r2
 8007988:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	4bc1      	ldr	r3, [pc, #772]	; (8007c98 <UART_SetConfig+0x340>)
 8007992:	4013      	ands	r3, r2
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	6812      	ldr	r2, [r2, #0]
 8007998:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800799a:	430b      	orrs	r3, r1
 800799c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	68da      	ldr	r2, [r3, #12]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	430a      	orrs	r2, r1
 80079b2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	699b      	ldr	r3, [r3, #24]
 80079b8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4ab7      	ldr	r2, [pc, #732]	; (8007c9c <UART_SetConfig+0x344>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d004      	beq.n	80079ce <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a1b      	ldr	r3, [r3, #32]
 80079c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079ca:	4313      	orrs	r3, r2
 80079cc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	689a      	ldr	r2, [r3, #8]
 80079d4:	4bb2      	ldr	r3, [pc, #712]	; (8007ca0 <UART_SetConfig+0x348>)
 80079d6:	4013      	ands	r3, r2
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	6812      	ldr	r2, [r2, #0]
 80079dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80079de:	430b      	orrs	r3, r1
 80079e0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e8:	f023 010f 	bic.w	r1, r3, #15
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	430a      	orrs	r2, r1
 80079f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4aa9      	ldr	r2, [pc, #676]	; (8007ca4 <UART_SetConfig+0x34c>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d177      	bne.n	8007af2 <UART_SetConfig+0x19a>
 8007a02:	4ba9      	ldr	r3, [pc, #676]	; (8007ca8 <UART_SetConfig+0x350>)
 8007a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a0a:	2b28      	cmp	r3, #40	; 0x28
 8007a0c:	d86c      	bhi.n	8007ae8 <UART_SetConfig+0x190>
 8007a0e:	a201      	add	r2, pc, #4	; (adr r2, 8007a14 <UART_SetConfig+0xbc>)
 8007a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a14:	08007ab9 	.word	0x08007ab9
 8007a18:	08007ae9 	.word	0x08007ae9
 8007a1c:	08007ae9 	.word	0x08007ae9
 8007a20:	08007ae9 	.word	0x08007ae9
 8007a24:	08007ae9 	.word	0x08007ae9
 8007a28:	08007ae9 	.word	0x08007ae9
 8007a2c:	08007ae9 	.word	0x08007ae9
 8007a30:	08007ae9 	.word	0x08007ae9
 8007a34:	08007ac1 	.word	0x08007ac1
 8007a38:	08007ae9 	.word	0x08007ae9
 8007a3c:	08007ae9 	.word	0x08007ae9
 8007a40:	08007ae9 	.word	0x08007ae9
 8007a44:	08007ae9 	.word	0x08007ae9
 8007a48:	08007ae9 	.word	0x08007ae9
 8007a4c:	08007ae9 	.word	0x08007ae9
 8007a50:	08007ae9 	.word	0x08007ae9
 8007a54:	08007ac9 	.word	0x08007ac9
 8007a58:	08007ae9 	.word	0x08007ae9
 8007a5c:	08007ae9 	.word	0x08007ae9
 8007a60:	08007ae9 	.word	0x08007ae9
 8007a64:	08007ae9 	.word	0x08007ae9
 8007a68:	08007ae9 	.word	0x08007ae9
 8007a6c:	08007ae9 	.word	0x08007ae9
 8007a70:	08007ae9 	.word	0x08007ae9
 8007a74:	08007ad1 	.word	0x08007ad1
 8007a78:	08007ae9 	.word	0x08007ae9
 8007a7c:	08007ae9 	.word	0x08007ae9
 8007a80:	08007ae9 	.word	0x08007ae9
 8007a84:	08007ae9 	.word	0x08007ae9
 8007a88:	08007ae9 	.word	0x08007ae9
 8007a8c:	08007ae9 	.word	0x08007ae9
 8007a90:	08007ae9 	.word	0x08007ae9
 8007a94:	08007ad9 	.word	0x08007ad9
 8007a98:	08007ae9 	.word	0x08007ae9
 8007a9c:	08007ae9 	.word	0x08007ae9
 8007aa0:	08007ae9 	.word	0x08007ae9
 8007aa4:	08007ae9 	.word	0x08007ae9
 8007aa8:	08007ae9 	.word	0x08007ae9
 8007aac:	08007ae9 	.word	0x08007ae9
 8007ab0:	08007ae9 	.word	0x08007ae9
 8007ab4:	08007ae1 	.word	0x08007ae1
 8007ab8:	2301      	movs	r3, #1
 8007aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007abe:	e233      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007ac0:	2304      	movs	r3, #4
 8007ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ac6:	e22f      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007ac8:	2308      	movs	r3, #8
 8007aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ace:	e22b      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007ad0:	2310      	movs	r3, #16
 8007ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ad6:	e227      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007ad8:	2320      	movs	r3, #32
 8007ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ade:	e223      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007ae0:	2340      	movs	r3, #64	; 0x40
 8007ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ae6:	e21f      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007ae8:	2380      	movs	r3, #128	; 0x80
 8007aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aee:	bf00      	nop
 8007af0:	e21a      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a6d      	ldr	r2, [pc, #436]	; (8007cac <UART_SetConfig+0x354>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d132      	bne.n	8007b62 <UART_SetConfig+0x20a>
 8007afc:	4b6a      	ldr	r3, [pc, #424]	; (8007ca8 <UART_SetConfig+0x350>)
 8007afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b00:	f003 0307 	and.w	r3, r3, #7
 8007b04:	2b05      	cmp	r3, #5
 8007b06:	d827      	bhi.n	8007b58 <UART_SetConfig+0x200>
 8007b08:	a201      	add	r2, pc, #4	; (adr r2, 8007b10 <UART_SetConfig+0x1b8>)
 8007b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0e:	bf00      	nop
 8007b10:	08007b29 	.word	0x08007b29
 8007b14:	08007b31 	.word	0x08007b31
 8007b18:	08007b39 	.word	0x08007b39
 8007b1c:	08007b41 	.word	0x08007b41
 8007b20:	08007b49 	.word	0x08007b49
 8007b24:	08007b51 	.word	0x08007b51
 8007b28:	2300      	movs	r3, #0
 8007b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b2e:	e1fb      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007b30:	2304      	movs	r3, #4
 8007b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b36:	e1f7      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007b38:	2308      	movs	r3, #8
 8007b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b3e:	e1f3      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007b40:	2310      	movs	r3, #16
 8007b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b46:	e1ef      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007b48:	2320      	movs	r3, #32
 8007b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b4e:	e1eb      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007b50:	2340      	movs	r3, #64	; 0x40
 8007b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b56:	e1e7      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007b58:	2380      	movs	r3, #128	; 0x80
 8007b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b5e:	bf00      	nop
 8007b60:	e1e2      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a52      	ldr	r2, [pc, #328]	; (8007cb0 <UART_SetConfig+0x358>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d132      	bne.n	8007bd2 <UART_SetConfig+0x27a>
 8007b6c:	4b4e      	ldr	r3, [pc, #312]	; (8007ca8 <UART_SetConfig+0x350>)
 8007b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b70:	f003 0307 	and.w	r3, r3, #7
 8007b74:	2b05      	cmp	r3, #5
 8007b76:	d827      	bhi.n	8007bc8 <UART_SetConfig+0x270>
 8007b78:	a201      	add	r2, pc, #4	; (adr r2, 8007b80 <UART_SetConfig+0x228>)
 8007b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7e:	bf00      	nop
 8007b80:	08007b99 	.word	0x08007b99
 8007b84:	08007ba1 	.word	0x08007ba1
 8007b88:	08007ba9 	.word	0x08007ba9
 8007b8c:	08007bb1 	.word	0x08007bb1
 8007b90:	08007bb9 	.word	0x08007bb9
 8007b94:	08007bc1 	.word	0x08007bc1
 8007b98:	2300      	movs	r3, #0
 8007b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b9e:	e1c3      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007ba0:	2304      	movs	r3, #4
 8007ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ba6:	e1bf      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007ba8:	2308      	movs	r3, #8
 8007baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bae:	e1bb      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007bb0:	2310      	movs	r3, #16
 8007bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bb6:	e1b7      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007bb8:	2320      	movs	r3, #32
 8007bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bbe:	e1b3      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007bc0:	2340      	movs	r3, #64	; 0x40
 8007bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bc6:	e1af      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007bc8:	2380      	movs	r3, #128	; 0x80
 8007bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bce:	bf00      	nop
 8007bd0:	e1aa      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a37      	ldr	r2, [pc, #220]	; (8007cb4 <UART_SetConfig+0x35c>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d132      	bne.n	8007c42 <UART_SetConfig+0x2ea>
 8007bdc:	4b32      	ldr	r3, [pc, #200]	; (8007ca8 <UART_SetConfig+0x350>)
 8007bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be0:	f003 0307 	and.w	r3, r3, #7
 8007be4:	2b05      	cmp	r3, #5
 8007be6:	d827      	bhi.n	8007c38 <UART_SetConfig+0x2e0>
 8007be8:	a201      	add	r2, pc, #4	; (adr r2, 8007bf0 <UART_SetConfig+0x298>)
 8007bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bee:	bf00      	nop
 8007bf0:	08007c09 	.word	0x08007c09
 8007bf4:	08007c11 	.word	0x08007c11
 8007bf8:	08007c19 	.word	0x08007c19
 8007bfc:	08007c21 	.word	0x08007c21
 8007c00:	08007c29 	.word	0x08007c29
 8007c04:	08007c31 	.word	0x08007c31
 8007c08:	2300      	movs	r3, #0
 8007c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c0e:	e18b      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007c10:	2304      	movs	r3, #4
 8007c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c16:	e187      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007c18:	2308      	movs	r3, #8
 8007c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c1e:	e183      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007c20:	2310      	movs	r3, #16
 8007c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c26:	e17f      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007c28:	2320      	movs	r3, #32
 8007c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c2e:	e17b      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007c30:	2340      	movs	r3, #64	; 0x40
 8007c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c36:	e177      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007c38:	2380      	movs	r3, #128	; 0x80
 8007c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c3e:	bf00      	nop
 8007c40:	e172      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a1c      	ldr	r2, [pc, #112]	; (8007cb8 <UART_SetConfig+0x360>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d144      	bne.n	8007cd6 <UART_SetConfig+0x37e>
 8007c4c:	4b16      	ldr	r3, [pc, #88]	; (8007ca8 <UART_SetConfig+0x350>)
 8007c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c50:	f003 0307 	and.w	r3, r3, #7
 8007c54:	2b05      	cmp	r3, #5
 8007c56:	d839      	bhi.n	8007ccc <UART_SetConfig+0x374>
 8007c58:	a201      	add	r2, pc, #4	; (adr r2, 8007c60 <UART_SetConfig+0x308>)
 8007c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5e:	bf00      	nop
 8007c60:	08007c79 	.word	0x08007c79
 8007c64:	08007c81 	.word	0x08007c81
 8007c68:	08007c89 	.word	0x08007c89
 8007c6c:	08007c91 	.word	0x08007c91
 8007c70:	08007cbd 	.word	0x08007cbd
 8007c74:	08007cc5 	.word	0x08007cc5
 8007c78:	2300      	movs	r3, #0
 8007c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c7e:	e153      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007c80:	2304      	movs	r3, #4
 8007c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c86:	e14f      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007c88:	2308      	movs	r3, #8
 8007c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c8e:	e14b      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007c90:	2310      	movs	r3, #16
 8007c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c96:	e147      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007c98:	cfff69f3 	.word	0xcfff69f3
 8007c9c:	58000c00 	.word	0x58000c00
 8007ca0:	11fff4ff 	.word	0x11fff4ff
 8007ca4:	40011000 	.word	0x40011000
 8007ca8:	58024400 	.word	0x58024400
 8007cac:	40004400 	.word	0x40004400
 8007cb0:	40004800 	.word	0x40004800
 8007cb4:	40004c00 	.word	0x40004c00
 8007cb8:	40005000 	.word	0x40005000
 8007cbc:	2320      	movs	r3, #32
 8007cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cc2:	e131      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007cc4:	2340      	movs	r3, #64	; 0x40
 8007cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cca:	e12d      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007ccc:	2380      	movs	r3, #128	; 0x80
 8007cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cd2:	bf00      	nop
 8007cd4:	e128      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4ab6      	ldr	r2, [pc, #728]	; (8007fb4 <UART_SetConfig+0x65c>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d178      	bne.n	8007dd2 <UART_SetConfig+0x47a>
 8007ce0:	4bb5      	ldr	r3, [pc, #724]	; (8007fb8 <UART_SetConfig+0x660>)
 8007ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ce4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ce8:	2b28      	cmp	r3, #40	; 0x28
 8007cea:	d86d      	bhi.n	8007dc8 <UART_SetConfig+0x470>
 8007cec:	a201      	add	r2, pc, #4	; (adr r2, 8007cf4 <UART_SetConfig+0x39c>)
 8007cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf2:	bf00      	nop
 8007cf4:	08007d99 	.word	0x08007d99
 8007cf8:	08007dc9 	.word	0x08007dc9
 8007cfc:	08007dc9 	.word	0x08007dc9
 8007d00:	08007dc9 	.word	0x08007dc9
 8007d04:	08007dc9 	.word	0x08007dc9
 8007d08:	08007dc9 	.word	0x08007dc9
 8007d0c:	08007dc9 	.word	0x08007dc9
 8007d10:	08007dc9 	.word	0x08007dc9
 8007d14:	08007da1 	.word	0x08007da1
 8007d18:	08007dc9 	.word	0x08007dc9
 8007d1c:	08007dc9 	.word	0x08007dc9
 8007d20:	08007dc9 	.word	0x08007dc9
 8007d24:	08007dc9 	.word	0x08007dc9
 8007d28:	08007dc9 	.word	0x08007dc9
 8007d2c:	08007dc9 	.word	0x08007dc9
 8007d30:	08007dc9 	.word	0x08007dc9
 8007d34:	08007da9 	.word	0x08007da9
 8007d38:	08007dc9 	.word	0x08007dc9
 8007d3c:	08007dc9 	.word	0x08007dc9
 8007d40:	08007dc9 	.word	0x08007dc9
 8007d44:	08007dc9 	.word	0x08007dc9
 8007d48:	08007dc9 	.word	0x08007dc9
 8007d4c:	08007dc9 	.word	0x08007dc9
 8007d50:	08007dc9 	.word	0x08007dc9
 8007d54:	08007db1 	.word	0x08007db1
 8007d58:	08007dc9 	.word	0x08007dc9
 8007d5c:	08007dc9 	.word	0x08007dc9
 8007d60:	08007dc9 	.word	0x08007dc9
 8007d64:	08007dc9 	.word	0x08007dc9
 8007d68:	08007dc9 	.word	0x08007dc9
 8007d6c:	08007dc9 	.word	0x08007dc9
 8007d70:	08007dc9 	.word	0x08007dc9
 8007d74:	08007db9 	.word	0x08007db9
 8007d78:	08007dc9 	.word	0x08007dc9
 8007d7c:	08007dc9 	.word	0x08007dc9
 8007d80:	08007dc9 	.word	0x08007dc9
 8007d84:	08007dc9 	.word	0x08007dc9
 8007d88:	08007dc9 	.word	0x08007dc9
 8007d8c:	08007dc9 	.word	0x08007dc9
 8007d90:	08007dc9 	.word	0x08007dc9
 8007d94:	08007dc1 	.word	0x08007dc1
 8007d98:	2301      	movs	r3, #1
 8007d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d9e:	e0c3      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007da0:	2304      	movs	r3, #4
 8007da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007da6:	e0bf      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007da8:	2308      	movs	r3, #8
 8007daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dae:	e0bb      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007db0:	2310      	movs	r3, #16
 8007db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007db6:	e0b7      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007db8:	2320      	movs	r3, #32
 8007dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dbe:	e0b3      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007dc0:	2340      	movs	r3, #64	; 0x40
 8007dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dc6:	e0af      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007dc8:	2380      	movs	r3, #128	; 0x80
 8007dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dce:	bf00      	nop
 8007dd0:	e0aa      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a79      	ldr	r2, [pc, #484]	; (8007fbc <UART_SetConfig+0x664>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d132      	bne.n	8007e42 <UART_SetConfig+0x4ea>
 8007ddc:	4b76      	ldr	r3, [pc, #472]	; (8007fb8 <UART_SetConfig+0x660>)
 8007dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007de0:	f003 0307 	and.w	r3, r3, #7
 8007de4:	2b05      	cmp	r3, #5
 8007de6:	d827      	bhi.n	8007e38 <UART_SetConfig+0x4e0>
 8007de8:	a201      	add	r2, pc, #4	; (adr r2, 8007df0 <UART_SetConfig+0x498>)
 8007dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dee:	bf00      	nop
 8007df0:	08007e09 	.word	0x08007e09
 8007df4:	08007e11 	.word	0x08007e11
 8007df8:	08007e19 	.word	0x08007e19
 8007dfc:	08007e21 	.word	0x08007e21
 8007e00:	08007e29 	.word	0x08007e29
 8007e04:	08007e31 	.word	0x08007e31
 8007e08:	2300      	movs	r3, #0
 8007e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e0e:	e08b      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007e10:	2304      	movs	r3, #4
 8007e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e16:	e087      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007e18:	2308      	movs	r3, #8
 8007e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e1e:	e083      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007e20:	2310      	movs	r3, #16
 8007e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e26:	e07f      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007e28:	2320      	movs	r3, #32
 8007e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e2e:	e07b      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007e30:	2340      	movs	r3, #64	; 0x40
 8007e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e36:	e077      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007e38:	2380      	movs	r3, #128	; 0x80
 8007e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e3e:	bf00      	nop
 8007e40:	e072      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a5e      	ldr	r2, [pc, #376]	; (8007fc0 <UART_SetConfig+0x668>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d132      	bne.n	8007eb2 <UART_SetConfig+0x55a>
 8007e4c:	4b5a      	ldr	r3, [pc, #360]	; (8007fb8 <UART_SetConfig+0x660>)
 8007e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e50:	f003 0307 	and.w	r3, r3, #7
 8007e54:	2b05      	cmp	r3, #5
 8007e56:	d827      	bhi.n	8007ea8 <UART_SetConfig+0x550>
 8007e58:	a201      	add	r2, pc, #4	; (adr r2, 8007e60 <UART_SetConfig+0x508>)
 8007e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5e:	bf00      	nop
 8007e60:	08007e79 	.word	0x08007e79
 8007e64:	08007e81 	.word	0x08007e81
 8007e68:	08007e89 	.word	0x08007e89
 8007e6c:	08007e91 	.word	0x08007e91
 8007e70:	08007e99 	.word	0x08007e99
 8007e74:	08007ea1 	.word	0x08007ea1
 8007e78:	2300      	movs	r3, #0
 8007e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e7e:	e053      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007e80:	2304      	movs	r3, #4
 8007e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e86:	e04f      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007e88:	2308      	movs	r3, #8
 8007e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e8e:	e04b      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007e90:	2310      	movs	r3, #16
 8007e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e96:	e047      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007e98:	2320      	movs	r3, #32
 8007e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e9e:	e043      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007ea0:	2340      	movs	r3, #64	; 0x40
 8007ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ea6:	e03f      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007ea8:	2380      	movs	r3, #128	; 0x80
 8007eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eae:	bf00      	nop
 8007eb0:	e03a      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a43      	ldr	r2, [pc, #268]	; (8007fc4 <UART_SetConfig+0x66c>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d132      	bne.n	8007f22 <UART_SetConfig+0x5ca>
 8007ebc:	4b3e      	ldr	r3, [pc, #248]	; (8007fb8 <UART_SetConfig+0x660>)
 8007ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ec0:	f003 0307 	and.w	r3, r3, #7
 8007ec4:	2b05      	cmp	r3, #5
 8007ec6:	d827      	bhi.n	8007f18 <UART_SetConfig+0x5c0>
 8007ec8:	a201      	add	r2, pc, #4	; (adr r2, 8007ed0 <UART_SetConfig+0x578>)
 8007eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ece:	bf00      	nop
 8007ed0:	08007ee9 	.word	0x08007ee9
 8007ed4:	08007ef1 	.word	0x08007ef1
 8007ed8:	08007ef9 	.word	0x08007ef9
 8007edc:	08007f01 	.word	0x08007f01
 8007ee0:	08007f09 	.word	0x08007f09
 8007ee4:	08007f11 	.word	0x08007f11
 8007ee8:	2302      	movs	r3, #2
 8007eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eee:	e01b      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007ef0:	2304      	movs	r3, #4
 8007ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ef6:	e017      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007ef8:	2308      	movs	r3, #8
 8007efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007efe:	e013      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007f00:	2310      	movs	r3, #16
 8007f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f06:	e00f      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007f08:	2320      	movs	r3, #32
 8007f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f0e:	e00b      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007f10:	2340      	movs	r3, #64	; 0x40
 8007f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f16:	e007      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007f18:	2380      	movs	r3, #128	; 0x80
 8007f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f1e:	bf00      	nop
 8007f20:	e002      	b.n	8007f28 <UART_SetConfig+0x5d0>
 8007f22:	2380      	movs	r3, #128	; 0x80
 8007f24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a25      	ldr	r2, [pc, #148]	; (8007fc4 <UART_SetConfig+0x66c>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	f040 80b8 	bne.w	80080a4 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f38:	2b08      	cmp	r3, #8
 8007f3a:	d019      	beq.n	8007f70 <UART_SetConfig+0x618>
 8007f3c:	2b08      	cmp	r3, #8
 8007f3e:	dc04      	bgt.n	8007f4a <UART_SetConfig+0x5f2>
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d009      	beq.n	8007f58 <UART_SetConfig+0x600>
 8007f44:	2b04      	cmp	r3, #4
 8007f46:	d00b      	beq.n	8007f60 <UART_SetConfig+0x608>
 8007f48:	e042      	b.n	8007fd0 <UART_SetConfig+0x678>
 8007f4a:	2b20      	cmp	r3, #32
 8007f4c:	d02b      	beq.n	8007fa6 <UART_SetConfig+0x64e>
 8007f4e:	2b40      	cmp	r3, #64	; 0x40
 8007f50:	d02c      	beq.n	8007fac <UART_SetConfig+0x654>
 8007f52:	2b10      	cmp	r3, #16
 8007f54:	d014      	beq.n	8007f80 <UART_SetConfig+0x628>
 8007f56:	e03b      	b.n	8007fd0 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007f58:	f7fd ff7a 	bl	8005e50 <HAL_RCCEx_GetD3PCLK1Freq>
 8007f5c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007f5e:	e03d      	b.n	8007fdc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f60:	f107 0314 	add.w	r3, r7, #20
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7fd ff89 	bl	8005e7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f6e:	e035      	b.n	8007fdc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f70:	f107 0308 	add.w	r3, r7, #8
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7fe f8cd 	bl	8006114 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f7e:	e02d      	b.n	8007fdc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f80:	4b0d      	ldr	r3, [pc, #52]	; (8007fb8 <UART_SetConfig+0x660>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 0320 	and.w	r3, r3, #32
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d009      	beq.n	8007fa0 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007f8c:	4b0a      	ldr	r3, [pc, #40]	; (8007fb8 <UART_SetConfig+0x660>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	08db      	lsrs	r3, r3, #3
 8007f92:	f003 0303 	and.w	r3, r3, #3
 8007f96:	4a0c      	ldr	r2, [pc, #48]	; (8007fc8 <UART_SetConfig+0x670>)
 8007f98:	fa22 f303 	lsr.w	r3, r2, r3
 8007f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f9e:	e01d      	b.n	8007fdc <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8007fa0:	4b09      	ldr	r3, [pc, #36]	; (8007fc8 <UART_SetConfig+0x670>)
 8007fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007fa4:	e01a      	b.n	8007fdc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007fa6:	4b09      	ldr	r3, [pc, #36]	; (8007fcc <UART_SetConfig+0x674>)
 8007fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007faa:	e017      	b.n	8007fdc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007fb2:	e013      	b.n	8007fdc <UART_SetConfig+0x684>
 8007fb4:	40011400 	.word	0x40011400
 8007fb8:	58024400 	.word	0x58024400
 8007fbc:	40007800 	.word	0x40007800
 8007fc0:	40007c00 	.word	0x40007c00
 8007fc4:	58000c00 	.word	0x58000c00
 8007fc8:	03d09000 	.word	0x03d09000
 8007fcc:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007fda:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	f000 824d 	beq.w	800847e <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe8:	4aad      	ldr	r2, [pc, #692]	; (80082a0 <UART_SetConfig+0x948>)
 8007fea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ff6:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685a      	ldr	r2, [r3, #4]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	005b      	lsls	r3, r3, #1
 8008000:	4413      	add	r3, r2
 8008002:	6a3a      	ldr	r2, [r7, #32]
 8008004:	429a      	cmp	r2, r3
 8008006:	d305      	bcc.n	8008014 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800800e:	6a3a      	ldr	r2, [r7, #32]
 8008010:	429a      	cmp	r2, r3
 8008012:	d903      	bls.n	800801c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800801a:	e230      	b.n	800847e <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800801c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801e:	4618      	mov	r0, r3
 8008020:	f04f 0100 	mov.w	r1, #0
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008028:	4a9d      	ldr	r2, [pc, #628]	; (80082a0 <UART_SetConfig+0x948>)
 800802a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800802e:	b29b      	uxth	r3, r3
 8008030:	f04f 0400 	mov.w	r4, #0
 8008034:	461a      	mov	r2, r3
 8008036:	4623      	mov	r3, r4
 8008038:	f7f8 f9aa 	bl	8000390 <__aeabi_uldivmod>
 800803c:	4603      	mov	r3, r0
 800803e:	460c      	mov	r4, r1
 8008040:	4619      	mov	r1, r3
 8008042:	4622      	mov	r2, r4
 8008044:	f04f 0300 	mov.w	r3, #0
 8008048:	f04f 0400 	mov.w	r4, #0
 800804c:	0214      	lsls	r4, r2, #8
 800804e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008052:	020b      	lsls	r3, r1, #8
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	6852      	ldr	r2, [r2, #4]
 8008058:	0852      	lsrs	r2, r2, #1
 800805a:	4611      	mov	r1, r2
 800805c:	f04f 0200 	mov.w	r2, #0
 8008060:	eb13 0b01 	adds.w	fp, r3, r1
 8008064:	eb44 0c02 	adc.w	ip, r4, r2
 8008068:	4658      	mov	r0, fp
 800806a:	4661      	mov	r1, ip
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	f04f 0400 	mov.w	r4, #0
 8008074:	461a      	mov	r2, r3
 8008076:	4623      	mov	r3, r4
 8008078:	f7f8 f98a 	bl	8000390 <__aeabi_uldivmod>
 800807c:	4603      	mov	r3, r0
 800807e:	460c      	mov	r4, r1
 8008080:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008084:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008088:	d308      	bcc.n	800809c <UART_SetConfig+0x744>
 800808a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008090:	d204      	bcs.n	800809c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008098:	60da      	str	r2, [r3, #12]
 800809a:	e1f0      	b.n	800847e <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80080a2:	e1ec      	b.n	800847e <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	69db      	ldr	r3, [r3, #28]
 80080a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080ac:	f040 8100 	bne.w	80082b0 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 80080b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80080b4:	2b40      	cmp	r3, #64	; 0x40
 80080b6:	f200 80b7 	bhi.w	8008228 <UART_SetConfig+0x8d0>
 80080ba:	a201      	add	r2, pc, #4	; (adr r2, 80080c0 <UART_SetConfig+0x768>)
 80080bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c0:	080081c5 	.word	0x080081c5
 80080c4:	080081cd 	.word	0x080081cd
 80080c8:	08008229 	.word	0x08008229
 80080cc:	08008229 	.word	0x08008229
 80080d0:	080081d5 	.word	0x080081d5
 80080d4:	08008229 	.word	0x08008229
 80080d8:	08008229 	.word	0x08008229
 80080dc:	08008229 	.word	0x08008229
 80080e0:	080081e5 	.word	0x080081e5
 80080e4:	08008229 	.word	0x08008229
 80080e8:	08008229 	.word	0x08008229
 80080ec:	08008229 	.word	0x08008229
 80080f0:	08008229 	.word	0x08008229
 80080f4:	08008229 	.word	0x08008229
 80080f8:	08008229 	.word	0x08008229
 80080fc:	08008229 	.word	0x08008229
 8008100:	080081f5 	.word	0x080081f5
 8008104:	08008229 	.word	0x08008229
 8008108:	08008229 	.word	0x08008229
 800810c:	08008229 	.word	0x08008229
 8008110:	08008229 	.word	0x08008229
 8008114:	08008229 	.word	0x08008229
 8008118:	08008229 	.word	0x08008229
 800811c:	08008229 	.word	0x08008229
 8008120:	08008229 	.word	0x08008229
 8008124:	08008229 	.word	0x08008229
 8008128:	08008229 	.word	0x08008229
 800812c:	08008229 	.word	0x08008229
 8008130:	08008229 	.word	0x08008229
 8008134:	08008229 	.word	0x08008229
 8008138:	08008229 	.word	0x08008229
 800813c:	08008229 	.word	0x08008229
 8008140:	0800821b 	.word	0x0800821b
 8008144:	08008229 	.word	0x08008229
 8008148:	08008229 	.word	0x08008229
 800814c:	08008229 	.word	0x08008229
 8008150:	08008229 	.word	0x08008229
 8008154:	08008229 	.word	0x08008229
 8008158:	08008229 	.word	0x08008229
 800815c:	08008229 	.word	0x08008229
 8008160:	08008229 	.word	0x08008229
 8008164:	08008229 	.word	0x08008229
 8008168:	08008229 	.word	0x08008229
 800816c:	08008229 	.word	0x08008229
 8008170:	08008229 	.word	0x08008229
 8008174:	08008229 	.word	0x08008229
 8008178:	08008229 	.word	0x08008229
 800817c:	08008229 	.word	0x08008229
 8008180:	08008229 	.word	0x08008229
 8008184:	08008229 	.word	0x08008229
 8008188:	08008229 	.word	0x08008229
 800818c:	08008229 	.word	0x08008229
 8008190:	08008229 	.word	0x08008229
 8008194:	08008229 	.word	0x08008229
 8008198:	08008229 	.word	0x08008229
 800819c:	08008229 	.word	0x08008229
 80081a0:	08008229 	.word	0x08008229
 80081a4:	08008229 	.word	0x08008229
 80081a8:	08008229 	.word	0x08008229
 80081ac:	08008229 	.word	0x08008229
 80081b0:	08008229 	.word	0x08008229
 80081b4:	08008229 	.word	0x08008229
 80081b8:	08008229 	.word	0x08008229
 80081bc:	08008229 	.word	0x08008229
 80081c0:	08008221 	.word	0x08008221
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081c4:	f7fc ff2a 	bl	800501c <HAL_RCC_GetPCLK1Freq>
 80081c8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80081ca:	e033      	b.n	8008234 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081cc:	f7fc ff3c 	bl	8005048 <HAL_RCC_GetPCLK2Freq>
 80081d0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80081d2:	e02f      	b.n	8008234 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081d4:	f107 0314 	add.w	r3, r7, #20
 80081d8:	4618      	mov	r0, r3
 80081da:	f7fd fe4f 	bl	8005e7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081e2:	e027      	b.n	8008234 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081e4:	f107 0308 	add.w	r3, r7, #8
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7fd ff93 	bl	8006114 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081f2:	e01f      	b.n	8008234 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081f4:	4b2b      	ldr	r3, [pc, #172]	; (80082a4 <UART_SetConfig+0x94c>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f003 0320 	and.w	r3, r3, #32
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d009      	beq.n	8008214 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008200:	4b28      	ldr	r3, [pc, #160]	; (80082a4 <UART_SetConfig+0x94c>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	08db      	lsrs	r3, r3, #3
 8008206:	f003 0303 	and.w	r3, r3, #3
 800820a:	4a27      	ldr	r2, [pc, #156]	; (80082a8 <UART_SetConfig+0x950>)
 800820c:	fa22 f303 	lsr.w	r3, r2, r3
 8008210:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008212:	e00f      	b.n	8008234 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8008214:	4b24      	ldr	r3, [pc, #144]	; (80082a8 <UART_SetConfig+0x950>)
 8008216:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008218:	e00c      	b.n	8008234 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800821a:	4b24      	ldr	r3, [pc, #144]	; (80082ac <UART_SetConfig+0x954>)
 800821c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800821e:	e009      	b.n	8008234 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008220:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008224:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008226:	e005      	b.n	8008234 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8008228:	2300      	movs	r3, #0
 800822a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008232:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008236:	2b00      	cmp	r3, #0
 8008238:	f000 8121 	beq.w	800847e <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008240:	4a17      	ldr	r2, [pc, #92]	; (80082a0 <UART_SetConfig+0x948>)
 8008242:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008246:	461a      	mov	r2, r3
 8008248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824a:	fbb3 f3f2 	udiv	r3, r3, r2
 800824e:	005a      	lsls	r2, r3, #1
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	085b      	lsrs	r3, r3, #1
 8008256:	441a      	add	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008260:	b29b      	uxth	r3, r3
 8008262:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008266:	2b0f      	cmp	r3, #15
 8008268:	d916      	bls.n	8008298 <UART_SetConfig+0x940>
 800826a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008270:	d212      	bcs.n	8008298 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008274:	b29b      	uxth	r3, r3
 8008276:	f023 030f 	bic.w	r3, r3, #15
 800827a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800827c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827e:	085b      	lsrs	r3, r3, #1
 8008280:	b29b      	uxth	r3, r3
 8008282:	f003 0307 	and.w	r3, r3, #7
 8008286:	b29a      	uxth	r2, r3
 8008288:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800828a:	4313      	orrs	r3, r2
 800828c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008294:	60da      	str	r2, [r3, #12]
 8008296:	e0f2      	b.n	800847e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800829e:	e0ee      	b.n	800847e <UART_SetConfig+0xb26>
 80082a0:	0800c9f4 	.word	0x0800c9f4
 80082a4:	58024400 	.word	0x58024400
 80082a8:	03d09000 	.word	0x03d09000
 80082ac:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 80082b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80082b4:	2b40      	cmp	r3, #64	; 0x40
 80082b6:	f200 80b7 	bhi.w	8008428 <UART_SetConfig+0xad0>
 80082ba:	a201      	add	r2, pc, #4	; (adr r2, 80082c0 <UART_SetConfig+0x968>)
 80082bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c0:	080083c5 	.word	0x080083c5
 80082c4:	080083cd 	.word	0x080083cd
 80082c8:	08008429 	.word	0x08008429
 80082cc:	08008429 	.word	0x08008429
 80082d0:	080083d5 	.word	0x080083d5
 80082d4:	08008429 	.word	0x08008429
 80082d8:	08008429 	.word	0x08008429
 80082dc:	08008429 	.word	0x08008429
 80082e0:	080083e5 	.word	0x080083e5
 80082e4:	08008429 	.word	0x08008429
 80082e8:	08008429 	.word	0x08008429
 80082ec:	08008429 	.word	0x08008429
 80082f0:	08008429 	.word	0x08008429
 80082f4:	08008429 	.word	0x08008429
 80082f8:	08008429 	.word	0x08008429
 80082fc:	08008429 	.word	0x08008429
 8008300:	080083f5 	.word	0x080083f5
 8008304:	08008429 	.word	0x08008429
 8008308:	08008429 	.word	0x08008429
 800830c:	08008429 	.word	0x08008429
 8008310:	08008429 	.word	0x08008429
 8008314:	08008429 	.word	0x08008429
 8008318:	08008429 	.word	0x08008429
 800831c:	08008429 	.word	0x08008429
 8008320:	08008429 	.word	0x08008429
 8008324:	08008429 	.word	0x08008429
 8008328:	08008429 	.word	0x08008429
 800832c:	08008429 	.word	0x08008429
 8008330:	08008429 	.word	0x08008429
 8008334:	08008429 	.word	0x08008429
 8008338:	08008429 	.word	0x08008429
 800833c:	08008429 	.word	0x08008429
 8008340:	0800841b 	.word	0x0800841b
 8008344:	08008429 	.word	0x08008429
 8008348:	08008429 	.word	0x08008429
 800834c:	08008429 	.word	0x08008429
 8008350:	08008429 	.word	0x08008429
 8008354:	08008429 	.word	0x08008429
 8008358:	08008429 	.word	0x08008429
 800835c:	08008429 	.word	0x08008429
 8008360:	08008429 	.word	0x08008429
 8008364:	08008429 	.word	0x08008429
 8008368:	08008429 	.word	0x08008429
 800836c:	08008429 	.word	0x08008429
 8008370:	08008429 	.word	0x08008429
 8008374:	08008429 	.word	0x08008429
 8008378:	08008429 	.word	0x08008429
 800837c:	08008429 	.word	0x08008429
 8008380:	08008429 	.word	0x08008429
 8008384:	08008429 	.word	0x08008429
 8008388:	08008429 	.word	0x08008429
 800838c:	08008429 	.word	0x08008429
 8008390:	08008429 	.word	0x08008429
 8008394:	08008429 	.word	0x08008429
 8008398:	08008429 	.word	0x08008429
 800839c:	08008429 	.word	0x08008429
 80083a0:	08008429 	.word	0x08008429
 80083a4:	08008429 	.word	0x08008429
 80083a8:	08008429 	.word	0x08008429
 80083ac:	08008429 	.word	0x08008429
 80083b0:	08008429 	.word	0x08008429
 80083b4:	08008429 	.word	0x08008429
 80083b8:	08008429 	.word	0x08008429
 80083bc:	08008429 	.word	0x08008429
 80083c0:	08008421 	.word	0x08008421
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083c4:	f7fc fe2a 	bl	800501c <HAL_RCC_GetPCLK1Freq>
 80083c8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80083ca:	e033      	b.n	8008434 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083cc:	f7fc fe3c 	bl	8005048 <HAL_RCC_GetPCLK2Freq>
 80083d0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80083d2:	e02f      	b.n	8008434 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083d4:	f107 0314 	add.w	r3, r7, #20
 80083d8:	4618      	mov	r0, r3
 80083da:	f7fd fd4f 	bl	8005e7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083e2:	e027      	b.n	8008434 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083e4:	f107 0308 	add.w	r3, r7, #8
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7fd fe93 	bl	8006114 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083f2:	e01f      	b.n	8008434 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083f4:	4b2c      	ldr	r3, [pc, #176]	; (80084a8 <UART_SetConfig+0xb50>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0320 	and.w	r3, r3, #32
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d009      	beq.n	8008414 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008400:	4b29      	ldr	r3, [pc, #164]	; (80084a8 <UART_SetConfig+0xb50>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	08db      	lsrs	r3, r3, #3
 8008406:	f003 0303 	and.w	r3, r3, #3
 800840a:	4a28      	ldr	r2, [pc, #160]	; (80084ac <UART_SetConfig+0xb54>)
 800840c:	fa22 f303 	lsr.w	r3, r2, r3
 8008410:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008412:	e00f      	b.n	8008434 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8008414:	4b25      	ldr	r3, [pc, #148]	; (80084ac <UART_SetConfig+0xb54>)
 8008416:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008418:	e00c      	b.n	8008434 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800841a:	4b25      	ldr	r3, [pc, #148]	; (80084b0 <UART_SetConfig+0xb58>)
 800841c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800841e:	e009      	b.n	8008434 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008420:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008424:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008426:	e005      	b.n	8008434 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8008428:	2300      	movs	r3, #0
 800842a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008432:	bf00      	nop
    }

    if (pclk != 0U)
 8008434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008436:	2b00      	cmp	r3, #0
 8008438:	d021      	beq.n	800847e <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843e:	4a1d      	ldr	r2, [pc, #116]	; (80084b4 <UART_SetConfig+0xb5c>)
 8008440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008444:	461a      	mov	r2, r3
 8008446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008448:	fbb3 f2f2 	udiv	r2, r3, r2
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	085b      	lsrs	r3, r3, #1
 8008452:	441a      	add	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	fbb2 f3f3 	udiv	r3, r2, r3
 800845c:	b29b      	uxth	r3, r3
 800845e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008462:	2b0f      	cmp	r3, #15
 8008464:	d908      	bls.n	8008478 <UART_SetConfig+0xb20>
 8008466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800846c:	d204      	bcs.n	8008478 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008474:	60da      	str	r2, [r3, #12]
 8008476:	e002      	b.n	800847e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2201      	movs	r2, #1
 8008482:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800849a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3738      	adds	r7, #56	; 0x38
 80084a2:	46bd      	mov	sp, r7
 80084a4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80084a8:	58024400 	.word	0x58024400
 80084ac:	03d09000 	.word	0x03d09000
 80084b0:	003d0900 	.word	0x003d0900
 80084b4:	0800c9f4 	.word	0x0800c9f4

080084b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c4:	f003 0301 	and.w	r3, r3, #1
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00a      	beq.n	80084e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	430a      	orrs	r2, r1
 80084e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e6:	f003 0302 	and.w	r3, r3, #2
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00a      	beq.n	8008504 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	430a      	orrs	r2, r1
 8008502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008508:	f003 0304 	and.w	r3, r3, #4
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00a      	beq.n	8008526 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	430a      	orrs	r2, r1
 8008524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800852a:	f003 0308 	and.w	r3, r3, #8
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00a      	beq.n	8008548 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	430a      	orrs	r2, r1
 8008546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854c:	f003 0310 	and.w	r3, r3, #16
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00a      	beq.n	800856a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	430a      	orrs	r2, r1
 8008568:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800856e:	f003 0320 	and.w	r3, r3, #32
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00a      	beq.n	800858c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	430a      	orrs	r2, r1
 800858a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008594:	2b00      	cmp	r3, #0
 8008596:	d01a      	beq.n	80085ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	430a      	orrs	r2, r1
 80085ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085b6:	d10a      	bne.n	80085ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	430a      	orrs	r2, r1
 80085cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00a      	beq.n	80085f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	430a      	orrs	r2, r1
 80085ee:	605a      	str	r2, [r3, #4]
  }
}
 80085f0:	bf00      	nop
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af02      	add	r7, sp, #8
 8008602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800860c:	f7f8 ff28 	bl	8001460 <HAL_GetTick>
 8008610:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 0308 	and.w	r3, r3, #8
 800861c:	2b08      	cmp	r3, #8
 800861e:	d10e      	bne.n	800863e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008620:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008624:	9300      	str	r3, [sp, #0]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f82c 	bl	800868c <UART_WaitOnFlagUntilTimeout>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d001      	beq.n	800863e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	e022      	b.n	8008684 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f003 0304 	and.w	r3, r3, #4
 8008648:	2b04      	cmp	r3, #4
 800864a:	d10e      	bne.n	800866a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800864c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008650:	9300      	str	r3, [sp, #0]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f816 	bl	800868c <UART_WaitOnFlagUntilTimeout>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d001      	beq.n	800866a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008666:	2303      	movs	r3, #3
 8008668:	e00c      	b.n	8008684 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2220      	movs	r2, #32
 800866e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2220      	movs	r2, #32
 8008676:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	603b      	str	r3, [r7, #0]
 8008698:	4613      	mov	r3, r2
 800869a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800869c:	e062      	b.n	8008764 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a4:	d05e      	beq.n	8008764 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086a6:	f7f8 fedb 	bl	8001460 <HAL_GetTick>
 80086aa:	4602      	mov	r2, r0
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	69ba      	ldr	r2, [r7, #24]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d302      	bcc.n	80086bc <UART_WaitOnFlagUntilTimeout+0x30>
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d11d      	bne.n	80086f8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80086ca:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	689a      	ldr	r2, [r3, #8]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f022 0201 	bic.w	r2, r2, #1
 80086da:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2220      	movs	r2, #32
 80086e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2220      	movs	r2, #32
 80086e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80086f4:	2303      	movs	r3, #3
 80086f6:	e045      	b.n	8008784 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f003 0304 	and.w	r3, r3, #4
 8008702:	2b00      	cmp	r3, #0
 8008704:	d02e      	beq.n	8008764 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	69db      	ldr	r3, [r3, #28]
 800870c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008710:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008714:	d126      	bne.n	8008764 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800871e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800872e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	689a      	ldr	r2, [r3, #8]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f022 0201 	bic.w	r2, r2, #1
 800873e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2220      	movs	r2, #32
 8008744:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2220      	movs	r2, #32
 800874c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2220      	movs	r2, #32
 8008754:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8008760:	2303      	movs	r3, #3
 8008762:	e00f      	b.n	8008784 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	69da      	ldr	r2, [r3, #28]
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	4013      	ands	r3, r2
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	429a      	cmp	r2, r3
 8008772:	bf0c      	ite	eq
 8008774:	2301      	moveq	r3, #1
 8008776:	2300      	movne	r3, #0
 8008778:	b2db      	uxtb	r3, r3
 800877a:	461a      	mov	r2, r3
 800877c:	79fb      	ldrb	r3, [r7, #7]
 800877e:	429a      	cmp	r2, r3
 8008780:	d08d      	beq.n	800869e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3710      	adds	r7, #16
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800879a:	2b01      	cmp	r3, #1
 800879c:	d101      	bne.n	80087a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800879e:	2302      	movs	r3, #2
 80087a0:	e027      	b.n	80087f2 <HAL_UARTEx_DisableFifoMode+0x66>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2201      	movs	r2, #1
 80087a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2224      	movs	r2, #36	; 0x24
 80087ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f022 0201 	bic.w	r2, r2, #1
 80087c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80087d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2220      	movs	r2, #32
 80087e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3714      	adds	r7, #20
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr

080087fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b084      	sub	sp, #16
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800880e:	2b01      	cmp	r3, #1
 8008810:	d101      	bne.n	8008816 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008812:	2302      	movs	r3, #2
 8008814:	e02d      	b.n	8008872 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2201      	movs	r2, #1
 800881a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2224      	movs	r2, #36	; 0x24
 8008822:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f022 0201 	bic.w	r2, r2, #1
 800883c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	683a      	ldr	r2, [r7, #0]
 800884e:	430a      	orrs	r2, r1
 8008850:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f850 	bl	80088f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2220      	movs	r2, #32
 8008864:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b084      	sub	sp, #16
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800888a:	2b01      	cmp	r3, #1
 800888c:	d101      	bne.n	8008892 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800888e:	2302      	movs	r3, #2
 8008890:	e02d      	b.n	80088ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2201      	movs	r2, #1
 8008896:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2224      	movs	r2, #36	; 0x24
 800889e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f022 0201 	bic.w	r2, r2, #1
 80088b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	683a      	ldr	r2, [r7, #0]
 80088ca:	430a      	orrs	r2, r1
 80088cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 f812 	bl	80088f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2220      	movs	r2, #32
 80088e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
	...

080088f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b089      	sub	sp, #36	; 0x24
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008900:	4a2f      	ldr	r2, [pc, #188]	; (80089c0 <UARTEx_SetNbDataToProcess+0xc8>)
 8008902:	f107 0314 	add.w	r3, r7, #20
 8008906:	e892 0003 	ldmia.w	r2, {r0, r1}
 800890a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800890e:	4a2d      	ldr	r2, [pc, #180]	; (80089c4 <UARTEx_SetNbDataToProcess+0xcc>)
 8008910:	f107 030c 	add.w	r3, r7, #12
 8008914:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008918:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008920:	2b00      	cmp	r3, #0
 8008922:	d108      	bne.n	8008936 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008934:	e03d      	b.n	80089b2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008936:	2310      	movs	r3, #16
 8008938:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800893a:	2310      	movs	r3, #16
 800893c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	0e5b      	lsrs	r3, r3, #25
 8008946:	b2db      	uxtb	r3, r3
 8008948:	f003 0307 	and.w	r3, r3, #7
 800894c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	0f5b      	lsrs	r3, r3, #29
 8008956:	b2db      	uxtb	r3, r3
 8008958:	f003 0307 	and.w	r3, r3, #7
 800895c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800895e:	7fbb      	ldrb	r3, [r7, #30]
 8008960:	7f3a      	ldrb	r2, [r7, #28]
 8008962:	f107 0120 	add.w	r1, r7, #32
 8008966:	440a      	add	r2, r1
 8008968:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800896c:	fb02 f303 	mul.w	r3, r2, r3
 8008970:	7f3a      	ldrb	r2, [r7, #28]
 8008972:	f107 0120 	add.w	r1, r7, #32
 8008976:	440a      	add	r2, r1
 8008978:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800897c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008980:	b29a      	uxth	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008988:	7ffb      	ldrb	r3, [r7, #31]
 800898a:	7f7a      	ldrb	r2, [r7, #29]
 800898c:	f107 0120 	add.w	r1, r7, #32
 8008990:	440a      	add	r2, r1
 8008992:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008996:	fb02 f303 	mul.w	r3, r2, r3
 800899a:	7f7a      	ldrb	r2, [r7, #29]
 800899c:	f107 0120 	add.w	r1, r7, #32
 80089a0:	440a      	add	r2, r1
 80089a2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80089a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80089b2:	bf00      	nop
 80089b4:	3724      	adds	r7, #36	; 0x24
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	0800c988 	.word	0x0800c988
 80089c4:	0800c990 	.word	0x0800c990

080089c8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80089cc:	4904      	ldr	r1, [pc, #16]	; (80089e0 <MX_FATFS_Init+0x18>)
 80089ce:	4805      	ldr	r0, [pc, #20]	; (80089e4 <MX_FATFS_Init+0x1c>)
 80089d0:	f003 faba 	bl	800bf48 <FATFS_LinkDriver>
 80089d4:	4603      	mov	r3, r0
 80089d6:	461a      	mov	r2, r3
 80089d8:	4b03      	ldr	r3, [pc, #12]	; (80089e8 <MX_FATFS_Init+0x20>)
 80089da:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80089dc:	bf00      	nop
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	24000dec 	.word	0x24000dec
 80089e4:	24000010 	.word	0x24000010
 80089e8:	24000df0 	.word	0x24000df0

080089ec <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80089ec:	b480      	push	{r7}
 80089ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80089f0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	4603      	mov	r3, r0
 8008a04:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
    return USER_SPI_initialize(pdrv);
 8008a06:	79fb      	ldrb	r3, [r7, #7]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f000 fa91 	bl	8008f30 <USER_SPI_initialize>
 8008a0e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	4603      	mov	r3, r0
 8008a20:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
    return USER_SPI_status(pdrv);
 8008a22:	79fb      	ldrb	r3, [r7, #7]
 8008a24:	4618      	mov	r0, r3
 8008a26:	f000 fb63 	bl	80090f0 <USER_SPI_status>
 8008a2a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60b9      	str	r1, [r7, #8]
 8008a3c:	607a      	str	r2, [r7, #4]
 8008a3e:	603b      	str	r3, [r7, #0]
 8008a40:	4603      	mov	r3, r0
 8008a42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
    return USER_SPI_read(pdrv, buff, sector, count);
 8008a44:	7bf8      	ldrb	r0, [r7, #15]
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	68b9      	ldr	r1, [r7, #8]
 8008a4c:	f000 fb66 	bl	800911c <USER_SPI_read>
 8008a50:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3710      	adds	r7, #16
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b084      	sub	sp, #16
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	607a      	str	r2, [r7, #4]
 8008a64:	603b      	str	r3, [r7, #0]
 8008a66:	4603      	mov	r3, r0
 8008a68:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
    return USER_SPI_write(pdrv, buff, sector, count);
 8008a6a:	7bf8      	ldrb	r0, [r7, #15]
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	68b9      	ldr	r1, [r7, #8]
 8008a72:	f000 fbb9 	bl	80091e8 <USER_SPI_write>
 8008a76:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <USER_write_dma>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60b9      	str	r1, [r7, #8]
 8008a88:	607a      	str	r2, [r7, #4]
 8008a8a:	603b      	str	r3, [r7, #0]
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
    return USER_SPI_write_dma(pdrv, buff, sector, count);
 8008a90:	7bf8      	ldrb	r0, [r7, #15]
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	68b9      	ldr	r1, [r7, #8]
 8008a98:	f000 fc22 	bl	80092e0 <USER_SPI_write_dma>
 8008a9c:	4603      	mov	r3, r0
//    return USER_SPI_write_dma(pdrv, buff, sector, count);
  /* USER CODE END WRITE */
}DRESULT USER_write_dma_start (
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <USER_write_dma_start>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b084      	sub	sp, #16
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]
 8008ab0:	603b      	str	r3, [r7, #0]
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
    return USER_SPI_write_dma_start(pdrv, buff, sector, count);
 8008ab6:	7bf8      	ldrb	r0, [r7, #15]
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	68b9      	ldr	r1, [r7, #8]
 8008abe:	f000 fc8d 	bl	80093dc <USER_SPI_write_dma_start>
 8008ac2:	4603      	mov	r3, r0
//    return USER_SPI_write_dma(pdrv, buff, sector, count);
  /* USER CODE END WRITE */
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <USER_write_dma_cplt>:

DRESULT USER_write_dma_cplt (
)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
    return USER_SPI_write_dma_cplt();
 8008ad0:	f000 fd00 	bl	80094d4 <USER_SPI_write_dma_cplt>
 8008ad4:	4603      	mov	r3, r0
//    return USER_SPI_write_dma(pdrv, buff, sector, count);
  /* USER CODE END WRITE */
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b082      	sub	sp, #8
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	603a      	str	r2, [r7, #0]
 8008ae4:	71fb      	strb	r3, [r7, #7]
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8008aea:	79b9      	ldrb	r1, [r7, #6]
 8008aec:	79fb      	ldrb	r3, [r7, #7]
 8008aee:	683a      	ldr	r2, [r7, #0]
 8008af0:	4618      	mov	r0, r3
 8008af2:	f000 fd01 	bl	80094f8 <USER_SPI_ioctl>
 8008af6:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3708      	adds	r7, #8
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8008b08:	f7f8 fcaa 	bl	8001460 <HAL_GetTick>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	4b04      	ldr	r3, [pc, #16]	; (8008b20 <SPI_Timer_On+0x20>)
 8008b10:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8008b12:	4a04      	ldr	r2, [pc, #16]	; (8008b24 <SPI_Timer_On+0x24>)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6013      	str	r3, [r2, #0]
}
 8008b18:	bf00      	nop
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	24001254 	.word	0x24001254
 8008b24:	24001258 	.word	0x24001258

08008b28 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8008b2c:	f7f8 fc98 	bl	8001460 <HAL_GetTick>
 8008b30:	4602      	mov	r2, r0
 8008b32:	4b06      	ldr	r3, [pc, #24]	; (8008b4c <SPI_Timer_Status+0x24>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	1ad2      	subs	r2, r2, r3
 8008b38:	4b05      	ldr	r3, [pc, #20]	; (8008b50 <SPI_Timer_Status+0x28>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	bf34      	ite	cc
 8008b40:	2301      	movcc	r3, #1
 8008b42:	2300      	movcs	r3, #0
 8008b44:	b2db      	uxtb	r3, r3
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	24001254 	.word	0x24001254
 8008b50:	24001258 	.word	0x24001258

08008b54 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b086      	sub	sp, #24
 8008b58:	af02      	add	r7, sp, #8
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8008b5e:	f107 020f 	add.w	r2, r7, #15
 8008b62:	1df9      	adds	r1, r7, #7
 8008b64:	2332      	movs	r3, #50	; 0x32
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	2301      	movs	r3, #1
 8008b6a:	4804      	ldr	r0, [pc, #16]	; (8008b7c <xchg_spi+0x28>)
 8008b6c:	f7fd fe7a 	bl	8006864 <HAL_SPI_TransmitReceive>
    return rxDat;
 8008b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	240000b4 	.word	0x240000b4

08008b80 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8008b80:	b590      	push	{r4, r7, lr}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	60fb      	str	r3, [r7, #12]
 8008b8e:	e00a      	b.n	8008ba6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	18d4      	adds	r4, r2, r3
 8008b96:	20ff      	movs	r0, #255	; 0xff
 8008b98:	f7ff ffdc 	bl	8008b54 <xchg_spi>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	60fb      	str	r3, [r7, #12]
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d3f0      	bcc.n	8008b90 <rcvr_spi_multi+0x10>
	}
}
 8008bae:	bf00      	nop
 8008bb0:	3714      	adds	r7, #20
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd90      	pop	{r4, r7, pc}

08008bb6 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b084      	sub	sp, #16
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
 8008bbe:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	60fb      	str	r3, [r7, #12]
 8008bc4:	e009      	b.n	8008bda <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	4413      	add	r3, r2
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7ff ffc0 	bl	8008b54 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	60fb      	str	r3, [r7, #12]
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d3f1      	bcc.n	8008bc6 <xmit_spi_multi+0x10>
	}
}
 8008be2:	bf00      	nop
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b086      	sub	sp, #24
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8008bf2:	f7f8 fc35 	bl	8001460 <HAL_GetTick>
 8008bf6:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8008bfc:	20ff      	movs	r0, #255	; 0xff
 8008bfe:	f7ff ffa9 	bl	8008b54 <xchg_spi>
 8008c02:	4603      	mov	r3, r0
 8008c04:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	2bff      	cmp	r3, #255	; 0xff
 8008c0a:	d007      	beq.n	8008c1c <wait_ready+0x32>
 8008c0c:	f7f8 fc28 	bl	8001460 <HAL_GetTick>
 8008c10:	4602      	mov	r2, r0
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	1ad3      	subs	r3, r2, r3
 8008c16:	693a      	ldr	r2, [r7, #16]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d8ef      	bhi.n	8008bfc <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8008c1c:	7bfb      	ldrb	r3, [r7, #15]
 8008c1e:	2bff      	cmp	r3, #255	; 0xff
 8008c20:	bf0c      	ite	eq
 8008c22:	2301      	moveq	r3, #1
 8008c24:	2300      	movne	r3, #0
 8008c26:	b2db      	uxtb	r3, r3
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3718      	adds	r7, #24
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8008c34:	2201      	movs	r2, #1
 8008c36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008c3a:	4804      	ldr	r0, [pc, #16]	; (8008c4c <despiselect+0x1c>)
 8008c3c:	f7fb fa32 	bl	80040a4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8008c40:	20ff      	movs	r0, #255	; 0xff
 8008c42:	f7ff ff87 	bl	8008b54 <xchg_spi>

}
 8008c46:	bf00      	nop
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	58020800 	.word	0x58020800

08008c50 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8008c54:	2200      	movs	r2, #0
 8008c56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008c5a:	480a      	ldr	r0, [pc, #40]	; (8008c84 <spiselect+0x34>)
 8008c5c:	f7fb fa22 	bl	80040a4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8008c60:	20ff      	movs	r0, #255	; 0xff
 8008c62:	f7ff ff77 	bl	8008b54 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8008c66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008c6a:	f7ff ffbe 	bl	8008bea <wait_ready>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d001      	beq.n	8008c78 <spiselect+0x28>
 8008c74:	2301      	movs	r3, #1
 8008c76:	e002      	b.n	8008c7e <spiselect+0x2e>

	despiselect();
 8008c78:	f7ff ffda 	bl	8008c30 <despiselect>
	return 0;	/* Timeout */
 8008c7c:	2300      	movs	r3, #0
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	58020800 	.word	0x58020800

08008c88 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8008c92:	20c8      	movs	r0, #200	; 0xc8
 8008c94:	f7ff ff34 	bl	8008b00 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8008c98:	20ff      	movs	r0, #255	; 0xff
 8008c9a:	f7ff ff5b 	bl	8008b54 <xchg_spi>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8008ca2:	7bfb      	ldrb	r3, [r7, #15]
 8008ca4:	2bff      	cmp	r3, #255	; 0xff
 8008ca6:	d104      	bne.n	8008cb2 <rcvr_datablock+0x2a>
 8008ca8:	f7ff ff3e 	bl	8008b28 <SPI_Timer_Status>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d1f2      	bne.n	8008c98 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8008cb2:	7bfb      	ldrb	r3, [r7, #15]
 8008cb4:	2bfe      	cmp	r3, #254	; 0xfe
 8008cb6:	d001      	beq.n	8008cbc <rcvr_datablock+0x34>
 8008cb8:	2300      	movs	r3, #0
 8008cba:	e00a      	b.n	8008cd2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8008cbc:	6839      	ldr	r1, [r7, #0]
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f7ff ff5e 	bl	8008b80 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8008cc4:	20ff      	movs	r0, #255	; 0xff
 8008cc6:	f7ff ff45 	bl	8008b54 <xchg_spi>
 8008cca:	20ff      	movs	r0, #255	; 0xff
 8008ccc:	f7ff ff42 	bl	8008b54 <xchg_spi>

	return 1;						/* Function succeeded */
 8008cd0:	2301      	movs	r3, #1
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b084      	sub	sp, #16
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008ce6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008cea:	f7ff ff7e 	bl	8008bea <wait_ready>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d101      	bne.n	8008cf8 <xmit_datablock+0x1e>
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	e01e      	b.n	8008d36 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8008cf8:	78fb      	ldrb	r3, [r7, #3]
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7ff ff2a 	bl	8008b54 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008d00:	78fb      	ldrb	r3, [r7, #3]
 8008d02:	2bfd      	cmp	r3, #253	; 0xfd
 8008d04:	d016      	beq.n	8008d34 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8008d06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7ff ff53 	bl	8008bb6 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008d10:	20ff      	movs	r0, #255	; 0xff
 8008d12:	f7ff ff1f 	bl	8008b54 <xchg_spi>
 8008d16:	20ff      	movs	r0, #255	; 0xff
 8008d18:	f7ff ff1c 	bl	8008b54 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8008d1c:	20ff      	movs	r0, #255	; 0xff
 8008d1e:	f7ff ff19 	bl	8008b54 <xchg_spi>
 8008d22:	4603      	mov	r3, r0
 8008d24:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8008d26:	7bfb      	ldrb	r3, [r7, #15]
 8008d28:	f003 031f 	and.w	r3, r3, #31
 8008d2c:	2b05      	cmp	r3, #5
 8008d2e:	d001      	beq.n	8008d34 <xmit_datablock+0x5a>
 8008d30:	2300      	movs	r3, #0
 8008d32:	e000      	b.n	8008d36 <xmit_datablock+0x5c>
	}
	return 1;
 8008d34:	2301      	movs	r3, #1
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
	...

08008d40 <xmit_data_dma>:
int xmit_data_dma (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	UINT count,			/* Number of sectors to write (1..128) */
	BYTE token			/* Token */
)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	71fb      	strb	r3, [r7, #7]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008d4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008d52:	f7ff ff4a 	bl	8008bea <wait_ready>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d101      	bne.n	8008d60 <xmit_data_dma+0x20>
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	e025      	b.n	8008dac <xmit_data_dma+0x6c>

	xchg_spi(token);					/* Send token */
 8008d60:	79fb      	ldrb	r3, [r7, #7]
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7ff fef6 	bl	8008b54 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008d68:	79fb      	ldrb	r3, [r7, #7]
 8008d6a:	2bfd      	cmp	r3, #253	; 0xfd
 8008d6c:	d01d      	beq.n	8008daa <xmit_data_dma+0x6a>
		HAL_SPI_Transmit_DMA(&SD_SPI_HANDLE, buff, count * 512);
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	025b      	lsls	r3, r3, #9
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	461a      	mov	r2, r3
 8008d78:	68f9      	ldr	r1, [r7, #12]
 8008d7a:	480e      	ldr	r0, [pc, #56]	; (8008db4 <xmit_data_dma+0x74>)
 8008d7c:	f7fe f85e 	bl	8006e3c <HAL_SPI_Transmit_DMA>
		HAL_Delay(200);//15
 8008d80:	20c8      	movs	r0, #200	; 0xc8
 8008d82:	f7f8 fb79 	bl	8001478 <HAL_Delay>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008d86:	20ff      	movs	r0, #255	; 0xff
 8008d88:	f7ff fee4 	bl	8008b54 <xchg_spi>
 8008d8c:	20ff      	movs	r0, #255	; 0xff
 8008d8e:	f7ff fee1 	bl	8008b54 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8008d92:	20ff      	movs	r0, #255	; 0xff
 8008d94:	f7ff fede 	bl	8008b54 <xchg_spi>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	75fb      	strb	r3, [r7, #23]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8008d9c:	7dfb      	ldrb	r3, [r7, #23]
 8008d9e:	f003 031f 	and.w	r3, r3, #31
 8008da2:	2b05      	cmp	r3, #5
 8008da4:	d001      	beq.n	8008daa <xmit_data_dma+0x6a>
 8008da6:	2300      	movs	r3, #0
 8008da8:	e000      	b.n	8008dac <xmit_data_dma+0x6c>
	}
	return 1;
 8008daa:	2301      	movs	r3, #1
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3718      	adds	r7, #24
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	240000b4 	.word	0x240000b4

08008db8 <xmit_data_dma_start>:
int xmit_data_dma_start (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	UINT count,			/* Number of sectors to write (1..128) */
	BYTE token			/* Token */
)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b086      	sub	sp, #24
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	71fb      	strb	r3, [r7, #7]
	BYTE resp;
	HAL_StatusTypeDef ret;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008dc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008dca:	f7ff ff0e 	bl	8008bea <wait_ready>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d101      	bne.n	8008dd8 <xmit_data_dma_start+0x20>
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	e01b      	b.n	8008e10 <xmit_data_dma_start+0x58>

	xchg_spi(token);					/* Send token */
 8008dd8:	79fb      	ldrb	r3, [r7, #7]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7ff feba 	bl	8008b54 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008de0:	79fb      	ldrb	r3, [r7, #7]
 8008de2:	2bfd      	cmp	r3, #253	; 0xfd
 8008de4:	d00e      	beq.n	8008e04 <xmit_data_dma_start+0x4c>
	  ret = HAL_SPI_Transmit_DMA(&SD_SPI_HANDLE, buff, count * 512);
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	025b      	lsls	r3, r3, #9
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	461a      	mov	r2, r3
 8008df0:	68f9      	ldr	r1, [r7, #12]
 8008df2:	4809      	ldr	r0, [pc, #36]	; (8008e18 <xmit_data_dma_start+0x60>)
 8008df4:	f7fe f822 	bl	8006e3c <HAL_SPI_Transmit_DMA>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	75fb      	strb	r3, [r7, #23]
	  HAL_Delay(500);
 8008dfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008e00:	f7f8 fb3a 	bl	8001478 <HAL_Delay>
	}
	return ret == HAL_OK ? 1 : 0;
 8008e04:	7dfb      	ldrb	r3, [r7, #23]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	bf0c      	ite	eq
 8008e0a:	2301      	moveq	r3, #1
 8008e0c:	2300      	movne	r3, #0
 8008e0e:	b2db      	uxtb	r3, r3
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3718      	adds	r7, #24
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	240000b4 	.word	0x240000b4

08008e1c <xmit_data_dma_cplt>:

static
int xmit_data_dma_cplt (	/* 1:OK, 0:Failed */
)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
	BYTE resp;

	xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008e22:	20ff      	movs	r0, #255	; 0xff
 8008e24:	f7ff fe96 	bl	8008b54 <xchg_spi>
 8008e28:	20ff      	movs	r0, #255	; 0xff
 8008e2a:	f7ff fe93 	bl	8008b54 <xchg_spi>
	resp = xchg_spi(0xFF);				/* Receive data resp */
 8008e2e:	20ff      	movs	r0, #255	; 0xff
 8008e30:	f7ff fe90 	bl	8008b54 <xchg_spi>
 8008e34:	4603      	mov	r3, r0
 8008e36:	71fb      	strb	r3, [r7, #7]
	if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8008e38:	79fb      	ldrb	r3, [r7, #7]
 8008e3a:	f003 031f 	and.w	r3, r3, #31
 8008e3e:	2b05      	cmp	r3, #5
 8008e40:	d001      	beq.n	8008e46 <xmit_data_dma_cplt+0x2a>
 8008e42:	2300      	movs	r3, #0
 8008e44:	e000      	b.n	8008e48 <xmit_data_dma_cplt+0x2c>
	return 1;
 8008e46:	2301      	movs	r3, #1
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	4603      	mov	r3, r0
 8008e58:	6039      	str	r1, [r7, #0]
 8008e5a:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8008e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	da0e      	bge.n	8008e82 <send_cmd+0x32>
		cmd &= 0x7F;
 8008e64:	79fb      	ldrb	r3, [r7, #7]
 8008e66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e6a:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8008e6c:	2100      	movs	r1, #0
 8008e6e:	2037      	movs	r0, #55	; 0x37
 8008e70:	f7ff ffee 	bl	8008e50 <send_cmd>
 8008e74:	4603      	mov	r3, r0
 8008e76:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8008e78:	7bbb      	ldrb	r3, [r7, #14]
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d901      	bls.n	8008e82 <send_cmd+0x32>
 8008e7e:	7bbb      	ldrb	r3, [r7, #14]
 8008e80:	e051      	b.n	8008f26 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8008e82:	79fb      	ldrb	r3, [r7, #7]
 8008e84:	2b0c      	cmp	r3, #12
 8008e86:	d008      	beq.n	8008e9a <send_cmd+0x4a>
		despiselect();
 8008e88:	f7ff fed2 	bl	8008c30 <despiselect>
		if (!spiselect()) return 0xFF;
 8008e8c:	f7ff fee0 	bl	8008c50 <spiselect>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d101      	bne.n	8008e9a <send_cmd+0x4a>
 8008e96:	23ff      	movs	r3, #255	; 0xff
 8008e98:	e045      	b.n	8008f26 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8008e9a:	79fb      	ldrb	r3, [r7, #7]
 8008e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7ff fe56 	bl	8008b54 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	0e1b      	lsrs	r3, r3, #24
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7ff fe50 	bl	8008b54 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	0c1b      	lsrs	r3, r3, #16
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7ff fe4a 	bl	8008b54 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	0a1b      	lsrs	r3, r3, #8
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7ff fe44 	bl	8008b54 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7ff fe3f 	bl	8008b54 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8008eda:	79fb      	ldrb	r3, [r7, #7]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d101      	bne.n	8008ee4 <send_cmd+0x94>
 8008ee0:	2395      	movs	r3, #149	; 0x95
 8008ee2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8008ee4:	79fb      	ldrb	r3, [r7, #7]
 8008ee6:	2b08      	cmp	r3, #8
 8008ee8:	d101      	bne.n	8008eee <send_cmd+0x9e>
 8008eea:	2387      	movs	r3, #135	; 0x87
 8008eec:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8008eee:	7bfb      	ldrb	r3, [r7, #15]
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7ff fe2f 	bl	8008b54 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8008ef6:	79fb      	ldrb	r3, [r7, #7]
 8008ef8:	2b0c      	cmp	r3, #12
 8008efa:	d102      	bne.n	8008f02 <send_cmd+0xb2>
 8008efc:	20ff      	movs	r0, #255	; 0xff
 8008efe:	f7ff fe29 	bl	8008b54 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8008f02:	230a      	movs	r3, #10
 8008f04:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8008f06:	20ff      	movs	r0, #255	; 0xff
 8008f08:	f7ff fe24 	bl	8008b54 <xchg_spi>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8008f10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	da05      	bge.n	8008f24 <send_cmd+0xd4>
 8008f18:	7bfb      	ldrb	r3, [r7, #15]
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	73fb      	strb	r3, [r7, #15]
 8008f1e:	7bfb      	ldrb	r3, [r7, #15]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1f0      	bne.n	8008f06 <send_cmd+0xb6>

	return res;							/* Return received response */
 8008f24:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
	...

08008f30 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8008f30:	b590      	push	{r4, r7, lr}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	4603      	mov	r3, r0
 8008f38:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8008f3a:	79fb      	ldrb	r3, [r7, #7]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d001      	beq.n	8008f44 <USER_SPI_initialize+0x14>
 8008f40:	2301      	movs	r3, #1
 8008f42:	e0ca      	b.n	80090da <USER_SPI_initialize+0x1aa>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8008f44:	4b67      	ldr	r3, [pc, #412]	; (80090e4 <USER_SPI_initialize+0x1b4>)
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	f003 0302 	and.w	r3, r3, #2
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d003      	beq.n	8008f5a <USER_SPI_initialize+0x2a>
 8008f52:	4b64      	ldr	r3, [pc, #400]	; (80090e4 <USER_SPI_initialize+0x1b4>)
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	e0bf      	b.n	80090da <USER_SPI_initialize+0x1aa>

	FCLK_SLOW();
 8008f5a:	4b63      	ldr	r3, [pc, #396]	; (80090e8 <USER_SPI_initialize+0x1b8>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	22aa      	movs	r2, #170	; 0xaa
 8008f60:	651a      	str	r2, [r3, #80]	; 0x50
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8008f62:	230a      	movs	r3, #10
 8008f64:	73fb      	strb	r3, [r7, #15]
 8008f66:	e005      	b.n	8008f74 <USER_SPI_initialize+0x44>
 8008f68:	20ff      	movs	r0, #255	; 0xff
 8008f6a:	f7ff fdf3 	bl	8008b54 <xchg_spi>
 8008f6e:	7bfb      	ldrb	r3, [r7, #15]
 8008f70:	3b01      	subs	r3, #1
 8008f72:	73fb      	strb	r3, [r7, #15]
 8008f74:	7bfb      	ldrb	r3, [r7, #15]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1f6      	bne.n	8008f68 <USER_SPI_initialize+0x38>

	ty = 0;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8008f7e:	2100      	movs	r1, #0
 8008f80:	2000      	movs	r0, #0
 8008f82:	f7ff ff65 	bl	8008e50 <send_cmd>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	f040 808b 	bne.w	80090a4 <USER_SPI_initialize+0x174>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8008f8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008f92:	f7ff fdb5 	bl	8008b00 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8008f96:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008f9a:	2008      	movs	r0, #8
 8008f9c:	f7ff ff58 	bl	8008e50 <send_cmd>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d151      	bne.n	800904a <USER_SPI_initialize+0x11a>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	73fb      	strb	r3, [r7, #15]
 8008faa:	e00d      	b.n	8008fc8 <USER_SPI_initialize+0x98>
 8008fac:	7bfc      	ldrb	r4, [r7, #15]
 8008fae:	20ff      	movs	r0, #255	; 0xff
 8008fb0:	f7ff fdd0 	bl	8008b54 <xchg_spi>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	f107 0310 	add.w	r3, r7, #16
 8008fbc:	4423      	add	r3, r4
 8008fbe:	f803 2c08 	strb.w	r2, [r3, #-8]
 8008fc2:	7bfb      	ldrb	r3, [r7, #15]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	73fb      	strb	r3, [r7, #15]
 8008fc8:	7bfb      	ldrb	r3, [r7, #15]
 8008fca:	2b03      	cmp	r3, #3
 8008fcc:	d9ee      	bls.n	8008fac <USER_SPI_initialize+0x7c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8008fce:	7abb      	ldrb	r3, [r7, #10]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d167      	bne.n	80090a4 <USER_SPI_initialize+0x174>
 8008fd4:	7afb      	ldrb	r3, [r7, #11]
 8008fd6:	2baa      	cmp	r3, #170	; 0xaa
 8008fd8:	d164      	bne.n	80090a4 <USER_SPI_initialize+0x174>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8008fda:	bf00      	nop
 8008fdc:	f7ff fda4 	bl	8008b28 <SPI_Timer_Status>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d007      	beq.n	8008ff6 <USER_SPI_initialize+0xc6>
 8008fe6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008fea:	20a9      	movs	r0, #169	; 0xa9
 8008fec:	f7ff ff30 	bl	8008e50 <send_cmd>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d1f2      	bne.n	8008fdc <USER_SPI_initialize+0xac>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8008ff6:	f7ff fd97 	bl	8008b28 <SPI_Timer_Status>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d051      	beq.n	80090a4 <USER_SPI_initialize+0x174>
 8009000:	2100      	movs	r1, #0
 8009002:	203a      	movs	r0, #58	; 0x3a
 8009004:	f7ff ff24 	bl	8008e50 <send_cmd>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d14a      	bne.n	80090a4 <USER_SPI_initialize+0x174>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800900e:	2300      	movs	r3, #0
 8009010:	73fb      	strb	r3, [r7, #15]
 8009012:	e00d      	b.n	8009030 <USER_SPI_initialize+0x100>
 8009014:	7bfc      	ldrb	r4, [r7, #15]
 8009016:	20ff      	movs	r0, #255	; 0xff
 8009018:	f7ff fd9c 	bl	8008b54 <xchg_spi>
 800901c:	4603      	mov	r3, r0
 800901e:	461a      	mov	r2, r3
 8009020:	f107 0310 	add.w	r3, r7, #16
 8009024:	4423      	add	r3, r4
 8009026:	f803 2c08 	strb.w	r2, [r3, #-8]
 800902a:	7bfb      	ldrb	r3, [r7, #15]
 800902c:	3301      	adds	r3, #1
 800902e:	73fb      	strb	r3, [r7, #15]
 8009030:	7bfb      	ldrb	r3, [r7, #15]
 8009032:	2b03      	cmp	r3, #3
 8009034:	d9ee      	bls.n	8009014 <USER_SPI_initialize+0xe4>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8009036:	7a3b      	ldrb	r3, [r7, #8]
 8009038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800903c:	2b00      	cmp	r3, #0
 800903e:	d001      	beq.n	8009044 <USER_SPI_initialize+0x114>
 8009040:	230c      	movs	r3, #12
 8009042:	e000      	b.n	8009046 <USER_SPI_initialize+0x116>
 8009044:	2304      	movs	r3, #4
 8009046:	737b      	strb	r3, [r7, #13]
 8009048:	e02c      	b.n	80090a4 <USER_SPI_initialize+0x174>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800904a:	2100      	movs	r1, #0
 800904c:	20a9      	movs	r0, #169	; 0xa9
 800904e:	f7ff feff 	bl	8008e50 <send_cmd>
 8009052:	4603      	mov	r3, r0
 8009054:	2b01      	cmp	r3, #1
 8009056:	d804      	bhi.n	8009062 <USER_SPI_initialize+0x132>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8009058:	2302      	movs	r3, #2
 800905a:	737b      	strb	r3, [r7, #13]
 800905c:	23a9      	movs	r3, #169	; 0xa9
 800905e:	73bb      	strb	r3, [r7, #14]
 8009060:	e003      	b.n	800906a <USER_SPI_initialize+0x13a>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8009062:	2301      	movs	r3, #1
 8009064:	737b      	strb	r3, [r7, #13]
 8009066:	2301      	movs	r3, #1
 8009068:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800906a:	bf00      	nop
 800906c:	f7ff fd5c 	bl	8008b28 <SPI_Timer_Status>
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d007      	beq.n	8009086 <USER_SPI_initialize+0x156>
 8009076:	7bbb      	ldrb	r3, [r7, #14]
 8009078:	2100      	movs	r1, #0
 800907a:	4618      	mov	r0, r3
 800907c:	f7ff fee8 	bl	8008e50 <send_cmd>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1f2      	bne.n	800906c <USER_SPI_initialize+0x13c>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8009086:	f7ff fd4f 	bl	8008b28 <SPI_Timer_Status>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d007      	beq.n	80090a0 <USER_SPI_initialize+0x170>
 8009090:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009094:	2010      	movs	r0, #16
 8009096:	f7ff fedb 	bl	8008e50 <send_cmd>
 800909a:	4603      	mov	r3, r0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d001      	beq.n	80090a4 <USER_SPI_initialize+0x174>
				ty = 0;
 80090a0:	2300      	movs	r3, #0
 80090a2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80090a4:	4a11      	ldr	r2, [pc, #68]	; (80090ec <USER_SPI_initialize+0x1bc>)
 80090a6:	7b7b      	ldrb	r3, [r7, #13]
 80090a8:	7013      	strb	r3, [r2, #0]
	despiselect();
 80090aa:	f7ff fdc1 	bl	8008c30 <despiselect>

	if (ty) {			/* OK */
 80090ae:	7b7b      	ldrb	r3, [r7, #13]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00c      	beq.n	80090ce <USER_SPI_initialize+0x19e>
		FCLK_FAST();			/* Set fast clock */
 80090b4:	4b0c      	ldr	r3, [pc, #48]	; (80090e8 <USER_SPI_initialize+0x1b8>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	220c      	movs	r2, #12
 80090ba:	651a      	str	r2, [r3, #80]	; 0x50
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80090bc:	4b09      	ldr	r3, [pc, #36]	; (80090e4 <USER_SPI_initialize+0x1b4>)
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	f023 0301 	bic.w	r3, r3, #1
 80090c6:	b2da      	uxtb	r2, r3
 80090c8:	4b06      	ldr	r3, [pc, #24]	; (80090e4 <USER_SPI_initialize+0x1b4>)
 80090ca:	701a      	strb	r2, [r3, #0]
 80090cc:	e002      	b.n	80090d4 <USER_SPI_initialize+0x1a4>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80090ce:	4b05      	ldr	r3, [pc, #20]	; (80090e4 <USER_SPI_initialize+0x1b4>)
 80090d0:	2201      	movs	r2, #1
 80090d2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80090d4:	4b03      	ldr	r3, [pc, #12]	; (80090e4 <USER_SPI_initialize+0x1b4>)
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	b2db      	uxtb	r3, r3
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3714      	adds	r7, #20
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd90      	pop	{r4, r7, pc}
 80090e2:	bf00      	nop
 80090e4:	24000030 	.word	0x24000030
 80090e8:	240000b4 	.word	0x240000b4
 80090ec:	24000da8 	.word	0x24000da8

080090f0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	4603      	mov	r3, r0
 80090f8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80090fa:	79fb      	ldrb	r3, [r7, #7]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d001      	beq.n	8009104 <USER_SPI_status+0x14>
 8009100:	2301      	movs	r3, #1
 8009102:	e002      	b.n	800910a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8009104:	4b04      	ldr	r3, [pc, #16]	; (8009118 <USER_SPI_status+0x28>)
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	b2db      	uxtb	r3, r3
}
 800910a:	4618      	mov	r0, r3
 800910c:	370c      	adds	r7, #12
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	24000030 	.word	0x24000030

0800911c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	60b9      	str	r1, [r7, #8]
 8009124:	607a      	str	r2, [r7, #4]
 8009126:	603b      	str	r3, [r7, #0]
 8009128:	4603      	mov	r3, r0
 800912a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800912c:	7bfb      	ldrb	r3, [r7, #15]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d102      	bne.n	8009138 <USER_SPI_read+0x1c>
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d101      	bne.n	800913c <USER_SPI_read+0x20>
 8009138:	2304      	movs	r3, #4
 800913a:	e04d      	b.n	80091d8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800913c:	4b28      	ldr	r3, [pc, #160]	; (80091e0 <USER_SPI_read+0xc4>)
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	b2db      	uxtb	r3, r3
 8009142:	f003 0301 	and.w	r3, r3, #1
 8009146:	2b00      	cmp	r3, #0
 8009148:	d001      	beq.n	800914e <USER_SPI_read+0x32>
 800914a:	2303      	movs	r3, #3
 800914c:	e044      	b.n	80091d8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800914e:	4b25      	ldr	r3, [pc, #148]	; (80091e4 <USER_SPI_read+0xc8>)
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	f003 0308 	and.w	r3, r3, #8
 8009156:	2b00      	cmp	r3, #0
 8009158:	d102      	bne.n	8009160 <USER_SPI_read+0x44>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	025b      	lsls	r3, r3, #9
 800915e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	2b01      	cmp	r3, #1
 8009164:	d111      	bne.n	800918a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8009166:	6879      	ldr	r1, [r7, #4]
 8009168:	2011      	movs	r0, #17
 800916a:	f7ff fe71 	bl	8008e50 <send_cmd>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d129      	bne.n	80091c8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8009174:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009178:	68b8      	ldr	r0, [r7, #8]
 800917a:	f7ff fd85 	bl	8008c88 <rcvr_datablock>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d021      	beq.n	80091c8 <USER_SPI_read+0xac>
			count = 0;
 8009184:	2300      	movs	r3, #0
 8009186:	603b      	str	r3, [r7, #0]
 8009188:	e01e      	b.n	80091c8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800918a:	6879      	ldr	r1, [r7, #4]
 800918c:	2012      	movs	r0, #18
 800918e:	f7ff fe5f 	bl	8008e50 <send_cmd>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d117      	bne.n	80091c8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8009198:	f44f 7100 	mov.w	r1, #512	; 0x200
 800919c:	68b8      	ldr	r0, [r7, #8]
 800919e:	f7ff fd73 	bl	8008c88 <rcvr_datablock>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d00a      	beq.n	80091be <USER_SPI_read+0xa2>
				buff += 512;
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80091ae:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	3b01      	subs	r3, #1
 80091b4:	603b      	str	r3, [r7, #0]
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d1ed      	bne.n	8009198 <USER_SPI_read+0x7c>
 80091bc:	e000      	b.n	80091c0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80091be:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80091c0:	2100      	movs	r1, #0
 80091c2:	200c      	movs	r0, #12
 80091c4:	f7ff fe44 	bl	8008e50 <send_cmd>
		}
	}
	despiselect();
 80091c8:	f7ff fd32 	bl	8008c30 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	bf14      	ite	ne
 80091d2:	2301      	movne	r3, #1
 80091d4:	2300      	moveq	r3, #0
 80091d6:	b2db      	uxtb	r3, r3
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	24000030 	.word	0x24000030
 80091e4:	24000da8 	.word	0x24000da8

080091e8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60b9      	str	r1, [r7, #8]
 80091f0:	607a      	str	r2, [r7, #4]
 80091f2:	603b      	str	r3, [r7, #0]
 80091f4:	4603      	mov	r3, r0
 80091f6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80091f8:	7bfb      	ldrb	r3, [r7, #15]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d102      	bne.n	8009204 <USER_SPI_write+0x1c>
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d101      	bne.n	8009208 <USER_SPI_write+0x20>
 8009204:	2304      	movs	r3, #4
 8009206:	e063      	b.n	80092d0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8009208:	4b33      	ldr	r3, [pc, #204]	; (80092d8 <USER_SPI_write+0xf0>)
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	b2db      	uxtb	r3, r3
 800920e:	f003 0301 	and.w	r3, r3, #1
 8009212:	2b00      	cmp	r3, #0
 8009214:	d001      	beq.n	800921a <USER_SPI_write+0x32>
 8009216:	2303      	movs	r3, #3
 8009218:	e05a      	b.n	80092d0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800921a:	4b2f      	ldr	r3, [pc, #188]	; (80092d8 <USER_SPI_write+0xf0>)
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	b2db      	uxtb	r3, r3
 8009220:	f003 0304 	and.w	r3, r3, #4
 8009224:	2b00      	cmp	r3, #0
 8009226:	d001      	beq.n	800922c <USER_SPI_write+0x44>
 8009228:	2302      	movs	r3, #2
 800922a:	e051      	b.n	80092d0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800922c:	4b2b      	ldr	r3, [pc, #172]	; (80092dc <USER_SPI_write+0xf4>)
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	f003 0308 	and.w	r3, r3, #8
 8009234:	2b00      	cmp	r3, #0
 8009236:	d102      	bne.n	800923e <USER_SPI_write+0x56>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	025b      	lsls	r3, r3, #9
 800923c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	2b01      	cmp	r3, #1
 8009242:	d110      	bne.n	8009266 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8009244:	6879      	ldr	r1, [r7, #4]
 8009246:	2018      	movs	r0, #24
 8009248:	f7ff fe02 	bl	8008e50 <send_cmd>
 800924c:	4603      	mov	r3, r0
 800924e:	2b00      	cmp	r3, #0
 8009250:	d136      	bne.n	80092c0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8009252:	21fe      	movs	r1, #254	; 0xfe
 8009254:	68b8      	ldr	r0, [r7, #8]
 8009256:	f7ff fd40 	bl	8008cda <xmit_datablock>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d02f      	beq.n	80092c0 <USER_SPI_write+0xd8>
			count = 0;
 8009260:	2300      	movs	r3, #0
 8009262:	603b      	str	r3, [r7, #0]
 8009264:	e02c      	b.n	80092c0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8009266:	4b1d      	ldr	r3, [pc, #116]	; (80092dc <USER_SPI_write+0xf4>)
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	f003 0306 	and.w	r3, r3, #6
 800926e:	2b00      	cmp	r3, #0
 8009270:	d003      	beq.n	800927a <USER_SPI_write+0x92>
 8009272:	6839      	ldr	r1, [r7, #0]
 8009274:	2097      	movs	r0, #151	; 0x97
 8009276:	f7ff fdeb 	bl	8008e50 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800927a:	6879      	ldr	r1, [r7, #4]
 800927c:	2019      	movs	r0, #25
 800927e:	f7ff fde7 	bl	8008e50 <send_cmd>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d11b      	bne.n	80092c0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8009288:	21fc      	movs	r1, #252	; 0xfc
 800928a:	68b8      	ldr	r0, [r7, #8]
 800928c:	f7ff fd25 	bl	8008cda <xmit_datablock>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00a      	beq.n	80092ac <USER_SPI_write+0xc4>
				buff += 512;
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800929c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	3b01      	subs	r3, #1
 80092a2:	603b      	str	r3, [r7, #0]
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d1ee      	bne.n	8009288 <USER_SPI_write+0xa0>
 80092aa:	e000      	b.n	80092ae <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80092ac:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80092ae:	21fd      	movs	r1, #253	; 0xfd
 80092b0:	2000      	movs	r0, #0
 80092b2:	f7ff fd12 	bl	8008cda <xmit_datablock>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d101      	bne.n	80092c0 <USER_SPI_write+0xd8>
 80092bc:	2301      	movs	r3, #1
 80092be:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80092c0:	f7ff fcb6 	bl	8008c30 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	bf14      	ite	ne
 80092ca:	2301      	movne	r3, #1
 80092cc:	2300      	moveq	r3, #0
 80092ce:	b2db      	uxtb	r3, r3
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	24000030 	.word	0x24000030
 80092dc:	24000da8 	.word	0x24000da8

080092e0 <USER_SPI_write_dma>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60b9      	str	r1, [r7, #8]
 80092e8:	607a      	str	r2, [r7, #4]
 80092ea:	603b      	str	r3, [r7, #0]
 80092ec:	4603      	mov	r3, r0
 80092ee:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80092f0:	7bfb      	ldrb	r3, [r7, #15]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d102      	bne.n	80092fc <USER_SPI_write_dma+0x1c>
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d101      	bne.n	8009300 <USER_SPI_write_dma+0x20>
 80092fc:	2304      	movs	r3, #4
 80092fe:	e065      	b.n	80093cc <USER_SPI_write_dma+0xec>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8009300:	4b34      	ldr	r3, [pc, #208]	; (80093d4 <USER_SPI_write_dma+0xf4>)
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	b2db      	uxtb	r3, r3
 8009306:	f003 0301 	and.w	r3, r3, #1
 800930a:	2b00      	cmp	r3, #0
 800930c:	d001      	beq.n	8009312 <USER_SPI_write_dma+0x32>
 800930e:	2303      	movs	r3, #3
 8009310:	e05c      	b.n	80093cc <USER_SPI_write_dma+0xec>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8009312:	4b30      	ldr	r3, [pc, #192]	; (80093d4 <USER_SPI_write_dma+0xf4>)
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	b2db      	uxtb	r3, r3
 8009318:	f003 0304 	and.w	r3, r3, #4
 800931c:	2b00      	cmp	r3, #0
 800931e:	d001      	beq.n	8009324 <USER_SPI_write_dma+0x44>
 8009320:	2302      	movs	r3, #2
 8009322:	e053      	b.n	80093cc <USER_SPI_write_dma+0xec>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8009324:	4b2c      	ldr	r3, [pc, #176]	; (80093d8 <USER_SPI_write_dma+0xf8>)
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	f003 0308 	and.w	r3, r3, #8
 800932c:	2b00      	cmp	r3, #0
 800932e:	d102      	bne.n	8009336 <USER_SPI_write_dma+0x56>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	025b      	lsls	r3, r3, #9
 8009334:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	2b01      	cmp	r3, #1
 800933a:	d111      	bne.n	8009360 <USER_SPI_write_dma+0x80>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800933c:	6879      	ldr	r1, [r7, #4]
 800933e:	2018      	movs	r0, #24
 8009340:	f7ff fd86 	bl	8008e50 <send_cmd>
 8009344:	4603      	mov	r3, r0
 8009346:	2b00      	cmp	r3, #0
 8009348:	d138      	bne.n	80093bc <USER_SPI_write_dma+0xdc>
			&& xmit_data_dma(buff, count, 0xFE)) {
 800934a:	22fe      	movs	r2, #254	; 0xfe
 800934c:	6839      	ldr	r1, [r7, #0]
 800934e:	68b8      	ldr	r0, [r7, #8]
 8009350:	f7ff fcf6 	bl	8008d40 <xmit_data_dma>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	d030      	beq.n	80093bc <USER_SPI_write_dma+0xdc>
			count = 0;
 800935a:	2300      	movs	r3, #0
 800935c:	603b      	str	r3, [r7, #0]
 800935e:	e02d      	b.n	80093bc <USER_SPI_write_dma+0xdc>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8009360:	4b1d      	ldr	r3, [pc, #116]	; (80093d8 <USER_SPI_write_dma+0xf8>)
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	f003 0306 	and.w	r3, r3, #6
 8009368:	2b00      	cmp	r3, #0
 800936a:	d003      	beq.n	8009374 <USER_SPI_write_dma+0x94>
 800936c:	6839      	ldr	r1, [r7, #0]
 800936e:	2097      	movs	r0, #151	; 0x97
 8009370:	f7ff fd6e 	bl	8008e50 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8009374:	6879      	ldr	r1, [r7, #4]
 8009376:	2019      	movs	r0, #25
 8009378:	f7ff fd6a 	bl	8008e50 <send_cmd>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d11c      	bne.n	80093bc <USER_SPI_write_dma+0xdc>
			do {
				if (!xmit_data_dma(buff, 1, 0xFC)) break;
 8009382:	22fc      	movs	r2, #252	; 0xfc
 8009384:	2101      	movs	r1, #1
 8009386:	68b8      	ldr	r0, [r7, #8]
 8009388:	f7ff fcda 	bl	8008d40 <xmit_data_dma>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00a      	beq.n	80093a8 <USER_SPI_write_dma+0xc8>
				buff += 512;
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009398:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	3b01      	subs	r3, #1
 800939e:	603b      	str	r3, [r7, #0]
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1ed      	bne.n	8009382 <USER_SPI_write_dma+0xa2>
 80093a6:	e000      	b.n	80093aa <USER_SPI_write_dma+0xca>
				if (!xmit_data_dma(buff, 1, 0xFC)) break;
 80093a8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80093aa:	21fd      	movs	r1, #253	; 0xfd
 80093ac:	2000      	movs	r0, #0
 80093ae:	f7ff fc94 	bl	8008cda <xmit_datablock>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d101      	bne.n	80093bc <USER_SPI_write_dma+0xdc>
 80093b8:	2301      	movs	r3, #1
 80093ba:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80093bc:	f7ff fc38 	bl	8008c30 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	bf14      	ite	ne
 80093c6:	2301      	movne	r3, #1
 80093c8:	2300      	moveq	r3, #0
 80093ca:	b2db      	uxtb	r3, r3
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3710      	adds	r7, #16
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	24000030 	.word	0x24000030
 80093d8:	24000da8 	.word	0x24000da8

080093dc <USER_SPI_write_dma_start>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60b9      	str	r1, [r7, #8]
 80093e4:	607a      	str	r2, [r7, #4]
 80093e6:	603b      	str	r3, [r7, #0]
 80093e8:	4603      	mov	r3, r0
 80093ea:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80093ec:	7bfb      	ldrb	r3, [r7, #15]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d102      	bne.n	80093f8 <USER_SPI_write_dma_start+0x1c>
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d101      	bne.n	80093fc <USER_SPI_write_dma_start+0x20>
 80093f8:	2304      	movs	r3, #4
 80093fa:	e063      	b.n	80094c4 <USER_SPI_write_dma_start+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80093fc:	4b33      	ldr	r3, [pc, #204]	; (80094cc <USER_SPI_write_dma_start+0xf0>)
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	b2db      	uxtb	r3, r3
 8009402:	f003 0301 	and.w	r3, r3, #1
 8009406:	2b00      	cmp	r3, #0
 8009408:	d001      	beq.n	800940e <USER_SPI_write_dma_start+0x32>
 800940a:	2303      	movs	r3, #3
 800940c:	e05a      	b.n	80094c4 <USER_SPI_write_dma_start+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800940e:	4b2f      	ldr	r3, [pc, #188]	; (80094cc <USER_SPI_write_dma_start+0xf0>)
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	b2db      	uxtb	r3, r3
 8009414:	f003 0304 	and.w	r3, r3, #4
 8009418:	2b00      	cmp	r3, #0
 800941a:	d001      	beq.n	8009420 <USER_SPI_write_dma_start+0x44>
 800941c:	2302      	movs	r3, #2
 800941e:	e051      	b.n	80094c4 <USER_SPI_write_dma_start+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8009420:	4b2b      	ldr	r3, [pc, #172]	; (80094d0 <USER_SPI_write_dma_start+0xf4>)
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	f003 0308 	and.w	r3, r3, #8
 8009428:	2b00      	cmp	r3, #0
 800942a:	d102      	bne.n	8009432 <USER_SPI_write_dma_start+0x56>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	025b      	lsls	r3, r3, #9
 8009430:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	2b01      	cmp	r3, #1
 8009436:	d111      	bne.n	800945c <USER_SPI_write_dma_start+0x80>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8009438:	6879      	ldr	r1, [r7, #4]
 800943a:	2018      	movs	r0, #24
 800943c:	f7ff fd08 	bl	8008e50 <send_cmd>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d138      	bne.n	80094b8 <USER_SPI_write_dma_start+0xdc>
			&& xmit_data_dma_start(buff, count, 0xFE)) {
 8009446:	22fe      	movs	r2, #254	; 0xfe
 8009448:	6839      	ldr	r1, [r7, #0]
 800944a:	68b8      	ldr	r0, [r7, #8]
 800944c:	f7ff fcb4 	bl	8008db8 <xmit_data_dma_start>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d030      	beq.n	80094b8 <USER_SPI_write_dma_start+0xdc>
			count = 0;
 8009456:	2300      	movs	r3, #0
 8009458:	603b      	str	r3, [r7, #0]
 800945a:	e02d      	b.n	80094b8 <USER_SPI_write_dma_start+0xdc>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800945c:	4b1c      	ldr	r3, [pc, #112]	; (80094d0 <USER_SPI_write_dma_start+0xf4>)
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	f003 0306 	and.w	r3, r3, #6
 8009464:	2b00      	cmp	r3, #0
 8009466:	d003      	beq.n	8009470 <USER_SPI_write_dma_start+0x94>
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	2097      	movs	r0, #151	; 0x97
 800946c:	f7ff fcf0 	bl	8008e50 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8009470:	6879      	ldr	r1, [r7, #4]
 8009472:	2019      	movs	r0, #25
 8009474:	f7ff fcec 	bl	8008e50 <send_cmd>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d11c      	bne.n	80094b8 <USER_SPI_write_dma_start+0xdc>
			do {
				if (!xmit_data_dma_start(buff, 1, 0xFC)) break;
 800947e:	22fc      	movs	r2, #252	; 0xfc
 8009480:	2101      	movs	r1, #1
 8009482:	68b8      	ldr	r0, [r7, #8]
 8009484:	f7ff fc98 	bl	8008db8 <xmit_data_dma_start>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00a      	beq.n	80094a4 <USER_SPI_write_dma_start+0xc8>
				buff += 512;
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009494:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	3b01      	subs	r3, #1
 800949a:	603b      	str	r3, [r7, #0]
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1ed      	bne.n	800947e <USER_SPI_write_dma_start+0xa2>
 80094a2:	e000      	b.n	80094a6 <USER_SPI_write_dma_start+0xca>
				if (!xmit_data_dma_start(buff, 1, 0xFC)) break;
 80094a4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80094a6:	21fd      	movs	r1, #253	; 0xfd
 80094a8:	2000      	movs	r0, #0
 80094aa:	f7ff fc16 	bl	8008cda <xmit_datablock>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d101      	bne.n	80094b8 <USER_SPI_write_dma_start+0xdc>
 80094b4:	2301      	movs	r3, #1
 80094b6:	603b      	str	r3, [r7, #0]
		}
	}
//	despiselect();

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	bf14      	ite	ne
 80094be:	2301      	movne	r3, #1
 80094c0:	2300      	moveq	r3, #0
 80094c2:	b2db      	uxtb	r3, r3
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	24000030 	.word	0x24000030
 80094d0:	24000da8 	.word	0x24000da8

080094d4 <USER_SPI_write_dma_cplt>:


inline DRESULT USER_SPI_write_dma_cplt (
)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
	int success = xmit_data_dma_cplt();
 80094da:	f7ff fc9f 	bl	8008e1c <xmit_data_dma_cplt>
 80094de:	6078      	str	r0, [r7, #4]
	despiselect();
 80094e0:	f7ff fba6 	bl	8008c30 <despiselect>

	return success ? RES_OK : RES_ERROR;	/* Return result */
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	bf0c      	ite	eq
 80094ea:	2301      	moveq	r3, #1
 80094ec:	2300      	movne	r3, #0
 80094ee:	b2db      	uxtb	r3, r3
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b08c      	sub	sp, #48	; 0x30
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	4603      	mov	r3, r0
 8009500:	603a      	str	r2, [r7, #0]
 8009502:	71fb      	strb	r3, [r7, #7]
 8009504:	460b      	mov	r3, r1
 8009506:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8009508:	79fb      	ldrb	r3, [r7, #7]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d001      	beq.n	8009512 <USER_SPI_ioctl+0x1a>
 800950e:	2304      	movs	r3, #4
 8009510:	e15a      	b.n	80097c8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009512:	4baf      	ldr	r3, [pc, #700]	; (80097d0 <USER_SPI_ioctl+0x2d8>)
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	b2db      	uxtb	r3, r3
 8009518:	f003 0301 	and.w	r3, r3, #1
 800951c:	2b00      	cmp	r3, #0
 800951e:	d001      	beq.n	8009524 <USER_SPI_ioctl+0x2c>
 8009520:	2303      	movs	r3, #3
 8009522:	e151      	b.n	80097c8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800952a:	79bb      	ldrb	r3, [r7, #6]
 800952c:	2b04      	cmp	r3, #4
 800952e:	f200 8136 	bhi.w	800979e <USER_SPI_ioctl+0x2a6>
 8009532:	a201      	add	r2, pc, #4	; (adr r2, 8009538 <USER_SPI_ioctl+0x40>)
 8009534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009538:	0800954d 	.word	0x0800954d
 800953c:	08009561 	.word	0x08009561
 8009540:	0800979f 	.word	0x0800979f
 8009544:	0800960d 	.word	0x0800960d
 8009548:	08009703 	.word	0x08009703
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800954c:	f7ff fb80 	bl	8008c50 <spiselect>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	f000 8127 	beq.w	80097a6 <USER_SPI_ioctl+0x2ae>
 8009558:	2300      	movs	r3, #0
 800955a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800955e:	e122      	b.n	80097a6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8009560:	2100      	movs	r1, #0
 8009562:	2009      	movs	r0, #9
 8009564:	f7ff fc74 	bl	8008e50 <send_cmd>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	f040 811d 	bne.w	80097aa <USER_SPI_ioctl+0x2b2>
 8009570:	f107 030c 	add.w	r3, r7, #12
 8009574:	2110      	movs	r1, #16
 8009576:	4618      	mov	r0, r3
 8009578:	f7ff fb86 	bl	8008c88 <rcvr_datablock>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	f000 8113 	beq.w	80097aa <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8009584:	7b3b      	ldrb	r3, [r7, #12]
 8009586:	099b      	lsrs	r3, r3, #6
 8009588:	b2db      	uxtb	r3, r3
 800958a:	2b01      	cmp	r3, #1
 800958c:	d111      	bne.n	80095b2 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800958e:	7d7b      	ldrb	r3, [r7, #21]
 8009590:	461a      	mov	r2, r3
 8009592:	7d3b      	ldrb	r3, [r7, #20]
 8009594:	021b      	lsls	r3, r3, #8
 8009596:	4413      	add	r3, r2
 8009598:	461a      	mov	r2, r3
 800959a:	7cfb      	ldrb	r3, [r7, #19]
 800959c:	041b      	lsls	r3, r3, #16
 800959e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80095a2:	4413      	add	r3, r2
 80095a4:	3301      	adds	r3, #1
 80095a6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	029a      	lsls	r2, r3, #10
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	601a      	str	r2, [r3, #0]
 80095b0:	e028      	b.n	8009604 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80095b2:	7c7b      	ldrb	r3, [r7, #17]
 80095b4:	f003 030f 	and.w	r3, r3, #15
 80095b8:	b2da      	uxtb	r2, r3
 80095ba:	7dbb      	ldrb	r3, [r7, #22]
 80095bc:	09db      	lsrs	r3, r3, #7
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	4413      	add	r3, r2
 80095c2:	b2da      	uxtb	r2, r3
 80095c4:	7d7b      	ldrb	r3, [r7, #21]
 80095c6:	005b      	lsls	r3, r3, #1
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	f003 0306 	and.w	r3, r3, #6
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	4413      	add	r3, r2
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	3302      	adds	r3, #2
 80095d6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80095da:	7d3b      	ldrb	r3, [r7, #20]
 80095dc:	099b      	lsrs	r3, r3, #6
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	461a      	mov	r2, r3
 80095e2:	7cfb      	ldrb	r3, [r7, #19]
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	441a      	add	r2, r3
 80095e8:	7cbb      	ldrb	r3, [r7, #18]
 80095ea:	029b      	lsls	r3, r3, #10
 80095ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80095f0:	4413      	add	r3, r2
 80095f2:	3301      	adds	r3, #1
 80095f4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80095f6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80095fa:	3b09      	subs	r3, #9
 80095fc:	69fa      	ldr	r2, [r7, #28]
 80095fe:	409a      	lsls	r2, r3
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8009604:	2300      	movs	r3, #0
 8009606:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800960a:	e0ce      	b.n	80097aa <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800960c:	4b71      	ldr	r3, [pc, #452]	; (80097d4 <USER_SPI_ioctl+0x2dc>)
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	f003 0304 	and.w	r3, r3, #4
 8009614:	2b00      	cmp	r3, #0
 8009616:	d031      	beq.n	800967c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8009618:	2100      	movs	r1, #0
 800961a:	208d      	movs	r0, #141	; 0x8d
 800961c:	f7ff fc18 	bl	8008e50 <send_cmd>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	f040 80c3 	bne.w	80097ae <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8009628:	20ff      	movs	r0, #255	; 0xff
 800962a:	f7ff fa93 	bl	8008b54 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800962e:	f107 030c 	add.w	r3, r7, #12
 8009632:	2110      	movs	r1, #16
 8009634:	4618      	mov	r0, r3
 8009636:	f7ff fb27 	bl	8008c88 <rcvr_datablock>
 800963a:	4603      	mov	r3, r0
 800963c:	2b00      	cmp	r3, #0
 800963e:	f000 80b6 	beq.w	80097ae <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8009642:	2330      	movs	r3, #48	; 0x30
 8009644:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009648:	e007      	b.n	800965a <USER_SPI_ioctl+0x162>
 800964a:	20ff      	movs	r0, #255	; 0xff
 800964c:	f7ff fa82 	bl	8008b54 <xchg_spi>
 8009650:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009654:	3b01      	subs	r3, #1
 8009656:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800965a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1f3      	bne.n	800964a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8009662:	7dbb      	ldrb	r3, [r7, #22]
 8009664:	091b      	lsrs	r3, r3, #4
 8009666:	b2db      	uxtb	r3, r3
 8009668:	461a      	mov	r2, r3
 800966a:	2310      	movs	r3, #16
 800966c:	fa03 f202 	lsl.w	r2, r3, r2
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8009674:	2300      	movs	r3, #0
 8009676:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800967a:	e098      	b.n	80097ae <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800967c:	2100      	movs	r1, #0
 800967e:	2009      	movs	r0, #9
 8009680:	f7ff fbe6 	bl	8008e50 <send_cmd>
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	f040 8091 	bne.w	80097ae <USER_SPI_ioctl+0x2b6>
 800968c:	f107 030c 	add.w	r3, r7, #12
 8009690:	2110      	movs	r1, #16
 8009692:	4618      	mov	r0, r3
 8009694:	f7ff faf8 	bl	8008c88 <rcvr_datablock>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	f000 8087 	beq.w	80097ae <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80096a0:	4b4c      	ldr	r3, [pc, #304]	; (80097d4 <USER_SPI_ioctl+0x2dc>)
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	f003 0302 	and.w	r3, r3, #2
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d012      	beq.n	80096d2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80096ac:	7dbb      	ldrb	r3, [r7, #22]
 80096ae:	005b      	lsls	r3, r3, #1
 80096b0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80096b4:	7dfa      	ldrb	r2, [r7, #23]
 80096b6:	09d2      	lsrs	r2, r2, #7
 80096b8:	b2d2      	uxtb	r2, r2
 80096ba:	4413      	add	r3, r2
 80096bc:	1c5a      	adds	r2, r3, #1
 80096be:	7e7b      	ldrb	r3, [r7, #25]
 80096c0:	099b      	lsrs	r3, r3, #6
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	3b01      	subs	r3, #1
 80096c6:	fa02 f303 	lsl.w	r3, r2, r3
 80096ca:	461a      	mov	r2, r3
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	601a      	str	r2, [r3, #0]
 80096d0:	e013      	b.n	80096fa <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80096d2:	7dbb      	ldrb	r3, [r7, #22]
 80096d4:	109b      	asrs	r3, r3, #2
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	f003 031f 	and.w	r3, r3, #31
 80096dc:	3301      	adds	r3, #1
 80096de:	7dfa      	ldrb	r2, [r7, #23]
 80096e0:	00d2      	lsls	r2, r2, #3
 80096e2:	f002 0218 	and.w	r2, r2, #24
 80096e6:	7df9      	ldrb	r1, [r7, #23]
 80096e8:	0949      	lsrs	r1, r1, #5
 80096ea:	b2c9      	uxtb	r1, r1
 80096ec:	440a      	add	r2, r1
 80096ee:	3201      	adds	r2, #1
 80096f0:	fb02 f303 	mul.w	r3, r2, r3
 80096f4:	461a      	mov	r2, r3
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80096fa:	2300      	movs	r3, #0
 80096fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8009700:	e055      	b.n	80097ae <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009702:	4b34      	ldr	r3, [pc, #208]	; (80097d4 <USER_SPI_ioctl+0x2dc>)
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	f003 0306 	and.w	r3, r3, #6
 800970a:	2b00      	cmp	r3, #0
 800970c:	d051      	beq.n	80097b2 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800970e:	f107 020c 	add.w	r2, r7, #12
 8009712:	79fb      	ldrb	r3, [r7, #7]
 8009714:	210b      	movs	r1, #11
 8009716:	4618      	mov	r0, r3
 8009718:	f7ff feee 	bl	80094f8 <USER_SPI_ioctl>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d149      	bne.n	80097b6 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009722:	7b3b      	ldrb	r3, [r7, #12]
 8009724:	099b      	lsrs	r3, r3, #6
 8009726:	b2db      	uxtb	r3, r3
 8009728:	2b00      	cmp	r3, #0
 800972a:	d104      	bne.n	8009736 <USER_SPI_ioctl+0x23e>
 800972c:	7dbb      	ldrb	r3, [r7, #22]
 800972e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009732:	2b00      	cmp	r3, #0
 8009734:	d041      	beq.n	80097ba <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	623b      	str	r3, [r7, #32]
 800973a:	6a3b      	ldr	r3, [r7, #32]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009740:	6a3b      	ldr	r3, [r7, #32]
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8009746:	4b23      	ldr	r3, [pc, #140]	; (80097d4 <USER_SPI_ioctl+0x2dc>)
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	f003 0308 	and.w	r3, r3, #8
 800974e:	2b00      	cmp	r3, #0
 8009750:	d105      	bne.n	800975e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8009752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009754:	025b      	lsls	r3, r3, #9
 8009756:	62bb      	str	r3, [r7, #40]	; 0x28
 8009758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975a:	025b      	lsls	r3, r3, #9
 800975c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800975e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009760:	2020      	movs	r0, #32
 8009762:	f7ff fb75 	bl	8008e50 <send_cmd>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d128      	bne.n	80097be <USER_SPI_ioctl+0x2c6>
 800976c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800976e:	2021      	movs	r0, #33	; 0x21
 8009770:	f7ff fb6e 	bl	8008e50 <send_cmd>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d121      	bne.n	80097be <USER_SPI_ioctl+0x2c6>
 800977a:	2100      	movs	r1, #0
 800977c:	2026      	movs	r0, #38	; 0x26
 800977e:	f7ff fb67 	bl	8008e50 <send_cmd>
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	d11a      	bne.n	80097be <USER_SPI_ioctl+0x2c6>
 8009788:	f247 5030 	movw	r0, #30000	; 0x7530
 800978c:	f7ff fa2d 	bl	8008bea <wait_ready>
 8009790:	4603      	mov	r3, r0
 8009792:	2b00      	cmp	r3, #0
 8009794:	d013      	beq.n	80097be <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8009796:	2300      	movs	r3, #0
 8009798:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800979c:	e00f      	b.n	80097be <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800979e:	2304      	movs	r3, #4
 80097a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80097a4:	e00c      	b.n	80097c0 <USER_SPI_ioctl+0x2c8>
		break;
 80097a6:	bf00      	nop
 80097a8:	e00a      	b.n	80097c0 <USER_SPI_ioctl+0x2c8>
		break;
 80097aa:	bf00      	nop
 80097ac:	e008      	b.n	80097c0 <USER_SPI_ioctl+0x2c8>
		break;
 80097ae:	bf00      	nop
 80097b0:	e006      	b.n	80097c0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80097b2:	bf00      	nop
 80097b4:	e004      	b.n	80097c0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80097b6:	bf00      	nop
 80097b8:	e002      	b.n	80097c0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80097ba:	bf00      	nop
 80097bc:	e000      	b.n	80097c0 <USER_SPI_ioctl+0x2c8>
		break;
 80097be:	bf00      	nop
	}

	despiselect();
 80097c0:	f7ff fa36 	bl	8008c30 <despiselect>

	return res;
 80097c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3730      	adds	r7, #48	; 0x30
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	24000030 	.word	0x24000030
 80097d4:	24000da8 	.word	0x24000da8

080097d8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	4603      	mov	r3, r0
 80097e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80097e2:	79fb      	ldrb	r3, [r7, #7]
 80097e4:	4a08      	ldr	r2, [pc, #32]	; (8009808 <disk_status+0x30>)
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	4413      	add	r3, r2
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	79fa      	ldrb	r2, [r7, #7]
 80097f0:	4905      	ldr	r1, [pc, #20]	; (8009808 <disk_status+0x30>)
 80097f2:	440a      	add	r2, r1
 80097f4:	7a12      	ldrb	r2, [r2, #8]
 80097f6:	4610      	mov	r0, r2
 80097f8:	4798      	blx	r3
 80097fa:	4603      	mov	r3, r0
 80097fc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80097fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009800:	4618      	mov	r0, r3
 8009802:	3710      	adds	r7, #16
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	24000dd4 	.word	0x24000dd4

0800980c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	4603      	mov	r3, r0
 8009814:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009816:	2300      	movs	r3, #0
 8009818:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800981a:	79fb      	ldrb	r3, [r7, #7]
 800981c:	4a0d      	ldr	r2, [pc, #52]	; (8009854 <disk_initialize+0x48>)
 800981e:	5cd3      	ldrb	r3, [r2, r3]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d111      	bne.n	8009848 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009824:	79fb      	ldrb	r3, [r7, #7]
 8009826:	4a0b      	ldr	r2, [pc, #44]	; (8009854 <disk_initialize+0x48>)
 8009828:	2101      	movs	r1, #1
 800982a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800982c:	79fb      	ldrb	r3, [r7, #7]
 800982e:	4a09      	ldr	r2, [pc, #36]	; (8009854 <disk_initialize+0x48>)
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	4413      	add	r3, r2
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	79fa      	ldrb	r2, [r7, #7]
 800983a:	4906      	ldr	r1, [pc, #24]	; (8009854 <disk_initialize+0x48>)
 800983c:	440a      	add	r2, r1
 800983e:	7a12      	ldrb	r2, [r2, #8]
 8009840:	4610      	mov	r0, r2
 8009842:	4798      	blx	r3
 8009844:	4603      	mov	r3, r0
 8009846:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009848:	7bfb      	ldrb	r3, [r7, #15]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	24000dd4 	.word	0x24000dd4

08009858 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009858:	b590      	push	{r4, r7, lr}
 800985a:	b087      	sub	sp, #28
 800985c:	af00      	add	r7, sp, #0
 800985e:	60b9      	str	r1, [r7, #8]
 8009860:	607a      	str	r2, [r7, #4]
 8009862:	603b      	str	r3, [r7, #0]
 8009864:	4603      	mov	r3, r0
 8009866:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009868:	7bfb      	ldrb	r3, [r7, #15]
 800986a:	4a0a      	ldr	r2, [pc, #40]	; (8009894 <disk_read+0x3c>)
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	4413      	add	r3, r2
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	689c      	ldr	r4, [r3, #8]
 8009874:	7bfb      	ldrb	r3, [r7, #15]
 8009876:	4a07      	ldr	r2, [pc, #28]	; (8009894 <disk_read+0x3c>)
 8009878:	4413      	add	r3, r2
 800987a:	7a18      	ldrb	r0, [r3, #8]
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	68b9      	ldr	r1, [r7, #8]
 8009882:	47a0      	blx	r4
 8009884:	4603      	mov	r3, r0
 8009886:	75fb      	strb	r3, [r7, #23]
  return res;
 8009888:	7dfb      	ldrb	r3, [r7, #23]
}
 800988a:	4618      	mov	r0, r3
 800988c:	371c      	adds	r7, #28
 800988e:	46bd      	mov	sp, r7
 8009890:	bd90      	pop	{r4, r7, pc}
 8009892:	bf00      	nop
 8009894:	24000dd4 	.word	0x24000dd4

08009898 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009898:	b590      	push	{r4, r7, lr}
 800989a:	b087      	sub	sp, #28
 800989c:	af00      	add	r7, sp, #0
 800989e:	60b9      	str	r1, [r7, #8]
 80098a0:	607a      	str	r2, [r7, #4]
 80098a2:	603b      	str	r3, [r7, #0]
 80098a4:	4603      	mov	r3, r0
 80098a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80098a8:	7bfb      	ldrb	r3, [r7, #15]
 80098aa:	4a0a      	ldr	r2, [pc, #40]	; (80098d4 <disk_write+0x3c>)
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	4413      	add	r3, r2
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	68dc      	ldr	r4, [r3, #12]
 80098b4:	7bfb      	ldrb	r3, [r7, #15]
 80098b6:	4a07      	ldr	r2, [pc, #28]	; (80098d4 <disk_write+0x3c>)
 80098b8:	4413      	add	r3, r2
 80098ba:	7a18      	ldrb	r0, [r3, #8]
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	68b9      	ldr	r1, [r7, #8]
 80098c2:	47a0      	blx	r4
 80098c4:	4603      	mov	r3, r0
 80098c6:	75fb      	strb	r3, [r7, #23]
  return res;
 80098c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	371c      	adds	r7, #28
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd90      	pop	{r4, r7, pc}
 80098d2:	bf00      	nop
 80098d4:	24000dd4 	.word	0x24000dd4

080098d8 <disk_write_dma_start>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80098d8:	b590      	push	{r4, r7, lr}
 80098da:	b087      	sub	sp, #28
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60b9      	str	r1, [r7, #8]
 80098e0:	607a      	str	r2, [r7, #4]
 80098e2:	603b      	str	r3, [r7, #0]
 80098e4:	4603      	mov	r3, r0
 80098e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write_dma_start(disk.lun[pdrv], buff, sector, count);
 80098e8:	7bfb      	ldrb	r3, [r7, #15]
 80098ea:	4a0a      	ldr	r2, [pc, #40]	; (8009914 <disk_write_dma_start+0x3c>)
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	4413      	add	r3, r2
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	695c      	ldr	r4, [r3, #20]
 80098f4:	7bfb      	ldrb	r3, [r7, #15]
 80098f6:	4a07      	ldr	r2, [pc, #28]	; (8009914 <disk_write_dma_start+0x3c>)
 80098f8:	4413      	add	r3, r2
 80098fa:	7a18      	ldrb	r0, [r3, #8]
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	68b9      	ldr	r1, [r7, #8]
 8009902:	47a0      	blx	r4
 8009904:	4603      	mov	r3, r0
 8009906:	75fb      	strb	r3, [r7, #23]
  return res;
 8009908:	7dfb      	ldrb	r3, [r7, #23]
}
 800990a:	4618      	mov	r0, r3
 800990c:	371c      	adds	r7, #28
 800990e:	46bd      	mov	sp, r7
 8009910:	bd90      	pop	{r4, r7, pc}
 8009912:	bf00      	nop
 8009914:	24000dd4 	.word	0x24000dd4

08009918 <disk_write_dma_cplt>:

DRESULT disk_write_dma_cplt (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	4603      	mov	r3, r0
 8009920:	71fb      	strb	r3, [r7, #7]
  DRESULT res;

//  res = disk.drv[pdrv]->disk_write_dma_cplt();
  res = disk.drv[pdrv]->disk_write_dma_cplt();
 8009922:	79fb      	ldrb	r3, [r7, #7]
 8009924:	4a06      	ldr	r2, [pc, #24]	; (8009940 <disk_write_dma_cplt+0x28>)
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4413      	add	r3, r2
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	699b      	ldr	r3, [r3, #24]
 800992e:	4798      	blx	r3
 8009930:	4603      	mov	r3, r0
 8009932:	73fb      	strb	r3, [r7, #15]
  return res;
 8009934:	7bfb      	ldrb	r3, [r7, #15]
}
 8009936:	4618      	mov	r0, r3
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	24000dd4 	.word	0x24000dd4

08009944 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	4603      	mov	r3, r0
 800994c:	603a      	str	r2, [r7, #0]
 800994e:	71fb      	strb	r3, [r7, #7]
 8009950:	460b      	mov	r3, r1
 8009952:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009954:	79fb      	ldrb	r3, [r7, #7]
 8009956:	4a09      	ldr	r2, [pc, #36]	; (800997c <disk_ioctl+0x38>)
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	4413      	add	r3, r2
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	69db      	ldr	r3, [r3, #28]
 8009960:	79fa      	ldrb	r2, [r7, #7]
 8009962:	4906      	ldr	r1, [pc, #24]	; (800997c <disk_ioctl+0x38>)
 8009964:	440a      	add	r2, r1
 8009966:	7a10      	ldrb	r0, [r2, #8]
 8009968:	79b9      	ldrb	r1, [r7, #6]
 800996a:	683a      	ldr	r2, [r7, #0]
 800996c:	4798      	blx	r3
 800996e:	4603      	mov	r3, r0
 8009970:	73fb      	strb	r3, [r7, #15]
  return res;
 8009972:	7bfb      	ldrb	r3, [r7, #15]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	24000dd4 	.word	0x24000dd4

08009980 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009980:	b480      	push	{r7}
 8009982:	b085      	sub	sp, #20
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	3301      	adds	r3, #1
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009990:	89fb      	ldrh	r3, [r7, #14]
 8009992:	021b      	lsls	r3, r3, #8
 8009994:	b21a      	sxth	r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	b21b      	sxth	r3, r3
 800999c:	4313      	orrs	r3, r2
 800999e:	b21b      	sxth	r3, r3
 80099a0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80099a2:	89fb      	ldrh	r3, [r7, #14]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3714      	adds	r7, #20
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80099b0:	b480      	push	{r7}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	3303      	adds	r3, #3
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	021b      	lsls	r3, r3, #8
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	3202      	adds	r2, #2
 80099c8:	7812      	ldrb	r2, [r2, #0]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	021b      	lsls	r3, r3, #8
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	3201      	adds	r2, #1
 80099d6:	7812      	ldrb	r2, [r2, #0]
 80099d8:	4313      	orrs	r3, r2
 80099da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	021b      	lsls	r3, r3, #8
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	7812      	ldrb	r2, [r2, #0]
 80099e4:	4313      	orrs	r3, r2
 80099e6:	60fb      	str	r3, [r7, #12]
	return rv;
 80099e8:	68fb      	ldr	r3, [r7, #12]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3714      	adds	r7, #20
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr

080099f6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80099f6:	b480      	push	{r7}
 80099f8:	b083      	sub	sp, #12
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
 80099fe:	460b      	mov	r3, r1
 8009a00:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	1c5a      	adds	r2, r3, #1
 8009a06:	607a      	str	r2, [r7, #4]
 8009a08:	887a      	ldrh	r2, [r7, #2]
 8009a0a:	b2d2      	uxtb	r2, r2
 8009a0c:	701a      	strb	r2, [r3, #0]
 8009a0e:	887b      	ldrh	r3, [r7, #2]
 8009a10:	0a1b      	lsrs	r3, r3, #8
 8009a12:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	1c5a      	adds	r2, r3, #1
 8009a18:	607a      	str	r2, [r7, #4]
 8009a1a:	887a      	ldrh	r2, [r7, #2]
 8009a1c:	b2d2      	uxtb	r2, r2
 8009a1e:	701a      	strb	r2, [r3, #0]
}
 8009a20:	bf00      	nop
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	1c5a      	adds	r2, r3, #1
 8009a3a:	607a      	str	r2, [r7, #4]
 8009a3c:	683a      	ldr	r2, [r7, #0]
 8009a3e:	b2d2      	uxtb	r2, r2
 8009a40:	701a      	strb	r2, [r3, #0]
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	0a1b      	lsrs	r3, r3, #8
 8009a46:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	1c5a      	adds	r2, r3, #1
 8009a4c:	607a      	str	r2, [r7, #4]
 8009a4e:	683a      	ldr	r2, [r7, #0]
 8009a50:	b2d2      	uxtb	r2, r2
 8009a52:	701a      	strb	r2, [r3, #0]
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	0a1b      	lsrs	r3, r3, #8
 8009a58:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	1c5a      	adds	r2, r3, #1
 8009a5e:	607a      	str	r2, [r7, #4]
 8009a60:	683a      	ldr	r2, [r7, #0]
 8009a62:	b2d2      	uxtb	r2, r2
 8009a64:	701a      	strb	r2, [r3, #0]
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	0a1b      	lsrs	r3, r3, #8
 8009a6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	1c5a      	adds	r2, r3, #1
 8009a70:	607a      	str	r2, [r7, #4]
 8009a72:	683a      	ldr	r2, [r7, #0]
 8009a74:	b2d2      	uxtb	r2, r2
 8009a76:	701a      	strb	r2, [r3, #0]
}
 8009a78:	bf00      	nop
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009a84:	b480      	push	{r7}
 8009a86:	b087      	sub	sp, #28
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00d      	beq.n	8009aba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009a9e:	693a      	ldr	r2, [r7, #16]
 8009aa0:	1c53      	adds	r3, r2, #1
 8009aa2:	613b      	str	r3, [r7, #16]
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	1c59      	adds	r1, r3, #1
 8009aa8:	6179      	str	r1, [r7, #20]
 8009aaa:	7812      	ldrb	r2, [r2, #0]
 8009aac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	607b      	str	r3, [r7, #4]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1f1      	bne.n	8009a9e <mem_cpy+0x1a>
	}
}
 8009aba:	bf00      	nop
 8009abc:	371c      	adds	r7, #28
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr

08009ac6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009ac6:	b480      	push	{r7}
 8009ac8:	b087      	sub	sp, #28
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	60f8      	str	r0, [r7, #12]
 8009ace:	60b9      	str	r1, [r7, #8]
 8009ad0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	1c5a      	adds	r2, r3, #1
 8009ada:	617a      	str	r2, [r7, #20]
 8009adc:	68ba      	ldr	r2, [r7, #8]
 8009ade:	b2d2      	uxtb	r2, r2
 8009ae0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	3b01      	subs	r3, #1
 8009ae6:	607b      	str	r3, [r7, #4]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1f3      	bne.n	8009ad6 <mem_set+0x10>
}
 8009aee:	bf00      	nop
 8009af0:	371c      	adds	r7, #28
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr

08009afa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009afa:	b480      	push	{r7}
 8009afc:	b089      	sub	sp, #36	; 0x24
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	60f8      	str	r0, [r7, #12]
 8009b02:	60b9      	str	r1, [r7, #8]
 8009b04:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	61fb      	str	r3, [r7, #28]
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	1c5a      	adds	r2, r3, #1
 8009b16:	61fa      	str	r2, [r7, #28]
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	1c5a      	adds	r2, r3, #1
 8009b20:	61ba      	str	r2, [r7, #24]
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	1acb      	subs	r3, r1, r3
 8009b26:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	607b      	str	r3, [r7, #4]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d002      	beq.n	8009b3a <mem_cmp+0x40>
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d0eb      	beq.n	8009b12 <mem_cmp+0x18>

	return r;
 8009b3a:	697b      	ldr	r3, [r7, #20]
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3724      	adds	r7, #36	; 0x24
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr

08009b48 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009b52:	e002      	b.n	8009b5a <chk_chr+0x12>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	3301      	adds	r3, #1
 8009b58:	607b      	str	r3, [r7, #4]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d005      	beq.n	8009b6e <chk_chr+0x26>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	461a      	mov	r2, r3
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d1f2      	bne.n	8009b54 <chk_chr+0xc>
	return *str;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	781b      	ldrb	r3, [r3, #0]
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	370c      	adds	r7, #12
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
	...

08009b80 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b085      	sub	sp, #20
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	60bb      	str	r3, [r7, #8]
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	60fb      	str	r3, [r7, #12]
 8009b92:	e029      	b.n	8009be8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009b94:	4a27      	ldr	r2, [pc, #156]	; (8009c34 <chk_lock+0xb4>)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	011b      	lsls	r3, r3, #4
 8009b9a:	4413      	add	r3, r2
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d01d      	beq.n	8009bde <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009ba2:	4a24      	ldr	r2, [pc, #144]	; (8009c34 <chk_lock+0xb4>)
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	011b      	lsls	r3, r3, #4
 8009ba8:	4413      	add	r3, r2
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d116      	bne.n	8009be2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009bb4:	4a1f      	ldr	r2, [pc, #124]	; (8009c34 <chk_lock+0xb4>)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	011b      	lsls	r3, r3, #4
 8009bba:	4413      	add	r3, r2
 8009bbc:	3304      	adds	r3, #4
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d10c      	bne.n	8009be2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009bc8:	4a1a      	ldr	r2, [pc, #104]	; (8009c34 <chk_lock+0xb4>)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	011b      	lsls	r3, r3, #4
 8009bce:	4413      	add	r3, r2
 8009bd0:	3308      	adds	r3, #8
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d102      	bne.n	8009be2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009bdc:	e007      	b.n	8009bee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009bde:	2301      	movs	r3, #1
 8009be0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	3301      	adds	r3, #1
 8009be6:	60fb      	str	r3, [r7, #12]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d9d2      	bls.n	8009b94 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2b02      	cmp	r3, #2
 8009bf2:	d109      	bne.n	8009c08 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d102      	bne.n	8009c00 <chk_lock+0x80>
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d101      	bne.n	8009c04 <chk_lock+0x84>
 8009c00:	2300      	movs	r3, #0
 8009c02:	e010      	b.n	8009c26 <chk_lock+0xa6>
 8009c04:	2312      	movs	r3, #18
 8009c06:	e00e      	b.n	8009c26 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d108      	bne.n	8009c20 <chk_lock+0xa0>
 8009c0e:	4a09      	ldr	r2, [pc, #36]	; (8009c34 <chk_lock+0xb4>)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	011b      	lsls	r3, r3, #4
 8009c14:	4413      	add	r3, r2
 8009c16:	330c      	adds	r3, #12
 8009c18:	881b      	ldrh	r3, [r3, #0]
 8009c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c1e:	d101      	bne.n	8009c24 <chk_lock+0xa4>
 8009c20:	2310      	movs	r3, #16
 8009c22:	e000      	b.n	8009c26 <chk_lock+0xa6>
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3714      	adds	r7, #20
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr
 8009c32:	bf00      	nop
 8009c34:	24000db4 	.word	0x24000db4

08009c38 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	607b      	str	r3, [r7, #4]
 8009c42:	e002      	b.n	8009c4a <enq_lock+0x12>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	3301      	adds	r3, #1
 8009c48:	607b      	str	r3, [r7, #4]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d806      	bhi.n	8009c5e <enq_lock+0x26>
 8009c50:	4a09      	ldr	r2, [pc, #36]	; (8009c78 <enq_lock+0x40>)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	011b      	lsls	r3, r3, #4
 8009c56:	4413      	add	r3, r2
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d1f2      	bne.n	8009c44 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	bf14      	ite	ne
 8009c64:	2301      	movne	r3, #1
 8009c66:	2300      	moveq	r3, #0
 8009c68:	b2db      	uxtb	r3, r3
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	370c      	adds	r7, #12
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr
 8009c76:	bf00      	nop
 8009c78:	24000db4 	.word	0x24000db4

08009c7c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009c86:	2300      	movs	r3, #0
 8009c88:	60fb      	str	r3, [r7, #12]
 8009c8a:	e01f      	b.n	8009ccc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009c8c:	4a41      	ldr	r2, [pc, #260]	; (8009d94 <inc_lock+0x118>)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	011b      	lsls	r3, r3, #4
 8009c92:	4413      	add	r3, r2
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d113      	bne.n	8009cc6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009c9e:	4a3d      	ldr	r2, [pc, #244]	; (8009d94 <inc_lock+0x118>)
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	011b      	lsls	r3, r3, #4
 8009ca4:	4413      	add	r3, r2
 8009ca6:	3304      	adds	r3, #4
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d109      	bne.n	8009cc6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009cb2:	4a38      	ldr	r2, [pc, #224]	; (8009d94 <inc_lock+0x118>)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	011b      	lsls	r3, r3, #4
 8009cb8:	4413      	add	r3, r2
 8009cba:	3308      	adds	r3, #8
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d006      	beq.n	8009cd4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	3301      	adds	r3, #1
 8009cca:	60fb      	str	r3, [r7, #12]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d9dc      	bls.n	8009c8c <inc_lock+0x10>
 8009cd2:	e000      	b.n	8009cd6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009cd4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2b02      	cmp	r3, #2
 8009cda:	d132      	bne.n	8009d42 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	60fb      	str	r3, [r7, #12]
 8009ce0:	e002      	b.n	8009ce8 <inc_lock+0x6c>
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	60fb      	str	r3, [r7, #12]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d806      	bhi.n	8009cfc <inc_lock+0x80>
 8009cee:	4a29      	ldr	r2, [pc, #164]	; (8009d94 <inc_lock+0x118>)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	011b      	lsls	r3, r3, #4
 8009cf4:	4413      	add	r3, r2
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d1f2      	bne.n	8009ce2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2b02      	cmp	r3, #2
 8009d00:	d101      	bne.n	8009d06 <inc_lock+0x8a>
 8009d02:	2300      	movs	r3, #0
 8009d04:	e040      	b.n	8009d88 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	4922      	ldr	r1, [pc, #136]	; (8009d94 <inc_lock+0x118>)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	011b      	lsls	r3, r3, #4
 8009d10:	440b      	add	r3, r1
 8009d12:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	689a      	ldr	r2, [r3, #8]
 8009d18:	491e      	ldr	r1, [pc, #120]	; (8009d94 <inc_lock+0x118>)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	011b      	lsls	r3, r3, #4
 8009d1e:	440b      	add	r3, r1
 8009d20:	3304      	adds	r3, #4
 8009d22:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	695a      	ldr	r2, [r3, #20]
 8009d28:	491a      	ldr	r1, [pc, #104]	; (8009d94 <inc_lock+0x118>)
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	011b      	lsls	r3, r3, #4
 8009d2e:	440b      	add	r3, r1
 8009d30:	3308      	adds	r3, #8
 8009d32:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009d34:	4a17      	ldr	r2, [pc, #92]	; (8009d94 <inc_lock+0x118>)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	011b      	lsls	r3, r3, #4
 8009d3a:	4413      	add	r3, r2
 8009d3c:	330c      	adds	r3, #12
 8009d3e:	2200      	movs	r2, #0
 8009d40:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d009      	beq.n	8009d5c <inc_lock+0xe0>
 8009d48:	4a12      	ldr	r2, [pc, #72]	; (8009d94 <inc_lock+0x118>)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	011b      	lsls	r3, r3, #4
 8009d4e:	4413      	add	r3, r2
 8009d50:	330c      	adds	r3, #12
 8009d52:	881b      	ldrh	r3, [r3, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d001      	beq.n	8009d5c <inc_lock+0xe0>
 8009d58:	2300      	movs	r3, #0
 8009d5a:	e015      	b.n	8009d88 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d108      	bne.n	8009d74 <inc_lock+0xf8>
 8009d62:	4a0c      	ldr	r2, [pc, #48]	; (8009d94 <inc_lock+0x118>)
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	011b      	lsls	r3, r3, #4
 8009d68:	4413      	add	r3, r2
 8009d6a:	330c      	adds	r3, #12
 8009d6c:	881b      	ldrh	r3, [r3, #0]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	b29a      	uxth	r2, r3
 8009d72:	e001      	b.n	8009d78 <inc_lock+0xfc>
 8009d74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d78:	4906      	ldr	r1, [pc, #24]	; (8009d94 <inc_lock+0x118>)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	011b      	lsls	r3, r3, #4
 8009d7e:	440b      	add	r3, r1
 8009d80:	330c      	adds	r3, #12
 8009d82:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	3301      	adds	r3, #1
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3714      	adds	r7, #20
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr
 8009d94:	24000db4 	.word	0x24000db4

08009d98 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	3b01      	subs	r3, #1
 8009da4:	607b      	str	r3, [r7, #4]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d825      	bhi.n	8009df8 <dec_lock+0x60>
		n = Files[i].ctr;
 8009dac:	4a17      	ldr	r2, [pc, #92]	; (8009e0c <dec_lock+0x74>)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	011b      	lsls	r3, r3, #4
 8009db2:	4413      	add	r3, r2
 8009db4:	330c      	adds	r3, #12
 8009db6:	881b      	ldrh	r3, [r3, #0]
 8009db8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009dba:	89fb      	ldrh	r3, [r7, #14]
 8009dbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dc0:	d101      	bne.n	8009dc6 <dec_lock+0x2e>
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009dc6:	89fb      	ldrh	r3, [r7, #14]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d002      	beq.n	8009dd2 <dec_lock+0x3a>
 8009dcc:	89fb      	ldrh	r3, [r7, #14]
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009dd2:	4a0e      	ldr	r2, [pc, #56]	; (8009e0c <dec_lock+0x74>)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	011b      	lsls	r3, r3, #4
 8009dd8:	4413      	add	r3, r2
 8009dda:	330c      	adds	r3, #12
 8009ddc:	89fa      	ldrh	r2, [r7, #14]
 8009dde:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009de0:	89fb      	ldrh	r3, [r7, #14]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d105      	bne.n	8009df2 <dec_lock+0x5a>
 8009de6:	4a09      	ldr	r2, [pc, #36]	; (8009e0c <dec_lock+0x74>)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	011b      	lsls	r3, r3, #4
 8009dec:	4413      	add	r3, r2
 8009dee:	2200      	movs	r2, #0
 8009df0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009df2:	2300      	movs	r3, #0
 8009df4:	737b      	strb	r3, [r7, #13]
 8009df6:	e001      	b.n	8009dfc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009df8:	2302      	movs	r3, #2
 8009dfa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009dfc:	7b7b      	ldrb	r3, [r7, #13]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3714      	adds	r7, #20
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr
 8009e0a:	bf00      	nop
 8009e0c:	24000db4 	.word	0x24000db4

08009e10 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009e18:	2300      	movs	r3, #0
 8009e1a:	60fb      	str	r3, [r7, #12]
 8009e1c:	e010      	b.n	8009e40 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009e1e:	4a0d      	ldr	r2, [pc, #52]	; (8009e54 <clear_lock+0x44>)
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	011b      	lsls	r3, r3, #4
 8009e24:	4413      	add	r3, r2
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d105      	bne.n	8009e3a <clear_lock+0x2a>
 8009e2e:	4a09      	ldr	r2, [pc, #36]	; (8009e54 <clear_lock+0x44>)
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	011b      	lsls	r3, r3, #4
 8009e34:	4413      	add	r3, r2
 8009e36:	2200      	movs	r2, #0
 8009e38:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	60fb      	str	r3, [r7, #12]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d9eb      	bls.n	8009e1e <clear_lock+0xe>
	}
}
 8009e46:	bf00      	nop
 8009e48:	3714      	adds	r7, #20
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	24000db4 	.word	0x24000db4

08009e58 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b086      	sub	sp, #24
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009e60:	2300      	movs	r3, #0
 8009e62:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	78db      	ldrb	r3, [r3, #3]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d034      	beq.n	8009ed6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e70:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	7858      	ldrb	r0, [r3, #1]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	697a      	ldr	r2, [r7, #20]
 8009e80:	f7ff fd0a 	bl	8009898 <disk_write>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d002      	beq.n	8009e90 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	73fb      	strb	r3, [r7, #15]
 8009e8e:	e022      	b.n	8009ed6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a1b      	ldr	r3, [r3, #32]
 8009e9a:	697a      	ldr	r2, [r7, #20]
 8009e9c:	1ad2      	subs	r2, r2, r3
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	699b      	ldr	r3, [r3, #24]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d217      	bcs.n	8009ed6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	789b      	ldrb	r3, [r3, #2]
 8009eaa:	613b      	str	r3, [r7, #16]
 8009eac:	e010      	b.n	8009ed0 <sync_window+0x78>
					wsect += fs->fsize;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	697a      	ldr	r2, [r7, #20]
 8009eb4:	4413      	add	r3, r2
 8009eb6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	7858      	ldrb	r0, [r3, #1]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	697a      	ldr	r2, [r7, #20]
 8009ec6:	f7ff fce7 	bl	8009898 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	613b      	str	r3, [r7, #16]
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d8eb      	bhi.n	8009eae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3718      	adds	r7, #24
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009eea:	2300      	movs	r3, #0
 8009eec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef2:	683a      	ldr	r2, [r7, #0]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d01b      	beq.n	8009f30 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f7ff ffad 	bl	8009e58 <sync_window>
 8009efe:	4603      	mov	r3, r0
 8009f00:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009f02:	7bfb      	ldrb	r3, [r7, #15]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d113      	bne.n	8009f30 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	7858      	ldrb	r0, [r3, #1]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f12:	2301      	movs	r3, #1
 8009f14:	683a      	ldr	r2, [r7, #0]
 8009f16:	f7ff fc9f 	bl	8009858 <disk_read>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d004      	beq.n	8009f2a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009f20:	f04f 33ff 	mov.w	r3, #4294967295
 8009f24:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009f26:	2301      	movs	r3, #1
 8009f28:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	683a      	ldr	r2, [r7, #0]
 8009f2e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8009f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3710      	adds	r7, #16
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
	...

08009f3c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f7ff ff87 	bl	8009e58 <sync_window>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009f4e:	7bfb      	ldrb	r3, [r7, #15]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d158      	bne.n	800a006 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	2b03      	cmp	r3, #3
 8009f5a:	d148      	bne.n	8009fee <sync_fs+0xb2>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	791b      	ldrb	r3, [r3, #4]
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d144      	bne.n	8009fee <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	3330      	adds	r3, #48	; 0x30
 8009f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f6c:	2100      	movs	r1, #0
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7ff fda9 	bl	8009ac6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	3330      	adds	r3, #48	; 0x30
 8009f78:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009f7c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7ff fd38 	bl	80099f6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	3330      	adds	r3, #48	; 0x30
 8009f8a:	4921      	ldr	r1, [pc, #132]	; (800a010 <sync_fs+0xd4>)
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7ff fd4d 	bl	8009a2c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	3330      	adds	r3, #48	; 0x30
 8009f96:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009f9a:	491e      	ldr	r1, [pc, #120]	; (800a014 <sync_fs+0xd8>)
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f7ff fd45 	bl	8009a2c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	3330      	adds	r3, #48	; 0x30
 8009fa6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	691b      	ldr	r3, [r3, #16]
 8009fae:	4619      	mov	r1, r3
 8009fb0:	4610      	mov	r0, r2
 8009fb2:	f7ff fd3b 	bl	8009a2c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	3330      	adds	r3, #48	; 0x30
 8009fba:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	4610      	mov	r0, r2
 8009fc6:	f7ff fd31 	bl	8009a2c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	69db      	ldr	r3, [r3, #28]
 8009fce:	1c5a      	adds	r2, r3, #1
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	7858      	ldrb	r0, [r3, #1]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	f7ff fc58 	bl	8009898 <disk_write>
			fs->fsi_flag = 0;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	785b      	ldrb	r3, [r3, #1]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7ff fca4 	bl	8009944 <disk_ioctl>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d001      	beq.n	800a006 <sync_fs+0xca>
 800a002:	2301      	movs	r3, #1
 800a004:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a006:	7bfb      	ldrb	r3, [r7, #15]
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3710      	adds	r7, #16
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	41615252 	.word	0x41615252
 800a014:	61417272 	.word	0x61417272

0800a018 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	3b02      	subs	r3, #2
 800a026:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	695b      	ldr	r3, [r3, #20]
 800a02c:	3b02      	subs	r3, #2
 800a02e:	683a      	ldr	r2, [r7, #0]
 800a030:	429a      	cmp	r2, r3
 800a032:	d301      	bcc.n	800a038 <clust2sect+0x20>
 800a034:	2300      	movs	r3, #0
 800a036:	e008      	b.n	800a04a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	895b      	ldrh	r3, [r3, #10]
 800a03c:	461a      	mov	r2, r3
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	fb03 f202 	mul.w	r2, r3, r2
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a048:	4413      	add	r3, r2
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	370c      	adds	r7, #12
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr

0800a056 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b086      	sub	sp, #24
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
 800a05e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d904      	bls.n	800a076 <get_fat+0x20>
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	695b      	ldr	r3, [r3, #20]
 800a070:	683a      	ldr	r2, [r7, #0]
 800a072:	429a      	cmp	r2, r3
 800a074:	d302      	bcc.n	800a07c <get_fat+0x26>
		val = 1;	/* Internal error */
 800a076:	2301      	movs	r3, #1
 800a078:	617b      	str	r3, [r7, #20]
 800a07a:	e08c      	b.n	800a196 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a07c:	f04f 33ff 	mov.w	r3, #4294967295
 800a080:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	2b02      	cmp	r3, #2
 800a088:	d045      	beq.n	800a116 <get_fat+0xc0>
 800a08a:	2b03      	cmp	r3, #3
 800a08c:	d05d      	beq.n	800a14a <get_fat+0xf4>
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d177      	bne.n	800a182 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	60fb      	str	r3, [r7, #12]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	085b      	lsrs	r3, r3, #1
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	4413      	add	r3, r2
 800a09e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	6a1a      	ldr	r2, [r3, #32]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	0a5b      	lsrs	r3, r3, #9
 800a0a8:	4413      	add	r3, r2
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	6938      	ldr	r0, [r7, #16]
 800a0ae:	f7ff ff17 	bl	8009ee0 <move_window>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d167      	bne.n	800a188 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	1c5a      	adds	r2, r3, #1
 800a0bc:	60fa      	str	r2, [r7, #12]
 800a0be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0c2:	693a      	ldr	r2, [r7, #16]
 800a0c4:	4413      	add	r3, r2
 800a0c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a0ca:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	6a1a      	ldr	r2, [r3, #32]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	0a5b      	lsrs	r3, r3, #9
 800a0d4:	4413      	add	r3, r2
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	6938      	ldr	r0, [r7, #16]
 800a0da:	f7ff ff01 	bl	8009ee0 <move_window>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d153      	bne.n	800a18c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ea:	693a      	ldr	r2, [r7, #16]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a0f2:	021b      	lsls	r3, r3, #8
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	f003 0301 	and.w	r3, r3, #1
 800a102:	2b00      	cmp	r3, #0
 800a104:	d002      	beq.n	800a10c <get_fat+0xb6>
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	091b      	lsrs	r3, r3, #4
 800a10a:	e002      	b.n	800a112 <get_fat+0xbc>
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a112:	617b      	str	r3, [r7, #20]
			break;
 800a114:	e03f      	b.n	800a196 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	6a1a      	ldr	r2, [r3, #32]
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	0a1b      	lsrs	r3, r3, #8
 800a11e:	4413      	add	r3, r2
 800a120:	4619      	mov	r1, r3
 800a122:	6938      	ldr	r0, [r7, #16]
 800a124:	f7ff fedc 	bl	8009ee0 <move_window>
 800a128:	4603      	mov	r3, r0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d130      	bne.n	800a190 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	005b      	lsls	r3, r3, #1
 800a138:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a13c:	4413      	add	r3, r2
 800a13e:	4618      	mov	r0, r3
 800a140:	f7ff fc1e 	bl	8009980 <ld_word>
 800a144:	4603      	mov	r3, r0
 800a146:	617b      	str	r3, [r7, #20]
			break;
 800a148:	e025      	b.n	800a196 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	6a1a      	ldr	r2, [r3, #32]
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	09db      	lsrs	r3, r3, #7
 800a152:	4413      	add	r3, r2
 800a154:	4619      	mov	r1, r3
 800a156:	6938      	ldr	r0, [r7, #16]
 800a158:	f7ff fec2 	bl	8009ee0 <move_window>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d118      	bne.n	800a194 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	009b      	lsls	r3, r3, #2
 800a16c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a170:	4413      	add	r3, r2
 800a172:	4618      	mov	r0, r3
 800a174:	f7ff fc1c 	bl	80099b0 <ld_dword>
 800a178:	4603      	mov	r3, r0
 800a17a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a17e:	617b      	str	r3, [r7, #20]
			break;
 800a180:	e009      	b.n	800a196 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a182:	2301      	movs	r3, #1
 800a184:	617b      	str	r3, [r7, #20]
 800a186:	e006      	b.n	800a196 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a188:	bf00      	nop
 800a18a:	e004      	b.n	800a196 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a18c:	bf00      	nop
 800a18e:	e002      	b.n	800a196 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a190:	bf00      	nop
 800a192:	e000      	b.n	800a196 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a194:	bf00      	nop
		}
	}

	return val;
 800a196:	697b      	ldr	r3, [r7, #20]
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3718      	adds	r7, #24
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a1a0:	b590      	push	{r4, r7, lr}
 800a1a2:	b089      	sub	sp, #36	; 0x24
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a1ac:	2302      	movs	r3, #2
 800a1ae:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	f240 80d6 	bls.w	800a364 <put_fat+0x1c4>
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	695b      	ldr	r3, [r3, #20]
 800a1bc:	68ba      	ldr	r2, [r7, #8]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	f080 80d0 	bcs.w	800a364 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	2b02      	cmp	r3, #2
 800a1ca:	d073      	beq.n	800a2b4 <put_fat+0x114>
 800a1cc:	2b03      	cmp	r3, #3
 800a1ce:	f000 8091 	beq.w	800a2f4 <put_fat+0x154>
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	f040 80c6 	bne.w	800a364 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	61bb      	str	r3, [r7, #24]
 800a1dc:	69bb      	ldr	r3, [r7, #24]
 800a1de:	085b      	lsrs	r3, r3, #1
 800a1e0:	69ba      	ldr	r2, [r7, #24]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	6a1a      	ldr	r2, [r3, #32]
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	0a5b      	lsrs	r3, r3, #9
 800a1ee:	4413      	add	r3, r2
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	f7ff fe74 	bl	8009ee0 <move_window>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a1fc:	7ffb      	ldrb	r3, [r7, #31]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	f040 80a9 	bne.w	800a356 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	1c59      	adds	r1, r3, #1
 800a20e:	61b9      	str	r1, [r7, #24]
 800a210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a214:	4413      	add	r3, r2
 800a216:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	f003 0301 	and.w	r3, r3, #1
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d00d      	beq.n	800a23e <put_fat+0x9e>
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	b25b      	sxtb	r3, r3
 800a228:	f003 030f 	and.w	r3, r3, #15
 800a22c:	b25a      	sxtb	r2, r3
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	b2db      	uxtb	r3, r3
 800a232:	011b      	lsls	r3, r3, #4
 800a234:	b25b      	sxtb	r3, r3
 800a236:	4313      	orrs	r3, r2
 800a238:	b25b      	sxtb	r3, r3
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	e001      	b.n	800a242 <put_fat+0xa2>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	b2db      	uxtb	r3, r3
 800a242:	697a      	ldr	r2, [r7, #20]
 800a244:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2201      	movs	r2, #1
 800a24a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6a1a      	ldr	r2, [r3, #32]
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	0a5b      	lsrs	r3, r3, #9
 800a254:	4413      	add	r3, r2
 800a256:	4619      	mov	r1, r3
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	f7ff fe41 	bl	8009ee0 <move_window>
 800a25e:	4603      	mov	r3, r0
 800a260:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a262:	7ffb      	ldrb	r3, [r7, #31]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d178      	bne.n	800a35a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a26e:	69bb      	ldr	r3, [r7, #24]
 800a270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a274:	4413      	add	r3, r2
 800a276:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	f003 0301 	and.w	r3, r3, #1
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d003      	beq.n	800a28a <put_fat+0xea>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	091b      	lsrs	r3, r3, #4
 800a286:	b2db      	uxtb	r3, r3
 800a288:	e00e      	b.n	800a2a8 <put_fat+0x108>
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	b25b      	sxtb	r3, r3
 800a290:	f023 030f 	bic.w	r3, r3, #15
 800a294:	b25a      	sxtb	r2, r3
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	0a1b      	lsrs	r3, r3, #8
 800a29a:	b25b      	sxtb	r3, r3
 800a29c:	f003 030f 	and.w	r3, r3, #15
 800a2a0:	b25b      	sxtb	r3, r3
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	b25b      	sxtb	r3, r3
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	697a      	ldr	r2, [r7, #20]
 800a2aa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	70da      	strb	r2, [r3, #3]
			break;
 800a2b2:	e057      	b.n	800a364 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	6a1a      	ldr	r2, [r3, #32]
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	0a1b      	lsrs	r3, r3, #8
 800a2bc:	4413      	add	r3, r2
 800a2be:	4619      	mov	r1, r3
 800a2c0:	68f8      	ldr	r0, [r7, #12]
 800a2c2:	f7ff fe0d 	bl	8009ee0 <move_window>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a2ca:	7ffb      	ldrb	r3, [r7, #31]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d146      	bne.n	800a35e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	005b      	lsls	r3, r3, #1
 800a2da:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a2de:	4413      	add	r3, r2
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	b292      	uxth	r2, r2
 800a2e4:	4611      	mov	r1, r2
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f7ff fb85 	bl	80099f6 <st_word>
			fs->wflag = 1;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	70da      	strb	r2, [r3, #3]
			break;
 800a2f2:	e037      	b.n	800a364 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	6a1a      	ldr	r2, [r3, #32]
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	09db      	lsrs	r3, r3, #7
 800a2fc:	4413      	add	r3, r2
 800a2fe:	4619      	mov	r1, r3
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	f7ff fded 	bl	8009ee0 <move_window>
 800a306:	4603      	mov	r3, r0
 800a308:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a30a:	7ffb      	ldrb	r3, [r7, #31]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d128      	bne.n	800a362 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a324:	4413      	add	r3, r2
 800a326:	4618      	mov	r0, r3
 800a328:	f7ff fb42 	bl	80099b0 <ld_dword>
 800a32c:	4603      	mov	r3, r0
 800a32e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a332:	4323      	orrs	r3, r4
 800a334:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	009b      	lsls	r3, r3, #2
 800a340:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a344:	4413      	add	r3, r2
 800a346:	6879      	ldr	r1, [r7, #4]
 800a348:	4618      	mov	r0, r3
 800a34a:	f7ff fb6f 	bl	8009a2c <st_dword>
			fs->wflag = 1;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2201      	movs	r2, #1
 800a352:	70da      	strb	r2, [r3, #3]
			break;
 800a354:	e006      	b.n	800a364 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a356:	bf00      	nop
 800a358:	e004      	b.n	800a364 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a35a:	bf00      	nop
 800a35c:	e002      	b.n	800a364 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a35e:	bf00      	nop
 800a360:	e000      	b.n	800a364 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a362:	bf00      	nop
		}
	}
	return res;
 800a364:	7ffb      	ldrb	r3, [r7, #31]
}
 800a366:	4618      	mov	r0, r3
 800a368:	3724      	adds	r7, #36	; 0x24
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd90      	pop	{r4, r7, pc}

0800a36e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b088      	sub	sp, #32
 800a372:	af00      	add	r7, sp, #0
 800a374:	60f8      	str	r0, [r7, #12]
 800a376:	60b9      	str	r1, [r7, #8]
 800a378:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a37a:	2300      	movs	r3, #0
 800a37c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	2b01      	cmp	r3, #1
 800a388:	d904      	bls.n	800a394 <remove_chain+0x26>
 800a38a:	69bb      	ldr	r3, [r7, #24]
 800a38c:	695b      	ldr	r3, [r3, #20]
 800a38e:	68ba      	ldr	r2, [r7, #8]
 800a390:	429a      	cmp	r2, r3
 800a392:	d301      	bcc.n	800a398 <remove_chain+0x2a>
 800a394:	2302      	movs	r3, #2
 800a396:	e04b      	b.n	800a430 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d00c      	beq.n	800a3b8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a39e:	f04f 32ff 	mov.w	r2, #4294967295
 800a3a2:	6879      	ldr	r1, [r7, #4]
 800a3a4:	69b8      	ldr	r0, [r7, #24]
 800a3a6:	f7ff fefb 	bl	800a1a0 <put_fat>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a3ae:	7ffb      	ldrb	r3, [r7, #31]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d001      	beq.n	800a3b8 <remove_chain+0x4a>
 800a3b4:	7ffb      	ldrb	r3, [r7, #31]
 800a3b6:	e03b      	b.n	800a430 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a3b8:	68b9      	ldr	r1, [r7, #8]
 800a3ba:	68f8      	ldr	r0, [r7, #12]
 800a3bc:	f7ff fe4b 	bl	800a056 <get_fat>
 800a3c0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d031      	beq.n	800a42c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d101      	bne.n	800a3d2 <remove_chain+0x64>
 800a3ce:	2302      	movs	r3, #2
 800a3d0:	e02e      	b.n	800a430 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d8:	d101      	bne.n	800a3de <remove_chain+0x70>
 800a3da:	2301      	movs	r3, #1
 800a3dc:	e028      	b.n	800a430 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a3de:	2200      	movs	r2, #0
 800a3e0:	68b9      	ldr	r1, [r7, #8]
 800a3e2:	69b8      	ldr	r0, [r7, #24]
 800a3e4:	f7ff fedc 	bl	800a1a0 <put_fat>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a3ec:	7ffb      	ldrb	r3, [r7, #31]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d001      	beq.n	800a3f6 <remove_chain+0x88>
 800a3f2:	7ffb      	ldrb	r3, [r7, #31]
 800a3f4:	e01c      	b.n	800a430 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	691a      	ldr	r2, [r3, #16]
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	695b      	ldr	r3, [r3, #20]
 800a3fe:	3b02      	subs	r3, #2
 800a400:	429a      	cmp	r2, r3
 800a402:	d20b      	bcs.n	800a41c <remove_chain+0xae>
			fs->free_clst++;
 800a404:	69bb      	ldr	r3, [r7, #24]
 800a406:	691b      	ldr	r3, [r3, #16]
 800a408:	1c5a      	adds	r2, r3, #1
 800a40a:	69bb      	ldr	r3, [r7, #24]
 800a40c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	791b      	ldrb	r3, [r3, #4]
 800a412:	f043 0301 	orr.w	r3, r3, #1
 800a416:	b2da      	uxtb	r2, r3
 800a418:	69bb      	ldr	r3, [r7, #24]
 800a41a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a420:	69bb      	ldr	r3, [r7, #24]
 800a422:	695b      	ldr	r3, [r3, #20]
 800a424:	68ba      	ldr	r2, [r7, #8]
 800a426:	429a      	cmp	r2, r3
 800a428:	d3c6      	bcc.n	800a3b8 <remove_chain+0x4a>
 800a42a:	e000      	b.n	800a42e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a42c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a42e:	2300      	movs	r3, #0
}
 800a430:	4618      	mov	r0, r3
 800a432:	3720      	adds	r7, #32
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b088      	sub	sp, #32
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d10d      	bne.n	800a46a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d004      	beq.n	800a464 <create_chain+0x2c>
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	695b      	ldr	r3, [r3, #20]
 800a45e:	69ba      	ldr	r2, [r7, #24]
 800a460:	429a      	cmp	r2, r3
 800a462:	d31b      	bcc.n	800a49c <create_chain+0x64>
 800a464:	2301      	movs	r3, #1
 800a466:	61bb      	str	r3, [r7, #24]
 800a468:	e018      	b.n	800a49c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a46a:	6839      	ldr	r1, [r7, #0]
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f7ff fdf2 	bl	800a056 <get_fat>
 800a472:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2b01      	cmp	r3, #1
 800a478:	d801      	bhi.n	800a47e <create_chain+0x46>
 800a47a:	2301      	movs	r3, #1
 800a47c:	e070      	b.n	800a560 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a484:	d101      	bne.n	800a48a <create_chain+0x52>
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	e06a      	b.n	800a560 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	695b      	ldr	r3, [r3, #20]
 800a48e:	68fa      	ldr	r2, [r7, #12]
 800a490:	429a      	cmp	r2, r3
 800a492:	d201      	bcs.n	800a498 <create_chain+0x60>
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	e063      	b.n	800a560 <create_chain+0x128>
		scl = clst;
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a4a0:	69fb      	ldr	r3, [r7, #28]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	695b      	ldr	r3, [r3, #20]
 800a4aa:	69fa      	ldr	r2, [r7, #28]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d307      	bcc.n	800a4c0 <create_chain+0x88>
				ncl = 2;
 800a4b0:	2302      	movs	r3, #2
 800a4b2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a4b4:	69fa      	ldr	r2, [r7, #28]
 800a4b6:	69bb      	ldr	r3, [r7, #24]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d901      	bls.n	800a4c0 <create_chain+0x88>
 800a4bc:	2300      	movs	r3, #0
 800a4be:	e04f      	b.n	800a560 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a4c0:	69f9      	ldr	r1, [r7, #28]
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f7ff fdc7 	bl	800a056 <get_fat>
 800a4c8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d00e      	beq.n	800a4ee <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d003      	beq.n	800a4de <create_chain+0xa6>
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4dc:	d101      	bne.n	800a4e2 <create_chain+0xaa>
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	e03e      	b.n	800a560 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a4e2:	69fa      	ldr	r2, [r7, #28]
 800a4e4:	69bb      	ldr	r3, [r7, #24]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d1da      	bne.n	800a4a0 <create_chain+0x68>
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	e038      	b.n	800a560 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a4ee:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a4f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f4:	69f9      	ldr	r1, [r7, #28]
 800a4f6:	6938      	ldr	r0, [r7, #16]
 800a4f8:	f7ff fe52 	bl	800a1a0 <put_fat>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a500:	7dfb      	ldrb	r3, [r7, #23]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d109      	bne.n	800a51a <create_chain+0xe2>
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d006      	beq.n	800a51a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a50c:	69fa      	ldr	r2, [r7, #28]
 800a50e:	6839      	ldr	r1, [r7, #0]
 800a510:	6938      	ldr	r0, [r7, #16]
 800a512:	f7ff fe45 	bl	800a1a0 <put_fat>
 800a516:	4603      	mov	r3, r0
 800a518:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a51a:	7dfb      	ldrb	r3, [r7, #23]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d116      	bne.n	800a54e <create_chain+0x116>
		fs->last_clst = ncl;
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	69fa      	ldr	r2, [r7, #28]
 800a524:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	691a      	ldr	r2, [r3, #16]
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	695b      	ldr	r3, [r3, #20]
 800a52e:	3b02      	subs	r3, #2
 800a530:	429a      	cmp	r2, r3
 800a532:	d804      	bhi.n	800a53e <create_chain+0x106>
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	691b      	ldr	r3, [r3, #16]
 800a538:	1e5a      	subs	r2, r3, #1
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	791b      	ldrb	r3, [r3, #4]
 800a542:	f043 0301 	orr.w	r3, r3, #1
 800a546:	b2da      	uxtb	r2, r3
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	711a      	strb	r2, [r3, #4]
 800a54c:	e007      	b.n	800a55e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a54e:	7dfb      	ldrb	r3, [r7, #23]
 800a550:	2b01      	cmp	r3, #1
 800a552:	d102      	bne.n	800a55a <create_chain+0x122>
 800a554:	f04f 33ff 	mov.w	r3, #4294967295
 800a558:	e000      	b.n	800a55c <create_chain+0x124>
 800a55a:	2301      	movs	r3, #1
 800a55c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a55e:	69fb      	ldr	r3, [r7, #28]
}
 800a560:	4618      	mov	r0, r3
 800a562:	3720      	adds	r7, #32
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a568:	b480      	push	{r7}
 800a56a:	b087      	sub	sp, #28
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a57c:	3304      	adds	r3, #4
 800a57e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	0a5b      	lsrs	r3, r3, #9
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	8952      	ldrh	r2, [r2, #10]
 800a588:	fbb3 f3f2 	udiv	r3, r3, r2
 800a58c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	1d1a      	adds	r2, r3, #4
 800a592:	613a      	str	r2, [r7, #16]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d101      	bne.n	800a5a2 <clmt_clust+0x3a>
 800a59e:	2300      	movs	r3, #0
 800a5a0:	e010      	b.n	800a5c4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a5a2:	697a      	ldr	r2, [r7, #20]
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d307      	bcc.n	800a5ba <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a5aa:	697a      	ldr	r2, [r7, #20]
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	1ad3      	subs	r3, r2, r3
 800a5b0:	617b      	str	r3, [r7, #20]
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	3304      	adds	r3, #4
 800a5b6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a5b8:	e7e9      	b.n	800a58e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a5ba:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	4413      	add	r3, r2
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	371c      	adds	r7, #28
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b086      	sub	sp, #24
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a5e6:	d204      	bcs.n	800a5f2 <dir_sdi+0x22>
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	f003 031f 	and.w	r3, r3, #31
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d001      	beq.n	800a5f6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a5f2:	2302      	movs	r3, #2
 800a5f4:	e063      	b.n	800a6be <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	683a      	ldr	r2, [r7, #0]
 800a5fa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d106      	bne.n	800a616 <dir_sdi+0x46>
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	2b02      	cmp	r3, #2
 800a60e:	d902      	bls.n	800a616 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a614:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d10c      	bne.n	800a636 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	095b      	lsrs	r3, r3, #5
 800a620:	693a      	ldr	r2, [r7, #16]
 800a622:	8912      	ldrh	r2, [r2, #8]
 800a624:	4293      	cmp	r3, r2
 800a626:	d301      	bcc.n	800a62c <dir_sdi+0x5c>
 800a628:	2302      	movs	r3, #2
 800a62a:	e048      	b.n	800a6be <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	61da      	str	r2, [r3, #28]
 800a634:	e029      	b.n	800a68a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	895b      	ldrh	r3, [r3, #10]
 800a63a:	025b      	lsls	r3, r3, #9
 800a63c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a63e:	e019      	b.n	800a674 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6979      	ldr	r1, [r7, #20]
 800a644:	4618      	mov	r0, r3
 800a646:	f7ff fd06 	bl	800a056 <get_fat>
 800a64a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a652:	d101      	bne.n	800a658 <dir_sdi+0x88>
 800a654:	2301      	movs	r3, #1
 800a656:	e032      	b.n	800a6be <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d904      	bls.n	800a668 <dir_sdi+0x98>
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	695b      	ldr	r3, [r3, #20]
 800a662:	697a      	ldr	r2, [r7, #20]
 800a664:	429a      	cmp	r2, r3
 800a666:	d301      	bcc.n	800a66c <dir_sdi+0x9c>
 800a668:	2302      	movs	r3, #2
 800a66a:	e028      	b.n	800a6be <dir_sdi+0xee>
			ofs -= csz;
 800a66c:	683a      	ldr	r2, [r7, #0]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	1ad3      	subs	r3, r2, r3
 800a672:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a674:	683a      	ldr	r2, [r7, #0]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d2e1      	bcs.n	800a640 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a67c:	6979      	ldr	r1, [r7, #20]
 800a67e:	6938      	ldr	r0, [r7, #16]
 800a680:	f7ff fcca 	bl	800a018 <clust2sect>
 800a684:	4602      	mov	r2, r0
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	697a      	ldr	r2, [r7, #20]
 800a68e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	69db      	ldr	r3, [r3, #28]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d101      	bne.n	800a69c <dir_sdi+0xcc>
 800a698:	2302      	movs	r3, #2
 800a69a:	e010      	b.n	800a6be <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	69da      	ldr	r2, [r3, #28]
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	0a5b      	lsrs	r3, r3, #9
 800a6a4:	441a      	add	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6b6:	441a      	add	r2, r3
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3718      	adds	r7, #24
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b086      	sub	sp, #24
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
 800a6ce:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	695b      	ldr	r3, [r3, #20]
 800a6da:	3320      	adds	r3, #32
 800a6dc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	69db      	ldr	r3, [r3, #28]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d003      	beq.n	800a6ee <dir_next+0x28>
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a6ec:	d301      	bcc.n	800a6f2 <dir_next+0x2c>
 800a6ee:	2304      	movs	r3, #4
 800a6f0:	e0aa      	b.n	800a848 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	f040 8098 	bne.w	800a82e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	69db      	ldr	r3, [r3, #28]
 800a702:	1c5a      	adds	r2, r3, #1
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	699b      	ldr	r3, [r3, #24]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d10b      	bne.n	800a728 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	095b      	lsrs	r3, r3, #5
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	8912      	ldrh	r2, [r2, #8]
 800a718:	4293      	cmp	r3, r2
 800a71a:	f0c0 8088 	bcc.w	800a82e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2200      	movs	r2, #0
 800a722:	61da      	str	r2, [r3, #28]
 800a724:	2304      	movs	r3, #4
 800a726:	e08f      	b.n	800a848 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	0a5b      	lsrs	r3, r3, #9
 800a72c:	68fa      	ldr	r2, [r7, #12]
 800a72e:	8952      	ldrh	r2, [r2, #10]
 800a730:	3a01      	subs	r2, #1
 800a732:	4013      	ands	r3, r2
 800a734:	2b00      	cmp	r3, #0
 800a736:	d17a      	bne.n	800a82e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a738:	687a      	ldr	r2, [r7, #4]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	699b      	ldr	r3, [r3, #24]
 800a73e:	4619      	mov	r1, r3
 800a740:	4610      	mov	r0, r2
 800a742:	f7ff fc88 	bl	800a056 <get_fat>
 800a746:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d801      	bhi.n	800a752 <dir_next+0x8c>
 800a74e:	2302      	movs	r3, #2
 800a750:	e07a      	b.n	800a848 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a758:	d101      	bne.n	800a75e <dir_next+0x98>
 800a75a:	2301      	movs	r3, #1
 800a75c:	e074      	b.n	800a848 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	695b      	ldr	r3, [r3, #20]
 800a762:	697a      	ldr	r2, [r7, #20]
 800a764:	429a      	cmp	r2, r3
 800a766:	d358      	bcc.n	800a81a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d104      	bne.n	800a778 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	61da      	str	r2, [r3, #28]
 800a774:	2304      	movs	r3, #4
 800a776:	e067      	b.n	800a848 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	699b      	ldr	r3, [r3, #24]
 800a77e:	4619      	mov	r1, r3
 800a780:	4610      	mov	r0, r2
 800a782:	f7ff fe59 	bl	800a438 <create_chain>
 800a786:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d101      	bne.n	800a792 <dir_next+0xcc>
 800a78e:	2307      	movs	r3, #7
 800a790:	e05a      	b.n	800a848 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	2b01      	cmp	r3, #1
 800a796:	d101      	bne.n	800a79c <dir_next+0xd6>
 800a798:	2302      	movs	r3, #2
 800a79a:	e055      	b.n	800a848 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7a2:	d101      	bne.n	800a7a8 <dir_next+0xe2>
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	e04f      	b.n	800a848 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a7a8:	68f8      	ldr	r0, [r7, #12]
 800a7aa:	f7ff fb55 	bl	8009e58 <sync_window>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d001      	beq.n	800a7b8 <dir_next+0xf2>
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	e047      	b.n	800a848 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	3330      	adds	r3, #48	; 0x30
 800a7bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7c0:	2100      	movs	r1, #0
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7ff f97f 	bl	8009ac6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	613b      	str	r3, [r7, #16]
 800a7cc:	6979      	ldr	r1, [r7, #20]
 800a7ce:	68f8      	ldr	r0, [r7, #12]
 800a7d0:	f7ff fc22 	bl	800a018 <clust2sect>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	62da      	str	r2, [r3, #44]	; 0x2c
 800a7da:	e012      	b.n	800a802 <dir_next+0x13c>
						fs->wflag = 1;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	f7ff fb38 	bl	8009e58 <sync_window>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d001      	beq.n	800a7f2 <dir_next+0x12c>
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e02a      	b.n	800a848 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	613b      	str	r3, [r7, #16]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7fc:	1c5a      	adds	r2, r3, #1
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	62da      	str	r2, [r3, #44]	; 0x2c
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	895b      	ldrh	r3, [r3, #10]
 800a806:	461a      	mov	r2, r3
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d3e6      	bcc.n	800a7dc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	1ad2      	subs	r2, r2, r3
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	697a      	ldr	r2, [r7, #20]
 800a81e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a820:	6979      	ldr	r1, [r7, #20]
 800a822:	68f8      	ldr	r0, [r7, #12]
 800a824:	f7ff fbf8 	bl	800a018 <clust2sect>
 800a828:	4602      	mov	r2, r0
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a840:	441a      	add	r2, r3
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a846:	2300      	movs	r3, #0
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3718      	adds	r7, #24
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b086      	sub	sp, #24
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a860:	2100      	movs	r1, #0
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f7ff feb4 	bl	800a5d0 <dir_sdi>
 800a868:	4603      	mov	r3, r0
 800a86a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a86c:	7dfb      	ldrb	r3, [r7, #23]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d12b      	bne.n	800a8ca <dir_alloc+0x7a>
		n = 0;
 800a872:	2300      	movs	r3, #0
 800a874:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	69db      	ldr	r3, [r3, #28]
 800a87a:	4619      	mov	r1, r3
 800a87c:	68f8      	ldr	r0, [r7, #12]
 800a87e:	f7ff fb2f 	bl	8009ee0 <move_window>
 800a882:	4603      	mov	r3, r0
 800a884:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a886:	7dfb      	ldrb	r3, [r7, #23]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d11d      	bne.n	800a8c8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6a1b      	ldr	r3, [r3, #32]
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	2be5      	cmp	r3, #229	; 0xe5
 800a894:	d004      	beq.n	800a8a0 <dir_alloc+0x50>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6a1b      	ldr	r3, [r3, #32]
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d107      	bne.n	800a8b0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	613b      	str	r3, [r7, #16]
 800a8a6:	693a      	ldr	r2, [r7, #16]
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d102      	bne.n	800a8b4 <dir_alloc+0x64>
 800a8ae:	e00c      	b.n	800a8ca <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a8b4:	2101      	movs	r1, #1
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f7ff ff05 	bl	800a6c6 <dir_next>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a8c0:	7dfb      	ldrb	r3, [r7, #23]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d0d7      	beq.n	800a876 <dir_alloc+0x26>
 800a8c6:	e000      	b.n	800a8ca <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a8c8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a8ca:	7dfb      	ldrb	r3, [r7, #23]
 800a8cc:	2b04      	cmp	r3, #4
 800a8ce:	d101      	bne.n	800a8d4 <dir_alloc+0x84>
 800a8d0:	2307      	movs	r3, #7
 800a8d2:	75fb      	strb	r3, [r7, #23]
	return res;
 800a8d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3718      	adds	r7, #24
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b084      	sub	sp, #16
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
 800a8e6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	331a      	adds	r3, #26
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7ff f847 	bl	8009980 <ld_word>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	2b03      	cmp	r3, #3
 800a8fc:	d109      	bne.n	800a912 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	3314      	adds	r3, #20
 800a902:	4618      	mov	r0, r3
 800a904:	f7ff f83c 	bl	8009980 <ld_word>
 800a908:	4603      	mov	r3, r0
 800a90a:	041b      	lsls	r3, r3, #16
 800a90c:	68fa      	ldr	r2, [r7, #12]
 800a90e:	4313      	orrs	r3, r2
 800a910:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a912:	68fb      	ldr	r3, [r7, #12]
}
 800a914:	4618      	mov	r0, r3
 800a916:	3710      	adds	r7, #16
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	60b9      	str	r1, [r7, #8]
 800a926:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	331a      	adds	r3, #26
 800a92c:	687a      	ldr	r2, [r7, #4]
 800a92e:	b292      	uxth	r2, r2
 800a930:	4611      	mov	r1, r2
 800a932:	4618      	mov	r0, r3
 800a934:	f7ff f85f 	bl	80099f6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	2b03      	cmp	r3, #3
 800a93e:	d109      	bne.n	800a954 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	f103 0214 	add.w	r2, r3, #20
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	0c1b      	lsrs	r3, r3, #16
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	4619      	mov	r1, r3
 800a94e:	4610      	mov	r0, r2
 800a950:	f7ff f851 	bl	80099f6 <st_word>
	}
}
 800a954:	bf00      	nop
 800a956:	3710      	adds	r7, #16
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b086      	sub	sp, #24
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a96a:	2100      	movs	r1, #0
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f7ff fe2f 	bl	800a5d0 <dir_sdi>
 800a972:	4603      	mov	r3, r0
 800a974:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a976:	7dfb      	ldrb	r3, [r7, #23]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d001      	beq.n	800a980 <dir_find+0x24>
 800a97c:	7dfb      	ldrb	r3, [r7, #23]
 800a97e:	e03e      	b.n	800a9fe <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	69db      	ldr	r3, [r3, #28]
 800a984:	4619      	mov	r1, r3
 800a986:	6938      	ldr	r0, [r7, #16]
 800a988:	f7ff faaa 	bl	8009ee0 <move_window>
 800a98c:	4603      	mov	r3, r0
 800a98e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a990:	7dfb      	ldrb	r3, [r7, #23]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d12f      	bne.n	800a9f6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6a1b      	ldr	r3, [r3, #32]
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a99e:	7bfb      	ldrb	r3, [r7, #15]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d102      	bne.n	800a9aa <dir_find+0x4e>
 800a9a4:	2304      	movs	r3, #4
 800a9a6:	75fb      	strb	r3, [r7, #23]
 800a9a8:	e028      	b.n	800a9fc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6a1b      	ldr	r3, [r3, #32]
 800a9ae:	330b      	adds	r3, #11
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9b6:	b2da      	uxtb	r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6a1b      	ldr	r3, [r3, #32]
 800a9c0:	330b      	adds	r3, #11
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	f003 0308 	and.w	r3, r3, #8
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d10a      	bne.n	800a9e2 <dir_find+0x86>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6a18      	ldr	r0, [r3, #32]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	3324      	adds	r3, #36	; 0x24
 800a9d4:	220b      	movs	r2, #11
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	f7ff f88f 	bl	8009afa <mem_cmp>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d00b      	beq.n	800a9fa <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a9e2:	2100      	movs	r1, #0
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f7ff fe6e 	bl	800a6c6 <dir_next>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a9ee:	7dfb      	ldrb	r3, [r7, #23]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d0c5      	beq.n	800a980 <dir_find+0x24>
 800a9f4:	e002      	b.n	800a9fc <dir_find+0xa0>
		if (res != FR_OK) break;
 800a9f6:	bf00      	nop
 800a9f8:	e000      	b.n	800a9fc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a9fa:	bf00      	nop

	return res;
 800a9fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3718      	adds	r7, #24
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b084      	sub	sp, #16
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800aa14:	2101      	movs	r1, #1
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f7ff ff1a 	bl	800a850 <dir_alloc>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800aa20:	7bfb      	ldrb	r3, [r7, #15]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d11c      	bne.n	800aa60 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	69db      	ldr	r3, [r3, #28]
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	68b8      	ldr	r0, [r7, #8]
 800aa2e:	f7ff fa57 	bl	8009ee0 <move_window>
 800aa32:	4603      	mov	r3, r0
 800aa34:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800aa36:	7bfb      	ldrb	r3, [r7, #15]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d111      	bne.n	800aa60 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6a1b      	ldr	r3, [r3, #32]
 800aa40:	2220      	movs	r2, #32
 800aa42:	2100      	movs	r1, #0
 800aa44:	4618      	mov	r0, r3
 800aa46:	f7ff f83e 	bl	8009ac6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6a18      	ldr	r0, [r3, #32]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	3324      	adds	r3, #36	; 0x24
 800aa52:	220b      	movs	r2, #11
 800aa54:	4619      	mov	r1, r3
 800aa56:	f7ff f815 	bl	8009a84 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800aa60:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
	...

0800aa6c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b088      	sub	sp, #32
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	60fb      	str	r3, [r7, #12]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	3324      	adds	r3, #36	; 0x24
 800aa80:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800aa82:	220b      	movs	r2, #11
 800aa84:	2120      	movs	r1, #32
 800aa86:	68b8      	ldr	r0, [r7, #8]
 800aa88:	f7ff f81d 	bl	8009ac6 <mem_set>
	si = i = 0; ni = 8;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	613b      	str	r3, [r7, #16]
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	617b      	str	r3, [r7, #20]
 800aa94:	2308      	movs	r3, #8
 800aa96:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	1c5a      	adds	r2, r3, #1
 800aa9c:	617a      	str	r2, [r7, #20]
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	4413      	add	r3, r2
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800aaa6:	7ffb      	ldrb	r3, [r7, #31]
 800aaa8:	2b20      	cmp	r3, #32
 800aaaa:	d94e      	bls.n	800ab4a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800aaac:	7ffb      	ldrb	r3, [r7, #31]
 800aaae:	2b2f      	cmp	r3, #47	; 0x2f
 800aab0:	d006      	beq.n	800aac0 <create_name+0x54>
 800aab2:	7ffb      	ldrb	r3, [r7, #31]
 800aab4:	2b5c      	cmp	r3, #92	; 0x5c
 800aab6:	d110      	bne.n	800aada <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800aab8:	e002      	b.n	800aac0 <create_name+0x54>
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	3301      	adds	r3, #1
 800aabe:	617b      	str	r3, [r7, #20]
 800aac0:	68fa      	ldr	r2, [r7, #12]
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	4413      	add	r3, r2
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	2b2f      	cmp	r3, #47	; 0x2f
 800aaca:	d0f6      	beq.n	800aaba <create_name+0x4e>
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	4413      	add	r3, r2
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	2b5c      	cmp	r3, #92	; 0x5c
 800aad6:	d0f0      	beq.n	800aaba <create_name+0x4e>
			break;
 800aad8:	e038      	b.n	800ab4c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800aada:	7ffb      	ldrb	r3, [r7, #31]
 800aadc:	2b2e      	cmp	r3, #46	; 0x2e
 800aade:	d003      	beq.n	800aae8 <create_name+0x7c>
 800aae0:	693a      	ldr	r2, [r7, #16]
 800aae2:	69bb      	ldr	r3, [r7, #24]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d30c      	bcc.n	800ab02 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	2b0b      	cmp	r3, #11
 800aaec:	d002      	beq.n	800aaf4 <create_name+0x88>
 800aaee:	7ffb      	ldrb	r3, [r7, #31]
 800aaf0:	2b2e      	cmp	r3, #46	; 0x2e
 800aaf2:	d001      	beq.n	800aaf8 <create_name+0x8c>
 800aaf4:	2306      	movs	r3, #6
 800aaf6:	e044      	b.n	800ab82 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800aaf8:	2308      	movs	r3, #8
 800aafa:	613b      	str	r3, [r7, #16]
 800aafc:	230b      	movs	r3, #11
 800aafe:	61bb      	str	r3, [r7, #24]
			continue;
 800ab00:	e022      	b.n	800ab48 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ab02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	da04      	bge.n	800ab14 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ab0a:	7ffb      	ldrb	r3, [r7, #31]
 800ab0c:	3b80      	subs	r3, #128	; 0x80
 800ab0e:	4a1f      	ldr	r2, [pc, #124]	; (800ab8c <create_name+0x120>)
 800ab10:	5cd3      	ldrb	r3, [r2, r3]
 800ab12:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ab14:	7ffb      	ldrb	r3, [r7, #31]
 800ab16:	4619      	mov	r1, r3
 800ab18:	481d      	ldr	r0, [pc, #116]	; (800ab90 <create_name+0x124>)
 800ab1a:	f7ff f815 	bl	8009b48 <chk_chr>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d001      	beq.n	800ab28 <create_name+0xbc>
 800ab24:	2306      	movs	r3, #6
 800ab26:	e02c      	b.n	800ab82 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ab28:	7ffb      	ldrb	r3, [r7, #31]
 800ab2a:	2b60      	cmp	r3, #96	; 0x60
 800ab2c:	d905      	bls.n	800ab3a <create_name+0xce>
 800ab2e:	7ffb      	ldrb	r3, [r7, #31]
 800ab30:	2b7a      	cmp	r3, #122	; 0x7a
 800ab32:	d802      	bhi.n	800ab3a <create_name+0xce>
 800ab34:	7ffb      	ldrb	r3, [r7, #31]
 800ab36:	3b20      	subs	r3, #32
 800ab38:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	1c5a      	adds	r2, r3, #1
 800ab3e:	613a      	str	r2, [r7, #16]
 800ab40:	68ba      	ldr	r2, [r7, #8]
 800ab42:	4413      	add	r3, r2
 800ab44:	7ffa      	ldrb	r2, [r7, #31]
 800ab46:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ab48:	e7a6      	b.n	800aa98 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ab4a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	441a      	add	r2, r3
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d101      	bne.n	800ab60 <create_name+0xf4>
 800ab5c:	2306      	movs	r3, #6
 800ab5e:	e010      	b.n	800ab82 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	2be5      	cmp	r3, #229	; 0xe5
 800ab66:	d102      	bne.n	800ab6e <create_name+0x102>
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	2205      	movs	r2, #5
 800ab6c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ab6e:	7ffb      	ldrb	r3, [r7, #31]
 800ab70:	2b20      	cmp	r3, #32
 800ab72:	d801      	bhi.n	800ab78 <create_name+0x10c>
 800ab74:	2204      	movs	r2, #4
 800ab76:	e000      	b.n	800ab7a <create_name+0x10e>
 800ab78:	2200      	movs	r2, #0
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	330b      	adds	r3, #11
 800ab7e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ab80:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3720      	adds	r7, #32
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	0800ca0c 	.word	0x0800ca0c
 800ab90:	0800c998 	.word	0x0800c998

0800ab94 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b086      	sub	sp, #24
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800aba8:	e002      	b.n	800abb0 <follow_path+0x1c>
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	3301      	adds	r3, #1
 800abae:	603b      	str	r3, [r7, #0]
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	2b2f      	cmp	r3, #47	; 0x2f
 800abb6:	d0f8      	beq.n	800abaa <follow_path+0x16>
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	2b5c      	cmp	r3, #92	; 0x5c
 800abbe:	d0f4      	beq.n	800abaa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	2200      	movs	r2, #0
 800abc4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	2b1f      	cmp	r3, #31
 800abcc:	d80a      	bhi.n	800abe4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2280      	movs	r2, #128	; 0x80
 800abd2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800abd6:	2100      	movs	r1, #0
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f7ff fcf9 	bl	800a5d0 <dir_sdi>
 800abde:	4603      	mov	r3, r0
 800abe0:	75fb      	strb	r3, [r7, #23]
 800abe2:	e043      	b.n	800ac6c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800abe4:	463b      	mov	r3, r7
 800abe6:	4619      	mov	r1, r3
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f7ff ff3f 	bl	800aa6c <create_name>
 800abee:	4603      	mov	r3, r0
 800abf0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800abf2:	7dfb      	ldrb	r3, [r7, #23]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d134      	bne.n	800ac62 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f7ff feaf 	bl	800a95c <dir_find>
 800abfe:	4603      	mov	r3, r0
 800ac00:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ac08:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ac0a:	7dfb      	ldrb	r3, [r7, #23]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00a      	beq.n	800ac26 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ac10:	7dfb      	ldrb	r3, [r7, #23]
 800ac12:	2b04      	cmp	r3, #4
 800ac14:	d127      	bne.n	800ac66 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ac16:	7afb      	ldrb	r3, [r7, #11]
 800ac18:	f003 0304 	and.w	r3, r3, #4
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d122      	bne.n	800ac66 <follow_path+0xd2>
 800ac20:	2305      	movs	r3, #5
 800ac22:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ac24:	e01f      	b.n	800ac66 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ac26:	7afb      	ldrb	r3, [r7, #11]
 800ac28:	f003 0304 	and.w	r3, r3, #4
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d11c      	bne.n	800ac6a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	799b      	ldrb	r3, [r3, #6]
 800ac34:	f003 0310 	and.w	r3, r3, #16
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d102      	bne.n	800ac42 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ac3c:	2305      	movs	r3, #5
 800ac3e:	75fb      	strb	r3, [r7, #23]
 800ac40:	e014      	b.n	800ac6c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	695b      	ldr	r3, [r3, #20]
 800ac4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac50:	4413      	add	r3, r2
 800ac52:	4619      	mov	r1, r3
 800ac54:	68f8      	ldr	r0, [r7, #12]
 800ac56:	f7ff fe42 	bl	800a8de <ld_clust>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ac60:	e7c0      	b.n	800abe4 <follow_path+0x50>
			if (res != FR_OK) break;
 800ac62:	bf00      	nop
 800ac64:	e002      	b.n	800ac6c <follow_path+0xd8>
				break;
 800ac66:	bf00      	nop
 800ac68:	e000      	b.n	800ac6c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ac6a:	bf00      	nop
			}
		}
	}

	return res;
 800ac6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3718      	adds	r7, #24
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}

0800ac76 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ac76:	b480      	push	{r7}
 800ac78:	b087      	sub	sp, #28
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ac7e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac82:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d031      	beq.n	800acf0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	617b      	str	r3, [r7, #20]
 800ac92:	e002      	b.n	800ac9a <get_ldnumber+0x24>
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	3301      	adds	r3, #1
 800ac98:	617b      	str	r3, [r7, #20]
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	2b20      	cmp	r3, #32
 800aca0:	d903      	bls.n	800acaa <get_ldnumber+0x34>
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	2b3a      	cmp	r3, #58	; 0x3a
 800aca8:	d1f4      	bne.n	800ac94 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	2b3a      	cmp	r3, #58	; 0x3a
 800acb0:	d11c      	bne.n	800acec <get_ldnumber+0x76>
			tp = *path;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	1c5a      	adds	r2, r3, #1
 800acbc:	60fa      	str	r2, [r7, #12]
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	3b30      	subs	r3, #48	; 0x30
 800acc2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	2b09      	cmp	r3, #9
 800acc8:	d80e      	bhi.n	800ace8 <get_ldnumber+0x72>
 800acca:	68fa      	ldr	r2, [r7, #12]
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d10a      	bne.n	800ace8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d107      	bne.n	800ace8 <get_ldnumber+0x72>
					vol = (int)i;
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	3301      	adds	r3, #1
 800ace0:	617b      	str	r3, [r7, #20]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	697a      	ldr	r2, [r7, #20]
 800ace6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	e002      	b.n	800acf2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800acec:	2300      	movs	r3, #0
 800acee:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800acf0:	693b      	ldr	r3, [r7, #16]
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	371c      	adds	r7, #28
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr
	...

0800ad00 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	70da      	strb	r2, [r3, #3]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f04f 32ff 	mov.w	r2, #4294967295
 800ad16:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ad18:	6839      	ldr	r1, [r7, #0]
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f7ff f8e0 	bl	8009ee0 <move_window>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d001      	beq.n	800ad2a <check_fs+0x2a>
 800ad26:	2304      	movs	r3, #4
 800ad28:	e038      	b.n	800ad9c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	3330      	adds	r3, #48	; 0x30
 800ad2e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ad32:	4618      	mov	r0, r3
 800ad34:	f7fe fe24 	bl	8009980 <ld_word>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d001      	beq.n	800ad48 <check_fs+0x48>
 800ad44:	2303      	movs	r3, #3
 800ad46:	e029      	b.n	800ad9c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ad4e:	2be9      	cmp	r3, #233	; 0xe9
 800ad50:	d009      	beq.n	800ad66 <check_fs+0x66>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ad58:	2beb      	cmp	r3, #235	; 0xeb
 800ad5a:	d11e      	bne.n	800ad9a <check_fs+0x9a>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ad62:	2b90      	cmp	r3, #144	; 0x90
 800ad64:	d119      	bne.n	800ad9a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	3330      	adds	r3, #48	; 0x30
 800ad6a:	3336      	adds	r3, #54	; 0x36
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f7fe fe1f 	bl	80099b0 <ld_dword>
 800ad72:	4603      	mov	r3, r0
 800ad74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ad78:	4a0a      	ldr	r2, [pc, #40]	; (800ada4 <check_fs+0xa4>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d101      	bne.n	800ad82 <check_fs+0x82>
 800ad7e:	2300      	movs	r3, #0
 800ad80:	e00c      	b.n	800ad9c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	3330      	adds	r3, #48	; 0x30
 800ad86:	3352      	adds	r3, #82	; 0x52
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f7fe fe11 	bl	80099b0 <ld_dword>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	4b05      	ldr	r3, [pc, #20]	; (800ada8 <check_fs+0xa8>)
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d101      	bne.n	800ad9a <check_fs+0x9a>
 800ad96:	2300      	movs	r3, #0
 800ad98:	e000      	b.n	800ad9c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ad9a:	2302      	movs	r3, #2
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3708      	adds	r7, #8
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	00544146 	.word	0x00544146
 800ada8:	33544146 	.word	0x33544146

0800adac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b096      	sub	sp, #88	; 0x58
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	4613      	mov	r3, r2
 800adb8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	2200      	movs	r2, #0
 800adbe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f7ff ff58 	bl	800ac76 <get_ldnumber>
 800adc6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800adc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adca:	2b00      	cmp	r3, #0
 800adcc:	da01      	bge.n	800add2 <find_volume+0x26>
 800adce:	230b      	movs	r3, #11
 800add0:	e22e      	b.n	800b230 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800add2:	4aa8      	ldr	r2, [pc, #672]	; (800b074 <find_volume+0x2c8>)
 800add4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800add6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adda:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800addc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d101      	bne.n	800ade6 <find_volume+0x3a>
 800ade2:	230c      	movs	r3, #12
 800ade4:	e224      	b.n	800b230 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800adea:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800adec:	79fb      	ldrb	r3, [r7, #7]
 800adee:	f023 0301 	bic.w	r3, r3, #1
 800adf2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800adf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d01a      	beq.n	800ae32 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800adfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfe:	785b      	ldrb	r3, [r3, #1]
 800ae00:	4618      	mov	r0, r3
 800ae02:	f7fe fce9 	bl	80097d8 <disk_status>
 800ae06:	4603      	mov	r3, r0
 800ae08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ae0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae10:	f003 0301 	and.w	r3, r3, #1
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d10c      	bne.n	800ae32 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ae18:	79fb      	ldrb	r3, [r7, #7]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d007      	beq.n	800ae2e <find_volume+0x82>
 800ae1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae22:	f003 0304 	and.w	r3, r3, #4
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d001      	beq.n	800ae2e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ae2a:	230a      	movs	r3, #10
 800ae2c:	e200      	b.n	800b230 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800ae2e:	2300      	movs	r3, #0
 800ae30:	e1fe      	b.n	800b230 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ae32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae34:	2200      	movs	r2, #0
 800ae36:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ae38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae3a:	b2da      	uxtb	r2, r3
 800ae3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae3e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ae40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae42:	785b      	ldrb	r3, [r3, #1]
 800ae44:	4618      	mov	r0, r3
 800ae46:	f7fe fce1 	bl	800980c <disk_initialize>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ae50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae54:	f003 0301 	and.w	r3, r3, #1
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d001      	beq.n	800ae60 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ae5c:	2303      	movs	r3, #3
 800ae5e:	e1e7      	b.n	800b230 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ae60:	79fb      	ldrb	r3, [r7, #7]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d007      	beq.n	800ae76 <find_volume+0xca>
 800ae66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae6a:	f003 0304 	and.w	r3, r3, #4
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d001      	beq.n	800ae76 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ae72:	230a      	movs	r3, #10
 800ae74:	e1dc      	b.n	800b230 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ae76:	2300      	movs	r3, #0
 800ae78:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ae7a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ae7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ae7e:	f7ff ff3f 	bl	800ad00 <check_fs>
 800ae82:	4603      	mov	r3, r0
 800ae84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ae88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae8c:	2b02      	cmp	r3, #2
 800ae8e:	d14b      	bne.n	800af28 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ae90:	2300      	movs	r3, #0
 800ae92:	643b      	str	r3, [r7, #64]	; 0x40
 800ae94:	e01f      	b.n	800aed6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ae96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae98:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ae9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae9e:	011b      	lsls	r3, r3, #4
 800aea0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800aea4:	4413      	add	r3, r2
 800aea6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800aea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeaa:	3304      	adds	r3, #4
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d006      	beq.n	800aec0 <find_volume+0x114>
 800aeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb4:	3308      	adds	r3, #8
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7fe fd7a 	bl	80099b0 <ld_dword>
 800aebc:	4602      	mov	r2, r0
 800aebe:	e000      	b.n	800aec2 <find_volume+0x116>
 800aec0:	2200      	movs	r2, #0
 800aec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800aeca:	440b      	add	r3, r1
 800aecc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800aed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aed2:	3301      	adds	r3, #1
 800aed4:	643b      	str	r3, [r7, #64]	; 0x40
 800aed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aed8:	2b03      	cmp	r3, #3
 800aeda:	d9dc      	bls.n	800ae96 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800aedc:	2300      	movs	r3, #0
 800aede:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800aee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d002      	beq.n	800aeec <find_volume+0x140>
 800aee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aee8:	3b01      	subs	r3, #1
 800aeea:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800aeec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeee:	009b      	lsls	r3, r3, #2
 800aef0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800aef4:	4413      	add	r3, r2
 800aef6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800aefa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800aefc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d005      	beq.n	800af0e <find_volume+0x162>
 800af02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800af04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af06:	f7ff fefb 	bl	800ad00 <check_fs>
 800af0a:	4603      	mov	r3, r0
 800af0c:	e000      	b.n	800af10 <find_volume+0x164>
 800af0e:	2303      	movs	r3, #3
 800af10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800af14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d905      	bls.n	800af28 <find_volume+0x17c>
 800af1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af1e:	3301      	adds	r3, #1
 800af20:	643b      	str	r3, [r7, #64]	; 0x40
 800af22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af24:	2b03      	cmp	r3, #3
 800af26:	d9e1      	bls.n	800aeec <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800af28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af2c:	2b04      	cmp	r3, #4
 800af2e:	d101      	bne.n	800af34 <find_volume+0x188>
 800af30:	2301      	movs	r3, #1
 800af32:	e17d      	b.n	800b230 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800af34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d901      	bls.n	800af40 <find_volume+0x194>
 800af3c:	230d      	movs	r3, #13
 800af3e:	e177      	b.n	800b230 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800af40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af42:	3330      	adds	r3, #48	; 0x30
 800af44:	330b      	adds	r3, #11
 800af46:	4618      	mov	r0, r3
 800af48:	f7fe fd1a 	bl	8009980 <ld_word>
 800af4c:	4603      	mov	r3, r0
 800af4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af52:	d001      	beq.n	800af58 <find_volume+0x1ac>
 800af54:	230d      	movs	r3, #13
 800af56:	e16b      	b.n	800b230 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800af58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af5a:	3330      	adds	r3, #48	; 0x30
 800af5c:	3316      	adds	r3, #22
 800af5e:	4618      	mov	r0, r3
 800af60:	f7fe fd0e 	bl	8009980 <ld_word>
 800af64:	4603      	mov	r3, r0
 800af66:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800af68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d106      	bne.n	800af7c <find_volume+0x1d0>
 800af6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af70:	3330      	adds	r3, #48	; 0x30
 800af72:	3324      	adds	r3, #36	; 0x24
 800af74:	4618      	mov	r0, r3
 800af76:	f7fe fd1b 	bl	80099b0 <ld_dword>
 800af7a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800af7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800af80:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800af82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af84:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800af88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af8a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800af8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af8e:	789b      	ldrb	r3, [r3, #2]
 800af90:	2b01      	cmp	r3, #1
 800af92:	d005      	beq.n	800afa0 <find_volume+0x1f4>
 800af94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af96:	789b      	ldrb	r3, [r3, #2]
 800af98:	2b02      	cmp	r3, #2
 800af9a:	d001      	beq.n	800afa0 <find_volume+0x1f4>
 800af9c:	230d      	movs	r3, #13
 800af9e:	e147      	b.n	800b230 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800afa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa2:	789b      	ldrb	r3, [r3, #2]
 800afa4:	461a      	mov	r2, r3
 800afa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afa8:	fb02 f303 	mul.w	r3, r2, r3
 800afac:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800afae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afb4:	b29a      	uxth	r2, r3
 800afb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800afba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afbc:	895b      	ldrh	r3, [r3, #10]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d008      	beq.n	800afd4 <find_volume+0x228>
 800afc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc4:	895b      	ldrh	r3, [r3, #10]
 800afc6:	461a      	mov	r2, r3
 800afc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afca:	895b      	ldrh	r3, [r3, #10]
 800afcc:	3b01      	subs	r3, #1
 800afce:	4013      	ands	r3, r2
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d001      	beq.n	800afd8 <find_volume+0x22c>
 800afd4:	230d      	movs	r3, #13
 800afd6:	e12b      	b.n	800b230 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800afd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afda:	3330      	adds	r3, #48	; 0x30
 800afdc:	3311      	adds	r3, #17
 800afde:	4618      	mov	r0, r3
 800afe0:	f7fe fcce 	bl	8009980 <ld_word>
 800afe4:	4603      	mov	r3, r0
 800afe6:	461a      	mov	r2, r3
 800afe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afea:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800afec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afee:	891b      	ldrh	r3, [r3, #8]
 800aff0:	f003 030f 	and.w	r3, r3, #15
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d001      	beq.n	800affe <find_volume+0x252>
 800affa:	230d      	movs	r3, #13
 800affc:	e118      	b.n	800b230 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800affe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b000:	3330      	adds	r3, #48	; 0x30
 800b002:	3313      	adds	r3, #19
 800b004:	4618      	mov	r0, r3
 800b006:	f7fe fcbb 	bl	8009980 <ld_word>
 800b00a:	4603      	mov	r3, r0
 800b00c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b00e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b010:	2b00      	cmp	r3, #0
 800b012:	d106      	bne.n	800b022 <find_volume+0x276>
 800b014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b016:	3330      	adds	r3, #48	; 0x30
 800b018:	3320      	adds	r3, #32
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7fe fcc8 	bl	80099b0 <ld_dword>
 800b020:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b024:	3330      	adds	r3, #48	; 0x30
 800b026:	330e      	adds	r3, #14
 800b028:	4618      	mov	r0, r3
 800b02a:	f7fe fca9 	bl	8009980 <ld_word>
 800b02e:	4603      	mov	r3, r0
 800b030:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b032:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b034:	2b00      	cmp	r3, #0
 800b036:	d101      	bne.n	800b03c <find_volume+0x290>
 800b038:	230d      	movs	r3, #13
 800b03a:	e0f9      	b.n	800b230 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b03c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b03e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b040:	4413      	add	r3, r2
 800b042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b044:	8912      	ldrh	r2, [r2, #8]
 800b046:	0912      	lsrs	r2, r2, #4
 800b048:	b292      	uxth	r2, r2
 800b04a:	4413      	add	r3, r2
 800b04c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b04e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b052:	429a      	cmp	r2, r3
 800b054:	d201      	bcs.n	800b05a <find_volume+0x2ae>
 800b056:	230d      	movs	r3, #13
 800b058:	e0ea      	b.n	800b230 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b05a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b05e:	1ad3      	subs	r3, r2, r3
 800b060:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b062:	8952      	ldrh	r2, [r2, #10]
 800b064:	fbb3 f3f2 	udiv	r3, r3, r2
 800b068:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d103      	bne.n	800b078 <find_volume+0x2cc>
 800b070:	230d      	movs	r3, #13
 800b072:	e0dd      	b.n	800b230 <find_volume+0x484>
 800b074:	24000dac 	.word	0x24000dac
		fmt = FS_FAT32;
 800b078:	2303      	movs	r3, #3
 800b07a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b080:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b084:	4293      	cmp	r3, r2
 800b086:	d802      	bhi.n	800b08e <find_volume+0x2e2>
 800b088:	2302      	movs	r3, #2
 800b08a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b090:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b094:	4293      	cmp	r3, r2
 800b096:	d802      	bhi.n	800b09e <find_volume+0x2f2>
 800b098:	2301      	movs	r3, #1
 800b09a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a0:	1c9a      	adds	r2, r3, #2
 800b0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a4:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b0aa:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b0ac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b0ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0b0:	441a      	add	r2, r3
 800b0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b4:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b0b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ba:	441a      	add	r2, r3
 800b0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0be:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800b0c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0c4:	2b03      	cmp	r3, #3
 800b0c6:	d11e      	bne.n	800b106 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ca:	3330      	adds	r3, #48	; 0x30
 800b0cc:	332a      	adds	r3, #42	; 0x2a
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f7fe fc56 	bl	8009980 <ld_word>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d001      	beq.n	800b0de <find_volume+0x332>
 800b0da:	230d      	movs	r3, #13
 800b0dc:	e0a8      	b.n	800b230 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e0:	891b      	ldrh	r3, [r3, #8]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d001      	beq.n	800b0ea <find_volume+0x33e>
 800b0e6:	230d      	movs	r3, #13
 800b0e8:	e0a2      	b.n	800b230 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ec:	3330      	adds	r3, #48	; 0x30
 800b0ee:	332c      	adds	r3, #44	; 0x2c
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7fe fc5d 	bl	80099b0 <ld_dword>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fa:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fe:	695b      	ldr	r3, [r3, #20]
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	647b      	str	r3, [r7, #68]	; 0x44
 800b104:	e01f      	b.n	800b146 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b108:	891b      	ldrh	r3, [r3, #8]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d101      	bne.n	800b112 <find_volume+0x366>
 800b10e:	230d      	movs	r3, #13
 800b110:	e08e      	b.n	800b230 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b114:	6a1a      	ldr	r2, [r3, #32]
 800b116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b118:	441a      	add	r2, r3
 800b11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b11c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b11e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b122:	2b02      	cmp	r3, #2
 800b124:	d103      	bne.n	800b12e <find_volume+0x382>
 800b126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b128:	695b      	ldr	r3, [r3, #20]
 800b12a:	005b      	lsls	r3, r3, #1
 800b12c:	e00a      	b.n	800b144 <find_volume+0x398>
 800b12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b130:	695a      	ldr	r2, [r3, #20]
 800b132:	4613      	mov	r3, r2
 800b134:	005b      	lsls	r3, r3, #1
 800b136:	4413      	add	r3, r2
 800b138:	085a      	lsrs	r2, r3, #1
 800b13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13c:	695b      	ldr	r3, [r3, #20]
 800b13e:	f003 0301 	and.w	r3, r3, #1
 800b142:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b144:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b148:	699a      	ldr	r2, [r3, #24]
 800b14a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b14c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b150:	0a5b      	lsrs	r3, r3, #9
 800b152:	429a      	cmp	r2, r3
 800b154:	d201      	bcs.n	800b15a <find_volume+0x3ae>
 800b156:	230d      	movs	r3, #13
 800b158:	e06a      	b.n	800b230 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b15c:	f04f 32ff 	mov.w	r2, #4294967295
 800b160:	611a      	str	r2, [r3, #16]
 800b162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b164:	691a      	ldr	r2, [r3, #16]
 800b166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b168:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16c:	2280      	movs	r2, #128	; 0x80
 800b16e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b170:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b174:	2b03      	cmp	r3, #3
 800b176:	d149      	bne.n	800b20c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17a:	3330      	adds	r3, #48	; 0x30
 800b17c:	3330      	adds	r3, #48	; 0x30
 800b17e:	4618      	mov	r0, r3
 800b180:	f7fe fbfe 	bl	8009980 <ld_word>
 800b184:	4603      	mov	r3, r0
 800b186:	2b01      	cmp	r3, #1
 800b188:	d140      	bne.n	800b20c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b18a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b18c:	3301      	adds	r3, #1
 800b18e:	4619      	mov	r1, r3
 800b190:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b192:	f7fe fea5 	bl	8009ee0 <move_window>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d137      	bne.n	800b20c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800b19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19e:	2200      	movs	r2, #0
 800b1a0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a4:	3330      	adds	r3, #48	; 0x30
 800b1a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7fe fbe8 	bl	8009980 <ld_word>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d127      	bne.n	800b20c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1be:	3330      	adds	r3, #48	; 0x30
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7fe fbf5 	bl	80099b0 <ld_dword>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	4b1b      	ldr	r3, [pc, #108]	; (800b238 <find_volume+0x48c>)
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d11e      	bne.n	800b20c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d0:	3330      	adds	r3, #48	; 0x30
 800b1d2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7fe fbea 	bl	80099b0 <ld_dword>
 800b1dc:	4602      	mov	r2, r0
 800b1de:	4b17      	ldr	r3, [pc, #92]	; (800b23c <find_volume+0x490>)
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d113      	bne.n	800b20c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e6:	3330      	adds	r3, #48	; 0x30
 800b1e8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7fe fbdf 	bl	80099b0 <ld_dword>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f6:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1fa:	3330      	adds	r3, #48	; 0x30
 800b1fc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b200:	4618      	mov	r0, r3
 800b202:	f7fe fbd5 	bl	80099b0 <ld_dword>
 800b206:	4602      	mov	r2, r0
 800b208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b20a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b20e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b212:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b214:	4b0a      	ldr	r3, [pc, #40]	; (800b240 <find_volume+0x494>)
 800b216:	881b      	ldrh	r3, [r3, #0]
 800b218:	3301      	adds	r3, #1
 800b21a:	b29a      	uxth	r2, r3
 800b21c:	4b08      	ldr	r3, [pc, #32]	; (800b240 <find_volume+0x494>)
 800b21e:	801a      	strh	r2, [r3, #0]
 800b220:	4b07      	ldr	r3, [pc, #28]	; (800b240 <find_volume+0x494>)
 800b222:	881a      	ldrh	r2, [r3, #0]
 800b224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b226:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b228:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b22a:	f7fe fdf1 	bl	8009e10 <clear_lock>
#endif
	return FR_OK;
 800b22e:	2300      	movs	r3, #0
}
 800b230:	4618      	mov	r0, r3
 800b232:	3758      	adds	r7, #88	; 0x58
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}
 800b238:	41615252 	.word	0x41615252
 800b23c:	61417272 	.word	0x61417272
 800b240:	24000db0 	.word	0x24000db0

0800b244 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b24e:	2309      	movs	r3, #9
 800b250:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d01c      	beq.n	800b292 <validate+0x4e>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d018      	beq.n	800b292 <validate+0x4e>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d013      	beq.n	800b292 <validate+0x4e>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	889a      	ldrh	r2, [r3, #4]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	88db      	ldrh	r3, [r3, #6]
 800b274:	429a      	cmp	r2, r3
 800b276:	d10c      	bne.n	800b292 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	785b      	ldrb	r3, [r3, #1]
 800b27e:	4618      	mov	r0, r3
 800b280:	f7fe faaa 	bl	80097d8 <disk_status>
 800b284:	4603      	mov	r3, r0
 800b286:	f003 0301 	and.w	r3, r3, #1
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d101      	bne.n	800b292 <validate+0x4e>
			res = FR_OK;
 800b28e:	2300      	movs	r3, #0
 800b290:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b292:	7bfb      	ldrb	r3, [r7, #15]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d102      	bne.n	800b29e <validate+0x5a>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	e000      	b.n	800b2a0 <validate+0x5c>
 800b29e:	2300      	movs	r3, #0
 800b2a0:	683a      	ldr	r2, [r7, #0]
 800b2a2:	6013      	str	r3, [r2, #0]
	return res;
 800b2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3710      	adds	r7, #16
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
	...

0800b2b0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b088      	sub	sp, #32
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	60b9      	str	r1, [r7, #8]
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b2c2:	f107 0310 	add.w	r3, r7, #16
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7ff fcd5 	bl	800ac76 <get_ldnumber>
 800b2cc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b2ce:	69fb      	ldr	r3, [r7, #28]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	da01      	bge.n	800b2d8 <f_mount+0x28>
 800b2d4:	230b      	movs	r3, #11
 800b2d6:	e02b      	b.n	800b330 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b2d8:	4a17      	ldr	r2, [pc, #92]	; (800b338 <f_mount+0x88>)
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2e0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d005      	beq.n	800b2f4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b2e8:	69b8      	ldr	r0, [r7, #24]
 800b2ea:	f7fe fd91 	bl	8009e10 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b2ee:	69bb      	ldr	r3, [r7, #24]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d002      	beq.n	800b300 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b300:	68fa      	ldr	r2, [r7, #12]
 800b302:	490d      	ldr	r1, [pc, #52]	; (800b338 <f_mount+0x88>)
 800b304:	69fb      	ldr	r3, [r7, #28]
 800b306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d002      	beq.n	800b316 <f_mount+0x66>
 800b310:	79fb      	ldrb	r3, [r7, #7]
 800b312:	2b01      	cmp	r3, #1
 800b314:	d001      	beq.n	800b31a <f_mount+0x6a>
 800b316:	2300      	movs	r3, #0
 800b318:	e00a      	b.n	800b330 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b31a:	f107 010c 	add.w	r1, r7, #12
 800b31e:	f107 0308 	add.w	r3, r7, #8
 800b322:	2200      	movs	r2, #0
 800b324:	4618      	mov	r0, r3
 800b326:	f7ff fd41 	bl	800adac <find_volume>
 800b32a:	4603      	mov	r3, r0
 800b32c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b32e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b330:	4618      	mov	r0, r3
 800b332:	3720      	adds	r7, #32
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}
 800b338:	24000dac 	.word	0x24000dac

0800b33c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b098      	sub	sp, #96	; 0x60
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	60b9      	str	r1, [r7, #8]
 800b346:	4613      	mov	r3, r2
 800b348:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d101      	bne.n	800b354 <f_open+0x18>
 800b350:	2309      	movs	r3, #9
 800b352:	e1ad      	b.n	800b6b0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b354:	79fb      	ldrb	r3, [r7, #7]
 800b356:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b35a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b35c:	79fa      	ldrb	r2, [r7, #7]
 800b35e:	f107 0110 	add.w	r1, r7, #16
 800b362:	f107 0308 	add.w	r3, r7, #8
 800b366:	4618      	mov	r0, r3
 800b368:	f7ff fd20 	bl	800adac <find_volume>
 800b36c:	4603      	mov	r3, r0
 800b36e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b372:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b376:	2b00      	cmp	r3, #0
 800b378:	f040 8191 	bne.w	800b69e <f_open+0x362>
		dj.obj.fs = fs;
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b380:	68ba      	ldr	r2, [r7, #8]
 800b382:	f107 0314 	add.w	r3, r7, #20
 800b386:	4611      	mov	r1, r2
 800b388:	4618      	mov	r0, r3
 800b38a:	f7ff fc03 	bl	800ab94 <follow_path>
 800b38e:	4603      	mov	r3, r0
 800b390:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b394:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d11a      	bne.n	800b3d2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b39c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b3a0:	b25b      	sxtb	r3, r3
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	da03      	bge.n	800b3ae <f_open+0x72>
				res = FR_INVALID_NAME;
 800b3a6:	2306      	movs	r3, #6
 800b3a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b3ac:	e011      	b.n	800b3d2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b3ae:	79fb      	ldrb	r3, [r7, #7]
 800b3b0:	f023 0301 	bic.w	r3, r3, #1
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	bf14      	ite	ne
 800b3b8:	2301      	movne	r3, #1
 800b3ba:	2300      	moveq	r3, #0
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	461a      	mov	r2, r3
 800b3c0:	f107 0314 	add.w	r3, r7, #20
 800b3c4:	4611      	mov	r1, r2
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f7fe fbda 	bl	8009b80 <chk_lock>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b3d2:	79fb      	ldrb	r3, [r7, #7]
 800b3d4:	f003 031c 	and.w	r3, r3, #28
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d07f      	beq.n	800b4dc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b3dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d017      	beq.n	800b414 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b3e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b3e8:	2b04      	cmp	r3, #4
 800b3ea:	d10e      	bne.n	800b40a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b3ec:	f7fe fc24 	bl	8009c38 <enq_lock>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d006      	beq.n	800b404 <f_open+0xc8>
 800b3f6:	f107 0314 	add.w	r3, r7, #20
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f7ff fb03 	bl	800aa06 <dir_register>
 800b400:	4603      	mov	r3, r0
 800b402:	e000      	b.n	800b406 <f_open+0xca>
 800b404:	2312      	movs	r3, #18
 800b406:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b40a:	79fb      	ldrb	r3, [r7, #7]
 800b40c:	f043 0308 	orr.w	r3, r3, #8
 800b410:	71fb      	strb	r3, [r7, #7]
 800b412:	e010      	b.n	800b436 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b414:	7ebb      	ldrb	r3, [r7, #26]
 800b416:	f003 0311 	and.w	r3, r3, #17
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d003      	beq.n	800b426 <f_open+0xea>
					res = FR_DENIED;
 800b41e:	2307      	movs	r3, #7
 800b420:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b424:	e007      	b.n	800b436 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b426:	79fb      	ldrb	r3, [r7, #7]
 800b428:	f003 0304 	and.w	r3, r3, #4
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d002      	beq.n	800b436 <f_open+0xfa>
 800b430:	2308      	movs	r3, #8
 800b432:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b436:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d168      	bne.n	800b510 <f_open+0x1d4>
 800b43e:	79fb      	ldrb	r3, [r7, #7]
 800b440:	f003 0308 	and.w	r3, r3, #8
 800b444:	2b00      	cmp	r3, #0
 800b446:	d063      	beq.n	800b510 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b448:	f7fd fad0 	bl	80089ec <get_fattime>
 800b44c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b44e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b450:	330e      	adds	r3, #14
 800b452:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b454:	4618      	mov	r0, r3
 800b456:	f7fe fae9 	bl	8009a2c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b45a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b45c:	3316      	adds	r3, #22
 800b45e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b460:	4618      	mov	r0, r3
 800b462:	f7fe fae3 	bl	8009a2c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b468:	330b      	adds	r3, #11
 800b46a:	2220      	movs	r2, #32
 800b46c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b472:	4611      	mov	r1, r2
 800b474:	4618      	mov	r0, r3
 800b476:	f7ff fa32 	bl	800a8de <ld_clust>
 800b47a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b480:	2200      	movs	r2, #0
 800b482:	4618      	mov	r0, r3
 800b484:	f7ff fa4a 	bl	800a91c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b48a:	331c      	adds	r3, #28
 800b48c:	2100      	movs	r1, #0
 800b48e:	4618      	mov	r0, r3
 800b490:	f7fe facc 	bl	8009a2c <st_dword>
					fs->wflag = 1;
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	2201      	movs	r2, #1
 800b498:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b49a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d037      	beq.n	800b510 <f_open+0x1d4>
						dw = fs->winsect;
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b4a6:	f107 0314 	add.w	r3, r7, #20
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7fe ff5d 	bl	800a36e <remove_chain>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b4ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d126      	bne.n	800b510 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7fe fd0a 	bl	8009ee0 <move_window>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b4d6:	3a01      	subs	r2, #1
 800b4d8:	60da      	str	r2, [r3, #12]
 800b4da:	e019      	b.n	800b510 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b4dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d115      	bne.n	800b510 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b4e4:	7ebb      	ldrb	r3, [r7, #26]
 800b4e6:	f003 0310 	and.w	r3, r3, #16
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d003      	beq.n	800b4f6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800b4ee:	2304      	movs	r3, #4
 800b4f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b4f4:	e00c      	b.n	800b510 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b4f6:	79fb      	ldrb	r3, [r7, #7]
 800b4f8:	f003 0302 	and.w	r3, r3, #2
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d007      	beq.n	800b510 <f_open+0x1d4>
 800b500:	7ebb      	ldrb	r3, [r7, #26]
 800b502:	f003 0301 	and.w	r3, r3, #1
 800b506:	2b00      	cmp	r3, #0
 800b508:	d002      	beq.n	800b510 <f_open+0x1d4>
						res = FR_DENIED;
 800b50a:	2307      	movs	r3, #7
 800b50c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b510:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b514:	2b00      	cmp	r3, #0
 800b516:	d128      	bne.n	800b56a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b518:	79fb      	ldrb	r3, [r7, #7]
 800b51a:	f003 0308 	and.w	r3, r3, #8
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d003      	beq.n	800b52a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b522:	79fb      	ldrb	r3, [r7, #7]
 800b524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b528:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b538:	79fb      	ldrb	r3, [r7, #7]
 800b53a:	f023 0301 	bic.w	r3, r3, #1
 800b53e:	2b00      	cmp	r3, #0
 800b540:	bf14      	ite	ne
 800b542:	2301      	movne	r3, #1
 800b544:	2300      	moveq	r3, #0
 800b546:	b2db      	uxtb	r3, r3
 800b548:	461a      	mov	r2, r3
 800b54a:	f107 0314 	add.w	r3, r7, #20
 800b54e:	4611      	mov	r1, r2
 800b550:	4618      	mov	r0, r3
 800b552:	f7fe fb93 	bl	8009c7c <inc_lock>
 800b556:	4602      	mov	r2, r0
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	691b      	ldr	r3, [r3, #16]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d102      	bne.n	800b56a <f_open+0x22e>
 800b564:	2302      	movs	r3, #2
 800b566:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b56a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b56e:	2b00      	cmp	r3, #0
 800b570:	f040 8095 	bne.w	800b69e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b578:	4611      	mov	r1, r2
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7ff f9af 	bl	800a8de <ld_clust>
 800b580:	4602      	mov	r2, r0
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b588:	331c      	adds	r3, #28
 800b58a:	4618      	mov	r0, r3
 800b58c:	f7fe fa10 	bl	80099b0 <ld_dword>
 800b590:	4602      	mov	r2, r0
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2200      	movs	r2, #0
 800b59a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b59c:	693a      	ldr	r2, [r7, #16]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	88da      	ldrh	r2, [r3, #6]
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	79fa      	ldrb	r2, [r7, #7]
 800b5ae:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	3330      	adds	r3, #48	; 0x30
 800b5c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b5ca:	2100      	movs	r1, #0
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f7fe fa7a 	bl	8009ac6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b5d2:	79fb      	ldrb	r3, [r7, #7]
 800b5d4:	f003 0320 	and.w	r3, r3, #32
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d060      	beq.n	800b69e <f_open+0x362>
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	68db      	ldr	r3, [r3, #12]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d05c      	beq.n	800b69e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	68da      	ldr	r2, [r3, #12]
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	895b      	ldrh	r3, [r3, #10]
 800b5f0:	025b      	lsls	r3, r3, #9
 800b5f2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	689b      	ldr	r3, [r3, #8]
 800b5f8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	68db      	ldr	r3, [r3, #12]
 800b5fe:	657b      	str	r3, [r7, #84]	; 0x54
 800b600:	e016      	b.n	800b630 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b606:	4618      	mov	r0, r3
 800b608:	f7fe fd25 	bl	800a056 <get_fat>
 800b60c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b60e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b610:	2b01      	cmp	r3, #1
 800b612:	d802      	bhi.n	800b61a <f_open+0x2de>
 800b614:	2302      	movs	r3, #2
 800b616:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b61a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b61c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b620:	d102      	bne.n	800b628 <f_open+0x2ec>
 800b622:	2301      	movs	r3, #1
 800b624:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b628:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b62a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b62c:	1ad3      	subs	r3, r2, r3
 800b62e:	657b      	str	r3, [r7, #84]	; 0x54
 800b630:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b634:	2b00      	cmp	r3, #0
 800b636:	d103      	bne.n	800b640 <f_open+0x304>
 800b638:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b63a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d8e0      	bhi.n	800b602 <f_open+0x2c6>
				}
				fp->clust = clst;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b644:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b646:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d127      	bne.n	800b69e <f_open+0x362>
 800b64e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b654:	2b00      	cmp	r3, #0
 800b656:	d022      	beq.n	800b69e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7fe fcdb 	bl	800a018 <clust2sect>
 800b662:	6478      	str	r0, [r7, #68]	; 0x44
 800b664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b666:	2b00      	cmp	r3, #0
 800b668:	d103      	bne.n	800b672 <f_open+0x336>
						res = FR_INT_ERR;
 800b66a:	2302      	movs	r3, #2
 800b66c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b670:	e015      	b.n	800b69e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b674:	0a5a      	lsrs	r2, r3, #9
 800b676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b678:	441a      	add	r2, r3
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	7858      	ldrb	r0, [r3, #1]
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	6a1a      	ldr	r2, [r3, #32]
 800b68c:	2301      	movs	r3, #1
 800b68e:	f7fe f8e3 	bl	8009858 <disk_read>
 800b692:	4603      	mov	r3, r0
 800b694:	2b00      	cmp	r3, #0
 800b696:	d002      	beq.n	800b69e <f_open+0x362>
 800b698:	2301      	movs	r3, #1
 800b69a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b69e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d002      	beq.n	800b6ac <f_open+0x370>
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b6ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3760      	adds	r7, #96	; 0x60
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b08e      	sub	sp, #56	; 0x38
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	60b9      	str	r1, [r7, #8]
 800b6c2:	607a      	str	r2, [r7, #4]
 800b6c4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f107 0214 	add.w	r2, r7, #20
 800b6d6:	4611      	mov	r1, r2
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f7ff fdb3 	bl	800b244 <validate>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b6e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d107      	bne.n	800b6fc <f_read+0x44>
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	7d5b      	ldrb	r3, [r3, #21]
 800b6f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b6f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d002      	beq.n	800b702 <f_read+0x4a>
 800b6fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b700:	e115      	b.n	800b92e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	7d1b      	ldrb	r3, [r3, #20]
 800b706:	f003 0301 	and.w	r3, r3, #1
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d101      	bne.n	800b712 <f_read+0x5a>
 800b70e:	2307      	movs	r3, #7
 800b710:	e10d      	b.n	800b92e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	68da      	ldr	r2, [r3, #12]
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	699b      	ldr	r3, [r3, #24]
 800b71a:	1ad3      	subs	r3, r2, r3
 800b71c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	6a3b      	ldr	r3, [r7, #32]
 800b722:	429a      	cmp	r2, r3
 800b724:	f240 80fe 	bls.w	800b924 <f_read+0x26c>
 800b728:	6a3b      	ldr	r3, [r7, #32]
 800b72a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b72c:	e0fa      	b.n	800b924 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	699b      	ldr	r3, [r3, #24]
 800b732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b736:	2b00      	cmp	r3, #0
 800b738:	f040 80c6 	bne.w	800b8c8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	699b      	ldr	r3, [r3, #24]
 800b740:	0a5b      	lsrs	r3, r3, #9
 800b742:	697a      	ldr	r2, [r7, #20]
 800b744:	8952      	ldrh	r2, [r2, #10]
 800b746:	3a01      	subs	r2, #1
 800b748:	4013      	ands	r3, r2
 800b74a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800b74c:	69fb      	ldr	r3, [r7, #28]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d12f      	bne.n	800b7b2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	699b      	ldr	r3, [r3, #24]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d103      	bne.n	800b762 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	689b      	ldr	r3, [r3, #8]
 800b75e:	633b      	str	r3, [r7, #48]	; 0x30
 800b760:	e013      	b.n	800b78a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b766:	2b00      	cmp	r3, #0
 800b768:	d007      	beq.n	800b77a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	699b      	ldr	r3, [r3, #24]
 800b76e:	4619      	mov	r1, r3
 800b770:	68f8      	ldr	r0, [r7, #12]
 800b772:	f7fe fef9 	bl	800a568 <clmt_clust>
 800b776:	6338      	str	r0, [r7, #48]	; 0x30
 800b778:	e007      	b.n	800b78a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b77a:	68fa      	ldr	r2, [r7, #12]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	69db      	ldr	r3, [r3, #28]
 800b780:	4619      	mov	r1, r3
 800b782:	4610      	mov	r0, r2
 800b784:	f7fe fc67 	bl	800a056 <get_fat>
 800b788:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d804      	bhi.n	800b79a <f_read+0xe2>
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2202      	movs	r2, #2
 800b794:	755a      	strb	r2, [r3, #21]
 800b796:	2302      	movs	r3, #2
 800b798:	e0c9      	b.n	800b92e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b79c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7a0:	d104      	bne.n	800b7ac <f_read+0xf4>
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	755a      	strb	r2, [r3, #21]
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	e0c0      	b.n	800b92e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7b0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b7b2:	697a      	ldr	r2, [r7, #20]
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	69db      	ldr	r3, [r3, #28]
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	4610      	mov	r0, r2
 800b7bc:	f7fe fc2c 	bl	800a018 <clust2sect>
 800b7c0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d104      	bne.n	800b7d2 <f_read+0x11a>
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2202      	movs	r2, #2
 800b7cc:	755a      	strb	r2, [r3, #21]
 800b7ce:	2302      	movs	r3, #2
 800b7d0:	e0ad      	b.n	800b92e <f_read+0x276>
			sect += csect;
 800b7d2:	69ba      	ldr	r2, [r7, #24]
 800b7d4:	69fb      	ldr	r3, [r7, #28]
 800b7d6:	4413      	add	r3, r2
 800b7d8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	0a5b      	lsrs	r3, r3, #9
 800b7de:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d039      	beq.n	800b85a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b7e6:	69fa      	ldr	r2, [r7, #28]
 800b7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ea:	4413      	add	r3, r2
 800b7ec:	697a      	ldr	r2, [r7, #20]
 800b7ee:	8952      	ldrh	r2, [r2, #10]
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d905      	bls.n	800b800 <f_read+0x148>
					cc = fs->csize - csect;
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	895b      	ldrh	r3, [r3, #10]
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	69fb      	ldr	r3, [r7, #28]
 800b7fc:	1ad3      	subs	r3, r2, r3
 800b7fe:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	7858      	ldrb	r0, [r3, #1]
 800b804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b806:	69ba      	ldr	r2, [r7, #24]
 800b808:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b80a:	f7fe f825 	bl	8009858 <disk_read>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d004      	beq.n	800b81e <f_read+0x166>
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2201      	movs	r2, #1
 800b818:	755a      	strb	r2, [r3, #21]
 800b81a:	2301      	movs	r3, #1
 800b81c:	e087      	b.n	800b92e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	7d1b      	ldrb	r3, [r3, #20]
 800b822:	b25b      	sxtb	r3, r3
 800b824:	2b00      	cmp	r3, #0
 800b826:	da14      	bge.n	800b852 <f_read+0x19a>
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	6a1a      	ldr	r2, [r3, #32]
 800b82c:	69bb      	ldr	r3, [r7, #24]
 800b82e:	1ad3      	subs	r3, r2, r3
 800b830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b832:	429a      	cmp	r2, r3
 800b834:	d90d      	bls.n	800b852 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	6a1a      	ldr	r2, [r3, #32]
 800b83a:	69bb      	ldr	r3, [r7, #24]
 800b83c:	1ad3      	subs	r3, r2, r3
 800b83e:	025b      	lsls	r3, r3, #9
 800b840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b842:	18d0      	adds	r0, r2, r3
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	3330      	adds	r3, #48	; 0x30
 800b848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b84c:	4619      	mov	r1, r3
 800b84e:	f7fe f919 	bl	8009a84 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b854:	025b      	lsls	r3, r3, #9
 800b856:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800b858:	e050      	b.n	800b8fc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	6a1b      	ldr	r3, [r3, #32]
 800b85e:	69ba      	ldr	r2, [r7, #24]
 800b860:	429a      	cmp	r2, r3
 800b862:	d02e      	beq.n	800b8c2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	7d1b      	ldrb	r3, [r3, #20]
 800b868:	b25b      	sxtb	r3, r3
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	da18      	bge.n	800b8a0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	7858      	ldrb	r0, [r3, #1]
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	6a1a      	ldr	r2, [r3, #32]
 800b87c:	2301      	movs	r3, #1
 800b87e:	f7fe f80b 	bl	8009898 <disk_write>
 800b882:	4603      	mov	r3, r0
 800b884:	2b00      	cmp	r3, #0
 800b886:	d004      	beq.n	800b892 <f_read+0x1da>
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2201      	movs	r2, #1
 800b88c:	755a      	strb	r2, [r3, #21]
 800b88e:	2301      	movs	r3, #1
 800b890:	e04d      	b.n	800b92e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	7d1b      	ldrb	r3, [r3, #20]
 800b896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b89a:	b2da      	uxtb	r2, r3
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	7858      	ldrb	r0, [r3, #1]
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	69ba      	ldr	r2, [r7, #24]
 800b8ae:	f7fd ffd3 	bl	8009858 <disk_read>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d004      	beq.n	800b8c2 <f_read+0x20a>
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	755a      	strb	r2, [r3, #21]
 800b8be:	2301      	movs	r3, #1
 800b8c0:	e035      	b.n	800b92e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	69ba      	ldr	r2, [r7, #24]
 800b8c6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	699b      	ldr	r3, [r3, #24]
 800b8cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8d0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b8d4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b8d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d901      	bls.n	800b8e2 <f_read+0x22a>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	699b      	ldr	r3, [r3, #24]
 800b8ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8f0:	4413      	add	r3, r2
 800b8f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b8f8:	f7fe f8c4 	bl	8009a84 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b8fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b900:	4413      	add	r3, r2
 800b902:	627b      	str	r3, [r7, #36]	; 0x24
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	699a      	ldr	r2, [r3, #24]
 800b908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b90a:	441a      	add	r2, r3
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	619a      	str	r2, [r3, #24]
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b916:	441a      	add	r2, r3
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	601a      	str	r2, [r3, #0]
 800b91c:	687a      	ldr	r2, [r7, #4]
 800b91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b920:	1ad3      	subs	r3, r2, r3
 800b922:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	f47f af01 	bne.w	800b72e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b92c:	2300      	movs	r3, #0
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3738      	adds	r7, #56	; 0x38
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}

0800b936 <f_write_dma_start>:
FRESULT f_write_dma_start (
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw			/* Number of bytes to write */
)
{
 800b936:	b580      	push	{r7, lr}
 800b938:	b08c      	sub	sp, #48	; 0x30
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	60f8      	str	r0, [r7, #12]
 800b93e:	60b9      	str	r1, [r7, #8]
 800b940:	607a      	str	r2, [r7, #4]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	61fb      	str	r3, [r7, #28]

	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	f107 0210 	add.w	r2, r7, #16
 800b94c:	4611      	mov	r1, r2
 800b94e:	4618      	mov	r0, r3
 800b950:	f7ff fc78 	bl	800b244 <validate>
 800b954:	4603      	mov	r3, r0
 800b956:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b95a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d107      	bne.n	800b972 <f_write_dma_start+0x3c>
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	7d5b      	ldrb	r3, [r3, #21]
 800b966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b96a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d002      	beq.n	800b978 <f_write_dma_start+0x42>
 800b972:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b976:	e103      	b.n	800bb80 <f_write_dma_start+0x24a>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	7d1b      	ldrb	r3, [r3, #20]
 800b97c:	f003 0302 	and.w	r3, r3, #2
 800b980:	2b00      	cmp	r3, #0
 800b982:	d101      	bne.n	800b988 <f_write_dma_start+0x52>
 800b984:	2307      	movs	r3, #7
 800b986:	e0fb      	b.n	800bb80 <f_write_dma_start+0x24a>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	699a      	ldr	r2, [r3, #24]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	441a      	add	r2, r3
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	699b      	ldr	r3, [r3, #24]
 800b994:	429a      	cmp	r2, r3
 800b996:	d203      	bcs.n	800b9a0 <f_write_dma_start+0x6a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	699b      	ldr	r3, [r3, #24]
 800b99c:	43db      	mvns	r3, r3
 800b99e:	607b      	str	r3, [r7, #4]
	}

	if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	699b      	ldr	r3, [r3, #24]
 800b9a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	f040 80c7 	bne.w	800bb3c <f_write_dma_start+0x206>
		csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	699b      	ldr	r3, [r3, #24]
 800b9b2:	0a5b      	lsrs	r3, r3, #9
 800b9b4:	693a      	ldr	r2, [r7, #16]
 800b9b6:	8952      	ldrh	r2, [r2, #10]
 800b9b8:	3a01      	subs	r2, #1
 800b9ba:	4013      	ands	r3, r2
 800b9bc:	61bb      	str	r3, [r7, #24]
		if (csect == 0) {				/* On the cluster boundary? */
 800b9be:	69bb      	ldr	r3, [r7, #24]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d147      	bne.n	800ba54 <f_write_dma_start+0x11e>
			if (fp->fptr == 0) {		/* On the top of the file? */
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	699b      	ldr	r3, [r3, #24]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d10c      	bne.n	800b9e6 <f_write_dma_start+0xb0>
				clst = fp->obj.sclust;	/* Follow from the origin */
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	689b      	ldr	r3, [r3, #8]
 800b9d0:	62bb      	str	r3, [r7, #40]	; 0x28
				if (clst == 0) {		/* If no cluster is allocated, */
 800b9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d11a      	bne.n	800ba0e <f_write_dma_start+0xd8>
					clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2100      	movs	r1, #0
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7fe fd2b 	bl	800a438 <create_chain>
 800b9e2:	62b8      	str	r0, [r7, #40]	; 0x28
 800b9e4:	e013      	b.n	800ba0e <f_write_dma_start+0xd8>
				}
			} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
				if (fp->cltbl) {
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d007      	beq.n	800b9fe <f_write_dma_start+0xc8>
					clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	699b      	ldr	r3, [r3, #24]
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	68f8      	ldr	r0, [r7, #12]
 800b9f6:	f7fe fdb7 	bl	800a568 <clmt_clust>
 800b9fa:	62b8      	str	r0, [r7, #40]	; 0x28
 800b9fc:	e007      	b.n	800ba0e <f_write_dma_start+0xd8>
				} else
#endif
				{
					clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b9fe:	68fa      	ldr	r2, [r7, #12]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	69db      	ldr	r3, [r3, #28]
 800ba04:	4619      	mov	r1, r3
 800ba06:	4610      	mov	r0, r2
 800ba08:	f7fe fd16 	bl	800a438 <create_chain>
 800ba0c:	62b8      	str	r0, [r7, #40]	; 0x28
				}
			}
			if (clst == 0) ABORT(fs, FR_DISK_ERR);		/* Could not allocate a new cluster (disk full)  SHOULD break the loop! */
 800ba0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d104      	bne.n	800ba1e <f_write_dma_start+0xe8>
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2201      	movs	r2, #1
 800ba18:	755a      	strb	r2, [r3, #21]
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	e0b0      	b.n	800bb80 <f_write_dma_start+0x24a>
			if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ba1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d104      	bne.n	800ba2e <f_write_dma_start+0xf8>
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2202      	movs	r2, #2
 800ba28:	755a      	strb	r2, [r3, #21]
 800ba2a:	2302      	movs	r3, #2
 800ba2c:	e0a8      	b.n	800bb80 <f_write_dma_start+0x24a>
			if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ba2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba34:	d104      	bne.n	800ba40 <f_write_dma_start+0x10a>
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	755a      	strb	r2, [r3, #21]
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	e09f      	b.n	800bb80 <f_write_dma_start+0x24a>
			fp->clust = clst;			/* Update current cluster */
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba44:	61da      	str	r2, [r3, #28]
			if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	689b      	ldr	r3, [r3, #8]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d102      	bne.n	800ba54 <f_write_dma_start+0x11e>
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba52:	609a      	str	r2, [r3, #8]
		}
#if _FS_TINY
		if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
		if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	7d1b      	ldrb	r3, [r3, #20]
 800ba58:	b25b      	sxtb	r3, r3
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	da18      	bge.n	800ba90 <f_write_dma_start+0x15a>
			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	7858      	ldrb	r0, [r3, #1]
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	6a1a      	ldr	r2, [r3, #32]
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	f7fd ff13 	bl	8009898 <disk_write>
 800ba72:	4603      	mov	r3, r0
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d004      	beq.n	800ba82 <f_write_dma_start+0x14c>
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	755a      	strb	r2, [r3, #21]
 800ba7e:	2301      	movs	r3, #1
 800ba80:	e07e      	b.n	800bb80 <f_write_dma_start+0x24a>
			fp->flag &= (BYTE)~FA_DIRTY;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	7d1b      	ldrb	r3, [r3, #20]
 800ba86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba8a:	b2da      	uxtb	r2, r3
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	751a      	strb	r2, [r3, #20]
		}
#endif
		sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ba90:	693a      	ldr	r2, [r7, #16]
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	69db      	ldr	r3, [r3, #28]
 800ba96:	4619      	mov	r1, r3
 800ba98:	4610      	mov	r0, r2
 800ba9a:	f7fe fabd 	bl	800a018 <clust2sect>
 800ba9e:	6178      	str	r0, [r7, #20]
		if (!sect) ABORT(fs, FR_INT_ERR);
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d104      	bne.n	800bab0 <f_write_dma_start+0x17a>
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2202      	movs	r2, #2
 800baaa:	755a      	strb	r2, [r3, #21]
 800baac:	2302      	movs	r3, #2
 800baae:	e067      	b.n	800bb80 <f_write_dma_start+0x24a>
		sect += csect;
 800bab0:	697a      	ldr	r2, [r7, #20]
 800bab2:	69bb      	ldr	r3, [r7, #24]
 800bab4:	4413      	add	r3, r2
 800bab6:	617b      	str	r3, [r7, #20]
		cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	0a5b      	lsrs	r3, r3, #9
 800babc:	623b      	str	r3, [r7, #32]
		if (cc) {						/* Write maximum contiguous sectors directly */
 800babe:	6a3b      	ldr	r3, [r7, #32]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d01b      	beq.n	800bafc <f_write_dma_start+0x1c6>
			if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bac4:	69ba      	ldr	r2, [r7, #24]
 800bac6:	6a3b      	ldr	r3, [r7, #32]
 800bac8:	4413      	add	r3, r2
 800baca:	693a      	ldr	r2, [r7, #16]
 800bacc:	8952      	ldrh	r2, [r2, #10]
 800bace:	4293      	cmp	r3, r2
 800bad0:	d905      	bls.n	800bade <f_write_dma_start+0x1a8>
				cc = fs->csize - csect;
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	895b      	ldrh	r3, [r3, #10]
 800bad6:	461a      	mov	r2, r3
 800bad8:	69bb      	ldr	r3, [r7, #24]
 800bada:	1ad3      	subs	r3, r2, r3
 800badc:	623b      	str	r3, [r7, #32]
			}
			if (disk_write_dma_start(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	7858      	ldrb	r0, [r3, #1]
 800bae2:	6a3b      	ldr	r3, [r7, #32]
 800bae4:	697a      	ldr	r2, [r7, #20]
 800bae6:	69f9      	ldr	r1, [r7, #28]
 800bae8:	f7fd fef6 	bl	80098d8 <disk_write_dma_start>
 800baec:	4603      	mov	r3, r0
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d045      	beq.n	800bb7e <f_write_dma_start+0x248>
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2201      	movs	r2, #1
 800baf6:	755a      	strb	r2, [r3, #21]
 800baf8:	2301      	movs	r3, #1
 800bafa:	e041      	b.n	800bb80 <f_write_dma_start+0x24a>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	6a1b      	ldr	r3, [r3, #32]
 800bb00:	697a      	ldr	r2, [r7, #20]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d016      	beq.n	800bb34 <f_write_dma_start+0x1fe>
				fp->fptr < fp->obj.objsize &&
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	699a      	ldr	r2, [r3, #24]
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d210      	bcs.n	800bb34 <f_write_dma_start+0x1fe>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	7858      	ldrb	r0, [r3, #1]
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	697a      	ldr	r2, [r7, #20]
 800bb20:	f7fd fe9a 	bl	8009858 <disk_read>
 800bb24:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d004      	beq.n	800bb34 <f_write_dma_start+0x1fe>
					ABORT(fs, FR_DISK_ERR);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	755a      	strb	r2, [r3, #21]
 800bb30:	2301      	movs	r3, #1
 800bb32:	e025      	b.n	800bb80 <f_write_dma_start+0x24a>
			}
#endif
			fp->sect = sect;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	697a      	ldr	r2, [r7, #20]
 800bb38:	621a      	str	r2, [r3, #32]
 800bb3a:	e020      	b.n	800bb7e <f_write_dma_start+0x248>
		}
	}

	else {

		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	699b      	ldr	r3, [r3, #24]
 800bb40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb44:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bb48:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bb4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d901      	bls.n	800bb56 <f_write_dma_start+0x220>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	699b      	ldr	r3, [r3, #24]
 800bb60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb64:	4413      	add	r3, r2
 800bb66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb68:	69f9      	ldr	r1, [r7, #28]
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7fd ff8a 	bl	8009a84 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	7d1b      	ldrb	r3, [r3, #20]
 800bb74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bb78:	b2da      	uxtb	r2, r3
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	751a      	strb	r2, [r3, #20]
#endif

	}

//	fp->flag |= FA_MODIFIED;				/* Set file change flag */
	LEAVE_FF(fs, FR_OK);
 800bb7e:	2300      	movs	r3, #0
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3730      	adds	r7, #48	; 0x30
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <f_write_dma_cplt>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b08c      	sub	sp, #48	; 0x30
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	607a      	str	r2, [r7, #4]
 800bb94:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	627b      	str	r3, [r7, #36]	; 0x24

	// Replicating all this again, after dma_start: should be stored as globals /////////
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f107 0214 	add.w	r2, r7, #20
 800bba0:	4611      	mov	r1, r2
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7ff fb4e 	bl	800b244 <validate>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bbae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d107      	bne.n	800bbc6 <f_write_dma_cplt+0x3e>
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	7d5b      	ldrb	r3, [r3, #21]
 800bbba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bbbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d002      	beq.n	800bbcc <f_write_dma_cplt+0x44>
 800bbc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbca:	e0c4      	b.n	800bd56 <f_write_dma_cplt+0x1ce>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	7d1b      	ldrb	r3, [r3, #20]
 800bbd0:	f003 0302 	and.w	r3, r3, #2
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d101      	bne.n	800bbdc <f_write_dma_cplt+0x54>
 800bbd8:	2307      	movs	r3, #7
 800bbda:	e0bc      	b.n	800bd56 <f_write_dma_cplt+0x1ce>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	699a      	ldr	r2, [r3, #24]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	441a      	add	r2, r3
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	699b      	ldr	r3, [r3, #24]
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d203      	bcs.n	800bbf4 <f_write_dma_cplt+0x6c>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	699b      	ldr	r3, [r3, #24]
 800bbf0:	43db      	mvns	r3, r3
 800bbf2:	607b      	str	r3, [r7, #4]
	}
	csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	699b      	ldr	r3, [r3, #24]
 800bbf8:	0a5b      	lsrs	r3, r3, #9
 800bbfa:	697a      	ldr	r2, [r7, #20]
 800bbfc:	8952      	ldrh	r2, [r2, #10]
 800bbfe:	3a01      	subs	r2, #1
 800bc00:	4013      	ands	r3, r2
 800bc02:	623b      	str	r3, [r7, #32]
	sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bc04:	697a      	ldr	r2, [r7, #20]
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	69db      	ldr	r3, [r3, #28]
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	4610      	mov	r0, r2
 800bc0e:	f7fe fa03 	bl	800a018 <clust2sect>
 800bc12:	61f8      	str	r0, [r7, #28]
	if (!sect) ABORT(fs, FR_INT_ERR);
 800bc14:	69fb      	ldr	r3, [r7, #28]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d104      	bne.n	800bc24 <f_write_dma_cplt+0x9c>
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2202      	movs	r2, #2
 800bc1e:	755a      	strb	r2, [r3, #21]
 800bc20:	2302      	movs	r3, #2
 800bc22:	e098      	b.n	800bd56 <f_write_dma_cplt+0x1ce>
	sect += csect;
 800bc24:	69fa      	ldr	r2, [r7, #28]
 800bc26:	6a3b      	ldr	r3, [r7, #32]
 800bc28:	4413      	add	r3, r2
 800bc2a:	61fb      	str	r3, [r7, #28]
	////////////////////////////////////////////////////////////////////////////////


	*bw = 0;	/* Clear write byte counter */
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	601a      	str	r2, [r3, #0]

	if (disk_write_dma_cplt(fs->drv) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	785b      	ldrb	r3, [r3, #1]
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7fd fe6e 	bl	8009918 <disk_write_dma_cplt>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d004      	beq.n	800bc4c <f_write_dma_cplt+0xc4>
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2201      	movs	r2, #1
 800bc46:	755a      	strb	r2, [r3, #21]
 800bc48:	2301      	movs	r3, #1
 800bc4a:	e084      	b.n	800bd56 <f_write_dma_cplt+0x1ce>
	if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
		mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
		fs->wflag = 0;
	}
#else
	if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	6a1a      	ldr	r2, [r3, #32]
 800bc50:	69fb      	ldr	r3, [r7, #28]
 800bc52:	1ad3      	subs	r3, r2, r3
 800bc54:	69ba      	ldr	r2, [r7, #24]
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d915      	bls.n	800bc86 <f_write_dma_cplt+0xfe>
		mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6a1a      	ldr	r2, [r3, #32]
 800bc64:	69fb      	ldr	r3, [r7, #28]
 800bc66:	1ad3      	subs	r3, r2, r3
 800bc68:	025b      	lsls	r3, r3, #9
 800bc6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc6c:	4413      	add	r3, r2
 800bc6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc72:	4619      	mov	r1, r3
 800bc74:	f7fd ff06 	bl	8009a84 <mem_cpy>
		fp->flag &= (BYTE)~FA_DIRTY;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	7d1b      	ldrb	r3, [r3, #20]
 800bc7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc80:	b2da      	uxtb	r2, r3
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	751a      	strb	r2, [r3, #20]
	}
#endif
#endif
	wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bc86:	69bb      	ldr	r3, [r7, #24]
 800bc88:	025b      	lsls	r3, r3, #9
 800bc8a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
		if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
		fs->winsect = sect;
	}
#else
	if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	6a1b      	ldr	r3, [r3, #32]
 800bc90:	69fa      	ldr	r2, [r7, #28]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d016      	beq.n	800bcc4 <f_write_dma_cplt+0x13c>
		fp->fptr < fp->obj.objsize &&
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	699a      	ldr	r2, [r3, #24]
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	68db      	ldr	r3, [r3, #12]
	if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d210      	bcs.n	800bcc4 <f_write_dma_cplt+0x13c>
		disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	7858      	ldrb	r0, [r3, #1]
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bcac:	2301      	movs	r3, #1
 800bcae:	69fa      	ldr	r2, [r7, #28]
 800bcb0:	f7fd fdd2 	bl	8009858 <disk_read>
 800bcb4:	4603      	mov	r3, r0
		fp->fptr < fp->obj.objsize &&
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d004      	beq.n	800bcc4 <f_write_dma_cplt+0x13c>
			ABORT(fs, FR_DISK_ERR);
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	755a      	strb	r2, [r3, #21]
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	e048      	b.n	800bd56 <f_write_dma_cplt+0x1ce>
	}
#endif
	fp->sect = sect;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	69fa      	ldr	r2, [r7, #28]
 800bcc8:	621a      	str	r2, [r3, #32]
	wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	699b      	ldr	r3, [r3, #24]
 800bcce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcd2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bcd6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bcd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d901      	bls.n	800bce4 <f_write_dma_cplt+0x15c>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
	if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
	mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
	fs->wflag = 1;
#else
	mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	699b      	ldr	r3, [r3, #24]
 800bcee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcf2:	4413      	add	r3, r2
 800bcf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f7fd fec3 	bl	8009a84 <mem_cpy>
	fp->flag |= FA_DIRTY;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	7d1b      	ldrb	r3, [r3, #20]
 800bd02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bd06:	b2da      	uxtb	r2, r3
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	751a      	strb	r2, [r3, #20]
#endif

	wbuff += wcnt; fp->fptr += wcnt; fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt; btw -= wcnt;
 800bd0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd10:	4413      	add	r3, r2
 800bd12:	627b      	str	r3, [r7, #36]	; 0x24
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	699a      	ldr	r2, [r3, #24]
 800bd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1a:	441a      	add	r2, r3
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	619a      	str	r2, [r3, #24]
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	68da      	ldr	r2, [r3, #12]
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	699b      	ldr	r3, [r3, #24]
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	bf38      	it	cc
 800bd2c:	461a      	movcc	r2, r3
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	60da      	str	r2, [r3, #12]
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	681a      	ldr	r2, [r3, #0]
 800bd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd38:	441a      	add	r2, r3
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	601a      	str	r2, [r3, #0]
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd42:	1ad3      	subs	r3, r2, r3
 800bd44:	607b      	str	r3, [r7, #4]

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	7d1b      	ldrb	r3, [r3, #20]
 800bd4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd4e:	b2da      	uxtb	r2, r3
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bd54:	2300      	movs	r3, #0
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3730      	adds	r7, #48	; 0x30
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}

0800bd5e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bd5e:	b580      	push	{r7, lr}
 800bd60:	b086      	sub	sp, #24
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f107 0208 	add.w	r2, r7, #8
 800bd6c:	4611      	mov	r1, r2
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7ff fa68 	bl	800b244 <validate>
 800bd74:	4603      	mov	r3, r0
 800bd76:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bd78:	7dfb      	ldrb	r3, [r7, #23]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d168      	bne.n	800be50 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	7d1b      	ldrb	r3, [r3, #20]
 800bd82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d062      	beq.n	800be50 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	7d1b      	ldrb	r3, [r3, #20]
 800bd8e:	b25b      	sxtb	r3, r3
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	da15      	bge.n	800bdc0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	7858      	ldrb	r0, [r3, #1]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6a1a      	ldr	r2, [r3, #32]
 800bda2:	2301      	movs	r3, #1
 800bda4:	f7fd fd78 	bl	8009898 <disk_write>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d001      	beq.n	800bdb2 <f_sync+0x54>
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e04f      	b.n	800be52 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	7d1b      	ldrb	r3, [r3, #20]
 800bdb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdba:	b2da      	uxtb	r2, r3
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bdc0:	f7fc fe14 	bl	80089ec <get_fattime>
 800bdc4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bdc6:	68ba      	ldr	r2, [r7, #8]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdcc:	4619      	mov	r1, r3
 800bdce:	4610      	mov	r0, r2
 800bdd0:	f7fe f886 	bl	8009ee0 <move_window>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bdd8:	7dfb      	ldrb	r3, [r7, #23]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d138      	bne.n	800be50 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bde2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	330b      	adds	r3, #11
 800bde8:	781a      	ldrb	r2, [r3, #0]
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	330b      	adds	r3, #11
 800bdee:	f042 0220 	orr.w	r2, r2, #32
 800bdf2:	b2d2      	uxtb	r2, r2
 800bdf4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6818      	ldr	r0, [r3, #0]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	689b      	ldr	r3, [r3, #8]
 800bdfe:	461a      	mov	r2, r3
 800be00:	68f9      	ldr	r1, [r7, #12]
 800be02:	f7fe fd8b 	bl	800a91c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	f103 021c 	add.w	r2, r3, #28
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	68db      	ldr	r3, [r3, #12]
 800be10:	4619      	mov	r1, r3
 800be12:	4610      	mov	r0, r2
 800be14:	f7fd fe0a 	bl	8009a2c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	3316      	adds	r3, #22
 800be1c:	6939      	ldr	r1, [r7, #16]
 800be1e:	4618      	mov	r0, r3
 800be20:	f7fd fe04 	bl	8009a2c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	3312      	adds	r3, #18
 800be28:	2100      	movs	r1, #0
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7fd fde3 	bl	80099f6 <st_word>
					fs->wflag = 1;
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	2201      	movs	r2, #1
 800be34:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	4618      	mov	r0, r3
 800be3a:	f7fe f87f 	bl	8009f3c <sync_fs>
 800be3e:	4603      	mov	r3, r0
 800be40:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	7d1b      	ldrb	r3, [r3, #20]
 800be46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be4a:	b2da      	uxtb	r2, r3
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800be50:	7dfb      	ldrb	r3, [r7, #23]
}
 800be52:	4618      	mov	r0, r3
 800be54:	3718      	adds	r7, #24
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}

0800be5a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800be5a:	b580      	push	{r7, lr}
 800be5c:	b084      	sub	sp, #16
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f7ff ff7b 	bl	800bd5e <f_sync>
 800be68:	4603      	mov	r3, r0
 800be6a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800be6c:	7bfb      	ldrb	r3, [r7, #15]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d118      	bne.n	800bea4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f107 0208 	add.w	r2, r7, #8
 800be78:	4611      	mov	r1, r2
 800be7a:	4618      	mov	r0, r3
 800be7c:	f7ff f9e2 	bl	800b244 <validate>
 800be80:	4603      	mov	r3, r0
 800be82:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800be84:	7bfb      	ldrb	r3, [r7, #15]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d10c      	bne.n	800bea4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	691b      	ldr	r3, [r3, #16]
 800be8e:	4618      	mov	r0, r3
 800be90:	f7fd ff82 	bl	8009d98 <dec_lock>
 800be94:	4603      	mov	r3, r0
 800be96:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800be98:	7bfb      	ldrb	r3, [r7, #15]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d102      	bne.n	800bea4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2200      	movs	r2, #0
 800bea2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3710      	adds	r7, #16
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
	...

0800beb0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b087      	sub	sp, #28
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	4613      	mov	r3, r2
 800bebc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bebe:	2301      	movs	r3, #1
 800bec0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bec2:	2300      	movs	r3, #0
 800bec4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bec6:	4b1f      	ldr	r3, [pc, #124]	; (800bf44 <FATFS_LinkDriverEx+0x94>)
 800bec8:	7a5b      	ldrb	r3, [r3, #9]
 800beca:	b2db      	uxtb	r3, r3
 800becc:	2b00      	cmp	r3, #0
 800bece:	d131      	bne.n	800bf34 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bed0:	4b1c      	ldr	r3, [pc, #112]	; (800bf44 <FATFS_LinkDriverEx+0x94>)
 800bed2:	7a5b      	ldrb	r3, [r3, #9]
 800bed4:	b2db      	uxtb	r3, r3
 800bed6:	461a      	mov	r2, r3
 800bed8:	4b1a      	ldr	r3, [pc, #104]	; (800bf44 <FATFS_LinkDriverEx+0x94>)
 800beda:	2100      	movs	r1, #0
 800bedc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bede:	4b19      	ldr	r3, [pc, #100]	; (800bf44 <FATFS_LinkDriverEx+0x94>)
 800bee0:	7a5b      	ldrb	r3, [r3, #9]
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	4a17      	ldr	r2, [pc, #92]	; (800bf44 <FATFS_LinkDriverEx+0x94>)
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	4413      	add	r3, r2
 800beea:	68fa      	ldr	r2, [r7, #12]
 800beec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800beee:	4b15      	ldr	r3, [pc, #84]	; (800bf44 <FATFS_LinkDriverEx+0x94>)
 800bef0:	7a5b      	ldrb	r3, [r3, #9]
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	461a      	mov	r2, r3
 800bef6:	4b13      	ldr	r3, [pc, #76]	; (800bf44 <FATFS_LinkDriverEx+0x94>)
 800bef8:	4413      	add	r3, r2
 800befa:	79fa      	ldrb	r2, [r7, #7]
 800befc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800befe:	4b11      	ldr	r3, [pc, #68]	; (800bf44 <FATFS_LinkDriverEx+0x94>)
 800bf00:	7a5b      	ldrb	r3, [r3, #9]
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	1c5a      	adds	r2, r3, #1
 800bf06:	b2d1      	uxtb	r1, r2
 800bf08:	4a0e      	ldr	r2, [pc, #56]	; (800bf44 <FATFS_LinkDriverEx+0x94>)
 800bf0a:	7251      	strb	r1, [r2, #9]
 800bf0c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bf0e:	7dbb      	ldrb	r3, [r7, #22]
 800bf10:	3330      	adds	r3, #48	; 0x30
 800bf12:	b2da      	uxtb	r2, r3
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	223a      	movs	r2, #58	; 0x3a
 800bf1e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	3302      	adds	r3, #2
 800bf24:	222f      	movs	r2, #47	; 0x2f
 800bf26:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	3303      	adds	r3, #3
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bf30:	2300      	movs	r3, #0
 800bf32:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bf34:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	371c      	adds	r7, #28
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr
 800bf42:	bf00      	nop
 800bf44:	24000dd4 	.word	0x24000dd4

0800bf48 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b082      	sub	sp, #8
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bf52:	2200      	movs	r2, #0
 800bf54:	6839      	ldr	r1, [r7, #0]
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f7ff ffaa 	bl	800beb0 <FATFS_LinkDriverEx>
 800bf5c:	4603      	mov	r3, r0
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3708      	adds	r7, #8
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
	...

0800bf68 <__errno>:
 800bf68:	4b01      	ldr	r3, [pc, #4]	; (800bf70 <__errno+0x8>)
 800bf6a:	6818      	ldr	r0, [r3, #0]
 800bf6c:	4770      	bx	lr
 800bf6e:	bf00      	nop
 800bf70:	24000034 	.word	0x24000034

0800bf74 <__libc_init_array>:
 800bf74:	b570      	push	{r4, r5, r6, lr}
 800bf76:	4e0d      	ldr	r6, [pc, #52]	; (800bfac <__libc_init_array+0x38>)
 800bf78:	4c0d      	ldr	r4, [pc, #52]	; (800bfb0 <__libc_init_array+0x3c>)
 800bf7a:	1ba4      	subs	r4, r4, r6
 800bf7c:	10a4      	asrs	r4, r4, #2
 800bf7e:	2500      	movs	r5, #0
 800bf80:	42a5      	cmp	r5, r4
 800bf82:	d109      	bne.n	800bf98 <__libc_init_array+0x24>
 800bf84:	4e0b      	ldr	r6, [pc, #44]	; (800bfb4 <__libc_init_array+0x40>)
 800bf86:	4c0c      	ldr	r4, [pc, #48]	; (800bfb8 <__libc_init_array+0x44>)
 800bf88:	f000 fc40 	bl	800c80c <_init>
 800bf8c:	1ba4      	subs	r4, r4, r6
 800bf8e:	10a4      	asrs	r4, r4, #2
 800bf90:	2500      	movs	r5, #0
 800bf92:	42a5      	cmp	r5, r4
 800bf94:	d105      	bne.n	800bfa2 <__libc_init_array+0x2e>
 800bf96:	bd70      	pop	{r4, r5, r6, pc}
 800bf98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bf9c:	4798      	blx	r3
 800bf9e:	3501      	adds	r5, #1
 800bfa0:	e7ee      	b.n	800bf80 <__libc_init_array+0xc>
 800bfa2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bfa6:	4798      	blx	r3
 800bfa8:	3501      	adds	r5, #1
 800bfaa:	e7f2      	b.n	800bf92 <__libc_init_array+0x1e>
 800bfac:	0800cac8 	.word	0x0800cac8
 800bfb0:	0800cac8 	.word	0x0800cac8
 800bfb4:	0800cac8 	.word	0x0800cac8
 800bfb8:	0800cacc 	.word	0x0800cacc

0800bfbc <memset>:
 800bfbc:	4402      	add	r2, r0
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d100      	bne.n	800bfc6 <memset+0xa>
 800bfc4:	4770      	bx	lr
 800bfc6:	f803 1b01 	strb.w	r1, [r3], #1
 800bfca:	e7f9      	b.n	800bfc0 <memset+0x4>

0800bfcc <_vsniprintf_r>:
 800bfcc:	b530      	push	{r4, r5, lr}
 800bfce:	1e14      	subs	r4, r2, #0
 800bfd0:	4605      	mov	r5, r0
 800bfd2:	b09b      	sub	sp, #108	; 0x6c
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	da05      	bge.n	800bfe4 <_vsniprintf_r+0x18>
 800bfd8:	238b      	movs	r3, #139	; 0x8b
 800bfda:	602b      	str	r3, [r5, #0]
 800bfdc:	f04f 30ff 	mov.w	r0, #4294967295
 800bfe0:	b01b      	add	sp, #108	; 0x6c
 800bfe2:	bd30      	pop	{r4, r5, pc}
 800bfe4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bfe8:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bfec:	bf14      	ite	ne
 800bfee:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bff2:	4623      	moveq	r3, r4
 800bff4:	9302      	str	r3, [sp, #8]
 800bff6:	9305      	str	r3, [sp, #20]
 800bff8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bffc:	9100      	str	r1, [sp, #0]
 800bffe:	9104      	str	r1, [sp, #16]
 800c000:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c004:	4602      	mov	r2, r0
 800c006:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c008:	4669      	mov	r1, sp
 800c00a:	4628      	mov	r0, r5
 800c00c:	f000 f872 	bl	800c0f4 <_svfiprintf_r>
 800c010:	1c43      	adds	r3, r0, #1
 800c012:	bfbc      	itt	lt
 800c014:	238b      	movlt	r3, #139	; 0x8b
 800c016:	602b      	strlt	r3, [r5, #0]
 800c018:	2c00      	cmp	r4, #0
 800c01a:	d0e1      	beq.n	800bfe0 <_vsniprintf_r+0x14>
 800c01c:	9b00      	ldr	r3, [sp, #0]
 800c01e:	2200      	movs	r2, #0
 800c020:	701a      	strb	r2, [r3, #0]
 800c022:	e7dd      	b.n	800bfe0 <_vsniprintf_r+0x14>

0800c024 <vsniprintf>:
 800c024:	b507      	push	{r0, r1, r2, lr}
 800c026:	9300      	str	r3, [sp, #0]
 800c028:	4613      	mov	r3, r2
 800c02a:	460a      	mov	r2, r1
 800c02c:	4601      	mov	r1, r0
 800c02e:	4803      	ldr	r0, [pc, #12]	; (800c03c <vsniprintf+0x18>)
 800c030:	6800      	ldr	r0, [r0, #0]
 800c032:	f7ff ffcb 	bl	800bfcc <_vsniprintf_r>
 800c036:	b003      	add	sp, #12
 800c038:	f85d fb04 	ldr.w	pc, [sp], #4
 800c03c:	24000034 	.word	0x24000034

0800c040 <__ssputs_r>:
 800c040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c044:	688e      	ldr	r6, [r1, #8]
 800c046:	429e      	cmp	r6, r3
 800c048:	4682      	mov	sl, r0
 800c04a:	460c      	mov	r4, r1
 800c04c:	4690      	mov	r8, r2
 800c04e:	4699      	mov	r9, r3
 800c050:	d837      	bhi.n	800c0c2 <__ssputs_r+0x82>
 800c052:	898a      	ldrh	r2, [r1, #12]
 800c054:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c058:	d031      	beq.n	800c0be <__ssputs_r+0x7e>
 800c05a:	6825      	ldr	r5, [r4, #0]
 800c05c:	6909      	ldr	r1, [r1, #16]
 800c05e:	1a6f      	subs	r7, r5, r1
 800c060:	6965      	ldr	r5, [r4, #20]
 800c062:	2302      	movs	r3, #2
 800c064:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c068:	fb95 f5f3 	sdiv	r5, r5, r3
 800c06c:	f109 0301 	add.w	r3, r9, #1
 800c070:	443b      	add	r3, r7
 800c072:	429d      	cmp	r5, r3
 800c074:	bf38      	it	cc
 800c076:	461d      	movcc	r5, r3
 800c078:	0553      	lsls	r3, r2, #21
 800c07a:	d530      	bpl.n	800c0de <__ssputs_r+0x9e>
 800c07c:	4629      	mov	r1, r5
 800c07e:	f000 fb2b 	bl	800c6d8 <_malloc_r>
 800c082:	4606      	mov	r6, r0
 800c084:	b950      	cbnz	r0, 800c09c <__ssputs_r+0x5c>
 800c086:	230c      	movs	r3, #12
 800c088:	f8ca 3000 	str.w	r3, [sl]
 800c08c:	89a3      	ldrh	r3, [r4, #12]
 800c08e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c092:	81a3      	strh	r3, [r4, #12]
 800c094:	f04f 30ff 	mov.w	r0, #4294967295
 800c098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c09c:	463a      	mov	r2, r7
 800c09e:	6921      	ldr	r1, [r4, #16]
 800c0a0:	f000 faa8 	bl	800c5f4 <memcpy>
 800c0a4:	89a3      	ldrh	r3, [r4, #12]
 800c0a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c0aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0ae:	81a3      	strh	r3, [r4, #12]
 800c0b0:	6126      	str	r6, [r4, #16]
 800c0b2:	6165      	str	r5, [r4, #20]
 800c0b4:	443e      	add	r6, r7
 800c0b6:	1bed      	subs	r5, r5, r7
 800c0b8:	6026      	str	r6, [r4, #0]
 800c0ba:	60a5      	str	r5, [r4, #8]
 800c0bc:	464e      	mov	r6, r9
 800c0be:	454e      	cmp	r6, r9
 800c0c0:	d900      	bls.n	800c0c4 <__ssputs_r+0x84>
 800c0c2:	464e      	mov	r6, r9
 800c0c4:	4632      	mov	r2, r6
 800c0c6:	4641      	mov	r1, r8
 800c0c8:	6820      	ldr	r0, [r4, #0]
 800c0ca:	f000 fa9e 	bl	800c60a <memmove>
 800c0ce:	68a3      	ldr	r3, [r4, #8]
 800c0d0:	1b9b      	subs	r3, r3, r6
 800c0d2:	60a3      	str	r3, [r4, #8]
 800c0d4:	6823      	ldr	r3, [r4, #0]
 800c0d6:	441e      	add	r6, r3
 800c0d8:	6026      	str	r6, [r4, #0]
 800c0da:	2000      	movs	r0, #0
 800c0dc:	e7dc      	b.n	800c098 <__ssputs_r+0x58>
 800c0de:	462a      	mov	r2, r5
 800c0e0:	f000 fb54 	bl	800c78c <_realloc_r>
 800c0e4:	4606      	mov	r6, r0
 800c0e6:	2800      	cmp	r0, #0
 800c0e8:	d1e2      	bne.n	800c0b0 <__ssputs_r+0x70>
 800c0ea:	6921      	ldr	r1, [r4, #16]
 800c0ec:	4650      	mov	r0, sl
 800c0ee:	f000 faa5 	bl	800c63c <_free_r>
 800c0f2:	e7c8      	b.n	800c086 <__ssputs_r+0x46>

0800c0f4 <_svfiprintf_r>:
 800c0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f8:	461d      	mov	r5, r3
 800c0fa:	898b      	ldrh	r3, [r1, #12]
 800c0fc:	061f      	lsls	r7, r3, #24
 800c0fe:	b09d      	sub	sp, #116	; 0x74
 800c100:	4680      	mov	r8, r0
 800c102:	460c      	mov	r4, r1
 800c104:	4616      	mov	r6, r2
 800c106:	d50f      	bpl.n	800c128 <_svfiprintf_r+0x34>
 800c108:	690b      	ldr	r3, [r1, #16]
 800c10a:	b96b      	cbnz	r3, 800c128 <_svfiprintf_r+0x34>
 800c10c:	2140      	movs	r1, #64	; 0x40
 800c10e:	f000 fae3 	bl	800c6d8 <_malloc_r>
 800c112:	6020      	str	r0, [r4, #0]
 800c114:	6120      	str	r0, [r4, #16]
 800c116:	b928      	cbnz	r0, 800c124 <_svfiprintf_r+0x30>
 800c118:	230c      	movs	r3, #12
 800c11a:	f8c8 3000 	str.w	r3, [r8]
 800c11e:	f04f 30ff 	mov.w	r0, #4294967295
 800c122:	e0c8      	b.n	800c2b6 <_svfiprintf_r+0x1c2>
 800c124:	2340      	movs	r3, #64	; 0x40
 800c126:	6163      	str	r3, [r4, #20]
 800c128:	2300      	movs	r3, #0
 800c12a:	9309      	str	r3, [sp, #36]	; 0x24
 800c12c:	2320      	movs	r3, #32
 800c12e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c132:	2330      	movs	r3, #48	; 0x30
 800c134:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c138:	9503      	str	r5, [sp, #12]
 800c13a:	f04f 0b01 	mov.w	fp, #1
 800c13e:	4637      	mov	r7, r6
 800c140:	463d      	mov	r5, r7
 800c142:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c146:	b10b      	cbz	r3, 800c14c <_svfiprintf_r+0x58>
 800c148:	2b25      	cmp	r3, #37	; 0x25
 800c14a:	d13e      	bne.n	800c1ca <_svfiprintf_r+0xd6>
 800c14c:	ebb7 0a06 	subs.w	sl, r7, r6
 800c150:	d00b      	beq.n	800c16a <_svfiprintf_r+0x76>
 800c152:	4653      	mov	r3, sl
 800c154:	4632      	mov	r2, r6
 800c156:	4621      	mov	r1, r4
 800c158:	4640      	mov	r0, r8
 800c15a:	f7ff ff71 	bl	800c040 <__ssputs_r>
 800c15e:	3001      	adds	r0, #1
 800c160:	f000 80a4 	beq.w	800c2ac <_svfiprintf_r+0x1b8>
 800c164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c166:	4453      	add	r3, sl
 800c168:	9309      	str	r3, [sp, #36]	; 0x24
 800c16a:	783b      	ldrb	r3, [r7, #0]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	f000 809d 	beq.w	800c2ac <_svfiprintf_r+0x1b8>
 800c172:	2300      	movs	r3, #0
 800c174:	f04f 32ff 	mov.w	r2, #4294967295
 800c178:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c17c:	9304      	str	r3, [sp, #16]
 800c17e:	9307      	str	r3, [sp, #28]
 800c180:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c184:	931a      	str	r3, [sp, #104]	; 0x68
 800c186:	462f      	mov	r7, r5
 800c188:	2205      	movs	r2, #5
 800c18a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c18e:	4850      	ldr	r0, [pc, #320]	; (800c2d0 <_svfiprintf_r+0x1dc>)
 800c190:	f7f4 f8ae 	bl	80002f0 <memchr>
 800c194:	9b04      	ldr	r3, [sp, #16]
 800c196:	b9d0      	cbnz	r0, 800c1ce <_svfiprintf_r+0xda>
 800c198:	06d9      	lsls	r1, r3, #27
 800c19a:	bf44      	itt	mi
 800c19c:	2220      	movmi	r2, #32
 800c19e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c1a2:	071a      	lsls	r2, r3, #28
 800c1a4:	bf44      	itt	mi
 800c1a6:	222b      	movmi	r2, #43	; 0x2b
 800c1a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c1ac:	782a      	ldrb	r2, [r5, #0]
 800c1ae:	2a2a      	cmp	r2, #42	; 0x2a
 800c1b0:	d015      	beq.n	800c1de <_svfiprintf_r+0xea>
 800c1b2:	9a07      	ldr	r2, [sp, #28]
 800c1b4:	462f      	mov	r7, r5
 800c1b6:	2000      	movs	r0, #0
 800c1b8:	250a      	movs	r5, #10
 800c1ba:	4639      	mov	r1, r7
 800c1bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1c0:	3b30      	subs	r3, #48	; 0x30
 800c1c2:	2b09      	cmp	r3, #9
 800c1c4:	d94d      	bls.n	800c262 <_svfiprintf_r+0x16e>
 800c1c6:	b1b8      	cbz	r0, 800c1f8 <_svfiprintf_r+0x104>
 800c1c8:	e00f      	b.n	800c1ea <_svfiprintf_r+0xf6>
 800c1ca:	462f      	mov	r7, r5
 800c1cc:	e7b8      	b.n	800c140 <_svfiprintf_r+0x4c>
 800c1ce:	4a40      	ldr	r2, [pc, #256]	; (800c2d0 <_svfiprintf_r+0x1dc>)
 800c1d0:	1a80      	subs	r0, r0, r2
 800c1d2:	fa0b f000 	lsl.w	r0, fp, r0
 800c1d6:	4318      	orrs	r0, r3
 800c1d8:	9004      	str	r0, [sp, #16]
 800c1da:	463d      	mov	r5, r7
 800c1dc:	e7d3      	b.n	800c186 <_svfiprintf_r+0x92>
 800c1de:	9a03      	ldr	r2, [sp, #12]
 800c1e0:	1d11      	adds	r1, r2, #4
 800c1e2:	6812      	ldr	r2, [r2, #0]
 800c1e4:	9103      	str	r1, [sp, #12]
 800c1e6:	2a00      	cmp	r2, #0
 800c1e8:	db01      	blt.n	800c1ee <_svfiprintf_r+0xfa>
 800c1ea:	9207      	str	r2, [sp, #28]
 800c1ec:	e004      	b.n	800c1f8 <_svfiprintf_r+0x104>
 800c1ee:	4252      	negs	r2, r2
 800c1f0:	f043 0302 	orr.w	r3, r3, #2
 800c1f4:	9207      	str	r2, [sp, #28]
 800c1f6:	9304      	str	r3, [sp, #16]
 800c1f8:	783b      	ldrb	r3, [r7, #0]
 800c1fa:	2b2e      	cmp	r3, #46	; 0x2e
 800c1fc:	d10c      	bne.n	800c218 <_svfiprintf_r+0x124>
 800c1fe:	787b      	ldrb	r3, [r7, #1]
 800c200:	2b2a      	cmp	r3, #42	; 0x2a
 800c202:	d133      	bne.n	800c26c <_svfiprintf_r+0x178>
 800c204:	9b03      	ldr	r3, [sp, #12]
 800c206:	1d1a      	adds	r2, r3, #4
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	9203      	str	r2, [sp, #12]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	bfb8      	it	lt
 800c210:	f04f 33ff 	movlt.w	r3, #4294967295
 800c214:	3702      	adds	r7, #2
 800c216:	9305      	str	r3, [sp, #20]
 800c218:	4d2e      	ldr	r5, [pc, #184]	; (800c2d4 <_svfiprintf_r+0x1e0>)
 800c21a:	7839      	ldrb	r1, [r7, #0]
 800c21c:	2203      	movs	r2, #3
 800c21e:	4628      	mov	r0, r5
 800c220:	f7f4 f866 	bl	80002f0 <memchr>
 800c224:	b138      	cbz	r0, 800c236 <_svfiprintf_r+0x142>
 800c226:	2340      	movs	r3, #64	; 0x40
 800c228:	1b40      	subs	r0, r0, r5
 800c22a:	fa03 f000 	lsl.w	r0, r3, r0
 800c22e:	9b04      	ldr	r3, [sp, #16]
 800c230:	4303      	orrs	r3, r0
 800c232:	3701      	adds	r7, #1
 800c234:	9304      	str	r3, [sp, #16]
 800c236:	7839      	ldrb	r1, [r7, #0]
 800c238:	4827      	ldr	r0, [pc, #156]	; (800c2d8 <_svfiprintf_r+0x1e4>)
 800c23a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c23e:	2206      	movs	r2, #6
 800c240:	1c7e      	adds	r6, r7, #1
 800c242:	f7f4 f855 	bl	80002f0 <memchr>
 800c246:	2800      	cmp	r0, #0
 800c248:	d038      	beq.n	800c2bc <_svfiprintf_r+0x1c8>
 800c24a:	4b24      	ldr	r3, [pc, #144]	; (800c2dc <_svfiprintf_r+0x1e8>)
 800c24c:	bb13      	cbnz	r3, 800c294 <_svfiprintf_r+0x1a0>
 800c24e:	9b03      	ldr	r3, [sp, #12]
 800c250:	3307      	adds	r3, #7
 800c252:	f023 0307 	bic.w	r3, r3, #7
 800c256:	3308      	adds	r3, #8
 800c258:	9303      	str	r3, [sp, #12]
 800c25a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c25c:	444b      	add	r3, r9
 800c25e:	9309      	str	r3, [sp, #36]	; 0x24
 800c260:	e76d      	b.n	800c13e <_svfiprintf_r+0x4a>
 800c262:	fb05 3202 	mla	r2, r5, r2, r3
 800c266:	2001      	movs	r0, #1
 800c268:	460f      	mov	r7, r1
 800c26a:	e7a6      	b.n	800c1ba <_svfiprintf_r+0xc6>
 800c26c:	2300      	movs	r3, #0
 800c26e:	3701      	adds	r7, #1
 800c270:	9305      	str	r3, [sp, #20]
 800c272:	4619      	mov	r1, r3
 800c274:	250a      	movs	r5, #10
 800c276:	4638      	mov	r0, r7
 800c278:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c27c:	3a30      	subs	r2, #48	; 0x30
 800c27e:	2a09      	cmp	r2, #9
 800c280:	d903      	bls.n	800c28a <_svfiprintf_r+0x196>
 800c282:	2b00      	cmp	r3, #0
 800c284:	d0c8      	beq.n	800c218 <_svfiprintf_r+0x124>
 800c286:	9105      	str	r1, [sp, #20]
 800c288:	e7c6      	b.n	800c218 <_svfiprintf_r+0x124>
 800c28a:	fb05 2101 	mla	r1, r5, r1, r2
 800c28e:	2301      	movs	r3, #1
 800c290:	4607      	mov	r7, r0
 800c292:	e7f0      	b.n	800c276 <_svfiprintf_r+0x182>
 800c294:	ab03      	add	r3, sp, #12
 800c296:	9300      	str	r3, [sp, #0]
 800c298:	4622      	mov	r2, r4
 800c29a:	4b11      	ldr	r3, [pc, #68]	; (800c2e0 <_svfiprintf_r+0x1ec>)
 800c29c:	a904      	add	r1, sp, #16
 800c29e:	4640      	mov	r0, r8
 800c2a0:	f3af 8000 	nop.w
 800c2a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c2a8:	4681      	mov	r9, r0
 800c2aa:	d1d6      	bne.n	800c25a <_svfiprintf_r+0x166>
 800c2ac:	89a3      	ldrh	r3, [r4, #12]
 800c2ae:	065b      	lsls	r3, r3, #25
 800c2b0:	f53f af35 	bmi.w	800c11e <_svfiprintf_r+0x2a>
 800c2b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2b6:	b01d      	add	sp, #116	; 0x74
 800c2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2bc:	ab03      	add	r3, sp, #12
 800c2be:	9300      	str	r3, [sp, #0]
 800c2c0:	4622      	mov	r2, r4
 800c2c2:	4b07      	ldr	r3, [pc, #28]	; (800c2e0 <_svfiprintf_r+0x1ec>)
 800c2c4:	a904      	add	r1, sp, #16
 800c2c6:	4640      	mov	r0, r8
 800c2c8:	f000 f882 	bl	800c3d0 <_printf_i>
 800c2cc:	e7ea      	b.n	800c2a4 <_svfiprintf_r+0x1b0>
 800c2ce:	bf00      	nop
 800c2d0:	0800ca8c 	.word	0x0800ca8c
 800c2d4:	0800ca92 	.word	0x0800ca92
 800c2d8:	0800ca96 	.word	0x0800ca96
 800c2dc:	00000000 	.word	0x00000000
 800c2e0:	0800c041 	.word	0x0800c041

0800c2e4 <_printf_common>:
 800c2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2e8:	4691      	mov	r9, r2
 800c2ea:	461f      	mov	r7, r3
 800c2ec:	688a      	ldr	r2, [r1, #8]
 800c2ee:	690b      	ldr	r3, [r1, #16]
 800c2f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	bfb8      	it	lt
 800c2f8:	4613      	movlt	r3, r2
 800c2fa:	f8c9 3000 	str.w	r3, [r9]
 800c2fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c302:	4606      	mov	r6, r0
 800c304:	460c      	mov	r4, r1
 800c306:	b112      	cbz	r2, 800c30e <_printf_common+0x2a>
 800c308:	3301      	adds	r3, #1
 800c30a:	f8c9 3000 	str.w	r3, [r9]
 800c30e:	6823      	ldr	r3, [r4, #0]
 800c310:	0699      	lsls	r1, r3, #26
 800c312:	bf42      	ittt	mi
 800c314:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c318:	3302      	addmi	r3, #2
 800c31a:	f8c9 3000 	strmi.w	r3, [r9]
 800c31e:	6825      	ldr	r5, [r4, #0]
 800c320:	f015 0506 	ands.w	r5, r5, #6
 800c324:	d107      	bne.n	800c336 <_printf_common+0x52>
 800c326:	f104 0a19 	add.w	sl, r4, #25
 800c32a:	68e3      	ldr	r3, [r4, #12]
 800c32c:	f8d9 2000 	ldr.w	r2, [r9]
 800c330:	1a9b      	subs	r3, r3, r2
 800c332:	42ab      	cmp	r3, r5
 800c334:	dc28      	bgt.n	800c388 <_printf_common+0xa4>
 800c336:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c33a:	6822      	ldr	r2, [r4, #0]
 800c33c:	3300      	adds	r3, #0
 800c33e:	bf18      	it	ne
 800c340:	2301      	movne	r3, #1
 800c342:	0692      	lsls	r2, r2, #26
 800c344:	d42d      	bmi.n	800c3a2 <_printf_common+0xbe>
 800c346:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c34a:	4639      	mov	r1, r7
 800c34c:	4630      	mov	r0, r6
 800c34e:	47c0      	blx	r8
 800c350:	3001      	adds	r0, #1
 800c352:	d020      	beq.n	800c396 <_printf_common+0xb2>
 800c354:	6823      	ldr	r3, [r4, #0]
 800c356:	68e5      	ldr	r5, [r4, #12]
 800c358:	f8d9 2000 	ldr.w	r2, [r9]
 800c35c:	f003 0306 	and.w	r3, r3, #6
 800c360:	2b04      	cmp	r3, #4
 800c362:	bf08      	it	eq
 800c364:	1aad      	subeq	r5, r5, r2
 800c366:	68a3      	ldr	r3, [r4, #8]
 800c368:	6922      	ldr	r2, [r4, #16]
 800c36a:	bf0c      	ite	eq
 800c36c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c370:	2500      	movne	r5, #0
 800c372:	4293      	cmp	r3, r2
 800c374:	bfc4      	itt	gt
 800c376:	1a9b      	subgt	r3, r3, r2
 800c378:	18ed      	addgt	r5, r5, r3
 800c37a:	f04f 0900 	mov.w	r9, #0
 800c37e:	341a      	adds	r4, #26
 800c380:	454d      	cmp	r5, r9
 800c382:	d11a      	bne.n	800c3ba <_printf_common+0xd6>
 800c384:	2000      	movs	r0, #0
 800c386:	e008      	b.n	800c39a <_printf_common+0xb6>
 800c388:	2301      	movs	r3, #1
 800c38a:	4652      	mov	r2, sl
 800c38c:	4639      	mov	r1, r7
 800c38e:	4630      	mov	r0, r6
 800c390:	47c0      	blx	r8
 800c392:	3001      	adds	r0, #1
 800c394:	d103      	bne.n	800c39e <_printf_common+0xba>
 800c396:	f04f 30ff 	mov.w	r0, #4294967295
 800c39a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c39e:	3501      	adds	r5, #1
 800c3a0:	e7c3      	b.n	800c32a <_printf_common+0x46>
 800c3a2:	18e1      	adds	r1, r4, r3
 800c3a4:	1c5a      	adds	r2, r3, #1
 800c3a6:	2030      	movs	r0, #48	; 0x30
 800c3a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c3ac:	4422      	add	r2, r4
 800c3ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c3b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c3b6:	3302      	adds	r3, #2
 800c3b8:	e7c5      	b.n	800c346 <_printf_common+0x62>
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	4622      	mov	r2, r4
 800c3be:	4639      	mov	r1, r7
 800c3c0:	4630      	mov	r0, r6
 800c3c2:	47c0      	blx	r8
 800c3c4:	3001      	adds	r0, #1
 800c3c6:	d0e6      	beq.n	800c396 <_printf_common+0xb2>
 800c3c8:	f109 0901 	add.w	r9, r9, #1
 800c3cc:	e7d8      	b.n	800c380 <_printf_common+0x9c>
	...

0800c3d0 <_printf_i>:
 800c3d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c3d8:	460c      	mov	r4, r1
 800c3da:	7e09      	ldrb	r1, [r1, #24]
 800c3dc:	b085      	sub	sp, #20
 800c3de:	296e      	cmp	r1, #110	; 0x6e
 800c3e0:	4617      	mov	r7, r2
 800c3e2:	4606      	mov	r6, r0
 800c3e4:	4698      	mov	r8, r3
 800c3e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c3e8:	f000 80b3 	beq.w	800c552 <_printf_i+0x182>
 800c3ec:	d822      	bhi.n	800c434 <_printf_i+0x64>
 800c3ee:	2963      	cmp	r1, #99	; 0x63
 800c3f0:	d036      	beq.n	800c460 <_printf_i+0x90>
 800c3f2:	d80a      	bhi.n	800c40a <_printf_i+0x3a>
 800c3f4:	2900      	cmp	r1, #0
 800c3f6:	f000 80b9 	beq.w	800c56c <_printf_i+0x19c>
 800c3fa:	2958      	cmp	r1, #88	; 0x58
 800c3fc:	f000 8083 	beq.w	800c506 <_printf_i+0x136>
 800c400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c404:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c408:	e032      	b.n	800c470 <_printf_i+0xa0>
 800c40a:	2964      	cmp	r1, #100	; 0x64
 800c40c:	d001      	beq.n	800c412 <_printf_i+0x42>
 800c40e:	2969      	cmp	r1, #105	; 0x69
 800c410:	d1f6      	bne.n	800c400 <_printf_i+0x30>
 800c412:	6820      	ldr	r0, [r4, #0]
 800c414:	6813      	ldr	r3, [r2, #0]
 800c416:	0605      	lsls	r5, r0, #24
 800c418:	f103 0104 	add.w	r1, r3, #4
 800c41c:	d52a      	bpl.n	800c474 <_printf_i+0xa4>
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	6011      	str	r1, [r2, #0]
 800c422:	2b00      	cmp	r3, #0
 800c424:	da03      	bge.n	800c42e <_printf_i+0x5e>
 800c426:	222d      	movs	r2, #45	; 0x2d
 800c428:	425b      	negs	r3, r3
 800c42a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c42e:	486f      	ldr	r0, [pc, #444]	; (800c5ec <_printf_i+0x21c>)
 800c430:	220a      	movs	r2, #10
 800c432:	e039      	b.n	800c4a8 <_printf_i+0xd8>
 800c434:	2973      	cmp	r1, #115	; 0x73
 800c436:	f000 809d 	beq.w	800c574 <_printf_i+0x1a4>
 800c43a:	d808      	bhi.n	800c44e <_printf_i+0x7e>
 800c43c:	296f      	cmp	r1, #111	; 0x6f
 800c43e:	d020      	beq.n	800c482 <_printf_i+0xb2>
 800c440:	2970      	cmp	r1, #112	; 0x70
 800c442:	d1dd      	bne.n	800c400 <_printf_i+0x30>
 800c444:	6823      	ldr	r3, [r4, #0]
 800c446:	f043 0320 	orr.w	r3, r3, #32
 800c44a:	6023      	str	r3, [r4, #0]
 800c44c:	e003      	b.n	800c456 <_printf_i+0x86>
 800c44e:	2975      	cmp	r1, #117	; 0x75
 800c450:	d017      	beq.n	800c482 <_printf_i+0xb2>
 800c452:	2978      	cmp	r1, #120	; 0x78
 800c454:	d1d4      	bne.n	800c400 <_printf_i+0x30>
 800c456:	2378      	movs	r3, #120	; 0x78
 800c458:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c45c:	4864      	ldr	r0, [pc, #400]	; (800c5f0 <_printf_i+0x220>)
 800c45e:	e055      	b.n	800c50c <_printf_i+0x13c>
 800c460:	6813      	ldr	r3, [r2, #0]
 800c462:	1d19      	adds	r1, r3, #4
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	6011      	str	r1, [r2, #0]
 800c468:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c46c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c470:	2301      	movs	r3, #1
 800c472:	e08c      	b.n	800c58e <_printf_i+0x1be>
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	6011      	str	r1, [r2, #0]
 800c478:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c47c:	bf18      	it	ne
 800c47e:	b21b      	sxthne	r3, r3
 800c480:	e7cf      	b.n	800c422 <_printf_i+0x52>
 800c482:	6813      	ldr	r3, [r2, #0]
 800c484:	6825      	ldr	r5, [r4, #0]
 800c486:	1d18      	adds	r0, r3, #4
 800c488:	6010      	str	r0, [r2, #0]
 800c48a:	0628      	lsls	r0, r5, #24
 800c48c:	d501      	bpl.n	800c492 <_printf_i+0xc2>
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	e002      	b.n	800c498 <_printf_i+0xc8>
 800c492:	0668      	lsls	r0, r5, #25
 800c494:	d5fb      	bpl.n	800c48e <_printf_i+0xbe>
 800c496:	881b      	ldrh	r3, [r3, #0]
 800c498:	4854      	ldr	r0, [pc, #336]	; (800c5ec <_printf_i+0x21c>)
 800c49a:	296f      	cmp	r1, #111	; 0x6f
 800c49c:	bf14      	ite	ne
 800c49e:	220a      	movne	r2, #10
 800c4a0:	2208      	moveq	r2, #8
 800c4a2:	2100      	movs	r1, #0
 800c4a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c4a8:	6865      	ldr	r5, [r4, #4]
 800c4aa:	60a5      	str	r5, [r4, #8]
 800c4ac:	2d00      	cmp	r5, #0
 800c4ae:	f2c0 8095 	blt.w	800c5dc <_printf_i+0x20c>
 800c4b2:	6821      	ldr	r1, [r4, #0]
 800c4b4:	f021 0104 	bic.w	r1, r1, #4
 800c4b8:	6021      	str	r1, [r4, #0]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d13d      	bne.n	800c53a <_printf_i+0x16a>
 800c4be:	2d00      	cmp	r5, #0
 800c4c0:	f040 808e 	bne.w	800c5e0 <_printf_i+0x210>
 800c4c4:	4665      	mov	r5, ip
 800c4c6:	2a08      	cmp	r2, #8
 800c4c8:	d10b      	bne.n	800c4e2 <_printf_i+0x112>
 800c4ca:	6823      	ldr	r3, [r4, #0]
 800c4cc:	07db      	lsls	r3, r3, #31
 800c4ce:	d508      	bpl.n	800c4e2 <_printf_i+0x112>
 800c4d0:	6923      	ldr	r3, [r4, #16]
 800c4d2:	6862      	ldr	r2, [r4, #4]
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	bfde      	ittt	le
 800c4d8:	2330      	movle	r3, #48	; 0x30
 800c4da:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c4de:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c4e2:	ebac 0305 	sub.w	r3, ip, r5
 800c4e6:	6123      	str	r3, [r4, #16]
 800c4e8:	f8cd 8000 	str.w	r8, [sp]
 800c4ec:	463b      	mov	r3, r7
 800c4ee:	aa03      	add	r2, sp, #12
 800c4f0:	4621      	mov	r1, r4
 800c4f2:	4630      	mov	r0, r6
 800c4f4:	f7ff fef6 	bl	800c2e4 <_printf_common>
 800c4f8:	3001      	adds	r0, #1
 800c4fa:	d14d      	bne.n	800c598 <_printf_i+0x1c8>
 800c4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c500:	b005      	add	sp, #20
 800c502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c506:	4839      	ldr	r0, [pc, #228]	; (800c5ec <_printf_i+0x21c>)
 800c508:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c50c:	6813      	ldr	r3, [r2, #0]
 800c50e:	6821      	ldr	r1, [r4, #0]
 800c510:	1d1d      	adds	r5, r3, #4
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	6015      	str	r5, [r2, #0]
 800c516:	060a      	lsls	r2, r1, #24
 800c518:	d50b      	bpl.n	800c532 <_printf_i+0x162>
 800c51a:	07ca      	lsls	r2, r1, #31
 800c51c:	bf44      	itt	mi
 800c51e:	f041 0120 	orrmi.w	r1, r1, #32
 800c522:	6021      	strmi	r1, [r4, #0]
 800c524:	b91b      	cbnz	r3, 800c52e <_printf_i+0x15e>
 800c526:	6822      	ldr	r2, [r4, #0]
 800c528:	f022 0220 	bic.w	r2, r2, #32
 800c52c:	6022      	str	r2, [r4, #0]
 800c52e:	2210      	movs	r2, #16
 800c530:	e7b7      	b.n	800c4a2 <_printf_i+0xd2>
 800c532:	064d      	lsls	r5, r1, #25
 800c534:	bf48      	it	mi
 800c536:	b29b      	uxthmi	r3, r3
 800c538:	e7ef      	b.n	800c51a <_printf_i+0x14a>
 800c53a:	4665      	mov	r5, ip
 800c53c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c540:	fb02 3311 	mls	r3, r2, r1, r3
 800c544:	5cc3      	ldrb	r3, [r0, r3]
 800c546:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c54a:	460b      	mov	r3, r1
 800c54c:	2900      	cmp	r1, #0
 800c54e:	d1f5      	bne.n	800c53c <_printf_i+0x16c>
 800c550:	e7b9      	b.n	800c4c6 <_printf_i+0xf6>
 800c552:	6813      	ldr	r3, [r2, #0]
 800c554:	6825      	ldr	r5, [r4, #0]
 800c556:	6961      	ldr	r1, [r4, #20]
 800c558:	1d18      	adds	r0, r3, #4
 800c55a:	6010      	str	r0, [r2, #0]
 800c55c:	0628      	lsls	r0, r5, #24
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	d501      	bpl.n	800c566 <_printf_i+0x196>
 800c562:	6019      	str	r1, [r3, #0]
 800c564:	e002      	b.n	800c56c <_printf_i+0x19c>
 800c566:	066a      	lsls	r2, r5, #25
 800c568:	d5fb      	bpl.n	800c562 <_printf_i+0x192>
 800c56a:	8019      	strh	r1, [r3, #0]
 800c56c:	2300      	movs	r3, #0
 800c56e:	6123      	str	r3, [r4, #16]
 800c570:	4665      	mov	r5, ip
 800c572:	e7b9      	b.n	800c4e8 <_printf_i+0x118>
 800c574:	6813      	ldr	r3, [r2, #0]
 800c576:	1d19      	adds	r1, r3, #4
 800c578:	6011      	str	r1, [r2, #0]
 800c57a:	681d      	ldr	r5, [r3, #0]
 800c57c:	6862      	ldr	r2, [r4, #4]
 800c57e:	2100      	movs	r1, #0
 800c580:	4628      	mov	r0, r5
 800c582:	f7f3 feb5 	bl	80002f0 <memchr>
 800c586:	b108      	cbz	r0, 800c58c <_printf_i+0x1bc>
 800c588:	1b40      	subs	r0, r0, r5
 800c58a:	6060      	str	r0, [r4, #4]
 800c58c:	6863      	ldr	r3, [r4, #4]
 800c58e:	6123      	str	r3, [r4, #16]
 800c590:	2300      	movs	r3, #0
 800c592:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c596:	e7a7      	b.n	800c4e8 <_printf_i+0x118>
 800c598:	6923      	ldr	r3, [r4, #16]
 800c59a:	462a      	mov	r2, r5
 800c59c:	4639      	mov	r1, r7
 800c59e:	4630      	mov	r0, r6
 800c5a0:	47c0      	blx	r8
 800c5a2:	3001      	adds	r0, #1
 800c5a4:	d0aa      	beq.n	800c4fc <_printf_i+0x12c>
 800c5a6:	6823      	ldr	r3, [r4, #0]
 800c5a8:	079b      	lsls	r3, r3, #30
 800c5aa:	d413      	bmi.n	800c5d4 <_printf_i+0x204>
 800c5ac:	68e0      	ldr	r0, [r4, #12]
 800c5ae:	9b03      	ldr	r3, [sp, #12]
 800c5b0:	4298      	cmp	r0, r3
 800c5b2:	bfb8      	it	lt
 800c5b4:	4618      	movlt	r0, r3
 800c5b6:	e7a3      	b.n	800c500 <_printf_i+0x130>
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	464a      	mov	r2, r9
 800c5bc:	4639      	mov	r1, r7
 800c5be:	4630      	mov	r0, r6
 800c5c0:	47c0      	blx	r8
 800c5c2:	3001      	adds	r0, #1
 800c5c4:	d09a      	beq.n	800c4fc <_printf_i+0x12c>
 800c5c6:	3501      	adds	r5, #1
 800c5c8:	68e3      	ldr	r3, [r4, #12]
 800c5ca:	9a03      	ldr	r2, [sp, #12]
 800c5cc:	1a9b      	subs	r3, r3, r2
 800c5ce:	42ab      	cmp	r3, r5
 800c5d0:	dcf2      	bgt.n	800c5b8 <_printf_i+0x1e8>
 800c5d2:	e7eb      	b.n	800c5ac <_printf_i+0x1dc>
 800c5d4:	2500      	movs	r5, #0
 800c5d6:	f104 0919 	add.w	r9, r4, #25
 800c5da:	e7f5      	b.n	800c5c8 <_printf_i+0x1f8>
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d1ac      	bne.n	800c53a <_printf_i+0x16a>
 800c5e0:	7803      	ldrb	r3, [r0, #0]
 800c5e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c5e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5ea:	e76c      	b.n	800c4c6 <_printf_i+0xf6>
 800c5ec:	0800ca9d 	.word	0x0800ca9d
 800c5f0:	0800caae 	.word	0x0800caae

0800c5f4 <memcpy>:
 800c5f4:	b510      	push	{r4, lr}
 800c5f6:	1e43      	subs	r3, r0, #1
 800c5f8:	440a      	add	r2, r1
 800c5fa:	4291      	cmp	r1, r2
 800c5fc:	d100      	bne.n	800c600 <memcpy+0xc>
 800c5fe:	bd10      	pop	{r4, pc}
 800c600:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c604:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c608:	e7f7      	b.n	800c5fa <memcpy+0x6>

0800c60a <memmove>:
 800c60a:	4288      	cmp	r0, r1
 800c60c:	b510      	push	{r4, lr}
 800c60e:	eb01 0302 	add.w	r3, r1, r2
 800c612:	d807      	bhi.n	800c624 <memmove+0x1a>
 800c614:	1e42      	subs	r2, r0, #1
 800c616:	4299      	cmp	r1, r3
 800c618:	d00a      	beq.n	800c630 <memmove+0x26>
 800c61a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c61e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c622:	e7f8      	b.n	800c616 <memmove+0xc>
 800c624:	4283      	cmp	r3, r0
 800c626:	d9f5      	bls.n	800c614 <memmove+0xa>
 800c628:	1881      	adds	r1, r0, r2
 800c62a:	1ad2      	subs	r2, r2, r3
 800c62c:	42d3      	cmn	r3, r2
 800c62e:	d100      	bne.n	800c632 <memmove+0x28>
 800c630:	bd10      	pop	{r4, pc}
 800c632:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c636:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c63a:	e7f7      	b.n	800c62c <memmove+0x22>

0800c63c <_free_r>:
 800c63c:	b538      	push	{r3, r4, r5, lr}
 800c63e:	4605      	mov	r5, r0
 800c640:	2900      	cmp	r1, #0
 800c642:	d045      	beq.n	800c6d0 <_free_r+0x94>
 800c644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c648:	1f0c      	subs	r4, r1, #4
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	bfb8      	it	lt
 800c64e:	18e4      	addlt	r4, r4, r3
 800c650:	f000 f8d2 	bl	800c7f8 <__malloc_lock>
 800c654:	4a1f      	ldr	r2, [pc, #124]	; (800c6d4 <_free_r+0x98>)
 800c656:	6813      	ldr	r3, [r2, #0]
 800c658:	4610      	mov	r0, r2
 800c65a:	b933      	cbnz	r3, 800c66a <_free_r+0x2e>
 800c65c:	6063      	str	r3, [r4, #4]
 800c65e:	6014      	str	r4, [r2, #0]
 800c660:	4628      	mov	r0, r5
 800c662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c666:	f000 b8c8 	b.w	800c7fa <__malloc_unlock>
 800c66a:	42a3      	cmp	r3, r4
 800c66c:	d90c      	bls.n	800c688 <_free_r+0x4c>
 800c66e:	6821      	ldr	r1, [r4, #0]
 800c670:	1862      	adds	r2, r4, r1
 800c672:	4293      	cmp	r3, r2
 800c674:	bf04      	itt	eq
 800c676:	681a      	ldreq	r2, [r3, #0]
 800c678:	685b      	ldreq	r3, [r3, #4]
 800c67a:	6063      	str	r3, [r4, #4]
 800c67c:	bf04      	itt	eq
 800c67e:	1852      	addeq	r2, r2, r1
 800c680:	6022      	streq	r2, [r4, #0]
 800c682:	6004      	str	r4, [r0, #0]
 800c684:	e7ec      	b.n	800c660 <_free_r+0x24>
 800c686:	4613      	mov	r3, r2
 800c688:	685a      	ldr	r2, [r3, #4]
 800c68a:	b10a      	cbz	r2, 800c690 <_free_r+0x54>
 800c68c:	42a2      	cmp	r2, r4
 800c68e:	d9fa      	bls.n	800c686 <_free_r+0x4a>
 800c690:	6819      	ldr	r1, [r3, #0]
 800c692:	1858      	adds	r0, r3, r1
 800c694:	42a0      	cmp	r0, r4
 800c696:	d10b      	bne.n	800c6b0 <_free_r+0x74>
 800c698:	6820      	ldr	r0, [r4, #0]
 800c69a:	4401      	add	r1, r0
 800c69c:	1858      	adds	r0, r3, r1
 800c69e:	4282      	cmp	r2, r0
 800c6a0:	6019      	str	r1, [r3, #0]
 800c6a2:	d1dd      	bne.n	800c660 <_free_r+0x24>
 800c6a4:	6810      	ldr	r0, [r2, #0]
 800c6a6:	6852      	ldr	r2, [r2, #4]
 800c6a8:	605a      	str	r2, [r3, #4]
 800c6aa:	4401      	add	r1, r0
 800c6ac:	6019      	str	r1, [r3, #0]
 800c6ae:	e7d7      	b.n	800c660 <_free_r+0x24>
 800c6b0:	d902      	bls.n	800c6b8 <_free_r+0x7c>
 800c6b2:	230c      	movs	r3, #12
 800c6b4:	602b      	str	r3, [r5, #0]
 800c6b6:	e7d3      	b.n	800c660 <_free_r+0x24>
 800c6b8:	6820      	ldr	r0, [r4, #0]
 800c6ba:	1821      	adds	r1, r4, r0
 800c6bc:	428a      	cmp	r2, r1
 800c6be:	bf04      	itt	eq
 800c6c0:	6811      	ldreq	r1, [r2, #0]
 800c6c2:	6852      	ldreq	r2, [r2, #4]
 800c6c4:	6062      	str	r2, [r4, #4]
 800c6c6:	bf04      	itt	eq
 800c6c8:	1809      	addeq	r1, r1, r0
 800c6ca:	6021      	streq	r1, [r4, #0]
 800c6cc:	605c      	str	r4, [r3, #4]
 800c6ce:	e7c7      	b.n	800c660 <_free_r+0x24>
 800c6d0:	bd38      	pop	{r3, r4, r5, pc}
 800c6d2:	bf00      	nop
 800c6d4:	24000de0 	.word	0x24000de0

0800c6d8 <_malloc_r>:
 800c6d8:	b570      	push	{r4, r5, r6, lr}
 800c6da:	1ccd      	adds	r5, r1, #3
 800c6dc:	f025 0503 	bic.w	r5, r5, #3
 800c6e0:	3508      	adds	r5, #8
 800c6e2:	2d0c      	cmp	r5, #12
 800c6e4:	bf38      	it	cc
 800c6e6:	250c      	movcc	r5, #12
 800c6e8:	2d00      	cmp	r5, #0
 800c6ea:	4606      	mov	r6, r0
 800c6ec:	db01      	blt.n	800c6f2 <_malloc_r+0x1a>
 800c6ee:	42a9      	cmp	r1, r5
 800c6f0:	d903      	bls.n	800c6fa <_malloc_r+0x22>
 800c6f2:	230c      	movs	r3, #12
 800c6f4:	6033      	str	r3, [r6, #0]
 800c6f6:	2000      	movs	r0, #0
 800c6f8:	bd70      	pop	{r4, r5, r6, pc}
 800c6fa:	f000 f87d 	bl	800c7f8 <__malloc_lock>
 800c6fe:	4a21      	ldr	r2, [pc, #132]	; (800c784 <_malloc_r+0xac>)
 800c700:	6814      	ldr	r4, [r2, #0]
 800c702:	4621      	mov	r1, r4
 800c704:	b991      	cbnz	r1, 800c72c <_malloc_r+0x54>
 800c706:	4c20      	ldr	r4, [pc, #128]	; (800c788 <_malloc_r+0xb0>)
 800c708:	6823      	ldr	r3, [r4, #0]
 800c70a:	b91b      	cbnz	r3, 800c714 <_malloc_r+0x3c>
 800c70c:	4630      	mov	r0, r6
 800c70e:	f000 f863 	bl	800c7d8 <_sbrk_r>
 800c712:	6020      	str	r0, [r4, #0]
 800c714:	4629      	mov	r1, r5
 800c716:	4630      	mov	r0, r6
 800c718:	f000 f85e 	bl	800c7d8 <_sbrk_r>
 800c71c:	1c43      	adds	r3, r0, #1
 800c71e:	d124      	bne.n	800c76a <_malloc_r+0x92>
 800c720:	230c      	movs	r3, #12
 800c722:	6033      	str	r3, [r6, #0]
 800c724:	4630      	mov	r0, r6
 800c726:	f000 f868 	bl	800c7fa <__malloc_unlock>
 800c72a:	e7e4      	b.n	800c6f6 <_malloc_r+0x1e>
 800c72c:	680b      	ldr	r3, [r1, #0]
 800c72e:	1b5b      	subs	r3, r3, r5
 800c730:	d418      	bmi.n	800c764 <_malloc_r+0x8c>
 800c732:	2b0b      	cmp	r3, #11
 800c734:	d90f      	bls.n	800c756 <_malloc_r+0x7e>
 800c736:	600b      	str	r3, [r1, #0]
 800c738:	50cd      	str	r5, [r1, r3]
 800c73a:	18cc      	adds	r4, r1, r3
 800c73c:	4630      	mov	r0, r6
 800c73e:	f000 f85c 	bl	800c7fa <__malloc_unlock>
 800c742:	f104 000b 	add.w	r0, r4, #11
 800c746:	1d23      	adds	r3, r4, #4
 800c748:	f020 0007 	bic.w	r0, r0, #7
 800c74c:	1ac3      	subs	r3, r0, r3
 800c74e:	d0d3      	beq.n	800c6f8 <_malloc_r+0x20>
 800c750:	425a      	negs	r2, r3
 800c752:	50e2      	str	r2, [r4, r3]
 800c754:	e7d0      	b.n	800c6f8 <_malloc_r+0x20>
 800c756:	428c      	cmp	r4, r1
 800c758:	684b      	ldr	r3, [r1, #4]
 800c75a:	bf16      	itet	ne
 800c75c:	6063      	strne	r3, [r4, #4]
 800c75e:	6013      	streq	r3, [r2, #0]
 800c760:	460c      	movne	r4, r1
 800c762:	e7eb      	b.n	800c73c <_malloc_r+0x64>
 800c764:	460c      	mov	r4, r1
 800c766:	6849      	ldr	r1, [r1, #4]
 800c768:	e7cc      	b.n	800c704 <_malloc_r+0x2c>
 800c76a:	1cc4      	adds	r4, r0, #3
 800c76c:	f024 0403 	bic.w	r4, r4, #3
 800c770:	42a0      	cmp	r0, r4
 800c772:	d005      	beq.n	800c780 <_malloc_r+0xa8>
 800c774:	1a21      	subs	r1, r4, r0
 800c776:	4630      	mov	r0, r6
 800c778:	f000 f82e 	bl	800c7d8 <_sbrk_r>
 800c77c:	3001      	adds	r0, #1
 800c77e:	d0cf      	beq.n	800c720 <_malloc_r+0x48>
 800c780:	6025      	str	r5, [r4, #0]
 800c782:	e7db      	b.n	800c73c <_malloc_r+0x64>
 800c784:	24000de0 	.word	0x24000de0
 800c788:	24000de4 	.word	0x24000de4

0800c78c <_realloc_r>:
 800c78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c78e:	4607      	mov	r7, r0
 800c790:	4614      	mov	r4, r2
 800c792:	460e      	mov	r6, r1
 800c794:	b921      	cbnz	r1, 800c7a0 <_realloc_r+0x14>
 800c796:	4611      	mov	r1, r2
 800c798:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c79c:	f7ff bf9c 	b.w	800c6d8 <_malloc_r>
 800c7a0:	b922      	cbnz	r2, 800c7ac <_realloc_r+0x20>
 800c7a2:	f7ff ff4b 	bl	800c63c <_free_r>
 800c7a6:	4625      	mov	r5, r4
 800c7a8:	4628      	mov	r0, r5
 800c7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7ac:	f000 f826 	bl	800c7fc <_malloc_usable_size_r>
 800c7b0:	42a0      	cmp	r0, r4
 800c7b2:	d20f      	bcs.n	800c7d4 <_realloc_r+0x48>
 800c7b4:	4621      	mov	r1, r4
 800c7b6:	4638      	mov	r0, r7
 800c7b8:	f7ff ff8e 	bl	800c6d8 <_malloc_r>
 800c7bc:	4605      	mov	r5, r0
 800c7be:	2800      	cmp	r0, #0
 800c7c0:	d0f2      	beq.n	800c7a8 <_realloc_r+0x1c>
 800c7c2:	4631      	mov	r1, r6
 800c7c4:	4622      	mov	r2, r4
 800c7c6:	f7ff ff15 	bl	800c5f4 <memcpy>
 800c7ca:	4631      	mov	r1, r6
 800c7cc:	4638      	mov	r0, r7
 800c7ce:	f7ff ff35 	bl	800c63c <_free_r>
 800c7d2:	e7e9      	b.n	800c7a8 <_realloc_r+0x1c>
 800c7d4:	4635      	mov	r5, r6
 800c7d6:	e7e7      	b.n	800c7a8 <_realloc_r+0x1c>

0800c7d8 <_sbrk_r>:
 800c7d8:	b538      	push	{r3, r4, r5, lr}
 800c7da:	4c06      	ldr	r4, [pc, #24]	; (800c7f4 <_sbrk_r+0x1c>)
 800c7dc:	2300      	movs	r3, #0
 800c7de:	4605      	mov	r5, r0
 800c7e0:	4608      	mov	r0, r1
 800c7e2:	6023      	str	r3, [r4, #0]
 800c7e4:	f7f4 fcca 	bl	800117c <_sbrk>
 800c7e8:	1c43      	adds	r3, r0, #1
 800c7ea:	d102      	bne.n	800c7f2 <_sbrk_r+0x1a>
 800c7ec:	6823      	ldr	r3, [r4, #0]
 800c7ee:	b103      	cbz	r3, 800c7f2 <_sbrk_r+0x1a>
 800c7f0:	602b      	str	r3, [r5, #0]
 800c7f2:	bd38      	pop	{r3, r4, r5, pc}
 800c7f4:	2400125c 	.word	0x2400125c

0800c7f8 <__malloc_lock>:
 800c7f8:	4770      	bx	lr

0800c7fa <__malloc_unlock>:
 800c7fa:	4770      	bx	lr

0800c7fc <_malloc_usable_size_r>:
 800c7fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c800:	1f18      	subs	r0, r3, #4
 800c802:	2b00      	cmp	r3, #0
 800c804:	bfbc      	itt	lt
 800c806:	580b      	ldrlt	r3, [r1, r0]
 800c808:	18c0      	addlt	r0, r0, r3
 800c80a:	4770      	bx	lr

0800c80c <_init>:
 800c80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c80e:	bf00      	nop
 800c810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c812:	bc08      	pop	{r3}
 800c814:	469e      	mov	lr, r3
 800c816:	4770      	bx	lr

0800c818 <_fini>:
 800c818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c81a:	bf00      	nop
 800c81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c81e:	bc08      	pop	{r3}
 800c820:	469e      	mov	lr, r3
 800c822:	4770      	bx	lr
